// This file has been generated by the Phoenix 'AllInOne' Builder
jQuery.sap.declare('sap-ui-commons-all');
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuItemBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuItemBase.
jQuery.sap.declare("sap.ui.commons.MenuItemBase");
if ( !jQuery.sap.isDeclared('sap.ui.commons.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.commons (1.2.0)
 */
jQuery.sap.declare("sap.ui.commons.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with most common controls.
 *
 * @namespace
 * @name sap.ui.commons
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.commons",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.ui.commons.ButtonStyle",
    "sap.ui.commons.HorizontalDividerHeight",
    "sap.ui.commons.HorizontalDividerType",
    "sap.ui.commons.LabelDesign",
    "sap.ui.commons.MenuBarDesign",
    "sap.ui.commons.MessageType",
    "sap.ui.commons.Orientation",
    "sap.ui.commons.PaginatorEvent",
    "sap.ui.commons.RatingIndicatorVisualMode",
    "sap.ui.commons.RowRepeaterDesign",
    "sap.ui.commons.TextViewColor",
    "sap.ui.commons.TextViewDesign",
    "sap.ui.commons.ToolbarDesign",
    "sap.ui.commons.enums.AreaDesign",
    "sap.ui.commons.enums.BorderDesign",
    "sap.ui.commons.layout.BackgroundDesign",
    "sap.ui.commons.layout.BorderLayoutAreaTypes",
    "sap.ui.commons.layout.HAlign",
    "sap.ui.commons.layout.Padding",
    "sap.ui.commons.layout.Separation",
    "sap.ui.commons.layout.VAlign"
  ],
  interfaces: [
    "sap.ui.commons.ToolbarItem"
  ],
  controls: [
    "sap.ui.commons.Accordion",
    "sap.ui.commons.ApplicationHeader",
    "sap.ui.commons.Button",
    "sap.ui.commons.CheckBox",
    "sap.ui.commons.ComboBox",
    "sap.ui.commons.DatePicker",
    "sap.ui.commons.Dialog",
    "sap.ui.commons.DropdownBox",
    "sap.ui.commons.FileUploader",
    "sap.ui.commons.HorizontalDivider",
    "sap.ui.commons.Image",
    "sap.ui.commons.ImageMap",
    "sap.ui.commons.Label",
    "sap.ui.commons.Link",
    "sap.ui.commons.ListBox",
    "sap.ui.commons.Menu",
    "sap.ui.commons.MenuBar",
    "sap.ui.commons.MenuButton",
    "sap.ui.commons.Message",
    "sap.ui.commons.MessageBar",
    "sap.ui.commons.MessageList",
    "sap.ui.commons.MessageToast",
    "sap.ui.commons.Paginator",
    "sap.ui.commons.Panel",
    "sap.ui.commons.PasswordField",
    "sap.ui.commons.ProgressIndicator",
    "sap.ui.commons.RadioButton",
    "sap.ui.commons.RadioButtonGroup",
    "sap.ui.commons.RatingIndicator",
    "sap.ui.commons.RoadMap",
    "sap.ui.commons.RowRepeater",
    "sap.ui.commons.SearchField",
    "sap.ui.commons.Slider",
    "sap.ui.commons.Splitter",
    "sap.ui.commons.Tab",
    "sap.ui.commons.TabStrip",
    "sap.ui.commons.TextArea",
    "sap.ui.commons.TextField",
    "sap.ui.commons.TextView",
    "sap.ui.commons.ToggleButton",
    "sap.ui.commons.Toolbar",
    "sap.ui.commons.Tree",
    "sap.ui.commons.layout.AbsoluteLayout",
    "sap.ui.commons.layout.BorderLayout",
    "sap.ui.commons.layout.HorizontalLayout",
    "sap.ui.commons.layout.MatrixLayout",
    "sap.ui.commons.layout.VerticalLayout"
  ],
  elements: [
    "sap.ui.commons.AccordionSection",
    "sap.ui.commons.Area",
    "sap.ui.commons.MenuItem",
    "sap.ui.commons.MenuItemBase",
    "sap.ui.commons.RichTooltip",
    "sap.ui.commons.RoadMapStep",
    "sap.ui.commons.RowRepeaterFilter",
    "sap.ui.commons.RowRepeaterSorter",
    "sap.ui.commons.SearchProvider",
    "sap.ui.commons.Title",
    "sap.ui.commons.ToolbarSeparator",
    "sap.ui.commons.TreeNode",
    "sap.ui.commons.layout.BorderLayoutArea",
    "sap.ui.commons.layout.MatrixLayoutCell",
    "sap.ui.commons.layout.MatrixLayoutRow",
    "sap.ui.commons.layout.PositionContainer"
  ],
  version: "1.2.0"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.ButtonStyle.
jQuery.sap.declare("sap.ui.commons.ButtonStyle");

/**
 * @class different styles for a button.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.ButtonStyle = {
  
    /**
     * Button is emphasized. 
     * @public
     */
    Emph : "Emph",

    /**
     * Accept button (normally green). 
     * @public
     */
    Accept : "Accept",

    /**
     * Reject button (normally red). 
     * @public
     */
    Reject : "Reject",

    /**
     * default style (no special styling). 
     * @public
     */
    Default : "Default"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.HorizontalDividerHeight.
jQuery.sap.declare("sap.ui.commons.HorizontalDividerHeight");

/**
 * @class Enumeration of possible HorizontalDivider height settings.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.HorizontalDividerHeight = {
  
    /**
     * Divider gets no top and bottom margin. 
     * @public
     */
    Ruleheight : "Ruleheight",

    /**
     * Divider gets a small top and bottom margin. 
     * @public
     */
    Small : "Small",

    /**
     * Divider gets a medium top and bottom margin. 
     * @public
     */
    Medium : "Medium",

    /**
     * Divider gets a large top and bottom margin. 
     * @public
     */
    Large : "Large"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.HorizontalDividerType.
jQuery.sap.declare("sap.ui.commons.HorizontalDividerType");

/**
 * @class Enumeration of possible HorizontalDivider types.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.HorizontalDividerType = {
  
    /**
     * Type Area 
     * @public
     */
    Area : "Area",

    /**
     * Type Page 
     * @public
     */
    Page : "Page"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.LabelDesign.
jQuery.sap.declare("sap.ui.commons.LabelDesign");

/**
 * @class Available label display modes.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.LabelDesign = {
  
    /**
     * Displays the label in bold. 
     * @public
     */
    Bold : "Bold",

    /**
     * Displays the label in normal mode. 
     * @public
     */
    Standard : "Standard"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.MenuBarDesign.
jQuery.sap.declare("sap.ui.commons.MenuBarDesign");

/**
 * @class Determines the visual design of a MenuBar. The feature might be not supported by all themes.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.MenuBarDesign = {
  
    /**
     * The MenuBar appears in standard design. 
     * @public
     */
    Standard : "Standard",

    /**
     * The MenuBar appears in header design. 
     * @public
     */
    Header : "Header"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.MessageType.
jQuery.sap.declare("sap.ui.commons.MessageType");

/**
 * @class [Enter description for MessageType]
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.MessageType = {
  
    /**
     * Error message 
     * @public
     */
    Error : "Error",

    /**
     * Warning message 
     * @public
     */
    Warning : "Warning",

    /**
     * Successful message 
     * @public
     */
    Success : "Success"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.Orientation.
jQuery.sap.declare("sap.ui.commons.Orientation");

/**
 * @class Orientation of an UI element
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.Orientation = {
  
    /**
     * Arrange Horizontally 
     * @public
     */
    Horizontal : "Horizontal",

    /**
     * Arrange Vertically 
     * @public
     */
    Vertical : "Vertical"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.PaginatorEvent.
jQuery.sap.declare("sap.ui.commons.PaginatorEvent");

/**
 * @class Disctinct paginator event types
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.PaginatorEvent = {
  
    /**
     * First page event 
     * @public
     */
    First : "First",

    /**
     * Previous page event 
     * @public
     */
    Previous : "Previous",

    /**
     * Go to page event 
     * @public
     */
    Goto : "Goto",

    /**
     * Next page event 
     * @public
     */
    Next : "Next",

    /**
     * Last page event 
     * @public
     */
    Last : "Last"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.RatingIndicatorVisualMode.
jQuery.sap.declare("sap.ui.commons.RatingIndicatorVisualMode");

/**
 * @class Possible values for the visualization of float values in the RatingIndicator Control.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.RatingIndicatorVisualMode = {
  
    /**
     * Values are rounded to the nearest integer value (e.g. 1.7 -> 2). 
     * @public
     */
    Full : "Full",

    /**
     * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5). 
     * @public
     */
    Half : "Half",

    /**
     * Values are not rounded. 
     * @public
     */
    Continuous : "Continuous"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.RowRepeaterDesign.
jQuery.sap.declare("sap.ui.commons.RowRepeaterDesign");

/**
 * @class Determines the visual design of a RowRepeater.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.RowRepeaterDesign = {
  
    /**
     * The RowRepeater header and footer elements, as well as the row container background, appear solid. 
     * @public
     */
    Standard : "Standard",

    /**
     * The RowRepeater header and footer elements, as well as the row container background, appear transparent. 
     * @public
     */
    Transparent : "Transparent",

    /**
     * The RowRepeater will be displayed without header, toolbar or footer. Background will be transparent. 
     * @public
     */
    BareShell : "BareShell"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TextViewColor.
jQuery.sap.declare("sap.ui.commons.TextViewColor");

/**
 * @class Semantic Colors of a text.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.TextViewColor = {
  
    /**
     * Default color 
     * @public
     */
    Default : "Default",

    /**
     * Positive color 
     * @public
     */
    Positive : "Positive",

    /**
     * Negative color 
     * @public
     */
    Negative : "Negative",

    /**
     * Critical color 
     * @public
     */
    Critical : "Critical"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TextViewDesign.
jQuery.sap.declare("sap.ui.commons.TextViewDesign");

/**
 * @class Designs for TextView.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.TextViewDesign = {
  
    /**
     * Displays the text in standard letters. 
     * @public
     */
    Standard : "Standard",

    /**
     * Displays the text in bold letters 
     * @public
     */
    Bold : "Bold",

    /**
     * Displays the text in header 1 letters. 
     * @public
     */
    H1 : "H1",

    /**
     * Displays the text in header 2 letters. 
     * @public
     */
    H2 : "H2",

    /**
     * Displays the text in header 3 letters. 
     * @public
     */
    H3 : "H3",

    /**
     * Displays the text in header 4 letters. 
     * @public
     */
    H4 : "H4",

    /**
     * Displays the text in italic letters 
     * @public
     */
    Italic : "Italic",

    /**
     * Displays the text in smaller letters. 
     * @public
     */
    Small : "Small",

    /**
     * Displays the text in monospace letters. 
     * @public
     */
    Monospace : "Monospace",

    /**
     * underlined Text 
     * @public
     */
    Underline : "Underline"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.ToolbarDesign.
jQuery.sap.declare("sap.ui.commons.ToolbarDesign");

/**
 * @class Determines the visual design of a Toolbar.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.ToolbarDesign = {
  
    /**
     * The toolbar elements such as buttons for example have their normal visual design, and the toolbar appears solid.
     * The feature might be not supported by all themes. 
     * @public
     */
    Standard : "Standard",

    /**
     * The controls included in the toolbar have a normal visual design where the toolbar appears transparent.
     * The feature might be not supported by all themes.
     *  
     * @public
     */
    Transparent : "Transparent",

    /**
     * The included controls have a very light appearance. The feature might be not supported by all themes. 
     * @public
     */
    Flat : "Flat"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.enums.AreaDesign.
jQuery.sap.declare("sap.ui.commons.enums.AreaDesign");

/**
 * @class Possible values for the background design of areas
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.enums.AreaDesign = {
  
    /**
     * Shows the area in a plain look. 
     * @public
     */
    Plain : "Plain",

    /**
     * Shows the label in a filled look. 
     * @public
     */
    Fill : "Fill",

    /**
     * Shows the area background as transparent. 
     * @public
     */
    Transparent : "Transparent"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.enums.BorderDesign.
jQuery.sap.declare("sap.ui.commons.enums.BorderDesign");

/**
 * @class Possible values for the border design of areas
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.enums.BorderDesign = {
  
    /**
     * Draws the border as a box around the area. 
     * @public
     */
    Box : "Box",

    /**
     * Suppresses the border. 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.BackgroundDesign.
jQuery.sap.declare("sap.ui.commons.layout.BackgroundDesign");

/**
 * @class
 * Background design (i.e. color), e.g. of a layout cell.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.BackgroundDesign = {
  
    /**
     * 
     * A background design suitable for borders.
     *  
     * @public
     */
    Border : "Border",

    /**
     * 
     * An opaque background design that looks dark filled.
     *  
     * @public
     */
    Fill1 : "Fill1",

    /**
     * 
     * An opaque background design that looks medium filled.
     *  
     * @public
     */
    Fill2 : "Fill2",

    /**
     * 
     * An opaque background design that looks light filled.
     *  
     * @public
     */
    Fill3 : "Fill3",

    /**
     * 
     * A background design suitable for headers.
     *  
     * @public
     */
    Header : "Header",

    /**
     * 
     * A plain but opaque background design.
     *  
     * @public
     */
    Plain : "Plain",

    /**
     * 
     * A transparent background.
     *  
     * @public
     */
    Transparent : "Transparent"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.BorderLayoutAreaTypes.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutAreaTypes");

/**
 * @class The type (=position) of a BorderLayoutArea
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.BorderLayoutAreaTypes = {
  
    /**
     * Value to identify the top area. 
     * @public
     */
    top : "top",

    /**
     * Value to identify the begin area. 
     * @public
     */
    begin : "begin",

    /**
     * Value to identify the center area. 
     * @public
     */
    center : "center",

    /**
     * Value to identify the end area. 
     * @public
     */
    end : "end",

    /**
     * Value to identify the bottom area. 
     * @public
     */
    bottom : "bottom"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.HAlign.
jQuery.sap.declare("sap.ui.commons.layout.HAlign");

/**
 * @class
 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
 * Note that some values depend on the current locale's writing direction while
 * others do not.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.HAlign = {
  
    /**
     * 
     * Aligned towards the beginning of a line, in the current locale's writing direction.
     *  
     * @public
     */
    Begin : "Begin",

    /**
     * 
     * Horizontally centered.
     *  
     * @public
     */
    Center : "Center",

    /**
     * 
     * Aligned towards the end of a line, in the current locale's writing direction.
     *  
     * @public
     */
    End : "End",

    /**
     * 
     * Left aligned, regardless of the current locale's writing direction.
     *  
     * @public
     */
    Left : "Left",

    /**
     * 
     * Right aligned, regardless of the current locale's writing direction.
     *  
     * @public
     */
    Right : "Right"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.Padding.
jQuery.sap.declare("sap.ui.commons.layout.Padding");

/**
 * @class
 * Padding, e.g. of a layout cell's content within the cell's borders.
 * Note that all options except "None" include a padding of 2px at the top and
 * bottom, and differ only in the presence of a 4px padding towards the beginning
 * or end of a line, in the current locale's writing direction.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.Padding = {
  
    /**
     * 
     * No padding at all.
     *  
     * @public
     */
    None : "None",

    /**
     * 
     * Top and bottom padding of 2px.
     * Padding of 4px towards the beginning of a line, in the current locale's
     * writing direction, but none towards its end.
     *  
     * @public
     */
    Begin : "Begin",

    /**
     * 
     * Top and bottom padding of 2px.
     * Padding of 4px towards the end of a line, in the current locale's
     * writing direction, but none towards its beginning.
     *  
     * @public
     */
    End : "End",

    /**
     * 
     * Top and bottom padding of 2px.
     * Padding of 4px towards both the beginning and end of a line.
     *  
     * @public
     */
    Both : "Both",

    /**
     * 
     * Top and bottom padding of 2px.
     * No padding towards neither the beginning nor end of a line.
     *  
     * @public
     */
    Neither : "Neither"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.Separation.
jQuery.sap.declare("sap.ui.commons.layout.Separation");

/**
 * @class
 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
 * defined width, with or without a vertical line in its middle.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.Separation = {
  
    /**
     * 
     * No gutter at all (0px), and without a vertical line, of course.
     *  
     * @public
     */
    None : "None",

    /**
     * 
     * A small (17px) vertical gutter without a vertical line.
     *  
     * @public
     */
    Small : "Small",

    /**
     * 
     * A small (17px) vertical gutter with a vertical line in its middle.
     *  
     * @public
     */
    SmallWithLine : "SmallWithLine",

    /**
     * 
     * A medium (31px) vertical gutter without a vertical line.
     *  
     * @public
     */
    Medium : "Medium",

    /**
     * 
     * A medium (31px) vertical gutter with a vertical line in its middle.
     *  
     * @public
     */
    MediumWithLine : "MediumWithLine",

    /**
     * 
     * A large (63px) vertical gutter without a vertical line.
     *  
     * @public
     */
    Large : "Large",

    /**
     * 
     * A large (63px) vertical gutter with a vertical line in its middle.
     *  
     * @public
     */
    LargeWithLine : "LargeWithLine"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.VAlign.
jQuery.sap.declare("sap.ui.commons.layout.VAlign");

/**
 * @class
 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.commons.layout.VAlign = {
  
    /**
     * 
     * Aligned at the bottom.
     *  
     * @public
     */
    Bottom : "Bottom",

    /**
     * 
     * Vertically centered.
     *  
     * @public
     */
    Middle : "Middle",

    /**
     * 
     * Aligned at the top.
     *  
     * @public
     */
    Top : "Top"

  };
  

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// lazy imports for MessageBox
sap.ui.lazyRequire("sap.ui.commons.MessageBox", "alert confirm show");

//map the Orientation enum to new enums with uppercase
sap.ui.commons.Orientation.vertical = sap.ui.commons.Orientation.Vertical;
sap.ui.commons.Orientation.horizontal = sap.ui.commons.Orientation.Horizontal;

}; // end of sap.ui.commons.library

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new MenuItemBase.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li>
 * <li>startsSection : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>submenu : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Provides the standard properties for menu items.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MenuItemBase = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MenuItemBase.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.MenuItemBase. 
 * Resulting metadata can be obtained via sap.ui.commons.MenuItemBase.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MenuItemBase", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getEnabled", "setEnabled", "getVisible", "setVisible", "getStartsSection", "setStartsSection", 
    // aggregations
    "getSubmenu", "setSubmenu", "destroySubmenu", 
    // associations
    
    // events
    "attachSelect", "detachSelect"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "startsSection" : {name : "startsSection", type : "boolean", group : "Behavior", defaultValue : false}
  },
  defaultAggregation : "submenu",
  aggregations : {
    "submenu" : {name : "submenu", type : "sap.ui.commons.Menu", multiple : false}
  },
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.commons.MenuItemBase.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled items have different colors, depending on customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.MenuItemBase.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible controls are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.MenuItemBase.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>startsSection</code>.
 * 
 * If set to true, a divider is displayed before the item
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>startsSection</code>
 * @public
 * 
 */
sap.ui.commons.MenuItemBase.prototype.getStartsSection = function() {
	return this.getProperty("startsSection");
};

/**
 * Setter for property <code>startsSection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStartsSection  new value for property <code>startsSection</code>
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.setStartsSection = function(bStartsSection) {
	this.setProperty("startsSection", bStartsSection);
	return this;
};

	
/**
 * Getter for aggregation <code>submenu</code>.<br/>
 * Aggregation of a menu item's sub menu.
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.getSubmenu = function() {
	return this.getAggregation("submenu", null);
};


/**
 * Setter for the aggregated <code>submenu</code>.
 * @param oSubmenu {sap.ui.commons.Menu}
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.setSubmenu = function(oSubmenu) {
	this.setAggregation("submenu", oSubmenu);
	return this;
};
	

/**
 * Destroys the submenu in the aggregation 
 * named <code>submenu</code>.
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.destroySubmenu = function() {
	this.destroyAggregation("submenu");
	return this;
};


/**
 * Event is fired when an item is selected. The event is also available for items having a sub menu.
 * A mouse click or space bar click on a sub menu item fires the event.
 *  
 *
 * @name sap.ui.commons.MenuItemBase#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item Represents the current item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.MenuItemBase</code>.<br/>
 * Event is fired when an item is selected. The event is also available for items having a sub menu.
 * A mouse click or space bar click on a sub menu item fires the event.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.MenuItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItemBase.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> Represents the current item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MenuItemBase} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.MenuItemBase.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


// Start of sap/ui/commons/MenuItemBase.js
sap.ui.commons.MenuItemBase.prototype.init = function(){
   // do something for initialization...
};

sap.ui.commons.MenuItemBase.prototype.render = function(oRenderManager, oItem, oMenu){
	// Subclasses have to override this
	var rm = oRenderManager;
	rm.write("<li");
	rm.writeControlData(oItem);
	rm.write("><div style=\"white-space:nowrap;display:inline-block;padding:1px;color:black;\" id=\""+this.getId()+"-txt\">");
	rm.write(oItem.getId());
	if(this.getSubmenu()){
		rm.write("&nbsp;&nbsp;->");
	}
	rm.write("</div></li>");
};

/**
 * @protected
 */
sap.ui.commons.MenuItemBase.prototype.hover = function(bHovered, oMenu){
	// Subclasses have to override this
	jQuery.sap.byId(this.getId()+"-txt").attr("style", bHovered ? "white-space:nowrap;display:inline-block;padding:1px;color:red;" : "white-space:nowrap;display:inline-block;padding:1px;color:black;");
};
}; // end of sap.ui.commons.MenuItemBase
if ( !jQuery.sap.isDeclared('sap.ui.commons.Menu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Menu.
jQuery.sap.declare("sap.ui.commons.Menu");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Menu.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>enabled : boolean</li>
 * <li>ariaDescription : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.commons.MenuItemBase</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>itemSelect : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A container for menu items. When the space in the browser is not large enough to display all defined items, a scroll bar is provided.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Menu = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Menu.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Menu. 
 * Resulting metadata can be obtained via sap.ui.commons.Menu.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Menu", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getEnabled", "setEnabled", "getAriaDescription", "setAriaDescription", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", 
    // associations
    
    // events
    "attachItemSelect", "detachItemSelect", 
    // methods
    "open", "close"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "ariaDescription" : {name : "ariaDescription", type : "string", group : "Accessibility", defaultValue : null}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.commons.MenuItemBase", multiple : true, singularName : "item"}
  },
  associations : {},
  events : {
    "itemSelect" : "itemSelect"
  }

});	

sap.ui.commons.Menu.M_EVENTS = {'itemSelect':'itemSelect'};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled menus have other colors than enabled ones, depending on customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.Menu.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>ariaDescription</code>.
 * 
 * The label/description provided for screen readers
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>ariaDescription</code>
 * @public
 * 
 */
sap.ui.commons.Menu.prototype.getAriaDescription = function() {
	return this.getProperty("ariaDescription");
};

/**
 * Setter for property <code>ariaDescription</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAriaDescription  new value for property <code>ariaDescription</code>
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.setAriaDescription = function(sAriaDescription) {
	this.setProperty("ariaDescription", sAriaDescription);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of menu items
 * 
 * @return {sap.ui.commons.MenuItemBase[]}
 * @public
 */
sap.ui.commons.Menu.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.MenuItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.MenuItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Menu.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItemBase} vItem the item to remove or its index or id
 * @return {sap.ui.commons.MenuItemBase} the removed item or null
 * @public
 */
sap.ui.commons.Menu.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItemBase[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Menu.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.commons.MenuItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Menu.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * 
 * Provides the application an alternative option to listen to select events. This event is only fired on the root menu of a menu hierarchy.
 * Note that there is also a select event available for MenuItem; if the current event is used, the select event of a MenuItem becomes redundant.
 *  
 *
 * @name sap.ui.commons.Menu#itemSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'itemSelect' event of this <code>sap.ui.commons.Menu</code>.<br/>
 * 
 * Provides the application an alternative option to listen to select events. This event is only fired on the root menu of a menu hierarchy.
 * Note that there is also a select event available for MenuItem; if the current event is used, the select event of a MenuItem becomes redundant.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.attachItemSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("itemSelect", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'itemSelect' event of this <code>sap.ui.commons.Menu</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Menu.prototype.detachItemSelect = function(fnFunction, oListener) {
	this.detachEvent("itemSelect", fnFunction, oListener);
	return this;	
};

/**
 * Fire event itemSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Menu} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Menu.prototype.fireItemSelect = function(mArguments) {
	this.fireEvent("itemSelect", mArguments);
	return this;
};


/**
 * Opens the menu
 *
 * @name sap.ui.commons.Menu.prototype.open
 * @function
 * @param {boolean} 
 *         bWithKeyboard
 *         
 * An indicator whether the first item shall be highlighted, or not. It is highlighted in the case that the menu is opened via keyboard.
 * 
 * @param {object} 
 *         sOpenerRef
 *         
 * DOMNode that opens the menu; the DOMNode will be focused again after the menu is closed. This parameter is optional.
 * 
 * @param {string} 
 *         sMy
 *         
 * The popup content's reference position for docking.
 * See also sap.ui.core.Popup.Dock and sap.ui.core.Popup.open.
 * 
 * @param {string} 
 *         sAt
 *         
 * The 'of' element's reference point for docking to.
 * See also sap.ui.core.Popup.Dock and sap.ui.core.Popup.open.
 * 
 * @param {string} 
 *         sOf
 *         
 * The DOM element or control to dock to.
 * See also sap.ui.core.Popup.open.
 * 
 * @param {string} 
 *         sOffset
 *         
 * The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right).
 * See also sap.ui.core.Popup.open.
 * 

 * @type void
 * @public
 */


/**
 * Closes the menu
 *
 * @name sap.ui.commons.Menu.prototype.close
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/Menu.js

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.ui.commons.Menu.prototype.init = function(){
	this.bOpen = false;
	this.oOpenedSubMenu = null;
	this.oHoveredItem = null;
	this.oPopup = null; // Will be created lazily
	this.fAnyEventHandlerProxy = jQuery.proxy(this.onAnyEvent, this);
	this.bUseTopStyle = false;
};

/**
 * Does all the cleanup when the Menu is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.Menu.prototype.exit = function(){
	if(this.oPopup){
		this.oPopup.destroy();
	}
	if(this.fAnyEventHandlerProxy){
		jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
	}
	// Cleanup resize event registration
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

//TODO: Should the static UI Area be able to rerender invalid controls -> maybe extend popup/static UIArea
sap.ui.commons.Menu.prototype._invalidate = sap.ui.commons.Menu.prototype.invalidate;

/**
 * @protected
 */
sap.ui.commons.Menu.prototype.invalidate = function() {
	var oParent = this.getParent();
	if(!oParent && this.getDomRef()){
		//Control is used without being attached to the control tree
		jQuery.sap.delayedCall(0, this, "rerender");
	}else{
		this._invalidate();
	}
};

/**
 * Called before rendering starts by the renderer
 * @private
 */
sap.ui.commons.Menu.prototype.onBeforeRendering = function() {
	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

/**
 * Called when the rendering is complete
 * @private
 */
sap.ui.commons.Menu.prototype.onAfterRendering = function() {
	//Might be in the end not a good idea to listen for resizing the body / window because the body might change its size
	//during a menu is opened (which then closes the menu again):

	//Listen to resizing of the document
	//if(this.getRootMenu() == this)
	//	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.browser.msie ? window : jQuery("body").get(0), jQuery.proxy(this.onresize, this));
};

///**
// * Called when the control is resized
// * @private
// */
//sap.ui.commons.Menu.prototype.onresize = function(oEvent) {
//	if(!this.bOpen) return;
//	this.close();
//};


//****** API Methods ******

sap.ui.commons.Menu.prototype.open = function(bWithKeyboard, oOpenerRef, my, at, of, offset){
	if(this.bOpen) {
		return;
	}

	this.bOpen = true;
	this.oOpenerRef = oOpenerRef;

	// Open the sap.ui.core.Popup
	this.getPopup().open(0, my, at, of, offset);

	// Mark the first item when using the keyboard
	if (bWithKeyboard) {
		this.setHoveredItem(this.getNextVisibleItem(-1));
	}

	// Set the tab index of the menu and focus
	var oDomRef = this.getDomRef();
	jQuery(oDomRef).attr("tabIndex", 0).focus();
	jQuery.sap.bindAnyEvent(this.fAnyEventHandlerProxy);
};

sap.ui.commons.Menu.prototype.close = function() {
	if(!this.bOpen) {
		return;
	}

	if(this.fAnyEventHandlerProxy){
		jQuery.sap.unbindAnyEvent(this.onAnyEvent);
	}

	this.bOpen = false;
	// Close all sub menus if there are any
	if(this.oOpenedSubMenu) {
		this.oOpenedSubMenu.close();
	}

	// Reset the hover state
	this.setHoveredItem();

	// Reset the tab index of the menu and focus the opener (if there is any)
	jQuery(this.getDomRef()).attr("tabIndex", -1);
	if(this.oOpenerRef && !this.ignoreOpenerDOMRef) {
		this.oOpenerRef.focus();
	}
	this.oOpenerRef = undefined;

	// Close the sap.ui.core.Popup
	this.getPopup().close(0);

	if(this.isSubMenu()){
		this.getParent().getParent().oOpenedSubMenu = null;
	}
};

//****** Event Handlers ******

sap.ui.commons.Menu.prototype.onclick = function(oEvent){
	this.selectItem(this.getItemByDomRef(oEvent.target), false);
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsapnext = function(oEvent){
	//right or down (RTL: left or down)
	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_DOWN){
		//Go to sub menu if available
		if(this.oHoveredItem && this.oHoveredItem.getSubmenu() && this.checkEnabled(this.oHoveredItem)){
			this.openSubmenu(this.oHoveredItem, true);
			return;
		}
	}

	//Go to the next visible item
	var iIdx = this.oHoveredItem ? this.indexOfAggregation("items", this.oHoveredItem) : -1;
	this.setHoveredItem(this.getNextVisibleItem(iIdx));
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsapprevious = function(oEvent){
	//left or up (RTL: right or up)
	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_UP){
		//Go to parent menu if this is a sub menu
		if(this.isSubMenu()){
			this.close();
			oEvent.preventDefault();
			oEvent.stopPropagation();
			return;
		}
	}

	//Go to the previous visible item
	var iIdx = this.oHoveredItem ? this.indexOfAggregation("items", this.oHoveredItem) : -1;
	this.setHoveredItem(this.getPreviousVisibleItem(iIdx));
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsaphome = function(oEvent){
	//Go to the first visible item
	var aItems = this.getItems();
	var oItem = null;
	for(var i=0; i<aItems.length; i++){
		if(aItems[i].getVisible()){
			oItem = aItems[i];
			break;
		}
	}

	this.setHoveredItem(oItem);
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsapend = function(oEvent){
	//Go to the last visible item
	var aItems = this.getItems();
	var oItem = null;
	for(var i=aItems.length-1; i>=0; i--){
		if(aItems[i].getVisible()){
			oItem = aItems[i];
			break;
		}
	}

	this.setHoveredItem(oItem);
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsapselect = function(oEvent){
	this._sapSelectOnKeyDown = true;
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onkeyup = function(oEvent){
	//like sapselect but on keyup:
	//Using keydown has the following side effect:
	//If the selection leads to a close of the menu and the focus is restored to the caller (e.g. a button)
	//the keyup is fired on the caller (in case of a button a click event is fired there in FF -> Bad!)
	//The attribute _sapSelectOnKeyDown is used to avoid the problem the other way round (Space is pressed
	//on Button which opens the menu and the space keyup immediately selects the first item)
	if(!this._sapSelectOnKeyDown){
		return;
	}else{
		this._sapSelectOnKeyDown = false;
	}
	if(!jQuery.sap.PseudoEvents.sapselect.fnCheck(oEvent)) {
		return;
	}
	this.selectItem(this.oHoveredItem, true);
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onsapescape = function(oEvent){
	this.close();
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

sap.ui.commons.Menu.prototype.onmouseover = function(oEvent){
	var oItem = this.getItemByDomRef(oEvent.target);
	if(!this.bOpen || !oItem || oItem == this.oHoveredItem) {
		return;
	}

	if(this.oOpenedSubMenu && jQuery.sap.containsOrEquals(this.oOpenedSubMenu.getDomRef(), oEvent.target)) {
		return;
	}

	this.setHoveredItem(oItem);

	if (this.oOpenedSubMenu) {
		this.oOpenedSubMenu.close();
		this.oOpenedSubMenu = null;
	}

	this.getDomRef().focus();

	if(this.checkEnabled(oItem)) {
		this.openSubmenu(oItem, false);
	}
};

sap.ui.commons.Menu.prototype.onmouseout = function(oEvent){
	if(jQuery.sap.checkMouseEnterOrLeave(oEvent, this.getDomRef())){
		if(!this.oOpenedSubMenu || !this.oOpenedSubMenu.getParent() === this.oHoveredItem) {
			this.setHoveredItem(null);
		}
	}
};

/**
 * Handles the outer event of the popup.
 * @param {sap.ui.core.Event} oControlEvent The event
 * @private
 */
sap.ui.commons.Menu.prototype.onAnyEvent = function(oEvent){
	if(!this.bOpen || oEvent.type != "mousedown") {
		return;
	}
	var oSource = oEvent.target, oDomRef = this.getDomRef();
	if(!jQuery.sap.containsOrEquals(oDomRef, oSource) || oSource.tagName=="BODY"){
		this.getRootMenu().handleOuterEvent(this.getId(), oEvent);
	}
};

/**
 * Handles the onsapfocusleave event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Menu.prototype.onsapfocusleave = function(oEvent){
	// Only the deepest opened sub menu should handle the event or ignore the event from an item
	if(this.oOpenedSubMenu || !this.bOpen) {
		return;
	}
	this.getRootMenu().handleOuterEvent(this.getId(), oEvent);
};

//****** Helper Methods ******

sap.ui.commons.Menu.prototype.handleOuterEvent = function(oMenuId, oEvent){
	var isInMenuHierarchy = false;
	if (oEvent.type == "mousedown"){
		var currentMenu = this;
		while(currentMenu){
			if(jQuery.sap.containsOrEquals(currentMenu.getDomRef(), oEvent.target)){
				isInMenuHierarchy = true;
			}
			currentMenu = currentMenu.oOpenedSubMenu;
		}
	}else if (oEvent.type == "sapfocusleave"){
		if(oEvent.relatedControlId){
			var currentMenu = this;
			while(currentMenu){
				if((currentMenu.oOpenedSubMenu && currentMenu.oOpenedSubMenu.getId() == oEvent.relatedControlId)
						|| jQuery.sap.containsOrEquals(currentMenu.getDomRef(), jQuery.sap.byId(oEvent.relatedControlId).get(0))){
					isInMenuHierarchy = true;
				}
				currentMenu = currentMenu.oOpenedSubMenu;
			}
		}
	}

	if(!isInMenuHierarchy) {
		this.ignoreOpenerDOMRef = true;
		this.close();
		this.ignoreOpenerDOMRef = false;
	}
};

sap.ui.commons.Menu.prototype.getItemByDomRef = function(oDomRef){
	var oItems = this.getItems(),
		iLength = oItems.length;
	for(var i=0;i<iLength;i++){
		var oItem = oItems[i],
			oItemRef = oItem.getDomRef();
		if(jQuery.sap.containsOrEquals(oItemRef, oDomRef)) {
			return oItem;
		}
	}
	return null;
};

sap.ui.commons.Menu.prototype.selectItem = function(oItem, bWithKeyboard){
	if(!oItem || !(oItem instanceof sap.ui.commons.MenuItemBase && this.checkEnabled(oItem))) {
		return;
	}

	var oSubMenu = oItem.getSubmenu();

	if(!oSubMenu){
		// This is a normal item -> Close all menus and fire event.
		this.getRootMenu().close();
	}else{
		// Item with sub menu was triggered -> Open sub menu and fire event.
		this.openSubmenu(oItem, bWithKeyboard);
	}

	oItem.fireSelect({item: oItem});
	this.getRootMenu().fireItemSelect({item: oItem});
};

sap.ui.commons.Menu.prototype.isSubMenu = function(){
	return this.getParent() && this.getParent().getParent && this.getParent().getParent() instanceof sap.ui.commons.Menu;
};

sap.ui.commons.Menu.prototype.getRootMenu = function(){
	var oMenu = this;
	while(oMenu.isSubMenu()){
		oMenu = oMenu.getParent().getParent();
	}
	return oMenu;
};

sap.ui.commons.Menu.prototype.getMenuLevel = function(){
	var iLevel = 1;
	var oMenu = this;
	while(oMenu.isSubMenu()){
		oMenu = oMenu.getParent().getParent();
		iLevel++;
	}
	return iLevel;
};

sap.ui.commons.Menu.prototype.getPopup = function (){
	if(!this.oPopup){
		this.oPopup = new sap.ui.core.Popup(this, false, true); // content, modal, shadow
	}
	return this.oPopup;
};

sap.ui.commons.Menu.prototype.setHoveredItem = function(oItem){
	if(this.oHoveredItem) {
		this.oHoveredItem.hover(false, this);
	}

	if(!oItem){
		this.oHoveredItem = null;
		jQuery(this.getDomRef()).removeAttr("aria-activedescendant");
		return;
	}

	this.oHoveredItem = oItem;
	oItem.hover(true, this);
	if(sap.ui.getCore().getConfiguration().getAccessibility()) {
		jQuery(this.getDomRef()).attr("aria-activedescendant", this.oHoveredItem.getId());
	}
};

sap.ui.commons.Menu.prototype.openSubmenu = function(oItem, bWithKeyboard){
	var oSubMenu = oItem.getSubmenu();
	if(!oSubMenu) {
		return;
	}

	if(this.oOpenedSubMenu === oSubMenu){
		// Sub menu is already open. Close it.
		this.oOpenedSubMenu = null;
		oSubMenu.close();
	}else{
		if(this.oOpenedSubMenu){
			// Another sub menu is open. Close it at first.
			this.oOpenedSubMenu.close();
			this.oOpenedSubMenu = null;
		}
		// Open the sub menu
		this.oOpenedSubMenu = oSubMenu;
		var eDock = sap.ui.core.Popup.Dock;
		oSubMenu.open(bWithKeyboard, this.getDomRef(), eDock.BeginTop, eDock.EndTop, oItem.getDomRef(), "0 0");
	}
};

sap.ui.commons.Menu.prototype.checkEnabled = function(oItem){
	return oItem && oItem.getEnabled() && this.getEnabled();
};

sap.ui.commons.Menu.prototype.getNextVisibleItem = function(iIdx){
	var oItem = null;
	var aItems = this.getItems();

	// At first, start with the next index
	for(var i=iIdx+1; i<aItems.length; i++){
		if(aItems[i].getVisible()){
			oItem = aItems[i];
			break;
		}
	}

	// If nothing found, start from the beginning
	if(!oItem){
		for(var i=0; i<=iIdx; i++){
			if(aItems[i].getVisible()){
				oItem = aItems[i];
				break;
			}
		}
	}

	return oItem;
};

sap.ui.commons.Menu.prototype.getPreviousVisibleItem = function(iIdx){
	var oItem = null;
	var aItems = this.getItems();

	// At first, start with the previous index
	for(var i=iIdx-1; i>=0; i--){
		if(aItems[i].getVisible()){
			oItem = aItems[i];
			break;
		}
	}

	// If nothing found, start from the end
	if(!oItem){
		for(var i=aItems.length-1; i>=iIdx; i--){
			if(aItems[i].getVisible()){
				oItem = aItems[i];
				break;
			}
		}
	}

	return oItem;
};

sap.ui.commons.Menu.prototype.setRootMenuTopStyle = function(bUseTopStyle){
	this.getRootMenu().bUseTopStyle = bUseTopStyle;
	sap.ui.commons.Menu.rerenderMenu(this.getRootMenu());
};


sap.ui.commons.Menu.rerenderMenu = function(oMenu){
	var aItems = oMenu.getItems();
	for(var i=0; i<aItems.length; i++){
		var oSubMenu = aItems[i].getSubmenu();
		if(oSubMenu) {
			sap.ui.commons.Menu.rerenderMenu(oSubMenu);
		}
	}

	oMenu.invalidate();
	oMenu.rerender();
};
}; // end of sap.ui.commons.Menu
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuItem.
jQuery.sap.declare("sap.ui.commons.MenuItem");



/**
 * Constructor for a new MenuItem.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>icon : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.MenuItemBase#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Smallest unit in the menu hierarchy. An item can be a direct part of a menu bar, of a menu, or of a sub menu.
 * 
 * @extends sap.ui.commons.MenuItemBase
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MenuItem = function (sId, mSettings) {
	sap.ui.commons.MenuItemBase.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MenuItem.prototype = jQuery.sap.newObject(sap.ui.commons.MenuItemBase.prototype);

/*
 * Describe the sap.ui.commons.MenuItem. 
 * Resulting metadata can be obtained via sap.ui.commons.MenuItem.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MenuItem", {

  // ---- object ----
  baseType : "sap.ui.commons.MenuItemBase",
  publicMethods : [
    // properties 
    "getText", "setText", "getIcon", "setIcon"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : ''},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : ''}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * 
 * Item text
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.MenuItem.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.MenuItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItem.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * 
 * Icon to be displayed
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.MenuItem.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.MenuItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuItem.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


// Start of sap/ui/commons/MenuItem.js
sap.ui.commons.MenuItem.prototype.render = function(oRenderManager, oItem, oMenu, oInfo){
	var rm = oRenderManager;
	var oSubMenu = oItem.getSubmenu();
	rm.write("<li ");
	rm.writeAttribute("class", "sapUiMnuItm" + (oMenu.checkEnabled(oItem) ? "" : " sapUiMnuItmDsbl"));
	if(oItem.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oItem.getTooltip_AsString());
	}
	rm.writeControlData(oItem);

	// ARIA
	if(oInfo.bAccessible){
		rm.writeAttribute("role", "menuitem");
		rm.writeAttribute("aria-labelledby", oMenu.getId()+" "+this.getId()+"-txt "+this.getId()+"-scuttxt");
		rm.writeAttribute("aria-disabled", !oMenu.checkEnabled(oItem));
		rm.writeAttribute("aria-posinset", oInfo.iItemNo);
		rm.writeAttribute("aria-setsize", oInfo.iTotalItems);
		if (oSubMenu) {
			rm.writeAttribute("aria-haspopup", true);
		}
	}

	// Left border
	rm.write("><div class=\"sapUiMnuItmL\"></div>");

	// icon/check column
	rm.write("<div class=\"sapUiMnuItmIco\">");
	if (oItem.getIcon()) {
		rm.write("<img");
		rm.writeAttributeEscaped("src", oItem.getIcon());
		rm.write("/>");
	}
	rm.write("</div>");

	// Text column
	rm.write("<div id=\""+this.getId()+"-txt\" class=\"sapUiMnuItmTxt\">");
	rm.writeEscaped(oItem.getText());
	rm.write("</div>");

	// Shortcut column
	rm.write("<div id=\""+this.getId()+"-scuttxt\" class=\"sapUiMnuItmSCut\"></div>");

	// Submenu column
	rm.write("<div class=\"sapUiMnuItmSbMnu\">");
	if(oSubMenu) {
		rm.write("<div>&nbsp;</div>");
	}
	rm.write("</div>");

	// Right border
	rm.write("<div class=\"sapUiMnuItmR\"></div>");

	rm.write("</li>");
};

/**
 * @protected
 */
sap.ui.commons.MenuItem.prototype.hover = function(bHovered, oMenu){
	if(bHovered){
		jQuery(this.getDomRef()).addClass("sapUiMnuItmHov");
	}else{
		jQuery(this.getDomRef()).removeClass("sapUiMnuItmHov");
	}
};
}; // end of sap.ui.commons.MenuItem
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayoutRow.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutRow");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new layout/MatrixLayoutRow.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>height : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>cells : sap.ui.commons.layout.MatrixLayoutCell</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Non-control element used as part of a matrix layout's inner structure.
 * 
 * @extends sap.ui.core.Element
 *
 * @author d029921 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.MatrixLayoutRow.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.layout.MatrixLayoutRow. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.MatrixLayoutRow.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.MatrixLayoutRow", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getHeight", "setHeight", 
    // aggregations
    "getCells", "insertCell", "addCell", "removeCell", "removeAllCells", "indexOfCell", "destroyCells", 
    // associations
    
    // events
    
    // methods
    "addStyleClass", "removeStyleClass", "hasStyleClass"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  aggregatingType : "MatrixLayout",
  properties : {
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
  },
  defaultAggregation : "cells",
  aggregations : {
    "cells" : {name : "cells", type : "sap.ui.commons.layout.MatrixLayoutCell", multiple : true, singularName : "cell"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>height</code>.
 * Height of the row.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};

	
/**
 * Getter for aggregation <code>cells</code>.<br/>
 * 
 * The matrix layout row's individual cells.
 * 
 * 
 * @return {sap.ui.commons.layout.MatrixLayoutCell[]}
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.getCells = function() {
	return this.getAggregation("cells", []);
};


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.insertCell = function(oCell, iIndex) {
	this.insertAggregation("cells", oCell, iIndex);
	return this;
};

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.addCell = function(oCell) {
	this.addAggregation("cells", oCell);
	return this;
};

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.ui.commons.layout.MatrixLayoutCell} vCell the cell to remove or its index or id
 * @return {sap.ui.commons.layout.MatrixLayoutCell} the removed cell or null
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.removeCell = function(vCell) {
	return this.removeAggregation("cells", vCell);
};

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.MatrixLayoutCell[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.removeAllCells = function() {
	return this.removeAllAggregation("cells");
};

/**
 * Checks for the provided <code>sap.ui.commons.layout.MatrixLayoutCell</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.indexOfCell = function(oCell) {
	return this.indexOfAggregation("cells", oCell);
};
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutRow.prototype.destroyCells = function() {
	this.destroyAggregation("cells");
	return this;
};


/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 * .myRedTextButton {
 * color: red;
 * }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.addStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the CSS class name to be added

 * @type sap.ui.commons.layout.MatrixLayoutRow
 * @public
 */


/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.removeStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to be removed

 * @type sap.ui.commons.layout.MatrixLayoutRow
 * @public
 */


/**
 * Returns true if the given style class string is valid and if this Element has this style class set via a previous call to addStyleClass().
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.hasStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to check for

 * @type boolean
 * @public
 */


// Start of sap/ui/commons/layout/MatrixLayoutRow.js
jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutRow.prototype);

}; // end of sap.ui.commons.layout.MatrixLayoutRow
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutCell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayoutCell.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutCell");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new layout/MatrixLayoutCell.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>backgroundDesign : sap.ui.commons.layout.BackgroundDesign</li>
 * <li>colSpan : int</li>
 * <li>hAlign : sap.ui.commons.layout.HAlign</li>
 * <li>padding : sap.ui.commons.layout.Padding</li>
 * <li>rowSpan : int</li>
 * <li>separation : sap.ui.commons.layout.Separation</li>
 * <li>vAlign : sap.ui.commons.layout.VAlign</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Non-control element used as part of a matrix layout's inner structure.
 * 
 * @extends sap.ui.core.Element
 *
 * @author d029921 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.MatrixLayoutCell.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.layout.MatrixLayoutCell. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.MatrixLayoutCell.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.MatrixLayoutCell", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getBackgroundDesign", "setBackgroundDesign", "getColSpan", "setColSpan", "getHAlign", "setHAlign", "getPadding", "setPadding", "getRowSpan", "setRowSpan", "getSeparation", "setSeparation", "getVAlign", "setVAlign", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    
    // events
    
    // methods
    "addStyleClass", "removeStyleClass", "hasStyleClass"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  aggregatingType : "MatrixLayoutRow",
  properties : {
    "backgroundDesign" : {name : "backgroundDesign", type : "sap.ui.commons.layout.BackgroundDesign", group : "", defaultValue : 'Transparent'},
    "colSpan" : {name : "colSpan", type : "int", group : "", defaultValue : 1},
    "hAlign" : {name : "hAlign", type : "sap.ui.commons.layout.HAlign", group : "", defaultValue : 'Begin'},
    "padding" : {name : "padding", type : "sap.ui.commons.layout.Padding", group : "", defaultValue : 'End'},
    "rowSpan" : {name : "rowSpan", type : "int", group : "", defaultValue : 1},
    "separation" : {name : "separation", type : "sap.ui.commons.layout.Separation", group : "", defaultValue : 'None'},
    "vAlign" : {name : "vAlign", type : "sap.ui.commons.layout.VAlign", group : "", defaultValue : 'Middle'}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>backgroundDesign</code>.
 * 
 * Determines the matrix layout cell's background design.
 * 
 *
 * Default value is <code>'Transparent'</code>
 *
 * @return {sap.ui.commons.layout.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getBackgroundDesign = function() {
	return this.getProperty("backgroundDesign");
};

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>'Transparent'</code> 
 *
 * @param {sap.ui.commons.layout.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setBackgroundDesign = function(oBackgroundDesign) {
	this.setProperty("backgroundDesign", oBackgroundDesign);
	return this;
};


/**
 * Getter for property <code>colSpan</code>.
 * 
 * Determines how many columns of the underlying grid structure are occupied
 * by this matrix layout cell.
 * 
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>colSpan</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getColSpan = function() {
	return this.getProperty("colSpan");
};

/**
 * Setter for property <code>colSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iColSpan  new value for property <code>colSpan</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setColSpan = function(iColSpan) {
	this.setProperty("colSpan", iColSpan);
	return this;
};


/**
 * Getter for property <code>hAlign</code>.
 * 
 * Determines the horizontal alignment of the matrix layout cell's content
 * with the cell's borders.
 * 
 *
 * Default value is <code>'Begin'</code>
 *
 * @return {sap.ui.commons.layout.HAlign} the value of property <code>hAlign</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getHAlign = function() {
	return this.getProperty("hAlign");
};

/**
 * Setter for property <code>hAlign</code>.
 *
 * Default value is <code>'Begin'</code> 
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setHAlign = function(oHAlign) {
	this.setProperty("hAlign", oHAlign);
	return this;
};


/**
 * Getter for property <code>padding</code>.
 * 
 * Determines the padding of the matrix layout cell's content within the
 * cell's borders. The default value is appropriate for all cells in a
 * form-like layout. Consider to remove the padding on the outer layout in
 * case of nesting.
 * 
 *
 * Default value is <code>'End'</code>
 *
 * @return {sap.ui.commons.layout.Padding} the value of property <code>padding</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getPadding = function() {
	return this.getProperty("padding");
};

/**
 * Setter for property <code>padding</code>.
 *
 * Default value is <code>'End'</code> 
 *
 * @param {sap.ui.commons.layout.Padding} oPadding  new value for property <code>padding</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setPadding = function(oPadding) {
	this.setProperty("padding", oPadding);
	return this;
};


/**
 * Getter for property <code>rowSpan</code>.
 * Determines how many rows of the underlying grid structure are occupied by this matrix layout cell.
 * In case a row-height is used, all rows affected by the RowSpan must have the same unit.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>rowSpan</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getRowSpan = function() {
	return this.getProperty("rowSpan");
};

/**
 * Setter for property <code>rowSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iRowSpan  new value for property <code>rowSpan</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setRowSpan = function(iRowSpan) {
	this.setProperty("rowSpan", iRowSpan);
	return this;
};


/**
 * Getter for property <code>separation</code>.
 * 
 * Determines how a matrix layout cell is separated from its predecessor,
 * via a vertical gutter of variable width, with or without a vertical line.
 * 
 *
 * Default value is <code>'None'</code>
 *
 * @return {sap.ui.commons.layout.Separation} the value of property <code>separation</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getSeparation = function() {
	return this.getProperty("separation");
};

/**
 * Setter for property <code>separation</code>.
 *
 * Default value is <code>'None'</code> 
 *
 * @param {sap.ui.commons.layout.Separation} oSeparation  new value for property <code>separation</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setSeparation = function(oSeparation) {
	this.setProperty("separation", oSeparation);
	return this;
};


/**
 * Getter for property <code>vAlign</code>.
 * 
 * Determines the vertical alignment of the matrix layout cell's content
 * with the cell's borders.
 * 
 *
 * Default value is <code>'Middle'</code>
 *
 * @return {sap.ui.commons.layout.VAlign} the value of property <code>vAlign</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getVAlign = function() {
	return this.getProperty("vAlign");
};

/**
 * Setter for property <code>vAlign</code>.
 *
 * Default value is <code>'Middle'</code> 
 *
 * @param {sap.ui.commons.layout.VAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setVAlign = function(oVAlign) {
	this.setProperty("vAlign", oVAlign);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The matrix layout cell's content (arbitrary controls).
 * 
 * If the matrix row has a defined height and the matrix has layoutFixed = true, the controls inside of a cell should all use the same unit for its height property.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 * .myRedTextButton {
 * color: red;
 * }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.addStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the CSS class name to be added

 * @type sap.ui.commons.layout.MatrixLayoutCell
 * @public
 */


/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.removeStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to be removed

 * @type sap.ui.commons.layout.MatrixLayoutCell
 * @public
 */


/**
 * Returns true if the given style class string is valid and if this Element has this style class set via a previous call to addStyleClass().
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.hasStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to check for

 * @type boolean
 * @public
 */


// Start of sap/ui/commons/layout/MatrixLayoutCell.js
jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutCell.prototype);

/**
 * Setter for the aggregated <code>content</code>.
 * It removes all existing content (see function <code>removeAllContent</code>) from the layout cell
 * before the new content control is added.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.12.0.
 *             Use the function <code>addContent</code> instead. The support of this function will be removed
 *             in one of the next versions.
 */
sap.ui.commons.layout.MatrixLayoutCell.prototype.setContent = function(oContent) {
	this.removeAllContent();
	return this.addContent(oContent);
};
}; // end of sap.ui.commons.layout.MatrixLayoutCell
if ( !jQuery.sap.isDeclared('sap.ui.commons.ButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Button
jQuery.sap.declare("sap.ui.commons.ButtonRenderer");

/**
 * @class
 * @author SAP - TD Core UI&AM UI Infra
 * @version 1.2.0
 * @static
 */
sap.ui.commons.ButtonRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oButton An object representation of the control that should be rendered.
 */
sap.ui.commons.ButtonRenderer.render = function(oRenderManager, oButton) {
	var rm = oRenderManager,
		r = sap.ui.commons.ButtonRenderer;

	// return immediately if control is invisible
	if (!oButton.getVisible()) {
		return;
	}

	rm.addClass("sapUiBtn");

	// button is rendered as a "<button>" element
	rm.write("<button type=\"button\""); // otherwise this turns into a submit button in IE8
	rm.writeControlData(oButton);
	if(oButton.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oButton.getTooltip_AsString());
	}

	//styling
	if (oButton.getStyled()) {
		rm.addClass("sapUiBtnS");	
	}

	if (oButton.getLite()) {
		rm.addClass("sapUiBtnLite");	
	}else{
		rm.addClass("sapUiBtnNorm");	
	}

	var sStyle = oButton.getStyle();
	
	if (sStyle != "" && sStyle != sap.ui.commons.ButtonStyle.Default) {
		rm.addClass("sapUiBtn"+jQuery.sap.escapeHTML(sStyle));	
	}

	//ARIA
	rm.writeAccessibilityState(oButton, {disabled: !oButton.getEnabled()});
	rm.writeAttribute('role', 'button');

	if (!oButton.getEnabled()) {
		rm.write(" tabIndex=\"-1\"");
		rm.addClass("sapUiBtnDsbl");
	} else {
		rm.write(" tabIndex=\"0\"");
		rm.addClass("sapUiBtnStd");
	}

	var bImageOnly = false;
	if (!oButton.getText() && oButton.getIcon()) { // icon, but no text => reduce padding
		rm.addClass("sapUiBtnIconOnly");
		bImageOnly = true; // only the image is there, so it must have some meaning
	}

	if (oButton.getWidth() && oButton.getWidth() != '') {
		rm.addStyle("width", oButton.getWidth());
		rm.addClass("sapUiBtnFixedWidth");
	}
	if (oButton.getHeight() && oButton.getHeight() != '') {
		rm.addStyle("height", oButton.getHeight());
	}
	rm.writeStyles();

	if(this.renderButtonAttributes){
		this.renderButtonAttributes(rm, oButton);
	}

	// feature-dependent CSS class, written for browsers not understanding CSS gradients (=IE8, IE9)
	// required to avoid a large number of browser selectors which is needed to NOT serve filter:... to IE10
	if (jQuery.browser.msie && (!document.documentMode || document.documentMode < 10)) {
		rm.addClass("sapUiBtnNoGradient");
	}

	rm.writeClasses();

	rm.write(">");

	if(this.renderButtonContentBefore){
		this.renderButtonContentBefore(rm, oButton);
	}

	if (oButton.getIcon() && oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton, bImageOnly);
	}

	// write the button label
	if (oButton.getText()) {
		if (!oButton.getIcon() && !this.renderButtonContentBefore && !this.renderButtonContentAfter) {
			rm.writeEscaped(oButton.getText());
		} else { // if there is an icon, an additional span is required
			rm.write("<span class=\"sapUiBtnTxt\">");
			rm.writeEscaped(oButton.getText());
			rm.write("</span>");
		}
	}

	if (oButton.getIcon() && !oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton, bImageOnly);
	}

	if(this.renderButtonContentAfter){
		this.renderButtonContentAfter(rm, oButton);
	}

	// close button
	rm.write("</button>");
};

/**
 * Function called by button control on mouse down event.
 */
sap.ui.commons.ButtonRenderer.onactive = function(oButton) {
	jQuery.sap.byId(oButton.getId()).addClass("sapUiBtnAct").removeClass("sapUiBtnStd");
};

/**
 * Function called by button control on mouse up event.
 */
sap.ui.commons.ButtonRenderer.ondeactive = function(oButton) {
	jQuery.sap.byId(oButton.getId()).addClass("sapUiBtnStd").removeClass("sapUiBtnAct");
};

/**
 * Function called by button control on blur.
 */
sap.ui.commons.ButtonRenderer.onblur = function(oButton) {
	if (jQuery.browser.msie) {
		sap.ui.commons.ButtonRenderer.onmouseout(oButton);
	}
};

/**
 * Function called when mouse leaves button
 */
sap.ui.commons.ButtonRenderer.onmouseout = function(oButton) {
	jQuery.sap.byId(oButton.getId()).removeClass("sapUiBtnAct");
	jQuery.sap.byId(oButton.getId()).addClass("sapUiBtnStd");
};

/**
 * HTML for icon
 */
sap.ui.commons.ButtonRenderer.writeImgHtml = function(oRenderManager, oButton, bImageOnly) {
	var rm = oRenderManager,
		iconUrl = oButton.getIcon();

	rm.write("<img");
	rm.writeAttribute("id", oButton.getId() + "-img");
	rm.writeAttributeEscaped("src", iconUrl);
	if(oButton.getTooltip_AsString() && !oButton.getText()) {
		rm.writeAttributeEscaped("alt", oButton.getTooltip_AsString());
	} else {
		rm.writeAttribute("alt", ""); // there must be an ALT attribute
	}

	if (!bImageOnly) {
		rm.writeAttribute("role", "presentation");
	}

	rm.addClass("sapUiBtnIco");
	if (oButton.getText()) { // only add a distance to the text if there is text
		if (oButton.getIconFirst()) {
			rm.addClass("sapUiBtnIcoL");
		} else {
			rm.addClass("sapUiBtnIcoR");
		}
	}
	rm.writeClasses();

	rm.write("/>");
};
}; // end of sap.ui.commons.ButtonRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.TextField
jQuery.sap.declare("sap.ui.commons.TextFieldRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * TextField Renderer
 * @class
 * @static
 * @author Daniel Brinkmann / Sebastian Allmann
 * @version 1.2.0
 * @since 0.9.0
 */
sap.ui.commons.TextFieldRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.TextField}
 *            oTextField The TextField control that should be rendered.
 */
sap.ui.commons.TextFieldRenderer.render = function(oRenderManager, oTextField) {

	var rm = oRenderManager,
		r  = sap.ui.commons.TextFieldRenderer;

	// Return immediately if control is invisible
	if (!oTextField.getVisible()) {
		return;
	}

	var sWidth = oTextField.getWidth();

	oTextField.bRenderOuter = false;
	if(this.renderOuterAttributes || this.renderOuterContent){
		oTextField.bRenderOuter = true;
	}

// In case of Combobox, F4-help, DatePicker: Render outer element.
// The details of the outer element are rendered in the hook implemented in the corresponding control.
	if (oTextField.bRenderOuter) {
		rm.write("<div");
		rm.writeControlData(oTextField);
		rm.addClass("sapUiTfBack");
		this.renderStyles(rm, oTextField);

		var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oTextField, oTextField.getTooltip_AsString());
		if(tooltip) {
			rm.writeAttributeEscaped('title', tooltip);
		}
		
		var sSpanStyle;
		if(sWidth && sWidth != '') {
			sSpanStyle= 'width: '+ sWidth+';';
		}

		if(this.renderOuterAttributes){
			this.renderOuterAttributes(rm, oTextField);
		}

		if (sSpanStyle) {
			rm.writeAttribute('style', sSpanStyle);
		}
		rm.writeStyles();
		rm.writeClasses();
		rm.write(">");
	}

// Inner tag / pure TextField
	if (this.getInnerTagName){
		rm.write('<'+this.getInnerTagName());
	}else{
		rm.write("<input");
	}
	rm.addClass("sapUiTf");

	if (!oTextField.bRenderOuter) {
		// Stand-alone TextField
		rm.writeControlData(oTextField);
		rm.addClass("sapUiTfBack");
		this.renderStyles(rm, oTextField);

		var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oTextField, oTextField.getTooltip_AsString());
		if(tooltip) {
			rm.writeAttributeEscaped('title', tooltip);
		}

		if(sWidth && sWidth != '') {
			rm.addStyle("width", sWidth);
		}
	}else{
		rm.writeAttribute('id', oTextField.getId() + '-input');
		rm.addClass("sapUiTfInner");
		rm.addStyle("width", '100%');
	}

	if (oTextField.getName()) {
		rm.writeAttributeEscaped('name', oTextField.getName());
	}
		
	if(!oTextField.getEditable()){
		rm.writeAttribute('readonly', 'readonly');
	}
	if(this.renderTextFieldEnabled){
		this.renderTextFieldEnabled(rm, oTextField);
	}else if(!oTextField.getEnabled()){
		rm.writeAttribute('disabled', 'disabled');
		rm.writeAttribute('tabindex', '-1');
	}else if(!oTextField.getEditable()){
		rm.writeAttribute('tabindex', '0');
	}else{
		rm.writeAttribute('tabindex', '0');
	}

	// Appearance
	var oTextDir = oTextField.getTextDirection();
	if(oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}

	var oTextAlign = oTextField.getTextAlign();
	if(oTextAlign) {
		rm.addStyle("text-align", r.getTextAlign(oTextAlign, oTextDir));
	}

	switch (oTextField.getImeMode()) {
	case sap.ui.core.ImeMode.Inactive:
		rm.addStyle('ime-mode','inactive');
		break;
	case sap.ui.core.ImeMode.Active:
		rm.addStyle('ime-mode','active');
		break;
	case sap.ui.core.ImeMode.Disabled:
		rm.addStyle('ime-mode','disabled');
		break;
	}

	if(oTextField.getDesign() == sap.ui.core.Design.Monospace){
		rm.addClass('sapUiTfMono');
	}

	if (oTextField.getMaxLength()) {
		rm.writeAttribute("maxLength", oTextField.getMaxLength());
	}

	// Add additional attributes, styles and so on (TextArea)
	if (this.renderInnerAttributes) {
		this.renderInnerAttributes(rm, oTextField);
	}

	// ARIA
	if(this.renderARIAInfo){
		this.renderARIAInfo(rm, oTextField);
	}

	rm.writeStyles();
	rm.writeClasses();

	if (this.getInnerTagName){
		rm.write(">");
	}else{
		rm.write(" value=\"");
		rm.writeEscaped(oTextField.getValue());
		rm.write("\"");
		rm.write("/>");
	}

	if (this.getInnerTagName){
		// Inner hook
		if (this.renderInnerContent) {
			this.renderInnerContent(rm, oTextField);
		}

		rm.write('</'+this.getInnerTagName()+'>');
	}

	if (oTextField.bRenderOuter) {
		// Outer hook
		if (this.renderOuterContent) {
			this.renderOuterContent(rm, oTextField);
		}

		rm.write("</div>");
	}

};

sap.ui.commons.TextFieldRenderer.renderStyles = function(rm, oTextField) {

	rm.addClass('sapUiTfBrd');

	if(oTextField.getEnabled()){
		if(!oTextField.getEditable()){
			rm.addClass("sapUiTfRo");
		}else{
			rm.addClass("sapUiTfStd");
		}
	}else{
		rm.addClass("sapUiTfDsbl");
	}

	switch (oTextField.getValueState()){
	case (sap.ui.core.ValueState.Error) :
		rm.addClass('sapUiTfErr');
	break;
	case (sap.ui.core.ValueState.Success) :
		rm.addClass('sapUiTfSucc');
	break;
	case (sap.ui.core.ValueState.Warning) :
		rm.addClass('sapUiTfWarn');
	break;
	}

	if(oTextField.getRequired()){
		rm.addClass('sapUiTfReq');
	}

};

sap.ui.commons.TextFieldRenderer.onfocus = function(oTextField) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());
	jQuery(oTfRef).addClass("sapUiTfFoc");
};

sap.ui.commons.TextFieldRenderer.onblur = function(oTextField) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());
	jQuery(oTfRef).removeClass("sapUiTfFoc");
};

sap.ui.commons.TextFieldRenderer.setValueState = function(oTextField, oldValueState, newValueState) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());

	// Remove old value state
	switch (oldValueState){
	case (sap.ui.core.ValueState.Error) :
		jQuery(oTfRef).removeClass('sapUiTfErr').attr('aria-invalid', false);
		break;
	case (sap.ui.core.ValueState.Success) :
		jQuery(oTfRef).removeClass('sapUiTfSucc');
		break;
	case (sap.ui.core.ValueState.Warning) :
		jQuery(oTfRef).removeClass('sapUiTfWarn');
		break;
	}

	// Set new value state
	switch (newValueState){
	case (sap.ui.core.ValueState.Error) :
		jQuery(oTfRef).addClass('sapUiTfErr').attr('aria-invalid', true);
		break;
	case (sap.ui.core.ValueState.Success) :
		jQuery(oTfRef).addClass('sapUiTfSucc');
		break;
	case (sap.ui.core.ValueState.Warning) :
		jQuery(oTfRef).addClass('sapUiTfWarn');
		break;
	}
};

sap.ui.commons.TextFieldRenderer.setEditable = function(oTextField, bEditable) {

	if(!oTextField.getEnabled()){
		// if disabled -> nothing to do
		return;
	}

	var oTfRef = jQuery.sap.domById(oTextField.getId());

	if(oTextField.bRenderOuter){
	// Disabled attribute must be on inner tag
		var oTfRefInput = jQuery.sap.domById(oTextField.getId()+'-input');
	}else{
		var oTfRefInput = oTfRef;
	}


	if (bEditable) {
		jQuery(oTfRef).removeClass('sapUiTfRo').addClass('sapUiTfStd');
		jQuery(oTfRefInput).removeAttr('readonly');
	} else {
		jQuery(oTfRef).removeClass('sapUiTfStd').addClass('sapUiTfRo');
		jQuery(oTfRefInput).attr('readonly', 'readonly');
	}

	jQuery(oTfRefInput).attr('aria-readonly', !bEditable);
};

sap.ui.commons.TextFieldRenderer.setEnabled = function(oTextField, bEnabled) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());

	if(oTextField.bRenderOuter){
	// Disabled attribute must be on inner tag
		var oTfRefInput = jQuery.sap.domById(oTextField.getId()+'-input');
	}else{
		var oTfRefInput = oTfRef;
	}

	if (bEnabled) {
		if (oTextField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfStd');
			jQuery(oTfRefInput).removeAttr('disabled').attr( 'tabindex', '0');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfRo');
			jQuery(oTfRefInput).removeAttr('disabled').attr( 'tabindex', '0').attr( 'readonly', 'readonly');
		}
	}else{
		if (oTextField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfStd').addClass('sapUiTfDsbl');
			jQuery(oTfRefInput).attr( 'disabled', 'disabled').attr( 'tabindex', '-1');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfRo').addClass('sapUiTfDsbl');
			jQuery(oTfRefInput).removeAttr('readonly').attr( 'disabled', 'disabled').attr( 'tabindex', '-1');
		}
	}

};

sap.ui.commons.TextFieldRenderer.removeValidVisualization = function(oTextField) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());
	if(oTfRef) {
		jQuery(oTfRef).removeClass("sapUiTfSucc");
	}
	else {
		jQuery.sap.delayedCall(1000, sap.ui.commons.TextFieldRenderer, "removeValidVisualization", [oTextField]);
	}
};

sap.ui.commons.TextFieldRenderer.setDesign = function(oTextField, sDesign) {

	jQuery.sap.byId(oTextField.getId()).toggleClass('sapUiTfMono', (sDesign == sap.ui.core.Design.Monospace));
};

sap.ui.commons.TextFieldRenderer.setRequired = function(oTextField, bRequired) {

	jQuery.sap.byId(oTextField.getId()).toggleClass('sapUiTfReq', bRequired).attr("aria-required", bRequired);
};

sap.ui.commons.TextFieldRenderer.renderARIAInfo = function(rm, oTextField) {

	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute('role', oTextField.getAccessibleRole().toLowerCase());
		rm.writeAccessibilityState(oTextField, {multiline:false,
												autocomplete: 'none',
												invalid: oTextField.getValueState() == sap.ui.core.ValueState.Error});
	}
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.TextFieldRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;
}; // end of sap.ui.commons.TextFieldRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextField.
jQuery.sap.declare("sap.ui.commons.TextField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TextField.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>value : string</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>enabled : boolean</li>
 * <li>editable : boolean</li>
 * <li>visible : boolean</li>
 * <li>required : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>maxLength : int</li>
 * <li>valueState : sap.ui.core.ValueState</li>
 * <li>textAlign : sap.ui.core.TextAlign</li>
 * <li>imeMode : sap.ui.core.ImeMode</li>
 * <li>design : sap.ui.core.Design</li>
 * <li>helpId : string</li>
 * <li>accessibleRole : sap.ui.core.AccessibleRole</li>
 * <li>accessibleDescription : string</li>
 * <li>accessibleName : string</li>
 * <li>name : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>change : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>liveChange : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Control is used to enter text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.TextField = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.TextField.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.TextField. 
 * Resulting metadata can be obtained via sap.ui.commons.TextField.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.TextField", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  interfaces : ["sap.ui.commons.ToolbarItem"],
  publicMethods : [
    // properties 
    "getValue", "setValue", "bindValue", "unbindValue", "getTextDirection", "setTextDirection", "getEnabled", "setEnabled", "getEditable", "setEditable", "getVisible", "setVisible", "getRequired", "setRequired", "getWidth", "setWidth", "getMaxLength", "setMaxLength", "getValueState", "setValueState", "getTextAlign", "setTextAlign", "getImeMode", "setImeMode", "getDesign", "setDesign", "getHelpId", "setHelpId", "getAccessibleRole", "setAccessibleRole", "getAccessibleDescription", "setAccessibleDescription", "getAccessibleName", "setAccessibleName", "getName", "setName", 
    // aggregations
    
    // associations
    
    // events
    "attachChange", "detachChange", "attachLiveChange", "detachLiveChange", 
    // methods
    "focus", "getLiveValue"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "value" : {name : "value", type : "string", group : "Data", defaultValue : ''},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "required" : {name : "required", type : "boolean", group : "Appearance", defaultValue : false},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "maxLength" : {name : "maxLength", type : "int", group : "Behavior", defaultValue : 0},
    "valueState" : {name : "valueState", type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
    "textAlign" : {name : "textAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
    "imeMode" : {name : "imeMode", type : "sap.ui.core.ImeMode", group : "Behavior", defaultValue : sap.ui.core.ImeMode.Auto},
    "design" : {name : "design", type : "sap.ui.core.Design", group : "Appearance", defaultValue : sap.ui.core.Design.Standard},
    "helpId" : {name : "helpId", type : "string", group : "Behavior", defaultValue : ''},
    "accessibleRole" : {name : "accessibleRole", type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Textbox},
    "accessibleDescription" : {name : "accessibleDescription", type : "string", group : "Accessibility", defaultValue : ''},
    "accessibleName" : {name : "accessibleName", type : "string", group : "Accessibility", defaultValue : ''},
    "name" : {name : "name", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "change" : "change", 
    "liveChange" : "liveChange"
  }

});	

sap.ui.commons.TextField.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>value</code>.
 * Text inside the textfield
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getValue = function() {
	return this.getProperty("value");
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValue = function(sValue) {
	this.setProperty("value", sValue);
	return this;
};


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.bindValue = function(sPath, fnFormatter, sMode) {
	this.bindProperty("value", sPath, fnFormatter, sMode);
	return this;
};

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.unbindValue = function() {
	this.unbindProperty("value");
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * Direction of the text. Possible values: rtl, ltr.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Switches edit state of the control. Read-only fields have different colors, depending on customer setting.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>required</code>.
 * Depending on theme the TextField is shown as required.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>required</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getRequired = function() {
	return this.getProperty("required");
};

/**
 * Setter for property <code>required</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setRequired = function(bRequired) {
	this.setProperty("required", bRequired);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Width of text field. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text field length defines the width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getMaxLength = function() {
	return this.getProperty("maxLength");
};

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setMaxLength = function(iMaxLength) {
	this.setProperty("maxLength", iMaxLength);
	return this;
};


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getValueState = function() {
	return this.getProperty("valueState");
};

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValueState = function(oValueState) {
	this.setProperty("valueState", oValueState);
	return this;
};


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getTextAlign = function() {
	return this.getProperty("textAlign");
};

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setTextAlign = function(oTextAlign) {
	this.setProperty("textAlign", oTextAlign);
	return this;
};


/**
 * Getter for property <code>imeMode</code>.
 * State of the Input Method Editor (IME).
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.ui.core.ImeMode} the value of property <code>imeMode</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getImeMode = function() {
	return this.getProperty("imeMode");
};

/**
 * Setter for property <code>imeMode</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.ui.core.ImeMode} oImeMode  new value for property <code>imeMode</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setImeMode = function(oImeMode) {
	this.setProperty("imeMode", oImeMode);
	return this;
};


/**
 * Getter for property <code>design</code>.
 * Font type. Standard, Monospace
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.core.Design} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.core.Design} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setDesign = function(oDesign) {
	this.setProperty("design", oDesign);
	return this;
};


/**
 * Getter for property <code>helpId</code>.
 * Unique identifier used for help service.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getHelpId = function() {
	return this.getProperty("helpId");
};

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setHelpId = function(sHelpId) {
	this.setProperty("helpId", sHelpId);
	return this;
};


/**
 * Getter for property <code>accessibleRole</code>.
 * Accessibility role for the text field.
 *
 * Default value is <code>Textbox</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getAccessibleRole = function() {
	return this.getProperty("accessibleRole");
};

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Textbox</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setAccessibleRole = function(oAccessibleRole) {
	this.setProperty("accessibleRole", oAccessibleRole);
	return this;
};


/**
 * Getter for property <code>accessibleDescription</code>.
 * Accessibility description for the text field.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>accessibleDescription</code>
 * @public
 * 
 * @deprecated Since version 1.1.0. 
 * not needed
 */
sap.ui.commons.TextField.prototype.getAccessibleDescription = function() {
	jQuery.sap.log.warning("Using deprecated property 'accessibleDescription'.");
	return this.getProperty("accessibleDescription");
};

/**
 * Setter for property <code>accessibleDescription</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sAccessibleDescription  new value for property <code>accessibleDescription</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.1.0. 
 * not needed
 */
sap.ui.commons.TextField.prototype.setAccessibleDescription = function(sAccessibleDescription) {
	jQuery.sap.log.warning("Using deprecated property 'accessibleDescription'.");
	this.setProperty("accessibleDescription", sAccessibleDescription);
	return this;
};


/**
 * Getter for property <code>accessibleName</code>.
 * Accessibility name for the text field.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>accessibleName</code>
 * @public
 * 
 * @deprecated Since version 1.1.0. 
 * not needed
 */
sap.ui.commons.TextField.prototype.getAccessibleName = function() {
	jQuery.sap.log.warning("Using deprecated property 'accessibleName'.");
	return this.getProperty("accessibleName");
};

/**
 * Setter for property <code>accessibleName</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sAccessibleName  new value for property <code>accessibleName</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.1.0. 
 * not needed
 */
sap.ui.commons.TextField.prototype.setAccessibleName = function(sAccessibleName) {
	jQuery.sap.log.warning("Using deprecated property 'accessibleName'.");
	this.setProperty("accessibleName", sAccessibleName);
	return this;
};


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.commons.TextField.prototype.getName = function() {
	return this.getProperty("name");
};

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setName = function(sName) {
	this.setProperty("name", sName);
	return this;
};


/**
 * Event is fired when the text in the field has changed AND the focus leaves the TextField or the Enter key is pressed. 
 *
 * @name sap.ui.commons.TextField#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the textfield.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.TextField</code>.<br/>
 * Event is fired when the text in the field has changed AND the focus leaves the TextField or the Enter key is pressed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.attachChange = function(oData, fnFunction, oListener) {
	this.attachEvent("change", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.TextField</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	return this;	
};

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the textfield.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TextField.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	return this;
};


/**
 * This event if fired during typing into the TextField and returns the currently enterted value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @name sap.ui.commons.TextField#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.liveValue Current value of the Textfield.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.TextField</code>.<br/>
 * This event if fired during typing into the TextField and returns the currently enterted value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.attachLiveChange = function(oData, fnFunction, oListener) {
	this.attachEvent("liveChange", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.TextField</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.detachLiveChange = function(fnFunction, oListener) {
	this.detachEvent("liveChange", fnFunction, oListener);
	return this;	
};

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'liveValue' of type <code>string</code> Current value of the Textfield.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TextField.prototype.fireLiveChange = function(mArguments) {
	this.fireEvent("liveChange", mArguments);
	return this;
};


/**
 * Puts the focus to this control.
 *
 * @name sap.ui.commons.TextField.prototype.focus
 * @function

 * @type void
 * @public
 */


/**
 * Returns the current value of the TextField. In case of editing the TextField you can access the current value via this method. The validated value is accessible via the property value.
 *
 * @name sap.ui.commons.TextField.prototype.getLiveValue
 * @function

 * @type string
 * @public
 */


// Start of sap/ui/commons/TextField.js
/**
 * Event handler called when control is receiving the focus
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onfocusin = function(oEvent) {

	if(this.getEditable() && this.getEnabled() && this.getRenderer().onfocus) {
		this.getRenderer().onfocus(this);
	}

};

/**
 * Event handler called when control is losing the focus
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onfocusout = function(oEvent) {
	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}

	this._checkChange(oEvent);
};

/**
 * Event handler called when enter key is pressed.
 * @see sap.ui.commons.TextField#onfocusout
 * @protected
 */
sap.ui.commons.TextField.prototype.onsapenter = function(oEvent) {
	this._checkChange(oEvent);
};

/**
 * Compares the previous value with the current value and fires the change event
 * if the TextField is editable and the value has changed.
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype._checkChange = function(oEvent) {
	var oInput = this.getInputDomRef(),
		newVal = oInput && oInput.value,
		oldVal = this.getValue();

	if(this.getEditable() && this.getEnabled() && (oldVal != newVal)) {
		this.setProperty("value", newVal, true); // suppress rerendering
		this.fireChange({newValue:newVal}); // oldValue is not that easy in ComboBox and anyway not in API... thus skip it
	}
};

/**
 * Event handler called when text selection starts.
 * When the text field is disabled, the text should not be selectable, so cancel the event.
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onselectstart = function(oEvent) {
	if (!this.getEnabled()){
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Event handler called when a key is pressed.
 * onsapescape did not work in firefox (the value update is ignored), so the keypress event is used instead
 * the value must be set to the old one before the changes
 * @protected
 */
sap.ui.commons.TextField.prototype.onkeypress = function(oEvent) {

	var oKC = jQuery.sap.KeyCodes;
	var iKC = oEvent.which || oEvent.keyCode;
	if(iKC == oKC.ESCAPE){
		var sValue = this.getProperty("value");
		var oInput = this.getInputDomRef();
		if(oInput && oInput.value !== sValue) {
			jQuery(oInput).val(sValue);
		}
	}

};

/**
 * Escape fires no keypress in webkit
 * the value must be set to the old one before the changes
 * @protected
 */
sap.ui.commons.TextField.prototype.onsapescape = function(oEvent) {

	if(jQuery.browser.webkit){
		var oKC = jQuery.sap.KeyCodes;
		var iKC = oEvent.which || oEvent.keyCode;
		if(iKC == oKC.ESCAPE){
			var sValue = this.getProperty("value");
			var oInput = this.getInputDomRef();
			if(oInput && oInput.value !== sValue) {
				jQuery(oInput).val(sValue);
			}
		}
	}

};

/**
 * Event handler for keyup.
 * fire the liveChange event
 * @protected
 */
sap.ui.commons.TextField.prototype.onkeyup = function(oEvent) {

	var sLiveValue = jQuery(this.getInputDomRef()).val();
	this.fireLiveChange({liveValue:sLiveValue});

};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the ValueState
 *
 * @param {Valuestate} oValueState
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValueState = function(oValueState) {

	var oldValueState = this.getValueState();

	if( oldValueState == oValueState ){
		return this;
	}

	this.setProperty("valueState", oValueState, true); // do not render again

	if(!this.getDomRef()){
		//not already rendered.
		return this;
	}

	if(this.getRenderer().setValueState) {
		this.getRenderer().setValueState(this, oldValueState, oValueState);
	}

	if(this.delayedCallId) {
		jQuery.sap.clearDelayedCall(this.delayedCallId);
		this.delayedCallId = null;
	}
	if(sap.ui.core.ValueState.Success == oValueState) {
		this.delayedCallId = jQuery.sap.delayedCall(3000, this, "removeValidVisualization");
	}

	return this;
};

sap.ui.commons.TextField.prototype.removeValidVisualization = function() {
	if(this.getRenderer().removeValidVisualization){
		this.getRenderer().removeValidVisualization(this);
	}
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the editable state
 *
 * @param bEditable
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEditable = function(bEditable) {

	this.setProperty('editable', bEditable, true); // No re-rendering

	if (this.getDomRef() && this.getRenderer().setEditable){
			this.getRenderer().setEditable(this, bEditable);
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the enabled state
 *
 * @param bEnabled
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEnabled = function(bEnabled) {

	this.setProperty('enabled', bEnabled, true); // No re-rendering

	if (this.getDomRef() && this.getRenderer().setEnabled){
			this.getRenderer().setEnabled(this, bEnabled);
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Required-State
 *
 * @param bRequired:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setRequired = function(bRequired) {

	this.setProperty('required', bRequired, true); // No re-rendering

	if (this.getDomRef()){
		// If already rendered, adapt rendered control without complete re-rendering
		if(this.getRenderer().setRequired) {
			this.getRenderer().setRequired(this, bRequired);
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Design
 *
 * @param sDesign:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setDesign = function(sDesign) {

	this.setProperty('design', sDesign, true); // No re-rendering

	if (this.getDomRef()){
		// If already rendered, adapt rendered control without complete re-rendering
		if(this.getRenderer().setDesign) {
			this.getRenderer().setDesign(this, sDesign);
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Value
 *
 * @param sValue:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValue = function(sValue) {
	var newValue = sValue;
	if( newValue && newValue.length > this.getMaxLength() && this.getMaxLength() > 0){
		newValue = newValue.substring(0,this.getMaxLength());
//		this.fireChange({newValue:newValue});
	}

	this.setProperty("value", newValue, true); // no re-rendering!
	var oInput = this.getInputDomRef();
	if(oInput && oInput.value !== newValue) {
		oInput.value = this.getValue();
	}

	return this;
};

/**
 * Method for accessing the DOM Ref of the input element.
 * Might be overwritten in child classes.
 *
 * @protected
 */
sap.ui.commons.TextField.prototype.getInputDomRef = function(){
	return this.getFocusDomRef();
};

/**
 * Applies the focus info
 * overwrite of the Element method because in IE8 on rerendering focus is lost
 * @param {object} oFocusInfo
 * @protected
 */
sap.ui.commons.TextField.prototype.applyFocusInfo = function (oFocusInfo) {

	if (jQuery.browser.msie && jQuery.browser.version == 8) {
		var oPos = this.getValue().length;
		var that = this;
		setTimeout(function(){
			that.focus();
			jQuery(that.getFocusDomRef()).cursorPos(oPos);
		}, 0);
	}else{
		this.focus();
	}
	return this;
};

/* 
 * Implementation of the getLiveValue method
 */
sap.ui.commons.TextField.prototype.getLiveValue = function() {
	var oIDomRef = this.getInputDomRef();
	if (oIDomRef) {
		return jQuery(oIDomRef).val();
	} else {
		return this.getValue();
	}
};

}; // end of sap.ui.commons.TextField
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayout.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new layout/MatrixLayout.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>layoutFixed : boolean</li>
 * <li>columns : int</li>
 * <li>widths : sap.ui.core.CSSSize[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>rows : sap.ui.commons.layout.MatrixLayoutRow</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * <p>
 * A matrix layout arranges controls in a grid structure, using rows which
 * need not have the same number of cells.
 * </p>
 * 
 * <p>
 * It uses predefined cell classes that guarantee appropriate distances
 * between cells in the grid. The cell's <code>vGutter</code> property lets
 * you specify additional horizontal distances easily. You can set these
 * additional distances (known as gutters) with or without separators.
 * The distance for each cell is specified by assigning a specific
 * enumeration value of the class <code>LayoutCellSeparator</code> of the
 * matrix data object.
 * </p>
 * 
 * <p>
 * You should <b>avoid nesting</b> matrix layouts. You should only use a
 * matrix layout if you need to align controls horizontally across rows.
 * </p>
 * 
 * @extends sap.ui.core.Control
 *
 * @author d029921 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.MatrixLayout = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.MatrixLayout.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.layout.MatrixLayout. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.MatrixLayout.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.MatrixLayout", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getWidth", "setWidth", "getHeight", "setHeight", "getLayoutFixed", "setLayoutFixed", "getColumns", "setColumns", "getWidths", "setWidths", 
    // aggregations
    "getRows", "insertRow", "addRow", "removeRow", "removeAllRows", "indexOfRow", "destroyRows", 
    // associations
    
    // events
    
    // methods
    "createRow"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "layoutFixed" : {name : "layoutFixed", type : "boolean", group : "Appearance", defaultValue : true},
    "columns" : {name : "columns", type : "int", group : "Appearance", defaultValue : null},
    "widths" : {name : "widths", type : "sap.ui.core.CSSSize[]", group : "Appearance", defaultValue : null}
  },
  defaultAggregation : "rows",
  aggregations : {
    "rows" : {name : "rows", type : "sap.ui.commons.layout.MatrixLayoutRow", multiple : true, singularName : "row"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * 
 * Determines whether the matrix layout, including all its content, is
 * visible. An invisible control will not be rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * CSS width of the matrix layout.
 * If the LayoutFixed = true a adequate width should be provided.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * 
 * CSS height of the matrix layout.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>layoutFixed</code>.
 * Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the content of the colums has priority.
 * The default is "fixed".
 * If the fixed layout is used a adequate width of the MatrixLayout should be provided. Otherwise the column width displayed could be different than the given ones because of browser dependend optimazations.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>layoutFixed</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getLayoutFixed = function() {
	return this.getProperty("layoutFixed");
};

/**
 * Setter for property <code>layoutFixed</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLayoutFixed  new value for property <code>layoutFixed</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setLayoutFixed = function(bLayoutFixed) {
	this.setProperty("layoutFixed", bLayoutFixed);
	return this;
};


/**
 * Getter for property <code>columns</code>.
 * Number of columns. If not specified, the number of columns will be determined from the given cells.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>columns</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getColumns = function() {
	return this.getProperty("columns");
};

/**
 * Setter for property <code>columns</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iColumns  new value for property <code>columns</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setColumns = function(iColumns) {
	this.setProperty("columns", iColumns);
	return this;
};


/**
 * Getter for property <code>widths</code>.
 * Widths of the columns. Use an array to define the widths of the columns.
 * If a column shall have an automatical sizing enter "auto" for this column width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize[]} the value of property <code>widths</code>
 * @public
 * 
 */
sap.ui.commons.layout.MatrixLayout.prototype.getWidths = function() {
	return this.getProperty("widths");
};

/**
 * Setter for property <code>widths</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize[]} aWidths  new value for property <code>widths</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setWidths = function(aWidths) {
	this.setProperty("widths", aWidths);
	return this;
};

	
/**
 * Getter for aggregation <code>rows</code>.<br/>
 * 
 * The matrix layout's individual rows.
 * 
 * 
 * @return {sap.ui.commons.layout.MatrixLayoutRow[]}
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.getRows = function() {
	return this.getAggregation("rows", []);
};


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.insertRow = function(oRow, iIndex) {
	this.insertAggregation("rows", oRow, iIndex);
	return this;
};

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.MatrixLayout.prototype.addRow = function(oRow) {
	this.addAggregation("rows", oRow);
	return this;
};

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.ui.commons.layout.MatrixLayoutRow} vRow the row to remove or its index or id
 * @return {sap.ui.commons.layout.MatrixLayoutRow} the removed row or null
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.removeRow = function(vRow) {
	return this.removeAggregation("rows", vRow);
};

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.MatrixLayoutRow[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.removeAllRows = function() {
	return this.removeAllAggregation("rows");
};

/**
 * Checks for the provided <code>sap.ui.commons.layout.MatrixLayoutRow</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.indexOfRow = function(oRow) {
	return this.indexOfAggregation("rows", oRow);
};
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.destroyRows = function() {
	this.destroyAggregation("rows");
	return this;
};


/**
 * Creates a new matrix layout row and appends it to this matrix layout.
 *
 * @name sap.ui.commons.layout.MatrixLayout.prototype.createRow
 * @function
 * @param {sap.ui.core.Control} 
 *         oControls
 *         Each argument must be either a matrix layout cell, which is added to the row "as is", or an arbitrary content control, which is wrapped with a new (default) matrix layout cell first and then added to the row.
 * Supports a variable number of arguments!

 * @type sap.ui.commons.layout.MatrixLayout
 * @public
 */


// Start of sap/ui/commons/layout/MatrixLayout.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained




///**
// * Initialization... here with some Propagator-Behavior
// */
//sap.ui.commons.layout.MatrixLayout.prototype.init = function() {
//	// how do we ensure, parent behavior could be inherited, too?
//	// Option:
//	//this.getMetadata().baseType.prototype.init.apply(this);
//
//	debugger;
//	sap.ui.core.EnabledPropagator.call(this, true);
//};
sap.ui.core.EnabledPropagator.apply(sap.ui.commons.layout.MatrixLayout.prototype, [true]);

/**
 * Creates a new matrix layout row and appends it to this matrix layout.
 * Each argument must be either a matrix layout cell, which is added to the row
 * "as is", or an arbitrary content control, which is wrapped with a new
 * (default) matrix layout cell first and then added to the row.
 * @param {sap.ui.commons.layout.MatrixLayoutCell|sap.ui.core.Control|string} rowContent to add
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.createRow = function() {
	var oRow = new sap.ui.commons.layout.MatrixLayoutRow();
	this.addRow(oRow);
	for (var i = 0; i < arguments.length; i++) {
		var oContent = arguments[i];
		var oCell;
		if (oContent instanceof sap.ui.commons.layout.MatrixLayoutCell) {
			// matrix layout cell given, use as is
			oCell = oContent;
		} else if (oContent instanceof sap.ui.core.Control) {
			// any control given, wrap with matrix layout cell first
			   oCell = new sap.ui.commons.layout.MatrixLayoutCell({content : oContent});
		} else if (oContent instanceof Object && oContent.height) {
			oRow.setHeight(oContent.height);
		} else {
			// any string(?) given, display it
			var sText = oContent ? oContent.toString() : "";
				oCell = new sap.ui.commons.layout.MatrixLayoutCell({
					content : new sap.ui.commons.TextView({text : sText})});
		}
			oRow.addCell(oCell);
	}
	return this;
};

/*
 * Overwrites Setter for property <code>widths</code>.
 * Sets the widths of the columns. The values must be stored in an array to be used in renderer.
 * to be compatible with previous version also allow list of values.
 * @param {sap.ui.core.CSSSize[]} aWidths new value for property <code>widths</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setWidths = function( aWidths ) {

	var aSetWidths;

	if(!jQuery.isArray(aWidths)){
		// a list of values is used instead of an array -> use this as array
		aSetWidths = jQuery.makeArray(arguments);
	}else{
		aSetWidths = aWidths;
	}

	// set "auto" for empty values
	for ( var i = 0; i < aSetWidths.length; i++) {
		if (aSetWidths[i] == "" || !aSetWidths[i]) {
			aSetWidths[i] = "auto";
		}
	}

	this.setProperty("widths", aSetWidths);

	return this;
};
}; // end of sap.ui.commons.layout.MatrixLayout
if ( !jQuery.sap.isDeclared('sap.ui.commons.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Image.
jQuery.sap.declare("sap.ui.commons.Image");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Image.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>src : string</li>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>decorative : boolean</li>
 * <li>alt : string</li>
 * <li>useMap : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>press : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Image = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Image.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Image. 
 * Resulting metadata can be obtained via sap.ui.commons.Image.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Image", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getSrc", "setSrc", "getVisible", "setVisible", "getWidth", "setWidth", "getHeight", "setHeight", "getDecorative", "setDecorative", "getAlt", "setAlt", "getUseMap", "setUseMap", 
    // aggregations
    
    // associations
    
    // events
    "attachPress", "detachPress"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "src" : {name : "src", type : "string", group : "Data", defaultValue : null},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
    "decorative" : {name : "decorative", type : "boolean", group : "Accessibility", defaultValue : true},
    "alt" : {name : "alt", type : "string", group : "Accessibility", defaultValue : null},
    "useMap" : {name : "useMap", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "press" : "press"
  }

});	

sap.ui.commons.Image.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>src</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getSrc = function() {
	return this.getProperty("src");
};

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSrc  new value for property <code>src</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setSrc = function(sSrc) {
	this.setProperty("src", sSrc);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getDecorative = function() {
	return this.getProperty("decorative");
};

/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setDecorative = function(bDecorative) {
	this.setProperty("decorative", bDecorative);
	return this;
};


/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getAlt = function() {
	return this.getProperty("alt");
};

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setAlt = function(sAlt) {
	this.setProperty("alt", sAlt);
	return this;
};


/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>useMap</code>
 * @public
 * 
 */
sap.ui.commons.Image.prototype.getUseMap = function() {
	return this.getProperty("useMap");
};

/**
 * Setter for property <code>useMap</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.setUseMap = function(sUseMap) {
	this.setProperty("useMap", sUseMap);
	return this;
};


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.ui.commons.Image#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Image</code>.<br/>
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.attachPress = function(oData, fnFunction, oListener) {
	this.attachEvent("press", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Image.prototype.detachPress = function(fnFunction, oListener) {
	this.detachEvent("press", fnFunction, oListener);
	return this;	
};

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Image.prototype.firePress = function(mArguments) {
	this.fireEvent("press", mArguments);
	return this;
};


// Start of sap/ui/commons/Image.js
/**
 * Function is called when image is clicked.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Image.prototype.onclick = function(oEvent) {
	this.firePress({/* no parameters */});
};

/**
 * Function is called when "enter" keydown happens on image.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Image.prototype.onsapenter = sap.ui.commons.Image.prototype.onclick;

}; // end of sap.ui.commons.Image
if ( !jQuery.sap.isDeclared('sap.ui.commons.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Toolbar.
jQuery.sap.declare("sap.ui.commons.Toolbar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Toolbar.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>design : sap.ui.commons.ToolbarDesign</li>
 * <li>standalone : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.commons.ToolbarItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A single, horizontal row of immediate, always visible items. In many cases, a toolbar item is a button with an icon.
 * All controls having interface sap.ui.commons.ToolbarItem can be used as item.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Toolbar = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Toolbar.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Toolbar. 
 * Resulting metadata can be obtained via sap.ui.commons.Toolbar.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Toolbar", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getWidth", "setWidth", "getDesign", "setDesign", "getStandalone", "setStandalone", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
    "design" : {name : "design", type : "sap.ui.commons.ToolbarDesign", group : "Appearance", defaultValue : sap.ui.commons.ToolbarDesign.Flat},
    "standalone" : {name : "standalone", type : "boolean", group : "Appearance", defaultValue : true}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.commons.ToolbarItem", multiple : true, singularName : "item"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Toolbar.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * When there is not enough space for the toolbar to display all items, the rightmost items are overflowing into a drop-down menu.
 * 
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Toolbar.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>design</code>.
 * Design settings are theme-dependent.
 *
 * Default value is <code>Flat</code>
 *
 * @return {sap.ui.commons.ToolbarDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.Toolbar.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Flat</code> 
 *
 * @param {sap.ui.commons.ToolbarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.setDesign = function(oDesign) {
	this.setProperty("design", oDesign);
	return this;
};


/**
 * Getter for property <code>standalone</code>.
 * Alternatively, toolbars can be nested in controls from which they inherit the design.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>standalone</code>
 * @public
 * 
 */
sap.ui.commons.Toolbar.prototype.getStandalone = function() {
	return this.getProperty("standalone");
};

/**
 * Setter for property <code>standalone</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStandalone  new value for property <code>standalone</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.setStandalone = function(bStandalone) {
	this.setProperty("standalone", bStandalone);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregating the toolbar items.
 * 
 * @return {sap.ui.commons.ToolbarItem[]}
 * @public
 */
sap.ui.commons.Toolbar.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Toolbar.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.commons.ToolbarItem} vItem the item to remove or its index or id
 * @return {sap.ui.commons.ToolbarItem} the removed item or null
 * @public
 */
sap.ui.commons.Toolbar.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ToolbarItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Toolbar.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.commons.ToolbarItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Toolbar.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Toolbar.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


// Start of sap/ui/commons/Toolbar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initialize this control.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.init = function() {
	this.bOpen = false; // the overflow popup state

	// Buffer for performance, updated after rendering
	this.oDomRef = null;
	this.oInnerRef = null;
	this.oOverflowDomRef = null;
	
	this.bRtl = sap.ui.getCore().getConfiguration().getRTL();
	
	// for resize detection
	this._detectVisibleItemCountChangeTimer = null;
};

sap.ui.commons.Toolbar.prototype.onBeforeRendering = function() {
	// stop the periodic overflow checker
	if (this._detectVisibleItemCountChangeTimer) {
		jQuery.sap.clearIntervalCall(this._detectVisibleItemCountChangeTimer);
		this._detectVisibleItemCountChangeTimer = null;
	}
	
	jQuery.sap.byId(this.getId() + "-mn").unbind("keyup", this._handleKeyUp);
};

/**
 * Used for after-rendering initialization.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.onAfterRendering = function() {
	this.oDomRef = this.getDomRef();
	this.oInnerRef = this.oDomRef.firstChild.firstChild;
	var sOverflowId = this.getId() + "-mn";
	this.oOverflowDomRef = jQuery.sap.domById(sOverflowId);

	// Initialize the ItemNavigation if required
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}

	// cannot use sapspace because this triggers onkeydown and sets the focus to the first button in the overflow popup
	// and the subsequent keyup will make the browser fire a click event on that button
	jQuery.sap.byId(this.getId() + "-mn").bind("keyup", jQuery.proxy(this._handleKeyUp, this));

	// Re-initialize the ItemNavigation with changed DomRefs after rendering and set the overflow icon properly
	this.updateAfterResize(true);
	
	this._detectVisibleItemCountChangeTimer = jQuery.sap.intervalCall(350, this, "_detectVisibleItemCountChange");
};


/**
 * Handle the space event on the menu open button.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype._handleKeyUp = function (oEvent) {
	if ((oEvent.keyCode == jQuery.sap.KeyCodes.SPACE)
			&& (oEvent.target.id === this.getId() + "-mn")) {
		this.handleOverflowButtonTriggered();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Does all the cleanup when the Toolbar is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.Toolbar.prototype.exit = function () {
	// Stop the periodic overflow checker
	if (this._detectVisibleItemCountChangeTimer) {
		jQuery.sap.clearIntervalCall(this._detectVisibleItemCountChangeTimer);
		this._detectVisibleItemCountChangeTimer = null;
	}
	
	// Remove the item navigation delegate
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}

	// No super.exit() to call
};


/**
 * Called after rendering and after each actual change of visible items
 * in order to re-initialize item navigation
 * with the currently visible items. Update the visibility of the overflow button.
 *
 * @param bClearTabStops Whether the tab indices of all toolbar items should be set to -1
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateAfterResize = function(bClearTabStops) {
	var visibleItemInfo = this.getVisibleItemInfo();
	
	// store to detect next change of visible items caused by resizing
	this._oLastVisibleItem = visibleItemInfo.oLastVisibleItem;
	this._oFirstInvisibleItem = visibleItemInfo.oFirstInvisibleItem;
	this._iLastVisibleItemTop = visibleItemInfo.iLastVisibleItemTop;
	
	// adapt the overflow and ItemNavigation
	this.updateItemNavigation(visibleItemInfo.count, bClearTabStops);
	this.updateOverflowIcon(visibleItemInfo.bOverflow);
};


/**
 * Compares the current element positions with the last recorded ones to detect a change of visible items
 * 
 * @private
 */
sap.ui.commons.Toolbar.prototype._detectVisibleItemCountChange = function() {
	// Stop the periodic overflow checker
	if (!this.getDomRef()) {
		if (this._detectVisibleItemCountChangeTimer) {
			jQuery.sap.clearIntervalCall(this._detectVisibleItemCountChangeTimer);
			this._detectVisibleItemCountChangeTimer = null;
		}
		return;
	}
	
	if (this._oLastVisibleItem && this._oFirstInvisibleItem) { // case 1: overflow was visible
		var lastLeft = this._oLastVisibleItem.offsetLeft;
		var firstLeft = this._oFirstInvisibleItem.offsetLeft;
		var lastTop = this._oLastVisibleItem.offsetTop;

		var bInvisibleHasMovedUp = this.bRtl ? (firstLeft < lastLeft) : (firstLeft > lastLeft);

		if ((lastTop != this._iLastVisibleItemTop)  // last visible item has moved into second line => less visible items
				|| (!this.bOpen && bInvisibleHasMovedUp)) { // first invisible item has moved to the right of the previously last visible one
			// (and there is no reason for it to move to the right when it is still in 2nd row or later
			// except for if the popup has just opened) so it is visible now
			// => more visible items
			if (this.bOpen) {
				this.closePopup(true);
			}
			this.updateAfterResize(false);				
		}

	} else if (this._oLastVisibleItem && !this._oFirstInvisibleItem) { // case 2: overflow was NOT visible
		if (this._oLastVisibleItem.offsetTop != this._iLastVisibleItemTop) { // last visible item has moved into second line => less visible items
			// popup cannot be open, as there was no overflow, so there is no need to close it
			this.updateAfterResize(false);
		}

	} else if (!this._oLastVisibleItem && !this._oFirstInvisibleItem) { // case 3: no items at all
		// nothing to do

	} else {
		// should never happen, as there is always one visible item
		// don't log, as this is called several times per second...   jQuery.sap.log.warning("Toolbar " + this.getId() + ": illegal state");
	}
};


/**
 * Initializes the ItemNavigation delegate with the visible items in the toolbar, so navigation
 * only happens among those. Optionally clears all tab stops, this is required to make the Tab key
 * navigate out of the Toolbar.
 *
 * ItemNavigation handles Tabindexes. But if TabStop is on now invisible item set it to last
 * visible one.
 *
 * @param iVisibleItems The number of currently visible toolbar items
 * @param bClearTabStops Whether the tab indices of all toolbar items should be set to -1
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateItemNavigation = function(iVisibleItems, bClearTabStops) {
	this.oItemNavigation.setRootDomRef(this.oDomRef);
	var aItemDomRefs = [];

	var aAllItems = this.getItems();
	for (var i=0; i<iVisibleItems; i++) {
		var oDomRef = aAllItems[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aItemDomRefs.push(oDomRef);
		}
	}
	aItemDomRefs.push(this.oOverflowDomRef);
	this.oItemNavigation.setItemDomRefs(aItemDomRefs);
	this.iItemDomRefCount = aItemDomRefs.length;

	// If called directly after rendering, also the remaining tabstops need to be cleared
	if (bClearTabStops) {
		var itemCount = aAllItems.length;
		for (var i=iVisibleItems; i<itemCount; i++) {
			var oDomRef = aAllItems[i].getFocusDomRef();
			if (oDomRef) { // separators return null here
				oDomRef.tabIndex = -1;
			}
		}
	}
};


/**
 * Returns the number of toolbar items that are currently visible.
 * If the toolbar has not been rendered yet, value "0" is returned.
 * Requirement here is that every control has exactly one root HTML element.
 *
 * @return The number of toolbar items that are currently visible
 * @private
 */
sap.ui.commons.Toolbar.prototype.getVisibleItemInfo = function() {
	// Compute actual number of items currently hidden due to overflow
	var iVisibleItems = 0;
	if (this.oInnerRef) {
		var aElements = this.oInnerRef.childNodes;

		this.bRtl = sap.ui.getCore().getConfiguration().getRTL();
		
		/* Check for each item how far it is from the parent's left border:
		 * As long as the items are in the same row, this offset increases, but
		 * the first item with lower offset is the first item in the second row.
		 */
		var sOverflowMenuId = this.getId() + "-mn";
		var bLineBreak,
			oElement,
			currentOffsetWidth = 0,
			currentOffsetLeft,
			lastOffsetWidth,
			lastOffsetLeft = 0,
			oLastVisibleItem = null, 
			oFirstInvisibleItem = null, 
			iLastVisibleItemTop, 
			bOverflow = false; // default value is used when there are no items

		for (var i = 1,count = aElements.length; i < count; i++) {
			oElement = aElements[i];
			currentOffsetLeft = oElement.offsetLeft;
			
			// find out whether the current element is a line *below* the last element
			if (i == 1) {
				lastOffsetWidth = aElements[0].offsetWidth;
				lastOffsetLeft = aElements[0].offsetLeft;
			}
			if (this.bRtl) {
				currentOffsetWidth = oElement.offsetWidth;
				bLineBreak = (currentOffsetLeft + currentOffsetWidth >= lastOffsetLeft + lastOffsetWidth) ;
			} else {
				bLineBreak = (currentOffsetLeft <= lastOffsetLeft);
			}

			if (bLineBreak) {
				// There was a line break, current i is the number of items that were in the first row
				iVisibleItems = i;
				
				// remember DomRefs and top distance of last visible item
				oLastVisibleItem = aElements[i-1];
				oFirstInvisibleItem = oElement;
				iLastVisibleItemTop = oLastVisibleItem.offsetTop;
				bOverflow = true;
				break;

			} else if (oElement.id == sOverflowMenuId) {
				// This is the overflow button, there was no line break
				iVisibleItems = i;
				// Therefore, iVisibleItems should be the total number of children minus 1 (the overflow menu)
				jQuery.sap.assert(iVisibleItems === (count-1), "visible items (" + iVisibleItems + ") must be one less than the items count (" + count + ")");
				oLastVisibleItem = aElements[i-1];
				oFirstInvisibleItem = null;
				iLastVisibleItemTop = oLastVisibleItem.offsetTop;
				bOverflow = false;
				break;

			} else {
				// Regular toolbar item, to the right of the last one, so just proceed
				lastOffsetLeft = currentOffsetLeft;
				lastOffsetWidth = currentOffsetWidth;
			}
		}
	}
	return {
		"count":iVisibleItems, 
		"oLastVisibleItem": oLastVisibleItem, 
		"oFirstInvisibleItem": oFirstInvisibleItem, 
		"iLastVisibleItemTop": iLastVisibleItemTop,
		"bOverflow": bOverflow
	};
};


/**
 * Modifies the visibility of the overflow button
 *
 * @param bOverflow whether the overflow button should be displayed
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateOverflowIcon = function(bOverflow) {
	// set visibility of overflow button
	this.oOverflowDomRef.style.display = bOverflow ? "block" : "none";
};


/**
 * Handle the click event on the menu open button.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onclick = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		this.handleOverflowButtonTriggered();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};


/**
 * Handle the arrow down event on the menu open button. This opens the popup, if closed.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onsapdown = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		if(!this.bOpen) {
			this.handleOverflowButtonTriggered();
			oEvent.preventDefault();
			// Stop other events like sapnext to be processed afterwards
			oEvent.stopImmediatePropagation();
		}
	}
};


/**
 * Handle the arrow up event on the menu open button. This closes the popup, if open.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onsapup = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		if(this.bOpen) {
			this.handleOverflowButtonTriggered();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};


/**
 * Initializes (if required) and opens/closes the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.handleOverflowButtonTriggered = function() {
	// Initialize the popup
	if (!this.bPopupInitialized) {
		this.popup = new sap.ui.core.Popup(new sap.ui.commons.ToolbarOverflowPopup(this), false, true, true);

		this.bPopupInitialized = true;
	}

	// Open/close the overflow popup
	if(this.bOpen) {
		this.closePopup(false);
	} else {
		this.openPopup();
	}
};



/* POPUP functionality */

/**
 * Opens the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.openPopup = function() {
	this.getRenderer().setActive(this);

	sap.ui.commons.ToolbarRenderer.fillOverflowPopup(this);
	this.popup.attachEvent("opened", this.handlePopupOpened, this);
	this.popup.attachEvent("closed", this.handlePopupClosed, this);

	//Open popup with a little delay in IE8 to avoid focus calls when the popup is not yet opened
	var iDuration = jQuery.browser.msie && (jQuery.browser.version == "7.0" || jQuery.browser.version == "8.0") ? 1 : 0;
	this.popup.open(iDuration, sap.ui.core.Popup.Dock.EndTop, sap.ui.core.Popup.Dock.EndBottom, this.oDomRef);
	this.bOpen = true;
};

sap.ui.commons.Toolbar.prototype.handlePopupOpened = function() {
	var aAllItems = this.getItems();
	var iItemCount = aAllItems.length;
	var iVisibleItems = this.getVisibleItemInfo().count;

	var aNavigableItems = [];
	for (var i=iVisibleItems; i<iItemCount; i++) {
		var oDomRef = aAllItems[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aNavigableItems.push(oDomRef);
		}
	}

	// Init item navigation and set initial focus
	this.popup.getContent().initItemNavigation(aNavigableItems);
};

/**
 * Closes the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.closePopup = function(bResetFocus) {
	this._bResetFocus = bResetFocus;
	this.popup.close();
};

sap.ui.commons.Toolbar.prototype.handlePopupClosed = function() {
	this.getRenderer().unsetActive(this);

	// Cleanup tabindex again and re-initialize item navigation
	var iVisibleItems = this.getVisibleItemInfo().count;
	this.updateItemNavigation(iVisibleItems, true); // TODO: reinit only required if item navigation also used for popup

	this.bOpen = false;
	sap.ui.commons.ToolbarRenderer.emptyOverflowPopup(this);

	if(this._bResetFocus) {
		this.oItemNavigation.focusItem(this.iItemDomRefCount-1);
	}
	this._bResetFocus = false;
};



// ****************************************************************
// Overwrite generated items handling
// ****************************************************************

/**
 * Prepares the given oCtrl for usage in a toolbar.
 * @param {sap.ui.core.Control} oCtrl The control instance whose focus info should be re-directed
 * @private
 */
sap.ui.commons.Toolbar.prototype.prepareFocusInfoRedirect = function(oCtrl) {
	//jQuery.sap.assert(oCtrl._orig_getFocusInfo === undefined);
	if (oCtrl) {
		var sId = this.getId();
		var getFocusInfo = function() {
			return {id: sId, childInfo: this._orig_getFocusInfo()};
		};
		oCtrl._orig_getFocusInfo = oCtrl.getFocusInfo;
		oCtrl.getFocusInfo = getFocusInfo;
		var applyFocusInfo = function(oFocusInfo) {
			return this._orig_applyFocusInfo(oFocusInfo.childInfo);
		};
		oCtrl._orig_applyFocusInfo = oCtrl.applyFocusInfo;
		oCtrl.applyFocusInfo = applyFocusInfo;
	}
	return oCtrl;
};

/**
 * Cleans up the given oCtrl after usage in a toolbar. Will be used in remove* functions
 * @param {sap.ui.core.Control} oCtrl The control instance that should be reset to standard focus info
 * @private
 */
sap.ui.commons.Toolbar.prototype.cleanupFocusInfoRedirect = function(oCtrl) {
	//jQuery.sap.assert(oCtrl._orig_getFocusInfo !== undefined);
	//jQuery.sap.assert(typeof(oCtrl._orig_getFocusInfo) === "function");
	if (oCtrl) {
		oCtrl.getFocusInfo = oCtrl._orig_getFocusInfo;
		delete oCtrl._orig_getFocusInfo;
		delete oCtrl._orig_applyFocusInfo;
	}
	return oCtrl;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", this.prepareFocusInfoRedirect(oItem), iIndex);
};

// Overwrite
sap.ui.commons.Toolbar.prototype.addItem = function(oItem) {
	this.addAggregation("items", this.prepareFocusInfoRedirect(oItem));
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeItem = function(vElement) {
	var tmp = this.removeAggregation("items", vElement);
	return this.cleanupFocusInfoRedirect(tmp);
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeAllItems = function() {
	var aTmp = this.removeAllAggregation("items");
	for(var i = 0, iL = aTmp.length; i < iL; i++){
		aTmp[i] = this.cleanupFocusInfoRedirect(aTmp[i]);
	}
	return aTmp;
};


/**
 * Overwrite
 * @private
 */
sap.ui.commons.Toolbar.prototype.getFocusInfo = function () {
	var sId = this.getId();
	if(this.bOpen) {
		return {id: sId, childId: sId};
	}
	else {
		return {id: sId};
	}
};

/**
 * Overwrite
 * @private
 */
sap.ui.commons.Toolbar.prototype.applyFocusInfo = function (oFocusInfo) {
	if (oFocusInfo) {
		var sChildId = oFocusInfo.childId;
		if (this.bOpen && sChildId){
			if (sChildId === this.getId()) {
				return;
			}
			var oCtrl = sap.ui.getCore().getControl(sChildId);
			//else
			var oContent;
			if (oCtrl && this.popup && (oContent = this.popup.getContent()) &&
					jQuery.sap.containsOrEquals(oContent.getDomRef(), oCtrl.getDomRef())) {
				oContent.applyFocusInfo(oFocusInfo.childInfo);
				return;
			}
		}
	}
	this.focus();
};


//****************************************************************
//  ToolbarOverflowPopup
//****************************************************************

/**
 * ToolbarOverflowPopup is a slim element without metadata where the element is required for ItemNavigation
 * acting as dummy control. The control is required by Popup and wrapping the HTML rendered for the popup contents.
 *
 * @private
 */
sap.ui.commons.ToolbarOverflowPopup = function(oToolbar) {
	this.oToolbar = oToolbar;
	var sId = oToolbar.getId() + "-pu";

	// Call super constructor
	sap.ui.core.Element.call(this, sId);
};

// Inherit from sap.ui.core.Element
sap.ui.commons.ToolbarOverflowPopup.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

sap.ui.core.Element.defineClass("sap.ui.commons.ToolbarOverflowPopup", {
  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {},
  aggregations : {},
  associations : {},
  events : {}
});


/**
 * Initializes the ItemNavigation for this popup and focuses the first item
 *
 * @param aNavigableItems The DOM references of the toolbar items displayed in this popup
 * @private
 */
sap.ui.commons.ToolbarOverflowPopup.prototype.initItemNavigation = function(aNavigableItems) {
	// Initialize the ItemNavigation if required
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}

	this.oItemNavigation.setRootDomRef(sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar));
	this.oItemNavigation.setItemDomRefs(aNavigableItems);
	this.oItemNavigation.focusItem(0);
};


/**
 * Called by the Popup, required to simulate a control inside the Popup when there is only some HTML.
 * The root of this HTML is returned here.
 *
 * @private
 */
sap.ui.commons.ToolbarOverflowPopup.prototype.getDomRef = function() {
	var oPu = sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar);
	if (oPu) {
		return oPu.parentNode;
	} else {
		return null;
	}
};
/**
 * Called by the Popup.
 *
 * @private
 */
sap.ui.commons.ToolbarOverflowPopup.prototype.isActive = function() {
	return sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar) != null;
};

/**
 * Handle the onsapescape event on the overflow popup, this closes the popup
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.ToolbarOverflowPopup.prototype.onsapescape = function(oEvent) {
	this.oToolbar.closePopup(true);
};
/**
 * Handle the tab key event on the overflow popup, this closes the popup
 *
 * @param {jQuery.EventObject} oEvent the forwarded browser event
 * @private
 */
   // Should ideally advance to the next tab position but currently only focuses the overflow button again.
sap.ui.commons.ToolbarOverflowPopup.prototype.onsaptabnext = function(oEvent) {
	this.oToolbar.closePopup(true);
		oEvent.preventDefault();
		oEvent.stopPropagation();
};

/**
 * Handle the tab back key event on the overflow popup, this closes the popup
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
  // Should ideally advance to the next tab position but currently only focuses the overflow button again.
sap.ui.commons.ToolbarOverflowPopup.prototype.onsaptabprevious = function(oEvent) {
	this.oToolbar.closePopup(true);
		oEvent.preventDefault();
		oEvent.stopPropagation();
};
}; // end of sap.ui.commons.Toolbar
if ( !jQuery.sap.isDeclared('sap.ui.commons.Dialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Dialog.
jQuery.sap.declare("sap.ui.commons.Dialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Dialog.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>scrollLeft : int</li>
 * <li>scrollTop : int</li>
 * <li>title : string</li>
 * <li>applyContentPadding : boolean</li>
 * <li>showCloseButton : boolean</li>
 * <li>resizable : boolean</li>
 * <li>minWidth : sap.ui.core.CSSSize</li>
 * <li>minHeight : sap.ui.core.CSSSize</li>
 * <li>maxWidth : sap.ui.core.CSSSize</li>
 * <li>maxHeight : sap.ui.core.CSSSize</li>
 * <li>contentBorderDesign : sap.ui.commons.enums.BorderDesign</li>
 * <li>modal : boolean</li>
 * <li>accessibleRole : sap.ui.core.AccessibleRole</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>buttons : sap.ui.core.Control</li>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>defaultButton : sap.ui.commons.Button</li>
 * <li>initialFocus : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>closed : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * An interactive window appearing on request displaying information to the user. The API supports features such as popups with fixed sizes, popups with unlimited width, scrolling bars for large windows, and control nesting (for example, a drop-down list can be included in the window).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Dialog = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Dialog.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Dialog. 
 * Resulting metadata can be obtained via sap.ui.commons.Dialog.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Dialog", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getHeight", "setHeight", "getScrollLeft", "setScrollLeft", "getScrollTop", "setScrollTop", "getTitle", "setTitle", "getApplyContentPadding", "setApplyContentPadding", "getShowCloseButton", "setShowCloseButton", "getResizable", "setResizable", "getMinWidth", "setMinWidth", "getMinHeight", "setMinHeight", "getMaxWidth", "setMaxWidth", "getMaxHeight", "setMaxHeight", "getContentBorderDesign", "setContentBorderDesign", "getModal", "setModal", "getAccessibleRole", "setAccessibleRole", 
    // aggregations
    "getButtons", "insertButton", "addButton", "removeButton", "removeAllButtons", "indexOfButton", "destroyButtons", "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    "getDefaultButton", "setDefaultButton", "getInitialFocus", "setInitialFocus", 
    // events
    "attachClosed", "detachClosed", 
    // methods
    "open", "close", "isOpen", "getOpenState"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "scrollLeft" : {name : "scrollLeft", type : "int", group : "Behavior", defaultValue : 0},
    "scrollTop" : {name : "scrollTop", type : "int", group : "Behavior", defaultValue : 0},
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : ''},
    "applyContentPadding" : {name : "applyContentPadding", type : "boolean", group : "Appearance", defaultValue : true},
    "showCloseButton" : {name : "showCloseButton", type : "boolean", group : "Behavior", defaultValue : true},
    "resizable" : {name : "resizable", type : "boolean", group : "Behavior", defaultValue : true},
    "minWidth" : {name : "minWidth", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "minHeight" : {name : "minHeight", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "maxWidth" : {name : "maxWidth", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "maxHeight" : {name : "maxHeight", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "contentBorderDesign" : {name : "contentBorderDesign", type : "sap.ui.commons.enums.BorderDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.BorderDesign.None},
    "modal" : {name : "modal", type : "boolean", group : "Misc", defaultValue : false},
    "accessibleRole" : {name : "accessibleRole", type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Dialog}
  },
  defaultAggregation : "content",
  aggregations : {
    "buttons" : {name : "buttons", type : "sap.ui.core.Control", multiple : true, singularName : "button"}, 
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {
    "defaultButton" : {name : "defaultButton", type : "sap.ui.commons.Button", multiple : false}, 
    "initialFocus" : {name : "initialFocus", type : "sap.ui.core.Control", multiple : false}
  },
  events : {
    "closed" : "closed"
  }

});	

sap.ui.commons.Dialog.M_EVENTS = {'closed':'closed'};


/**
 * Getter for property <code>width</code>.
 * 
 * Outer width of dialog window. When not set and not constrained by one of the width parameters (minWidth/maxWidth), the window size is automatically adapted to the content.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * 
 * Outer height of dialog window. When not set and not constrained by one of the height parameters (minHeight/maxHeight), the window size is automatically adapted to the content.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>scrollLeft</code>.
 * 
 * Scroll position from left to right. "0" means leftmost position.
 * 
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollLeft</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getScrollLeft = function() {
	return this.getProperty("scrollLeft");
};

/**
 * Setter for property <code>scrollLeft</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollLeft  new value for property <code>scrollLeft</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setScrollLeft = function(iScrollLeft) {
	this.setProperty("scrollLeft", iScrollLeft);
	return this;
};


/**
 * Getter for property <code>scrollTop</code>.
 * 
 * Scroll position from top to buttom. "0" means topmost position.
 * 
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getScrollTop = function() {
	return this.getProperty("scrollTop");
};

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setScrollTop = function(iScrollTop) {
	this.setProperty("scrollTop", iScrollTop);
	return this;
};


/**
 * Getter for property <code>title</code>.
 * 
 * Dialog title displayed in the header.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>applyContentPadding</code>.
 * 
 * Padding is theme-dependent. When set to "false", the content extends to the dialog borders.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getApplyContentPadding = function() {
	return this.getProperty("applyContentPadding");
};

/**
 * Setter for property <code>applyContentPadding</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bApplyContentPadding  new value for property <code>applyContentPadding</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setApplyContentPadding = function(bApplyContentPadding) {
	this.setProperty("applyContentPadding", bApplyContentPadding);
	return this;
};


/**
 * Getter for property <code>showCloseButton</code>.
 * 
 * Displays a close button in the title bar.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCloseButton</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getShowCloseButton = function() {
	return this.getProperty("showCloseButton");
};

/**
 * Setter for property <code>showCloseButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCloseButton  new value for property <code>showCloseButton</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setShowCloseButton = function(bShowCloseButton) {
	this.setProperty("showCloseButton", bShowCloseButton);
	return this;
};


/**
 * Getter for property <code>resizable</code>.
 * 
 * Specifies whether the dialog window can be resized by the user. The dialog frame contains the visual symbol.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizable</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getResizable = function() {
	return this.getProperty("resizable");
};

/**
 * Setter for property <code>resizable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizable  new value for property <code>resizable</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setResizable = function(bResizable) {
	this.setProperty("resizable", bResizable);
	return this;
};


/**
 * Getter for property <code>minWidth</code>.
 * 
 * Minimum outer width of the dialog window. When set, neither the user nor some layout settings can make the window smaller.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getMinWidth = function() {
	return this.getProperty("minWidth");
};

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setMinWidth = function(sMinWidth) {
	this.setProperty("minWidth", sMinWidth);
	return this;
};


/**
 * Getter for property <code>minHeight</code>.
 * 
 * Minimum outer height of the dialog window. When set, neither the user nor some layout settings can make the window smaller.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minHeight</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getMinHeight = function() {
	return this.getProperty("minHeight");
};

/**
 * Setter for property <code>minHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinHeight  new value for property <code>minHeight</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setMinHeight = function(sMinHeight) {
	this.setProperty("minHeight", sMinHeight);
	return this;
};


/**
 * Getter for property <code>maxWidth</code>.
 * 
 * Maximum outer width of the dialog window. If set, neither the user nor some layout settings can make the window larger.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getMaxWidth = function() {
	return this.getProperty("maxWidth");
};

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setMaxWidth = function(sMaxWidth) {
	this.setProperty("maxWidth", sMaxWidth);
	return this;
};


/**
 * Getter for property <code>maxHeight</code>.
 * 
 * Maximum outer height of the dialog window. If set, neither the user nor some layout settings can make the window larger.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxHeight</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getMaxHeight = function() {
	return this.getProperty("maxHeight");
};

/**
 * Setter for property <code>maxHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxHeight  new value for property <code>maxHeight</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setMaxHeight = function(sMaxHeight) {
	this.setProperty("maxHeight", sMaxHeight);
	return this;
};


/**
 * Getter for property <code>contentBorderDesign</code>.
 * 
 * Border design is theme-dependent.
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.commons.enums.BorderDesign} the value of property <code>contentBorderDesign</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getContentBorderDesign = function() {
	return this.getProperty("contentBorderDesign");
};

/**
 * Setter for property <code>contentBorderDesign</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.commons.enums.BorderDesign} oContentBorderDesign  new value for property <code>contentBorderDesign</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setContentBorderDesign = function(oContentBorderDesign) {
	this.setProperty("contentBorderDesign", oContentBorderDesign);
	return this;
};


/**
 * Getter for property <code>modal</code>.
 * 
 * Specify whether the dialog should be modal, or not. In case of <code>true</code> the focus is kept inside the dialog.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getModal = function() {
	return this.getProperty("modal");
};

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setModal = function(bModal) {
	this.setProperty("modal", bModal);
	return this;
};


/**
 * Getter for property <code>accessibleRole</code>.
 * The ARIA role for the control. E.g. for alert-style Dialogs this can be set to "AlertDialog".
 *
 * Default value is <code>Dialog</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * 
 */
sap.ui.commons.Dialog.prototype.getAccessibleRole = function() {
	return this.getProperty("accessibleRole");
};

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Dialog</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setAccessibleRole = function(oAccessibleRole) {
	this.setProperty("accessibleRole", oAccessibleRole);
	return this;
};

	
/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Aggregating the buttons to display at the bottom of the dialog, for example OK and Cancel. Association defaultButton can be used for one of the defined buttons.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.Dialog.prototype.getButtons = function() {
	return this.getAggregation("buttons", []);
};


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.insertButton = function(oButton, iIndex) {
	this.insertAggregation("buttons", oButton, iIndex);
	return this;
};

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Dialog.prototype.addButton = function(oButton) {
	this.addAggregation("buttons", oButton);
	return this;
};

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.core.Control} vButton the button to remove or its index or id
 * @return {sap.ui.core.Control} the removed button or null
 * @public
 */
sap.ui.commons.Dialog.prototype.removeButton = function(vButton) {
	return this.removeAggregation("buttons", vButton);
};

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Dialog.prototype.removeAllButtons = function() {
	return this.removeAllAggregation("buttons");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Dialog.prototype.indexOfButton = function(oButton) {
	return this.indexOfAggregation("buttons", oButton);
};
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.destroyButtons = function() {
	this.destroyAggregation("buttons");
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregating the content of the dialog (one or more controls).
 * 
 * Caveat: when content is added with width given as a percentage, the Dialog itself should have a width set.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.Dialog.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Dialog.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.Dialog.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Dialog.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Dialog.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * 
 * Defines one of the buttons that have been provided via button aggregation to be the default button. This default button is initially selected, if no control is set via the initialFocus association explicitly. The default button is activated when Enter is pressed in the context of the dialog and when the currently selected element does not handle the Enter event itself.
 *
 * @return {string} Id of the element which is the current target of the <code>defaultButton</code> association, or null
 * @public
 */
sap.ui.commons.Dialog.prototype.getDefaultButton = function() {
	return this.getAssociation("defaultButton", null);
};

/**
 * 
 * Defines one of the buttons that have been provided via button aggregation to be the default button. This default button is initially selected, if no control is set via the initialFocus association explicitly. The default button is activated when Enter is pressed in the context of the dialog and when the currently selected element does not handle the Enter event itself.
 *
 * @param {string | sap.ui.commons.Button} vDefaultButton 
 *    Id of an element which becomes the new target of this <code>defaultButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setDefaultButton = function(vDefaultButton) {
	this.setAssociation("defaultButton", vDefaultButton);
	return this;
};


	
/**
 * 
 * Defines the control that shall get the focus when the dialog is opened.
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 */
sap.ui.commons.Dialog.prototype.getInitialFocus = function() {
	return this.getAssociation("initialFocus", null);
};

/**
 * 
 * Defines the control that shall get the focus when the dialog is opened.
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.setInitialFocus = function(vInitialFocus) {
	this.setAssociation("initialFocus", vInitialFocus);
	return this;
};


	
/**
 * 
 * Event is fired when the user closes the dialog window. Event parameters provide information about last position and last size.
 *  
 *
 * @name sap.ui.commons.Dialog#closed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.width the width of the dialog when closed
 * @param {int} oControlEvent.getParameters.height the height of the dialog when closed
 * @param {int} oControlEvent.getParameters.top the top position of the dialog when closed
 * @param {int} oControlEvent.getParameters.left the left position of the dialog when closed
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.commons.Dialog</code>.<br/>
 * 
 * Event is fired when the user closes the dialog window. Event parameters provide information about last position and last size.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.attachClosed = function(oData, fnFunction, oListener) {
	this.attachEvent("closed", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.commons.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Dialog.prototype.detachClosed = function(fnFunction, oListener) {
	this.detachEvent("closed", fnFunction, oListener);
	return this;	
};

/**
 * Fire event closed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'width' of type <code>int</code> the width of the dialog when closed</li>
 * <li>'height' of type <code>int</code> the height of the dialog when closed</li>
 * <li>'top' of type <code>int</code> the top position of the dialog when closed</li>
 * <li>'left' of type <code>int</code> the left position of the dialog when closed</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Dialog.prototype.fireClosed = function(mArguments) {
	this.fireEvent("closed", mArguments);
	return this;
};


/**
 * Opens the dialog control instance.
 *
 * @name sap.ui.commons.Dialog.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Closes the dialog control instance.
 *
 * @name sap.ui.commons.Dialog.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Returns whether the Dialog is open (this includes opening and closing animations). For more detailed information about the current state check Dialog.getOpenState().
 *
 * @name sap.ui.commons.Dialog.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


/**
 * Returns whether the Dialog is currently open, closed, or transitioning between these states.
 *
 * @name sap.ui.commons.Dialog.prototype.getOpenState
 * @function

 * @type sap.ui.core.OpenState
 * @public
 */


// Start of sap/ui/commons/Dialog.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initialization hook for the dialog.
 * It creates the instance of the Popup helper service and does some basic configuration for it.
 * 
 * @private
 */
sap.ui.commons.Dialog.prototype.init = function() {
   // do something for initialization...
   this.oPopup = new sap.ui.core.Popup(this, true, true);
   var eDock = sap.ui.core.Popup.Dock;
   this.oPopup.setPosition(eDock.CenterCenter, eDock.CenterCenter, window);

   this._minWidth = 64; // the technical minWidth, not the one set via API; will be calculated after rendering
   this._minHeight = 48; // the technical minHeight, not the one set via API; will be calculated after rendering
   // TODO: re-calculate after theme switch?!!

   this.allowTextSelection(false);
};

sap.ui.commons.Dialog.prototype.setInitialFocus = function(sId) {
	if (sId != null && typeof(sId) != "string") {
		sId = sId.getId();
	}
	this.oPopup.setInitialFocusId(sId);
	this.setAssociation("initialFocus", sId, true);
};

/**
 * Required adaptations after rendering.
 * @private
 */
sap.ui.commons.Dialog.prototype.onAfterRendering = function() {
	var $content = jQuery.sap.byId(this.getId() + "-cont");

	// if content has 100% width, but Dialog has no width, set content width to auto
	if (!sap.ui.commons.Dialog._isSizeSet(this.getWidth()) && !sap.ui.commons.Dialog._isSizeSet(this.getMaxWidth())) {
		$content.children().each(function(index, element) {
			if (jQuery.trim(this.style.width) == "100%") {
				this.style.width = "auto";
			}
		});
	}
	
	// IE9+10 fix where subpixel font rendering may lead to rounding errors in RTL mode when the content has a width of "xyz.5px"
	if (jQuery.browser.msie && (jQuery.browser.version == 9 || jQuery.browser.version == 10) && ($content.length > 0)) {
		var elm = $content[0];
		if (sap.ui.getCore().getConfiguration().getRTL() && !sap.ui.commons.Dialog._isSizeSet(this.getWidth())) {
			if (elm.ownerDocument && elm.ownerDocument.defaultView && elm.ownerDocument.defaultView.getComputedStyle) {
				var width = elm.ownerDocument.defaultView.getComputedStyle(elm).getPropertyValue("width");
				if (width) {
					var fWidth = parseFloat(width, 10);
					if (fWidth % 1 == 0.5) {
						$content[0].style.width = (fWidth + 0.01) + "px"; // if aaaalll these conditions are fulfilled, the Dialog must be a LITTLE bit wider to avoid rounding errors
					}
				}
			}
		}
	}

	// Calculate min size
	var _minSize = this.getMinSize();
	this._minWidth = _minSize.width;
	this._minHeight = _minSize.height;
};

/**
 * Handle the click event happening on the dialog instance.
 *
 * TODO also raise some event when click on 'x'
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onclick = function(oEvent) {
	switch(oEvent.target.id) {
	case this.getId() + "-close":
		this.close();
		// What do we do here?
//		this.fireClose({id:this.getId(),result:sap.ui.commons.DialogResult.Close});
		break;
	};
};

/**
 * Opens this instance of dialog
 * @public
 */
sap.ui.commons.Dialog.prototype.open = function() {

	if ( !this.oPopup ) {
		// TODO discuss behavior of destroyed controls in general
		jQuery.sap.log.fatal("This dialog instance has been destroyed already");
		return;
	}
	if ( this._bOpen ) {
		return;
	}

	// Save current focused element to restore the focus after closing the dialog
	var focusedControlId = sap.ui.getCore().getCurrentFocusedControlId();
	this.oPreviousFocus = null;
	if(focusedControlId){
		var oFocusedControl = sap.ui.getCore().getControl(focusedControlId);
		this.oPreviousFocus = {'sFocusId':focusedControlId,'oFocusInfo': oFocusedControl ? oFocusedControl.getFocusInfo() : null};
	}

	this.oPopup.attachEvent("opened", this.handleOpened, this);
	this.oPopup.setModal(this.getModal());
	this.oPopup.open(400);
	this._bOpen = true;
};

sap.ui.commons.Dialog.prototype.handleOpened = function() {
	this.oPopup.detachEvent("opened", this.handleOpened, this);

	var sInitFocus = this.getInitialFocus(),
		oFocusCtrl;
	if(sInitFocus && (oFocusCtrl = sap.ui.getCore().getControl(sInitFocus))){ // an additional previous check was  oFocusCtrl.getParent() === this  which prevented nested children from being focused
		oFocusCtrl.focus();

	} else {
		sInitFocus = this.getDefaultButton();
		if(sInitFocus && (oFocusCtrl = sap.ui.getCore().getControl(sInitFocus)) && oFocusCtrl.getParent() === this){
			oFocusCtrl.focus();

		} else if (this.getButtons().length > 0) {
			this.getButtons()[0].focus();// TODO is this wanted?

		} else if(this.getContent().length > 0){
			// let's at least focus something in the Dialog
			this.getContent()[0].focus();
		}
	}
};

/**
 * Closes this Dialog
 * @public
 */
sap.ui.commons.Dialog.prototype.close = function() {

	if ( !this._bOpen ) {
		return;
	}

	var oRect = this.$().rect();

	this._bOpen = false;
	this.oPopup.close(400);

	// do this delayed or it possible won't work because of popup closing animations
	jQuery.sap.delayedCall(400,this,"restorePreviousFocus");

	jQuery.each(oRect, function(key, val){
		oRect[key] = parseInt(val, 10);
	});
	// It could become required to do this decoupled via jQuery.sap.delayedCall(...
	this.fireClosed(oRect);
};

/** *
 * restore the focus when the dialog was closed to the control which opened the dialog.
 * This is independent of the dialogs modal state. The popup also restores focus when using modal popups/dialogs.
 * @private
 */
sap.ui.commons.Dialog.prototype.restorePreviousFocus = function() {
	if (this.oPreviousFocus) {
		var oFocusedControl = sap.ui.getCore().getControl(
				this.oPreviousFocus.sFocusId);
		if (oFocusedControl != null) {
			oFocusedControl.applyFocusInfo(this.oPreviousFocus.oFocusInfo);
		}
		this.oPreviousFocus = null;
	}
};


sap.ui.commons.Dialog.prototype.setTitle = function (sText) {
	this.setProperty("title", sText, true); // last parameter avoids invalidation
	jQuery.sap.byId(this.getId() + "-lbl").html(sText);
	return this;
};

/**
 * Destroys this instance of dialog, called by Element#destroy()
 * @private
 */
sap.ui.commons.Dialog.prototype.exit = function() {
	this.close();
	this.oPopup.destroy();
	this.oPopup = null;
};

/**
 * Checks whether the given sCssSize is an explicit value, or not (e.g. auto, inherit).
 *
 * @param {string} sCssSize The CSS string to check for being explicit value.
 * @return {boolean} whether The given sCssSize is an explicit value, or not (e.g. auto, inherit).
 * @private
 */
sap.ui.commons.Dialog._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize == "auto") && !(sCssSize == "inherit"));
};

/**
 * Handles the sapescape event, triggers closing of the window.
 * TODO also raise some event like with the click on 'x'
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onsapescape = function(oEvent) {
	this.close();

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the sapenter event, triggers the default button of the dialog.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onsapenter = function(oEvent) {
	// See open-method
	var oFocusCtrl,
	    sInitFocus = this.getDefaultButton();
	    
	// trigger the default button if it exists and is inside the Dialog
	if(sInitFocus && (oFocusCtrl = sap.ui.getCore().byId(sInitFocus)) && jQuery.contains(this.getDomRef(), oFocusCtrl.getDomRef())) {
		// Okay, we have the control
		if (oFocusCtrl instanceof sap.ui.commons.Button) {
			oFocusCtrl.onclick(oEvent);
		} // FIXME is this really the way it should be?
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Event handler for the focusin event.
 * If it occurs on the focus handler elements at the beginning of the dialog, the focus is set to the end, and vice versa.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onfocusin = function(oEvent){
	this.sLastRelevantNavigation = null;

	var oSourceDomRef = oEvent.target;

	if (oSourceDomRef.id === this.getId() + "-fhfe") {
		// the FocusHandlingFirstElement was focused and thus the focus should move to the last element.
		var aButtons = this.getButtons();
		if (aButtons.length > 0) {
			aButtons[aButtons.length-1].focus();
		} else {
			jQuery.sap.focus(jQuery.sap.byId(this.getId() + "-cont").lastFocusableDomRef());
		}
	} else if (oSourceDomRef.id === this.getId() + "-fhee") {
		// the FocusHandlingEndElement was focused and thus the focus should move to the first element.
		// if the title should be 'tab-able' change the id of the element to focus here!
		var oFirst = jQuery.sap.byId(this.getId() + "-cont").firstFocusableDomRef();
		if(oFirst) {
			jQuery.sap.focus(oFirst);
			return;
		}//	else
		var aButtons = this.getButtons();
		if (aButtons.length > 0) {
			aButtons[0].focus();
		}
	} else if(!oEvent.srcControl || !jQuery.sap.containsOrEquals(this.getDomRef(), oEvent.srcControl.getDomRef())){
		this.handleOpened();
	}
};

/**
 * Restores the focus in case it got lost beforehand e.g. by leaving the dialog or the whole window.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.restoreFocus = function() {
	if (this.oRestoreFocusInfo && this.oPopup.bOpen) { // do not restore the focus if Dialog is no longer open  TODO: where is the focus going, then? The Toolbar testpage at least works fine.
		var oCtrl = sap.ui.getCore().getControl(this.oRestoreFocusInfo.sFocusId);
		if (oCtrl) {
			oCtrl.applyFocusInfo(this.oRestoreFocusInfo.oFocusInfo);
		}
	}
};

/**
 * Handles or cancels the selectstart event when occuring in parts of the dialog.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onselectstart = function(oEvent) {
	if(jQuery(oEvent.target).control(0) === this) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Get minimal reasonable size of the dialog given its inner elements. Call is recommended after rendering.
 *
 * @return {Object} An object with inner structure {width:{int}, height:{int}}
 * @private
 */
sap.ui.commons.Dialog.prototype.getMinSize = function () {

	var oDialog = jQuery.sap.domById(this.sId), oTitle = jQuery.sap.domById(this.sId + "-hdr"), oFooter = jQuery.sap.domById(this.sId + "-footer"),
		heightTitle=0, widthFooter=0, heightFooter=0;

	var oFooterBtns = jQuery(oFooter).children("DIV").get(0);
	widthFooter = oFooterBtns.offsetWidth;

	var addValue = 0;
	// add border and padding of footer...not margin
	addValue += jQuery(oFooter).outerWidth(false) - jQuery(oFooter).width();
	// add border and padding of footer...not margin
	addValue += jQuery(oDialog).outerWidth(false) - jQuery(oDialog).width();

	// if there is a too small specific border value add +20 for certainty to avoid wrapping
	if (addValue <= 20) {
	 addValue = 20;
	}

	widthFooter += addValue;

	if (isNaN(widthFooter) || widthFooter < 100) {
		widthFooter = 100;
	}

	heightTitle = oTitle.offsetHeight;
	heightFooter = oFooter.offsetHeight;
	return {
		width: widthFooter,
		height: heightTitle + heightFooter + 36 /* min. height content */
	};
};


// Implementation of API method isOpen
sap.ui.commons.Dialog.prototype.isOpen = function(){
	return this.oPopup.isOpen();
};

// Implementation of API method isOpen
sap.ui.commons.Dialog.prototype.getOpenState = function(){
	return this.oPopup.getOpenState();
};

// **************************************************
// 'Legacy' Resize and Move handling including jQuery-UI parts for that would bring in 70k (uncompressed)
// **************************************************

/**
* Handles the dragstart event.
* In case of resize currently ongoing, this cancels the dragstart.
* @param {sap.ui.core.BroserEvent} oEvent The forwarded browser event
* @private
*/
sap.ui.commons.Dialog.prototype.ondragstart = function(oEvent){
	if(this.sDragMode == "resize" || this.sDragMode == "move") {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Initializes drag and move capabilities.

 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */ // Copied from LS
sap.ui.commons.Dialog.prototype.onmousedown = function (oEvent) {

	var oSource = oEvent.target,
		sId = this.getId();
	if(jQuery.sap.containsOrEquals(jQuery.sap.domById(sId + "-hdr"), oSource)) {
		if (oSource.id != (sId + "-close")) {
			this.sDragMode = "move";
		}
	} else if(oSource.id == sId + "-grip") {
		this.sDragMode = "resize";
		this._bRtlMode = sap.ui.getCore().getConfiguration().getRTL(); // remember the RTL mode for the starting resize operation

		// Now the dialog is fixed-width and fixed-height; write them to the element and adapt its classes to switch positioning
		var oDomRef = this.getDomRef();
		var sWidth = oDomRef.offsetWidth + "px";
		oDomRef.style.width = sWidth;
		var sHeight = oDomRef.offsetHeight + "px";
		oDomRef.style.height = sHeight;
		jQuery(oDomRef).removeClass("sapUiDlgFlexHeight sapUiDlgFlexWidth");
		// ...also remember the dimensions for the future (e.g. for after rerendering) - but do not cause rerendering now
		this.setProperty("width", sWidth, true);
		this.setProperty("height", sHeight, true);
	}

	if (this.sDragMode == null) {
		return;
	}

	// save current focused control for restoring later in restore focus
	var oActElement = document.activeElement;
	if (oActElement && oActElement.id){
		var oCtrl = jQuery.sap.byId(oActElement.id).control(0);
		if(oCtrl) {
			this.oRestoreFocusInfo = {sFocusId: oCtrl.getId(), oFocusInfo: oCtrl.getFocusInfo()};
		}
	}

	// Calculate event X,Y coordinates
	this.startDragX = oEvent.screenX;
	this.startDragY = oEvent.screenY;

	this.originalRectangle = this.$().rect();

	jQuery(window.document).bind("selectstart", jQuery.proxy(this.ondragstart, this));
	jQuery(window.document).bind("mousemove", jQuery.proxy(this.handleMove, this));
	jQuery(window.document).bind("mouseup", jQuery.proxy(this.handleMouseUp, this));

	if(window.parent && (window.parent != window)) {
		jQuery(window.parent.document).bind("selectstart", jQuery.proxy(this.ondragstart, this), true);
		jQuery(window.parent.document).bind("mousemove", jQuery.proxy(this.handleMove, this), true);
		jQuery(window.parent.document).bind("mouseup", jQuery.proxy(this.handleMouseUp, this), true);
//		//fix for 438834 2010
//		//app runs in a frame and without blocklayer
//		if (jQuery.browser.firefox){
//			var oOpenerLS = this.getPopupManager().oGetOpenerLSByPopupId(this.sId);
//			//don't attach twice to the same window
//			if (oOpenerLS.oGetWindow() != parent)
//				UCF_DomUtil.attachEvent(oOpenerLS.oGetWindow().document, "mousemove", this.handleMoveCall);
//		}
	}

};

/**
 * Handles the move event taking the current dragMode into account.
 * @param {DOMEvent} event The event raised by the browser.
 * @private
 */
sap.ui.commons.Dialog.prototype.handleMove = function (event) {

	if (!this.sDragMode) {
		return;
	}

	event = event || window.event;

	if (this.sDragMode == "resize") {

		var deltaX = event.screenX - this.startDragX;
		var deltaY = event.screenY - this.startDragY;

		var w = (this._bRtlMode ? this.originalRectangle.width - deltaX : this.originalRectangle.width + deltaX);
		var h = this.originalRectangle.height + deltaY;

		w = Math.max(w, this._minWidth);
		h = Math.max(h, this._minHeight);

		// The dimension constraints set via API could be in any CSS unit, so just set the size and do checks
		// (min/max override what was set here)
		var oDomRef = this.getDomRef();
		oDomRef.style.width = w + "px";
		oDomRef.style.height = h + "px";

		// Now use the actual size of the dialog, which might have been constrained by min-*/max-* for resizing the popup and the shadow
		w = this.getDomRef().offsetWidth;
		h = this.getDomRef().offsetHeight;
		
		// In IE8, style.width/height will still have the old values - possibly outside this Dialog's size constraints.
		// The Dialog box itself will stay correctly constrained, but its child elements will be positioned as if the style.width/height
		// values were the actual size, so for this browser - and to be cleaner - explicitly set these sizes. This is an IE8 bug.
		oDomRef.style.width = w + "px";
		oDomRef.style.height = h + "px";

		// Also remember the dimensions for the future (e.g. for after rerendering) - but do not cause rerendering now
		this.setProperty("width", w+"px", true);
		this.setProperty("height", h+"px", true);

	} else if (this.sDragMode == "move") {
		var iLeft = this.originalRectangle.left + event.screenX - this.startDragX;
		var iTop = this.originalRectangle.top + event.screenY - this.startDragY;
		this.oPopup.setPosition(sap.ui.core.Popup.Dock.LeftTop, {left:iLeft, top:iTop});
	}

	event.cancelBubble = true;
	return false;
};

/**
 * Handle onmouseup event.
 * This does the cleanup after drag and move handling.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.handleMouseUp = function (oEvent) {

	if (this.sDragMode == null) {
		return;
	}

	jQuery(window.document).unbind("selectstart", this.ondragstart);
	jQuery(window.document).unbind("mousemove", this.handleMove);
	jQuery(window.document).unbind("mouseup", this.handleMouseUp);

	if (window.parent) {
		jQuery(window.parent.document).unbind("selectstart", this.ondragstart);
		jQuery(window.parent.document).unbind("mousemove", this.handleMove);
		jQuery(window.parent.document).unbind("mouseup", this.handleMouseUp);
	}

	// Set back focus to previously focused element
	this.restoreFocus();
	this.sDragMode = null;

};
}; // end of sap.ui.commons.Dialog
if ( !jQuery.sap.isDeclared('sap.ui.commons.Button') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Button.
jQuery.sap.declare("sap.ui.commons.Button");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Button.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>helpId : string</li>
 * <li>icon : string</li>
 * <li>iconFirst : boolean</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>styled : boolean</li>
 * <li>lite : boolean</li>
 * <li>style : sap.ui.commons.ButtonStyle</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>press : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * <p>
 * Using the button control you enable end users to trigger actions such as Save or Print. For the button UI, you can define some text or an icon, or both.
 * </p>
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Button = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Button.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Button. 
 * Resulting metadata can be obtained via sap.ui.commons.Button.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Button", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  interfaces : ["sap.ui.commons.ToolbarItem"],
  publicMethods : [
    // properties 
    "getText", "setText", "getEnabled", "setEnabled", "getVisible", "setVisible", "getWidth", "setWidth", "getHelpId", "setHelpId", "getIcon", "setIcon", "getIconFirst", "setIconFirst", "getHeight", "setHeight", "getStyled", "setStyled", "getLite", "setLite", "getStyle", "setStyle", 
    // aggregations
    
    // associations
    
    // events
    "attachPress", "detachPress", 
    // methods
    "focus"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : ''},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "helpId" : {name : "helpId", type : "string", group : "Behavior", defaultValue : ''},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : ''},
    "iconFirst" : {name : "iconFirst", type : "boolean", group : "Appearance", defaultValue : true},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "styled" : {name : "styled", type : "boolean", group : "Appearance", defaultValue : true},
    "lite" : {name : "lite", type : "boolean", group : "Appearance", defaultValue : false},
    "style" : {name : "style", type : "sap.ui.commons.ButtonStyle", group : "Appearance", defaultValue : sap.ui.commons.ButtonStyle.Default}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "press" : "press"
  }

});	

sap.ui.commons.Button.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * 
 * Control text displayed at runtime.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled buttons have other colors than enabled ones, depending on customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible buttons are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * 
 * Control width as common CSS-size (px or % as unit, for example).
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>helpId</code>.
 * 
 * Unique identifier used for help service.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getHelpId = function() {
	return this.getProperty("helpId");
};

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setHelpId = function(sHelpId) {
	this.setProperty("helpId", sHelpId);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * 
 * Icon displayed within the control at runtime.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>iconFirst</code>.
 * 
 * The display sequence is 1.icon 2.control text.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getIconFirst = function() {
	return this.getProperty("iconFirst");
};

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setIconFirst = function(bIconFirst) {
	this.setProperty("iconFirst", bIconFirst);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * The height of the Button.
 * NOTE: if this property is set, the height defined by the theme is not used anymore! The themes, however, define the official SAP design, so this property should only be used in justified special cases.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>styled</code>.
 * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>styled</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getStyled = function() {
	return this.getProperty("styled");
};

/**
 * Setter for property <code>styled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStyled  new value for property <code>styled</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setStyled = function(bStyled) {
	this.setProperty("styled", bStyled);
	return this;
};


/**
 * Getter for property <code>lite</code>.
 * The button is rendered as lite button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lite</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getLite = function() {
	return this.getProperty("lite");
};

/**
 * Setter for property <code>lite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLite  new value for property <code>lite</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setLite = function(bLite) {
	this.setProperty("lite", bLite);
	return this;
};


/**
 * Getter for property <code>style</code>.
 * Style of the button.
 * (e.g. emphasized)
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code>
 *
 * @return {sap.ui.commons.ButtonStyle} the value of property <code>style</code>
 * @public
 * 
 */
sap.ui.commons.Button.prototype.getStyle = function() {
	return this.getProperty("style");
};

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code> 
 *
 * @param {sap.ui.commons.ButtonStyle} oStyle  new value for property <code>style</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.setStyle = function(oStyle) {
	this.setProperty("style", oStyle);
	return this;
};


/**
 * 
 * Event is fired when the user presses the control.
 *  
 *
 * @name sap.ui.commons.Button#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Button</code>.<br/>
 * 
 * Event is fired when the user presses the control.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.attachPress = function(oData, fnFunction, oListener) {
	this.attachEvent("press", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Button.prototype.detachPress = function(fnFunction, oListener) {
	this.detachEvent("press", fnFunction, oListener);
	return this;	
};

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Button.prototype.firePress = function(mArguments) {
	this.fireEvent("press", mArguments);
	return this;
};


/**
 * Puts the focus into the control.
 *
 * @name sap.ui.commons.Button.prototype.focus
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/Button.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.apply(sap.ui.commons.Button.prototype, [true]);

/**
 * Function is called when button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onclick = function(oEvent) {
	if (this.getEnabled()){
		this.firePress({/* no parameters */});
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onsapenter = function(oEvent) {
	oEvent.stopPropagation();
};

/**
 * Function is called when mouse key is clicked down. The button style classes
 * are replaced then.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmousedown = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onactive) {
		this.getRenderer().onactive(this);
	}
};

/**
 * When mouse key is up again, reset the background images to normal.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmouseup = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().ondeactive) {
		this.getRenderer().ondeactive(this);
	}
	if (jQuery.browser.webkit) {
		this.focus(); // webkit does not focus a Button on click, it even unfocuses it onmousedown!
	}
};

/**
 * When mouse is going out of the control, reset the background images to normal.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmouseout = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onmouseout) {
		this.getRenderer().onmouseout(this);
	}
};

/**
 * When the button looses the focus, this method is called.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onfocusout = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}
};
}; // end of sap.ui.commons.Button
if ( !jQuery.sap.isDeclared('sap.ui.commons.Panel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Panel.
jQuery.sap.declare("sap.ui.commons.Panel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Panel.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li>
 * <li>scrollLeft : int</li>
 * <li>scrollTop : int</li>
 * <li>applyContentPadding : boolean</li>
 * <li>collapsed : boolean</li>
 * <li>areaDesign : sap.ui.commons.enums.AreaDesign</li>
 * <li>borderDesign : sap.ui.commons.enums.BorderDesign</li>
 * <li>showCollapseIcon : boolean</li>
 * <li>text : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li>
 * <li>title : sap.ui.commons.Title</li>
 * <li>buttons : sap.ui.commons.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A scrollable container for text and/or controls. The panel does not layout the contained controls.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Panel = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Panel.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Panel. 
 * Resulting metadata can be obtained via sap.ui.commons.Panel.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Panel", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getHeight", "setHeight", "getEnabled", "setEnabled", "getVisible", "setVisible", "getScrollLeft", "setScrollLeft", "getScrollTop", "setScrollTop", "getApplyContentPadding", "setApplyContentPadding", "getCollapsed", "setCollapsed", "getAreaDesign", "setAreaDesign", "getBorderDesign", "setBorderDesign", "getShowCollapseIcon", "setShowCollapseIcon", "getText", "setText", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", "getTitle", "setTitle", "destroyTitle", "getButtons", "insertButton", "addButton", "removeButton", "removeAllButtons", "indexOfButton", "destroyButtons", 
    // associations
    
    // events
    
    // methods
    "setDimensions"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "scrollLeft" : {name : "scrollLeft", type : "int", group : "Behavior", defaultValue : 0},
    "scrollTop" : {name : "scrollTop", type : "int", group : "Behavior", defaultValue : 0},
    "applyContentPadding" : {name : "applyContentPadding", type : "boolean", group : "Appearance", defaultValue : true},
    "collapsed" : {name : "collapsed", type : "boolean", group : "Behavior", defaultValue : false},
    "areaDesign" : {name : "areaDesign", type : "sap.ui.commons.enums.AreaDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.AreaDesign.Fill},
    "borderDesign" : {name : "borderDesign", type : "sap.ui.commons.enums.BorderDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.BorderDesign.Box},
    "showCollapseIcon" : {name : "showCollapseIcon", type : "boolean", group : "Behavior", defaultValue : true},
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    "title" : {name : "title", type : "sap.ui.commons.Title", multiple : false}, 
    "buttons" : {name : "buttons", type : "sap.ui.commons.Button", multiple : true, singularName : "button"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>width</code>.
 * The width of the Panel.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * When not set, the panel height is automatically adjusted to the content.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * The enabled state of the Panel.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible panels are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>scrollLeft</code>.
 * Specifies the scroll position from left to right. Value "0" means leftmost position.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollLeft</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getScrollLeft = function() {
	return this.getProperty("scrollLeft");
};

/**
 * Setter for property <code>scrollLeft</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollLeft  new value for property <code>scrollLeft</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollLeft = function(iScrollLeft) {
	this.setProperty("scrollLeft", iScrollLeft);
	return this;
};


/**
 * Getter for property <code>scrollTop</code>.
 * Specifies the scroll position from top to bottom. Value "0" means topmost position.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getScrollTop = function() {
	return this.getProperty("scrollTop");
};

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollTop = function(iScrollTop) {
	this.setProperty("scrollTop", iScrollTop);
	return this;
};


/**
 * Getter for property <code>applyContentPadding</code>.
 * Padding is theme-dependent.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getApplyContentPadding = function() {
	return this.getProperty("applyContentPadding");
};

/**
 * Setter for property <code>applyContentPadding</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bApplyContentPadding  new value for property <code>applyContentPadding</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setApplyContentPadding = function(bApplyContentPadding) {
	this.setProperty("applyContentPadding", bApplyContentPadding);
	return this;
};


/**
 * Getter for property <code>collapsed</code>.
 * A collapsed panel consumes minimal space. When initially collapsed, its contents are not rendered.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>collapsed</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getCollapsed = function() {
	return this.getProperty("collapsed");
};

/**
 * Setter for property <code>collapsed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCollapsed  new value for property <code>collapsed</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed);
	return this;
};


/**
 * Getter for property <code>areaDesign</code>.
 * Defines the background color. Depending on the current theme, this setting may or may not have any effect.
 *
 * Default value is <code>Fill</code>
 *
 * @return {sap.ui.commons.enums.AreaDesign} the value of property <code>areaDesign</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getAreaDesign = function() {
	return this.getProperty("areaDesign");
};

/**
 * Setter for property <code>areaDesign</code>.
 *
 * Default value is <code>Fill</code> 
 *
 * @param {sap.ui.commons.enums.AreaDesign} oAreaDesign  new value for property <code>areaDesign</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setAreaDesign = function(oAreaDesign) {
	this.setProperty("areaDesign", oAreaDesign);
	return this;
};


/**
 * Getter for property <code>borderDesign</code>.
 * The panel can have a box as frame. Depending on the current theme, this setting may or may not have any effect.
 *
 * Default value is <code>Box</code>
 *
 * @return {sap.ui.commons.enums.BorderDesign} the value of property <code>borderDesign</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getBorderDesign = function() {
	return this.getProperty("borderDesign");
};

/**
 * Setter for property <code>borderDesign</code>.
 *
 * Default value is <code>Box</code> 
 *
 * @param {sap.ui.commons.enums.BorderDesign} oBorderDesign  new value for property <code>borderDesign</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setBorderDesign = function(oBorderDesign) {
	this.setProperty("borderDesign", oBorderDesign);
	return this;
};


/**
 * Getter for property <code>showCollapseIcon</code>.
 * Determines whether the Panel should have an icon for collapsing/expanding.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCollapseIcon</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getShowCollapseIcon = function() {
	return this.getProperty("showCollapseIcon");
};

/**
 * Setter for property <code>showCollapseIcon</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCollapseIcon  new value for property <code>showCollapseIcon</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setShowCollapseIcon = function(bShowCollapseIcon) {
	this.setProperty("showCollapseIcon", bShowCollapseIcon);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * The Panel title text - for the simple case where no icon is required (use the "title" aggregation in that case). Using this property will create and use a Title object under the hood.
 * Be aware that when using both the "text" property and the "title" aggregation modifying one will affect the other.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Panel.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregates the controls that are contained in the panel where the control layouting is browser-dependent.
 * For a stable content layout, it is recommended to use a layout control as single direct child.
 * When the panel dimensions are set, the child control may have width and height of 100%.
 * when the dimensions are not set, the child defines the panel size.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.Panel.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Panel.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.Panel.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Panel.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Panel.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};

	
/**
 * Getter for aggregation <code>title</code>.<br/>
 * Aggregates the title element of the panel. For text titles only, you alternatively could use setText() which also creates a Title in the background.
 * Be aware that when using both the "text" property and the "title" aggregation modifying one will affect the other.
 * 
 * @return {sap.ui.commons.Title}
 * @public
 */
sap.ui.commons.Panel.prototype.getTitle = function() {
	return this.getAggregation("title", null);
};


/**
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.ui.commons.Title}
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setTitle = function(oTitle) {
	this.setAggregation("title", oTitle);
	return this;
};
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.destroyTitle = function() {
	this.destroyAggregation("title");
	return this;
};

	
/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * The Buttons to be displayed in the Panel header
 * 
 * @return {sap.ui.commons.Button[]}
 * @public
 */
sap.ui.commons.Panel.prototype.getButtons = function() {
	return this.getAggregation("buttons", []);
};


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.insertButton = function(oButton, iIndex) {
	this.insertAggregation("buttons", oButton, iIndex);
	return this;
};

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Panel.prototype.addButton = function(oButton) {
	this.addAggregation("buttons", oButton);
	return this;
};

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.commons.Button} vButton the button to remove or its index or id
 * @return {sap.ui.commons.Button} the removed button or null
 * @public
 */
sap.ui.commons.Panel.prototype.removeButton = function(vButton) {
	return this.removeAggregation("buttons", vButton);
};

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Button[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Panel.prototype.removeAllButtons = function() {
	return this.removeAllAggregation("buttons");
};

/**
 * Checks for the provided <code>sap.ui.commons.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Panel.prototype.indexOfButton = function(oButton) {
	return this.indexOfAggregation("buttons", oButton);
};
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.destroyButtons = function() {
	this.destroyAggregation("buttons");
	return this;
};


/**
 * Sets panel dimensions width and height.
 *
 * @name sap.ui.commons.Panel.prototype.setDimensions
 * @function
 * @param {sap.ui.core.CSSSize} 
 *         sWidth
 *         
 * Panel width as CSS size.
 * 
 * @param {sap.ui.core.CSSSize} 
 *         sHeight
 *         
 * Panel height as CSS size.
 * 

 * @type void
 * @public
 */


// Start of sap/ui/commons/Panel.js
/**
 * Initialization
 * @private
 */
sap.ui.commons.Panel.prototype.init = function() {
	this._oScrollDomRef = null;     // points to the content area
	this._iMaxTbBtnWidth = -1;      // the maximum width of all toolbar buttons (when there are any, else -1)
	this._iTbMarginsAndBorders = 0;
	this._iMinTitleWidth = 30;      // the minimum width of the title span
	this._iOptTitleWidth = 30;
	this._iTitleMargin = 0;
	this._bFocusCollapseIcon = false; // indicates whether the collapse icon should be focused after the next rendering
};


/**
 * Called after the theme has been switched: adjust sizes
 * @private
 */
sap.ui.commons.Panel.prototype.onThemeChanged = function () {
	if (this.getDomRef() && this._oTitleDomRef) { // only if already rendered and if a real Panel (no subclass like Tab)
		
		// reset size settings done for previous theme, so elements take their optimum space
		this.getDomRef().style.minWidth = "auto";
		if (this._oToolbarDomRef) this._oToolbarDomRef.style.width = "auto";
		this._oTitleDomRef.style.width = "auto";
		
		// adapt sizes
		this._initializeSizes(); // TODO: delay this for Safari?
		if (!jQuery.support.flexBoxLayout ||
				(sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0)))) {
			this.onresize();
		}
	}
};


/**
 * Event unbinding
 * @private
 */
sap.ui.commons.Panel.prototype.onBeforeRendering = function() {
	// Deregister resize event before re-rendering
	if(this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Adapts size settings of the rendered HTML
 * @private
 */
sap.ui.commons.Panel.prototype.onAfterRendering = function () {
	var id = this.getId();
	this._oScrollDomRef = jQuery.sap.domById(id + "-cont");
	if (!this._oScrollDomRef) {
		return;
	} // BugFix for TwoGo where the DomRefs where not there after rendering
	this._oHeaderDomRef = jQuery.sap.domById(id + "-hdr");
	this._oTitleDomRef = jQuery.sap.domById(id + "-title");
	this._oToolbarDomRef = jQuery.sap.domById(id + "-tb");

	// restore focus if required
	if (this._bFocusCollapseIcon) {
		this._bFocusCollapseIcon = false;
		var $collArrow = jQuery.sap.byId(id + "-collArrow");
		if($collArrow.is(":visible") && ($collArrow.css("visibility") == "visible" || $collArrow.css("visibility") == "inherit")) {
			$collArrow.focus();
		} else {
			var $collIco = jQuery.sap.byId(id + "-collIco");
			if ($collIco.is(":visible") && ($collIco.css("visibility") == "visible" || $collIco.css("visibility") == "inherit")) {
				$collIco.focus();
			}
		}
	}

	this._initializeSizes(); // TODO: delay this for Safari?

	// in browsers not supporting the FlexBoxLayout we need to listen to resizing
	if (!jQuery.support.flexBoxLayout ||
			(sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0)))) {
		this.onresize();
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
	}
};


/**
 * 
 * @protected
 */
sap.ui.commons.Panel.prototype.getFocusInfo = function () {
	var collId = null;
	var id = this.getId();
	
	// if collapse icon needs to be focused, find out which one - if any - is currently visible
	if (this._bFocusCollapseIcon) {
		var $collArrow = jQuery.sap.byId(id + "-collArrow");
		if($collArrow.is(":visible") && ($collArrow.css("visibility") == "visible" || $collArrow.css("visibility") == "inherit")) {
			collId = $collArrow[0].id;
		} else {
			var $collIco = jQuery.sap.byId(id + "-collIco");
			if ($collIco.is(":visible") && ($collIco.css("visibility") == "visible" || $collIco.css("visibility") == "inherit")) {
				collId = $collIco[0].id;
			}
		}
	
	}
	
	// if a collapse icon is visible and to be focused, return its ID, otherwise just the control ID
	return {id:(collId ? collId : id)};
};


/**
 * 
 * @private
 */
sap.ui.commons.Panel.prototype.applyFocusInfo = function (oFocusInfo) {
	var $DomRef;
	if (oFocusInfo && oFocusInfo.id && ($DomRef = jQuery.sap.byId(oFocusInfo.id)) && ($DomRef.length > 0)) {
		$DomRef.focus();
	} else {
		this.focus();
	}
	return this;
}; 


/**
 * Measures and calculates/sets sizes as soon as the CSS has been applied after rendering or a theme switch
 * @private
 */
sap.ui.commons.Panel.prototype._initializeSizes = function() {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();

	// maximum width of a toolbar item -> min toolbar width
	var aButtons = this.getButtons();
	if (aButtons && aButtons.length > 0) {
		var maxWidth = 0;
		jQuery(this._oToolbarDomRef).children().each(function(){
			var width = this.offsetWidth;
			if (width > maxWidth) {
				maxWidth = width;
			}
		});
		this._iMaxTbBtnWidth = maxWidth;

		if (this._oToolbarDomRef) {
			this._oToolbarDomRef.style.minWidth = maxWidth + "px";

			// calculate the toolbar borders and margins
			var $tb = jQuery(this._oToolbarDomRef);
			this._iTbMarginsAndBorders = $tb.outerWidth(true) - $tb.width();
		}
	}

	// calculate available space between left- and right-aligned items with static width
	var beginBorderOfTitle = this._oTitleDomRef.offsetLeft; // displacement of the beginning of the title from the Panel border
	var totalWidth = this.getDomRef().offsetWidth;
	if (bRtl) {
		beginBorderOfTitle = totalWidth - (beginBorderOfTitle + this._oTitleDomRef.offsetWidth); // RTL case
	}
	var $title = jQuery(this._oTitleDomRef);
	this._iOptTitleWidth = $title.width();
	this._iTitleMargin = $title.outerWidth(true) - $title.outerWidth();
	var beginBorderOfRightItems = 10000;
	jQuery(this._oHeaderDomRef).children(".sapUiPanelHdrRightItem").each(function(){
		var begin = this.offsetLeft;
		if (bRtl) {
			begin = totalWidth - (begin + this.offsetWidth); // RTL case
		}
		if ((begin < beginBorderOfRightItems) && (begin > 0)) {
			beginBorderOfRightItems = begin;
		}
	});


	// set minimum Panel width as sum of minimum sizes
	var minWidth = beginBorderOfTitle;
	minWidth += this._iMinTitleWidth; // 30px is ok even if there is no title
	minWidth += this._iMaxTbBtnWidth + 1; // -1 if there is no toolbar... 1px more or less is no problem here
	minWidth += (beginBorderOfRightItems == 10000) ? 10 : (totalWidth - beginBorderOfRightItems); // use 10 as hardcoded right border
	this.getDomRef().style.minWidth = minWidth + 10 + "px";


	// restore scroll positions
	if (this._oScrollDomRef) {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > 0) {
			this._oScrollDomRef.scrollTop = scrollTop;
		}
		var scrollLeft = this.getProperty("scrollLeft");
		if (scrollLeft > 0) {
			this._oScrollDomRef.scrollLeft = scrollLeft;
		}

	}

};


/**
 * Adapts the absolute position of the content when height is set.
 * @private
 */
sap.ui.commons.Panel.prototype._fixContentHeight = function() {
	//if height is set and an icon or at least one toolbar button is present (which *could* inflate the header height), the cont top must be set to the header height
	if (sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0))) { // TODO: what if the icon is not yet loaded?
		this._iContTop = this._oHeaderDomRef.offsetHeight;
		if (this._oScrollDomRef) {
			this._oScrollDomRef.style.top = this._iContTop + "px";
		}
	}
};


/**
 * Called in browsers not supporting the FlexBox layout whenever the Panel size changes.
 * Basically this method imitates that layout's behavior.
 * @private
 */
sap.ui.commons.Panel.prototype.onresize = function() {
	// in IE8 (maybe also IE9) the sizes of the flexible items (title and toolbar) need to be adjusted
	// whenever the Panel width changes
	if (!jQuery.support.flexBoxLayout && this.getDomRef()) {
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();

		/* Algorithm:
		 * 1. calculate space available for the two elements
		 * 2. if no toolbar is present, apply this width to the title, else:
		 * 3.   reduce toolbar width until maxBtnSize is reached, then reduce title width until minimum (do not make either any smaller; the Panel has a min-width anyway)
		 * 4.   apply these widths
		 */

		// begin of Panel to begin of Title
		var beginBorderOfTitle = this._oTitleDomRef.offsetLeft; // displacement of the beginning of the title from the Panel border
		var totalWidth = this.getDomRef().offsetWidth;
		if (bRtl) {
			beginBorderOfTitle = totalWidth - (beginBorderOfTitle + this._oTitleDomRef.offsetWidth); // RTL case
		}

		// begin of Panel to begin if "RightItems"
		var beginBorderOfRightItems = 10000;
		jQuery(this._oHeaderDomRef).children(".sapUiPanelHdrRightItem").each(function(){
			var begin = this.offsetLeft;
			if (bRtl) {
				begin = totalWidth - (begin + this.offsetWidth); // RTL case
			}
			if ((begin < beginBorderOfRightItems) && (begin > 0)) {
				beginBorderOfRightItems = begin;
			}
		});

		var availableSpace = (beginBorderOfRightItems == 10000) ?
					this.$().width() - beginBorderOfTitle - 20
				: beginBorderOfRightItems - beginBorderOfTitle - 10;

		var aButtons = this.getButtons();
		if (aButtons && aButtons.length > 0) { // there are title and toolbar; calculate and set both sizes
			// differentiate between two cases: 1. there is enough space for title plus minimum toolbar width
			//                                  2. both need to be reduced in size
			if ((availableSpace - this._iOptTitleWidth - this._iTitleMargin) > (this._iMaxTbBtnWidth - this._iTbMarginsAndBorders)) {
				// if available width minus optimum title width is still more than the minimum toolbar width,
				// give all remaining width to the toolbar
				this._oToolbarDomRef.style.width = (availableSpace - this._iOptTitleWidth - this._iTitleMargin - this._iTbMarginsAndBorders) + "px";
				this._oTitleDomRef.style.width = this._iOptTitleWidth + "px";
			} else {
				// both are affected => set toolbar to minimum and reduce title width, but not smaller than minimum
				this._oToolbarDomRef.style.width = this._iMaxTbBtnWidth + "px";
				this._oTitleDomRef.style.width = Math.max((availableSpace - this._iMaxTbBtnWidth - this._iTbMarginsAndBorders), this._iMinTitleWidth) + "px";
			}

		} else {
			// no toolbar
			this._oTitleDomRef.style.width = Math.max(availableSpace, this._iMinTitleWidth);
		}
	}

	// in case the resizing caused button wrapping, adapt content height -- FOR ALL BROWSERS!
	this._fixContentHeight();
};


/**
 * Helper method to find out whether the Panel has an icon.
 * @private
 */
sap.ui.commons.Panel.prototype._hasIcon = function() {
	return (this.getTitle() && this.getTitle().getIcon());
};



/**
 * Property setter for the "enabled" state
 *
 * @param bEnabled whether the Panel should be enabled or not
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled, true); // no re-rendering!
	// if already rendered, adapt rendered control without complete re-rendering
	jQuery(this.getDomRef()).toggleClass("sapUiPanelDis", !bEnabled);
	return this;
};


/**
 * Property setter for the padding
 *
 * @param bPadding whether the Panel should have padding
 * @returns {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setApplyContentPadding = function(bPadding) {
	this.setProperty("applyContentPadding", bPadding, true); // no re-rendering!
	jQuery(this.getDomRef()).toggleClass("sapUiPanelWithPadding", bPadding);
	return this;
};


/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed whether the Panel should be collapsed or not
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed, true); // no re-rendering!
	this._setCollapsedState(bCollapsed); // adapt rendered control without complete re-rendering
	return this;
};


/**
 * Internal method for applying a (non-)"collapsed" state to the rendered HTML
 *
 * @param bCollapsed whether the Panel should be collapsed or not
 * @private
 */
sap.ui.commons.Panel.prototype._setCollapsedState = function(bCollapsed) {
	var oDomRef = this.getDomRef();
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();
	if (oDomRef) {
		// after Panel has been rendered
		if (bCollapsed) {
			// collapsing
			if (!this.getWidth()) {
				oDomRef.style.width = this.getDomRef().offsetWidth + "px"; // maintain the current width
			}
			jQuery(oDomRef).addClass("sapUiPanelColl");
			if (accessibility) {
				oDomRef.setAttribute("aria-expanded", "false");
			}
			if (this.getHeight()) {
				// if there is a height set, the Panel would still consume the respective space, so remove the height setting
				oDomRef.style.height = "auto";
			}
			// update tooltips
			jQuery.sap.byId(this.getId() + "-collArrow").attr("title", "Expand"); // TODO: translate
			jQuery.sap.byId(this.getId() + "-collIco").attr("title", "Expand"); // TODO: translate

		} else {
			// expanding
			if (!jQuery.sap.domById(this.getId() + "-cont")) {
				// content has not been rendered yet, so render it now
				this._bFocusCollapseIcon = true; // restore focus to collapse icon/button after rendering
				this.rerender();
			} else {
				// content exists already, just make it visible again
				jQuery(oDomRef).removeClass("sapUiPanelColl");
				if (accessibility) {
					oDomRef.setAttribute("aria-expanded", "true");
				}
				if (!this.getWidth()) {
					oDomRef.style.width = "auto"; // restore the automatic width behavior
				}
				if (this.getHeight()) {
					oDomRef.style.height = this.getHeight(); // restore the set height
				}
				// update tooltips
				jQuery.sap.byId(this.getId() + "-collArrow").attr("title", "Collapse"); // TODO: translate
				jQuery.sap.byId(this.getId() + "-collIco").attr("title", "Collapse"); // TODO: translate
			}
		}
	}
};


/**
 * Static method that finds out whether the given CSS size is actually set.
 * Returns "true" for absolute and relative sizes, returns "false" if "null", "inherit" or "auto" is given.
 *
 * @static
 * @param sCssSize a css size string (must be a valid CSS size, or null)
 * @private
 */
sap.ui.commons.Panel._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize =="auto") && !(sCssSize == "inherit"));
};

// API method
sap.ui.commons.Panel.prototype.setText = function(sText) {
	if (!this.getTitle()) {
		this.setTitle(new sap.ui.commons.Title(this.getId() + "-tit",{text:sText}));
	} else {
		this.getTitle().setText(sText);
	}
	return this;
};

// API method
sap.ui.commons.Panel.prototype.getText = function () {
	if (!this.getTitle()) {
		return null;
	} else {
		return this.getTitle().getText();
	}
};


/**
 * Returns the scroll position of the panel in pixels from the left. Returns 0 if not rendered yet.
 * Also internally updates the control property.
 *
 * @return the scroll position
 * @public
 */
sap.ui.commons.Panel.prototype.getScrollLeft = function () {
	var scrollLeft = 0;
	if (this._oScrollDomRef) {
		scrollLeft = this._oScrollDomRef.scrollLeft;
		jQuery.sap.assert(typeof scrollLeft == "number", "scrollLeft read from DOM should be a number");
		this.setProperty("scrollLeft", scrollLeft, true);
	}

	return scrollLeft;
};


/**
 * Sets the scroll position of the panel in pixels from the left.
 *
 * @param {int} iPosition the position to scroll to
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollLeft = function (iPosition) {
	this.setProperty("scrollLeft", iPosition, true);
	if (this._oScrollDomRef) {
		this._oScrollDomRef.scrollLeft = iPosition;
	}
	return this;
};


/**
 * Returns the scroll position of the panel in pixels from the top. Returns 0 if not rendered yet.
 * Also internally updates the control property.
 *
 * @return the scroll position
 * @public
 */
sap.ui.commons.Panel.prototype.getScrollTop = function () {
	var scrollTop = 0;
	if (this._oScrollDomRef) {
		scrollTop = this._oScrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
	}

	return scrollTop;
};


/**
 * Sets the scrolls position of the panel in pixels from the top.
 *
 * @param {int} iPosition the position to scroll to
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollTop = function (iPosition) {
	this.setProperty("scrollTop", iPosition, true);
	if (this._oScrollDomRef) {
		this._oScrollDomRef.scrollTop = iPosition;
	}
	return this;
};


/**
 * Sets the dimensions of the panel.
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setDimensions = function (sWidth, sHeight) {
	jQuery.sap.assert(typeof sWidth == "string" && typeof sHeight == "string", "sWidth and sHeight must be strings");
	this.setWidth(sWidth); // does not rerender
	this.setHeight(sHeight);
	return this;
};


/**
 * Sets the width of the panel.
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setWidth = function (sWidth) {
	this.setProperty("width", sWidth, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.width = sWidth;
	}
	return this;
};


/**
 * Sets the height of the panel.
 *
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setHeight = function (sHeight) {
	this.setProperty("height", sHeight, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.height = sHeight;
	}
	return this;
};



/*   Event Handling   */

/**
 * Handles mouse clicks
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype.onclick = function(oEvent) {
	this._handleTrigger(oEvent);
};

/**
 * Handles "space" presses
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype.onsapspace = function(oEvent) {
	this._handleTrigger(oEvent);
};

/**
 * Handles any "triggering" actions like click and space
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype._handleTrigger = function(oEvent) {
	// minimize button toggled
	if((oEvent.target.id === this.getId() + "-collArrow") ||
			(oEvent.target.id === this.getId() + "-collIco")) {
		this.setCollapsed(!this.getProperty("collapsed"));
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};
}; // end of sap.ui.commons.Panel
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextView.
jQuery.sap.declare("sap.ui.commons.TextView");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TextView.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>visible : boolean</li>
 * <li>enabled : boolean</li>
 * <li>helpId : string</li>
 * <li>accessibleRole : sap.ui.core.AccessibleRole</li>
 * <li>design : sap.ui.commons.TextViewDesign</li>
 * <li>wrapping : boolean</li>
 * <li>semanticColor : sap.ui.commons.TextViewColor</li>
 * <li>textAlign : sap.ui.core.TextAlign</li>
 * <li>width : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is used to display some continous text. The control can inherit the text direction from its parent control.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.TextView = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.TextView.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.TextView. 
 * Resulting metadata can be obtained via sap.ui.commons.TextView.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.TextView", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getText", "setText", "bindText", "unbindText", "getTextDirection", "setTextDirection", "getVisible", "setVisible", "getEnabled", "setEnabled", "getHelpId", "setHelpId", "getAccessibleRole", "setAccessibleRole", "getDesign", "setDesign", "getWrapping", "setWrapping", "getSemanticColor", "setSemanticColor", "getTextAlign", "setTextAlign", "getWidth", "setWidth"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "", defaultValue : ''},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "helpId" : {name : "helpId", type : "string", group : "Behavior", defaultValue : ''},
    "accessibleRole" : {name : "accessibleRole", type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Document},
    "design" : {name : "design", type : "sap.ui.commons.TextViewDesign", group : "Data", defaultValue : sap.ui.commons.TextViewDesign.Standard},
    "wrapping" : {name : "wrapping", type : "boolean", group : "Appearance", defaultValue : true},
    "semanticColor" : {name : "semanticColor", type : "sap.ui.commons.TextViewColor", group : "Appearance", defaultValue : sap.ui.commons.TextViewColor.Default},
    "textAlign" : {name : "textAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Binder for property <code>text</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.bindText = function(sPath, fnFormatter, sMode) {
	this.bindProperty("text", sPath, fnFormatter, sMode);
	return this;
};

/**
 * Unbinder for property <code>text</code>.
 *
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.unbindText = function() {
	this.unbindProperty("text");
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * Available options are LTR and RTL. Alternatively, the control can inherit the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible text views are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * When the control is disabled, it is greyed out and no longer focusable.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>helpId</code>.
 * Unique identifier used for help services.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getHelpId = function() {
	return this.getProperty("helpId");
};

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setHelpId = function(sHelpId) {
	this.setProperty("helpId", sHelpId);
	return this;
};


/**
 * Getter for property <code>accessibleRole</code>.
 * The ARIA role for the control.
 *
 * Default value is <code>Document</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getAccessibleRole = function() {
	return this.getProperty("accessibleRole");
};

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Document</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setAccessibleRole = function(oAccessibleRole) {
	this.setProperty("accessibleRole", oAccessibleRole);
	return this;
};


/**
 * Getter for property <code>design</code>.
 * Defines the visual appearance of the control.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.TextViewDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.TextViewDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setDesign = function(oDesign) {
	this.setProperty("design", oDesign);
	return this;
};


/**
 * Getter for property <code>wrapping</code>.
 * Disabled automatic wrapping of the text.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getWrapping = function() {
	return this.getProperty("wrapping");
};

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setWrapping = function(bWrapping) {
	this.setProperty("wrapping", bWrapping);
	return this;
};


/**
 * Getter for property <code>semanticColor</code>.
 * Semantic color of the text View
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.commons.TextViewColor} the value of property <code>semanticColor</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getSemanticColor = function() {
	return this.getProperty("semanticColor");
};

/**
 * Setter for property <code>semanticColor</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.commons.TextViewColor} oSemanticColor  new value for property <code>semanticColor</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setSemanticColor = function(oSemanticColor) {
	this.setProperty("semanticColor", oSemanticColor);
	return this;
};


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getTextAlign = function() {
	return this.getProperty("textAlign");
};

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setTextAlign = function(oTextAlign) {
	this.setProperty("textAlign", oTextAlign);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Width of the TextView
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.TextView.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextView.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


// Start of sap/ui/commons/TextView.js
/**
 * returns the text of the TextView as HTML markup (escaped and and the line
 * breaks are converted into &lt;br&gt; tags.
 * @returns {String} text as HTML or an empty string if undefined
 * @public
 */
sap.ui.commons.TextView.prototype.getTextAsHTML = function(sTextToConvert) {
	var sText = sTextToConvert ? sTextToConvert : this.getText();
	return sText ? jQuery.sap.escapeHTML(sText).replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />") : "";
};


/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */
sap.ui.commons.TextView.prototype.setText = function(sText) {
	this.setProperty("text", sText, true); // no re-rendering!
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.innerHTML = this.getTextAsHTML();
		// when no tooltip is applied use the text as tooltip
		if (!this.getTooltip_AsString() && sText) {
			oDomRef.title = sText;
		}
	}
	return this;
};
}; // end of sap.ui.commons.TextView
if ( !jQuery.sap.isDeclared('sap.ui.commons.ComboBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.ComboBox
jQuery.sap.declare("sap.ui.commons.ComboBoxRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class Renderer for the sap.ui.commons.ComboBox
 * @static
 */
sap.ui.commons.ComboBoxRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Renders the outer &lt;div&gt; for the ComboBox to the TextField
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ComboBoxRenderer.renderOuterAttributes = function(rm, oCmb) {
	rm.addClass("sapUiTfCombo");
	this.renderComboARIAInfo(rm, oCmb);
};

/**
 * Renders additional HTML for the ComboBox to the TextField (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ComboBoxRenderer.renderOuterContent = function(oRenderManager, oCmb){
	// convenience variable
	var rm = oRenderManager;

	rm.write("<div");
	rm.writeAttributeEscaped('id', oCmb.getId() + '-icon');
	rm.writeAttribute('unselectable', 'on');
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "presentation");
	}
	rm.addClass("sapUiTfComboIcon");
	rm.writeClasses();
	rm.write(">&#9660;</div>");//Symbol for HCB Theme (Must be hidden in other themes)
};

/**
 * Renders ARIA information for the combobox (outer &lt;div&gt;)
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.ComboBoxRenderer.renderComboARIAInfo = function(rm, oCmb) {
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "combobox");
		var oACCInfo = {owns: oCmb.getId() + "-input " + oCmb._getListBox().getId()};
		rm.writeAccessibilityState(oCmb, oACCInfo);
	}
};

/**
 * Renders ARIA information for the given input field (called from 'parent'-renderer, i.e. sap.ui.commons.TextFieldRenderer)
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.ComboBoxRenderer.renderARIAInfo = function(rm, oCmb) {
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		var oACCInfo = {"autocomplete": "inline" ,"live": "polite"};
		if(oCmb.getValueState() == sap.ui.core.ValueState.Error){
			jQuery.extend(oACCInfo, {invalid: true});
		}
		rm.writeAccessibilityState(oCmb, oACCInfo);
	}
};
}; // end of sap.ui.commons.ComboBoxRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.ComboBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ComboBox.
jQuery.sap.declare("sap.ui.commons.ComboBox");



/**
 * Constructor for a new ComboBox.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>maxPopupItems : int</li>
 * <li>displaySecondaryValues : boolean</li>
 * <li>selectedKey : string</li>
 * <li>selectedItemId : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.core.ListItem</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>listBox : sap.ui.commons.ListBox</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.TextField#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * The control provides a field that allows end users to either enter some text, or to choose an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes, single listbox items, or text strings defined for the current application.
 * 
 * @extends sap.ui.commons.TextField
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ComboBox = function (sId, mSettings) {
	sap.ui.commons.TextField.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ComboBox.prototype = jQuery.sap.newObject(sap.ui.commons.TextField.prototype);

/*
 * Describe the sap.ui.commons.ComboBox. 
 * Resulting metadata can be obtained via sap.ui.commons.ComboBox.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ComboBox", {

  // ---- object ----
  baseType : "sap.ui.commons.TextField",
  interfaces : ["sap.ui.commons.ToolbarItem"],
  publicMethods : [
    // properties 
    "getMaxPopupItems", "setMaxPopupItems", "getDisplaySecondaryValues", "setDisplaySecondaryValues", "getSelectedKey", "setSelectedKey", "getSelectedItemId", "setSelectedItemId", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", "bindItems", "unbindItems", 
    // associations
    "getListBox", "setListBox"
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "maxPopupItems" : {name : "maxPopupItems", type : "int", group : "Behavior", defaultValue : 10},
    "displaySecondaryValues" : {name : "displaySecondaryValues", type : "boolean", group : "Misc", defaultValue : false},
    "selectedKey" : {name : "selectedKey", type : "string", group : "Data", defaultValue : null},
    "selectedItemId" : {name : "selectedItemId", type : "string", group : "Data", defaultValue : null}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.core.ListItem", multiple : true, singularName : "item"}
  },
  associations : {
    "listBox" : {name : "listBox", type : "sap.ui.commons.ListBox", multiple : false}
  },
  events : {}

});	


/**
 * Getter for property <code>maxPopupItems</code>.
 * 
 * Defines the number of items that shall be displayed at once. If the overall number of list items is higher than the setting, a scrollbar is provided.
 * 
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>maxPopupItems</code>
 * @public
 * 
 */
sap.ui.commons.ComboBox.prototype.getMaxPopupItems = function() {
	return this.getProperty("maxPopupItems");
};

/**
 * Setter for property <code>maxPopupItems</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMaxPopupItems  new value for property <code>maxPopupItems</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.setMaxPopupItems = function(iMaxPopupItems) {
	this.setProperty("maxPopupItems", iMaxPopupItems);
	return this;
};


/**
 * Getter for property <code>displaySecondaryValues</code>.
 * Indicates whether the "additionalText" property that is available for sap.ui.core.ListItem shall be displayed in the list.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displaySecondaryValues</code>
 * @public
 * 
 */
sap.ui.commons.ComboBox.prototype.getDisplaySecondaryValues = function() {
	return this.getProperty("displaySecondaryValues");
};

/**
 * Setter for property <code>displaySecondaryValues</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplaySecondaryValues  new value for property <code>displaySecondaryValues</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.setDisplaySecondaryValues = function(bDisplaySecondaryValues) {
	this.setProperty("displaySecondaryValues", bDisplaySecondaryValues);
	return this;
};


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * If the value has no corresponding item the key is empty.
 * If douplicate keys exists the first item matching the key is used.
 * If the key is set to a not existing value it will not be changed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * 
 */
sap.ui.commons.ComboBox.prototype.getSelectedKey = function() {
	return this.getProperty("selectedKey");
};

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.setSelectedKey = function(sSelectedKey) {
	this.setProperty("selectedKey", sSelectedKey);
	return this;
};


/**
 * Getter for property <code>selectedItemId</code>.
 * Id of Selected item. If the value has no corresponding item, the selected item id is empty.
 * If the selected item id is set to an not existing item, it will not be changed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * 
 */
sap.ui.commons.ComboBox.prototype.getSelectedItemId = function() {
	return this.getProperty("selectedItemId");
};

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedItemId  new value for property <code>selectedItemId</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.setSelectedItemId = function(sSelectedItemId) {
	this.setProperty("selectedItemId", sSelectedItemId);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * 
 * Getter for aggregation items. Allows setting ListItems (see sap.ui.core.ListBox) that shall be displayed in the list.
 * 
 * 
 * @return {sap.ui.core.ListItem[]}
 * @public
 */
sap.ui.commons.ComboBox.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.ComboBox.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.ListItem} vItem the item to remove or its index or id
 * @return {sap.ui.core.ListItem} the removed item or null
 * @public
 */
sap.ui.commons.ComboBox.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.ListItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.ComboBox.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.core.ListItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.ComboBox.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.bindItems = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("items", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.unbindItems = function() {
	this.unbindAggregation("items");
	return this;
};


/**
 * 
 * Using this method, you provide a listbox control. This allows reuse of item lists in different controls. Either a control id can be used as new target, or a control instance.
 * 
 *
 * @return {string} Id of the element which is the current target of the <code>listBox</code> association, or null
 * @public
 */
sap.ui.commons.ComboBox.prototype.getListBox = function() {
	return this.getAssociation("listBox", null);
};

/**
 * 
 * Using this method, you provide a listbox control. This allows reuse of item lists in different controls. Either a control id can be used as new target, or a control instance.
 * 
 *
 * @param {string | sap.ui.commons.ListBox} vListBox 
 *    Id of an element which becomes the new target of this <code>listBox</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ComboBox.prototype.setListBox = function(vListBox) {
	this.setAssociation("listBox", vListBox);
	return this;
};


	
// Start of sap/ui/commons/ComboBox.js
jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initializes the control.
 * It is called from the constructor.
 * @private
 */
sap.ui.commons.ComboBox.prototype.init = function(){
	this._iClosedUpDownIdx = -1;
	this._sCloseId = null;
	this.setAccessibleRole(sap.ui.core.AccessibleRole.Combobox);
};

/**
 * Destroy the private ListBox if it exists.
 * @private
 */
sap.ui.commons.ComboBox.prototype.exit = function() {
	if ( this._oListBox ) {
		this._oListBoxDelegate && this._oListBox.removeDelegate(this._oListBoxDelegate);
		if (this.getAggregation("myListBox")) {
			this.destroyAggregation("myListBox", true);			
		}else{
			this._oListBox.destroy();
		}
		this._oListBox = null;
	}
}

//***********************************************************
// Mouse handling...
//***********************************************************

/**
 * Handle click events triggered on the control and if triggered on F4-button open or close the proposal list
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */;
sap.ui.commons.ComboBox.prototype.onclick = function(oEvent){
	if(this.getEnabled && this.getEnabled() && this.getEditable() && oEvent.target === this.getF4ButtonDomRef()){
		if(this.oPopup && this.oPopup.isOpen()){
			this._close();
		} else if(!this._F4ForClose) {
			this._open();
		}
		this.focus();
	}
	this._F4ForClose = false;
};

/**
 * Handle mousedown events triggered on the control
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onmousedown = function(oEvent){
	if(oEvent.target !== this.getF4ButtonDomRef()) {
		return;
	}

	if(this.oPopup && this.oPopup.isOpen()){
		this._F4ForClose = true;
	} else {
		this._F4ForOpen = true;
	}
};


//***********************************************************
// Keyboard handling...
//***********************************************************

/**
 * Handle sapshow pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapshow = function(oEvent){
	if(this.oPopup && this.oPopup.isOpen()) {
		this._close();
	}
	else {
		this._open();
	}
	oEvent.preventDefault();
	oEvent.stopImmediatePropagation();
};

/**
 * Handle sapnextmodifiers pseudo events on the control
 * if in toolbar prevent item navigation if popup is opened.
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapnextmodifiers = function(oEvent){
	if( oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && oEvent.altKey ){
		this.onsapshow(oEvent);
		oEvent.stopPropagation();
	}
};

/**
 * Handle saphide pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsaphide = function(oEvent){
	this._close();
	oEvent.stopPropagation(); // prevent item navigation in toolbar
};

/**
 * Handle sapescape pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapescape = function(oEvent) {
	this._close();
	// standard behavior of TextField
	sap.ui.commons.TextField.prototype.onsapescape.apply(this, arguments);
};

/**
 * Handle sapenter pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapenter = function(oEvent) {
	this._close();
	this._checkChange(oEvent, true);
};


//***********************************************************
//Focus handling...
//***********************************************************

/**
 * Handle the sapfocusleave pseudo event and ensure that when the focus moves to the list box,
 * the check change functionality (incl. fireChange) is not triggered.
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapfocusleave = function(oEvent) {
	this._resetCheck();
	var oLB = this._getListBox();
	if(oEvent.relatedControlId === oLB.getId()){
		this.focus();
	} else {
		// we left the ComboBox to another (unrelated) control and thus have to fire the change (if needed).
		this._checkChange(oEvent, true);
	}
};


//***********************************************************
// Change handling and related event firing
//***********************************************************

/**
 * Compares the previous value with the current value and fires the "Change" event
 * if the ComboBox is editable and the value has changed or whether the value has been changed
 * e.g. via up/down or auto-complete feature
 *
 * @param {jQuery.Event} oEvent
 * @param {boolean} [bImmediate] indicate whether the check should happen immediately or delayed (e.g. to avoid focusout / click double event processing)
 * @protected
 */
sap.ui.commons.ComboBox.prototype._checkChange = function(oEvent, bImmediate) {
	this._resetCheck();
	if(!bImmediate){
		// in case there is no sapfocusleave (i.e. core does not know where the focus went to)
		// we still fire this event (as obviously it cannot be in the Combo and related control(s) anymore)
		this._sCheckId = jQuery.sap.delayedCall(50,this, "_checkChange", [oEvent, true]);
		return;
	}
	var oInput = this.getInputDomRef(),
		newVal = jQuery(oInput).val(),
		oldVal = this.getValue();

	if(!this._F4ForOpen && (
			this.getEditable() && this.getEnabled() && (oldVal != newVal))){
		this.setValue(newVal, true);
		var aItems = this.getItems(),
			oItem = null,
			oText,
			sKey,
			sId;
		for(var i = 0, l = aItems.length; i < l; i++){
			oText = aItems[i].getText();
			if(oText === newVal) {
				oItem = aItems[i];
				sKey = oItem.getKey();
				sId  = oItem.getId();
				break;
			}
		}
		this.setProperty("selectedKey", sKey, true); // no rerendering needed
		this.setProperty("selectedItemId", sId, true); // no rerendering needed	
		this.fireChange({newValue:newVal, selectedItem: oItem});
	}
};


/**
 * Resets check for changes in case there is a delayed one pending.
 * @private
 */
sap.ui.commons.ComboBox.prototype._resetCheck = function() {
	if(!this._sCheckId) {
		return;
	}
	jQuery.sap.clearDelayedCall(this._sCheckId);
	this._sCheckId = null;
};

//***********************************************************
// Advanced keyboard handling... type ahead, up / down navigation, ...
//***********************************************************

/**
 * Handle the keypress event
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onkeypress = function(oEvent) {
	if(this._sTypeAhead) {
		jQuery.sap.clearDelayedCall(this._sTypeAhead);
	}

	var oKC = jQuery.sap.KeyCodes;
	if(sap.ui.commons.ComboBox._isHotKey(oEvent) || oEvent.keyCode === oKC.F4 && oEvent.which === 0 /*this is the Firefox case and ensures 's' with same charCode is accepted*/) {
		return;
	}

	var iKC = oEvent.which || oEvent.keyCode;
	if(iKC !== oKC.DELETE && iKC !== oKC.BACKSPACE && iKC !== oKC.ESCAPE){
		this._sTypeAhead = jQuery.sap.delayedCall(200, this, "_doTypeAhead");
	} else{
		// standard behavior of TextField
		sap.ui.commons.TextField.prototype.onkeypress.apply(this, arguments);
	}
	// Do not cancel the event as this would prevent typing in the field.
};

/**
 * Handle the sapup event
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onsapup = function(oEvent) {
	if(!this.getEditable()) {
		return;
	}
	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef(),
		oValue = jQuery(oDomRef).val();

	var i = this._prepareUpDown(aItems, oValue);
	i = this._updateIdx(aItems, oDomRef, i-1, i);
	oListBox.setSelectedIndex(i);
	oListBox.scrollToIndex(i, true);

	oEvent.preventDefault();
	oEvent.stopPropagation(); // prevent itemNavigation if ComboBox is in toolbar
};

/**
 * Handle the sapdown event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onsapdown = function(oEvent) {
	if(!this.getEditable()) {
		return;
	}
	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef(),
		oValue = jQuery(oDomRef).val();

	var i = this._prepareUpDown(aItems, oValue);
	i = this._updateIdx(aItems, oDomRef, i+1, i);
	oListBox.setSelectedIndex(i);
	oListBox.scrollToIndex(i, true);

	oEvent.preventDefault();
	oEvent.stopPropagation(); // prevent itemNavigation if ComboBox is in toolbar
};

/**
 * Handle the saphome event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */

sap.ui.commons.ComboBox.prototype.onsaphome = function(oEvent) {
	if(!this.getEditable() || !this.oPopup || !this.oPopup.isOpen()) {
		return;
	}
	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef();

	var i = this._updateIdx(aItems, oDomRef,0);
	oListBox.setSelectedIndex(i);
	oListBox.scrollToIndex(0, true);

	oEvent.preventDefault();
};

/**
 * Handle the sapend event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */

sap.ui.commons.ComboBox.prototype.onsapend = function(oEvent) {
	if(!this.getEditable() || !this.oPopup || !this.oPopup.isOpen()) {
		return;
	}
	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef();

	var i = aItems.length - 1;
	i = this._updateIdx(aItems, oDomRef, i);
	oListBox.setSelectedIndex(i);
	oListBox.scrollToIndex(i, true);

	oEvent.preventDefault();
};

/**
 * method for delayed handle of type ahead in closed combobox
 * @private
 */
sap.ui.commons.ComboBox.prototype._doTypeAhead = function(){
	this._sTypeAhead = null;
	var oLB = this._getListBox(),
		aItems = oLB.getItems(),
		oItem,
		oText,
		$Ref = jQuery(this.getInputDomRef()),
		oValue = $Ref.val(),
		startsWith = jQuery.sap.startsWithIgnoreCase;
	this._sTypedChars = oValue;
	var i = 0;
	for (var l = aItems.length; i < l; i++){
		oItem = aItems[i];
		oText = "" + oItem.getText();
		if(startsWith(oText, oValue) && oItem.getEnabled()) {
			$Ref.val(oText);
			this._doSelect(oValue.length, oText.length);

			oLB.setSelectedIndex(i);
			oLB.scrollToIndex(i, true);
			return;
		}
	}
	oLB.clearSelection();
	oLB.scrollToIndex(i, true);
};

/**
 * Prepares for the up and down arrow handling.
 * Checks whether there is a set index and this still matches the given value
 * @param {sap.ui.core.ListItem[]} aItems array of listitems that should be used.
 * @param {string} oValue
 * @type int
 * @return the new index
 * @private
 */
sap.ui.commons.ComboBox.prototype._prepareUpDown = function(aItems, oValue){
	var oText,
		startsWith = jQuery.sap.startsWithIgnoreCase;
	if(this._iClosedUpDownIdx >= 0 && aItems[this._iClosedUpDownIdx] && aItems[this._iClosedUpDownIdx].getText() !== oValue) {
		this._iClosedUpDownIdx = -1;
	}

	if(this._iClosedUpDownIdx === -1){
		for(var i = 0, l = aItems.length; i < l; i++){
			oText = aItems[i].getText();
			if(oText === oValue) {
				this._iClosedUpDownIdx = i;
				break;
			}
		}
	}
	return this._iClosedUpDownIdx;
};

/**
 * Updates the value of the comboBox taking the given idx into account.
 *
 * @param {sap.ui.core.ListItem[]} aItems the items belonging to this ComboBox
 * @param {string} oDomRef the dom ref of the inputField to update
 * @param {int} iNewIdx the index to set
 * @param {int} [iCurIdx] The index to 'fall back to'.
 * 						  Leave blank in case of navigation to 'first' (home-key) or 'last' (end-key). Will ensure 'first' or 'last' selectable item will be selected.
 * @return {int} the actually set index (which might have been corrected)
 * @private
 */
sap.ui.commons.ComboBox.prototype._updateIdx = function(aItems, oDomRef, iNewIdx, iCurIdx){
	var l = aItems.length,
		bFirst = iNewIdx === 0 && iCurIdx === undefined,
		bLast = iNewIdx === l-1 && iCurIdx === undefined,
		bDown = iCurIdx !== undefined && iCurIdx < iNewIdx || bFirst,
		i = (iNewIdx < 0 ? 0 : (iNewIdx < l ? iNewIdx: l - 1)),
		$Ref = jQuery(oDomRef);
	var oItem,
		bValid = false;
	do {
		iNewIdx = bDown ? i++ : i--;
		oItem = aItems[iNewIdx];
		bValid = oItem && oItem.getEnabled() && !(oItem instanceof sap.ui.core.SeparatorItem) && oItem.getId() !== this.getId() + "_shi";
	} while(!bValid && i < l && i >= 0);
	if(bValid){
		var oText = oItem.getText();
		$Ref.val(oText);
		this._doSelect();
	} else {
		iNewIdx = iCurIdx;
	}
	this._iClosedUpDownIdx = iNewIdx;
	return iNewIdx;
};

/**
 * Selects the text of the InputDomRef in the given range
 * @param {int} [iStart=0] start position of the text selection
 * @param {int} [iEnd=<length of text>] end position of the text selection
 * @return {sap.ui.commons.ComboBox} this DropdownBox instance
 * @private
 */
sap.ui.commons.ComboBox.prototype._doSelect = function(iStart, iEnd){
	var oDomRef =this.getInputDomRef(),
		$Ref = jQuery(oDomRef);
	oDomRef.focus();
	$Ref.selectText(iStart?iStart:0, iEnd?iEnd:$Ref.val().length);
	return this;
};


//***********************************************************
// DOM Ref handling
//***********************************************************

/**
 * Returns the DomRef that should get the focus.
 * @see sap.ui.core.Element#getDomRef
 * @return {DOMNode} The element's DOM reference or null
 * @protected
 */
sap.ui.commons.ComboBox.prototype.getFocusDomRef = function() {
	return this.getInputDomRef();
};

/**
 * Returns the DomRef that allows input.
 * Could be overwritten in child-classes
 *
 * @return {DOMNode} The input element's DOM reference or null
 * @protected
 */
sap.ui.commons.ComboBox.prototype.getInputDomRef = function() {
//	return this.$().find("input").get(0);
	return jQuery.sap.domById(this.getId() + "-input");
};

/**
 * Returns the DomRef which represents the icon for value help.
 * Could be overwritten in child-classes
 *
 * @return {DOMNode} The F4-element's DOM reference or null
 * @protected
 */
sap.ui.commons.ComboBox.prototype.getF4ButtonDomRef = function() {
	return jQuery("#" + this.getId() + "-icon").get(0);
};


//***********************************************************
// List Box handling (incl. creation of 'private one')
//***********************************************************

/**
 * Returns the private listbox.
 * Creates a new one if not yet done.
 * @type sap.ui.commons.ListBox
 * @return the private listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._getPrivateListBox = function(){
	if(this._oListBox) {
		return this._oListBox;
	}
	// else
	this._oListBox = new sap.ui.commons.ListBox(this.getId() + "-lb", {allowMultiSelect:false});
	this.setAggregation("myListBox", this._oListBox, true);

	return this._oListBox;
};

/**
 * Returns the listbox that should be used.
 * This is either the one set from outside or the one created as 'private'
 * @type sap.ui.commons.ListBox
 * @param {boolean} bUpdateListBox indicate whether the ListBox should be updated for rerendering
 * @return the listbox that should be used
 * @private
 */
sap.ui.commons.ComboBox.prototype._getListBox = function(bUpdateListBox){
	var sListBox = this.getListBox(),
		oListBox;
	if(sListBox) {
		oListBox = sap.ui.getCore().getControl(sListBox);
	} else {
		oListBox = this._getPrivateListBox();
	}
	if(bUpdateListBox){
		oListBox.setAllowMultiSelect(false);
		oListBox.setDisplaySecondaryValues(this.getDisplaySecondaryValues());

		var oDomRef = this.getDomRef();
		if(oDomRef) {
			oListBox.setMinWidth(jQuery(oDomRef).rect().width + "px");
		}
	}
	return oListBox;
};


//***********************************************************
// Closing and opening the drop down
//***********************************************************

/**
 * Opens the proposal list of the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype._open = function(iDuration){
	
	if(iDuration === undefined){
		iDuration = -1;
	}

	if(!this.getEditable()) {
		return;
	}

	if(!this.oPopup) {
		this.oPopup = new sap.ui.core.Popup();
	}

	this._F4ForOpen = false;

	var oListBox = this._getListBox(!this.oPopup.isOpen());
	var oPopup = this.oPopup;
	this._prepareOpen(oListBox);
	if(!this._oListBoxDelegate) {
		this._oListBoxDelegate = {oCombo: this, onclick: function(oEvent){
			// cover also the case of 'confirm initial proposal'
			var itemId = jQuery(oEvent.target).closest("[data-sap-ui-id]").attr("data-sap-ui-id");
			// could also be done via EventPool... but whose to use? Combo's? ListBox'?
			var oEvent = new sap.ui.base.Event("_internalSelect", this, {selectedId: itemId});
			this.oCombo._handleSelect(oEvent);
		}};
	}
	oListBox.addDelegate(this._oListBoxDelegate);

	// and update the given popup instance
	oPopup.setContent(oListBox);
	oPopup.setAutoClose(true);
	oPopup.setAutoCloseAreas([this.getDomRef()]);
	oPopup.setDurations(0, 0); // no animations
	oPopup.setInitialFocusId(this.getId()+'-input'); // to prevent popup to set focus to the ListBox -> stay in input field
	
	// now, as everything is set, ensure HTML is up-to-date
	// This is separated in a function because controls which inherit the Combobox (e.g. SearchField) might overriden this
	// Here is also the possibility to interrupt the open procedure of the list (e.g. when the list is empty)
	var bSkipOpen = this._rerenderListBox(oListBox);
	if(bSkipOpen) {
		return;
	}
	
	oPopup.attachOpened(this._handleOpened, this);
	// attachClosed moved to _handleOpened

	var eDock = sap.ui.core.Popup.Dock;
	oPopup.open(iDuration, eDock.LeftTop, eDock.LeftBottom, this/*.getDomRef()*/);
	jQuery(oListBox.getFocusDomRef()).attr("tabIndex", "-1");
	//attachSelect moved to _handleOpened

	jQuery(this.getDomRef()).attr("aria-expanded", true);

};

/**
 * Rerenders the attached Listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._rerenderListBox = function(oListBox){
	oListBox.rerender();
	return false;
};

/**
 * Walks over the list of available items in the given oListBox and updates the visual selection.
 * Also updates the Popup to show the right content.
 *
 * @param {sap.ui.commons.ListBox} oListBox listBox belonging to this ComboBox instance.
 * @private
 */
sap.ui.commons.ComboBox.prototype._prepareOpen = function(oListBox) {
	// update the list and the input field
	var $Ref = jQuery(this.getInputDomRef()),
		oValue = $Ref.val(),
		aItems = oListBox.getItems(),
		oText,
		startsWith = jQuery.sap.startsWithIgnoreCase,
		bSelected = false,
		bEmptyString = oValue === "",
		oItem;
	var i = 0;
	for (var l = aItems.length; i < l; i++){
		oItem = aItems[i];
		if(!oItem.getEnabled()) {
			continue;
		}
		oText = "" + oItem.getText();
		if(bEmptyString || startsWith(oText, oValue)) {
			bSelected = true;
			// ensure to mark pending only when set anew
			this._iClosedUpDownIdx = i;
			$Ref.val(oText);
			this._doSelect();
			break;
		}
	}
	if(!bSelected){
		i = -1;
	}
	var iItemsLength = oListBox.getItems().length;
	var iMaxPopupItems = this.getMaxPopupItems();
	oListBox.setVisibleItems(iMaxPopupItems < iItemsLength ? iMaxPopupItems : iItemsLength);
	oListBox.setSelectedIndex(i);

	// preparation of Popup moved to _open method again to allow cleaner implementation in dropdown box
};

/**
 * Once the ListBox is opened, we can update the scroll position
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleOpened = function(){
	this.oPopup.detachOpened(this._handleOpened, this);
	var oListBox = this._getListBox();
	oListBox.scrollToIndex(this._iClosedUpDownIdx, true);
	oListBox.attachSelect(this._handleSelect, this);
	// and also ensure we get to know it closes / gets closed via automatic-close again
	this.oPopup.attachClosed(this._handleClosed, this);
};

/**
 * Closes  the proposal list of the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype._close = function(oEvent){
	if(this.oPopup) { // only if there is a Popup, the list box might have been used
		this.oPopup.close(0);
	}
};

/**
 * As there might also be situation where the auto-close functionality triggers the close,
 * ensure to handle everything in the event listener
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleClosed = function(){
	this.oPopup.detachClosed(this._handleClosed, this);
	var oListBox = this._getListBox();
	oListBox.removeDelegate(this._oListBoxDelegate);
	oListBox.detachSelect(this._handleSelect, this);
	jQuery(this.getDomRef()).attr("aria-expanded", false);

	if(this._cleanupClose) {
		this._cleanupClose(oListBox);
	}
};

/**
 * This method is attached to the ListBox instance when it is open
 * to handle the click event occurring in the ListBox.
 * It additionally closes the Popup.
 * @param {sap.ui.base.Event} oControlEvent The event that was raised by the Listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleSelect = function(oControlEvent) {
	this._resetCheck();
	var iSelected = oControlEvent.getParameter("selectedIndex"), 
		iSelectedId = oControlEvent.getParameter("selectedId"),
		oItem = oControlEvent.getParameter("selectedItem");
	
	if(!oItem && iSelectedId){
		oItem = sap.ui.getCore().byId(iSelectedId);
		if(oItem.getParent() !== this._getListBox(false)) {// can this happen?
			oItem = null;
		}
		iSelected = jQuery.inArray(oItem, this._getListBox().getItems());
	}
	if(oItem && oItem.getEnabled()) {
		this._close();
		var oTmpValue = oItem.getText();
		this._iClosedUpDownIdx = iSelected;
		this.setValue(oTmpValue, true);
		this.setProperty("selectedKey", oItem.getKey(), true); // no rerendering needed
		this.setProperty("selectedItemId", oItem.getId(), true); // no rerendering needed	
		this._sTypedChars = oTmpValue;
		this.fireChange({newValue: oTmpValue, selectedItem: oItem});
	}
	this._doSelect();
	return oItem;
};


//***********************************************************
// Handle aggregation and association
//***********************************************************

//Handle items aggregation
sap.ui.commons.ComboBox.prototype.getItems = function(){
	return this._getListBox()?this._getListBox().getItems():[];
};
sap.ui.commons.ComboBox.prototype.insertItem = function(oItem, iIndex){
	this._getListBox().insertItem(oItem, iIndex);
	return this;
};
sap.ui.commons.ComboBox.prototype.addItem = function(oItem){
	this._getListBox().addItem(oItem);
	return this;
};
sap.ui.commons.ComboBox.prototype.removeItem = function(vElement) {
	return this._getListBox().removeItem(vElement);
};
sap.ui.commons.ComboBox.prototype.removeAllItems = function() {
	return this._getListBox().removeAllItems();
};
sap.ui.commons.ComboBox.prototype.indexOfItem = function(oItem){
	return this._getListBox().indexOfItem(oItem);
};
sap.ui.commons.ComboBox.prototype.destroyItems = function(){
	this._getListBox().destroyItems();
	return this;
};

// handle listBox association
sap.ui.commons.ComboBox.prototype.setListBox = function(sListBox) {
	// if we created our own listBox beforehand, destroy it as the newly set one should win.
	if (this._oListBox) {
		if (this.getAggregation("myListBox")) {
			this.destroyAggregation("myListBox", true);			
		}else{
			this._oListBox.destroy();
		}
		this._oListBox = null;
	}
	this.setAssociation("listBox", sListBox);
	return this;
};


//***********************************************************
// Focus information handling and rendering related
//***********************************************************

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @return {object} an object representing the serialized focus information
 * @private
 */
sap.ui.commons.ComboBox.prototype.getFocusInfo = function(){
	return {id: this.getId(), sTypedChars: this._sTypedChars};
};

/**
 * Applies the focus info
 * To be overwritten by the specific control method
 * @param {object} oFocusInfo
 * @private
 */
sap.ui.commons.ComboBox.prototype.applyFocusInfo = function(oFocusInfo){
	jQuery(this.getInputDomRef()).val(oFocusInfo.sTypedChars);
	this._doTypeAhead();
	return this;
};

/**
 * Ensure that handed in ListBoxes are taken from the visible UI immediately.
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onAfterRendering = function(oEvent){
	this._getListBox().$().appendTo(sap.ui.getCore().getStaticAreaRef());
};


//***********************************************************
// Misc.
//***********************************************************

/**
 * Figure out whether the triggered key was a hotkey
 * @param {jQuery.Event} oEvent the event fired on the ComboBox
 * @private
 * @static
 */
sap.ui.commons.ComboBox._isHotKey = function(oEvent){
	if(oEvent.altKey || oEvent.ctrlKey || oEvent.metaKey) {
		return true;
	}

	var iKeyCode = oEvent.keyCode || oEvent.which,
		eKC = jQuery.sap.KeyCodes;

	switch(iKeyCode){
		// some keys can be identified as hotkey 'all alone'
		case eKC.ENTER:
		case eKC.SHIFT:
		case eKC.TAB:
		case eKC.ALT:
		case eKC.CONTROL:
		case eKC.END:
		case eKC.HOME:
		case eKC.ARROW_LEFT:
		case eKC.ARROW_UP:
		case eKC.ARROW_RIGHT:
		case eKC.ARROW_DOWN:
			return true;
		// as F-keys share the keycode with standard characters, ensure that which equals 0
		case eKC.F1:
		case eKC.F2:
		case eKC.F3:
		case eKC.F4:
		case eKC.F5:
		case eKC.F6:
		case eKC.F7:
		case eKC.F8:
		case eKC.F9:
		case eKC.F10:
		case eKC.F11:
		case eKC.F12:
			return oEvent.which === 0;
		default:
			return false;
	}
};

/*
 * Overwrite of standard function
 */
sap.ui.commons.ComboBox.prototype.setSelectedKey = function(sSelectedKey) {

	if (this.getSelectedKey() == sSelectedKey) {
		// not changed
		return this;
	}

	//	find corresponding item
	var aItems = this._getListBox().getItems();
	var bNotFound = true;
	var sSelectedItemId;
	
	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getKey() == sSelectedKey && aItems[i].getEnabled()) {
			// key found -> set corresponding value
			var oSelectedItem = aItems[i];
			sSelectedItemId = oSelectedItem.getId();
			var sValue = oSelectedItem.getText();
			this.setValue(sValue, true);
			this._sTypedChars = sValue;

			bNotFound = false;
			break;
		}
	} 
	if (!bNotFound) {
		this.setProperty("selectedKey", sSelectedKey, true); // no rerendering needed	
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed	
	}
	return this;
}; 

/*
 * Overwrite of standard function
 */
sap.ui.commons.ComboBox.prototype.setSelectedItemId = function(sSelectedItemId) {

	if (this.getSelectedItemId() == sSelectedItemId) {
		// not changed
		return this;
	}

	//	find corresponding item
	var aItems = this._getListBox().getItems();
	var bNotFound = true;
	var sKey;
	
	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getId() == sSelectedItemId && aItems[i].getEnabled()) {
			// key found -> set corresponding value
			var oSelectedItem = aItems[i];
			sKey = oSelectedItem.getKey();
			var sValue = oSelectedItem.getText();
			this.setValue(sValue, true);
			this._sTypedChars = sValue;

			bNotFound = false;
			break;
		}
	} 
	if (!bNotFound) {
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed	
		this.setProperty("selectedKey", sKey, true); // no rerendering needed	
	}
	return this;
}; 

/*
 * Overwrite of TextField function
 * additional parameter bNotSetSelectedKey to not set selected key because set 
 * from calling function
 */
sap.ui.commons.ComboBox.prototype.setValue = function(sValue, bNotSetSelectedKey) {

	if (!bNotSetSelectedKey) {
		// find key for value
		var aItems = this._getListBox().getItems();
		var sKey;
		var sSelectedItemId;

		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i].getText() == sValue && aItems[i].getEnabled()) {
				// Value found -> set corresponding key
				var oSelectedItem = aItems[i];
				sSelectedItemId = oSelectedItem.getId();
				sKey = oSelectedItem.getKey();
				break;
			}
		} 
		this.setProperty("selectedKey", sKey, true); // no rerendering needed	
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed	
	}

	// call standard TextField function
	sap.ui.commons.TextField.prototype.setValue.apply(this, [sValue]);
	this._sTypedChars = this.getValue();
	return this;
};

/* 
 * Overwite of INVALIDATE
 * do not invalidate ComboBox if only ListBox is changed
*/
sap.ui.commons.ComboBox.prototype.invalidate = function(oOrigin) {

	if(!oOrigin || oOrigin != this._getListBox()){
		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	}else{	
		// register ListBox as invalidatet
		if(this.getUIArea()){
			this.getUIArea().addInvalidatedControl(oOrigin);
		}
	}

};

/*
 * Overwrite CLONE to set aggregation of ListBox
 */
sap.ui.commons.ComboBox.prototype.clone = function(sIdSuffix){

	var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);
	
	// check if listbox is cloned
	var oListBox = sap.ui.getCore().getControl(this.getId()+"-lb-"+(sIdSuffix || jQuery.sap.uid()));
	if (oListBox) {
		oClone.setAggregation("myListBox", oListBox, true);
		oClone._oListBox = oListBox;
	}
	
	return oClone;

}; 

// to overwrite JS doc with new event parameter

/**
 * Fire event change to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the textfield.</li>
 * <li>'selectedItem' of type <code>sap.ui.core/ListItem</code> selected item </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ComboBox#fireChange
 * @function
 */ 
 
 /**
 * Event is fired when the text in the field has changed AND the focus leaves the ComboBox or the Enter key is pressed. 
 *
 * @name sap.ui.commons.ComboBox#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the ComboBox.
 * @param {sap.ui.core/ListItem} oControlEvent.getParameters.selectedItem The new / changed item of the ComboBox.
 * @public
 */
 
}; // end of sap.ui.commons.ComboBox
if ( !jQuery.sap.isDeclared('sap.ui.commons.AccordionSection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.AccordionSection.
jQuery.sap.declare("sap.ui.commons.AccordionSection");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new AccordionSection.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>maxHeight : sap.ui.core.CSSSize</li>
 * <li>enabled : boolean</li>
 * <li>collapsed : boolean</li>
 * <li>title : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>scroll : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Represents a UI panel that is a simple container for controls. The panel does not layout the contained controls.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.AccordionSection = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.AccordionSection.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.AccordionSection. 
 * Resulting metadata can be obtained via sap.ui.commons.AccordionSection.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.AccordionSection", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getMaxHeight", "setMaxHeight", "getEnabled", "setEnabled", "getCollapsed", "setCollapsed", "getTitle", "setTitle", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    
    // events
    "attachScroll", "detachScroll"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "maxHeight" : {name : "maxHeight", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "collapsed" : {name : "collapsed", type : "boolean", group : "Behavior", defaultValue : false},
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {
    "scroll" : "scroll"
  }

});	

sap.ui.commons.AccordionSection.M_EVENTS = {'scroll':'scroll'};


/**
 * Getter for property <code>maxHeight</code>.
 * When the section content exceeds the maxHeight, a vertical scrollbar appears.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxHeight</code>
 * @public
 * 
 */
sap.ui.commons.AccordionSection.prototype.getMaxHeight = function() {
	return this.getProperty("maxHeight");
};

/**
 * Setter for property <code>maxHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxHeight  new value for property <code>maxHeight</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setMaxHeight = function(sMaxHeight) {
	this.setProperty("maxHeight", sMaxHeight);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Requirement is that the used theme supports the control.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.AccordionSection.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>collapsed</code>.
 * A collapsed panel consumes minimal space. When initially collapsed, its contents are not rendered. The recommendation is to set the panel width if the control shall be collapsed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>collapsed</code>
 * @public
 * 
 */
sap.ui.commons.AccordionSection.prototype.getCollapsed = function() {
	return this.getProperty("collapsed");
};

/**
 * Setter for property <code>collapsed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCollapsed  new value for property <code>collapsed</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed);
	return this;
};


/**
 * Getter for property <code>title</code>.
 * Section header text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.commons.AccordionSection.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregates the controls that are contained in the panel. Control layouting is browser-dependent. For a stable content layout, use a layout control as direct single child.
 * When the panel dimensions are set, the child control may have width and height of 100%;
 * when the panel dimensions are not set, the child defines the panel size.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.AccordionSection.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.AccordionSection.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.AccordionSection.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.AccordionSection.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.AccordionSection.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * Event is fired when the user scrolls the panel. 
 *
 * @name sap.ui.commons.AccordionSection#scroll
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.left Horizontal scroll position.
 * @param {int} oControlEvent.getParameters.top Vertical scroll position.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'scroll' event of this <code>sap.ui.commons.AccordionSection</code>.<br/>
 * Event is fired when the user scrolls the panel. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.attachScroll = function(oData, fnFunction, oListener) {
	this.attachEvent("scroll", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'scroll' event of this <code>sap.ui.commons.AccordionSection</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.detachScroll = function(fnFunction, oListener) {
	this.detachEvent("scroll", fnFunction, oListener);
	return this;	
};

/**
 * Fire event scroll to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'left' of type <code>int</code> Horizontal scroll position.</li>
 * <li>'top' of type <code>int</code> Vertical scroll position.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.AccordionSection.prototype.fireScroll = function(mArguments) {
	this.fireEvent("scroll", mArguments);
	return this;
};


// Start of sap/ui/commons/AccordionSection.js
/**
 * AccordionSection Behavior Implementation
 *
 * Open:
 * - HeaderDesign not implemented yet
 */

/**
 * Do some initialization
 * @private
 */
sap.ui.commons.AccordionSection.prototype.init = function(){
   this.bIgnoreScrollEvent = true; // do not fire a scroll event initially
   this.oScrollDomRef = null;      // points to the content area
};

/**
 * Set focus on the first control
 * @private
 */
sap.ui.commons.AccordionSection.prototype.focusFirstControl = function () {
	var aControls = this.getContent();
	if (aControls[0]) {
		aControls[0].focus();
	}
};

/**
 * Set focus the arrow
 * @private
 */
sap.ui.commons.AccordionSection.prototype.focus = function () {

	var arrow = jQuery.sap.domById(this.getId() + "-minL");
	arrow.focus();
};

/**
 * Called after the theme has been switched, required for adjustments
 * @private
 */
sap.ui.commons.AccordionSection.prototype.onThemeChanged = function () {
	var hdrLeft = jQuery.sap.domById(this.getId() + "-hdrL");

	if (hdrLeft) {
		hdrLeft.style.width = "auto";
		var obj = this;
		setTimeout(function() {obj.onAfterRendering();}, 0); // TODO: there is a problem in IE8, depending on what the surronding container is...
	}

}

/**
 * Adapts size settings of the rendered HTML
 * @private
 */;
sap.ui.commons.AccordionSection.prototype.onAfterRendering = function () {

	this.oScrollDomRef = jQuery.sap.domById(this.getId() + "-cont");
	var cont	  = this.oScrollDomRef;
	var root	  = this.getDomRef();
	var accordion = jQuery.sap.domById(this.getParent().getId());
	// if only height is set, the content area's height needs to be adapted  (should be a rare use-case)
	if (!sap.ui.commons.AccordionSection._isSizeSet(this.getParent().getWidth()) && sap.ui.commons.AccordionSection._isSizeSet(this.getMaxHeight())) {
		if (cont) {
			var contTop = cont.offsetTop;
			var targetHeight = (root.offsetHeight - contTop);
			cont.style.height = targetHeight + "px";

			var actualContHeight = cont.offsetHeight;
			if (actualContHeight > targetHeight) {
				cont.style.height = targetHeight - (actualContHeight - targetHeight) + "px";
			}
		}

	}

	var leftBorder	= jQuery(accordion).css("border-left-width");
	var rightBorder = jQuery(accordion).css("border-right-width");


	var borderTotal = parseFloat(leftBorder.substring(0, leftBorder.indexOf("px") )) +	parseFloat(rightBorder.substring(0, rightBorder.indexOf("px") ))

;
	var oDomLabel = jQuery.sap.domById(this.getId() + "-lbl");
	root.style.width	  = accordion.offsetWidth - borderTotal + "px";
	oDomLabel.style.width = accordion.offsetWidth - 30 + "px";

	//Bind the scroll event (does not bubble)
	var fnScrollProxy = this.__scrollproxy__;
	if (!fnScrollProxy) {
		fnScrollProxy = this.__scrollproxy__ = jQuery.proxy(this.onscroll, this);
	}
	jQuery.sap.byId(this.getId()+"-cont").bind("scroll", fnScrollProxy);

};

sap.ui.commons.AccordionSection.prototype.onBeforeRendering = function() {
	var fnScrollProxy = this.__scrollproxy__;
	if (fnScrollProxy) {
		jQuery.sap.byId(this.getId()+"-cont").unbind("scroll", fnScrollProxy);
	}
};

/**
 * Property setter for the "enabled" state
 *
 * @param bEnabled Whether the AccordionSection should be enabled, or not
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled, true); // no re-rendering!
	var root = this.getDomRef();
	if (root) {
		// if already rendered, adapt rendered control without complete re-rendering
		if (bEnabled) {
			jQuery(root).removeClass("sapUiAcdSectionDis");
		} else {
			jQuery(root).addClass("sapUiAcdSectionDis");
		}
	}
	return this;
};


/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @private
 */
sap.ui.commons.AccordionSection.prototype._setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed, true); // no re-rendering!
	this._setCollapsedState(bCollapsed); // adapt rendered control without complete re-rendering
};

/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setCollapsed = function(bCollapsed) {
	if(this.getParent()){

		if(!bCollapsed){
			this.getParent().openSection(this.getId());
		}
		else{
			this.getParent().closeSection(this.getId());
		}
	}
	else{
		this._setCollapsed(bCollapsed);
	}
	return this;
};


/**
 * Internal method for applying a "collapsed" state to the rendered HTML
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @private
 */
sap.ui.commons.AccordionSection.prototype._setCollapsedState = function(bCollapsed) {



	if (this.getDomRef()) {
		// after AccordionSection has been rendered
		if (bCollapsed) {
			var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

			// collapsing
			if (!this.getParent().getWidth()) {
				this.getDomRef().style.width = this.getDomRef().offsetWidth + "px"; // maintain the current width
			}
			jQuery(this.getDomRef()).addClass("sapUiAcdSectionColl");
			var tb = jQuery.sap.domById(this.getId() + "-tb");
			if (tb) {
				tb.style.display = "none";
			}

			var cont = jQuery.sap.domById(this.getId() + "-cont");
			cont.style.display = "none";
			if (accessibility) {
				cont.setAttribute("aria-expanded", "false");
				cont.setAttribute("aria-hidden", "true");
			}


		} else {
			// expanding
			if (!jQuery.sap.domById(this.getId() + "-cont")) {
				// content has not been rendered yet, so render it now
				this.rerender(); // TODO: potentially restore focus to collapse icon/button
			} else {
				// content exists already, just make it visible again
				jQuery(this.getDomRef()).removeClass("sapUiAcdSectionColl");
				var tb = jQuery.sap.domById(this.getId() + "-tb");
				if (tb) {
					tb.style.display = "block";
				}

				var cont = jQuery.sap.domById(this.getId() + "-cont");
				cont.style.display = "block";
				if (accessibility) {
					cont.setAttribute("aria-expanded", "true");
				}

				if (this.getMaxHeight()) {
					this.getDomRef().style.height = this.getMaxHeight(); // restore the set height
				}
			}
		}
	}
}


/**
 * Static method that finds out whether the given CSS size is actually set.
 * Returns "true" for absolute and relative sizes, returns "false" if "null", "inherit" or "auto" is given.
 *
 * @static
 * @param sCssSize A CSS size string which must be a valid CSS size, or null
 * @private
 */;
sap.ui.commons.AccordionSection._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize =="auto") && !(sCssSize == "inherit"));
}


/*   Event Handling   */

/**
 * Handles any "triggering" actions like click and space
 *
 * @param {jQuery.Event} oEvent
 * @private
 */;
sap.ui.commons.AccordionSection.prototype._handleTrigger = function(oEvent) {
	// minimize button toggled
	if((oEvent.target.id === this.getId() + "-minL") ||
			(oEvent.target.id === this.getId() + "-minR")) {
		var bCollapsed = !this.getProperty("collapsed");
		this._setCollapsed(bCollapsed);
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Handles the scroll event of the browser
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.AccordionSection.prototype.onscroll = function (oEvent) {
	/**
	if (this.bIgnoreScrollEvent) { // bIgnoreScrollEvent is set to "true" if the scrollbar is moved via API calls
		this.bIgnoreScrollEvent = false;
		return;
	}
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		this.fireScroll(oDomRef.scrollTop, oDomRef.scrollLeft);
	}
	 */
};
}; // end of sap.ui.commons.AccordionSection
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.MenuButton
jQuery.sap.declare("sap.ui.commons.MenuButtonRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class MenuButton renderer.
 * @static
 * For a common look&feel, the MenuButton extends the Button control,
 * just like the TextField ComboBox works.
 */
sap.ui.commons.MenuButtonRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ButtonRenderer);

/**
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.MenuButton}
 *            oControl the MenuButton that should be rendered
 * @private
 * P.S.: "renderButtonAttributes" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 */
sap.ui.commons.MenuButtonRenderer.renderButtonAttributes = function(rm, oControl) {
	//Add specific ARIA information for MenuButton
	if (sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("aria-haspopup", "true");
	}
};

/**
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.MenuButton}
 *            oControl the MenuButton that should be rendered
 * @private
 * P.S.: "renderButtonContentAfter" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 */
sap.ui.commons.MenuButtonRenderer.renderButtonContentAfter = function(rm, oControl) {
	rm.write("<span class=\"sapUiMenuButtonIco\"></span>");
};
}; // end of sap.ui.commons.MenuButtonRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RadioButtonGroup.
jQuery.sap.declare("sap.ui.commons.RadioButtonGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RadioButtonGroup.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>columns : int</li>
 * <li>visible : boolean</li>
 * <li>editable : boolean</li>
 * <li>valueState : sap.ui.core.ValueState</li>
 * <li>selectedIndex : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.core.Item</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * a group of RadioButtons to hande as one UI element.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RadioButtonGroup = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RadioButtonGroup.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.RadioButtonGroup. 
 * Resulting metadata can be obtained via sap.ui.commons.RadioButtonGroup.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RadioButtonGroup", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getColumns", "setColumns", "getVisible", "setVisible", "getEditable", "setEditable", "getValueState", "setValueState", "getSelectedIndex", "setSelectedIndex", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", "bindItems", "unbindItems", 
    // associations
    
    // events
    "attachSelect", "detachSelect", 
    // methods
    "getSelectedItem", "setSelectedItem"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "columns" : {name : "columns", type : "int", group : "Appearance", defaultValue : 1},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "valueState" : {name : "valueState", type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
    "selectedIndex" : {name : "selectedIndex", type : "int", group : "Data", defaultValue : 0}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.core.Item", multiple : true, singularName : "item"}
  },
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.commons.RadioButtonGroup.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>width</code>.
 * Width of the RadioButtonGroup.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>columns</code>.
 * Number of RadioButtons displayed in one Line.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>columns</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getColumns = function() {
	return this.getProperty("columns");
};

/**
 * Setter for property <code>columns</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iColumns  new value for property <code>columns</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setColumns = function(iColumns) {
	this.setProperty("columns", iColumns);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Visibility of Group
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can choose a radio button.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>valueState</code>.
 * The value state to be displayed.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getValueState = function() {
	return this.getProperty("valueState");
};

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setValueState = function(oValueState) {
	this.setProperty("valueState", oValueState);
	return this;
};


/**
 * Getter for property <code>selectedIndex</code>.
 * Index of the selected/checked RadioButton.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * 
 */
sap.ui.commons.RadioButtonGroup.prototype.getSelectedIndex = function() {
	return this.getProperty("selectedIndex");
};

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setSelectedIndex = function(iSelectedIndex) {
	this.setProperty("selectedIndex", iSelectedIndex);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * RadioButtons of this RadioButtonGroup
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.RadioButtonGroup.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.bindItems = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("items", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.unbindItems = function() {
	this.unbindAggregation("items");
	return this;
};


/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.ui.commons.RadioButtonGroup#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.selectedIndex Index of the selected RadioButton.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.RadioButtonGroup</code>.<br/>
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.RadioButtonGroup</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedIndex' of type <code>int</code> Index of the selected RadioButton.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RadioButtonGroup.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


/**
 * Returns selected item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 *
 * @name sap.ui.commons.RadioButtonGroup.prototype.getSelectedItem
 * @function

 * @type sap.ui.core.Item
 * @public
 */


/**
 * Sets the item as seleced and removs the selection from the old one.
 *
 * @name sap.ui.commons.RadioButtonGroup.prototype.setSelectedItem
 * @function
 * @param {sap.ui.core.Item} 
 *         oItem
 *         Selected item.

 * @type void
 * @public
 */


// Start of sap/ui/commons/RadioButtonGroup.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.ui.commons.RadioButtonGroup.prototype.exit = function() {
	this.destroyItems(); // or Element.exit should call the typed destroyXYZ methods?
	// sap.ui.core.Control.prototype.exit.apply(this); // does not exist!
};

sap.ui.commons.RadioButtonGroup.prototype.onBeforeRendering = function() {
	if(this.getSelectedIndex() > this.getItems().length){
		// SelectedIndex is > than number of items -> select the first one
		this.setSelectedIndex(0);
	};
};

sap.ui.commons.RadioButtonGroup.prototype.onAfterRendering = function() {

	this.initItemNavigation();

	// update ARIA information of RadioButtons
	for(var i = 0; i < this.aRBs.length; i++){
		jQuery.sap.byId(this.aRBs[i].getId()).attr("aria-posinset", i+1).attr("aria-setsize", this.aRBs.length);
	}
};

/**
 * initialize ItemNavigation. Transfer RadioButtons to ItemNavigation.
 * TabIndexes are set by ItemNavigation
 * @private
*/
sap.ui.commons.RadioButtonGroup.prototype.initItemNavigation = function(){

	// Collect items for ItemNavigation
	var	aDomRefs = [];
	this._aActiveItems = [];
	var aActiveItems = this._aActiveItems;
	for (var i=0; i < this.aRBs.length; i++) {
		aActiveItems[aDomRefs.length] = i;
		aDomRefs.push(jQuery.sap.domById(this.aRBs[i].getId()));
	}

	// init ItemNavigation
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._handleAfterFocus, this);
		this.addDelegate(this.oItemNavigation);
	}
	this.oItemNavigation.setRootDomRef(this.getDomRef());
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	this.oItemNavigation.setCycling(true);
	this.oItemNavigation.setColumns(this.getColumns());
	this.oItemNavigation.setSelectedIndex(this.getSelectedIndex());
	this.oItemNavigation.setFocusedIndex(this.getSelectedIndex());
};

/**
 * Set selected RadioButton via Index
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.setSelectedIndex = function(iSelectedIndex) {

	var iIndexOld = this.getSelectedIndex();

	this.setProperty("selectedIndex", iSelectedIndex, true); // no re-rendering

	// deselect old RadioButton
	if( !isNaN(iIndexOld) && this.aRBs && this.aRBs[iIndexOld]){
		this.aRBs[iIndexOld].setSelected(false);
	}

	// select new one
	if(this.aRBs && this.aRBs[iSelectedIndex]){
		this.aRBs[iSelectedIndex].setSelected(true);
	}

	if(this.oItemNavigation){
		this.oItemNavigation.setSelectedIndex(iSelectedIndex);
		this.oItemNavigation.setFocusedIndex(iSelectedIndex);
	}

};

/**
 * Set selected RadioButton via Item
 * @param {sap.ui.core.Item} oSelectedItem the item to be selected.
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.setSelectedItem = function(iSelectedItem) {

	for (var i = 0; i < this.getItems().length; i++){
		if(iSelectedItem.getId() == this.getItems()[i].getId()){
			this.setSelectedIndex(i);
			break;
		}
	}
};

/**
 * Get item of selected RadioButton
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.getSelectedItem = function() {

	return this.getItems()[this.getSelectedIndex()];

};

/**
 * Adds a new Item
 * If an item is added a new RadioButton must be added
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.addItem = function(oItem) {

	this.myChange = true;
	this.addAggregation("items", oItem);
	this.myChange = undefined;

	if(this.getSelectedIndex() === undefined){
		// if not defined -> select first one
		this.setSelectedIndex(0);
	}
	if(!this.aRBs){
		this.aRBs = [];
	}

	var iIndex = this.aRBs.length;

	this.aRBs[iIndex] = this.createRadioButton(oItem, iIndex);

	return this;
};

/**
 * Inserts a new Item
 * If an item is inserted a new RadioButton must be inserted
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.insertItem = function(oItem, iIndex) {

	this.myChange = true;
	this.insertAggregation("items", oItem, iIndex);
	this.myChange = undefined;

	if(!this.aRBs){
		this.aRBs = [];
	}

	var iLength = this.aRBs.length;

	if(this.getSelectedIndex() === undefined || iLength == 0){
		// if not defined -> select first one
		this.setSelectedIndex(0);
	}else if(this.getSelectedIndex() >= iIndex){
		// If inserted before selected one, move selection index (only change parameter, not RadioButton)
		this.setProperty("selectedIndex", this.getSelectedIndex() + 1, true); // no re-rendering
	}

	if( iIndex >= iLength){
		this.aRBs[iIndex] = this.createRadioButton(oItem, iIndex);
	}else{
		// Insert RadioButton: loop backwards over Array and shift everything
		for (var i = (iLength); i > iIndex; i--) {
			this.aRBs[i] = this.aRBs[i-1];
			if((i-1) == iIndex){
				this.aRBs[i-1] = this.createRadioButton(oItem, iIndex);
			}
		}
	}

	return this;

};

/**
 * create RadioButton for an item
 * @private
*/
sap.ui.commons.RadioButtonGroup.prototype.createRadioButton = function(oItem, iIndex){

	if(this.iIDCount == undefined){
		this.iIDCount = 0;
	}else{
		this.iIDCount++;
	}

	var oRadioButton = new sap.ui.commons.RadioButton(this.getId() + "-" + this.iIDCount);
	oRadioButton.setText(oItem.getText());
	oRadioButton.setTooltip(oItem.getTooltip());
	oRadioButton.setEnabled(oItem.getEnabled());
	oRadioButton.setKey(oItem.getKey());
	oRadioButton.setTextDirection(oItem.getTextDirection());
	oRadioButton.setEditable(this.getEditable());
	oRadioButton.setGroupName(this.getId());
	oRadioButton.setValueState(this.getValueState());
	oRadioButton.setParent(this);

	if( iIndex == this.getSelectedIndex() ){
		oRadioButton.setSelected(true);
	}

	oRadioButton.attachEvent('select', this.handleRBSelect, this);

	return(oRadioButton);
};

/**
 * Adds a new Item
 * If an item is removed the corresponding RadioButton must be deleted
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.removeItem = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfItem(vElement);
	}

	this.myChange = true;
	var oItem = this.removeAggregation("items", iIndex);
	this.myChange = undefined;

	if(!this.aRBs){
		this.aRBs = [];
	}

	if(!this.aRBs[iIndex]){
		// RadioButton not exists
		return null;
	}

	this.aRBs[iIndex].destroy();
	this.aRBs.splice(iIndex, 1);

	if(this.aRBs.length == 0){
		this.setSelectedIndex(undefined);
	}else if(this.getSelectedIndex() == iIndex){
		// selected one is removed -> select first one
		this.setSelectedIndex(0);
	}else{
		if(this.getSelectedIndex() > iIndex){
			// If removed before selected one, move selection index (only change parameter, not RadioButton)
			this.setProperty("selectedIndex", this.getSelectedIndex() - 1, true); // no re-rendering
		}
	}

	return oItem;
};

/**
 * Adds a new Item
 * If all items are removed all RadioButtons must be deleted
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.removeAllItems = function() {

	this.myChange = true;
	var aItems = this.removeAllAggregation("items");
	this.myChange = undefined;

	this.setSelectedIndex(undefined);

	if(this.aRBs){
		while(this.aRBs.length > 0){
			this.aRBs[0].destroy();
			this.aRBs.splice(0, 1);
		};
		return aItems;
	}else{
		return null;
	}

};

/**
 * Adds a new Item
 * If all items are destroyed all RadioButtons must be deleted
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.destroyItems = function() {

	this.myChange = true;
	this.destroyAggregation("items");
	this.myChange = undefined;

	this.setSelectedIndex(undefined);

	if(this.aRBs){
		while(this.aRBs.length > 0){
			this.aRBs[0].destroy();
			this.aRBs.splice(0, 1);
		};
	}

	return this;

};

/**
 * if invalid -> synchronize radio buttons
 * @protected
*/
sap.ui.commons.RadioButtonGroup.prototype.invalidate = function(oOrigin){

	if(oOrigin instanceof sap.ui.core.Item && this.aRBs && !this.myChange){
		// change was not done by RadioButtonGroup itself
		var aItems = this.getItems();
		for (var i = 0; i < aItems.length; i++) {
			if( aItems[i] == oOrigin){
				if(this.aRBs[i]){
					this.aRBs[i].setText(aItems[i].getText());
					this.aRBs[i].setTooltip(aItems[i].getTooltip());
					this.aRBs[i].setEnabled(aItems[i].getEnabled());
					this.aRBs[i].setKey(aItems[i].getKey());
					this.aRBs[i].setTextDirection(aItems[i].getTextDirection());
				}
				break;
			}
		}
		if(this.getDomRef()){
			this.initItemNavigation();
		}
	}
	var oParent = this.getParent();
	if(oParent) {
		oParent.invalidate(this);
	}

};

/**
 * On SELECT event of single Radio Buttons fire Select Event for group
 * @private
*/
sap.ui.commons.RadioButtonGroup.prototype.handleRBSelect = function(oControlEvent){
	// find RadioButton in Array to get Index
	for (var i = 0; i < this.aRBs.length; i++) {
		if(this.aRBs[i].getId() == oControlEvent.getParameter("id")){
			this.setSelectedIndex(i);
			this.oItemNavigation.setSelectedIndex(i);
			this.oItemNavigation.setFocusedIndex(i);
			this.fireSelect({selectedIndex: i});
			break;
		}
	}

};

/**
 * Set all RadioButtons to Editable/ReadOnly
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.setEditable = function(bEditable){

	this.setProperty("editable", bEditable, false); // re-rendering to update ItemNavigation

	if(this.aRBs){
		for (var i = 0; i < this.aRBs.length; i++) {
			this.aRBs[i].setEditable(bEditable);
		}
	}
};

/**
 * Set ValueState for all RadioButtons
 * @public
*/
sap.ui.commons.RadioButtonGroup.prototype.setValueState = function(sValueState){

	this.setProperty("valueState", sValueState, false); // re-rendering to update ItemNavigation

	if(this.aRBs){
		for (var i = 0; i < this.aRBs.length; i++) {
			this.aRBs[i].setValueState(sValueState);
		}
	}
};

/**
 * Handles the event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * Ensures that focused element is selected
 *
 * @param {sap.ui.base.Event} oControlEvent The event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * @private
 */
sap.ui.commons.RadioButtonGroup.prototype._handleAfterFocus = function(oControlEvent){

	var iIndex = oControlEvent.getParameter("index");
	var oEvent = oControlEvent.getParameter("event");

	if(iIndex != this.getSelectedIndex() && !oEvent.metaKey && this.aRBs[iIndex].getEditable() && this.aRBs[iIndex].getEnabled()){
		// if CTRL key is used do not switch selection
		this.setSelectedIndex(iIndex);
		this.oItemNavigation.setSelectedIndex(iIndex);
		this.fireSelect({selectedIndex:iIndex});
	}
};
}; // end of sap.ui.commons.RadioButtonGroup
if ( !jQuery.sap.isDeclared('sap.ui.commons.AccordionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Accordion
jQuery.sap.declare("sap.ui.commons.AccordionRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.AccordionRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oAccordion An object representation of the control that should be rendered
 */
sap.ui.commons.AccordionRenderer.render = function(oRenderManager, oAccordion){

	// convenience variable
	var rm = oRenderManager;


	// write the HTML into the render manager
	rm.write("<div tabIndex=0");
	rm.writeControlData(oAccordion);

	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute('role', 'group');
	}

	rm.writeAttribute("class","sapUiAcd");
	rm.addStyle("width", oAccordion.getWidth());
	rm.writeStyles();
	rm.write(">"); // SPAN element

	rm.write("<div id='" + oAccordion.getId()+ "-dropTarget" + "' style='width:"+ oAccordion.getWidth() +"' tabIndex='-1' class='sapUiAcd-droptarget'></div>");


	var aSections = oAccordion.getSections();
	var aDefaultSections = oAccordion.getOpenedSectionsId().split(",");

	for(var i=0;i<aSections.length;i++){

		// Open the section if the section is part of the default opened section
		if(oAccordion.bInitialRendering){

			if(jQuery.inArray(aSections[i].getId(),aDefaultSections)!= -1){
				aSections[i]._setCollapsed(false);
			}
			else{
				aSections[i]._setCollapsed(true);
			}

	   }

	   rm.renderControl(aSections[i]);

	}

	rm.write("</div>");

	oAccordion.bInitialRendering = false;

};
}; // end of sap.ui.commons.AccordionRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.AccordionSectionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.AccordionSection
jQuery.sap.declare("sap.ui.commons.AccordionSectionRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.AccordionSectionRenderer = function() {
};


/**
 * Renders the HTML for the AccordionSection, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.AccordionSectionRenderer.render = function(oRenderManager, oControl) {

	var rm = oRenderManager;
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	var heightSet = sap.ui.commons.AccordionSection._isSizeSet(oControl.getMaxHeight());
	var widthSet = sap.ui.commons.AccordionSection._isSizeSet(oControl.getParent().getWidth());

	// root element and classes
	rm.write("<div draggable=\"true\"");
	rm.writeControlData(oControl);
	rm.addClass("sapUiAcdSection");

	if(oControl.getParent().isLastSection(oControl)){
		rm.addClass("sapUiAcdSectionLast");
	}

	rm.addStyle("width", oControl.getParent().getWidth());
	if (!oControl.getCollapsed()) {
		rm.addStyle("height", oControl.getMaxHeight());
	} else {
		rm.addClass("sapUiAcdSectionColl");
	}

	rm.addClass("sapUiAcdSectionArea");

	if (!heightSet) {
		rm.addClass("sapUiAcdSectionFlexHeight");
	}
	if (!oControl.getEnabled()) {
		rm.addClass("sapUiAcdSectionDis");
	}

	rm.writeClasses();
	rm.writeStyles();

	// header
	rm.write("><div class='sapUiAcdSectionHdr'");
	rm.writeAttribute("id", oControl.getId() + "-hdr");
	rm.write(">");

	rm.writeAttribute("<div ");
	rm.writeAttribute("id", oControl.getId() + "-trgt");
	rm.write(">");

	rm.write("<span id='" + oControl.getId() + "-hdrL'>");

	if (oControl.getEnabled()){
		rm.write("<a draggable='false' id='" + oControl.getId() + "-minL' class='sapUiAcdSectionMinArrow' href='javascript:void(0)' title='Collapse/Expand'");
	}else{
		rm.write("<a draggable='false' id='" + oControl.getId() + "-minL' class='sapUiAcdSectionMinArrow sapUiAcdCursorText' href='javascript:void(0)' title='Collapse/Expand'");
	}

	//Navigate on arrow when accessibility is ON as well
	if(oControl.getEnabled() || accessibility  ){
		rm.write(" tabindex='0' ");
	}
	else{
		rm.write(" tabindex='-1' ");
	}

	if (accessibility) {

		rm.writeAttribute("role", "listitem");
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");

		//Is the section opened --> selected in this case
		if (oControl.getCollapsed()) {
			rm.writeAttribute("aria-selected", "false");
		} else {
			rm.writeAttribute("aria-selected", "true");
		}
		//Disabled --> Unavailable annoucement
		if (oControl.getEnabled()) {
			rm.writeAttribute("aria-disabled", "false");
			rm.writeAttribute("aria-grabbed", "false");
		}
		else{
			rm.writeAttribute("aria-disabled", "true");
			rm.writeAttribute("aria-grabbed"); //No value -->undefined --> item cannot be grabbed
		}

	}
	rm.write("></a>");

	// label
	rm.write("<span id='" + oControl.getId() + "-lbl' class='sapUiAcdSectionLabel'");

	if (accessibility) {

		rm.writeAttribute("role", "heading");
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");
		rm.writeAttribute("tabindex", "0");

		if (oControl.getEnabled()) {
			rm.writeAttribute("aria-disabled", "false");
		}
		else{
			rm.writeAttribute("aria-disabled", "true");
		}
	}

	rm.write(">");

	rm.writeEscaped(oControl.getTitle());
	rm.write("</span>");
	rm.write("</span>");

	rm.write("</div></div>");

	// everything below the header is only rendered initially if not collapsed - saves performance and Panel just re-renders later on expand
	if (!oControl.getCollapsed()) {

		// Content area
		rm.write("<div class='sapUiAcdSectionCont' tabindex='-1' id='" + oControl.getId() + "-cont'");
		if (heightSet && widthSet) {
			rm.write(" style='position:absolute;'");
		} else {
			rm.write(" style='position:relative;top:0px;'"); // for IE7, when Panel contains relatively positioned elements
		}

		rm.write(">");

		// Content (child controls)
		var oControls = oControl.getContent(),
		iLength = oControls.length;
		for (var i=0;i<iLength;i++) {
			rm.renderControl(oControls[i]);
		}
		rm.write("</div>");

	}
	// End of Panel
		rm.write("</div>");
};
}; // end of sap.ui.commons.AccordionSectionRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Label.
jQuery.sap.declare("sap.ui.commons.Label");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Label.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>design : sap.ui.commons.LabelDesign</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>wrapping : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>text : string</li>
 * <li>visible : boolean</li>
 * <li>icon : string</li>
 * <li>textAlign : sap.ui.core.TextAlign</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>labelFor : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Is used for labeling other controls. The API provides formatting options, for example for bold display or alignment. A label can have an icon.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Label = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Label.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Label. 
 * Resulting metadata can be obtained via sap.ui.commons.Label.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Label", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getDesign", "setDesign", "getTextDirection", "setTextDirection", "getWrapping", "setWrapping", "getWidth", "setWidth", "getText", "setText", "getVisible", "setVisible", "getIcon", "setIcon", "getTextAlign", "setTextAlign", 
    // aggregations
    
    // associations
    "getLabelFor", "setLabelFor"
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "design" : {name : "design", type : "sap.ui.commons.LabelDesign", group : "Appearance", defaultValue : sap.ui.commons.LabelDesign.Standard},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
    "wrapping" : {name : "wrapping", type : "boolean", group : "Appearance", defaultValue : false},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : ''},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : null},
    "textAlign" : {name : "textAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin}
  },
  
  aggregations : {},
  associations : {
    "labelFor" : {name : "labelFor", type : "sap.ui.core.Control", multiple : false}
  },
  events : {}

});	


/**
 * Getter for property <code>design</code>.
 * 
 * Labels can have bold format.
 * 
 *
 * Default value is <code>sap.ui.commons.LabelDesign.Standard</code>
 *
 * @return {sap.ui.commons.LabelDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.ui.commons.LabelDesign.Standard</code> 
 *
 * @param {sap.ui.commons.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setDesign = function(oDesign) {
	this.setProperty("design", oDesign);
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>wrapping</code>.
 * 
 * Specifies whether a line wrapping shall be displayed when the text value is longer than the width (feature support in preparation)
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getWrapping = function() {
	return this.getProperty("wrapping");
};

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setWrapping = function(bWrapping) {
	this.setProperty("wrapping", bWrapping);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * 
 * Control width as common CSS-size (px or % as unit, for example).
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * 
 * Text to be displayed.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible labels are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * 
 * Icon to be displayed in the control.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>textAlign</code>.
 * 
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.ui.commons.Label.prototype.getTextAlign = function() {
	return this.getProperty("textAlign");
};

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setTextAlign = function(oTextAlign) {
	this.setProperty("textAlign", oTextAlign);
	return this;
};


/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 */
sap.ui.commons.Label.prototype.getLabelFor = function() {
	return this.getAssociation("labelFor", null);
};

/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Label.prototype.setLabelFor = function(vLabelFor) {
	this.setAssociation("labelFor", vLabelFor);
	return this;
};


	
// Start of sap/ui/commons/Label.js

}; // end of sap.ui.commons.Label
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.MenuBar
jQuery.sap.declare("sap.ui.commons.MenuBarRenderer");


/**
 * @class MenuBarRenderer.
 * @static
 */
sap.ui.commons.MenuBarRenderer = {
};

/**
 * Renders the HTML for the given menubar using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Toolbar} oToolbar An object representation of the control that should be rendered.
 */
sap.ui.commons.MenuBarRenderer.render = function(oRenderManager, oMenuBar) {
	var rm = oRenderManager;

	oMenuBar.doBeforeRendering();

	if(!oMenuBar.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oMenuBar);
	rm.addClass("sapUiMnuBar");
	if(oMenuBar.getDesign() == sap.ui.commons.MenuBarDesign.Header) {
		rm.addClass("sapUiMnuBarHeader");
	}
	var bIsDisabled = !oMenuBar.getEnabled();
	if(bIsDisabled) {
		rm.addClass("sapUiMnuBarDsbl");
	}
	rm.addStyle("width", oMenuBar.getWidth());
	rm.writeStyles();
	rm.writeClasses();
	rm.writeAttribute("tabindex", "0");
	var sTooltip = oMenuBar.getTooltip_AsString();
	sap.ui.commons.MenuBarRenderer.writeAria(rm, "menubar", sTooltip, bIsDisabled);
	rm.write("><ul");
	rm.writeAttribute("id", oMenuBar.getId()+"-area");
	rm.writeAttribute("class", "sapUiMnuBarArea");
	rm.write(">");

	var iVisibleItemIdx = 0;
	var aItems = oMenuBar.getItems();
	for(var i=0; i<aItems.length; i++){
		var oItem = aItems[i];
		if(oItem.getVisible()){
			iVisibleItemIdx++;
			rm.write("<li");
			rm.writeControlData(oItem);
			rm.addClass("sapUiMnuBarItm");
			var bDsbld = !oItem.getEnabled() || bIsDisabled;
			if(bDsbld) {
				rm.addClass("sapUiMnuBarItmDsbl");
			}
			rm.writeClasses();
			rm.writeAttribute("itemidx", ""+i);
			var sTooltip = oItem.getTooltip_AsString();
			sap.ui.commons.MenuBarRenderer.writeAria(rm, "menuitem", sTooltip, bDsbld, iVisibleItemIdx);
			rm.writeAttribute("tabindex", "-1");
			rm.write("><span>");
			rm.writeEscaped(oItem.getText());
			rm.write("</span></li>");
		}
	}

	rm.write("<li");
	rm.writeAttribute("id", oMenuBar.getId()+"-ovrflw");
	rm.writeAttribute("itemidx", "ovrflw");
	rm.writeAttribute("style", "display:none;");
	rm.writeAttribute("tabindex", "-1");
	rm.addClass("sapUiMnuBarItm");
	rm.addClass("sapUiMnuBarOvrFlw");
	if(bDsbld) {
		rm.addClass("sapUiMnuBarItmDsbl");
	}
	rm.writeClasses();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	var sOverFlowText = undefined;
	if(rb) {
		sOverFlowText = rb.getText("MNUBAR_OVRFLW");
	}
	sap.ui.commons.MenuBarRenderer.writeAria(rm, "menuitem", sOverFlowText, false, 0);
	rm.write("><span></span></li></ul></div>");
};

sap.ui.commons.MenuBarRenderer.writeAria = function(rm, sRole, sText, bDisabled, iIdx){
	if(sText) {
		rm.writeAttributeEscaped("title", sText);
	}

	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}

	rm.writeAttribute("role", sRole);
	if(sRole == "menuitem"){
		rm.writeAttribute("aria-haspopup", true);
		rm.writeAttribute("aria-posinset", iIdx);
	}
	if(bDisabled) {
		rm.writeAttribute("aria-disabled", true);
	}
};
}; // end of sap.ui.commons.MenuBarRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Paginator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Paginator.
jQuery.sap.declare("sap.ui.commons.Paginator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Paginator.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>currentPage : int</li>
 * <li>numberOfPages : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>page : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The Paginator control offers navigation within a list of numbered pages. The user can directly access pages in the vicinity of the current page as well as jump to the beginning or end of the list of pages. The application is notified of any user interaction through the 'page' event.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Paginator = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Paginator.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Paginator. 
 * Resulting metadata can be obtained via sap.ui.commons.Paginator.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Paginator", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getCurrentPage", "setCurrentPage", "getNumberOfPages", "setNumberOfPages", 
    // aggregations
    
    // associations
    
    // events
    "attachPage", "detachPage"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "currentPage" : {name : "currentPage", type : "int", group : "Misc", defaultValue : 1},
    "numberOfPages" : {name : "numberOfPages", type : "int", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "page" : "page"
  }

});	

sap.ui.commons.Paginator.M_EVENTS = {'page':'page'};


/**
 * Getter for property <code>currentPage</code>.
 * The current page.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>currentPage</code>
 * @public
 * 
 */
sap.ui.commons.Paginator.prototype.getCurrentPage = function() {
	return this.getProperty("currentPage");
};

/**
 * Setter for property <code>currentPage</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Paginator.prototype.setCurrentPage = function(iCurrentPage) {
	this.setProperty("currentPage", iCurrentPage);
	return this;
};


/**
 * Getter for property <code>numberOfPages</code>.
 * The number of pages that the parent control has.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>numberOfPages</code>
 * @public
 * 
 */
sap.ui.commons.Paginator.prototype.getNumberOfPages = function() {
	return this.getProperty("numberOfPages");
};

/**
 * Setter for property <code>numberOfPages</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iNumberOfPages  new value for property <code>numberOfPages</code>
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Paginator.prototype.setNumberOfPages = function(iNumberOfPages) {
	this.setProperty("numberOfPages", iNumberOfPages);
	return this;
};


/**
 * Fired when the user when the user navigates to a different page bey either selecting it directly or jumping forward/backward. 
 *
 * @name sap.ui.commons.Paginator#page
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.srcPage Page which was current before the event was fired.
 * @param {int} oControlEvent.getParameters.targetPage The next page that should be displayed.
 * @param {sap.ui.commons.PaginatorEvent} oControlEvent.getParameters.type What type of event was triggered.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'page' event of this <code>sap.ui.commons.Paginator</code>.<br/>
 * Fired when the user when the user navigates to a different page bey either selecting it directly or jumping forward/backward. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Paginator.prototype.attachPage = function(oData, fnFunction, oListener) {
	this.attachEvent("page", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'page' event of this <code>sap.ui.commons.Paginator</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Paginator.prototype.detachPage = function(fnFunction, oListener) {
	this.detachEvent("page", fnFunction, oListener);
	return this;	
};

/**
 * Fire event page to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'srcPage' of type <code>int</code> Page which was current before the event was fired.</li>
 * <li>'targetPage' of type <code>int</code> The next page that should be displayed.</li>
 * <li>'type' of type <code>sap.ui.commons.PaginatorEvent</code> What type of event was triggered.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Paginator.prototype.firePage = function(mArguments) {
	this.fireEvent("page", mArguments);
	return this;
};


// Start of sap/ui/commons/Paginator.js
/*
 * All animations of the Paginator control can be centrally switched
 * off by setting the <code>bShowAnimation</code> flag to <code>false</code>.
 * @private
 */

// Constants declaration
sap.ui.commons.Paginator.MAX_NUMBER_PAGES = 5;

/**
 * Init function
 * @private
 */
sap.ui.commons.Paginator.prototype.init = function(){
	//Animations are set to true by default, then on control initialization, check the number of pages
	this.bShowAnimation = true;

	//Use to know if initial focus was set with TAB key
	this.initialFocusSet = false;
};


/**
 * When the user clicks on a page link, we set the current page which will force a re-rendering of the control
 * @param {jQuery.Event} oEvent The current event
 * @private
 */
sap.ui.commons.Paginator.prototype.onclick = function(oEvent){
	if (oEvent && oEvent.target) {

		// go up one node if unnamed element is the source
		var target = oEvent.target;
		if (!target.id) {
			target = target.parentNode;
		}

		if (target.id && target.id != this.getId() + "-pages") {

			// Retrieve from where the event originated
			var aArray = target.id.split("--");

			// only do something if relevant item has been clicked
			if (aArray.length > 1) {
				var lastPart = aArray[aArray.length - 1];

				// What type of event will be sent
				var sEventType = null;

				// Buffer the current page as the sourcePage
				var iSrcPage = this.getCurrentPage();
				var iTargetPage = iSrcPage; // will be changed below

				// we have a number - a page has been clicked
				if (lastPart.match(/^\d+$/)) {
					sEventType = sap.ui.commons.PaginatorEvent.Goto;
					iTargetPage = parseInt(lastPart, 10);

				} else if (lastPart == "firstPageLink") {
					sEventType = sap.ui.commons.PaginatorEvent.First;
					iTargetPage = 1;

				} else if (lastPart == "backLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Previous;
					iTargetPage = Math.max(iSrcPage-1, 1);

				} else if (lastPart == "forwardLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Next;
					iTargetPage = Math.min(iSrcPage+1, this.getNumberOfPages());

				} else if (lastPart == "lastPageLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Last;
					iTargetPage = this.getNumberOfPages();

				} else {
					// TODO: should not happen
				}

				if (iTargetPage != iSrcPage) {
					if (this.bShowAnimation){
						this.setCurrentPage(iTargetPage, true); // update current page without re-rendering...
						this.triggerPaginatorAnimation(); // ...and animate
					} else {
						this.setCurrentPage(iTargetPage); // includes re-rendering
					}

					// fire the "page" event
					this.firePage({srcPage:iSrcPage,targetPage:iTargetPage,type:sEventType});
				}
			}
		}
	}
};

sap.ui.commons.Paginator.prototype.setCurrentPage = function(iTargetPage, bSuppressRerendering) {
	this.setProperty("currentPage", iTargetPage, bSuppressRerendering);
	if (this.getDomRef()) {
		sap.ui.commons.PaginatorRenderer.updateBackAndForward(this);
	}
};

/**
 * When animation is set to true, this function will use jQuery to animate the paginator
 * as if the page numbers were sliding left/right.
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerPaginatorAnimation = function() {
	var aIndicesToHide = [];
	var aIndicesToShow = [];
	var paginatorId = this.getId();
	var aChildren = jQuery.sap.byId(paginatorId + "-pages").children();

	// Get the ranges we need to display before and after the animation
	var oNewRange = this._calculatePagesRange();
	var oOldRange;
	if (this._oOldRange) {
		oOldRange = this._oOldRange;
	} else {
		oOldRange = {};
		var aParts = aChildren[0].id.split("--");
		oOldRange.firstPage = parseInt(aParts[aParts.length-1], 10);
		aParts = aChildren[aChildren.length-1].id.split("--");
		oOldRange.lastPage = parseInt(aParts[aParts.length-1], 10);
	}

	// the pages to be shown only after the animation are those to be rendered invisible, initially
	for (var i = oNewRange.firstPage; i <= oNewRange.lastPage; i++) {
		if (i < oOldRange.firstPage || i > oOldRange.lastPage) {
			aIndicesToShow.push(i);
		}
	}
	var oInvisibleRange = {
			firstPage:aIndicesToShow[0],
			lastPage:aIndicesToShow[aIndicesToShow.length-1]
	};

	// the pages to be shown initially, but NOT after the animation, are those to fade out
	for (var i = oOldRange.firstPage; i <= oOldRange.lastPage; i++) {
		if (i < oNewRange.firstPage || i > oNewRange.lastPage) {
			aIndicesToHide.push(i);
		}
	}

	// build the html for both the initially visible and still invisible pages
	var oldHtml = sap.ui.commons.PaginatorRenderer.getPagesHtml(this.getId(), oOldRange, this.getCurrentPage(), true);
	var newHtml = sap.ui.commons.PaginatorRenderer.getPagesHtml(this.getId(), oInvisibleRange, this.getCurrentPage(), false);
	if (oOldRange.firstPage < oInvisibleRange.firstPage) {
		newHtml = oldHtml + newHtml;
	} else {
		newHtml = newHtml + oldHtml;
	}
	jQuery.sap.domById(this.getId() + "-pages").innerHTML = newHtml;

	// Use jQuery hide/show to animate the paging
	var prefix = this.getId() + "-li--";

	this._oOldRange = oNewRange;
	for (var i=0 ; i<aIndicesToHide.length; i++) {
		var id = prefix + aIndicesToHide[i];
		jQuery.sap.byId(id).hide(400, function(){ // remove the DOM elements after the animation
			var id = this.id;
			var elem = jQuery.sap.domById(id);
			if (elem) {
				elem.parentNode.removeChild(elem);
			}
		});
	}

	for (var i=0 ; i<aIndicesToShow.length; i++) {
		jQuery.sap.byId(prefix + aIndicesToShow[i]).show(400);
	}
};


/**
 * Calculates what is the first page and last page to display (The current range).
 * Ensure that when we go over 5 pages, the current page will always be rendered centered
 * In this case, middle -2 and middle + 2 to get to full 5 pages range
 * @return {object} oPageRange object containing first page and last page to display
 * @private
 */
sap.ui.commons.Paginator.prototype._calculatePagesRange = function(){

	//Setting default values
	var iFirstPage = 1;
	var iLastPage = this.getNumberOfPages();
	var iCurrentPage = this.getCurrentPage();
	var iNbPages = this.getNumberOfPages();

	//From page 1 to page 5, we display 1 to 10 or less
	if ( iCurrentPage < 4 ){

		iFirstPage = 1;

		//Check if last page does not go over 5 --> iLastPage is already set with nbPages above
		if(iLastPage > sap.ui.commons.Paginator.MAX_NUMBER_PAGES){
			iLastPage = sap.ui.commons.Paginator.MAX_NUMBER_PAGES;
		}

	}
	//Now, the current page is more than 3, so we need to shift the range
	else{

		//Reached the last page
		if (iCurrentPage == iLastPage){
			//How many pages exist, if less than 5, simply substract the nb of pages from the last one (range is in this case 1 to max 5)
			if (iNbPages < 5){
				iFirstPage = 1;
			}
			//More than 5 pages, substract 4 pages to have the 5 pages range
			else{
				iFirstPage = iLastPage - 4;
			}
		}

		//Last page - current page is below 3, substract 4 to always see the right range for the last 2 pages
		else if ( iLastPage-iCurrentPage < 3 ){
			iFirstPage = iLastPage - 4;
		}

		//All other case, create the range from the current page +-2
		else{
			iFirstPage = iCurrentPage - 2;
			iLastPage = iCurrentPage + 2;
		}
	}

	return { firstPage : iFirstPage, lastPage : iLastPage };
};


/**
 * When the user clicks on the current page textField, we enable the textField
 * @param {jQuery.Event} oEvent The current event
 * @private
 */
sap.ui.commons.Paginator.prototype.onfocusin = function(oEvent){

	// focus the current page
	if (!this.initialFocusSet){
		var aArray = jQuery(jQuery.sap.domById(this.getId())).find(".sapUiPagCurrentPage");
		jQuery(jQuery(aArray[0]).children()[0]).focus();
		this.initialFocusSet = true;
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
	else{
		if (oEvent && oEvent.target && oEvent.target.id && oEvent.target.id.indexOf("currentPageField") != -1){
			this.oCurrentPageField.setEditable(true);
			this.oCurrentPageField.setValueState(sap.ui.core.ValueState.None);
		}
	}

};

/**
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Paginator.prototype.onfocusout = function(oEvent){
	this.initialFocusSet = false;
};


/**
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.commons.Paginator.prototype.onkeydown = function(oEvent){

	//Get the event type and dispatch to the keyboard navigation manager
	var aEvents = oEvent.getPseudoTypes();

	//Tab
	if (jQuery.inArray("saptabnext", aEvents) != -1) {
		this.triggerTabbingNavigation(oEvent,false);
	}
	//Shift/tab
	else if (jQuery.inArray("saptabprevious", aEvents) != -1) {
		this.triggerTabbingNavigation(oEvent,true);
	}
	//Moves focus to the right (Right arrow key)
	else if (jQuery.inArray("sapincrease", aEvents) != -1 ){
		this.triggerInternalNavigation(oEvent,"next");
	}
	//Moves focus to the left (Left arrow key)
	else if (jQuery.inArray("sapdecrease", aEvents) != -1 ){
		this.triggerInternalNavigation(oEvent,"previous");
	}

};


/**
 * This function will navigate left and right in the paginator, skipping non tabbable elements
 * @param {jQuery.Event} oEvent the browser event
 * @param {string} sDirection Navigation left or right
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerInternalNavigation = function(oEvent,sDirection){

	var aFocusableElements = jQuery(jQuery.sap.domById(this.getId())).find(":focusable");
	var iCurrentIndex = jQuery(aFocusableElements).index(oEvent.target);

	//Right key pressed
	if (sDirection == "next"){
		var iNextIndex = iCurrentIndex + 1;
		if (jQuery(oEvent.target).hasClass("sapUiPagCurrentPage")){
			iNextIndex = iNextIndex + 1;
		}
		var oNextElement = aFocusableElements[iNextIndex];
		if (oNextElement){
			jQuery(oNextElement).focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
	//Left key pressed
	else if(sDirection == "previous" && aFocusableElements[iCurrentIndex-1]){
		var iNextIndex = iCurrentIndex - 1;
		var oNextElement = aFocusableElements[iNextIndex];
		if (oNextElement && jQuery(oNextElement).hasClass("sapUiPagCurrentPage")){
			oNextElement = aFocusableElements[iNextIndex - 1];
		}
		if (oNextElement){
			jQuery(oNextElement).focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}

};

/**
 * This function will handle the TAB key in the paginator (simple group)
 * @param {jQuery.Event} oEvent the browser event
 * @param {boolean} shiftKeyPressed Tabbing or shift-Tabbing
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerTabbingNavigation = function(oEvent,shiftKeyPressed){

	//Get all focusable elements
	var aFocusableElements = jQuery(jQuery.sap.domById(this.getId())).find(":focusable");

	//Tabbing --> Focus the last active element then let the browser focus the next active element
	if (!shiftKeyPressed){
		jQuery(aFocusableElements[aFocusableElements.length-1]).focus();
	}
	//Shift/Tab keys pressed --> Focus the 2nd active element then let the browser focus the first active element
	else{

		//Which elmement triggered the event
		var iCurrentIndex = jQuery(aFocusableElements).index(oEvent.target);

		//If the focus is already on the first active element, let the browser move the focus
		if (iCurrentIndex != 0){
			jQuery(aFocusableElements[0]).focus();
		}
	}
};
}; // end of sap.ui.commons.Paginator
if ( !jQuery.sap.isDeclared('sap.ui.commons.ApplicationHeaderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.ApplicationHeader
jQuery.sap.declare("sap.ui.commons.ApplicationHeaderRenderer");

/**
 * @class ApplicationHeader renderer.
 * @static
 */
sap.ui.commons.ApplicationHeaderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.render = function(oRenderManager, oAppHeader){

	if (!this.initializationDone){
		oAppHeader.initControls();
		oAppHeader.initializationDone = true;
	}

	var appHeaderId = oAppHeader.getId();

	//Write the HTML into the render manager
	oRenderManager.write("<header class=\"sapUiAppHdr\"");
	oRenderManager.writeControlData(oAppHeader);
	oRenderManager.write(">");

	//Welcome and logoff areas
	oRenderManager.write("<div id=\"" + appHeaderId + "-appHeaderWelcomeLogoffAreas\" class=\"sapUiAppHdrWelcomeLogoffArea\">");
	this.renderWelcomeAndLogoffAreas(oRenderManager, oAppHeader);
	oRenderManager.write("</div>"); //End welcome and logout areas

	//Logo area
	oRenderManager.write("<div id=\"" + appHeaderId + "-logoArea\" class=\"sapUiAppHdrLogo\">");
	this.renderLogoArea(oRenderManager,oAppHeader);
	oRenderManager.write("</div>");

	oRenderManager.write("</header>");

};

/**
 * Renders the HTML for the logo area (Logo src and text if any)
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.renderLogoArea = function(oRenderManager, oAppHeader){

	//Add the logo, but first set the source to the right path
	oAppHeader.getLogoSrc() != "" ? oAppHeader.oLogo.setSrc(oAppHeader.getLogoSrc()) : oAppHeader.oLogo.setSrc(sap.ui.resource("sap.ui.commons", "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/applicationheader/SAPLogo.png"));
	oRenderManager.renderControl(oAppHeader.oLogo);

	//Insert the logo text if any provided by application
	if (oAppHeader.getLogoText() != ""){
		oAppHeader.oLogoText.setText(oAppHeader.getLogoText());
		oAppHeader.oLogoText.setTooltip(oAppHeader.getLogoText());
		oRenderManager.renderControl(oAppHeader.oLogoText);
	}

};

/**
 * Renders the HTML for the welcome and logoff areas
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.renderWelcomeAndLogoffAreas = function(oRenderManager, oAppHeader){

	//Check if the Welcom text is requested
	if (oAppHeader.getDisplayWelcome()){

		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

		var padding = sap.ui.getCore().getConfiguration().getRTL() ? "padding-left" : "padding-right";

		//Add the user name if provided
		if (oAppHeader.getUserName() != ""){
			oRenderManager.write("<label class=\"sapUiLbl sapUiLblEmph\" style=\"text-align: left;\" dir=\"Inherit\" id=\"appHeaderLongTitle-welcomeLabel\">" +
								  rb.getText("APPHDR_WELCOME_USER") + ":</label>");
			oRenderManager.write("&nbsp;");
			oRenderManager.write("<label class=\"sapUiLbl\" style=\"text-align: left;" + padding + ":15px;\" dir=\"Inherit\" id=\"appHeaderLongTitle-welcomeLabel\">" +
								  oAppHeader.getUserName() + "</label>");
		}
		else{
			oRenderManager.write("<label class=\"sapUiLbl sapUiLblEmph\" style=\"text-align: left;" + padding + ":15px;\" dir=\"Inherit\" id=\"appHeaderLongTitle-welcomeLabel\">" +
								  rb.getText("APPHDR_WELCOME") + "</label>");
		}
	}

	//Logout area
	if (oAppHeader.getDisplayLogoff()){

		//Display the separator only when the welcome area is displayed as well
		if (oAppHeader.getDisplayWelcome()){
			oRenderManager.write("<span role=\"separator\" class=\"sapUiTbSeparator\"></span>");
		}
		oRenderManager.renderControl(oAppHeader.oLogoffBtn);
	}

};
}; // end of sap.ui.commons.ApplicationHeaderRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.DropdownBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.DropdownBox.
jQuery.sap.declare("sap.ui.commons.DropdownBox");



/**
 * Constructor for a new DropdownBox.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>searchHelpEnabled : boolean</li>
 * <li>searchHelpText : string</li>
 * <li>searchHelpAdditionalText : string</li>
 * <li>searchHelpIcon : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>searchHelp : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.ComboBox#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The control provides a field that allows end users to an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes or single list items.
 * Binding (see DataBinding) is also supported for list items.
 * @extends sap.ui.commons.ComboBox
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.DropdownBox = function (sId, mSettings) {
	sap.ui.commons.ComboBox.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.DropdownBox.prototype = jQuery.sap.newObject(sap.ui.commons.ComboBox.prototype);

/*
 * Describe the sap.ui.commons.DropdownBox. 
 * Resulting metadata can be obtained via sap.ui.commons.DropdownBox.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.DropdownBox", {

  // ---- object ----
  baseType : "sap.ui.commons.ComboBox",
  publicMethods : [
    // properties 
    "getSearchHelpEnabled", "setSearchHelpEnabled", "getSearchHelpText", "setSearchHelpText", "getSearchHelpAdditionalText", "setSearchHelpAdditionalText", "getSearchHelpIcon", "setSearchHelpIcon", 
    // aggregations
    
    // associations
    
    // events
    "attachSearchHelp", "detachSearchHelp"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "searchHelpEnabled" : {name : "searchHelpEnabled", type : "boolean", group : "Behavior", defaultValue : false},
    "searchHelpText" : {name : "searchHelpText", type : "string", group : "Appearance", defaultValue : null},
    "searchHelpAdditionalText" : {name : "searchHelpAdditionalText", type : "string", group : "Appearance", defaultValue : null},
    "searchHelpIcon" : {name : "searchHelpIcon", type : "string", group : "Appearance", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "searchHelp" : "searchHelp"
  }

});	

sap.ui.commons.DropdownBox.M_EVENTS = {'searchHelp':'searchHelp'};


/**
 * Getter for property <code>searchHelpEnabled</code>.
 * Whether the DropdownBox's search help should be enabled.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>searchHelpEnabled</code>
 * @public
 * 
 */
sap.ui.commons.DropdownBox.prototype.getSearchHelpEnabled = function() {
	return this.getProperty("searchHelpEnabled");
};

/**
 * Setter for property <code>searchHelpEnabled</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSearchHelpEnabled  new value for property <code>searchHelpEnabled</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpEnabled = function(bSearchHelpEnabled) {
	this.setProperty("searchHelpEnabled", bSearchHelpEnabled);
	return this;
};


/**
 * Getter for property <code>searchHelpText</code>.
 * (optional) The text to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchHelpText</code>
 * @public
 * 
 */
sap.ui.commons.DropdownBox.prototype.getSearchHelpText = function() {
	return this.getProperty("searchHelpText");
};

/**
 * Setter for property <code>searchHelpText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchHelpText  new value for property <code>searchHelpText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpText = function(sSearchHelpText) {
	this.setProperty("searchHelpText", sSearchHelpText);
	return this;
};


/**
 * Getter for property <code>searchHelpAdditionalText</code>.
 * (optional) The additional Text to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchHelpAdditionalText</code>
 * @public
 * 
 */
sap.ui.commons.DropdownBox.prototype.getSearchHelpAdditionalText = function() {
	return this.getProperty("searchHelpAdditionalText");
};

/**
 * Setter for property <code>searchHelpAdditionalText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchHelpAdditionalText  new value for property <code>searchHelpAdditionalText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpAdditionalText = function(sSearchHelpAdditionalText) {
	this.setProperty("searchHelpAdditionalText", sSearchHelpAdditionalText);
	return this;
};


/**
 * Getter for property <code>searchHelpIcon</code>.
 * (optional) The src of the icon to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchHelpIcon</code>
 * @public
 * 
 */
sap.ui.commons.DropdownBox.prototype.getSearchHelpIcon = function() {
	return this.getProperty("searchHelpIcon");
};

/**
 * Setter for property <code>searchHelpIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchHelpIcon  new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpIcon = function(sSearchHelpIcon) {
	this.setProperty("searchHelpIcon", sSearchHelpIcon);
	return this;
};


/**
 * Event fired whenever the configured searchHelpItem is clicked or the searchHelpItem is configured and F4 key is pressed. 
 *
 * @name sap.ui.commons.DropdownBox#searchHelp
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The current value of the DropdownBox.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'searchHelp' event of this <code>sap.ui.commons.DropdownBox</code>.<br/>
 * Event fired whenever the configured searchHelpItem is clicked or the searchHelpItem is configured and F4 key is pressed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.attachSearchHelp = function(oData, fnFunction, oListener) {
	this.attachEvent("searchHelp", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'searchHelp' event of this <code>sap.ui.commons.DropdownBox</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.detachSearchHelp = function(fnFunction, oListener) {
	this.detachEvent("searchHelp", fnFunction, oListener);
	return this;	
};

/**
 * Fire event searchHelp to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The current value of the DropdownBox.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.fireSearchHelp = function(mArguments) {
	this.fireEvent("searchHelp", mArguments);
	return this;
};


// Start of sap/ui/commons/DropdownBox.js
jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.SeparatorItem'); // unlisted dependency retained


/**
 * Initialization method.
 * @private
 */
sap.ui.commons.DropdownBox.prototype.init = function() {
	sap.ui.commons.ComboBox.prototype.init.apply(this, arguments);
	this._oValueBeforePaste = null;
	this._oValueBeforeOpen = null;
	this.__aItems = null;
	this._iCursorPosBeforeBackspace = null;
	/** {sap.ui.core.ListItem[]} Array of ListItems containing SearchHelp followed by Separator @private */
	this._searchHelpItem = null;
	this._iItemsForHistory = 10; // UX defined history shall appear if there are more than 10 items
};

/**
 * Cleanup instance.
 * @private
 */
sap.ui.commons.DropdownBox.prototype.exit = function() {
	var sIdPrefix = this.getId() + "-h-",i;
	// destroys searchHelpItems
	if ( this._searchHelpItem ) {
		this._searchHelpItem[0].destroy();
		this._searchHelpItem[1].destroy();
		this._searchHelpItem = null;
	}
	
	sap.ui.commons.ComboBox.prototype.exit.apply(this, arguments);
	// check for and remaining history items and destroy them
	function remove(id) {
	  var oItem = sap.ui.getCore().byId(sIdPrefix + i);
	  oItem && oItem.destroy();
	}
	for(var i = 0; i < 5; i++) {
	  remove(sIdPrefix+i);
	}
	remove(sIdPrefix+"separator");
};

/**
 * Ensure that handed in ListBoxes are taken from the visible UI immediately.
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onAfterRendering = function(oEvent){
	sap.ui.commons.ComboBox.prototype.onAfterRendering.apply(this, arguments);
	
	this.checkValueInItems();
};


//***********************************************************
//Mouse handling...
//***********************************************************

/**
 * Handle the click event happening in the DropdownBox
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onclick = function(oEvent) {
	// as a click in the input field requires selection update, do not handle click in this case
	if(oEvent.target !== this.getInputDomRef()) {
		return sap.ui.commons.ComboBox.prototype.onclick.apply(this, arguments);
	}
};

/**
 * Handle mouseup event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onmouseup = function(oEvent) {
	if(oEvent.target === this.getInputDomRef() && this.oPopup && this.oPopup.isOpen()) {
		jQuery.sap.delayedCall(0, this, "_updateSelection", [0]); // or let the cursor be positioned and update the selection
	} else {
		this._doSelect();
	}
};


//***********************************************************
//Keyboard handling...
//***********************************************************

/**
 * Handle sapshow pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapshow = function(oEvent){
	if(oEvent.which === jQuery.sap.KeyCodes.F4 && this._searchHelpItem){
		this._close();
		this.fireSearchHelp({value: jQuery(this.getInputDomRef()).val()});
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
		return;
	}
	if(this.oPopup && this.oPopup.isOpen()) {
		this._close();
	} else {
		this._open();
		var oLB = this._getListBox();
		oLB.scrollToIndex(oLB.getSelectedIndex());
		this._doSelect();
	}
	oEvent.preventDefault();
	oEvent.stopImmediatePropagation();
};

/**
 * Handle keydown event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeydown = function(oEvent) {
	if(!jQuery.browser.msie || oEvent.which !== jQuery.sap.KeyCodes.BACKSPACE) {
		return;
	}

	// Quite a trick to solve the issue with 'delete from last cursorPos' vs. 'delete last (proposed / auto-completed) character in IE
	this._iCursorPosBeforeBackspace = jQuery(this.getInputDomRef()).cursorPos();
};

/**
 * Handle paste event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onpaste = function(oEvent) {
	//prevent 'multiple-pastes' by e.g. holding down paste combination.
	if(this._oValueBeforePaste === null) {
		this._oValueBeforePaste = jQuery(this.getInputDomRef()).val();
	}
};

/**
 * Handle keyup event
 * This must only be considered if it is from Backspace-key in IE or after paste.
 * In case there is a keyup with a tab this results from being entered via tabbing and can be ignored, too.
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeyup = function(oEvent) {
	var iKC = oEvent.which,
		oKC = jQuery.sap.KeyCodes;

	// call keyup function of TextField to get liveChange event
	sap.ui.commons.TextField.prototype.onkeyup.apply(this, arguments);

	if(!(jQuery.browser.msie && iKC === oKC.BACKSPACE) && this._oValueBeforePaste === null || iKC === oKC.TAB) {
		return;
	}
	// it's either backspace in IE or after paste (cumulating potentially multiple pastes, too)

	// as it is keyboard interaction, open the proposal list (if not yet done)
	if(!this.oPopup || !this.oPopup.isOpen()){
		this._open();
	}
	var $Ref = jQuery(this.getInputDomRef()),
		bValid = false;
	// the first case (backspace-handling) could only be true in IE. For FF we do this (less 'tricky') in keypress handler
	if(iKC === oKC.BACKSPACE && this._iCursorPosBeforeBackspace !== null) {
		var iCursorPos = $Ref.cursorPos();
		if(this._iCursorPosBeforeBackspace !== iCursorPos) {
			iCursorPos++;
		} // 'normalize' cursor position for upcoming handling... especially IE8
		this._iCursorPosBeforeBackspace = null; // forget being called by backspace handling
		bValid = this._doTypeAhead($Ref.val().substr(0, iCursorPos-1), "");
	}
	// this must happen to check for valid entry after paste and if required -> rollback
	else if(!(bValid = this._doTypeAhead("", $Ref.val()))){
		$Ref.val(this._oValueBeforePaste);
	}
	// Ensure visibility as well as filtering and new height is applied
	if(bValid) {
		this._getListBox().rerender();
	}

	this._oValueBeforePaste = null;
};

/**
 * Handle pseudo event onsaphome
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsaphome = function(oEvent) {
	if(!this.oPopup || !this.oPopup.isOpen()) {
		this._updateSelection();
		oEvent.preventDefault();
	} else {
		sap.ui.commons.ComboBox.prototype.onsaphome.apply(this, arguments);
	}
};

/**
 * Handle pseudo event onsapdelete.
 * If triggered with open dropdown and current item provided by history feature,
 * removes the selected item from this instance's history.
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapdelete = function(oEvent) {
	if(!this.oPopup || !this.oPopup.isOpen()) {
		return;
	}
	var oLB = this._getListBox(),
		oItem = oLB.getSelectedItem(),
		aMatches = oItem.getId().match(/\-h\-([0-4])/),
		iIdx = oLB.getSelectedIndex();
	if(aMatches && aMatches.length === 2){
		this._aHistory.splice(iIdx,1);
		this._getStorage().put(this._getHistoryId(), this._aHistory);
		oLB.removeItem(iIdx);
		if(this._aHistory.length === 0) {// remove separator element, too
			oLB.removeItem(0);
		}
		oLB.rerender();
		var iNewIndex = iIdx + (this._searchHelpItem?2:0);
		if (iNewIndex == this._aHistory.length) {
			// seperator item can not selected
			iNewIndex++;
		}
		oLB.setSelectedIndex(iNewIndex);
		this.setValue(oLB.getSelectedItem().getText());
	}
};

/**
 * Handle keypress event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeypress = function(oEvent) {
	var iKC = oEvent.which,
		iKeyCode = oEvent.keyCode,
		oKC = jQuery.sap.KeyCodes;
	if(sap.ui.commons.ComboBox._isHotKey(oEvent) 
	      /*|| iKeyCode === oKC.DELETE*/ || iKeyCode === oKC.HOME ||
			iKeyCode === oKC.F4 && oEvent.which === 0 /*this is the Firefox case and ensures 's' with same charCode is accepted*/) {
		return;
	}else if(iKeyCode == oKC.ESCAPE){
		var sValue = this.getProperty("value");
		var oInput = this.getInputDomRef();
		if(oInput && oInput.value !== sValue) {
			jQuery(oInput).val(sValue);
		}
		return;
	}

	var oNewChar = String.fromCharCode(iKC),
		$Ref = jQuery(this.getInputDomRef()),
		iCursorPos = $Ref.cursorPos(),
		sVal = $Ref.val();
	//jQuery.sap.log.debug("current value is: " + sVal + " with cursorPos: " + iCursorPos + " and newChar is: " + oNewChar);

	if(!this.oPopup || !this.oPopup.isOpen()){
		this._open();
	}
	var bValid = false;
	if(iKC === oKC.BACKSPACE) {// only happens in FF or other non-IE-browsers. IE does not support BACKSPACE in keypress
		bValid = this._doTypeAhead(sVal.substr(0, iCursorPos-1), "");
	} else {
		bValid = this._doTypeAhead(sVal.substr(0, iCursorPos), oNewChar);
	}

	// Ensure visibility as well as filtering and new height is applied
	if(bValid) {
		this._getListBox().rerender();
	}

	oEvent.preventDefault();
};

/**
 * Move the cursor one step to the right (and adapt selection)
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapright = function(oEvent) {
	this._updateSelection(1);
	oEvent.preventDefault();
};

/**
 * Move the cursor one step to the left (and adapt selection)
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapleft = function(oEvent) {
	this._updateSelection(-1);
	oEvent.preventDefault();
};


//***********************************************************
// Focus handling...
//***********************************************************

/**
 * Handle focusin event
 * Ensures the text gets selected when focus gets into the field
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onfocusin = function(oEvent) {
	var $Ref = jQuery(this.getInputDomRef()),
		l = $Ref.val().length;
	if(l > 0){
		this._doSelect(0, l);
	}
};


//***********************************************************
// Text selection handling...
//***********************************************************

/**
 * Handle the select event happening in the DropdownBox
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onselect = function(oEvent) {
	if(this._bIgnoreSelect) {
		this._bIgnoreSelect = false;
		return;
	}

	var $Ref = jQuery(this.getInputDomRef()),
		iNewCursor = $Ref.cursorPos(),
		sVal = $Ref.val();
	if(sVal.length > 0) {
		this._doTypeAhead(sVal.substr(0,iNewCursor), "");
	}
	oEvent.preventDefault();
};

/**
 * Selects the text of the InputDomRef in the given range
 * @param {int} [iStart=0] start position of the text selection
 * @param {int} [iEnd=<length of text>] end position of the text selection
 * @return {sap.ui.commons.DropdownBox} this DropdownBox instance
 * @private
 */
sap.ui.commons.DropdownBox.prototype._doSelect = function(iStart, iEnd){
	this._bIgnoreSelect = true;
	var oDomRef = this.getInputDomRef(),
		$Ref = jQuery(oDomRef);
	// do not call focus in DropdownBox
	$Ref.selectText(iStart ? iStart : 0, iEnd ? iEnd : $Ref.val().length);
	return this;
};

/**
 * Adapt the selection to the cursor position and move the curser beforehand (if parameter iMoveBy is given)
 * @param {integer} iMoveBy the number of places the cursor should move (can be positive (move right) or negative (move left))
 * @private
 */
sap.ui.commons.DropdownBox.prototype._updateSelection = function(iMoveBy) {
	var $Ref = jQuery(this.getInputDomRef()),
		iNewCursor = $Ref.cursorPos() + (iMoveBy || 0),
		sVal = $Ref.val();
	this._doTypeAhead(sVal.substr(0,iNewCursor), "");
	this._getListBox().rerender();
};


//***********************************************************
// Type ahead and list box related
//***********************************************************

/**
 * Returns whether the new value is a valid one
 * @param {object} oValue the value before the event
 * @param {string} oNewChar the newly added character
 * @param {boolean} bNoFilter omit the filtering (e.g. when opening the listbox)
 * @returns {boolean} whether the new value is a valid one
 * @private
 */
sap.ui.commons.DropdownBox.prototype._doTypeAhead = function(oValue, oNewChar, bNoFilter){
	if(this.__doTypeAhead === true){
		return; // recursive from opening the Popup and the _prepareOpen-method
	}
	this.__doTypeAhead = true;

	var oLB = this._getListBox(),
		//oSelectedItem = oLB.getSelectedItem(),
		iMaxPopupItems = this.getMaxPopupItems(),
		aItems = this.__aItems || oLB.getItems(),
		iVisibleItemsCnt = aItems.length,
		// filtering and history only apply when more than a certain number of items is there
		bHistory = aItems.length > this._iItemsForHistory,
		bFilter = !bNoFilter && bHistory,
		oNewValue = oValue + oNewChar,
		rValFilter = RegExp("^" + oNewValue.toLowerCase() + ".*$"),
		iMove = oNewChar && oNewChar.length || 0,
		$Ref = jQuery(this.getInputDomRef());

	this.__aItems = aItems;

	var aCurrentItems,
		// identify items matching already entered value (for autocomplete, item selection)
		aFilteredItems = this._getFilteredItems(aItems, rValFilter),
		bValid = aFilteredItems.length > 0;
	
	if (bValid) {
		// in case we have to filter, only the matching subset of the current items (the configured set) is relevant for display
		if(bFilter) {
			aCurrentItems = aFilteredItems;
		}
		else {
			aCurrentItems = aItems.slice(0);
		}

		var aHistoryItems = [];
		if(bHistory) {
			aHistoryItems = this._addHistoryItems(aCurrentItems, bFilter && rValFilter);
			oLB.setItems(aCurrentItems);
			iVisibleItemsCnt = aCurrentItems.length;
		}
		oLB.setVisibleItems(iMaxPopupItems < iVisibleItemsCnt ? iMaxPopupItems : iVisibleItemsCnt);

		var oItem,
			iHistLength = aHistoryItems.length;
		// if there is no filter (e.g. when opening) but a history, try to find the current value in the history
		if(!bFilter && iHistLength > 0) {
			aHistoryItems = this._getFilteredItems(aHistoryItems, rValFilter);
			oItem = aHistoryItems[0];
		}
		// in case there is filtering in place, select the first (valid) item
		if(bFilter) {
			oItem = aFilteredItems[0];
		} else if(!oItem) {
			// in case there was no filtering and no valid item from history
			// select the first of the filtered non-history items
			if(aFilteredItems.length > 0) {
				oItem = aFilteredItems[0];
			}
			else {// or if nothing else worked out, the first of the available items
				oItem = aCurrentItems[0];
			}
		}
		// OK, we know what to select, let's insert search help if required
		var oSHI = this._searchHelpItem;
		if(oSHI){
			oLB.insertItem(oSHI[0], iHistLength++).insertItem(oSHI[1],iHistLength);
		}
		// find and select the item and update the text and the selection in the inputfield
		var i = oLB.indexOfItem(oItem),
			oText = oItem.getText();
		$Ref.val(oText);
		this._sTypedChars = oNewValue;
		this._doSelect(oValue.length + iMove, oText.length);

		oLB.setSelectedIndex(i);
		oLB.scrollToIndex(i);
	} else {
		// as this was no valid input shortly show some visual hint.
		$Ref = this.$();
		$Ref.addClass("sapUiTfErr");
		jQuery.sap.delayedCall(300, $Ref, "removeClass", ["sapUiTfErr"]);

		// however set the visible items
		oLB.setVisibleItems(iMaxPopupItems < iVisibleItemsCnt ? iMaxPopupItems : iVisibleItemsCnt);
	}
	this.__doTypeAhead = false;
	return bValid;
};

/**
 * Walks over the list of available items in the given oListBox and updates the visual selection.
 * Also updates the Popup to show the right content.
 *
 * @param {sap.ui.commons.ListBox} oListBox listBox belonging to this ComboBox instance.
 * @param {sap.ui.core.Popup} oPopup the instance of the Popup functionality used for opening the proposal list
 * @returns {sap.ui.commons.DropdownBox}
 * @private
 */
sap.ui.commons.DropdownBox.prototype._prepareOpen = function(oListBox, oPopup){
	this._oValueBeforeOpen = this.$().val();
	this._doTypeAhead("", jQuery(this.getInputDomRef()).val(), true);
	return this;
};

/**
 * Ensures the given listbox is 'cleaned-up'.
 * @param {sap.ui.commons.ListBox} oListBox the listBox to clean up
 * @returns {sap.ui.commons.DropdownBox} this instance of DropdownBox
 * @private
 */
sap.ui.commons.DropdownBox.prototype._cleanupClose = function(oListBox){
	if(this.__aItems) {
		oListBox.setItems(this.__aItems);
		this.__aItems = undefined;
	}
	this._oValueBeforeOpen = null;
	return this;
};

/**
 * Returns an array of ListItems matching given rValFilter.
 *
 * @param {sap.ui.core.ListItem[]} aItems array of list items to be filtered
 * @param {RegExp} rValFilter filter expression that can be used to identify valid items
 * @returns {sap.ui.core.ListItem[]} array of list items matching given rValFilter
 * @private
 */
sap.ui.commons.DropdownBox.prototype._getFilteredItems = function(aItems, rValFilter){
	var aTmpItems = aItems.slice(0),
		oItem;
	for (var i = aTmpItems.length - 1; i >= 0; i--){
		oItem = aTmpItems[i];
		if(!rValFilter.test(oItem.getText().toLowerCase()) || !oItem.getEnabled()) {
			aTmpItems.splice(i,1);
		}
	}
	return aTmpItems;
};

/**
 * Enriches provided array of listitems with history if history entries matching given rFilter exist.
 *
 * @param {sap.ui.core.ListItem[]} aItems array of list items to be enriched by history
 * @param {RegExp} rFilter filter expression that can be used to identify valid history items
 * @returns {sap.ui.core.ListItem[]} array of new 'history-list-items' (comprising separator)
 * @private
 */
sap.ui.commons.DropdownBox.prototype._addHistoryItems = function(aItems, rFilter) {
	var sIdPrefix = this.getId() + "-h-",
		oItem,
		aHistory = this._doHistory(),
		l = aHistory.length,
		aNewItems = [];
	// add items from history still matching given set of items
	for(var i = 0; i < 5 && i < l; i++){
		oItem = (oItem = sap.ui.getCore().byId(sIdPrefix + i)) && oItem.setText(aHistory[i]) || new sap.ui.core.ListItem(sIdPrefix + i, {text: aHistory[i]});
		if(!rFilter || rFilter.test(oItem.getText())) {
			aNewItems.push(oItem);
		}
	}
	if(aNewItems.length > 0) {
		var sSepId = sIdPrefix + "separator",
			oSeparator = this._getSeparator(sSepId);
		aNewItems.push(oSeparator);
	}
	aItems.unshift.apply(aItems, aNewItems);
	return aNewItems;
};

/**
 * Returns the separator instance for this DropdownBox.
 * If sSepId is given, this id will be used to either find or create the Separator.
 * If sSepId is omitted, only previously found separator will be returned but no new Separator would be created.
 *
 * @param {sap.ui.core/string} [sSepId] id of the separator to find or create. If omitted, only previously found separator will be returned.
 * @returns {sap.ui.core.SeparatorItem} separator item if found or created or null.
 */
sap.ui.commons.DropdownBox.prototype._getSeparator = function(sSepId){
	if(!this.__oSeparator && sSepId){
		this.__oSeparator = sap.ui.getCore().byId(sSepId) || new sap.ui.core.SeparatorItem(sSepId);
	}
	return this.__oSeparator || null;
};


//***************************************************
// Overwritten methods from API
//***************************************************

/* overwrite standard generated fireChange method */
sap.ui.commons.DropdownBox.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	if(mArguments.newValue){
		this._doHistory(mArguments.newValue);
	}

	return this;
};

/* overrides generated setValue-method */
sap.ui.commons.DropdownBox.prototype.setValue = function(sValue) {
	// normalize 'empty'  values
	sValue = (sValue === undefined || sValue === null || sValue === "") ? "" : sValue;
	var aItems = this.getItems(),
		oText,
		bValueOK = sValue === ""; //in case this is empty, reset the DropdownBox... TODO: But is this expected behavior?

	// it might be necessary to also check for history... but as this should only contain valid entries, don't worry.
	for (var i = 0, l = aItems.length; i < l && !bValueOK; i++){
		oText = aItems[i].getText();
		bValueOK = oText === sValue;
	}

	// only set the value in case the given one is valid
	if(bValueOK) {
		sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue);
	}

	return this;
};


//***********************************************************
//Focus information handling and rendering related
//***********************************************************

/**
 * Applies the focus info and ensures the typeAhead feature is re-established again.
 *
 * @param {object} oFocusInfo the focus information belonging to this dropdown
 * @private
 */
sap.ui.commons.DropdownBox.prototype.applyFocusInfo = function(oFocusInfo){
 var $Inp = jQuery(this.getInputDomRef());
 if(jQuery.sap.startsWithIgnoreCase(this.getValue(), oFocusInfo.sTypedChars)) {
	 $Inp.val(oFocusInfo.sTypedChars);
	 this.focus();
	 this._doTypeAhead(oFocusInfo.sTypedChars, "");
 } else {
	 oFocusInfo.sTypedChars = "";
//	 $Inp.val(this.getValue()); // enable if really needed
	 this.focus();
	 this._doSelect();
 }
 return this;
};

/**
 * Extends the method inherited from sap.ui.core.Element by providing information on Search Help access (if needed)
 *
 * @return {string} string tooltip or undefined
 * @public
 */
sap.ui.commons.DropdownBox.prototype.getTooltip_AsString = function() {
	var sTooltipString = sap.ui.commons.ComboBox.prototype.getTooltip_AsString.apply(this, arguments);
	if(!this._searchHelpItem) {
		return sTooltipString;
	} else {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		// ResourceBundle always returns the key if the text is not found
		var sSearchHelp = rb.getText("DDBX_SHI_ARIA");
		sSearchHelp = sSearchHelp === "DDBX_SHI_ARIA"?"Open search help via {0}":sSearchHelp;
		var sAdditionalText = this._searchHelpItem[0] && this._searchHelpItem[0].getAdditionalText() || rb.getText("DDBX_SHIF4");
		sAdditionalText = sAdditionalText === "DDBX_SHIF4"?"F4":sAdditionalText;
		sSearchHelp = sSearchHelp.replace("{0}", sAdditionalText);
		return (sTooltipString?sTooltipString + " - ":"") + sSearchHelp;
	}
};


//***************************************************
// Handling of list events
//***************************************************

/**
 * This method is attached to the ListBox instance when it is open
 * to handle the click event occurring in the ListBox.
 * It additionally closes the Popup.
 * If clicked on SearchHelp entry triggers the appropriate handling
 *
 * @param {sap.ui.base.Event} oControlEvent The event that was raised by the Listbox
 * @private
 */
sap.ui.commons.DropdownBox.prototype._handleSelect = function(oControlEvent) {
	if(this._searchHelpItem && oControlEvent.getParameter("selectedItem") === this._searchHelpItem[0]){
		var oEvent = jQuery.Event("sapshow");
		oEvent.which = jQuery.sap.KeyCodes.F4;
		this.onsapshow(oEvent);
	} else {
		// if history item is selected search for corresponding real item in list
		var oItem = oControlEvent.getParameter("selectedItem");
		if(!oItem){
			// not from ListBox, from ComboBox _open
			oItem = sap.ui.getCore().byId(oControlEvent.getParameter("selectedId"));
		}
		if (oItem.getId().search(this.getId() + "-h-") != -1) {
			// history item selected
			var oLB = this._getListBox(),
				aItems = oLB.getItems();
			for ( var iIndex = this._aHistory.length; iIndex < aItems.length; iIndex++) {
				if (aItems[iIndex].getText() == oItem.getText()) {
					// Item found -> set in event data
					oControlEvent.mParameters.selectedIndex = iIndex;
					if(!oControlEvent.getParameter("selectedIndices")){
						//create arrays
						oControlEvent.mParameters.selectedIndices = new Array(1);
						oControlEvent.mParameters.aSelectedIndices = new Array(1);
					}
					oControlEvent.mParameters.selectedIndices[0] = iIndex;
					oControlEvent.mParameters.aSelectedIndices[0] = iIndex;
					oControlEvent.mParameters.selectedItem = aItems[iIndex];
					break;
				}
			}
		}
		
		return sap.ui.commons.ComboBox.prototype._handleSelect.apply(this, arguments);
	}
};


//***************************************************
// History and Storage related
//***************************************************

/**
 * Handles the history feature of this DropdownBox.
 * Initializes the history of this instance (if not yet done) and if a new value <code>sValue</code> is given
 * the latter one is added to the list of history entries.
 *
 * @param {string} [sValue] the new value to add to this instance's history or null if only history initialization should be done
 * @returns {Array} the value history
 * @private
 */
sap.ui.commons.DropdownBox.prototype._doHistory = function(sValue) {
	var sHistoryId = this._getHistoryId();

	var aHistory = this._aHistory;
	var oStorage = this._getStorage();
	if(!aHistory) {
		// try to get the history from the local storage
		aHistory = oStorage.get(sHistoryId);
		if(typeof(aHistory) === "string") {
			// in case it is a string, convert it to an array
			aHistory = aHistory.split(",");
		} else if(!aHistory){
			// or create a new one in case of non existence
			aHistory = [];
		} // else assume that there is the means for serializing JSON used, returning an array directly
		this._aHistory = aHistory;

		// it is necessary to check for valid history here (i.e. all history entries still in list of items)
		var oItemMap = {},
			aItems = this.getItems();
		// ensure performance -> O(n)... short-cut knowledge about existing item texts
		for(var i = 0, l = aItems.length; i<l;i++){
			oItemMap[aItems[i].getText()] = true;
		}
		// now, check every entry in history -> O(m) and 'random access' into previously created map
		for(var i = aHistory.length -1; i >= 0; i--){
			if(!oItemMap[aHistory[i]]) {
				aHistory.splice(i,1);
			}
		}
	}

	// if there is a value to add
	if(sValue){
		for (var i = 0, l = aHistory.length; i <l; i++) {
			if(aHistory[i] === sValue){
				// ensure it is not contained twice -> remove
				aHistory.splice(i,1);
				break;
			}
		}
		// and put it to the 'very top'
		aHistory.unshift(sValue);
		// but do not store more than specified
		if(aHistory.length > 5) {
			aHistory.splice(5);
		}

		oStorage.put(sHistoryId, aHistory);
	}
	return aHistory;
};

/**
 * Returns a prefixed id for storing this instance's value history.
 * @returns
 * @private
 */
sap.ui.commons.DropdownBox.prototype._getHistoryId = function() {
//	return this.getId();// TODO: Should this also comprise the URL or other information?
	if(!this._sHistPrefix) {
		this._sHistPrefix = document.location.pathname;
	} // path is sufficient as host should be ensured by browser's security means
	return this._sHistPrefix + this.getId();
};

/**
 * Returns the storage helper used for this instance
 * @returns {jQuery.sap.storage} the storage helper used for this instance
 * @private
 */
sap.ui.commons.DropdownBox.prototype._getStorage = function() {
	if(!this._oStorage){
		this._oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);
//		this._oStorage = jQuery.sap.storage;
	}
	return this._oStorage;
};


//***************************************************
// API method implementation
//***************************************************

/**
 * Overwrite of Setter for property <code>searchHelpEnabled</code>.
 * This method accepts additional parameter to be compatiple with the
 * previous functionality
 *
 * Default value is <code>false</code>
 *
 * @param {boolean} bEnabled new value for property <code>searchHelpEnabled</code>
 * @param {string} sText new value for property <code>searchHelpText</code>
 * @param {string} sAdditionalText new value for property <code>searchHelpAdditionalText</code>
 * @param {string} sIcon new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpEnabled = function(bEnabled, sText, sAdditionalText, sIcon) {

	this.setProperty("searchHelpEnabled", bEnabled);
	
	// set additional optional properties
	if (sText) {
		this.setProperty("searchHelpText", sText);		
	}else{
		sText = this.getSearchHelpText();
	}
	if (sAdditionalText) {
		this.setProperty("searchHelpAdditionalText", sAdditionalText);		
	}else{
		sAdditionalText = this.getSearchHelpAdditionalText();
	}
	if (sIcon) {
		this.setProperty("searchHelpIcon", sIcon);		
	}else{
		sIcon = this.getSearchHelpIcon();
	}
	
	if(bEnabled) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		if ( rb ) {
			// ResourceBundle always returns the key if the text is not found
			sText = sText || rb.getText("DDBX_SHI");
			sText = sText === "DDBX_SHI"?"Search Help":sText;
			sAdditionalText = sAdditionalText || rb.getText("DDBX_SHIF4");
			sAdditionalText = sAdditionalText === "DDBX_SHIF4"?"F4":sAdditionalText;
		}
		sIcon = sIcon || sap.ui.resource("sap.ui.commons", "img/dropdown/ico12_f4.gif");
		if(!this._searchHelpItem) {
			this._searchHelpItem = [new sap.ui.core.ListItem(this.getId() + "_shi", {
				text: sText,
				additionalText: sAdditionalText,
				enabled: true,
				icon: sIcon
				}),
				new sap.ui.core.SeparatorItem()];
		} else {
			this._searchHelpItem[0].setText(sText).setAdditionalText(sAdditionalText).setIcon(sIcon);
		}
	} else {
		if ( this._searchHelpItem ) {
			this._searchHelpItem[0].destroy();
			this._searchHelpItem[1].destroy();
			this._searchHelpItem = null;
		}
	}
	
	return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpText new value for property <code>searchHelpText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpText = function(sSearchHelpText) {
 this.setProperty("searchHelpText", sSearchHelpText);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), sSearchHelpText, this.getSearchHelpAdditionalText(), this.getSearchHelpIcon());

 return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpAdditionalText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpAdditionalText new value for property <code>searchHelpAdditionalText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpAdditionalText = function(sSearchHelpAdditionalText) {
 this.setProperty("searchHelpAdditionalText", sSearchHelpAdditionalText);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), sSearchHelpAdditionalText, this.getSearchHelpIcon());

 return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpIcon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpIcon new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpIcon = function(sSearchHelpIcon) {
 this.setProperty("searchHelpIcon", sSearchHelpIcon);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), this.getSearchHelpAdditionalText(), sSearchHelpIcon);

 return this;
};

/**
 * Check if value fits to items. If not, set to first item
 * @private
 */
sap.ui.commons.DropdownBox.prototype.checkValueInItems = function() {

	var sValue = this.getValue();
	var aItems = this.getItems();
	
	// only check the value in the items when items are available
	// TODO: reset the value?
	if (aItems && aItems.length > 0) {
	
		var bValueOK = false; 
	
		for (var i = 0, l = aItems.length; i < l && !bValueOK; i++){
			bValueOK = aItems[i].getText() === sValue;
		}
	
		if(!bValueOK) {
			sValue = aItems[0].getText();
			sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue);
		}
		
	}
	
	return sValue;
	
}; 
}; // end of sap.ui.commons.DropdownBox
if ( !jQuery.sap.isDeclared('sap.ui.commons.Tab') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Tab.
jQuery.sap.declare("sap.ui.commons.Tab");



/**
 * Constructor for a new Tab.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>verticalScrolling : sap.ui.core.Scrolling</li>
 * <li>horizontalScrolling : sap.ui.core.Scrolling</li>
 * <li>closable : boolean</li>
 * <li>selected : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.Panel#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A single page in a TabStrip control.
 * @extends sap.ui.commons.Panel
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Tab = function (sId, mSettings) {
	sap.ui.commons.Panel.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Tab.prototype = jQuery.sap.newObject(sap.ui.commons.Panel.prototype);

/*
 * Describe the sap.ui.commons.Tab. 
 * Resulting metadata can be obtained via sap.ui.commons.Tab.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Tab", {

  // ---- object ----
  baseType : "sap.ui.commons.Panel",
  publicMethods : [
    // properties 
    "getVerticalScrolling", "setVerticalScrolling", "getHorizontalScrolling", "setHorizontalScrolling", "getClosable", "setClosable", "getSelected", "setSelected"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "verticalScrolling" : {name : "verticalScrolling", type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.None},
    "horizontalScrolling" : {name : "horizontalScrolling", type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.None},
    "closable" : {name : "closable", type : "boolean", group : "Misc", defaultValue : false},
    "selected" : {name : "selected", type : "boolean", group : "Behavior", defaultValue : false}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>verticalScrolling</code>.
 * Set the height property.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>verticalScrolling</code>
 * @public
 * 
 */
sap.ui.commons.Tab.prototype.getVerticalScrolling = function() {
	return this.getProperty("verticalScrolling");
};

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.Scrolling} oVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setVerticalScrolling = function(oVerticalScrolling) {
	this.setProperty("verticalScrolling", oVerticalScrolling);
	return this;
};


/**
 * Getter for property <code>horizontalScrolling</code>.
 * Set the width property.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>horizontalScrolling</code>
 * @public
 * 
 */
sap.ui.commons.Tab.prototype.getHorizontalScrolling = function() {
	return this.getProperty("horizontalScrolling");
};

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.Scrolling} oHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setHorizontalScrolling = function(oHorizontalScrolling) {
	this.setProperty("horizontalScrolling", oHorizontalScrolling);
	return this;
};


/**
 * Getter for property <code>closable</code>.
 * Defines whether the tab contains a close button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>closable</code>
 * @public
 * 
 */
sap.ui.commons.Tab.prototype.getClosable = function() {
	return this.getProperty("closable");
};

/**
 * Setter for property <code>closable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bClosable  new value for property <code>closable</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setClosable = function(bClosable) {
	this.setProperty("closable", bClosable);
	return this;
};


/**
 * Getter for property <code>selected</code>.
 * Defines whether the tab is the active one.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 * @deprecated Since version 0.17.0. 
 * This property is not used. To indentify the selected tab in a TabStrip selectedIndex is used.
 */
sap.ui.commons.Tab.prototype.getSelected = function() {
	jQuery.sap.log.warning("Using deprecated property 'selected'.");
	return this.getProperty("selected");
};

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.17.0. 
 * This property is not used. To indentify the selected tab in a TabStrip selectedIndex is used.
 */
sap.ui.commons.Tab.prototype.setSelected = function(bSelected) {
	jQuery.sap.log.warning("Using deprecated property 'selected'.");
	this.setProperty("selected", bSelected);
	return this;
};


// Start of sap/ui/commons/Tab.js
/**
 * Initialize the Tab
 * @private
 */
sap.ui.commons.Tab.prototype.init = function() {
	// Setting this to role Tabpanel instead of its container basically worked.
	// However, the role is set one level higher to get better output in screen reader.

	this.oScrollDomRef = null;      // Points to the content area
};

sap.ui.commons.Tab.prototype.rerender = function() {
	// as Tab has no own renderer call renderer of TabStrip
	this.getParent().rerender();
};

/**
 * Called after rendering from the TabStrip control
 */
sap.ui.commons.Tab.prototype.onAfterRendering = function () {
	this.oScrollDomRef = jQuery.sap.domById(this.getId() + "-panel");

	// Restore scroll positions
	if (this.oScrollDomRef) {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > 0) {
			this.oScrollDomRef.scrollTop = scrollTop;
		}
		var scrollLeft = this.getProperty("scrollLeft");
		if (scrollLeft > 0) {
			this.oScrollDomRef.scrollLeft = scrollLeft;
		}
	}

	// TODO: this must also be done for tabs where the contents are not rendered initially
};

/**
 * Returns the scroll position of the tab in pixel from the left. Returns "0" if not rendered yet.
 * Also updates the control property internally.
 *
 * @return The scroll position
 * @public
 */
sap.ui.commons.Tab.prototype.getScrollLeft = function () {
	var scrollLeft = 0;
	if (this.oScrollDomRef) {
		scrollLeft = this.oScrollDomRef.scrollLeft;
		this.setProperty("scrollLeft", scrollLeft, true);
	}

	return scrollLeft;
};

/**
 * Sets the scroll position of the tab in pixel from the left.
 * @param {int} iPosition The position to scroll to
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setScrollLeft = function (iPosition) {
	this.setProperty("scrollLeft", iPosition, true);
	if (this.oScrollDomRef) {                        // TODO: what if called before rendering?
		this.bIgnoreScrollEvent = true;
		this.oScrollDomRef.scrollLeft = iPosition;
	}
	return this;
};

/**
 * Returns the scroll position of the tab in pixel from the top. Returns "0" if not rendered yet.
 * Also updates the control property internally.
 *
 * @return The scroll position
 * @public
 */
sap.ui.commons.Tab.prototype.getScrollTop = function () {
	var scrollTop = 0;
	if (this.oScrollDomRef) {
		scrollTop = this.oScrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
	}

	return scrollTop;
};

/**
 * Sets the scroll position of the tab in pixel from the top.
 * @param {int} iPosition The position to scroll to
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setScrollTop = function (iPosition) {
	this.setProperty("scrollTop", iPosition, true);
	if (this.oScrollDomRef) {                       // TODO: what if called before rendering?
		this.bIgnoreScrollEvent = true;
		this.oScrollDomRef.scrollTop = iPosition;
	}
	return this;
};

/**
 * Property setter for the "enabled" state (overwrite method from panel)
 *
 * @param bEnabled whether the tab should be enabled or not
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled, true); // no re-rendering!
	// if already rendered, adapt rendered control without complete re-rendering
	jQuery(this.getDomRef()).toggleClass("sapUiTab", bEnabled).toggleClass("sapUiTabDsbl", !bEnabled).attr("aria-disabled",!bEnabled);
	return this;
};

/**
 * Setter of the width property. As it has no effect on a tab and is
 * only inherited from panel, noting to do. Just overwrite panel implementation
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setWidth = function (sWidth) {
	this.setProperty("width", sWidth, true); // don't rerender
	// do nothing
	return this;
};

/**
 * Property setter for the padding.As it has no effect on a tab and is
 * only inherited from panel, noting to do. Just overwrite panel implementation
 *
 * @param bPadding whether the Panel should have padding
 * @returns {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setApplyContentPadding = function(bPadding) {
	this.setProperty("applyContentPadding", bPadding, true); // no re-rendering!
	// do nothing
	return this;
};
}; // end of sap.ui.commons.Tab
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.SearchProvider.
jQuery.sap.declare("sap.ui.commons.SearchProvider");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new SearchProvider.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>suggestUrl : string</li>
 * <li>suggestType : string</li>
 * <li>icon : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A SearchProvider which can be attached to a Search Field.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.SearchProvider = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.SearchProvider.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.SearchProvider. 
 * Resulting metadata can be obtained via sap.ui.commons.SearchProvider.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.SearchProvider", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getSuggestUrl", "setSuggestUrl", "getSuggestType", "setSuggestType", "getIcon", "setIcon"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "suggestUrl" : {name : "suggestUrl", type : "string", group : "Misc", defaultValue : null},
    "suggestType" : {name : "suggestType", type : "string", group : "Misc", defaultValue : 'json'},
    "icon" : {name : "icon", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>suggestUrl</code>.
 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>suggestUrl</code>
 * @public
 * 
 */
sap.ui.commons.SearchProvider.prototype.getSuggestUrl = function() {
	return this.getProperty("suggestUrl");
};

/**
 * Setter for property <code>suggestUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSuggestUrl  new value for property <code>suggestUrl</code>
 * @return {sap.ui.commons.SearchProvider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchProvider.prototype.setSuggestUrl = function(sSuggestUrl) {
	this.setProperty("suggestUrl", sSuggestUrl);
	return this;
};


/**
 * Getter for property <code>suggestType</code>.
 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
 *
 * Default value is <code>json</code>
 *
 * @return {string} the value of property <code>suggestType</code>
 * @public
 * 
 */
sap.ui.commons.SearchProvider.prototype.getSuggestType = function() {
	return this.getProperty("suggestType");
};

/**
 * Setter for property <code>suggestType</code>.
 *
 * Default value is <code>json</code> 
 *
 * @param {string} sSuggestType  new value for property <code>suggestType</code>
 * @return {sap.ui.commons.SearchProvider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchProvider.prototype.setSuggestType = function(sSuggestType) {
	this.setProperty("suggestType", sSuggestType);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * Icon of the Search Provider
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.SearchProvider.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.SearchProvider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchProvider.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


// Start of sap/ui/commons/SearchProvider.js
jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained


/**
 * Called by the search field, when suggestions are requested.
 *
 * @private
 */
sap.ui.commons.SearchProvider.prototype._doSuggest = function(oSearchField, sSuggestValue) {
	var sUrl = this.getSuggestUrl();
	if(!sUrl) {
		return;
	}
	sUrl = sUrl.replace("{searchTerms}", jQuery.sap.encodeURL(sSuggestValue));

	var sType = this.getSuggestType();
	var fSuccess;
	if(sType && sType.toLowerCase() === "xml"){
		//Docu: http://msdn.microsoft.com/en-us/library/cc891508%28v=vs.85%29.aspx
		sType = "xml";
		fSuccess = function(data){
			var jXMLDocument = jQuery(data);
			var jItems = jXMLDocument.find("Text");
			var aSuggestions = [];
			jItems.each(function(){
				aSuggestions.push(jQuery(this).text());
			});
			oSearchField.suggest(sSuggestValue, aSuggestions);
		};
	}else{
		//Docu: http://www.opensearch.org/Specifications/OpenSearch/Extensions/Suggestions/1.1#Response_format
		sType = "json";
		fSuccess = function(data){
			oSearchField.suggest(sSuggestValue, data[1]);
		};
	}
	
	jQuery.ajax({
		url: sUrl,
		dataType: sType,
		success: fSuccess,
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status);
		}
	});
};

}; // end of sap.ui.commons.SearchProvider
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageBar.
jQuery.sap.declare("sap.ui.commons.MessageBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new MessageBar.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>anchorID : string</li>
 * <li>visible : boolean</li>
 * <li>maxToasted : int</li>
 * <li>maxListed : int</li>
 * <li>anchorSnapPoint : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Creates an instance of a "MessageBar" Control, for displaying "Message"s.
 * There is no imposed limit on the number of "MessageBar"s that can be created, but using only 1 makes sense, specially if accessing it (via Ctl-m) becomes a necessity.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MessageBar = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MessageBar.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.MessageBar. 
 * Resulting metadata can be obtained via sap.ui.commons.MessageBar.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MessageBar", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getAnchorID", "setAnchorID", "getVisible", "setVisible", "getMaxToasted", "setMaxToasted", "getMaxListed", "setMaxListed", "getAnchorSnapPoint", "setAnchorSnapPoint", 
    // aggregations
    
    // associations
    
    // events
    
    // methods
    "addMessages", "deleteMessages", "deleteAllMessages"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "anchorID" : {name : "anchorID", type : "string", group : "Appearance", defaultValue : ''},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "maxToasted" : {name : "maxToasted", type : "int", group : "Misc", defaultValue : 3},
    "maxListed" : {name : "maxListed", type : "int", group : "Misc", defaultValue : 7},
    "anchorSnapPoint" : {name : "anchorSnapPoint", type : "string", group : "Misc", defaultValue : "begin top"}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>anchorID</code>.
 * Element ID upon which the 'message bar' is to be initially positioned.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorID</code>
 * @public
 * 
 */
sap.ui.commons.MessageBar.prototype.getAnchorID = function() {
	return this.getProperty("anchorID");
};

/**
 * Setter for property <code>anchorID</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorID  new value for property <code>anchorID</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setAnchorID = function(sAnchorID) {
	this.setProperty("anchorID", sAnchorID);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.MessageBar.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>maxToasted</code>.
 * Maximum number of simultaneous messages being toasting-up in a row. Value '0' means this dynamic part of the feature is switched off.
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>maxToasted</code>
 * @public
 * 
 */
sap.ui.commons.MessageBar.prototype.getMaxToasted = function() {
	return this.getProperty("maxToasted");
};

/**
 * Setter for property <code>maxToasted</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iMaxToasted  new value for property <code>maxToasted</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setMaxToasted = function(iMaxToasted) {
	this.setProperty("maxToasted", iMaxToasted);
	return this;
};


/**
 * Getter for property <code>maxListed</code>.
 * Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.
 *
 * Default value is <code>7</code>
 *
 * @return {int} the value of property <code>maxListed</code>
 * @public
 * 
 */
sap.ui.commons.MessageBar.prototype.getMaxListed = function() {
	return this.getProperty("maxListed");
};

/**
 * Setter for property <code>maxListed</code>.
 *
 * Default value is <code>7</code> 
 *
 * @param {int} iMaxListed  new value for property <code>maxListed</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setMaxListed = function(iMaxListed) {
	this.setProperty("maxListed", iMaxListed);
	return this;
};


/**
 * Getter for property <code>anchorSnapPoint</code>.
 * Type: sap.ui.core.Popup.Dock
 * SnapPoint of MessageBar over anchorId.
 * Note: Use "begin" or "end" for RTL support.
 * Note: "center" is not indicated, as positioning is only set once, either via the css "left" or the "right" attribute. Therefore a MessageBar will only be extended in one direction, as Messages come in.
 *
 * Default value is <code>"begin top"</code>
 *
 * @return {string} the value of property <code>anchorSnapPoint</code>
 * @public
 * 
 */
sap.ui.commons.MessageBar.prototype.getAnchorSnapPoint = function() {
	return this.getProperty("anchorSnapPoint");
};

/**
 * Setter for property <code>anchorSnapPoint</code>.
 *
 * Default value is <code>"begin top"</code> 
 *
 * @param {string} sAnchorSnapPoint  new value for property <code>anchorSnapPoint</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setAnchorSnapPoint = function(sAnchorSnapPoint) {
	this.setProperty("anchorSnapPoint", sAnchorSnapPoint);
	return this;
};


/**
 * To add message(s).
 *
 * @name sap.ui.commons.MessageBar.prototype.addMessages
 * @function
 * @param {sap.ui.commons.Message[]} 
 *         aAMessages
 *         Array of messages.

 * @type void
 * @public
 */


/**
 * To deleted messages.
 *
 * @name sap.ui.commons.MessageBar.prototype.deleteMessages
 * @function
 * @param {string[]} 
 *         aIds
 *         Messages IDs to be deleted.

 * @type void
 * @public
 */


/**
 * To deleted all messages.
 *
 * @name sap.ui.commons.MessageBar.prototype.deleteAllMessages
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/MessageBar.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.ui.commons.MessageBar.prototype.init = function(){
	// Defining some private data...

	// Message queues, in priority order:
	this.aErrors    = []; // Error queue.
	this.aWarnings  = []; // Warning queue.
	this.aSuccesses = []; // Success queue.
	// Toasting queue:
	this.aToasts    = [];
	this.maxToastsReached = false; // Disables Toast queue.

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - oModal: "true/false" : For blocking the background window.
	this.oPopup   = new sap.ui.core.Popup(this, false, true, false);

	// The different related Controls.
	this.oList    = null; // Created only if opened by user.
	// MessageBar does not come without Toasts:
	var id        = this.getId();
	this.oToast   = new sap.ui.commons.MessageToast(id+"__Toast", {anchorId:id+"__sums"});
	var that      = this; // For closure
	this.oToast.attachNext(function(){that.checkForToast();});

	// Drag&Drop data. Only evaluated if needed:
	this.snapPoint = null;
	this.oHomePosition = null;
	this.oDropPosition = null;
	this.bToggleListBackAfterDrag = null;
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageBar.prototype.exit = function() {
	// If this happens during a Drag, forcing a Drop
	// in order to remove any bound handlers:
	this.onmouseup();

	// Closing and destroying everything:
	this.close();

	this.oPopup.destroy();
	this.oPopup = null;

	this.oToast.destroy();
	this.oToast = null;

	if (this.oList) {
		this.oList.destroy();
		this.oList = null;
	}
};

// **************************************************
// * Drag&Drop // Copied from Dialog and ColumnDnDManager...
// **************************************************
/**
* Overwrites the native D&D, not to see the native ghost.
* @param {sap.ui.core.BrowserEvent} oEvent The forwarded browser event
* @private
*/
sap.ui.commons.MessageBar.prototype.ondragstart = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Initializes drag and drop capabilities.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onmousedown = function (oEvent) {
//jQuery.sap.log.debug("MESSAGEBAR: ONMOUSEDOWN");
	var oSource  = oEvent.target;
	var jSource = jQuery(oSource);

	// If cursor does not say move, then do not bother.
	if (jSource.css('cursor') != "move") {
		return;
	}

	this.sDragMode = "move";


  // MessageBar start position:
	this.oMsgBarDragStartPosition       = this.$().rect();
	this.oMsgBarDragStartPosition.right = Number(this.$().css('right').replace("px", ""));

	// Recording our home position, in order to return to it on demand:
	if (!this.oHomePosition) {
		this.oHomePosition = this.oMsgBarDragStartPosition;
	}

	// To evaluate the extend of the drag:
	this.mouseDragStartPositionX = oEvent.screenX;
	this.mouseDragStartPositionY = oEvent.screenY;

	// Activating our move handler:
	var jDocument = jQuery(window.document);
	jDocument.bind("mousemove", jQuery.proxy(this.handleMove, this));
	if(window.parent) {
		jQuery(window.parent.document).bind("mousemove", jQuery.proxy(this.handleMove, this), true);
	}

	// Fix for IE blue text selection while dragging:
	jDocument.bind("selectstart",jQuery.proxy(this.ondragstart,this), true);
};

/**
 * Handles the move event.
 * @param {DOMEvent} event The event raised by the browser.
 * @private
 */
sap.ui.commons.MessageBar.prototype.handleMove = function (event) {
//jQuery.sap.log.debug("MESSAGEBAR: HANDLEMOVE");
	if (!this.sDragMode) {
		return;
	}

  // First closing the MessageList, if visible.
  // That will allow the user to better see where he moves the MessageBar.
  // We will reopen it after the Drop.
  // This will also allow the List Popup to properly position itself (UP/DOWN).
  if (this.bToggleListBackAfterDrag==null && this.oList) {
	this.bToggleListBackAfterDrag = this.oList.getVisible();
	if (this.bToggleListBackAfterDrag) {
		this.toggleList();
	}
  }

  // Moving our Control by the extent of the mouse-drag:
	event = event || window.event;
	var iTop   = this.oMsgBarDragStartPosition.top   + event.screenY - this.mouseDragStartPositionY;
	var iLeft  = this.oMsgBarDragStartPosition.left  + event.screenX - this.mouseDragStartPositionX;
	var iRight = this.oMsgBarDragStartPosition.right - event.screenX + this.mouseDragStartPositionX;

  this.oPopup._$().css('top', iTop);
	// Is the Bar to be positioned and dragged from its right-hand side???
	if (this.snapPoint.indexOf("right") != -1) {
		this.oPopup._$().css('right', iRight);
	} else {
		this.oPopup._$().css('left', iLeft);
	}

	// Saving the drop position for the next MessageList "open" event:
	this.oDropPosition = {top: iTop, left: iLeft, right: iRight};

	event.cancelBubble = true;
	return false;
};

/**
 * Handle onmouseup event.
 * This does the cleanup after drag and move handling.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onmouseup = function (oEvent) {
//jQuery.sap.log.debug("MESSAGEBAR: ONMOUSEUP");
	if (!this.sDragMode) {
		return;
	}

	// If we have indeed moved, then rendering our "back-home" icon:
  if (this.oDropPosition) {
	  this.addStyleClass("sapUiMsgBarMoved");
  }

  // Reopening the List if was open before the move:
  if (this.bToggleListBackAfterDrag) {
	this.toggleList();
  }
  this.bToggleListBackAfterDrag = null; // Re-initialized for the next D&D.

	// Removing our move handler:
	var jDocument = jQuery(window.document);
	jDocument.unbind("mousemove", jQuery.proxy(this.handleMove, this));
	if(window.parent) {
		jQuery(window.parent.document).unbind("mousemove", jQuery.proxy(this.handleMove, this));
	}
	jDocument.unbind("selectstart",jQuery.proxy(this.ondragstart,this));

	this.sDragMode = null;

	// Resume the toasting:
	this.checkForToast();
};

// **************************************************
// * Clicking
// **************************************************
/**
 * Handle onclick events.
 * The 2 click-able areas are:
 *  1) The front Open/Close list button.
 *  2) The back GoHome button.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onclick = function (oEvent) {
	var oSource = oEvent.target;
	var jSource = jQuery(oSource);

	// If cursor does not say click, then do not bother.
	if (jSource.css('cursor') != "pointer") {
		return;
	}

  // Now, checking were the click came from:
  if (jSource.hasClass("sapUiMsgBarToggle")) {
		this.toggleList();
  } else if (jSource.hasClass("sapUiMsgBarHome")) {
		this.backHome();
  } else {
	jQuery.sap.log.debug("Warning: MessageBar unsupported click on " + jSource.attr('className'));
  }
}

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility checks what action the Toaster should execute next.
 * @private
 */;
sap.ui.commons.MessageBar.prototype.checkForToast = function() {
  // No more toast if Multiple Toasts has already been displayed:
  if (this.maxToastsReached) {
	return;
  }

  // Making sure there is some queued messages:
  if (this.aToasts==null || this.aToasts.length == 0) {
	return;
  }

  // Making sure the feature is active:
  var maxToasted = this.getMaxToasted();
  if (maxToasted == 0) {
	return;
  }

  // Do not toast during Drag&Drop. Do not distract the user!
  if (this.sDragMode) {
	return;
  }

  var nextToast = null;
  var anchorId = "";
  if (this.aToasts.length > this.getMaxToasted()) {
	// Having a null "nextToast" would indicate a "Multiple new messages..."
	// With "Multiple new messages...", no need to toast messages anymore,
	// so emptying the toasting queue:
	  this.aToasts = [];
	  this.maxToastsReached = true;
	// Do not wait for the previous toast to be done.
	// The Toast has to point towards our left open/close Arrow:
	anchorId = this.getId() + "__arrowImg";
  } else {
	// Do not put a new toast in if there is already one in:
	  if (!this.oToast.isIdle()) {
		return;
	  }
	// Retrieving the oldest queued message:
	nextToast = this.aToasts.splice(0, 1)[0];
	// The Toast has to point towards the icon of the same priority, e.g. "id_ErrorImg":
	anchorId = this.getId() + "__" + nextToast.getType() + "Img";
  }

  // Triggering a Toast:
  this.oToast.toast(nextToast, anchorId);
};

/**
 * This utility adds Toasts to the Toast Array, if not already
 * included within this Array.
 * Order is chronological, not by priority.
 * @private
 */
sap.ui.commons.MessageBar.prototype.addToasts = function(aMessages) {
  // Looping through the supplied messages:
	for (var i=0, len=aMessages.length; i<len; i++) {
	  var newMessage = aMessages[i];
	  var alreadyQueued = false;
	  // Making sure message is not already queued for Toast:
	  for (var j=this.aToasts.length; j>=0; j--) {
		if (newMessage == this.aToasts[j]) {
		  alreadyQueued = true;
		  break;
		}
	  }
	  // Adding the message to the Toast queue:
	  if (!alreadyQueued) {
		this.aToasts.push(newMessage);
	  }
  } // end supplied messages for-loop
};

/**
 * This utility removes a Toast from the Array of messages still
 * to be toasted.
 * @private
 */
sap.ui.commons.MessageBar.prototype.deleteToast = function(sId) {
  if (!this.aToasts) {
	return;
  }

  // Checking if within the Toast queue:
	for (var j=0, len=this.aToasts.length; j<len; j++) {
		if (this.aToasts[j].getId() == sId) {
			this.aToasts.splice(j, 1);
			return;
		}
	}
};

/**
 * This utility removes one message, given its ID, from the possible
 * message queues (Error, Warning, Success...).
 * Messages always have an ID, since created via the "Message" Control.
 * @private
 */
sap.ui.commons.MessageBar.prototype.deleteOneMessage = function(sId) {
  if (!sId) {
	return;
  }

  // Checking if within the Error queue:
	for (var j=0, len=this.aErrors.length; j<len; j++) {
		if (this.aErrors[j].getId() == sId) {
		  this.aErrors[j].closeDetails();
			this.aErrors.splice(j, 1);
			return;
		}
	}

  // Checking if within the Warning queue:
	for (var j=0, len=this.aWarnings.length; j<len; j++) {
		if (this.aWarnings[j].getId() == sId) {
		  this.aWarnings[j].closeDetails();
			this.aWarnings.splice(j, 1);
			return;
		}
	}

  // Checking if within the Success queue:
	for (var j=0, len=this.aSuccesses.length; j<len; j++) {
		if (this.aSuccesses[j].getId() == sId) {
		  this.aSuccesses[j].closeDetails();
			this.aSuccesses.splice(j, 1);
			return;
		}
	}
};

/**
 * This utility converts "Begin"/"End" into "Right"/"Left" coordinates,
 * for RTL support.
 * @private
 */
sap.ui.commons.MessageBar.prototype.getSnapPoint = function() {
  if (!this.snapPoint) {
	  this.snapPoint = this.getAnchorSnapPoint();
	  if (sap.ui.getCore().getConfiguration().getRTL()) {
		this.snapPoint = this.snapPoint.replace("begin", "right").replace("end", "left");
	  } else {
		this.snapPoint = this.snapPoint.replace("begin", "left").replace("end", "right");
	  }
  }
  return this.snapPoint;
};

/**
 * This utility opens the MessageBar Popup.
 * @private
 */
sap.ui.commons.MessageBar.prototype.open = function() {
	// Defining or fetching the Popup attributes:
  var animationDuration = 0;
  var snapPoint = this.getSnapPoint();

	// Opening the MessageBar:
  var anchor = null;
  var anchorId = this.getAnchorID();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
	this.oPopup.open(animationDuration, snapPoint, snapPoint, anchor, "0 0");

  // Repositioning as per the Drop position:
  if (this.oDropPosition) {
	  this.oPopup._$().css('top', this.oDropPosition.top);
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (snapPoint.indexOf("right") != -1) {
			this.oPopup._$().css('right', this.oDropPosition.right);
		} else {
			this.oPopup._$().css('left', this.oDropPosition.left);
		}
  }

  // If closed with a list present, then we should still display it:
  if (this.hasStyleClass("sapUiMsgBarOpen")) {
	this.oList.setVisible(true);
  }
};

/**
 * This utility closes the MessageBar Popup.
 * @private
 */
sap.ui.commons.MessageBar.prototype.close = function() {
  // First closing the MessageList, if visible:
  if (this.oList && this.oList.getVisible()) {
	this.oList.setVisible(false);
  }

  // Invoking the MsgBar Popup close = function(iDuration):
  var animationDuration = 0;
	this.oPopup.close(animationDuration);

  // Re-initializing flag along with the turning-off of the MessageBar:
  this.maxToastsReached = false;
};

/**
 * This utility updates the messageBar counters, and visibility.
 * @private
 */
sap.ui.commons.MessageBar.prototype.updateCountersAndVisibility = function() {
  // If invisible, get out of here!
	if (!this.getProperty("visible")) {
		return;
	}

  // Convenience variable
	var id = this.getId();

  // Updating the Error Count and Visibility:
  var oCount = jQuery.sap.domById(id + "__ErrorCount");
  if (!oCount) {
	// The MessageBar has to be available on the DOM in order to update it!
	// This code is required as the MessageBar is first created.
	  this.open();
	oCount = jQuery.sap.domById(id + "__ErrorCount");
  }
  var count   = this.aErrors.length;
  var oldText = oCount.innerHTML;
  var newText = "(" + count + ")";
  var jIcon   = null;
  var jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__ErrorImg");
	  jCount = jQuery.sap.byId(id + "__ErrorCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__ErrorImg");
	  jCount = jQuery.sap.byId(id + "__ErrorCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


  // Updating the Warning Count and Visibility:
  oCount  = jQuery.sap.domById(id + "__WarningCount");
  count   = this.aWarnings.length;
  oldText = oCount.innerHTML;
  newText = "(" + count + ")";
  jIcon   = null;
  jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__WarningImg");
	  jCount = jQuery.sap.byId(id + "__WarningCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__WarningImg");
	  jCount = jQuery.sap.byId(id + "__WarningCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


  // Updating the Success Count and Visibility:
  oCount  = jQuery.sap.domById(id + "__SuccessCount");
  count   = this.aSuccesses.length;
  oldText = oCount.innerHTML;
  newText = "(" + count + ")";
  jIcon   = null;
  jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__SuccessImg");
	  jCount = jQuery.sap.byId(id + "__SuccessCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__SuccessImg");
	  jCount = jQuery.sap.byId(id + "__SuccessCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


	// If the MessageBar is now empty, then it should become invisible:
	if (this.aErrors.length==0 &&
		this.aWarnings.length==0 &&
		this.aSuccesses.length==0) {
	  // Hiding the MessageBar:
	  this.close();
	  return;
	} else {
	  // Showing the MessageBar:
	  this.open();
	}

	// If the MessageList is already open, updating it:
	if (this.oList && this.oList.getVisible()) {
		this.oList.setMessages(this.aSuccesses.concat(this.aWarnings).concat(this.aErrors));
	}

  // Checking for the next Toaster action:
	this.checkForToast();
};

/**
 * This utility toggles the MessageList Popup.
 * This function is invoked by clicking the front MessageBar Arrow.
 * @private
 */
sap.ui.commons.MessageBar.prototype.toggleList = function() {
  // Creating the List, if not already done:
  if (!this.oList) {
	var listId = this.getId() + "__List";
	  this.oList = new sap.ui.commons.MessageList(listId, {anchorId:this.getId(), maxListed:this.getMaxListed()});
  }

  // Retrieving the List current Open/Close information:
  var visible  = this.oList.getVisible();

  // Toggling the List, and adapting our styling:
  if (!visible) {
	this.oList.setMessages(this.aSuccesses.concat(this.aWarnings).concat(this.aErrors));
	this.addStyleClass("sapUiMsgBarOpen");
  } else {
	this.removeStyleClass("sapUiMsgBarOpen");
  }
  this.oList.setVisible(!visible);
};

/**
 * This utility restores the initial position of the MessageBar.
 * @private
 */
sap.ui.commons.MessageBar.prototype.backHome = function() {
  // Instead of repositioning the List, we may as well just re-opening it once back home!
  // Just like when it is the user that is D&D the Bar!
  // This will also allow the List Popup to properly position itself (UP/DOWN).
//this.oPopup.setPosition(sap.ui.core.Popup.Dock.LeftTop, {left:this.oHomePosition.left + "px", top: this.oHomePosition.top + "px"});
  var jPopup = this.oPopup._$();
  if (this.oList && this.oList.getVisible()) {
	this.toggleList();
	var that = this;
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (this.snapPoint.indexOf("right") != -1) {
			jPopup.animate({right:this.oHomePosition.right + "px", top:this.oHomePosition.top + "px"}, 200, function() {that.toggleList();});
		} else {
			jPopup.animate({left:this.oHomePosition.left + "px", top:this.oHomePosition.top + "px"}, 200, function() {that.toggleList();});
		}
  } else {
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (this.snapPoint.indexOf("right") != -1) {
			jPopup.animate({right:this.oHomePosition.right + "px", top:this.oHomePosition.top + "px"}, 200);
		} else {
			jPopup.animate({left:this.oHomePosition.left + "px", top:this.oHomePosition.top + "px"}, 200);
		}
  }

  // MessageBar is back home:
  this.oDropPosition = null;
  // Hiding our "back-home" icon:
  this.removeStyleClass("sapUiMsgBarMoved");
};

// #############################################################################
// Public APIs
// #############################################################################
/**
 * This public API adds/updates a supplied list of messages.
 * The messageBar is to appear should at least one message exists.
 * @public
 */
sap.ui.commons.MessageBar.prototype.addMessages = function(aMessages) {
  if (!aMessages) {
	return;
  }

  // Looping through the supplied messages:
	for (var i=0, len=aMessages.length; i<len; i++) {
	// First have to removing each message from the message queues,
	// in case this is an update that we are doing!
	// This approach allows for messages to change priority,
	// and for "updated" messages to get re-ordered, i.e.
	// the most recent ones are displayed first (on a given priority
	// level).
	this.deleteOneMessage(aMessages[i].getId());

	// Now, inserting each message into its proper queue:
	  switch (aMessages[i].getType()){
		case sap.ui.commons.MessageType.Error:
		  // Adding the "new" Error message:
		this.aErrors.push(aMessages[i]);
		  break;

		case sap.ui.commons.MessageType.Warning:
		  // Adding the "new" Warning message:
		this.aWarnings.push(aMessages[i]);
		  break;

		case sap.ui.commons.MessageType.Success:
		  // Adding the "new" Success message:
		this.aSuccesses.push(aMessages[i]);
		  break;

		default:
		  jQuery.sap.log.debug("ERROR: MessageBar supplied messageType=" + aMessages[i].getType());
	  } // end switch
	} // end for

	// Adding the new messages to the toasting queue:
  this.addToasts(aMessages);

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};

/**
 * This public API deletes a supplied list of messages.
 * The messageBar is to disappear should no message remains.
 * @public
 */
sap.ui.commons.MessageBar.prototype.deleteMessages = function(aIds) {
  if (!aIds) {
	return;
  }

  // Removing each message from their message queues, and toast queue:
	for (var i=0, len=aIds.length; i<len; i++) {
	this.deleteOneMessage(aIds[i]);
	this.deleteToast(aIds[i]);
	} // end for

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};

/**
 * This public API deletes all recorded messages.
 * The messageBar is to disappear.
 * @public
 */
sap.ui.commons.MessageBar.prototype.deleteAllMessages = function() {
  // Closing the corresponding Details if any:
	for (var j=this.aErrors.length-1; j>=0; j--) {
		this.aErrors[j].closeDetails();
	}
	for (var j=this.aWarnings.length-1; j>=0; j--) {
		this.aWarnings[j].closeDetails();
	}
	for (var j=this.aSuccesses.length-1; j>=0; j--) {
		this.aSuccesses[j].closeDetails();
	}

	// Empty all error queues:
  this.aErrors    = [];
  this.aWarnings  = [];
  this.aSuccesses = [];
  // Empty the Toasting queue:
  this.aToasts    = [];

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};



// #############################################################################
// Overwriting auto-generated methods of MessageBar.API.js
// #############################################################################

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 *
 * The MessageBar.API.js "setVisible" function is enhanced in order to
 * toggle the "visibility:hidden;" attribute over the control.
 */
sap.ui.commons.MessageBar.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);

  if (bVisible) {
		// Updating and rendering the MessageBar:
		this.updateCountersAndVisibility();
  }
  else {
	// Just closing the MessageBar:
	  this.close();
  }

	return this;
};
}; // end of sap.ui.commons.MessageBar
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.commons.MessageBox
jQuery.sap.declare("sap.ui.commons.MessageBox");






/**
 * @class Provides methods to create standard alerts, confirmation dialogs, or arbitrary message boxes.
 *
 * As <code>MessageBox</code> is a static class, a <code>jQuery.sap.require("sap.ui.commons.MessageBox");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.ui.commons.MessageBox");
 *   sap.ui.commons.MessageBox.show(
 *       "This message should appear in the message box.",
 *       sap.ui.commons.MessageBox.Icon.INFORMATION,
 *       "My message box title",
 *       [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
 *       function() { / * do something * / }
 *	 );
 * </pre>
 *
 * @static
 * @author Frank Weigel
 * @public
 * @since 0.8.8
 */
sap.ui.commons.MessageBox = {};

/**
 * @class Enumeration of supported actions in a MessageBox.
 *
 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
 * specifying the set of allowed actions as well as reporting back the user choice.
 * @static
 * @public
 */
sap.ui.commons.MessageBox.Action = {

  /**
   * Adds an "Ok" button to the message box.
   * @public
   */
  OK : "OK",

  /**
   * Adds a "Cancel" button to the message box.
   * @public
   */
  CANCEL : "CANCEL",

  /**
   * Adds a "Yes" button to the message box.
   * @public
   */
  YES : "YES",

  /**
   * Adds a "No" button to the message box.
   * @public
   */
  NO : "NO",

  /**
   * Adds an "Abort" button to the message box.
   * @public
   */
  ABORT : "ABORT",

  /**
   * Adds a "Retry" button to the message box.
   * @public
   */
  RETRY : "RETRY",

  /**
   * Adds an "Ignore" button to the message box.
   * @public
   */
  IGNORE : "IGNORE",

  /**
   * Adds a "Close" button to the message box.
   * @public
   */
  CLOSE : "CLOSE"
};

/**
 * @class Enumeration of the pre-defined icons that can be used in a MessageBox.
 * @static
 * @public
 */
sap.ui.commons.MessageBox.Icon = {

  /**
   * Shows no icon in the message box.
   * @public
   */
  NONE : "NONE",

  /**
   * Shows the information icon in the message box.
   * @public
   */
  INFORMATION : "INFORMATION",

  /**
   * Shows the warning icon in the message box.
   * @public
   */
  WARNING : "WARNING",

  /**
   * Shows the error icon in the message box.
   * @public
   */
  ERROR : "ERROR",

  /**
   * Shows the critical error icon in the message box.
   * @public
   */
  CRITICAL : "CRITICAL",

  /**
   * Shows the success icon in the message box.
   * @public
   */
  SUCCESS : "SUCCESS",

  /**
   * Shows the question icon in the message box.
   * @public
   */
  QUESTION : "QUESTION"
};

(function() {
	
	var c = sap.ui.commons,
		Action = c.MessageBox.Action,
		Icon = c.MessageBox.Icon,
		mIconClass = {
			// Note: keys must be equal to values(!) of the Icon enumeration above
			INFORMATION : "sapUiMboxInfo",
			CRITICAL : "sapUiMboxCritical",
			ERROR : "sapUiMboxError",
			WARNING : "sapUiMboxWarning",
			SUCCESS : "sapUiMboxSuccess",
			QUESTION : "sapUiMboxQuestion"
		};
	
	/**
	 * Creates and displays a simple message box with the given text and buttons, and optionally other parts.
	 * After the user has selected a button or closed the message box using the close icon, the <code>callback</code>
	 * function is invoked when given.
	 *
	 * The only mandatory parameter is <code>sMessage</code>.
	 *
	 * The created dialog box is executed asynchronously. When it has been created and registered for rendering,
	 * this function returns without waiting for a user reaction.
	 *
	 * When applications have to react on the users choice, they have to provide a callback function and
	 * postpone any reaction on the user choice until that callback is triggered.
	 *
	 * The signature of the callback is
	 *
	 *   function (oAction);
	 *
	 * where <code>oAction</code> is the button that the user has pressed. When the user has pressed the close button,
	 * a MessageBox.Action.Close is returned.
	 *
	 * @param {string} sMessage The message to be displayed.
	 * @param {sap.ui.commons.MessageBox.Icon} [oIcon=None] The icon to be displayed.
	 * @param {string} [sTitle=''] The title of the message box.
	 * @param {sap.ui.commons.MessageBox.Action|sap.ui.commons.MessageBox.Action[]} [vActions] Either a single action, or an array of actions.
	 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter.
	 * @param {function} [fnCallback] Function to be called when the user has pressed a button or has closed the message box.
	 * @param {sap.ui.commons.MessageBox.Action} [oDefaultAction] Must be one of the actions provided in vActions.
	 * @param {string} [sDialogId] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps 
	 * @public
	 */
	sap.ui.commons.MessageBox.show = function(sMessage, oIcon, sTitle, vActions, fnCallback, oDefaultAction, sDialogId) {
		
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons"),
			oDialog, oResult, oContent, oMsg, oDefaultButton;

		// normalize the vActions array
		if ( typeof vActions !== "undefined" && !jQuery.isArray(vActions) ) {
			vActions = [vActions];
		}
		if ( !vActions || vActions.length === 0 ) {
			vActions = [Action.OK];
		}
	
		// create a unique ID
		sDialogId = sDialogId || sap.ui.core.ElementMetadata.uid("mbox");
		
		/** creates a button for the given action */
		function button(sAction) {
			var sText = rb && rb.getText("MSGBOX_" + sAction),
				oButton = new c.Button({
					id : sDialogId + "--btn-" + sAction,
					text : sText || sAction, 
					press : function () {
						oResult = sAction;
						oDialog.close();
					}
				});
			if ( sAction === oDefaultAction ) {
				oDefaultButton = oButton;
			}
			return oButton;
		}

		/** wraps the given control in a top aligned MatrixLayoutCell with no padding */ 
		function cell(oContent) {
			return new c.layout.MatrixLayoutCell({
				padding: c.layout.Padding.None,
				vAlign: c.layout.VAlign.Top,
				content: oContent
			});
		}
		
		/** creates an Image for the given icon type */
		function image(oIcon) {
			var oImage = new c.Image({
					id : sDialogId + "--icon",
					src : sap.ui.resource('sap.ui.commons', 'img/1x1.gif'),
					tooltip : rb && rb.getText("MSGBOX_ICON_" + oIcon),
					decorative : true});
			oImage.addStyleClass("sapUiMboxIcon");
			oImage.addStyleClass(mIconClass[oIcon]);
			return oImage;
		}
		
		function onclose() {
			if ( typeof fnCallback === "function" ) {
				fnCallback(oResult || Action.CLOSE);
			}
	
			// first detach close handler (to avoid recursion and multiple reports)
			oDialog.detachClosed(onclose);
	
			// then destroy dialog (would call onclose again)
			oDialog.destroy();
		}
		
		oContent = new c.layout.MatrixLayout({id : sDialogId + "--lyt", layoutFixed:false}).addStyleClass("sapUiMboxCont");
		oMsg = new c.TextView({id : sDialogId + "--msg", text:sMessage}).addStyleClass("sapUiMboxText");
		if ( oIcon !== Icon.NONE ) {
			oContent.createRow(cell(image(oIcon)), cell(oMsg));
		} else {
			oContent.createRow(cell(oMsg));
		}
		// oContent.addStyleClass("sapUiDbgMeasure");
	
		oDialog = new c.Dialog({
			id : sDialogId,
			applyContentPadding : false,
			title : sTitle,
			accessibleRole : sap.ui.core.AccessibleRole.AlertDialog,
			resizable : false,
			modal: true,
			buttons : jQuery.map(vActions, button), // determines oDefaultButton as a side effect!
			content : oContent,
			defaultButton : oDefaultButton,
			closed : onclose
		});
			
		oDialog.open();
		
	};
	
	/**
	 * Displays an alert box with the given message and an OK button (no icons).
	 * If a callback is given, it is called after the alert box has been closed
	 * by the user via the OK button or via the Close icon. The callback is called
	 * with the following signature:
	 *
	 * <pre>
	 *   function ()
	 * </pre>
	 *
	 * The alert box opened by this method is modal and it is processed asynchronously. 
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert box.
	 *
	 * @param {string} sMessage Message to be displayed in the alert box
	 * @param {function} [fnCallback] callback function to be called when the user closed the dialog
	 * @param {string } [sTitle] Title to be displayed in the alert box
	 * @param {string} [sDialogId] ID to be used for the alert box. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.ui.commons.MessageBox.alert = function(sMessage, fnCallback, sTitle, sDialogId) {
		return c.MessageBox.show(sMessage, Icon.NONE, sTitle, Action.OK, 
				function(oAction) { 
					if ( typeof fnCallback === "function" ) {
						fnCallback();
					} 
				}, Action.OK, sDialogId || sap.ui.core.ElementMetadata.uid("alert"));
	};
	
	/**
	 * Displays a confirmation dialog box with the given message, a question icon,
	 * an OK button, and a Cancel button. If a callback is given, it is called after the
	 * alert box has been closed by the user via one of the buttons or via the close icon.
	 * The callback is called with the following signature
	 *
	 * <pre>
	 *   function(bConfirmed)
	 * </pre>
	 *
	 * where bConfirmed is set to true when the user has activated the OK button.
	 *
	 * The confirmation dialog box opened by this method is modal and it is processed asynchronously. 
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert box.
	 *
	 * @param {string} sMessage Message to display
	 * @param {function} [fnCallback] Callback to be called
	 * @param {string} [sTitle] Title to display
	 * @param {string} [sDialogId] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.ui.commons.MessageBox.confirm = function(sMessage, fnCallback, sTitle, sDialogId) {
		return c.MessageBox.show(sMessage, Icon.QUESTION, sTitle, [Action.OK, Action.CANCEL], 
				function(oAction) { 
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction === Action.OK);
					}
				},  /* no default */ undefined, sDialogId || sap.ui.core.ElementMetadata.uid("confirm"));
	};

}());

}; // end of sap.ui.commons.MessageBox
if ( !jQuery.sap.isDeclared('sap.ui.commons.Tree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Tree.
jQuery.sap.declare("sap.ui.commons.Tree");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Tree.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>showHeader : boolean</li>
 * <li>showHeaderIcons : boolean</li>
 * <li>showHorizontalScrollbar : boolean</li>
 * <li>minWidth : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>nodes : sap.ui.commons.TreeNode</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Simple tree to display item in a hierarchical way
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Tree = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Tree.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Tree. 
 * Resulting metadata can be obtained via sap.ui.commons.Tree.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Tree", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getWidth", "setWidth", "getHeight", "setHeight", "getShowHeader", "setShowHeader", "getShowHeaderIcons", "setShowHeaderIcons", "getShowHorizontalScrollbar", "setShowHorizontalScrollbar", "getMinWidth", "setMinWidth", 
    // aggregations
    "getNodes", "insertNode", "addNode", "removeNode", "removeAllNodes", "indexOfNode", "destroyNodes", 
    // associations
    
    // events
    "attachSelect", "detachSelect", 
    // methods
    "expandAll", "collapseAll"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
    "showHeader" : {name : "showHeader", type : "boolean", group : "Misc", defaultValue : true},
    "showHeaderIcons" : {name : "showHeaderIcons", type : "boolean", group : "Misc", defaultValue : true},
    "showHorizontalScrollbar" : {name : "showHorizontalScrollbar", type : "boolean", group : "Misc", defaultValue : false},
    "minWidth" : {name : "minWidth", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "nodes",
  aggregations : {
    "nodes" : {name : "nodes", type : "sap.ui.commons.TreeNode", multiple : true, singularName : "node"}
  },
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.commons.Tree.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>title</code>.
 * Tree title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Tree width
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * Tree height
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>showHeader</code>.
 * Tree Header is display. If false, the tree will be in a transparent mode
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getShowHeader = function() {
	return this.getProperty("showHeader");
};

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setShowHeader = function(bShowHeader) {
	this.setProperty("showHeader", bShowHeader);
	return this;
};


/**
 * Getter for property <code>showHeaderIcons</code>.
 * Show Header icons (e.g. Expand/Collapse all). Only consider if showHeader is true
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeaderIcons</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getShowHeaderIcons = function() {
	return this.getProperty("showHeaderIcons");
};

/**
 * Setter for property <code>showHeaderIcons</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeaderIcons  new value for property <code>showHeaderIcons</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setShowHeaderIcons = function(bShowHeaderIcons) {
	this.setProperty("showHeaderIcons", bShowHeaderIcons);
	return this;
};


/**
 * Getter for property <code>showHorizontalScrollbar</code>.
 * Display horizontal scrollbar. If false, the overflow content will be hidden
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showHorizontalScrollbar</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getShowHorizontalScrollbar = function() {
	return this.getProperty("showHorizontalScrollbar");
};

/**
 * Setter for property <code>showHorizontalScrollbar</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowHorizontalScrollbar  new value for property <code>showHorizontalScrollbar</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setShowHorizontalScrollbar = function(bShowHorizontalScrollbar) {
	this.setProperty("showHorizontalScrollbar", bShowHorizontalScrollbar);
	return this;
};


/**
 * Getter for property <code>minWidth</code>.
 * Minimal width for the Tree. Can be useful when, for example, the width is specified in percentage, to avoid the tree to become too narrow when container is resize
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * 
 */
sap.ui.commons.Tree.prototype.getMinWidth = function() {
	return this.getProperty("minWidth");
};

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.setMinWidth = function(sMinWidth) {
	this.setProperty("minWidth", sMinWidth);
	return this;
};

	
/**
 * Getter for aggregation <code>nodes</code>.<br/>
 * First level nodes
 * 
 * @return {sap.ui.commons.TreeNode[]}
 * @public
 */
sap.ui.commons.Tree.prototype.getNodes = function() {
	return this.getAggregation("nodes", []);
};


/**
 * Inserts a node into the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *          oNode the node to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the node should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the node is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the node is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.insertNode = function(oNode, iIndex) {
	this.insertAggregation("nodes", oNode, iIndex);
	return this;
};

/**
 * Adds some node <code>oNode</code> 
 * to the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Tree.prototype.addNode = function(oNode) {
	this.addAggregation("nodes", oNode);
	return this;
};

/**
 * Removes an node from the aggregation named <code>nodes</code>.
 *
 * @param {int | string | sap.ui.commons.TreeNode} vNode the node to remove or its index or id
 * @return {sap.ui.commons.TreeNode} the removed node or null
 * @public
 */
sap.ui.commons.Tree.prototype.removeNode = function(vNode) {
	return this.removeAggregation("nodes", vNode);
};

/**
 * Removes all the controls in the aggregation named <code>nodes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.TreeNode[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Tree.prototype.removeAllNodes = function() {
	return this.removeAllAggregation("nodes");
};

/**
 * Checks for the provided <code>sap.ui.commons.TreeNode</code> in the aggregation named <code>nodes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Tree.prototype.indexOfNode = function(oNode) {
	return this.indexOfAggregation("nodes", oNode);
};
	

/**
 * Destroys all the nodes in the aggregation 
 * named <code>nodes</code>.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.destroyNodes = function() {
	this.destroyAggregation("nodes");
	return this;
};


/**
 * Event is fired when a tree node is selected. 
 *
 * @name sap.ui.commons.Tree#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.TreeNode} oControlEvent.getParameters.node The node which has been selected.
 * @param {object} oControlEvent.getParameters.nodeContext The binding context of the selected node.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.Tree</code>.<br/>
 * Event is fired when a tree node is selected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.Tree</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tree.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'node' of type <code>sap.ui.commons.TreeNode</code> The node which has been selected.</li>
 * <li>'nodeContext' of type <code>object</code> The binding context of the selected node.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 */
sap.ui.commons.Tree.prototype.fireSelect = function(mArguments) {
	return this.fireEvent("select", mArguments, true);
};


/**
 * Expands all nodes in the tree
 *
 * @name sap.ui.commons.Tree.prototype.expandAll
 * @function

 * @type void
 * @public
 */


/**
 * Collapses all nodes in the tree
 *
 * @name sap.ui.commons.Tree.prototype.collapseAll
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/Tree.js
sap.ui.commons.Tree.prototype.resizeListenerId;

sap.ui.commons.Tree.prototype.init = function(){
   this.bAllCollapsed = false;
   this.allowTextSelection(false);

   this.oSelectedNode = null;
   this.oSelectedContext = null;
   
   //Create Buttons for Header
	var sIconPrefix		= jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme();

	if(!sap.ui.getCore().getConfiguration().getRTL()){
		sIconPrefix		+= "/img/tree/";
	}
	else{
		sIconPrefix		+= "/img-RTL/tree/";
	}

	var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	this.oCollapseAllButton = new sap.ui.commons.Button(this.getId() + "-CollapseAll", { icon: sIconPrefix + "CollapseAll.png", tooltip: oResourceBundle.getText("TREE_COLLAPSE_ALL"), lite: true });
	this.oExpandAllButton	= new sap.ui.commons.Button(this.getId() + "-ExpandAll", { icon: sIconPrefix + "ExpandAll.png", tooltip: oResourceBundle.getText("TREE_EXPAND_ALL"), lite: true });
	this.oCollapseAllButton.attachPress(this.onCollapseAll,this);
	this.oExpandAllButton.attachPress(this.onExpandAll,this);
	this.oCollapseAllButton.addStyleClass("sapUiTreeCol");
	this.oExpandAllButton.addStyleClass("sapUiTreeExp");
};

/**
 * Does all the cleanup when the Tree is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.Tree.prototype.exit = function(){
	if ( this.oCollapseAllButton ) {
		this.oCollapseAllButton.destroy();
		this.oCollapseAllButton = null;
	}
	if ( this.oExpandAllButton ) {
		this.oExpandAllButton.destroy();
		this.oExpandAllButton = null;
	}
};

/***********************************************************************************
* EVENTS HANDLING
***********************************************************************************/


/** Handler for "Expand All" button.
 * @private
 */
sap.ui.commons.Tree.prototype.onExpandAll = function(){
	this.expandAll();
};

/**Handler for "Collapse All" button.
 * @private
 */
sap.ui.commons.Tree.prototype.onCollapseAll = function(){
	this.collapseAll();
};

/*"*********************************************************************************
* PUBLIC METHODS
***********************************************************************************/
sap.ui.commons.Tree.prototype.expandAll = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){
		aNodes[i].expand(true);
	}
};

sap.ui.commons.Tree.prototype.collapseAll = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){
		aNodes[i].collapse(true);
	}
};

/***********************************************************************************
* KEYBOARD NAVIGATION
***********************************************************************************/
/**
* DOWN key behavior
* Opens the section or activates the UI element on DOWN key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapdown = function(oEvent){
	this.moveFocus(false);
	oEvent.preventDefault();
};

/**
* UP key behavior
* Opens the section or activates the UI element on UP key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapup = function(oEvent){
	this.moveFocus(true);
	oEvent.preventDefault();
};

/**
* LEFT key behavior
* Opens the section or activates the UI element on LEFT key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapleft = function(oEvent){
	this.moveFocus(true);
	oEvent.preventDefault();
};

/**
* RIGHT key behavior
* Opens the section or activates the UI element on RIGHT key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapright = function(oEvent){
	this.moveFocus(false);
	oEvent.preventDefault();
};



/**
 * The general HOME key event of the tree
 * @private
 * @param {event} oEvent The saphome event object
 */
sap.ui.commons.Tree.prototype.onsaphome = function(oEvent) {
	var oDomNode = oEvent.srcElement ?  oEvent.srcElement : oEvent.target;
	this.placeFocus(this.getFirstSibling(oDomNode));
	oEvent.preventDefault();
};

/**
 * The general CTRL+HOME key event of the tree
 * @private
 * @param {event} oEvent The saphome event object
 */
sap.ui.commons.Tree.prototype.onsaphomemodifiers = function(oEvent) {
	this.placeFocus(this.getFirst());
	oEvent.preventDefault();
};

/**
 * The general END key event of the tree
 * @private
 * @param {event} oEvent The sapend event object
 */
sap.ui.commons.Tree.prototype.onsapend = function(oEvent) {
	var oDomNode = oEvent.srcElement ?  oEvent.srcElement : oEvent.target;
	this.placeFocus(this.getLastSibling(oDomNode));
	oEvent.preventDefault();
};

/**
 * The general CTRL+END key event of the tree
 * @private
 * @param {event} oEvent The sapend event object
 */
sap.ui.commons.Tree.prototype.onsapendmodifiers = function(oEvent) {
	this.placeFocus(this.getLast());
	oEvent.preventDefault();
};

/**
 * The numpad STAR(*) key event of the tree
 * @private
 * @param {event} oEvent The sapcollapseall event object
 */
sap.ui.commons.Tree.prototype.onsapcollapseall = function(oEvent) {

	if(this.bAllCollapsed ){
		this.expandAll();
	}
	else{
		this.collapseAll();
	}

	this.bAllCollapsed = !this.bAllCollapsed;
};

/***********************************************************************************
* HELPER METHODS - DOM NAVIGATION
***********************************************************************************/

/**Returns the first Sibling tree node based on DOM Tree node provided
 * @param oDomNode The DOM Tree node from which calculate the first sibling
 * @returns The first sibling tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getFirstSibling = function(oDomNode) {
	var aDomFirstSiblingNode	= jQuery(oDomNode).siblings(".sapUiTreeNode:visible").first();

	if(aDomFirstSiblingNode.length){
		return aDomFirstSiblingNode[0];
	}
	return null;
};

/**Returns the last Sibling tree node based on DOM Tree node provided
 * @param oDomNode The DOM Tree node from which calculate the last sibling
 * @returns The last sibling tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getLastSibling= function(oDomNode) {
	var aDomLastSiblingNode	= jQuery(oDomNode).siblings(".sapUiTreeNode:visible").last();

	if(aDomLastSiblingNode.length){
		return aDomLastSiblingNode[0];
	}
	return null;
};

/**Returns the first tree node of the tree. Children of collapsed nodes (hidden) are not considered.
 * @returns The first tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getFirst = function() {
	var aDomFirstNode		= jQuery.sap.byId(this.getId()).find(".sapUiTreeNode:visible").first();

	if(aDomFirstNode.length){
		return aDomFirstNode[0];
	}
	return null;
};

/**Returns the last tree node of the tree. Children of collapsed nodes (hidden) are not considered.
 * @returns The last tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getLast = function() {
	var aDomLastNode		= jQuery.sap.byId(this.getId()).find(".sapUiTreeNode:visible").last();

	if(aDomLastNode.length){
		return aDomLastNode[0];
	}
	return null;

};

/***********************************************************************************
* HELPER METHODS - FOCUS MANAGEMENT
***********************************************************************************/

/**
 * Move the focus by one position, either UP or DOWN depending of "bMoveUp"
 * @param bMoveUp When true the focus is move up. Otherwise, it's moved down
 * @private
 */
sap.ui.commons.Tree.prototype.moveFocus = function(bMoveUp){
   var afocusedNodeDom	= jQuery(".sapUiTreeNode:focus");
   if(afocusedNodeDom.length){

	   var oCurrNode = sap.ui.getCore().getControl(afocusedNodeDom[0].id)
;
	   var aDomAllNodes = jQuery.sap.byId(this.getId()).find(".sapUiTreeNode:visible");
	   var currIndex	= aDomAllNodes.index(afocusedNodeDom[0]);

	   var nextIndex = currIndex;
	   if(bMoveUp){
		   nextIndex--;
	   }
	   else{
		   nextIndex++;
	   }

	   if(nextIndex >= 0 && nextIndex < aDomAllNodes.length){
			var oDomNextNode	= aDomAllNodes.eq( nextIndex );
			var oNextNode = sap.ui.getCore().getControl(oDomNextNode[0].id);
			oCurrNode.blur();
			oNextNode.focus();
	   }
	}

};

/**Adjusts the focus after a node is collapsed. This is necessary as the currently focused node can then be hidden,
 * leading the tree not being focusable anymore.
 *
 * When the focusable is being hid by the collapsing of its parent, the focus is then set on this parent.
 *
 * @private
 */
sap.ui.commons.Tree.prototype.adjustFocus = function(){

	var oFocusableNode = jQuery.sap.byId(this.getId()).find('.sapUiTreeNode[tabIndex="0"]');

	if(!oFocusableNode.is(':visible')){


		var aDomAllNodes		= jQuery.sap.byId(this.getId()).find(".sapUiTreeNode");
		var focusIndex			= aDomAllNodes.index(oFocusableNode[0]);
		var aDomPrecedingNodes	= aDomAllNodes.filter(":lt("+focusIndex+")");
		var aDomVisiblePrecedingNodes = aDomPrecedingNodes.filter(":visible");
		var oNewFocusNode		= aDomVisiblePrecedingNodes[aDomVisiblePrecedingNodes.length-1];

		oNewFocusNode.setAttribute("tabindex", "0");

		if( jQuery(".sapUiTreeNode:focus").is(":not(:visible)")){
			oNewFocusNode.focus();
		}

	}

};

/**Places the focus on the node corresponding to given DOM Tree Node
 * @param oDomTargetNode The DOM Tree Node corresponding to the node to focus
 * @private
 */
sap.ui.commons.Tree.prototype.placeFocus = function(oDomTargetNode){

	if(!oDomTargetNode){
		return; //No Target node provided!
	}

	var oDomfocusedNode	= jQuery.sap.byId(this.getId()).find(".sapUiTreeNode[tabIndex='0']");
	if(oDomfocusedNode.length){
		oDomfocusedNode[0].setAttribute("tabindex", "-1");
	}

	oDomTargetNode.setAttribute("tabindex", "0");
	var oTargetNode = sap.ui.getCore().getControl(oDomTargetNode.id);
	oTargetNode.focus();
};

/***********************************************************************************
* HELPER METHODS - SELECTION MANAGEMENT
***********************************************************************************/
/**Adjusts the selection, when expanding, by re-selecting a children node when the expanded node was
   selected only to reprensented the selection of a children node
 * @param oExpandingDomNode The Node being expanded
 * @private
 */
sap.ui.commons.Tree.prototype.adjustSelectionOnExpanding = function(oExpandingDomNode) {

	var $Tree = this.$(),
		$ExpandingDomNode = jQuery(oExpandingDomNode),
		$DomSelectedNode,
		$DomParent;

	//Current node is a fake selection, remove it. A child will be either another fake selection or an actual one.
	if($ExpandingDomNode.hasClass("sapUiTreeNodeSelectedParent")) {
		$ExpandingDomNode.removeClass("sapUiTreeNodeSelectedParent");
	}

	//If the actual selection now visible, remove all fake ones
	var $DomActualSelection = $Tree.find(".sapUiTreeNodeSelected:visible");
	if ($DomActualSelection.length){
		$Tree.find(".sapUiTreeNodeSelectedParent").removeClass("sapUiTreeNodeSelectedParent");
	}
	else {
		$DomSelectedNode = $Tree.find(".sapUiTreeNodeSelected");

		//Find first visible parent node
		$DomParent = $DomSelectedNode.parent(".sapUiTreeChildrenNodes").prev(".sapUiTreeNode");

		while ($DomParent.length && !$DomParent.is(":visible")) {
			$DomParent = $DomParent.parent(".sapUiTreeChildrenNodes").prev(".sapUiTreeNode");
		}
		$DomParent.addClass("sapUiTreeNodeSelectedParent");
	}
};

/**Adjusts the selection, when collapsing, selecting a parent when the actual selected node is
 * not visible.
 * @param oDomCollapsingNode The Node being expanded
 * @private
 */
sap.ui.commons.Tree.prototype.adjustSelectionOnCollapsing = function(oDomCollapsingNode){

	var $DomCollapsingNode = jQuery(oDomCollapsingNode),
		sChildrenId = "#" + $DomCollapsingNode.attr("id") + "-children",
		$DomActualSelSubNode = $DomCollapsingNode.siblings(sChildrenId).find(".sapUiTreeNodeSelected"),
		$DomParentSelSubNode = $DomCollapsingNode.siblings(sChildrenId).find(".sapUiTreeNodeSelectedParent");
	
	if($DomActualSelSubNode.length || $DomParentSelSubNode.length){
		$DomCollapsingNode.addClass("sapUiTreeNodeSelectedParent");

		if($DomParentSelSubNode.length){
			$DomParentSelSubNode.removeClass("sapUiTreeNodeSelectedParent");
		}
	}

};

/**
 * override this method on Element.js and return true if tree binding
 * @private
 */
sap.ui.commons.Tree.prototype.isTreeBinding = function(sName) {
	return (sName == "nodes");
};

/**
 * override element updateAggregation method with this one and update the tree node bindings
 * @private
 */
sap.ui.commons.Tree.prototype.updateNodes = function(oBindingInfo){
	var oBinding = oBindingInfo.binding,
		oTemplate = oBindingInfo.template,
		aContexts = oBinding.getRootContexts(),
		oSelection = this.oSelectedContext;
	this.oSelectedNode = null;
	this.oSelectedContext = null;
	this.updateNodesRecursively(aContexts, oTemplate, oBinding, oSelection, this);
};

/**
 * method used by updateNodes method to iterate through the tree
 * @private
 */
sap.ui.commons.Tree.prototype.updateNodesRecursively = function(aContexts, oTemplate, oBinding, oSelection, oParent){
	oParent.destroyNodes();
	var aNodes = oParent.getNodes();
	var oNode,
		that = this;
	jQuery.each(aContexts, function(iIndex, oContext) {
		oNode = aNodes[iIndex];
		if (!oNode) {
		  // use unique ids so we add the oContext as suffix
			oNode = oTemplate.clone(oContext.replace(/\//g,"-"));
		}
		oNode.setBindingContext(oContext);
		oParent.addNode(oNode); // also sets the Parent
		if (oContext == oSelection) {
			oNode.setProperty("isSelected", true, true);
			that.oSelectedNode = oNode;
			that.oSelectedContext = oContext;
		}
		that.updateNodesRecursively(oBinding.getNodeContexts(oContext), oTemplate, oBinding, oSelection, oNode);
	});
};

/**Returns the selected node in the tree. If not selection, returns false.
 * @returns The selected node
 * @private
 */
sap.ui.commons.Tree.prototype.getSelection = function(){
	return this.oSelectedNode;
};

/**Sets the selected node reference of the Tree
 * @private
 */ 
sap.ui.commons.Tree.prototype.setSelection = function(oNode){
	var bDoSelect;
	
	bDoSelect = this.fireSelect({
		node: oNode,
		nodeContext: oNode && oNode.getBindingContext()
	});
	
	if (bDoSelect) {
		if (this.oSelectedNode) {
			this.oSelectedNode.deselect();
		}
		if (oNode) {
			oNode.select();
		}
		this.oSelectedNode = oNode;
		this.oSelectedContext = oNode && oNode.getBindingContext();
	}
};


}; // end of sap.ui.commons.Tree
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToolbarSeparator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ToolbarSeparator.
jQuery.sap.declare("sap.ui.commons.ToolbarSeparator");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new ToolbarSeparator.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>displayVisualSeparator : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * An element that is added to the toolbar between items to separate them visually.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ToolbarSeparator = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ToolbarSeparator.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.ToolbarSeparator. 
 * Resulting metadata can be obtained via sap.ui.commons.ToolbarSeparator.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ToolbarSeparator", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  interfaces : ["sap.ui.commons.ToolbarItem"],
  publicMethods : [
    // properties 
    "getDisplayVisualSeparator", "setDisplayVisualSeparator"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "displayVisualSeparator" : {name : "displayVisualSeparator", type : "boolean", group : "Appearance", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>displayVisualSeparator</code>.
 * When set to "false", there is no visual indication of separation by a vertical line but by a wider space.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayVisualSeparator</code>
 * @public
 * 
 */
sap.ui.commons.ToolbarSeparator.prototype.getDisplayVisualSeparator = function() {
	return this.getProperty("displayVisualSeparator");
};

/**
 * Setter for property <code>displayVisualSeparator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayVisualSeparator  new value for property <code>displayVisualSeparator</code>
 * @return {sap.ui.commons.ToolbarSeparator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ToolbarSeparator.prototype.setDisplayVisualSeparator = function(bDisplayVisualSeparator) {
	this.setProperty("displayVisualSeparator", bDisplayVisualSeparator);
	return this;
};


// Start of sap/ui/commons/ToolbarSeparator.js
sap.ui.commons.ToolbarSeparator.prototype.getFocusDomRef = function() {
	return undefined;
};
}; // end of sap.ui.commons.ToolbarSeparator
if ( !jQuery.sap.isDeclared('sap.ui.commons.RatingIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RatingIndicator.
jQuery.sap.declare("sap.ui.commons.RatingIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RatingIndicator.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>editable : boolean</li>
 * <li>maxValue : int</li>
 * <li>value : float</li>
 * <li>iconSelected : string</li>
 * <li>iconUnselected : string</li>
 * <li>iconHovered : string</li>
 * <li>visualMode : sap.ui.commons.RatingIndicatorVisualMode</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>change : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is used to let the user do some rating on a certain topic. The amount of rating symbols can be specified, as well as the URIs to the
 * image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RatingIndicator = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RatingIndicator.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.RatingIndicator. 
 * Resulting metadata can be obtained via sap.ui.commons.RatingIndicator.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RatingIndicator", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getEditable", "setEditable", "getMaxValue", "setMaxValue", "getValue", "setValue", "bindValue", "unbindValue", "getIconSelected", "setIconSelected", "getIconUnselected", "setIconUnselected", "getIconHovered", "setIconHovered", "getVisualMode", "setVisualMode", 
    // aggregations
    
    // associations
    
    // events
    "attachChange", "detachChange"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "maxValue" : {name : "maxValue", type : "int", group : "Behavior", defaultValue : 5},
    "value" : {name : "value", type : "float", group : "Behavior", defaultValue : 0},
    "iconSelected" : {name : "iconSelected", type : "string", group : "Behavior", defaultValue : null},
    "iconUnselected" : {name : "iconUnselected", type : "string", group : "Behavior", defaultValue : null},
    "iconHovered" : {name : "iconHovered", type : "string", group : "Behavior", defaultValue : null},
    "visualMode" : {name : "visualMode", type : "sap.ui.commons.RatingIndicatorVisualMode", group : "Behavior", defaultValue : sap.ui.commons.RatingIndicatorVisualMode.Half}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "change" : "change"
  }

});	

sap.ui.commons.RatingIndicator.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>visible</code>.
 * If set to invisible, the control is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Value 'true' is required for changes on the rating symbols.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>maxValue</code>.
 * The number of displayed rating symbols
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>maxValue</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getMaxValue = function() {
	return this.getProperty("maxValue");
};

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iMaxValue  new value for property <code>maxValue</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setMaxValue = function(iMaxValue) {
	this.setProperty("maxValue", iMaxValue);
	return this;
};


/**
 * Getter for property <code>value</code>.
 * The current selected value.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getValue = function() {
	return this.getProperty("value");
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setValue = function(fValue) {
	this.setProperty("value", fValue);
	return this;
};


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.bindValue = function(sPath, fnFormatter, sMode) {
	this.bindProperty("value", sPath, fnFormatter, sMode);
	return this;
};

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.unbindValue = function() {
	this.unbindProperty("value");
	return this;
};


/**
 * Getter for property <code>iconSelected</code>.
 * The URI to the image which shall be displayed for all selected rating symbols.
 * Note that when this attribute is used, also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconSelected</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getIconSelected = function() {
	return this.getProperty("iconSelected");
};

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setIconSelected = function(sIconSelected) {
	this.setProperty("iconSelected", sIconSelected);
	return this;
};


/**
 * Getter for property <code>iconUnselected</code>.
 * The URI to the image which shall be displayed for all unselected rating symbols. If this attribute is used, a requirement is that all custom icons need to have the same size.
 * Note that when this attribute is used also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconUnselected</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getIconUnselected = function() {
	return this.getProperty("iconUnselected");
};

/**
 * Setter for property <code>iconUnselected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconUnselected  new value for property <code>iconUnselected</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setIconUnselected = function(sIconUnselected) {
	this.setProperty("iconUnselected", sIconUnselected);
	return this;
};


/**
 * Getter for property <code>iconHovered</code>.
 * The URI to the image which is displayed when the mouse hovers onto a rating symbol.
 * If used, a requirement is that all custom icons need to have the same size.
 * Note that when this attribute is used also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconHovered</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getIconHovered = function() {
	return this.getProperty("iconHovered");
};

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setIconHovered = function(sIconHovered) {
	this.setProperty("iconHovered", sIconHovered);
	return this;
};


/**
 * Getter for property <code>visualMode</code>.
 * Defines how float values are visualized: Full, Half, Continuous (see enumeration RatingIndicatorVisualMode)
 *
 * Default value is <code>Half</code>
 *
 * @return {sap.ui.commons.RatingIndicatorVisualMode} the value of property <code>visualMode</code>
 * @public
 * 
 */
sap.ui.commons.RatingIndicator.prototype.getVisualMode = function() {
	return this.getProperty("visualMode");
};

/**
 * Setter for property <code>visualMode</code>.
 *
 * Default value is <code>Half</code> 
 *
 * @param {sap.ui.commons.RatingIndicatorVisualMode} oVisualMode  new value for property <code>visualMode</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setVisualMode = function(oVisualMode) {
	this.setProperty("visualMode", oVisualMode);
	return this;
};


/**
 * The event is fired when the user has done a rating. 
 *
 * @name sap.ui.commons.RatingIndicator#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.RatingIndicator</code>.<br/>
 * The event is fired when the user has done a rating. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.attachChange = function(oData, fnFunction, oListener) {
	this.attachEvent("change", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.RatingIndicator</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	return this;	
};

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The rated value</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RatingIndicator.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	return this;
};


// Start of sap/ui/commons/RatingIndicator.js
/**
 * Control Initialization
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.init = function(){
	this.iHoveredRating = -1;
};

/**
 * Does all the cleanup when the RatingIndicator is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.exit = function (){
	// no super.exit() to call
};

/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onThemeChanged = function(oEvent){
	this.invalidate();
	this.rerender();
};

/**
 * Behavior implementation which is executed when the user presses Arrow Right (Left in RTL case) or Arrow Up.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapincrease = function(oEvent){
	var iNewHoverValue = this.iHoveredRating;

	if(iNewHoverValue == -1){
		iNewHoverValue = Math.round(this.getValue()) - 1;
		if(iNewHoverValue == -1){
			iNewHoverValue = 0;
		}
	}

	if(iNewHoverValue < this.getMaxValue()){
		iNewHoverValue = iNewHoverValue + 1;
	}else{
		iNewHoverValue = this.getMaxValue();
	}

	this.updateHoverState(oEvent, iNewHoverValue);
};

/**
 * Behavior implementation which is executed when the user presses Arrow Left (Right in RTL case) or Arrow Down.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapdecrease = function(oEvent){
	var iNewHoverValue = this.iHoveredRating;

	if(iNewHoverValue == -1 && Math.round(this.getValue()) == 0) {
		return;
	}

	if(iNewHoverValue == -1){
		iNewHoverValue = Math.round(this.getValue()) + 1;
	}

	if(iNewHoverValue > 1){
		iNewHoverValue = iNewHoverValue - 1;
	}else{
		iNewHoverValue = 1;
	}

	this.updateHoverState(oEvent, iNewHoverValue);
};

/**
 * Behavior implementation which is executed when the user presses Home.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsaphome = function(oEvent){
	this.updateHoverState(oEvent, 1);
};

/**
 * Behavior implementation which is executed when the user presses End.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapend = function(oEvent){
	this.updateHoverState(oEvent, this.getMaxValue());
};

/**
 * Behavior implementation which is executed when the user presses Enter or Space.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapselect = function(oEvent){
	this.saveValue(oEvent, true, this.iHoveredRating);
};

/**
 * Behavior implementation which is executed when the user presses Esc.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapescape = function(oEvent){
	this.saveValue(oEvent, true, -1);
};

/**
 * Behavior implementation which is executed when the control loses the focus.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onfocusout = function(oEvent){
	//Do not react on focusouts of child DOM refs in IE
	if(jQuery.browser.msie && oEvent.target != this.getDomRef()) {
		return;
	}
	this.saveValue(oEvent, false, this.iHoveredRating);
};

/**
 * Behavior implementation which is executed when the control gets the focus.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onfocusin = function(oEvent){
	//Avoid focusing child DOM refs in IE
	if(jQuery.browser.msie && oEvent.target != this.getDomRef()) {
		this.getDomRef().focus();
	}
};

/**
 * Behavior implementation which is executed when the user clicks on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onclick = function(oEvent){
	this.saveValue(oEvent, true, this.getSymbolValue(oEvent));
};

/**
 * Behavior implementation which is executed when the user moves the mouse on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onmouseover = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();

	if(!this.getEditable()) {
		return;
	}
	this.iHoveredRating = -1;

	var symbolValue = this.getSymbolValue(oEvent);
	if(symbolValue == -1){
		return;
	}

	for(var i=1; i<=symbolValue; i++){
		sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this);
	}
	for(var i=symbolValue+1; i<=this.getMaxValue(); i++){
		sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this, true);
	}
};

/**
 * Behavior implementation which is executed when the user moves the mouse out of the rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onmouseout = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();

	if(!this.getEditable()) {
		return;
	}

	if(jQuery.sap.checkMouseEnterOrLeave(oEvent, this.getDomRef())){
		this.iHoveredRating = -1;
		for(var i=1; i<=this.getMaxValue(); i++){
			sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		}
	}
};

/**
 * Returns the rating symbol value which is affected by the given event or -1
 * if the event was not on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.getSymbolValue = function(oEvent){
	var oSymbol = jQuery(oEvent.target);
	if(oSymbol.hasClass("sapUiRatingItmImg") || oSymbol.hasClass("sapUiRatingItmOvrflw")){
		oSymbol = jQuery(oEvent.target.parentNode);
	}else if(oSymbol.hasClass("sapUiRatingItmOvrflwImg")){
		oSymbol = jQuery(oEvent.target.parentNode.parentNode);
	}
	var itemvalue = oSymbol.attr("itemvalue");
	if(itemvalue){
		return parseInt(itemvalue, 10);
	}
	return -1;
};

/**
 * Updates the hover state according to the current pending keyboard input.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.updateKeyboardHoverState = function(bSkipHoverAfter){
	for(var i=1; i<=this.getMaxValue(); i++){
		sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		if(i <= this.iHoveredRating){
			sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this);
		}else if(!bSkipHoverAfter){
			sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this, true);
		}
	}
	this.setAriaState();
};

/**
 * Called by the framework when rendering is completed.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onAfterRendering = function() {
	this.setAriaState();
};

/**
 * Updates the ARIA state initially and in case of changes.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.setAriaState = function() {
	var val = this.iHoveredRating == -1 ? this.getValue() : this.iHoveredRating;
	jQuery.sap.byId(this.getId()).attr("aria-valuenow", val).attr("aria-valuetext", this._getText("RATING_ARIA_VALUE" , [val])).attr("aria-label", this._getText("RATING_ARIA_NAME"));
};

/**
 * Load language dependent texts.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype._getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};

/**
 * Helper function to save the value and fire the change event.
 *
 * @param {jQuery.Event} oEvent
 * @param {boolean} bstopEvent
 * @param {integer} iNewValue
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.saveValue = function(oEvent, bstopEvent, iNewValue) {
	if(bstopEvent){
		oEvent.preventDefault();
		// the control should not stop browser event propagation
		// Example: table control needs to catch and handle the event as well
		//oEvent.stopPropagation();
	}
	if(!this.getEditable()) {
		return false;
	}

	this.iHoveredRating = -1;
	if(iNewValue != -1 && iNewValue != this.getValue()){
		this.setValue(iNewValue);
		this.fireChange({value:iNewValue});
		return true;
	}else{
		//Update hover state only if value is not changed (otherwise rerendering is done anyway)
		for(var i=1; i<=this.getMaxValue(); i++){
			sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		}
		this.setAriaState();
		return false;
	}
};

/**
 * Helper function to update the hover state when keyboard is used.
 *
 * @param {jQuery.Event} oEvent
 * @param {interger} iNewHoverValue
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.updateHoverState = function(oEvent, iNewHoverValue) {
	oEvent.preventDefault();
	oEvent.stopPropagation();
	if(!this.getEditable()) {
		return;
	}
	this.iHoveredRating = iNewHoverValue;
	this.updateKeyboardHoverState();
};

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>5</code>
 * Minimum value is <code>1</code>
 *
 * @param {int} iMaxValue new value for property <code>maxValue</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setMaxValue = function(iMaxValue) {
	if(iMaxValue < 1) {
		iMaxValue = 1;
	}
	this.setProperty("maxValue", iMaxValue);
	return this;
};
}; // end of sap.ui.commons.RatingIndicator
if ( !jQuery.sap.isDeclared('sap.ui.commons.CheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.CheckBox.
jQuery.sap.declare("sap.ui.commons.CheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new CheckBox.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>checked : boolean</li>
 * <li>text : string</li>
 * <li>visible : boolean</li>
 * <li>enabled : boolean</li>
 * <li>editable : boolean</li>
 * <li>valueState : sap.ui.core.ValueState</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>name : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>change : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Provides a flaggable box and a label. A checkbox can either stand alone, or in a group with other checkboxes. As an option, the boxes can initially be set to status Not Editable.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.CheckBox = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.CheckBox.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.CheckBox. 
 * Resulting metadata can be obtained via sap.ui.commons.CheckBox.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.CheckBox", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getChecked", "setChecked", "bindChecked", "unbindChecked", "getText", "setText", "getVisible", "setVisible", "getEnabled", "setEnabled", "getEditable", "setEditable", "getValueState", "setValueState", "getWidth", "setWidth", "getTextDirection", "setTextDirection", "getName", "setName", 
    // aggregations
    
    // associations
    
    // events
    "attachChange", "detachChange", 
    // methods
    "toggle"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "checked" : {name : "checked", type : "boolean", group : "Data", defaultValue : false},
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : null},
    "visible" : {name : "visible", type : "boolean", group : "Misc", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "valueState" : {name : "valueState", type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
    "name" : {name : "name", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "change" : "change"
  }

});	

sap.ui.commons.CheckBox.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>checked</code>.
 * 
 * Checks the state of the control.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>checked</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getChecked = function() {
	return this.getProperty("checked");
};

/**
 * Setter for property <code>checked</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bChecked  new value for property <code>checked</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setChecked = function(bChecked) {
	this.setProperty("checked", bChecked);
	return this;
};


/**
 * Binder for property <code>checked</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.bindChecked = function(sPath, fnFormatter, sMode) {
	this.bindProperty("checked", sPath, fnFormatter, sMode);
	return this;
};

/**
 * Unbinder for property <code>checked</code>.
 *
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.unbindChecked = function() {
	this.unbindProperty("checked");
	return this;
};


/**
 * Getter for property <code>text</code>.
 * 
 * Defines the text displayed next to the checkbox.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible controls are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled controls are displayed in other colors, depending on user settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * 
 * Specifies whether or not the user can flag/unflag the checkbox.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>valueState</code>.
 * 
 * Accepts the core enumeration "ValueState.type" that supports "None", "Error", "Warning" and "Success".
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getValueState = function() {
	return this.getProperty("valueState");
};

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setValueState = function(oValueState) {
	this.setProperty("valueState", oValueState);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Control width results from the text length. Alternatively, the width can be set to an absolute value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * 
 * Inherits the text direction from its parent control/container. Alternatively, the value can be set to LTR or RTL.
 * 
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.commons.CheckBox.prototype.getName = function() {
	return this.getProperty("name");
};

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.setName = function(sName) {
	this.setProperty("name", sName);
	return this;
};


/**
 * 
 * Event is triggered when the control status is changed by the user.
 *  
 *
 * @name sap.ui.commons.CheckBox#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.checked 
					Checks whether the box is flagged or unflagged.
					
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.CheckBox</code>.<br/>
 * 
 * Event is triggered when the control status is changed by the user.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.attachChange = function(oData, fnFunction, oListener) {
	this.attachEvent("change", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.CheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CheckBox.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	return this;	
};

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'checked' of type <code>boolean</code> 
					Checks whether the box is flagged or unflagged.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.CheckBox.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	return this;
};


/**
 * 
 * Inverts the current value of the control.
 * 
 *
 * @name sap.ui.commons.CheckBox.prototype.toggle
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/CheckBox.js
/**
 * Event handler called when the checkbox is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onclick = function(oEvent) {
	if(jQuery.browser.msie && (!this.getEditable() || !this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in readOnly/disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused
		jQuery.sap.byId(this.getId()).attr("tabindex", 0).addClass("sapUiCbFoc"); // the CSS class itself is not used, but IE only draws the standard focus outline when it is added
	}

	this.userToggle(oEvent);
};

/**
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onfocusout = function(oEvent) {

	if(jQuery.browser.msie && (!this.getEditable() || !this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in readOnly/disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused - now unset this again
		jQuery.sap.byId(this.getId()).attr("tabindex", -1).removeClass("sapUiCbFoc");
	}
};

/**
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onsapspace = function(oEvent) {
	this.userToggle(oEvent);
};

/**
 * This method is used internally whenever the user toggles the checkbox value.
 * Purpose: Event cancelation and change event firing.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.userToggle = function(oEvent) {
	oEvent.preventDefault();
	if (this.getEnabled() && this.getEditable()) {
		this.toggle();
		this.fireChange({checked: this.getChecked()});
	} else {
		// CheckBox has been activated by the user, but value cannot be changed
		// do nothing, but restore the focus to the complete control, as the user might have clicked the <input> element which also can get the focus
		this.getDomRef().focus();
	}
};

// implement public method toggle()
sap.ui.commons.CheckBox.prototype.toggle = function() {
	this.setChecked(!this.getChecked());
};
}; // end of sap.ui.commons.CheckBox
if ( !jQuery.sap.isDeclared('sap.ui.commons.ApplicationHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ApplicationHeader.
jQuery.sap.declare("sap.ui.commons.ApplicationHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ApplicationHeader.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>logoSrc : string</li>
 * <li>logoText : string</li>
 * <li>displayLogoff : boolean</li>
 * <li>userName : string</li>
 * <li>displayWelcome : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>logoff : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The application header control stands on the top of any application page. It consists basically of 4 areas. Logo area/Function area provided by application/Search area/Logout area
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ApplicationHeader = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ApplicationHeader.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.ApplicationHeader. 
 * Resulting metadata can be obtained via sap.ui.commons.ApplicationHeader.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ApplicationHeader", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getLogoSrc", "setLogoSrc", "getLogoText", "setLogoText", "getDisplayLogoff", "setDisplayLogoff", "getUserName", "setUserName", "getDisplayWelcome", "setDisplayWelcome", 
    // aggregations
    
    // associations
    
    // events
    "attachLogoff", "detachLogoff"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "logoSrc" : {name : "logoSrc", type : "string", group : "Misc", defaultValue : null},
    "logoText" : {name : "logoText", type : "string", group : "Misc", defaultValue : null},
    "displayLogoff" : {name : "displayLogoff", type : "boolean", group : "Misc", defaultValue : true},
    "userName" : {name : "userName", type : "string", group : "Misc", defaultValue : null},
    "displayWelcome" : {name : "displayWelcome", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "logoff" : "logoff"
  }

});	

sap.ui.commons.ApplicationHeader.M_EVENTS = {'logoff':'logoff'};


/**
 * Getter for property <code>logoSrc</code>.
 * Path (src) to the logo icon to be displayed in the application header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoSrc</code>
 * @public
 * 
 */
sap.ui.commons.ApplicationHeader.prototype.getLogoSrc = function() {
	return this.getProperty("logoSrc");
};

/**
 * Setter for property <code>logoSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoSrc  new value for property <code>logoSrc</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.setLogoSrc = function(sLogoSrc) {
	this.setProperty("logoSrc", sLogoSrc);
	return this;
};


/**
 * Getter for property <code>logoText</code>.
 * The text that will be displayed beside the logo in the application header. This property is optional.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoText</code>
 * @public
 * 
 */
sap.ui.commons.ApplicationHeader.prototype.getLogoText = function() {
	return this.getProperty("logoText");
};

/**
 * Setter for property <code>logoText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoText  new value for property <code>logoText</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.setLogoText = function(sLogoText) {
	this.setProperty("logoText", sLogoText);
	return this;
};


/**
 * Getter for property <code>displayLogoff</code>.
 * If set to true, the logoff area will be displayed at the right hand side of the application header.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayLogoff</code>
 * @public
 * 
 */
sap.ui.commons.ApplicationHeader.prototype.getDisplayLogoff = function() {
	return this.getProperty("displayLogoff");
};

/**
 * Setter for property <code>displayLogoff</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayLogoff  new value for property <code>displayLogoff</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.setDisplayLogoff = function(bDisplayLogoff) {
	this.setProperty("displayLogoff", bDisplayLogoff);
	return this;
};


/**
 * Getter for property <code>userName</code>.
 * User name that will be displayed beside the welcome text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>userName</code>
 * @public
 * 
 */
sap.ui.commons.ApplicationHeader.prototype.getUserName = function() {
	return this.getProperty("userName");
};

/**
 * Setter for property <code>userName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUserName  new value for property <code>userName</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.setUserName = function(sUserName) {
	this.setProperty("userName", sUserName);
	return this;
};


/**
 * Getter for property <code>displayWelcome</code>.
 * By default, set to true and dislpays the welcome text
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayWelcome</code>
 * @public
 * 
 */
sap.ui.commons.ApplicationHeader.prototype.getDisplayWelcome = function() {
	return this.getProperty("displayWelcome");
};

/**
 * Setter for property <code>displayWelcome</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayWelcome  new value for property <code>displayWelcome</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.setDisplayWelcome = function(bDisplayWelcome) {
	this.setProperty("displayWelcome", bDisplayWelcome);
	return this;
};


/**
 * Fires an event to log off the user from the application.
 * No parameters. 
 *
 * @name sap.ui.commons.ApplicationHeader#logoff
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'logoff' event of this <code>sap.ui.commons.ApplicationHeader</code>.<br/>
 * Fires an event to log off the user from the application.
 * No parameters. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.attachLogoff = function(oData, fnFunction, oListener) {
	this.attachEvent("logoff", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'logoff' event of this <code>sap.ui.commons.ApplicationHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ApplicationHeader.prototype.detachLogoff = function(fnFunction, oListener) {
	this.detachEvent("logoff", fnFunction, oListener);
	return this;	
};

/**
 * Fire event logoff to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.ApplicationHeader.prototype.fireLogoff = function(mArguments) {
	this.fireEvent("logoff", mArguments);
	return this;
};


// Start of sap/ui/commons/ApplicationHeader.js
///**
// * This file defines behavior for the control,
// */
sap.ui.commons.ApplicationHeader.prototype.init = function(){
	this.initializationDone = false;
};

sap.ui.commons.ApplicationHeader.prototype.exit = function() {
	this.oLogo && this.oLogo.destroy();
	this.oLogoText && this.oLogoText.destroy();
	this.oLogoffBtn && this.oLogoffBtn.destroy();
};

/**
 * Create the composite parts out of the current settings.
 * Called by the renderer just before rendering
 * @private
 */
sap.ui.commons.ApplicationHeader.prototype.initControls = function() {

	//Application header to build sub-controls ids
	var appHeaderId = this.getId();

	//Get the texts from the resources bundle
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	//Create the logo image control and the title (textView) control
	this.oLogo && this.oLogo.destroy();
	this.oLogo = new sap.ui.commons.Image(appHeaderId + "-logoImg");
	this.oLogo.setTooltip(rb.getText("APPHDR_LOGO_TOOLTIP"));
	this.oLogo.setParent(this);
	this.oLogoText && this.oLogoText.destroy();
	this.oLogoText = new sap.ui.commons.TextView(appHeaderId + "-logoText");
	this.oLogoText.setAccessibleRole(sap.ui.core.AccessibleRole.Heading);
	this.oLogoText.setParent(this);

	//Log off button
	this.oLogoffBtn && this.oLogoffBtn.destroy();
	this.oLogoffBtn = new sap.ui.commons.Button(appHeaderId + "-logoffBtn");
	this.oLogoffBtn.setText(rb.getText("APPHDR_LOGOFF"));
	this.oLogoffBtn.attachPress(this.logoff,this);
	this.oLogoffBtn.setParent(this);
	this.oLogoffBtn.setLite(true);
}


/**
*  This event is fired when the user clicks on the Log Off button
*  @param oEvent The event triggered
*  @private
*/;
sap.ui.commons.ApplicationHeader.prototype.logoff = function(oEvent){
	this.fireLogoff();
};


// ---- Overwritten property setters to make sure the full area is rerendered correctly ----

sap.ui.commons.ApplicationHeader.prototype.setLogoSrc = function(sLogoSrc) {
	this.initializationDone = false;
	this.setProperty("logoSrc", sLogoSrc);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setLogoText = function(sLogoText) {
	this.initializationDone = false;
	this.setProperty("logoText", sLogoText);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setUserName = function(sUserName){
	this.initializationDone = false;
	this.setProperty("userName", sUserName);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setDisplayWelcome = function(bDisplayWelcome) {
	this.initializationDone = false;
	this.setProperty("displayWelcome", bDisplayWelcome);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setDisplayLogoff = function(bDisplayLogoff) {
	this.initializationDone = false;
	this.setProperty("displayLogoff", bDisplayLogoff);
	return this;
};
}; // end of sap.ui.commons.ApplicationHeader
if ( !jQuery.sap.isDeclared('sap.ui.commons.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.ProgressIndicator
jQuery.sap.declare("sap.ui.commons.ProgressIndicatorRenderer");

/**
 * @class ProgressIndicator renderer.
 * @static
 */
sap.ui.commons.ProgressIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ProgressIndicatorRenderer.render = function(oRenderManager, oProgressIndicator){
	// .convenience variable
	var rm = oRenderManager;
	var widthControl = oProgressIndicator.getWidth();
	var widthBar = oProgressIndicator.getPercentValue();
	var widthBorder;
	var positionEnd;
	oProgressIndicator.bRtl  = sap.ui.getCore().getConfiguration().getRTL();

	// return immediately if control is invisible
	if (!oProgressIndicator.getVisible()) {
		return;
	}

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	// write the HTML into the render manager
	rm.write('<DIV');
	rm.writeControlData(oProgressIndicator);

	rm.writeAttribute('tabIndex', '0');

	//ARIA
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
//		rm.writeAttribute("role", sap.ui.core.AccessibleRole.Slider);
		rm.writeAttribute('role', 'progressbar');
		rm.writeAccessibilityState(oProgressIndicator, {valuemin: '0%'});
		rm.writeAccessibilityState(oProgressIndicator, {valuemax: '100%'});
		rm.writeAccessibilityState(oProgressIndicator, {valuenow: widthBar + '%'});
//		rm.writeAccessibilityState(oProgressIndicator, {label:oSlider.getTooltip()});

//		if (!oProgressIndicator.getEditable()) {
//			rm.writeAccessibilityState(oProgressIndicator, {disabled: true});
//		}else {
//			rm.writeAccessibilityState(oProgressIndicator, {disabled: false});
//		}
	}

	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'height: 16px; width:' + widthControl + ';');
	}

	if (oProgressIndicator.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue() + '- '+ oProgressIndicator.getTooltip_AsString());
	}
	else {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue());
	}

	rm.addClass('sapUiProgInd');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-box');

	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'height: 16px; width:' + widthBorder + ';');
	}

	rm.addClass('sapUiProgIndBorder');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-bar');
	rm.writeAttribute('onselectstart', "return false");
	rm.writeAttribute('style', 'height: 14px; width:' + oProgressIndicator.getPercentValue() + '%;');

	var sBarColor = oProgressIndicator.getBarColor();
	switch (sBarColor) {
		case "POSITIVE":
			rm.addClass('sapUiProgIndBarPos');
			break;
		case "NEGATIVE":
			rm.addClass('sapUiProgIndBarNeg');
			break;
		case "CRITICAL":
			rm.addClass('sapUiProgIndBarCrit');
			break;
		case "NEUTRAL":
			rm.addClass('sapUiProgIndBar');
			break;
		default:
			rm.addClass('sapUiProgIndBar');
			break;
	}

	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-end');

	if (widthBar > 100) {
		switch (sBarColor) {
			case "POSITIVE":
				rm.addClass('sapUiProgIndPosEnd');
				break;
			case "NEGATIVE":
				rm.addClass('sapUiProgIndNegEnd');
				break;
			case "CRITICAL":
				rm.addClass('sapUiProgIndCritEnd');
				break;
			case "NEUTRAL":
				rm.addClass('sapUiProgIndEnd');
				break;
			default:
				rm.addClass('sapUiProgIndEnd');
				break;
		}
	}
	else {
		rm.addClass('sapUiProgIndEndHidden');
	}

	rm.writeClasses();
	if (oProgressIndicator.bRtl) {
		rm.writeAttribute('style', 'position: relative; right:' + widthBorder);
	} else {
		rm.writeAttribute('style', 'position: relative; left:' + widthBorder);
	}

	rm.write('>');
	rm.write('</DIV>');

	rm.write('<SPAN');

	rm.addClass('sapUiProgIndFont');
	rm.writeClasses();

	rm.write('>');

	if (oProgressIndicator.getShowValue()&& oProgressIndicator.getShowValue() == true) {
		if (oProgressIndicator.getDisplayValue() && oProgressIndicator.getDisplayValue() != '') {
			rm.writeEscaped(oProgressIndicator.getDisplayValue());
		}
	}

	rm.write('</SPAN>');
	rm.write('</DIV>');
	rm.write('</DIV>');
	rm.write('</DIV>');
};
}; // end of sap.ui.commons.ProgressIndicatorRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.ListBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.ListBox
jQuery.sap.declare("sap.ui.commons.ListBoxRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained


/**
 * @class ListBox Renderer
 *
 * @author d046011
 * @version 1.2.0
 * @static
 */
sap.ui.commons.ListBoxRenderer = {
};

/**
 * Renders the HTML for the ListBox, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.commons.ListBox} oListBox The ListBox control that should be rendered.
 */
sap.ui.commons.ListBoxRenderer.render = function(oRenderManager, oListBox) {
	var rm = oRenderManager,
		r = sap.ui.commons.ListBoxRenderer;

	// TODO: this is a prototype experimenting with an alternative to onAfterRendering for size calculations and corrections
	// Do not copy this approach for now!
	// Main problem: renderers are supposed to create a string, not DOM elements, e.g. so they could also run on the server. At least that was the idea in former times.
	if (r.borderWidths === undefined) {
		if (jQuery.browser.msie) { // all known IE versions have this issue
			var oFakeLbx = document.createElement("div");
			var oStaticArea = sap.ui.getCore().getStaticAreaRef();
			oStaticArea.appendChild(oFakeLbx);
			oFakeLbx.className = "sapUiLbx";
			var $fakeLbx = jQuery(oFakeLbx);
			$fakeLbx.css("width", "50px");
			$fakeLbx.css("min-width", "100px");
			r.borderWidths = oFakeLbx.offsetWidth - 100;
			oStaticArea.removeChild(oFakeLbx);
		} else {
			// all other browsers are fine
			r.borderWidths = 0;
		}
	}


	// Return immediately if control is invisible
	if (!oListBox.getVisible()) {
		return;
	}

	rm.addClass("sapUiLbx");
	var bStd = true;
	if (!oListBox.getEditable()) {
		rm.addClass("sapUiLbxRo");
		bStd = false;
	}
	if (!oListBox.getEnabled()) {
		rm.addClass("sapUiLbxDis");
		bStd = false;
	}
	if (bStd) {
		rm.addClass("sapUiLbxStd"); // neither readonly nor disabled - this helps the CSS
	}

	// Open the containing <div> tag
	rm.write("<div");

	rm.writeControlData(oListBox);

	var width = oListBox.getWidth();
	rm.addStyle("width", width);

	if (!width || (width == "auto") || (width == "inherit")) {
		rm.addClass("sapUiLbxFlexWidth");
	}

	rm.writeClasses();

	// min/max-widths need fixes in IE
	var sMinWidth = oListBox.getMinWidth();
	var sMaxWidth = oListBox.getMaxWidth();
	if (jQuery.browser.msie) {
		sMinWidth = r.fixWidth(sMinWidth);
		sMaxWidth = r.fixWidth(sMaxWidth);
	}
	rm.addStyle("min-width", sMinWidth);
	rm.addStyle("max-width", sMaxWidth);

	var renderDummy = false;
	if (oListBox._bHeightInItems) {
		if (oListBox._sTotalHeight != null) {
			rm.addStyle("height", oListBox._sTotalHeight); // calculated height available
		} else {
			// height will be calculated and set in onAfterRendering
		}
	} else {
		rm.addStyle("height", oListBox.getHeight()); // "normal" CSS height
	}
	rm.writeStyles();

	if (sap.ui.commons.ListBox._fItemHeight == -1) {
		renderDummy = true; // render the dummy if this is the first ListBox in the document
		sap.ui.commons.ListBox._fItemHeight = -2;
	}

	var tooltip = oListBox.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	rm.write(">");

	this.renderItemList(oListBox, rm, renderDummy);

	rm.write("</div>");
};

/**
 * Renders all items
 */
sap.ui.commons.ListBoxRenderer.renderItemList = function (oListBox, rm, bRenderDummy) {

	// Write the start tag
	rm.write("<ul id='" + oListBox.getId() + "-list'");

	rm.writeAttribute("tabindex", this.getTabIndex(oListBox));

	// add ARIA stuff
	rm.writeAttribute("role", "listbox");
	rm.writeAccessibilityState(oListBox, {multiselectable:oListBox.getAllowMultiSelect()});
	rm.write(">");

	var items = oListBox.getItems(),
		iRealItemIndex = 0, // to not count separators
		iRealItemCount = 0;

	for (var i = 0; i < items.length; i++) { // TODO: required only for ARIA setsize
		if (!(items[i] instanceof sap.ui.core.SeparatorItem)) {
			iRealItemCount++;
		}
	}
	
	var bMarkLastChild = (jQuery.browser.msie && (jQuery.browser.version == 8 || jQuery.browser.version == 7)); // IE8 workaround for "last-cild"
	var bDisplaySecondaryValues = oListBox.getDisplaySecondaryValues();
	
	// Write the rows with the items
	for (var i = 0; i < items.length; i++) {
		var item = items[i];

		if (item instanceof sap.ui.core.SeparatorItem) {
			// draw a separator
			rm.write("<div id='", oListBox.getId(), "-I", i, "' class='sapUiLbxSep' role='separator'><hr/>");

			// colspan is not available, so add more separator cells
			if (oListBox.getDisplayIcons()) {
				rm.write("<hr/>");
			}
			if (bDisplaySecondaryValues) {
				rm.write("<hr/>");
			}
			rm.write("</div>");

		} else {
			// regular ListItem or just a plain Item
			rm.write("<li id='", oListBox.getId(), "-I", i, "'");
			// Rethink whether 'Durchnummerierung' of ListItems in the line before makes sense or could be changed and maybe incoporate the following information into the item's id.
			rm.writeAttribute("data-sap-ui-id", item.getId());

			rm.addClass("sapUiLbxI");
			if (!item.getEnabled()) {
				rm.addClass("sapUiLbxIDis");
				rm.writeAttribute("tabindex", "-1");
			}
			if (oListBox.isIndexSelected(i)) {
				rm.addClass("sapUiLbxISel");
			}
			rm.writeClasses();

			// get the text values
			var sText = item.getText();
			var sSecondaryValue = item.getAdditionalText ? item.getAdditionalText() : ""; // allow usage of sap.ui.core.Item

			// tooltip
			if (item.getTooltip_AsString()) {
				rm.writeAttributeEscaped("title", item.getTooltip_AsString());
			} else {
				rm.writeAttributeEscaped("title", sText + ((bDisplaySecondaryValues && sSecondaryValue) ? "  --  " + sSecondaryValue : ""));
			}

			// ARIA  TODO: only in accessibility case
			rm.writeAccessibilityState(item, {selected:(i===oListBox.getSelectedIndex()), setsize:iRealItemCount, posinset:iRealItemIndex+1});
			rm.writeAttribute("role", "option");

			rm.write(">");


			// write icon column if required
			if (oListBox.getDisplayIcons()) {
				rm.write("<span class='sapUiLbxIIco'><img src='");
				// if the item has an icon, use it; otherwise use something empty
				if (item.getIcon && item.getIcon()) { // allow usage of sap.ui.core.Item
					rm.writeEscaped(item.getIcon());
				} else {
					rm.write(sap.ui.resource('sap.ui.commons', 'img/1x1.gif'));
				}
				rm.write("'/></span>");
			}

			// write the main text
			rm.write("<span class='sapUiLbxITxt");
			if (bMarkLastChild && !bDisplaySecondaryValues) {
				rm.write(" sapUiLbxILastChild");
			}
			rm.write("'");
			rm.writeAttribute("id", item.getId() + "-txt");
			var oTextAlign = oListBox.getValueTextAlign();
			if(oTextAlign) {
				rm.write("style='text-align:" + sap.ui.commons.ListBoxRenderer.getTextAlign(oTextAlign, null) + "'"); // TODO: check whether the ListBox needs its own textDirection property
			}
			rm.write(">");
			if(sText === "" || sText === null) {
				rm.write("&nbsp;");
			} else {
				rm.writeEscaped(sText);
			}

			// Potentially display second column
			if (bDisplaySecondaryValues) {
				rm.write("</span><span class='sapUiLbxISec");
				if (bMarkLastChild) {
					rm.write(" sapUiLbxILastChild");
				}
				rm.write("'");
				var oTextAlign = oListBox.getSecondaryValueTextAlign();
				if(oTextAlign) {
					rm.write("style='text-align:" + sap.ui.commons.ListBoxRenderer.getTextAlign(oTextAlign, null) + "'"); // TODO: check whether the ListBox needs its own textDirection property
				}
				rm.write(">");
				rm.writeEscaped(sSecondaryValue);
			}

			rm.write("</span></li>");
			iRealItemIndex++;
		}
	}

	// In case there was no item, a dummy element might be required for height measurements
	if (bRenderDummy && (items.length == 0)) {
		rm.write("<li id=\"");
		rm.write(oListBox.getId() + "-dummyItem");
		rm.write("\" class=\"sapUiLbxI\"><span class=\"sapUiLbxITxt\">&nbsp;</span></li>");
	}

	// Close the surrounding element
	rm.write("</ul>");
};


/**
 * If the given width is set in pixels, this method reduces the pixel width by the known total width of the borders.
 * Needed for IE which doesn't handle the combination of border-box and min/max-width correctly.
 * @private
 */
sap.ui.commons.ListBoxRenderer.fixWidth = function(sCssWidth) {
	if (sap.ui.commons.ListBoxRenderer.borderWidths > 0) {
		if (sCssWidth && jQuery.sap.endsWithIgnoreCase(sCssWidth, "px")) {
			var iWidth = parseInt(sCssWidth.substr(0, sCssWidth.length - 2), 10);
			var newWidth = iWidth - sap.ui.commons.ListBoxRenderer.borderWidths;
			if (newWidth >= 0) {
				return newWidth + "px";
			}
		}
	}
	return sCssWidth;
};

/**
 * The default TabIndex that should be set for the ListBox as well as for the selected element.
 * Can be overwritten in extending sub-classes.
 * @protected
 */
sap.ui.commons.ListBoxRenderer.getTabIndex = function(oListBox) {
	if (oListBox.getEnabled() && oListBox.getEditable()) {
		return 0;
	} else {
		return -1;
	}
};

/**
 * Adapts the item CSS classes after a selection change
 * @private
 */
sap.ui.commons.ListBoxRenderer.handleSelectionChanged = function(oListBox) { // TODO: handle tab stop
	var id = oListBox.getId();

	if (oListBox.getDomRef()) {
		var items = oListBox.getItems();
		for (var i = 0, l = items.length; i < l; i++) { // TODO: could take very long for long lists
			if (oListBox.isIndexSelected(i)) {
				jQuery.sap.byId(id + "-I" + i).addClass("sapUiLbxISel").attr("aria-selected", "true");
			} else {
				jQuery.sap.byId(id + "-I" + i).removeClass("sapUiLbxISel").attr("aria-selected", "false");
			}
		}
	}
};

/**
 * Set the active descendant of the ListBox to get correct announcements
 * @private
 */
sap.ui.commons.ListBoxRenderer.handleARIAActivedescendant = function(oListBox, iIndex) {
	var oDomRef = oListBox.getDomRef();
	if (oDomRef && oDomRef.firstChild) {
		oDomRef.firstChild.setAttribute("aria-activedescendant", oListBox.getId() + "-I" + iIndex);
	}
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.ListBoxRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap.ui.commons.ListBoxRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.TextArea
jQuery.sap.declare("sap.ui.commons.TextAreaRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class TextArea renderer.
 * @static
 */
sap.ui.commons.TextAreaRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Use TextField to render TextArea but change tag to TEXTAREA
 * @protected
 */
sap.ui.commons.TextAreaRenderer.getInnerTagName = function(){
	return('textarea');
}

/**
 * Add attributes, styles and so on to TextField tag
 */;
sap.ui.commons.TextAreaRenderer.renderInnerAttributes = function(oRenderManager, oTextArea){

	var rm = oRenderManager;

	rm.addClass("sapUiTxtA");

	rm.addStyle('overflow', 'auto');

	if (oTextArea.getWidth() && oTextArea.getWidth() != '') {
//		done in TextField renderer
	}else{
		if (oTextArea.getCols() && oTextArea.getCols() != '') {
			rm.writeAttribute('cols', oTextArea.getCols());
		}
	}

	if (oTextArea.getHeight() && oTextArea.getHeight() != '') {
		rm.addStyle('height',oTextArea.getHeight());
		//if a height is set don't use margin-top and margin-button because this would it make higher than wanted
		//this would lead to scrollbars or cut controls in layouts
		rm.addStyle('margin-top','0');
		rm.addStyle('margin-bottom','0');		
	}else{
		if (oTextArea.getRows() && oTextArea.getRows() != '') {
			rm.writeAttribute('rows', oTextArea.getRows());
		}
	}

	// Changes of the wrap property require re-rendering for browser reasons.
	// Therefore, no dynamic function to change wrapping necessary.
	switch (oTextArea.getWrapping()){
	case (sap.ui.core.Wrapping.Soft) :
		rm.writeAttribute('wrap', 'soft');
		break;
	case (sap.ui.core.Wrapping.Hard) :
		rm.writeAttribute('wrap', 'hard');
		break;
	case (sap.ui.core.Wrapping.Off) :
		rm.writeAttribute('wrap', 'off');
		break;
	}
}

/**
 * Overwrite renderARIAInfo function of TextField
 */;
sap.ui.commons.TextAreaRenderer.renderARIAInfo = function(rm, oTextArea) {

	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute('role', 'textbox');
		rm.writeAccessibilityState(oTextArea, {labelledby:oTextArea.getLabeledBy()});
		rm.writeAccessibilityState(oTextArea, {required:oTextArea.getRequired()});
		rm.writeAccessibilityState(oTextArea, {readonly:!oTextArea.getEditable()});
		rm.writeAccessibilityState(oTextArea, {multiline:true});
		rm.writeAccessibilityState(oTextArea, {autocomplete:"none"});
		if (oTextArea.getValueState() == sap.ui.core.ValueState.Error){
			rm.writeAccessibilityState(oTextArea, {invalid:true});
		}else{
			rm.writeAccessibilityState(oTextArea, {invalid:false});
		}
	}
};

/**
 * Renders additional HTML for the TextArea to the TextField
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.TextAreaRenderer.renderInnerContent = function(oRenderManager, oTextArea){
	// Convenience variable
	var rm = oRenderManager;

	var sValue = oTextArea.getValue();

	if(sValue.length > oTextArea.getMaxLength() && oTextArea.getMaxLength() > 0){
		sValue = sValue.substring(0,oTextArea.getMaxLength());
	}

	rm.writeEscaped(sValue);
};
}; // end of sap.ui.commons.TextAreaRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.DatePickerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.DatePicker
jQuery.sap.declare("sap.ui.commons.DatePickerRenderer");


/**
 * Registers our SAP-defined locales for jQuery to use (DatePicker and DateNavigator).
 * Examples can be found at: http://jquery-ui.googlecode.com/svn/trunk/ui/i18n/
 */
(function($){
	
	var regional = $.datepicker.regional;
	function define(sLocale, oSettings) {
		regional[sLocale] = jQuery.extend(regional[sLocale] || {}, oSettings);
	}
	
// SAP-defined English (DEFAULT) grammar:
	define('en', {
		dateFormat : 'dd/mm/yy',
		firstDay : 0,
		showMonthAfterYear : false,
		yearSuffix : ''
	});
	
// SAP-defined German grammar:
	define('de', {
		dateFormat : 'dd.mm.yy',
		firstDay : 1,
		showMonthAfterYear : false,
		yearSuffix : ''
	});
	
// SAP-defined French grammar:
	define('fr', {
		dateFormat : 'dd/mm/yy',
		firstDay : 1,
		showMonthAfterYear : false,
		yearSuffix : ''
	});

// SAP-defined Hebrew grammar:
/*	$.datepicker.regional['he'] = {
		closeText: 'סגור',
		prevText: 'הקודם',
		nextText: 'הבא',
		currentText: 'היום',
		monthNames: ['ינואר','פברואר','מרץ','אפריל','מאי','יוני','יולי','אוגוסט','ספטמבר','אוקטובר','נובמבר','דצמבר'],
		monthNamesShort: ['1','2','3','4','5','6','7','8','9','10','11','12'],
		dayNames: ['ראשון','שני','שלישי','רביעי','חמישי','שישי','שבת'],
		dayNamesShort: ['א\'','ב\'','ג\'','ד\'','ה\'','ו\'','שבת'],
		dayNamesMin: ['א\'','ב\'','ג\'','ד\'','ה\'','ו\'','שבת'],*/
	define('he', {
		dateFormat : 'dd/mm/yy',
		firstDay : 0,
		showMonthAfterYear : false,
		yearSuffix : ''
	});
	
}(jQuery));

/**
 * @class DatePicker renderer.
 * @static
 * For a common look&feel, the DatePicker extends the TextField control,
 * just like the ComboBox does.
 */
sap.ui.commons.DatePickerRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.DatePicker}
 *            oControl the DatePicker whose "value help" should be rendered
 * @private
 * P.S.: "renderOuterAttributes" is a reserved/hard-coded TextField extending function!
 *       It is used to allow extensions to display help icons.
 */
sap.ui.commons.DatePickerRenderer.renderOuterAttributes = function(rm, oControl) {
	// To share the overall ComboBox styling:
	// Note: Would be best if a more generic className had been used for this, like
	//       "sapUiTfIconContainer", as ComboBox and DatePicker and F4Help are likely
	//       to always share a common container look. (Only icon should differ.)
	//       Then, in the unlikely case where one of them would want to differ from the
	//       others, then this one would only need to add its own className on top of
	//       the generic one, e.g. "sapUiTfDateContainer" for the DatePicker.
	// Referencing "sapUiTfCombo" for now.
	rm.addClass("sapUiTfCombo");
	this.renderARIAInfo(rm, oControl);
};

/**
 * Renders additional HTML for the ComboBox to the TextField (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for
 *                                                 writing to the Render-Output-Buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should
 *                                     be rendered.
 */
sap.ui.commons.DatePickerRenderer.renderOuterContent = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	rm.write("<div");
	rm.writeAttribute('id', oControl.getId() + '-icon');
	// As mentioned above, a more generic "sapUiTfIcon" className could have been used...
	// One would just have had to add its own icon className!
	// Using "sapUiTfDateIcon" for now, as it proved easier to define instead of overwriting
	// the ComboBox image sources and backgrounds.
	rm.addClass("sapUiTfDateIcon");
	rm.writeClasses();
	rm.write("></div>"); //No Symbol for HCB Theme, as done by ComboBox.
};

/**
 * Renders ARIA information for the outer DIV
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for
 *                                                 writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should
 *                                     be rendered
 */
sap.ui.commons.DatePickerRenderer.renderARIAInfo = function(rm, oControl) {
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
	// Widgets are discrete user interface objects with which the user can interact.
	// Widget roles map to standard features in accessibility APIs.
	// When a user navigates an element assigned any of the non-abstract subclass roles of widget,
	// assistive technologies that typically intercept standard keyboard events SHOULD switch to
	// an application browsing mode, and pass keyboard events through to the web application.
	// The intent is to hint to certain assistive technologies to switch from normal browsing mode
	// into a mode more appropriate for interacting with a web application; some user agents have
	// a browse navigation mode where keys, such as up and down arrows, are used to browse the
	// document, and this native behavior prevents the use of these keys by a web application.
		rm.writeAttribute('role', 'widget');
		rm.writeAttribute('aria-haspopup', 'true');
		// IMPORTANT: According to jQuery forums, DatePicker Accessibility is to be delivered in a
		//            future release. No release mentionned.
		// So there is not much point about doing more about this at the moment.
	}
};
}; // end of sap.ui.commons.DatePickerRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Slider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Slider.
jQuery.sap.declare("sap.ui.commons.Slider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Slider.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>min : float</li>
 * <li>max : float</li>
 * <li>value : float</li>
 * <li>smallStepWidth : float</li>
 * <li>totalUnits : int</li>
 * <li>stepLabels : boolean</li>
 * <li>visible : boolean</li>
 * <li>editable : boolean</li>
 * <li>enabled : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>change : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>liveChange : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The interactive control is displayed as a horizontal line with a pointer and units of measurement.
 * Users can move the pointer along the line to change values with graphical support.
 * @extends sap.ui.core.Control
 *
 * @author Sebastian Allmann 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Slider = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Slider.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Slider. 
 * Resulting metadata can be obtained via sap.ui.commons.Slider.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Slider", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getMin", "setMin", "getMax", "setMax", "getValue", "setValue", "getSmallStepWidth", "setSmallStepWidth", "getTotalUnits", "setTotalUnits", "getStepLabels", "setStepLabels", "getVisible", "setVisible", "getEditable", "setEditable", "getEnabled", "setEnabled", 
    // aggregations
    
    // associations
    
    // events
    "attachChange", "detachChange", "attachLiveChange", "detachLiveChange"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "min" : {name : "min", type : "float", group : "Appearance", defaultValue : 0},
    "max" : {name : "max", type : "float", group : "Appearance", defaultValue : 100},
    "value" : {name : "value", type : "float", group : "Appearance", defaultValue : 50},
    "smallStepWidth" : {name : "smallStepWidth", type : "float", group : "Appearance", defaultValue : null},
    "totalUnits" : {name : "totalUnits", type : "int", group : "Appearance", defaultValue : null},
    "stepLabels" : {name : "stepLabels", type : "boolean", group : "Appearance", defaultValue : false},
    "visible" : {name : "visible", type : "boolean", group : "", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "change" : "change", 
    "liveChange" : "liveChange"
  }

});	

sap.ui.commons.Slider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Width of the slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>min</code>.
 * Minimal value of the slider.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>min</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getMin = function() {
	return this.getProperty("min");
};

/**
 * Setter for property <code>min</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMin  new value for property <code>min</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setMin = function(fMin) {
	this.setProperty("min", fMin);
	return this;
};


/**
 * Getter for property <code>max</code>.
 * Maximal value of the slider
 *
 * Default value is <code>100</code>
 *
 * @return {float} the value of property <code>max</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getMax = function() {
	return this.getProperty("max");
};

/**
 * Setter for property <code>max</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {float} fMax  new value for property <code>max</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setMax = function(fMax) {
	this.setProperty("max", fMax);
	return this;
};


/**
 * Getter for property <code>value</code>.
 * Current value of the slider. (Position of the grip.)
 *
 * Default value is <code>50</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getValue = function() {
	return this.getProperty("value");
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>50</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setValue = function(fValue) {
	this.setProperty("value", fValue);
	return this;
};


/**
 * Getter for property <code>smallStepWidth</code>.
 * The grip can only be moved in steps of this width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>smallStepWidth</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getSmallStepWidth = function() {
	return this.getProperty("smallStepWidth");
};

/**
 * Setter for property <code>smallStepWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fSmallStepWidth  new value for property <code>smallStepWidth</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setSmallStepWidth = function(fSmallStepWidth) {
	this.setProperty("smallStepWidth", fSmallStepWidth);
	return this;
};


/**
 * Getter for property <code>totalUnits</code>.
 * Number of units that are displayed by ticks. The PageUp and PageDown keys navigate according to these units.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>totalUnits</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getTotalUnits = function() {
	return this.getProperty("totalUnits");
};

/**
 * Setter for property <code>totalUnits</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTotalUnits  new value for property <code>totalUnits</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setTotalUnits = function(iTotalUnits) {
	this.setProperty("totalUnits", iTotalUnits);
	return this;
};


/**
 * Getter for property <code>stepLabels</code>.
 * Display step numbers for the ticks on the slider.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stepLabels</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getStepLabels = function() {
	return this.getProperty("stepLabels");
};

/**
 * Setter for property <code>stepLabels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStepLabels  new value for property <code>stepLabels</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setStepLabels = function(bStepLabels) {
	this.setProperty("stepLabels", bStepLabels);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible sliders are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Using the slider interactively requires value "true".
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.Slider.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Value was changed. This event is fired if the value has changed by an user action. Additionally it is fired on setValue if the value is changed because to fit step-wide. 
 *
 * @name sap.ui.commons.Slider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value Current value of the slider after a change. 
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.Slider</code>.<br/>
 * Value was changed. This event is fired if the value has changed by an user action. Additionally it is fired on setValue if the value is changed because to fit step-wide. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.attachChange = function(oData, fnFunction, oListener) {
	this.attachEvent("change", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	return this;	
};

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> Current value of the slider after a change. </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Slider.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	return this;
};


/**
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @name sap.ui.commons.Slider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value Current value of the slider after a change. 
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.Slider</code>.<br/>
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.attachLiveChange = function(oData, fnFunction, oListener) {
	this.attachEvent("liveChange", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.detachLiveChange = function(fnFunction, oListener) {
	this.detachEvent("liveChange", fnFunction, oListener);
	return this;	
};

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> Current value of the slider after a change. </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Slider.prototype.fireLiveChange = function(mArguments) {
	this.fireEvent("liveChange", mArguments);
	return this;
};


// Start of sap/ui/commons/Slider.js
///**
// * This file defines the control behavior.
// */
//sap.ui.commons.Slider.prototype.init = function(){
//   // do something for initialization...
//};

//jQuery.sap.require("sap.ui.core.EnabledPropagator");
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.apply(sap.ui.commons.Slider.prototype, [true]);

sap.ui.commons.Slider.prototype.onBeforeRendering = function() {
	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

sap.ui.commons.Slider.prototype.onAfterRendering = function () {

	// Warning in the case of wrong properties
	if( this.getMin() >= this.getMax() ){
		jQuery.sap.log.warning('Property wrong: Min:' + this.getMin() + ' > Max:' + this.getMax() );
	}

	this.oGrip = jQuery.sap.domById(this.getId() + '-grip');
	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oHiLi = jQuery.sap.domById(this.getId() + '-hili');
	this.bRtl  = sap.ui.getCore().getConfiguration().getRTL();
	this.bAcc  = sap.ui.getCore().getConfiguration().getAccessibility();

	var fNewValue = this.getValue();

	if(this.bRtl){
		// In the case of RTL, simulate non-RTL value. This is changed back in changeGrip.
		fNewValue = this.getMax() - fNewValue + this.getMin();
	}

	this.iDecimalFactor = this.calcDecimalFactor(this.getSmallStepWidth());

	// Get left shift for middle of grip. Use offsetWidth to include borders. Round to prevent calculation errors.
	this.iShiftGrip = Math.round(this.oGrip.offsetWidth / 2);

	// Calculate grip position
	var iNewPos = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.oBar.clientWidth ;

	// Move grip to hit the point in the middle
	this.changeGrip(fNewValue, iNewPos);

	if(this.getTotalUnits() > 0){
		// Move ticks to correct position; put it in the middle.
		// Round value shift factor separately to have the same behavior like for the grip position.

		var oTick = null;
		var oText = null;
		this.fTickDist = this.oBar.clientWidth / this.getTotalUnits();
		for (var i = 0; i <= this.getTotalUnits(); i++){
			oTick = jQuery.sap.domById(this.getId() + '-tick' + i);
			oTick.style.left = Math.round( ( this.fTickDist * i)) - Math.round(( oTick.offsetWidth / 2) ) + 'px';

			if( this.getStepLabels() && i > 0 && i < this.getTotalUnits()){
				oText = jQuery.sap.domById(this.getId() + '-text' + i);
				if(this.getSmallStepWidth() > 0 && this.iDecimalFactor > 0){
					jQuery(oText).text(Math.round( parseFloat(jQuery(oText).text()) * this.iDecimalFactor ) / this.iDecimalFactor);
				}
				if(!this.bRtl){
					oText.style.left = Math.round( ( this.fTickDist * i)) - Math.round(( oText.offsetWidth / 2) ) + 'px';
				}else{
					oText.style.left = Math.round( ( this.fTickDist * (this.getTotalUnits()-i))) - Math.round(( oText.offsetWidth / 2) ) + 'px';
				}
			}
		}
	}

	// Disable text selection
	this.allowTextSelection(false);

	// Register resize event
	this.oDomRef = this.getDomRef();
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.oDomRef, jQuery.proxy(this.onresize, this));

};

/**
 * Function is called when Slider is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onclick = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		// Check for ID where the behavior depends on the clicked area.
		var sMyTargetId = oEvent.target.getAttribute( 'ID' );

		var fNewValue = this.getValue();
		var iNewPos   = this.oGrip.offsetLeft + this.iShiftGrip;

		if(this.bRtl){
			// In the case of RTL, simulate non-RTL Value (changed back in changeGrip)
			fNewValue = this.getMax() - fNewValue + this.getMin();
		}

		switch ( sMyTargetId ){
		case ( this.oBar.id ):
		// Click on slide bar
			fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.oBar.clientWidth ) * oEvent.getOffsetX() );
			// new position = clicked position
			iNewPos = oEvent.getOffsetX() ;

			break;
		case ( this.getId() + '-left' ):
		// Click on left end
			// In HCB design, the Bar is very small so the left-hand area is behind the bar and clickable.
			var iOffsetBar = jQuery(this.oBar).offset();
			var iOffsetMe  = jQuery(oEvent.target).offset();
			iNewPos = oEvent.getOffsetX() - ( iOffsetBar.left - iOffsetMe.left );
			if( iNewPos < 0 ){
				iNewPos = 0;
			}
			fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.oBar.clientWidth ) * iNewPos );

			break;
		case ( this.getId() + '-right' ):
		// Click on right end
			// In HCB theme, there is a margin on the left-hand side, so the left div starts not at the left end.
			// In this case, the offset must be < than the width of the bar -> left-hand side
			if( oEvent.getOffsetX() < this.oBar.clientWidth ){
				fNewValue = this.getMin();
				// new position = 0
				iNewPos = 0 ;
			}else{
				fNewValue = this.getMax();
				// new position = max. width
				iNewPos = this.oBar.clientWidth ;
			}
			break;
		case ( this.oGrip.id ):
		// Grip position must not be changed when grip is only clicked
			return;
			break;
		default:
		// Check whether tick is clicked
			var iTickPos = sMyTargetId.search('-tick');
			if( iTickPos >= 0){
				var iTickNum = parseInt( sMyTargetId.slice( this.getId().length+5), 10);
				iNewPos = this.fTickDist * iTickNum;
				fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() ) / this.getTotalUnits() ) * iTickNum );

				break;
			}

		// Outer DIV clicked -> ID given by caller. This is the case if all other DIVs are smaller,
		// or if tick text is clicked
			var iOffsetBar = jQuery(this.oBar).offset();
			var iOffsetMe  = jQuery(oEvent.target).offset();
			iNewPos = oEvent.getOffsetX() - ( iOffsetBar.left - iOffsetMe.left );
			if( iNewPos <= 0 ){
				iNewPos = 0;
				fNewValue = this.getMin();
			}else{
				if( iNewPos >= this.oBar.clientWidth ){
					iNewPos = this.oBar.clientWidth;
					fNewValue = this.getMax();
				}else{
					fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.oBar.clientWidth ) * iNewPos );
				}
			}
			break;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();
	}

	// Set focus to grip
	this.oGrip.focus();

};

/**
 * Function is called when Slider is clicked
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onmousedown = function(oEvent) {
	if (this.getEditable() && this.getEnabled()){

		// Check for ID. This is only possible on the grip.
		var sMyTargetId = oEvent.target.getAttribute( 'ID' );

		if( sMyTargetId == this.oGrip.id ){
			this.bGripMousedown = true;

			// Remember start coordinates
			this.iStartDragX = oEvent.pageX;
			this.iStartDragY = oEvent.pageY;
			this.iStartLeft  = this.oGrip.offsetLeft + this.iShiftGrip;

			var oThat = this;
			this.handleMoveCall = function (event){
				oThat.handleMove(event);
			};

			jQuery(window.document).bind('mousemove', this.handleMoveCall);
			jQuery.sap.bindAnyEvent(jQuery.proxy(this.onAnyEvent, this));
		}
	}
};

/**
 * Function is called when Slider is unclicked
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onmouseup = function(oEvent) {
	if (this.getEditable() && this.getEnabled()){

		// Mouseup is handled on every div, not only on grip

		this.bGripMousedown = false;

		if (this.handleMoveCall) {
			jQuery(window.document).unbind('mousemove', this.handleMoveCall);
			jQuery.sap.unbindAnyEvent(this.onAnyEvent);

			if ( this.iStartLeft != ( this.oGrip.offsetLeft + this.iShiftGrip )){
				// Only if position was changed
				// only fire change event because liveChange is already fired in handleMove
				this.fireChange({value: this.getValue()});
			}

			this.handleMoveCall = null;
			this.iStartDragX    = null;
			this.iStartDragY    = null;
			this.iStartLeft     = null;

		}
	}

};

/**
 * Function is called when Slider is moved
 *
 * @param {DOM.Event} Event
 * @private
 */
sap.ui.commons.Slider.prototype.handleMove = function(event) {

	if (this.getEditable() && this.getEnabled() && this.bGripMousedown ){

		event = event || window.event;

		// Move is handled on every div, not only on grip

		var iNewPos = this.iStartLeft + event.pageX - this.iStartDragX;

		if( iNewPos <= 0 ){
			iNewPos = 0 ;
			var fNewValue = this.getMin();
		}else{
			if ( iNewPos >= this.oBar.clientWidth ){
				iNewPos = this.oBar.clientWidth ;
				var fNewValue = this.getMax();
			}else{
				var fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.oBar.clientWidth ) * iNewPos ) ;
			}
		}
		var fOldValue = this.getValue();
		this.changeGrip(fNewValue, iNewPos);
		fNewValue = this.getValue(); // get new value considering step width

		if ( fOldValue != fNewValue ){
			// fire event only if value changed
			this.fireLiveChange( { value: fNewValue } );
		}
	}

	event.cancelBubble = true;

	return false;

};

/**
 * Handles all events that occur outside the Popup and
 * dispatches it to the onOuterEvent
 * @param {jQuery.EventObject} oEvent The event object of the ui.core framework
 * @private
 */
sap.ui.commons.Slider.prototype.onAnyEvent = function (oEvent) {

	jQuery.sap.log.info('onAnyEvent fired: "' + oEvent.type + '"');

	// Skip if not editable or no drag operation in progress
	if ((!this.getEditable()) || (!this.getEnabled()) || !this.bGripMousedown){
		return;
	}

	// Every event that is not mousemove or mouseover is interpreted as mouseup
	if( oEvent.type == 'mouseover' || oEvent.type == 'mouseout' || oEvent.type == 'mousemove'  || oEvent.type == 'focusout' ){
		return;
	}

	// Check if outside of control
	var oSource = oEvent.target;
	if (!jQuery.sap.containsOrEquals(this.oDomRef,oSource) || oSource.tagName=="BODY") {
		this.onmouseup(oEvent);
	}

};

/**
 * Function is called when right arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapright = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		var fNewValue = this.getValue();
		var iNewPos   = this.oGrip.offsetLeft + this.iShiftGrip;

		if(this.bRtl){
			// In the case of RTL, simulate non-RTL value (changed back in changeGrip)
			fNewValue = this.getMax() - fNewValue + this.getMin();
		}

		if(this.getSmallStepWidth() > 0){
			// Step defined -> shift grip one step; at least one pixel, if step < 1px
			var fStepPixel = this.oBar.clientWidth / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if(fStepPixel > 1){
				fNewValue = fNewValue + this.getSmallStepWidth();
				iNewPos   = iNewPos + fStepPixel;
			}else{
				// Step < 1px -> shift grip to next step that is 1 pixel away
				fNewValue = fNewValue + ( 1 / fStepPixel * this.getSmallStepWidth() );
				iNewPos   = iNewPos + 1;
			}
		}else{
			// No step defined -> shift grip 1 pixel
			fNewValue = fNewValue + ( ( this.getMax() - this.getMin() ) / this.oBar.clientWidth );
			iNewPos   = iNewPos + 1;
		}

		if ( fNewValue >= this.getMax() || iNewPos >= this.oBar.clientWidth ){
			fNewValue = this.getMax();
			iNewPos   = this.oBar.clientWidth;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when left arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapleft = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		var fNewValue = this.getValue();
		var iNewPos   = this.oGrip.offsetLeft + this.iShiftGrip;

		if(this.bRtl){
			// In the case of RTL, simulate non-RTL Value (changed back in changeGrip)
			fNewValue = this.getMax() - fNewValue + this.getMin();
		}

		if(this.getSmallStepWidth() > 0){
			// Step defined -> shift grip one step (at least one pixel, if step < 1px)
			var fStepPixel = this.oBar.clientWidth / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if(fStepPixel > 1){
				fNewValue = fNewValue - this.getSmallStepWidth();
				iNewPos   = iNewPos - fStepPixel;
			}else{
				fNewValue = fNewValue - ( 1 / fStepPixel * this.getSmallStepWidth() );
				iNewPos   = iNewPos - 1;
			}
		}else{
			// No step defined -> shift grip one pixel
			fNewValue = fNewValue - ( ( this.getMax() - this.getMin() ) / this.oBar.clientWidth );
			iNewPos   = iNewPos - 1;
		}

		if ( fNewValue <= this.getMin() || iNewPos <= 0 ){
			fNewValue = this.getMin();
			iNewPos   = 0;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when up arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapup = function(oEvent) {

	if(!this.bRtl){
		// Normal case - UP similar to left
		this.onsapleft(oEvent);
	}else{
		// RTL case - UP similar to right
		this.onsapright(oEvent);
	}

};

/**
 * Function is called when DOWN arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapdown = function(oEvent) {

	if(!this.bRtl){
		// Normal case - DOWN similar to right
		this.onsapright(oEvent);
	}else{
		// RTL case - DOWN similar to left
		this.onsapleft(oEvent);
	}

};

/**
 * Function is called when "+" is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapexpand = function(oEvent) {

	if(!this.bRtl){
		// Normal case - "+" similar to right
		this.onsapright(oEvent);
	}else{
		// RTL case - "+" similar to left
		this.onsapleft(oEvent);
	}

};

/**
 * Function is called when "-" is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapcollapse = function(oEvent) {

	if(!this.bRtl){
		// Normal case - "-" similar to left
		this.onsapleft(oEvent);
	}else{
		// RTL case - "-" similar to right
		this.onsapright(oEvent);
	}

};

/**
 * Function is called when Home key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsaphome = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.bRtl){
			// Normal case - Min. is left
			var fNewValue = this.getMin();
			var iNewPos   = 0;
		}else{
			// RTL case - Min. is right
			var fNewValue = this.getMax(); // Because it is switched in changeGrip
			var iNewPos   = this.oBar.clientWidth;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when End key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapend = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.bRtl){
			// Normal case - Min. is left
			var fNewValue = this.getMax();
			var iNewPos   = this.oBar.clientWidth;
		}else{
			// RTL case - Min. is right
			var fNewValue = this.getMin(); // Because it is switched in changeGrip
			var iNewPos   = 0;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+right key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsaprightmodifiers = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.fPageSize){
			if(this.getTotalUnits() > 0){
				this.fPageSize = ( this.getMax() - this.getMin() ) / this.getTotalUnits();
			}else{
				this.fPageSize = ( this.getMax() - this.getMin() ) / 10;
			}
		}

		if(!this.bRtl){
			var fNewValue = this.getValue() + this.fPageSize;
		}else{
			var fNewValue = this.getMax() - this.getValue() + this.getMin() + this.fPageSize;
		}
		// Calculate iNewPos from fNewValue to prevent rounding errors after repeating pageUps
		var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.oBar.clientWidth ;

		if ( fNewValue >= this.getMax() || iNewPos >= this.oBar.clientWidth ){
			fNewValue = this.getMax();
			iNewPos   = this.oBar.clientWidth;
		}

		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+left key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapleftmodifiers = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.fPageSize){
			if(this.getTotalUnits() > 0){
				this.fPageSize = ( this.getMax() - this.getMin() ) / this.getTotalUnits();
			}else{
				this.fPageSize = ( this.getMax() - this.getMin() ) / 10;
			}
		}

		if(!this.bRtl){
			var fNewValue = this.getValue() - this.fPageSize;
		}else{
			var fNewValue = this.getMax() - this.getValue() + this.getMin() - this.fPageSize;
		}
		// Calculate iNewPos from fNewValue to prevent rounding errors after repeating pageDowns
		var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.oBar.clientWidth ;

		if ( fNewValue <= this.getMin() || iNewPos <= 0 ){
			fNewValue = this.getMin();
			iNewPos   = 0;
		}
		this.changeGrip(fNewValue, iNewPos);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+down key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapdownmodifiers = function(oEvent) {

	if(!this.bRtl){
		// Normal case - DOWN similar to right
		this.onsaprightmodifiers(oEvent);
	}else{
		// RTL case - DOWN similar to left
		this.onsapleftmodifiers(oEvent);
	}

};

/**
 * Function is called when Ctrl+Up key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapupmodifiers = function(oEvent) {

	if(!this.bRtl){
		// Normal case - UP similar to left
		this.onsapleftmodifiers(oEvent);
	}else{
		// RTL case - UP similar to right
		this.onsaprightmodifiers(oEvent);
	}

};

/**
 * Function is called when window is resized
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onresize = function(oEvent) {

	// If width of control changed -> grip position must be newly calculated

	var fNewValue = this.getValue();

	if(this.bRtl){
		// In the case of RTL case, simulate non-RTL Value (changed back in changeGrip)
		fNewValue = this.getMax() - fNewValue + this.getMin();
	}
	
	var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.oBar.clientWidth ;

	this.changeGrip(fNewValue, iNewPos);

	// Calculate tick positions newly
	if(this.getTotalUnits() > 0 && this.getDomRef()){ // only if rendered
		// Move ticks to correct position; put it in the middle
		// Round value shift factor separately to have the same behaviour like for grip position
		var oTick = null;
		var oText = null;
		this.fTickDist = this.oBar.clientWidth / this.getTotalUnits();
		for (var i = 0; i <= this.getTotalUnits(); i++){
			oTick = jQuery.sap.domById(this.getId() + '-tick' + i);
			oTick.style.left = Math.round( ( this.fTickDist * i)) - Math.round(( oTick.offsetWidth / 2) ) + 'px';

			if( this.getStepLabels() && i > 0 && i < this.getTotalUnits()){
				oText = jQuery.sap.domById(this.getId() + '-text' + i);
				if(this.getSmallStepWidth() > 0 && this.iDecimalFactor > 0){
					jQuery(oText).text(Math.round( parseFloat(jQuery(oText).text()) * this.iDecimalFactor ) / this.iDecimalFactor);
				}
				if(!this.bRtl){
					oText.style.left = Math.round( ( this.fTickDist * i)) - Math.round(( oText.offsetWidth / 2) ) + 'px';
				}else{
					oText.style.left = Math.round( ( this.fTickDist * (this.getTotalUnits()-i))) - Math.round(( oText.offsetWidth / 2) ) + 'px';
				}
			}
		}
	}

};

/**
 * Called after the theme has been switched. Some adjustments required.
 * @private
 */
sap.ui.commons.Slider.prototype.onThemeChanged = function (oEvent) {

	// Get left shift for middle of grip. Use offsetWidth to include borders. Round to prevent calculation errors.
	this.iShiftGrip = Math.round(this.oGrip.offsetWidth / 2);

	// Use resize function to adjust grip and ticks
	this.onresize();

};

/**
 * Function is called when grip position shall be changed
 *
 * @param fNewValue iNewPos
 * @private
 */
sap.ui.commons.Slider.prototype.changeGrip = function(fNewValue, iNewPos) {

	// Only if position was changed
	if ( iNewPos != ( this.oGrip.offsetLeft + this.iShiftGrip ) ){

		if( this.getSmallStepWidth() > 0 ){
			// Move grip according to step-width
			var iStepNum   = parseInt( ( fNewValue - this.getMin() ) / this.getSmallStepWidth() , 10);
			var fLeftStep  = ( iStepNum * this.getSmallStepWidth() ) + this.getMin();
			var fRightStep = ( ( iStepNum + 1 ) * this.getSmallStepWidth() ) + this.getMin();

			if ( fRightStep > this.getMax() ){
				fRightStep = this.getMax();
			}

			var fStepPixel = this.oBar.clientWidth / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if( ( fNewValue - fLeftStep ) < ( fRightStep - fNewValue ) ){
				fNewValue = fLeftStep;
				iNewPos   = iStepNum * fStepPixel;
			}else{
				fNewValue = fRightStep;
				iNewPos   = ( iStepNum + 1 ) * fStepPixel;
				if ( iNewPos > this.oBar.clientWidth ){
					iNewPos = this.oBar.clientWidth;
				}
			}
			// Round value because of calculation errors in JavaScript
			fNewValue = Math.round( fNewValue * this.iDecimalFactor ) / this.iDecimalFactor;
		}

		if(this.bRtl){
			// In the case of RTL, the value must be changed because min. and max. are switched
			fNewValue = this.getMax() - fNewValue + this.getMin();
		}

		this.setProperty( 'value', fNewValue, true ); // Do not render complete control again
		this.oGrip.title = fNewValue;
		// Reduce position with half grip-width to center the grip. Round because Internet Explorer does not round automatically.
		this.oGrip.style.left = Math.round(iNewPos - this.iShiftGrip) + 'px';

		// Adjust highlight bar
		if(this.bRtl){
			// In the case of RTL, highlight must be on right side
			this.oHiLi.style.width = this.oBar.clientWidth - Math.round(iNewPos) + 'px';
		}else{
			this.oHiLi.style.width = Math.round(iNewPos) + 'px';
		}

		if(this.bAcc){
			this.setAriaState();
		}
	}

};

/**
 * Function to calculate the decimals of a value
 *
 * Problem:  If the step-width has decimals in JavaScript, there are calculation errors.
 *           e.g. 2.01*10= 20.099999999999998 instead of 20.1
 *           This is not sufficient as result for the value of sliding step-wise.
 *           Therefore the value is rounded with the numbers of decimals the step-width has.
 *           This is not possible using the modulo or any other Math function because
 *           of the mentioned calculation error.
 * Solution: The idea is to search for the "." in the string and to calculate the rounding factor.
 *
 * @param {DOM.Event} Event
 * @private
 */
sap.ui.commons.Slider.prototype.calcDecimalFactor = function(Value) {

	var iFactor = 1;

	if( !( Value > 0 )){
		return iFactor;
	}

	var sMyString = String( Value );

	if( sMyString.indexOf( '.' ) >= 0 ){
		// Number of decimals = length of all numbers after the "." Subtract the numbers before the "." and the "." itself.
		var iMyExp = sMyString.length - sMyString.indexOf( '.' ) - 1;
	}else{
		if( sMyString.indexOf( 'e-' ) >= 0 ){
			// Floating point number -> number of decimals is number after "e-"
			var iMyExp = sMyString.slice(sMyString.indexOf( 'e-' ) + 2);
		}else{
			return iFactor;
		}
	}

	for (var i = 1; i <= iMyExp; i++){
		iFactor = iFactor * 10;
	}

	return iFactor;

};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the editable state 
 *
 * @param bEditable Whether the Slider should be editable, or not (read-only then)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEditable = function(bEditable) {

	this.setProperty('editable', bEditable, true); // No re-rendering

	if (this.oDomRef && this.getEnabled()){
		// If already rendered, adapt rendered control without complete re-rendering
		if (bEditable) {
			jQuery(this.oDomRef).removeClass('sapUiSliRo').addClass('sapUiSliStd');
			if(this.bAcc){
				jQuery(this.oGrip).attr('aria-disabled', false);
			}
		} else {
			jQuery(this.oDomRef).removeClass('sapUiSliStd').addClass('sapUiSliRo');
			if(this.bAcc){
				jQuery(this.oGrip).attr('aria-disabled', true);
			}
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the enabled state
 *
 * @param bEnabled Whether the Slider should be ednabled, or not (disabled)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEnabled = function(bEnabled) {

	this.setProperty('enabled', bEnabled, true); // No re-rendering

	if (this.oDomRef){
		// If already rendered, adapt rendered control without complete re-rendering
		jQuery(this.oDomRef).toggleClass('sapUiSliDsbl', !bEnabled);
		if( bEnabled ){
			jQuery(this.oGrip).attr('tabindex', '0');
			// set classes according editable state
			if (this.getEditable()) {
				jQuery(this.oDomRef).addClass('sapUiSliStd');
				if(this.bAcc){
					jQuery(this.oGrip).attr('aria-disabled', false);
				}
			} else {
				jQuery(this.oDomRef).addClass('sapUiSliRo');
				if(this.bAcc){
					jQuery(this.oGrip).attr('aria-disabled', true);
				}
			}
		}else{
			jQuery(this.oGrip).attr('tabindex', '-1').attr('aria-disabled', true);
			if (this.getEditable()) {
				jQuery(this.oDomRef).removeClass('sapUiSliStd');
			} else {
				jQuery(this.oDomRef).removeClass('sapUiSliRo');
			}
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the totalUnits state
 *
 * @param iTotalUnits Number of the units (tick-spaces)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setTotalUnits = function(iTotalUnits) {

	this.setProperty('totalUnits', iTotalUnits, false); // Do re-rendering

	// Clear this.fPageSize -> must be re-calculated
	this.fPageSize = false;

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the value
 * A new rendering is not necessary, only the grip must be moved.
 *
 * @param fValue
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setValue = function(fValue) {

	this.setProperty('value', fValue, true); // No re-rendering

	// Check for number -> if NaN -> no change
	if( isNaN(fValue) ){
		return this;
	}

	if(!this.oBar){
		// Not already rendered -> return and render
		return this;
	}

	var fNewValue = parseFloat( fValue );

	if(this.bRtl){
		// In the case of RTL case, simulate non-RTL Value (changed back in changeGrip)
		fNewValue = this.getMax() - fNewValue + this.getMin();
	}

	if( fNewValue >= this.getMax() ){
		fNewValue   = this.getMax();
		var iNewPos = this.oBar.clientWidth;
	}else{
		if( fNewValue <= this.getMin() ){
			fNewValue   = this.getMin();
			var iNewPos = 0;
		}else{
			var iNewPos = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.oBar.clientWidth ;
		}
	}

	this.changeGrip( fNewValue, iNewPos );

	return this;

};

/**
 * fires the change event. The liveChange event must be fired too if the change event is fired.
 *
 * @private
 */
sap.ui.commons.Slider.prototype.handleFireChange = function() {
	this.fireChange({value: this.getValue()});
	this.fireLiveChange({value: this.getValue()});
};

/**
 * Updates the ARIA state initially and in case of changes.
 *
 * @private
 */
sap.ui.commons.Slider.prototype.setAriaState = function() {

	var fValue = this.getValue();

	this.oGrip.setAttribute('aria-valuenow', fValue);
	this.oGrip.setAttribute('aria-valuetext', 'Value ' + fValue); // to prevent JAWS from saying "percent"

};

/*
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.Slider.prototype.getFocusDomRef = function() {
	return this.oGrip;
};

/*
 * Overwrites default implementation
 * the label must point to the grip
 * @public
 */
sap.ui.commons.Slider.prototype.getIdForLabel = function () {
	return this.getId()+'-grip';
};
}; // end of sap.ui.commons.Slider
if ( !jQuery.sap.isDeclared('sap.ui.commons.TabStrip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TabStrip.
jQuery.sap.declare("sap.ui.commons.TabStrip");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TabStrip.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>selectedIndex : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>tabs : sap.ui.commons.Tab</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>close : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * A container for tab controls which contain the content and generally other controls. The user switches between the tabs then to display the content.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.TabStrip = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.TabStrip.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.TabStrip. 
 * Resulting metadata can be obtained via sap.ui.commons.TabStrip.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.TabStrip", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getHeight", "setHeight", "getWidth", "setWidth", "getSelectedIndex", "setSelectedIndex", 
    // aggregations
    "getTabs", "insertTab", "addTab", "removeTab", "removeAllTabs", "indexOfTab", "destroyTabs", 
    // associations
    
    // events
    "attachSelect", "detachSelect", "attachClose", "detachClose", 
    // methods
    "createTab", "closeTab"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "selectedIndex" : {name : "selectedIndex", type : "int", group : "Misc", defaultValue : 0}
  },
  defaultAggregation : "tabs",
  aggregations : {
    "tabs" : {name : "tabs", type : "sap.ui.commons.Tab", multiple : true, singularName : "tab"}
  },
  associations : {},
  events : {
    "select" : "select", 
    "close" : "close"
  }

});	

sap.ui.commons.TabStrip.M_EVENTS = {'select':'select','close':'close'};


/**
 * Getter for property <code>height</code>.
 * Height includes tab bar and content area.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.TabStrip.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Width includes tab bar and content area.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.TabStrip.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>selectedIndex</code>.
 * Index of the currently selected tab.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * 
 */
sap.ui.commons.TabStrip.prototype.getSelectedIndex = function() {
	return this.getProperty("selectedIndex");
};

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.setSelectedIndex = function(iSelectedIndex) {
	this.setProperty("selectedIndex", iSelectedIndex);
	return this;
};

	
/**
 * Getter for aggregation <code>tabs</code>.<br/>
 * Aggregating tabs contained in the tab strip.
 * 
 * @return {sap.ui.commons.Tab[]}
 * @public
 */
sap.ui.commons.TabStrip.prototype.getTabs = function() {
	return this.getAggregation("tabs", []);
};


/**
 * Inserts a tab into the aggregation named <code>tabs</code>.
 *
 * @param {sap.ui.commons.Tab}
 *          oTab the tab to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tab should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tab is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tab is inserted at 
 *             the last position        
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.insertTab = function(oTab, iIndex) {
	this.insertAggregation("tabs", oTab, iIndex);
	return this;
};

/**
 * Adds some tab <code>oTab</code> 
 * to the aggregation named <code>tabs</code>.
 *
 * @param {sap.ui.commons.Tab}
 *            oTab the tab to add; if empty, nothing is inserted
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.TabStrip.prototype.addTab = function(oTab) {
	this.addAggregation("tabs", oTab);
	return this;
};

/**
 * Removes an tab from the aggregation named <code>tabs</code>.
 *
 * @param {int | string | sap.ui.commons.Tab} vTab the tab to remove or its index or id
 * @return {sap.ui.commons.Tab} the removed tab or null
 * @public
 */
sap.ui.commons.TabStrip.prototype.removeTab = function(vTab) {
	return this.removeAggregation("tabs", vTab);
};

/**
 * Removes all the controls in the aggregation named <code>tabs</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Tab[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.TabStrip.prototype.removeAllTabs = function() {
	return this.removeAllAggregation("tabs");
};

/**
 * Checks for the provided <code>sap.ui.commons.Tab</code> in the aggregation named <code>tabs</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Tab}
 *            oTab the tab whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.TabStrip.prototype.indexOfTab = function(oTab) {
	return this.indexOfAggregation("tabs", oTab);
};
	

/**
 * Destroys all the tabs in the aggregation 
 * named <code>tabs</code>.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.destroyTabs = function() {
	this.destroyAggregation("tabs");
	return this;
};


/**
 * Event is fired when the user selects a tab. 
 *
 * @name sap.ui.commons.TabStrip#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.index Index of the selected tab.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 * Event is fired when the user selects a tab. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'index' of type <code>int</code> Index of the selected tab.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TabStrip.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


/**
 * Event is fired when the user closes a tab. 
 *
 * @name sap.ui.commons.TabStrip#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.index Index of the closed tab.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 * Event is fired when the user closes a tab. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.attachClose = function(oData, fnFunction, oListener) {
	this.attachEvent("close", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.detachClose = function(fnFunction, oListener) {
	this.detachEvent("close", fnFunction, oListener);
	return this;	
};

/**
 * Fire event close to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'index' of type <code>int</code> Index of the closed tab.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TabStrip.prototype.fireClose = function(mArguments) {
	this.fireEvent("close", mArguments);
	return this;
};


/**
 * Convenient method to add a tab with a text as title and a root control as content.
 *
 * @name sap.ui.commons.TabStrip.prototype.createTab
 * @function
 * @param {string} 
 *         sText
 *         Defines the title text of the newly created tab.
 * @param {sap.ui.core.Control} 
 *         oContent
 *         Defines the root control of the content area.

 * @type void
 * @public
 */


/**
 * This method closes a atb. If the tab is selecte thenext one will be selected. (If it's the last the previous one will be selected,)
 * This method should be called if the close event is fired. It can not be called automatically because the consumer might need to run some logic before the tab is closed.
 *
 * @name sap.ui.commons.TabStrip.prototype.closeTab
 * @function
 * @param {int} 
 *         iIndex
 *         Index of the tab that should be closed.

 * @type void
 * @public
 */


// Start of sap/ui/commons/TabStrip.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.ui.commons.TabStrip.prototype.onAfterRendering = function() {
	// find a collection of all tabs
	var oFocusRef = this.getFocusDomRef(),
		aTabs = oFocusRef.lastChild.childNodes,
		aTabDomRefs = [],
		iSelectedDomIndex = -1;
	for (var i=0;i<aTabs.length;i++) {
		aTabDomRefs.push(aTabs[i]);
		if(jQuery(aTabs[i]).hasClass("sapUiTabSel")){
			// get selected index out of visible tabs for ItemNavigation
			iSelectedDomIndex = i;
		}
	}
	//Initialize the ItemNavigation
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}
	//Reinitialize the ItemNavigation after rendering
	this.oItemNavigation.setRootDomRef(oFocusRef);
	this.oItemNavigation.setItemDomRefs(aTabDomRefs);
	this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);

	//Notify the tabs
	var aTabs = this.getTabs();
	for (var i=0;i<aTabs.length;i++) {
		aTabs[i].onAfterRendering();
	}
};

/**
 * Convenient method to add a tab with a text as title and a root control as content.
 *
 * @param {string}
 *         sText defines the title text of the newly created tab
 * @param {sap.ui.core.Control}
 *        oContent defines the root control of the content of the tab
 * @return
 * @type {sap.ui.commons.Tab}
 * @public
 */
sap.ui.commons.TabStrip.prototype.createTab = function(sText,oContent) {
	var oTabs = this.getTabs(),
		oTitle = new sap.ui.commons.Title(this.getId() + "-" + oTabs.length + "-title",{text:sText}),
		oTab = new sap.ui.commons.Tab(this.getId() + "-" + oTabs.length);
	oTab.setTitle(oTitle);
	oTab.addContent(oContent);
	this.addTab(oTab);
	return oTab;
};

/**
 * Finds and fires the select event of a tab of a given Dom Reference
 * if it is a Dom ref of a tab title.
 * @private
 */
sap.ui.commons.TabStrip.prototype.selectTabByDomRef = function(oDomRef) {
	var iIdx = this.getItemIndex(oDomRef);
	if (iIdx > -1) {
		//its an item, find the items index
		if ((iIdx != this.getSelectedIndex()) && (this.getTabs()[iIdx].getEnabled())) {
			var iOldIndex = this.getSelectedIndex();
			this.setProperty( 'selectedIndex', iIdx, true ); // no complete rerendering required

			this.rerenderPanel(iOldIndex);

			this.oItemNavigation.setSelectedIndex(this.oItemNavigation.getFocusedIndex());

			this.fireSelect({index:iIdx});
		}
	}
};

/**
 * Handles the SPACEBAR press
 * @private
 */
sap.ui.commons.TabStrip.prototype.onsapspace = function(oEvent) {
	var oSource = oEvent.target;
	this.selectTabByDomRef(oSource);
};

// ENTER and SPACE with modifiers is the same like SPACE
sap.ui.commons.TabStrip.prototype.onsapspacemodifiers = sap.ui.commons.TabStrip.prototype.onsapspace;
sap.ui.commons.TabStrip.prototype.onsapenter = sap.ui.commons.TabStrip.prototype.onsapspace;
sap.ui.commons.TabStrip.prototype.onsapentermodifiers = sap.ui.commons.TabStrip.prototype.onsapspace;

/**
 * Handles the DELETE press
 * @private
 */
sap.ui.commons.TabStrip.prototype.onsapdelete = function(oEvent) {

	var oSource = oEvent.target;
	var iIdx = this.getItemIndex(oSource);
	if (iIdx > -1 && this.getTabs()[iIdx].getClosable()) {
		//item is closable
		this.fireClose({index:iIdx});
	}

};

/**
 * Handles the click event.
 * @private
 */
sap.ui.commons.TabStrip.prototype.onclick = function(oEvent) {
	var oSource = oEvent.target,
		oDomRef = this.getDomRef();
	if (oSource.className == "sapUiTabClose") {
		//find the items index
		var iIdx = this.getItemIndex(jQuery(oSource).parentByAttribute("id"));
		if (iIdx > -1) {
			this.fireClose({index:iIdx});
		}
		return;
	}
	this.selectTabByDomRef(oSource);
};

/**
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.TabStrip.prototype.getFocusDomRef = function() {
	return this.getDomRef().firstChild;
};

/**
 * Does all the cleanup when the TabStrip is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.TabStrip.prototype.exit = function (){
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}

	// no super.exit() to call
};

sap.ui.commons.TabStrip.prototype.getItemIndex = function(oDomRef) {

	var sId;
	if(!oDomRef.id || oDomRef.id.search("-close") != -1){
		// icon or close button
		var oItemDomRef = jQuery(oDomRef).parentByAttribute("id");
		sId = oItemDomRef.id;
	}else{
		sId = oDomRef.id;
	}

	for (var idx = 0, aTabs = this.getTabs(); idx < aTabs.length; idx++) {
		if (sId == aTabs[idx].getId()) {
			return idx;
		}
	}
	return -1;
};

// Override aggregation methods if something needs to be taken care of

/**
 * Overwrite of default method
 * Removes an tab from the aggregation named <code>tabs</code>.
 *
 * @param {int | string | sap.ui.commons.Tab} vTab the tab to remove or its index or id
 * @return {sap.ui.commons.Tab} the removed tab or null
 * @public
 */
sap.ui.commons.TabStrip.prototype.removeTab = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfTab(vElement);
	}

	var oTab = this.getTabs()[iIndex];
	if(oTab.getVisible()){
		// set tab invisible during hiding it for changing classes of tabs
		oTab.setProperty("visible",false,true); // no rerendering
		this.hideTab(iIndex);
		oTab.setProperty("visible",true,true); // no rerendering
	}

	if(this.getSelectedIndex() > iIndex){
		this.setProperty( 'selectedIndex', this.getSelectedIndex() - 1, true ); // no complete rerendering required		
	}
	return this.removeAggregation("tabs", iIndex, true); // no complete rerendering required	
};

/**
 * Overwite of defaultSetter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code>
 *
 * @param {int} iSelectedIndex new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.setSelectedIndex = function(iSelectedIndex) {

	if(!this.getTabs()[iSelectedIndex] && !this.getDomRef())
	{
		// tab don't exist but not rendered. In initial setup index might be set before tab is added
		// But if already rendered this is not allowed, tab must exist
		this.setProperty( 'selectedIndex', iSelectedIndex, false ); // rendering needed

	}else if(this.getTabs()[iSelectedIndex].getEnabled() && this.getTabs()[iSelectedIndex].getVisible()){
		var iOldIndex = this.getSelectedIndex();
		this.setProperty( 'selectedIndex', iSelectedIndex, true ); // no complete rerendering required
		if (this.getDomRef()){
			// already rendered
			this.rerenderPanel(iOldIndex);
			if(this.oItemNavigation){
				// set selected index for ItemNavigation, ignore invisible tabs.
				var iVisibleIndex = 0;
				var iSelectedDomIndex = -1;
				for (var i=0;i<this.getTabs().length;i++) {
					var oTab = this.getTabs()[i];
					if(oTab.getVisible() === false) {
						continue;
					}
					if(i == this.getSelectedIndex()){
						iSelectedDomIndex = iVisibleIndex;
						break;
					}
					iVisibleIndex++;
				}
				this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);
			}
		}
	}

	return this;
};

/**
 * Close a tab. If selected, select the next one
 *
 * @param {int} iIndex tab to be closed
 * @public
 */
sap.ui.commons.TabStrip.prototype.closeTab = function(iIndex) {

	var oTab = this.getTabs()[iIndex];

	if(!oTab || !oTab.getClosable() || !oTab.getVisible()){
		return;
	}

	// close tab -> set to invisible
	oTab.setProperty("visible",false,true); // no rerendering

	this.hideTab(iIndex);
};

/**
 * removes a tab from output
 *
 * @param {int} iIndex tab to be closed
 * @private
 */
sap.ui.commons.TabStrip.prototype.hideTab = function(iIndex) {
	var oTab = this.getTabs()[iIndex];

	if (!this.getDomRef()){
		return; //if not already rendered selected index should be provided by caller
	}
	
	// get focused index and visible index of tab
	var iFocusedIndex = this.oItemNavigation.getFocusedIndex();
	var iVisibleIndex = parseInt(jQuery.sap.byId(oTab.getId()).attr("aria-posinset"), 10) - 1;
	var sFocusedControlId = sap.ui.getCore().getCurrentFocusedControlId();

	// delete only tab from DOM ->no rerendering of other tabs necessary
	jQuery.sap.byId(oTab.getId()).remove();

	if(this.iVisibleTabs == 1){
		// last visible tab is closed -> no new selected tab and no content
		this.setProperty( 'selectedIndex', -1, true ); // no complete rerendering required
		jQuery.sap.byId(oTab.getId()+"-panel").remove();
	}else if(iIndex == this.getSelectedIndex()){
		// selected tab should be closed -> select other one

		var iNewIndex = iIndex + 1;

		while(iNewIndex < this.getTabs().length && (!this.getTabs()[iNewIndex].getEnabled() || !this.getTabs()[iNewIndex].getVisible())){
			//select next one
			iNewIndex ++;
		}

		if(iNewIndex == this.getTabs().length){
			// no next active tab - search for previous
			iNewIndex = iIndex -1;
			while(iNewIndex >= 0 && (!this.getTabs()[iNewIndex].getEnabled() || !this.getTabs()[iNewIndex].getVisible())){
				//select previous one
				iNewIndex --;
			}
		}
		// if no selectable tab exists the index is set to -1
		this.setProperty( 'selectedIndex', iNewIndex, true ); // no complete rerendering required

		this.rerenderPanel(iIndex);
	}else{
		// set classes new to set before and after classes right
		this.toggleTabClasses(this.getSelectedIndex(), this.getSelectedIndex());
	}

	// update ARIA information
	this.iVisibleTabs--;
	var iVisibleIndex = 0;
	var	aTabDomRefs = [];
	var iSelectedDomIndex = -1;
	var bTabFocused = false;
	for (var i=0;i<this.getTabs().length;i++) {
		var oTab = this.getTabs()[i];
		
		// check if a tab has the focus
		if(sFocusedControlId == oTab.getId()){
			bTabFocused = true;
		}
		
		if(oTab.getVisible() === false) {
			continue;
		}
		if(i == this.getSelectedIndex()){
			iSelectedDomIndex = iVisibleIndex;
		}
		iVisibleIndex++;
		jQuery.sap.byId(oTab.getId()).attr("aria-posinset", iVisibleIndex).attr("aria-setsize", this.iVisibleTabs);
		if (iVisibleIndex == this.iVisibleTabs) {
			jQuery.sap.byId(oTab.getId()).addClass("sapUiTabLast"); // needed for IE8
		}
		aTabDomRefs.push(jQuery.sap.domById(oTab.getId()));	
	}

	// focused item should be the same
	if(iVisibleIndex <= iFocusedIndex){
		// tab before or equal focused one is hidden
		iFocusedIndex--;		
	}
	// update ItemNavigation
	this.oItemNavigation.setItemDomRefs(aTabDomRefs);
	this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);
	this.oItemNavigation.setFocusedIndex(iFocusedIndex);

	// check if a tab has the focus
	// if yes focus again
	// if no set only focused index.
	if(bTabFocused){
		this.oItemNavigation.focusItem(iFocusedIndex);
	}
	
};

/**
 * if the selected index is changed, only the panel must be rerendered
 * for the tabs only some classes must be exchanged
 *
 * @private
 */
sap.ui.commons.TabStrip.prototype.rerenderPanel = function(iOldIndex) {

	var iNewIndex = this.getSelectedIndex();
	var $panel = jQuery.sap.byId(this.getTabs()[iOldIndex].getId() + "-panel");
	if ($panel.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderTabContents(rm, this.getTabs()[iNewIndex]);
		rm.flush($panel[0]);
		rm.destroy();
	}

	var sNewId = this.getTabs()[iNewIndex].getId();
	//change the ID and Label of the panel to the current tab
	$panel.attr("id",sNewId + "-panel").attr("aria-labelledby", sNewId);

	// call after rendering method of tab to set scroll functions
	this.getTabs()[iNewIndex].onAfterRendering();

	this.toggleTabClasses(iOldIndex, iNewIndex);
};

/**
 * Sets the classes of the tabs to display the new selection
 *
 * @private
 */
sap.ui.commons.TabStrip.prototype.toggleTabClasses = function(iOldIndex, iNewIndex) {

	// change visualization of selected tab and old tab
	jQuery.sap.byId(this.getTabs()[iOldIndex].getId()).toggleClass("sapUiTabSel sapUiTab").attr("aria-selected",false);
	var iBeforeIndex = iOldIndex-1;
	while (iBeforeIndex >= 0 && !this.getTabs()[iBeforeIndex].getVisible()) {
		iBeforeIndex--;
	}
	if(iBeforeIndex >= 0){
		jQuery.sap.byId(this.getTabs()[iBeforeIndex].getId()).removeClass("sapUiTabBeforeSel");
	}

	var iAfterIndex = iOldIndex+1;
	while (iAfterIndex < this.getTabs().length && !this.getTabs()[iAfterIndex].getVisible()) {
		iAfterIndex++;
	}
	if(iAfterIndex < this.getTabs().length){
		jQuery.sap.byId(this.getTabs()[iAfterIndex].getId()).removeClass("sapUiTabAfterSel");
	}

	jQuery.sap.byId(this.getTabs()[iNewIndex].getId()).toggleClass("sapUiTabSel sapUiTab").attr("aria-selected",true);
	iBeforeIndex = iNewIndex-1;
	while (iBeforeIndex >= 0 && !this.getTabs()[iBeforeIndex].getVisible()) {
		iBeforeIndex--;
	}
	if(iBeforeIndex >= 0){
		jQuery.sap.byId(this.getTabs()[iBeforeIndex].getId()).addClass("sapUiTabBeforeSel");
	}

	iAfterIndex = iNewIndex+1;
	while (iAfterIndex < this.getTabs().length && !this.getTabs()[iAfterIndex].getVisible()) {
		iAfterIndex++;
	}
	if(iAfterIndex < this.getTabs().length){
		jQuery.sap.byId(this.getTabs()[iAfterIndex].getId()).addClass("sapUiTabAfterSel");
	}

};
}; // end of sap.ui.commons.TabStrip
if ( !jQuery.sap.isDeclared('sap.ui.commons.ListBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ListBox.
jQuery.sap.declare("sap.ui.commons.ListBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ListBox.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>editable : boolean</li>
 * <li>enabled : boolean</li>
 * <li>allowMultiSelect : boolean</li>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>scrollTop : int</li>
 * <li>displayIcons : boolean</li>
 * <li>displaySecondaryValues : boolean</li>
 * <li>valueTextAlign : sap.ui.core.TextAlign</li>
 * <li>secondaryValueTextAlign : sap.ui.core.TextAlign</li>
 * <li>minWidth : sap.ui.core.CSSSize</li>
 * <li>maxWidth : sap.ui.core.CSSSize</li>
 * <li>visibleItems : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.core.Item</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Provides a list of items from which users can choose an item.
 * For the design of the listbox, features such as defining the listbox height, fixing the number of visible items, choosing one item to be the item that is marked by default when the listbox is shown, or a scrollbar for large listboxes are available.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ListBox = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ListBox.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.ListBox. 
 * Resulting metadata can be obtained via sap.ui.commons.ListBox.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ListBox", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getEditable", "setEditable", "getEnabled", "setEnabled", "getAllowMultiSelect", "setAllowMultiSelect", "getVisible", "setVisible", "getWidth", "setWidth", "getHeight", "setHeight", "getScrollTop", "setScrollTop", "getDisplayIcons", "setDisplayIcons", "getDisplaySecondaryValues", "setDisplaySecondaryValues", "getValueTextAlign", "setValueTextAlign", "getSecondaryValueTextAlign", "setSecondaryValueTextAlign", "getMinWidth", "setMinWidth", "getMaxWidth", "setMaxWidth", "getVisibleItems", "setVisibleItems", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", 
    // associations
    
    // events
    "attachSelect", "detachSelect", 
    // methods
    "getSelectedIndex", "setSelectedIndex", "addSelectedIndex", "removeSelectedIndex", "getSelectedIndices", "setSelectedIndices", "addSelectedIndices", "isIndexSelected", "getSelectedItem", "getSelectedItems", "clearSelection", "scrollToIndex", "setItems", "setSelectedKeys", "getSelectedKeys"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "allowMultiSelect" : {name : "allowMultiSelect", type : "boolean", group : "Behavior", defaultValue : false},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "scrollTop" : {name : "scrollTop", type : "int", group : "Behavior", defaultValue : -1},
    "displayIcons" : {name : "displayIcons", type : "boolean", group : "Behavior", defaultValue : false},
    "displaySecondaryValues" : {name : "displaySecondaryValues", type : "boolean", group : "Misc", defaultValue : false},
    "valueTextAlign" : {name : "valueTextAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
    "secondaryValueTextAlign" : {name : "secondaryValueTextAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
    "minWidth" : {name : "minWidth", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "maxWidth" : {name : "maxWidth", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "visibleItems" : {name : "visibleItems", type : "int", group : "Dimension", defaultValue : null}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.core.Item", multiple : true, singularName : "item"}
  },
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.commons.ListBox.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>editable</code>.
 * Value "true" makes the listbox interactive.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Disabled controls have another color display depending on custom settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>allowMultiSelect</code>.
 * Specifies whether multiple selection is allowed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>allowMultiSelect</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getAllowMultiSelect = function() {
	return this.getProperty("allowMultiSelect");
};

/**
 * Setter for property <code>allowMultiSelect</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAllowMultiSelect  new value for property <code>allowMultiSelect</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setAllowMultiSelect = function(bAllowMultiSelect) {
	this.setProperty("allowMultiSelect", bAllowMultiSelect);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Control width as common CSS-size (px or % as unit, for example).
 * The setting overrides any definitions made for the setVisibleItems() method.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * Control height as common CSS-size (px or % as unit, for example).
 * The setting overrides any definitions made for the setVisibleItems() method.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>scrollTop</code>.
 * Scrollbar position from the top. Setting the scrollTop property and calling scrollToIndex are two operations influencing the same "physical" property, so the last call "wins".
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getScrollTop = function() {
	return this.getProperty("scrollTop");
};

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setScrollTop = function(iScrollTop) {
	this.setProperty("scrollTop", iScrollTop);
	return this;
};


/**
 * Getter for property <code>displayIcons</code>.
 * Defines whether the icons of the list items should also be displayed. Enabling icons causes some space to be reserved for them, regardless of how many of the items actually have icons assigned. Displaying icons can also influence the width and height of a single item, which affects the height of the ListBox when it is defined in number of items. In particular with differently-sized icons the total ListBox height will not accomodte exactly the given number of items, then.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayIcons</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getDisplayIcons = function() {
	return this.getProperty("displayIcons");
};

/**
 * Setter for property <code>displayIcons</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayIcons  new value for property <code>displayIcons</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setDisplayIcons = function(bDisplayIcons) {
	this.setProperty("displayIcons", bDisplayIcons);
	return this;
};


/**
 * Getter for property <code>displaySecondaryValues</code>.
 * Indicates whether the additionalText property that can be set on {@link sap.ui.core.ListItems} shall be displayed, or not.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displaySecondaryValues</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getDisplaySecondaryValues = function() {
	return this.getProperty("displaySecondaryValues");
};

/**
 * Setter for property <code>displaySecondaryValues</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplaySecondaryValues  new value for property <code>displaySecondaryValues</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setDisplaySecondaryValues = function(bDisplaySecondaryValues) {
	this.setProperty("displaySecondaryValues", bDisplaySecondaryValues);
	return this;
};


/**
 * Getter for property <code>valueTextAlign</code>.
 * The text alignment in the primary column of the ListBox.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>valueTextAlign</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getValueTextAlign = function() {
	return this.getProperty("valueTextAlign");
};

/**
 * Setter for property <code>valueTextAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oValueTextAlign  new value for property <code>valueTextAlign</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setValueTextAlign = function(oValueTextAlign) {
	this.setProperty("valueTextAlign", oValueTextAlign);
	return this;
};


/**
 * Getter for property <code>secondaryValueTextAlign</code>.
 * The text alignment in the secondary (optional) text column of the ListBox.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>secondaryValueTextAlign</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getSecondaryValueTextAlign = function() {
	return this.getProperty("secondaryValueTextAlign");
};

/**
 * Setter for property <code>secondaryValueTextAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oSecondaryValueTextAlign  new value for property <code>secondaryValueTextAlign</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setSecondaryValueTextAlign = function(oSecondaryValueTextAlign) {
	this.setProperty("secondaryValueTextAlign", oSecondaryValueTextAlign);
	return this;
};


/**
 * Getter for property <code>minWidth</code>.
 * The minimum width of the ListBox. If not set, there is no minimum width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getMinWidth = function() {
	return this.getProperty("minWidth");
};

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setMinWidth = function(sMinWidth) {
	this.setProperty("minWidth", sMinWidth);
	return this;
};


/**
 * Getter for property <code>maxWidth</code>.
 * The maximum width of the ListBox. If not set, there is no maximum width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getMaxWidth = function() {
	return this.getProperty("maxWidth");
};

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setMaxWidth = function(sMaxWidth) {
	this.setProperty("maxWidth", sMaxWidth);
	return this;
};


/**
 * Getter for property <code>visibleItems</code>.
 * The control height in number of items to be completely displayed without scrolling. Setting this overwrites any height in terms of CSS size previously set. When items have different heights, the height of the first item is used for all calculations.
 * If between the visible ListBox items there are one or more separators, the specified number of items will not exactly fit.
 * If the value is retrieved it will equal the previously set value if it was set, otherwise it will be the number of items completely fitting into the ListBox without scrolling if the control was already rendered. If the control was not rendered, the behavior is undefined, it may return -1 or any other number.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>visibleItems</code>
 * @public
 * 
 */
sap.ui.commons.ListBox.prototype.getVisibleItems = function() {
	return this.getProperty("visibleItems");
};

/**
 * Setter for property <code>visibleItems</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iVisibleItems  new value for property <code>visibleItems</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setVisibleItems = function(iVisibleItems) {
	this.setProperty("visibleItems", iVisibleItems);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of items to be displayed. Must be either of type sap.ui.core.ListItem or sap.ui.core.SeparatorItem.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 */
sap.ui.commons.ListBox.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.ListBox.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 */
sap.ui.commons.ListBox.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.ListBox.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.ListBox.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.ui.commons.ListBox#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id ID of the ListBox which triggered the event.
 * @param {int} oControlEvent.getParameters.selectedIndex The currently selected index of the ListBox. In case of multiselect this is ONE of the selected indices (the one whose selection has triggered the selection change); use "selectedIndices" to get all currently selected indices.
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The currently selected item of the ListBox. In case of multiselect this is ONE of the selected items (the one whose selection has triggered the selection change).
 * @param {int[]} oControlEvent.getParameters.selectedIndices Array containing the indices which are selected.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.ListBox</code>.<br/>
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.ListBox</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> ID of the ListBox which triggered the event.</li>
 * <li>'selectedIndex' of type <code>int</code> The currently selected index of the ListBox. In case of multiselect this is ONE of the selected indices (the one whose selection has triggered the selection change); use "selectedIndices" to get all currently selected indices.</li>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The currently selected item of the ListBox. In case of multiselect this is ONE of the selected items (the one whose selection has triggered the selection change).</li>
 * <li>'selectedIndices' of type <code>int[]</code> Array containing the indices which are selected.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.ListBox.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


/**
 * Zero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the first selected item.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedIndex
 * @function

 * @type int
 * @public
 */


/**
 * Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index to be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Adds the given index to current selection. When multi-selection is disabled, this replaces the current selection. When the given index is invalid, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.addSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index to add to selection.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Removes the given index from this selection. When the index is invalid or not selected, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.removeSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index that shall be removed from selection.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedIndices
 * @function

 * @type int[]
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 * When multi-selection is disabled and multiple items are given, the selection is set to the index of the first valid index in the given array.
 * Any invalid indices are ignored.
 * The previous selection is in any case replaced.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items to be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Adds the given indices to selection. Any invalid indices are ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.addSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items that shall additionally be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Returns whether the given index is selected.
 *
 * @name sap.ui.commons.ListBox.prototype.isIndexSelected
 * @function
 * @param {int} 
 *         iIndex
 *         Index which is checked for selection state.

 * @type boolean
 * @public
 */


/**
 * Returns selected item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedItem
 * @function

 * @type sap.ui.core.Item
 * @public
 */


/**
 * Returns an array containing the selected items. In the case of no selection, an empty array is returned.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedItems
 * @function

 * @type sap.ui.core.Item[]
 * @public
 */


/**
 * Removes complete selection.
 *
 * @name sap.ui.commons.ListBox.prototype.clearSelection
 * @function

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * If the ListBox has a scrollbar because the number of items is larger than the number of visible items, this method scrolls to the item with the given index. If there are enough items, this item will then appear at the topmost visible position in the ListBox. If bLazy is true, it only scrolls as far as required to make the item visible.
 * Setting the scrollTop property and calling scrollToIndex are two operations influencing the same "physical" property, so the last call "wins".
 *
 * @name sap.ui.commons.ListBox.prototype.scrollToIndex
 * @function
 * @param {int} 
 *         iIndex
 *         The index to which the ListBox should scroll.
 * @param {boolean} 
 *         bLazy
 *         If set to true, the ListBox only scrolls if the item is not completely visible, and it scrolls just enough to make it fully visible. If set to false (and by default), the item is scrolled to the top position if possible.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Allows setting the list items for this instance of ListBox as array.
 *
 * @name sap.ui.commons.ListBox.prototype.setItems
 * @function
 * @param {sap.ui.core.ListItem[]} 
 *         aItems
 *         The items to set for this ListBox.
 * @param {boolean} 
 *         bDestroyItems
 *         Optional boolean parameter to indicate that the formerly set items should be destroyed instead of just removed.
 * If omitted defaults to false, i.e. no not destroy.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Keys of the items to be selected, wrapped in an array. An empty array means "no selection".
 * When multi-selection is disabled and multiple keys are given, the selection is set to the item with the first valid key in the given array.
 * Any invalid keys are ignored.
 * The previous selection is in any case replaced.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedKeys
 * @function
 * @param {string[]} 
 *         aKeys
 *         The keys of the items to be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Returns the keys of the selected items in an array. If a selected item does not have a key, the respective array entry will be undefined.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedKeys
 * @function

 * @type string[]
 * @public
 */


// Start of sap/ui/commons/ListBox.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained


/**
 * Initializes the ListBox control
 * @private
 */
sap.ui.commons.ListBox.prototype.init = function () {
	this.allowTextSelection(false);
	if (!this._bHeightInItems) { // otherwise setVisibleItems was already called by the JSON constructor
		this._bHeightInItems = false; // decides whether the height is set as CSS size (height is in height property then) or in multiples of an item height (height is in this._iVisibleItems then)
		this._iVisibleItems = -1;     // initially -1, this subsequently must be the number of items that are visible without scrolling; the value is either set directly if the height is given in items, or calculated in onAfterRendering
	}
	this._sTotalHeight = null;    // if height is set in items, this contains the
	if (sap.ui.commons.ListBox._fItemHeight === undefined) {
		sap.ui.commons.ListBox._fItemHeight = -1;
	}
	if (sap.ui.commons.ListBox._iBordersAndStuff === undefined) {
		sap.ui.commons.ListBox._iBordersAndStuff = -1;
	}

	this._aSelectionMap = [];
	this._iLastDirectlySelectedIndex = -1;

	//FIXME Mapping from activeItems index to the id of it for item navigation purposes
	this._aActiveItems = null;
};


/**
 * Re-initializes the ListBox, so all sizes are fine after a theme switch
 * @private
 */
sap.ui.commons.ListBox.prototype.onThemeChanged = function () {
	sap.ui.commons.ListBox._fItemHeight = -1;
	sap.ui.commons.ListBox._iBordersAndStuff = -1;
	this._sTotalHeight = null;
	if (!this._bHeightInItems) {
		this._iVisibleItems = -1; // re-calculation only required for ItemNavigation - shouldn't change when explicitly set
	}
	this.invalidate();
	this.rerender();
};


/**
 * Called before rendering. Required storing the scroll position.
 * @private
 */
sap.ui.commons.ListBox.prototype.onBeforeRendering = function () {
	this.getScrollTop(); // store current ScrollTop
	// TODO: store focus??
};


/**
 * Called after rendering. Required for calculating and setting the correct heights.
 * @private
 */
sap.ui.commons.ListBox.prototype.onAfterRendering = function () {
	var oDomRef = this.getDomRef();

	// calculate item height
	if (sap.ui.commons.ListBox._fItemHeight < 0) {
		var oItemDomRef = oDomRef.firstChild.firstChild; // The first item which CAN be a dummy item
		sap.ui.commons.ListBox._fItemHeight = oItemDomRef.offsetHeight;

		// subpixel rendering strategy in IE >= 9 can lead to the total being larger than the sum of heights
		if (jQuery.browser.msie && (document.documentMode == 9 || document.documentMode == 10)) { // TODO: browser version check... not good...
			var cs = document.defaultView.getComputedStyle(oItemDomRef.firstChild, "");
			var h = parseFloat(cs.getPropertyValue("height").split("px")[0]);
			var pt = parseFloat(cs.getPropertyValue("padding-top").split("px")[0]);
			var pb = parseFloat(cs.getPropertyValue("padding-bottom").split("px")[0]);
			var bt = parseFloat(cs.getPropertyValue("border-top-width").split("px")[0]);
			var bb = parseFloat(cs.getPropertyValue("border-bottom-width").split("px")[0]);
			sap.ui.commons.ListBox._fItemHeight = h + pt + pb + bt + bb;
		}

		// remove the dummy
		if (oItemDomRef.id == (this.getId() + "-dummyItem")) {
			oItemDomRef.parentNode.removeChild(oItemDomRef);
		}
	}

	// calculate height of ListBox borders and padding
	if (sap.ui.commons.ListBox._iBordersAndStuff == -1) {
		var $DomRef = jQuery(this.getDomRef());
		var outerHeight = $DomRef.outerHeight();
		var innerHeight = $DomRef.height();
		sap.ui.commons.ListBox._iBordersAndStuff = outerHeight - innerHeight;
	}

	// Height is set in number of visible items
	if (this._bHeightInItems) {
		if(this._sTotalHeight == null) {
			//...but the height needs to be calculated first
			this._calcTotalHeight(); // TODO: verify this._sTotalHeight is > 0

			// now set height
			oDomRef.style.height = this._sTotalHeight;
		} else {
			// height was already set in the renderer!
		}
	}

	// find out how many items are visible because the ItemNavigation needs to know
	if (this._iVisibleItems = -1) {
		this._updatePageSize();
	}

	// Collect items for ItemNavigation   TODO: make it cleaner
	var oFocusRef = this.getFocusDomRef(),
			aRows = oFocusRef.childNodes,
			aDomRefs = [],
			aItems = this.getItems();
	this._aActiveItems = [];
	var aActiveItems = this._aActiveItems;
	for (var i=0; i < aRows.length; i++) {
		if (!(aItems[i] instanceof sap.ui.core.SeparatorItem)) {
			aActiveItems[aDomRefs.length] = i;
			aDomRefs.push(aRows[i]);
		}
	}

	// init ItemNavigation
	if (!this.oItemNavigation) {
		var bNotInTabChain = (!this.getEnabled() || !this.getEditable());
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation(null, null, bNotInTabChain);
		this.oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._handleAfterFocus, this);
		this.addDelegate(this.oItemNavigation);
	}
	this.oItemNavigation.setRootDomRef(oFocusRef);
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	this.oItemNavigation.setCycling(false);
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(this.getSelectedIndex()));
	this.oItemNavigation.setPageSize(this._iVisibleItems); // Page down by number of visible items

	// Apply scrollTop


	// if scrolling to a certain item index is currently requested (but was not done because the control was not rendered before), do it now
	if (this.oScrollToIndexRequest) {
		this.scrollToIndex(this.oScrollToIndexRequest.iIndex, this.oScrollToIndexRequest.bLazy); // keep the oScrollToIndexRequest for the timeouted call
	} else {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > -1) {
			oDomRef.scrollTop = scrollTop;
		}
	}

	// sometimes this did not work, so repeat it after a timeout (consciously done twice, yes)
	var that = this;
	window.setTimeout(function() { // needs to be delayed because in Firefox sometimes the scrolling seems to come too early
		// if scrolling to a certain item index is currently requested (but was not done because the control was not rendered before), do it now
		if (that.oScrollToIndexRequest) {
			that.scrollToIndex(that.oScrollToIndexRequest.iIndex, that.oScrollToIndexRequest.bLazy);
			that.oScrollToIndexRequest = null;
		} else {
			var scrollTop = that.getProperty("scrollTop");
			if (scrollTop > -1) {
				oDomRef.scrollTop = scrollTop;
			}
		}
	}, 0);
};


/**
 * For the given iIndex, this method calculates the index of the respective item within the ItemNavigation set.
 * (if there are separators, the ItemNavigation does not know them)
 * Prerequisite: the iIndex points to an element which is NOT a Separator or disabled (= it must be known to the ItemNavigation)
 * @private
 */
sap.ui.commons.ListBox.prototype._getNavigationIndexForRealIndex = function(iIndex) {
	var aItems = this.getItems();
	var iNavIndex = iIndex;
	for (var i = 0; i < iIndex; i++) {
		if (aItems[i] instanceof sap.ui.core.SeparatorItem) {
			iNavIndex--;
		}
	}
	return iNavIndex;
};


/**
 * Calculates the number of visible items. Must happen after rendering and whenever the height is changed without rerendering.
 * @private
 */
sap.ui.commons.ListBox.prototype._updatePageSize = function() {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		if (sap.ui.commons.ListBox._fItemHeight > 0) {
			this._iVisibleItems = Math.floor(oDomRef.clientHeight / sap.ui.commons.ListBox._fItemHeight);
		} else {
			// TODO: shouldn't happen
		}
	}
	// else: nothing to do, item navigation will be initialized after rendering
};

/*
 * Scrolls the item with the given index into view, preferably at the topmost position.
 */
sap.ui.commons.ListBox.prototype.scrollToIndex = function(iIndex, bLazy) {
	var oDomRef = this.getDomRef();
	if (oDomRef) { // only if already rendered
		var oItem = jQuery.sap.domById(this.getId() + "-I" + iIndex);
		if (oItem) {
			var iScrollTop = oItem.offsetTop;
			if (!bLazy) {
				// scroll there without any conditions
				this.setScrollTop(iScrollTop);
			} else {
				// "lazy" means we should only scroll if required and as far as required
				var iCurrentScrollTop = oDomRef.scrollTop;
				var iViewPortHeight = jQuery(oDomRef).height();
				if (iCurrentScrollTop >= iScrollTop) {
					// if we have to scroll up, the behavior is fine already
					this.setScrollTop(iScrollTop);
				} else if ((iScrollTop + sap.ui.commons.ListBox._fItemHeight) > (iCurrentScrollTop + iViewPortHeight)) { // bottom Edge of item > bottom edge of viewport
					// the item is - at least partly - below the current viewport of the ListBox, so scroll down. But only as far as required
					this.setScrollTop(Math.ceil(iScrollTop + sap.ui.commons.ListBox._fItemHeight - iViewPortHeight)); // round because of _fItemHeight
				} else {
					// if the item is already fully visible, do nothing
				}
			}
		}
		// store the actual position
		this.getScrollTop();
	} else {
		// control not yet rendered, thus item height is unknown, so remember request for after rendering
		this.oScrollToIndexRequest = {iIndex:iIndex,bLazy:bLazy};
	}
	return this;
};

sap.ui.commons.ListBox.prototype.getVisibleItems = function() {
	return this._iVisibleItems;
};

/**
 * Makes the ListBox render with a height that allows it to display exactly the given number of items.
 *
 * @param {int} iItemCount the number of items that should fit into the ListBox without scrolling
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setVisibleItems = function(iItemCount) {
 /*
	*For the calculation, the size of the first item is used; if no item is present, an invisible dummy item
	* is rendered and instantly removed again.
	* Therefore, this method will not work for items with different heights and if actual items have a different
	* size than generic empty dummy items.
	*/
	// TODO: prevent values less than 1, or make them go back to CSS heights
	this.setProperty("visibleItems", iItemCount, true);

	this._bHeightInItems = true;
	this._iVisibleItems = iItemCount;

	// the actual height to set must be calculated now or later
	this._sTotalHeight = null;

	// if already rendered, calculate and set the height
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		var oFirstItem = oDomRef.firstChild ? oDomRef.firstChild.firstChild : null;
		if (oFirstItem || ((sap.ui.commons.ListBox._fItemHeight > 0) && (sap.ui.commons.ListBox._iBordersAndStuff > 0))) {
			oDomRef.style.height = this._calcTotalHeight();
		} else {
			// already rendered, but no dummy item!
			this.invalidate();
		}
	}

	if (this._sTotalHeight == null) { // this is the "else" clause covering all cases where the height was not set above
		// called before rendering, so the calculation and setting of the actual CSS height to set must be done later
	}

	return this;
};


/**
 * Calculates the outer height of the ListBox from the known item height and number of items that should fit.
 * The result (a CSS size string) is returned as well as assigned to this._sTotalHeight.
 * Precondition: the control is rendered, this._iVisibleItems, sap.ui.commons.ListBox._iBordersAndStuff and
 * sap.ui.commons.ListBox._fItemHeight are initialized.
 *
 * @returns {string} the required outer height as CSS size
 * @private
 */
sap.ui.commons.ListBox.prototype._calcTotalHeight = function() {
	// TODO: check preconditions
	var desiredHeight = this._iVisibleItems * sap.ui.commons.ListBox._fItemHeight;
	this._sTotalHeight = (desiredHeight + sap.ui.commons.ListBox._iBordersAndStuff) + "px";
	return this._sTotalHeight;
};


/**
 * Sets the height of this ListBox in CSS units

 * @param {string} sHeight
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setHeight = function(sHeight) {
	this._bHeightInItems = false;
	this._iVisibleItems = -1;

	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.height = sHeight;
		this._updatePageSize();
		if (this.oItemNavigation) {
			this.oItemNavigation.setPageSize(this._iVisibleItems); // Page down by number of visible items
		}
	}

	this.setProperty("height", sHeight, true); // no re-rendering
	return this;
};

/**
 * Setter for property width.
 *
 * @param {string} sWidth
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setWidth = function(sWidth) {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.width = sWidth;
	}
	this.setProperty("width", sWidth, true); // no re-rendering
	return this;
};

/**
 * Positions the ListBox contents that are scrolled-down by the given number of pixels
 *
 * @param {int} iScrollTip Vertical scroll position in pixels
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setScrollTop = function (iScrollTop) {
	var scrollDomRef = this.getDomRef();
	this.oScrollToIndexRequest = null; // delete any pending scroll request
	if (scrollDomRef) {
		scrollDomRef.scrollTop = iScrollTop;
	}
	this.setProperty("scrollTop", iScrollTop, true); // no rerendering
	return this;
};

/**
 * Returns how many pixels the ListBox contents are currently scrolled down
 *
 * @return {int} Vertical scroll position
 * @public
 */
sap.ui.commons.ListBox.prototype.getScrollTop = function () {
	var scrollDomRef = this.getDomRef();
	if (scrollDomRef) {
		var scrollTop = scrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
		return scrollTop;
	} else {
		return this.getProperty("scrollTop");
	}
};



/* --- user interaction handling methods --- */

sap.ui.commons.ListBox.prototype.onfocusin = function (oEvent) {
	if(jQuery.browser.msie && ((jQuery.browser.version == "7.0") || (jQuery.browser.version == "8.0")) /* =IE8! */ && (oEvent.target != this.getDomRef()) && (oEvent.target.className != "sapUiLbxI")) {
		var parent = oEvent.target.parentNode;

		if (jQuery(parent).hasClass("sapUiLbxI")) {
			parent.focus();
		}
	}
};

sap.ui.commons.ListBox.prototype.onclick = function (oEvent) {
	this._handleUserActivation(oEvent);
};

sap.ui.commons.ListBox.prototype.onsapspace = function (oEvent) {
	this._handleUserActivation(oEvent);
};

/*
 * Ensure the sapspace event with modifiers is also handled as well as the respective "enter" events
 */

sap.ui.commons.ListBox.prototype.onsapspacemodifiers = sap.ui.commons.ListBox.prototype.onsapspace;
sap.ui.commons.ListBox.prototype.onsapenter = sap.ui.commons.ListBox.prototype.onsapspace;
sap.ui.commons.ListBox.prototype.onsapentermodifiers = sap.ui.commons.ListBox.prototype.onsapspace;

/**
 * Internal method invoked when the user activates an item. Differentiates and dispatches according to modifier key
 * and current selection.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivation = function (oEvent) {
	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var oSource = oEvent.target;
	if (oSource.id === "" || jQuery.sap.endsWith(oSource.id, "-txt")) {
		oSource = oSource.parentNode;
		if (oSource.id === "") { // could be the image inside the first cell
			oSource = oSource.parentNode;
		}
	}
	if (oSource.id.substr(0, this.getId().length + 2) == this.getId() + "-I") { // This is how item IDs start
		var iIndex = parseInt(oSource.id.substr(this.getId().length + 2), 10); // Get the selected index from the ID  TODO: ugly

		var aItems = this.getItems();
		var oItem = aItems[iIndex]; // oItem could be a separator, though!

		// It could be the case that the list of items changed during the click event handling. Ensure the item is still the one in
		if (aItems.length <= iIndex) {  // TODO: very questionable! Why set the index to the last position? And why allow removing items during the processing?  Remove!
			iIndex = aItems.length - 1;
		}

		if (iIndex >= 0 && iIndex < aItems.length) { // TODO: this should be known by now
			if (oItem.getEnabled() && !(oItem instanceof sap.ui.core.SeparatorItem)) {
				// Take care of selection and select event
				if (oEvent.metaKey) { // = CTRL
						this._handleUserActivationCtrl(iIndex, oItem);
				} else {
					if (oEvent.shiftKey) {
						this.setSelectedIndices(this._getUserSelectionRange(iIndex));
						this.fireSelect({
							id:this.getId(),
							selectedIndex:iIndex,
							selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
							selectedItem:oItem,
							sId:this.getId(),
							aSelectedIndices:this.getSelectedIndices() /* OLD */
						});
						this._iLastDirectlySelectedIndex = iIndex;
					} else {
						this._handleUserActivationPlain(iIndex, oItem);
					}
				}
			}
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Called when the user triggers an item without holding a modifier key.
 * Changes the selection in the expected way.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivationPlain = function (iIndex, oItem) {
	this._iLastDirectlySelectedIndex = iIndex;
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iIndex));
	if (this.getSelectedIndex() != iIndex || this.getSelectedIndices().length > 1) {
		this.setSelectedIndex(iIndex); // Replace selection

		this.fireSelect({
			id:this.getId(),
			selectedIndex:iIndex,
			selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
			selectedItem:oItem,
			sId:this.getId(),
			aSelectedIndices:this.getSelectedIndices() /* OLD */
		});
	}
};

/**
 * Called when the user triggers an item while pressing the Ctrl key.
 * Changes the selection in the expected way for the "Ctrl" case.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivationCtrl = function (iIndex, oItem) {
	this._iLastDirectlySelectedIndex = iIndex;
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iIndex));
	if (this.isIndexSelected(iIndex)) {
		this.removeSelectedIndex(iIndex); // Remove from multi-selection
	} else {
		this.addSelectedIndex(iIndex); // Add to multi-selection
	}

	this.fireSelect({
		id:this.getId(),
		selectedIndex:iIndex,
		selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
		selectedItem:oItem,
		sId:this.getId(),
		aSelectedIndices:this.getSelectedIndices() /* OLD */
	});
};

/**
 * Calculates the list of indices ranging from the previously selected item to the
 * given index. Used internally for calculating the new selection range when the user holds the "shift" key
 * while clicking in the ListBox.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._getUserSelectionRange = function (iIndex) {
	if (this._iLastDirectlySelectedIndex == -1) {
		// TODO: Use focus and continue execution
		return [];
	}

	var aItems = this.getItems();
	var aRange = [];
	if (this._iLastDirectlySelectedIndex <= iIndex) {
		for (var i = this._iLastDirectlySelectedIndex; i <= iIndex; i++) {
			if ((i > -1) && (aItems[i].getEnabled() && !(aItems[i] instanceof sap.ui.core.SeparatorItem))) {
				aRange.push(i);
			}
		}
	} else {
		for (var i = iIndex; i <= this._iLastDirectlySelectedIndex; i++) {
			if ((i > -1) && (aItems[i].getEnabled() && !(aItems[i] instanceof sap.ui.core.SeparatorItem))) {
				aRange.push(i);
			}
		}
	}
	return aRange;
};



/* --- Overwritten setters and getters affecting the selection --- */

sap.ui.commons.ListBox.prototype.getSelectedIndex = function() {
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			return i;
		}
	}
	return -1;
};

sap.ui.commons.ListBox.prototype.setSelectedIndex = function(iSelectedIndex) {
	if ((iSelectedIndex < -1) || (iSelectedIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	// do not select a disabled or separator item
	var aItems = this.getItems();
	if ((iSelectedIndex > -1) && (!aItems[iSelectedIndex].getEnabled() || (aItems[iSelectedIndex] instanceof sap.ui.core.SeparatorItem))) {
		return;
	}

	for (var i = 0; i < this._aSelectionMap.length; i++) {
		this._aSelectionMap[i] = false;
	}
	this._aSelectionMap[iSelectedIndex] = true;
	// And inform the itemNavigation about this, too
	if(this.oItemNavigation) {
		this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iSelectedIndex));
	}
	this.getRenderer().handleSelectionChanged(this);
	
	return this;
};

sap.ui.commons.ListBox.prototype.addSelectedIndex = function(iSelectedIndex) {
	if (!this.getAllowMultiSelect()) { // If multi-selection is not allowed, this call equals setSelectedIndex
		this.setSelectedIndex(iSelectedIndex);
	}

	// Multi-selectable case
	if ((iSelectedIndex < -1) || (iSelectedIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	// do not select a disabled or separator item
	var aItems = this.getItems();
	if ((iSelectedIndex > -1) && (!aItems[iSelectedIndex].getEnabled() || (aItems[iSelectedIndex] instanceof sap.ui.core.SeparatorItem))) {
		return;
	}

	if (this._aSelectionMap[iSelectedIndex]) {
		return;
	} // Selection does not change

	// Was not selected before
	this._aSelectionMap[iSelectedIndex] = true;
	this.getRenderer().handleSelectionChanged(this);
	
	return this;
};

sap.ui.commons.ListBox.prototype.removeSelectedIndex = function(iIndex) {
	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	if (!this._aSelectionMap[iIndex]) {
		return;
	} // Selection does not change

	// Was selected before
	this._aSelectionMap[iIndex] = false;
	this.getRenderer().handleSelectionChanged(this);
	
	return this;
};

sap.ui.commons.ListBox.prototype.clearSelection = function() {
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			this._aSelectionMap[i] = false;
		}
	}
	// More or less re-initialized
	this._iLastDirectlySelectedIndex = -1;
	// Reset the index also in ItemNavigation
	if(this.oItemNavigation) {
		this.oItemNavigation.setSelectedIndex(-1);
	}
	this.getRenderer().handleSelectionChanged(this);
	
	return this;
};



sap.ui.commons.ListBox.prototype.getSelectedIndices = function() {
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(i);
		}
	}
	return aResult;
};

sap.ui.commons.ListBox.prototype.setSelectedIndices = function(aSelectedIndices) {
	var indicesToSet = [];
	var aItems = this.getItems();
	for (var i = 0; i < aSelectedIndices.length; i++) {
		if ((aSelectedIndices[i] > -1) && (aSelectedIndices[i] < this._aSelectionMap.length)) {
			if (aItems[aSelectedIndices[i]].getEnabled() && !(aItems[aSelectedIndices[i]] instanceof sap.ui.core.SeparatorItem)) {
				indicesToSet.push(aSelectedIndices[i]);
			}
		}
	}

	if (indicesToSet.length > 0) { // TODO: Disable event listening to items??
		// With multi-selection disabled, use the first valid index only
		if (!this.getAllowMultiSelect()) {
			indicesToSet = [indicesToSet[0]];
		}
	}

	for (var i = 0; i < this._aSelectionMap.length; i++) {
		this._aSelectionMap[i] = false;
	}

	// O(n+m)
	for (var i = 0; i < indicesToSet.length; i++) {
		this._aSelectionMap[indicesToSet[i]] = true;
	}
	this.getRenderer().handleSelectionChanged(this);
	
	return this;
};

sap.ui.commons.ListBox.prototype.addSelectedIndices = function(aSelectedIndices) {
	var indicesToSet = [];
	var aItems = this.getItems();
	for (var i = 0; i < aSelectedIndices.length; i++) {
		if ((aSelectedIndices[i] > -1) && (aSelectedIndices[i] < this._aSelectionMap.length)) {
			// do not select a disabled or separator item
			if (aItems[aSelectedIndices[i]].getEnabled() && !(aItems[aSelectedIndices[i]] instanceof sap.ui.core.SeparatorItem)) {
				indicesToSet.push(aSelectedIndices[i]);
			}
		}
	}

	if (indicesToSet.length > 0) { // TODO: Disable event listening to items??
		// With multi-selection disabled, use the first valid index only
		if (!this.getAllowMultiSelect()) {
			indicesToSet = [indicesToSet[0]];
		}

		// O(n+m)
		for (var i = 0; i < indicesToSet.length; i++) {
			this._aSelectionMap[indicesToSet[i]] = true;
		}
		this.getRenderer().handleSelectionChanged(this);
	}
	return this;
};


sap.ui.commons.ListBox.prototype.isIndexSelected = function(iIndex) {
	if ((iIndex < -1) || (iIndex > this._aSelectionMap.length-1)) {
		return false; // Invalid index -> not selected
	}

	return this._aSelectionMap[iIndex];
};


sap.ui.commons.ListBox.prototype.setSelectedKeys = function(aSelectedKeys) {
	var aIndices = [];
	var aItems = this.getItems();

	var key;
	var mKeyMap = {};
	for (var i = 0; i < aSelectedKeys.length; i++) { // put the keys into a map to hopefully search faster below
		if (key = aSelectedKeys[i]) {
			mKeyMap[key] = true;
		}
	} 
	
	var aIndices = [];
	for (var j = 0; j < aItems.length; j++) {
		if ((key = aItems[j].getKey()) && (mKeyMap[key])) {
			aIndices.push(j);
		}
	}
	
	return this.setSelectedIndices(aIndices);
};

sap.ui.commons.ListBox.prototype.getSelectedKeys = function() {
	var aItems = this.getItems();
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(aItems[i].getKey());
		}
	}
	return aResult;
};


sap.ui.commons.ListBox.prototype.getSelectedItem = function() {
	var iIndex = this.getSelectedIndex();
	if ((iIndex < 0) || (iIndex >= this._aSelectionMap.length)) {
		return null;
	}
	return this.getItems()[iIndex];
};

sap.ui.commons.ListBox.prototype.getSelectedItems = function() {
	var aItems = this.getItems();
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(aItems[i]);
		}
	}
	return aResult;
};

sap.ui.commons.ListBox.prototype.setAllowMultiSelect = function(bAllowMultiSelect) {
	this.setProperty("allowMultiSelect", bAllowMultiSelect);
	var oneWasSelected = false;
	var twoWereSelected = false;
	if (!bAllowMultiSelect && this._aSelectionMap) {
		for (var i = 0; i < this._aSelectionMap.length; i++) {
			if (this._aSelectionMap[i]) {
				if (!oneWasSelected) {
					oneWasSelected = true;
				} else {
					this._aSelectionMap[i] = false;
					twoWereSelected = true;
				}
			}
		}
	}
	if (twoWereSelected) {
		this.getRenderer().handleSelectionChanged(this);
	}
	return this;
};


/**
 * Handles the event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 *
 * @param {sap.ui.base.Event} oControlEvent The event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * @private
 */
sap.ui.commons.ListBox.prototype._handleAfterFocus = function(oControlEvent){
	var iIndex = oControlEvent.getParameter("index");
	iIndex = iIndex !== undefined && iIndex >= 0? this._aActiveItems[iIndex]:0;

	this.getRenderer().handleARIAActivedescendant(this, iIndex);
};

/* --- "items" aggregation methods, overwritten to update _aSelectionMap and allow filteredItems --- */

/*
 * Implementation of API method setItems.
 * Semantically belonging to "items" aggregation but not part of generated method set.
 */
sap.ui.commons.ListBox.prototype.setItems = function(aItems, bDestroyItems) {
	if(bDestroyItems) {
		this.destroyItems();
	} else {
		this.removeAllItems();
	}
	for(var i = 0, l = aItems.length; i < l; i++){
		this.addItem(aItems[i]);
	}
	return this;
};

sap.ui.commons.ListBox.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	if ( !this._aSelectionMap ) {
		this._aSelectionMap = [];
	}
	this._aSelectionMap.push(false);
	return this;
};

sap.ui.commons.ListBox.prototype.insertItem = function(oItem, iIndex) {
	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length)) {
		return;
	} // Ignore invalid index TODO:: check behavior for iIndex=length
	// TODO: Negative indices might be used to count from end of array

	this.insertAggregation("items", oItem, iIndex);
	this._aSelectionMap.splice(iIndex, 0, false);

	this.invalidate();
	return this;
};

sap.ui.commons.ListBox.prototype.removeItem = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfItem(vElement);
	}

	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length-1)) {
		return;
	} // Ignore invalid index

	var oRemoved = this.removeAggregation("items", iIndex);
	this._aSelectionMap.splice(iIndex, 1);

	this.invalidate();
	return oRemoved;
};

sap.ui.commons.ListBox.prototype.removeAllItems = function() {
	var oRemoved = this.removeAllAggregation("items");

	this._aSelectionMap = [];

	this.invalidate();
	return oRemoved;
};

sap.ui.commons.ListBox.prototype.destroyItems = function() {
	var destroyed = this.destroyAggregation("items");

	this._aSelectionMap = [];

	this.invalidate();
	return destroyed;
};

/**
 * Does all the cleanup when the ListBox is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.ListBox.prototype.exit = function (){
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
	}

	// No super.exit() to call
};

/*
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.ListBox.prototype.getFocusDomRef = function() {
	return jQuery.sap.domById(this.getId() + '-list');
};

/*
 * Overwrites default implementation
 * the label must point to the UL element
 * @public
 */
sap.ui.commons.ListBox.prototype.getIdForLabel = function () {
	return this.getId()+'-list';
};

}; // end of sap.ui.commons.ListBox
if ( !jQuery.sap.isDeclared('sap.ui.commons.FileUploaderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.FileUploader
jQuery.sap.declare("sap.ui.commons.FileUploaderRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.FileUploaderRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.FileUploaderRenderer.render = function(oRenderManager, oFileUploader) {

	var rm = oRenderManager;
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	// return immediately if control is invisible
	if (!oFileUploader.getVisible()) {
		return;
	}

	rm.write('<div class="sapUiFup"');
	rm.writeControlData(oFileUploader);
	rm.write('>');

	// form
	rm.write('<form style="display:inline-block" encType="multipart/form-data" method="post" id="' + oFileUploader.getId() + '-fu_form" ');
	rm.write('action="' + oFileUploader.getUploadUrl() + '" ');
	rm.write('target="' + oFileUploader.getId() + '-frame"');
	rm.write('>');

	// the SAPUI5 TextField and Button
	rm.write('<div class="sapUiFupInp"');
	if (accessibility) {
		rm.writeAttribute("role", "textbox");
		rm.writeAttribute("aria-readonly", "true");
	}
	rm.write('>');

	rm.write('<div class="sapUiFupGroup" border="0" cellPadding="0" cellSpacing="0"><div><div>');
	rm.renderControl(oFileUploader.oFilePath);
	rm.write('</div><div>');  //-> per style margin
	rm.renderControl(oFileUploader.oBrowse);
	rm.write('</div></div></div>');

	// hidden pure input type file (surrounded by a div which is responsible for giving the input the orrect size)
	rm.write('<div class="sapUiFupInputMask"><input  type="file" name="' + oFileUploader.getName() +'" id="' + oFileUploader.getId() + '-fu" tabindex="-1" size="1"');
	rm.writeAttributeEscaped('value', oFileUploader.getValue() || "");
	if (oFileUploader.getTooltip_AsString() ) {
		rm.writeAttributeEscaped('title', oFileUploader.getTooltip_AsString());
	} else if (oFileUploader.getTooltip() ) {
		// object tooltip, do nothing - tooltip will be displayed
	} else if (oFileUploader.getValue() != "") {
		// only if there is no tooltip, then set value as fallback
		rm.writeAttributeEscaped('title', oFileUploader.getValue());
	}
	if (!oFileUploader.getEnabled()) {
		rm.writeAttribute('disabled', 'disabled');
	}
	rm.write('><input type="hidden" name="' + oFileUploader.getName() +'-data" id="' + oFileUploader.getId() + '-fu_data"');
	rm.writeAttributeEscaped('value', oFileUploader.getAdditionalData() || "");
	rm.write('></div>');


	rm.write('</div>');
	rm.write('</form>');
	rm.write('</div>');
};
}; // end of sap.ui.commons.FileUploaderRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RichTooltipRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RichTooltip
jQuery.sap.declare("sap.ui.commons.RichTooltipRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RichToltip renderer.
 * @static
 */
sap.ui.commons.RichTooltipRenderer = {};

/**
 * Renders the HTML for the RichTooltip, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.RichTooltipRenderer.render = function(oRenderManager, oRichTooltip){
	var rm = oRenderManager;

	// Read title parameter and add it to the HTML
	var sText = oRichTooltip.getText();

	// Header
	rm.write("<div id='sap-ui-rtt' class='sapUiRtt'><div><div>");
	rm.write("<div class='sapUiRttTopL'></div><div class='sapUiRttTopR'></div>");
	rm.write("<div class='sapUiRttCL'>");
	rm.write("<div class='sapUiRttCR'>");
	rm.write("<div class='sapUiRttContent'>");


	// Content
	var sTitle = oRichTooltip.getTitle();
	if (sTitle) {
		rm.write("<div id='sap-ui-rtt-title' role='tooltip' class='sapUiRttTitle'>");
		rm.writeEscaped(sTitle);
		rm.write("</div>");
		rm.write("<div class='sapUiRttSep'></div>");
	}
	var sImage = oRichTooltip.getImageSrc();
	if (sImage){
		rm.write("<img class='sapUiRttImage' src='");
		rm.writeEscaped(sImage);
		rm.write("'/>");
	}
	rm.write("<div id='sap-ui-rtt-txt' role='tooltip' class='sapUiRttText'>");

	rm.writeEscaped(sText);

	var valueStateText = sap.ui.core.ValueStateSupport.getAdditionalText(oRichTooltip.getParent());
	if (valueStateText) {
		rm.write("<br> <br>");
		rm.writeEscaped(valueStateText);
	}
	rm.write("</div>");


	// Footer
	rm.write("</div></div></div>");
	// rm.write("<div class='sapUiRttCR'></div>");
	rm.write("<div class='sapUiRttBotL'></div>");
	rm.write("<div class='sapUiRttBotR'></div>");
	rm.write("</div></div></div>");
};
}; // end of sap.ui.commons.RichTooltipRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RowRepeater
jQuery.sap.declare("sap.ui.commons.RowRepeaterRenderer");




/**
 * @class RowRepeater renderer.
 * @static
 */
sap.ui.commons.RowRepeaterRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.RowRepeaterRenderer.render = function(oRenderManager, oControl){

	// escape directly if control is not visible
	if(!oControl.getVisible()) {
		return;
	}

	// opening root DIV
	oRenderManager.write("<div");
	oRenderManager.writeControlData(oControl);
	// add design CSS class: sapUiRrDesignStandard/sapUiRrDesignTransparent/sapUiRrDesignBareShell
	oRenderManager.addClass("sapUiRrDesign" + oControl.getDesign() );
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the row repeater header (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
		this.renderHeader(oRenderManager, oControl);
	}

	// render the row repeater body
	this.renderBody(oRenderManager, oControl);

	// render the row repeater footer (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
		this.renderFooter(oRenderManager, oControl);
	}

	// closing root DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderHeader = function(oRenderManager, oControl) {

	// render the primary toolbar
	this.renderPrimaryToolbar(oRenderManager, oControl);

	// render the secondary toolbar only if more than one sorter is defined
	if(oControl.getSorters().length>1 && oControl.isBound()) {
		this.renderSecondaryToolbar(oRenderManager, oControl);
	}


};


sap.ui.commons.RowRepeaterRenderer.renderPrimaryToolbar = function(oRenderManager, oControl) {

	// opening primary toolbar DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrPtb");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render a title if the title aggregation is provided
	if(oControl.getTitle()!==null) {
		this.renderTitle(oRenderManager, oControl);
	}

	// render the buttons of the filter
	this.renderFilterToolbar(oRenderManager, oControl);

	// always render the controller that displays either pager or show more
	this.renderController(oRenderManager, oControl);

	// closing primary toolbar DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderTitle = function(oRenderManager, oControl) {

	// local variables
	var oTitle = oControl.getTitle();
	var sTooltip = oTitle.getTooltip_AsString();

//BACKUP FOR LOGO AND TITLE IN A SINGLE SHARED DIV:
//	// opening title DIV
//	oRenderManager.write("<div");
//	oRenderManager.addClass("sapUiRrTitle");
//	oRenderManager.writeClasses();
//	if(sTooltip!==undefined) {
//		oRenderManager.writeAttributeEscaped("title", sTooltip);
//	}
//	oRenderManager.write(">");
//
//	// render the icon if it is defined
//	if(oTitle.getIcon()!==null) {
//		oRenderManager.write("<img");
//		oRenderManager.writeAttributeEscaped("src", oTitle.getIcon());
//		oRenderManager.write("/>");
//	}
//
//	// render the text if provided
//	if(oTitle.getText()!==null) {
//		oRenderManager.writeEscaped(oTitle.getText());
//	}
//
//	// closing title DIV
//	oRenderManager.write("</div>");


//LOGO AND TITLE IN 2 SEPARATE DIVs:
	// render the icon if it is defined
	if(oTitle.getIcon()!==null) {
		// opening logo DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrLogo");
		oRenderManager.writeClasses();
		if(sTooltip!==undefined) {
			oRenderManager.writeAttributeEscaped("title", sTooltip);
		}
		oRenderManager.write(">");
		
		if (oTitle.getIcon()) {
			oRenderManager.write("<img");
			oRenderManager.writeAttributeEscaped("src", oTitle.getIcon());
			oRenderManager.write("/>");
		}
		// closing DIV
		oRenderManager.write("</div>");
	}

	// render the text if provided
	if(oTitle.getText()!==null) {
		// opening title DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrTitle");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		oRenderManager.writeEscaped(oTitle.getText());

		// closing DIV
		oRenderManager.write("</div>");
	}



};


sap.ui.commons.RowRepeaterRenderer.renderFilterToolbar = function(oRenderManager, oControl) {

	// local variables
	var aFilters = oControl.getFilters();

	// opening filter toolbar DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrFilters");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// don't render any content if there is not minimum 2 filters OR
	// if the row repeater is not bound
	if(aFilters.length>1 && oControl.isBound()) {
		oRenderManager.renderControl(oControl.getAggregation("filterToolbar"));
	}

	// closing filter toolbar DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderController = function(oRenderManager, oControl) {

	// opening controller DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrCtrl");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render "show more" button or pager depending on pager mode flag
	if(!oControl.bPagingMode) {
		oRenderManager.renderControl(oControl.getAggregation("headerShowMoreButton"));
	}

	// closing controller DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderSecondaryToolbar = function(oRenderManager, oControl) {

	// local variables
	var aSorters = oControl.getSorters();

	// opening secondary toolbar DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrStb");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the "Sort By:" text
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrSortBy");
	oRenderManager.writeClasses();
	oRenderManager.write(">");
	oRenderManager.writeEscaped(oControl.oResourceBundle.getText("SORT_BY") + ":");
	oRenderManager.write("</div>");

	// begin of sorter toolbar wrapping DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrSorters");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the toolbar
	oRenderManager.renderControl(oControl.getAggregation("sorterToolbar"));

	// end of sorter toolbar wrapping DIV
	oRenderManager.write("</div>");

	// closing secondary toolbar DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderBody = function(oRenderManager, oControl) {

	// variables
	var sId = oControl.getId();
	var iCurrentPage = oControl.getCurrentPage();
	var iNumberOfRows = oControl.getNumberOfRows();
	var iStartIndex = (iCurrentPage-1) * iNumberOfRows;
	var aRows = oControl.getRows();
	var iCurrentVisibleRows = aRows.length>iNumberOfRows ? iNumberOfRows : aRows.length-iStartIndex;
	var iLastPage = Math.ceil( aRows.length/iNumberOfRows );
	var iCurrentRow;

	// opening body DIV
	oRenderManager.write("<div");
	oRenderManager.writeAttribute("id", sId+"-body");
	oRenderManager.addClass("sapUiRrBody");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// opening UL for current page
	oRenderManager.write("<ul");
	oRenderManager.writeAttribute("id", sId+"-page_"+iCurrentPage);
	oRenderManager.addClass("sapUiRrPage");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// we display a text, if the length of aggregation rows is 0 or we are past the last page
	if(aRows.length===0 || iLastPage<iCurrentPage) {

		// render a "No Data" LI with custom control or default text 
			oRenderManager.write("<li");
			oRenderManager.addClass("sapUiRrNoData");
			oRenderManager.writeClasses();
			oRenderManager.write(">");
			var oNoData = oControl.getNoData();
			if (oNoData) {
				oRenderManager.renderControl(oNoData);
			}
			else {
				oRenderManager.writeEscaped(oControl.oResourceBundle.getText("NO_DATA"));
			}
			oRenderManager.write("</li>");

	} else {

		// create additional LI style if row height is fixed
		var sRowHeightStyle;
		if( oControl.getFixedRowHeight() !== "" ) {
			sRowHeightStyle = "height:" + oControl.getFixedRowHeight() + ";overflow:hidden;";
		}

		// loop over all rows visible on current page
		for( iCurrentRow=iStartIndex; iCurrentRow<iStartIndex+iCurrentVisibleRows; iCurrentRow++ ) {

			// open the LI wrapping each row
			oRenderManager.write("<li");
			oRenderManager.writeAttribute("id", sId+"-row_"+iCurrentRow);
			if(sRowHeightStyle!==null) {
				oRenderManager.writeAttribute("style", sRowHeightStyle);
			}
			oRenderManager.addClass("sapUiRrRow");
			oRenderManager.writeClasses();
			oRenderManager.write(">");

			// render the nested control
			oRenderManager.renderControl(aRows[iCurrentRow]);

			// close the wrapping LI
			oRenderManager.write("</li>");

		}

	}

	// closing page UL
	oRenderManager.write("</ul>");

	// closing body DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderFooter = function(oRenderManager, oControl) {

	// opening footer DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrFtr");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render "show more" button or pager depending on pager mode flag
	if(oControl.bPagingMode) {
		oRenderManager.renderControl(oControl.getAggregation("footerPager"));
	} else {
		oRenderManager.renderControl(oControl.getAggregation("footerShowMoreButton"));
	}

	// closing footer DIV
	oRenderManager.write("</div>");

};
}; // end of sap.ui.commons.RowRepeaterRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.SearchField.
jQuery.sap.declare("sap.ui.commons.SearchField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SearchField.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>enableListSuggest : boolean</li>
 * <li>showListExpander : boolean</li>
 * <li>enableClear : boolean</li>
 * <li>showExternalButton : boolean</li>
 * <li>value : string</li>
 * <li>enabled : boolean</li>
 * <li>editable : boolean</li>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>maxLength : int</li>
 * <li>textAlign : sap.ui.core.TextAlign</li>
 * <li>visibleItemCount : int</li>
 * <li>startSuggestion : int</li>
 * <li>maxSuggestionItems : int</li>
 * <li>maxHistoryItems : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>searchProvider : sap.ui.commons.SearchProvider</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>search : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>suggest : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Allows the user to type search queries and to trigger the search. Optionally, suggestions can be added.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.SearchField = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.SearchField.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.SearchField. 
 * Resulting metadata can be obtained via sap.ui.commons.SearchField.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.SearchField", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getEnableListSuggest", "setEnableListSuggest", "getShowListExpander", "setShowListExpander", "getEnableClear", "setEnableClear", "getShowExternalButton", "setShowExternalButton", "getValue", "setValue", "getEnabled", "setEnabled", "getEditable", "setEditable", "getVisible", "setVisible", "getWidth", "setWidth", "getMaxLength", "setMaxLength", "getTextAlign", "setTextAlign", "getVisibleItemCount", "setVisibleItemCount", "getStartSuggestion", "setStartSuggestion", "getMaxSuggestionItems", "setMaxSuggestionItems", "getMaxHistoryItems", "setMaxHistoryItems", 
    // aggregations
    "getSearchProvider", "setSearchProvider", "destroySearchProvider", 
    // associations
    
    // events
    "attachSearch", "detachSearch", "attachSuggest", "detachSuggest", 
    // methods
    "clearHistory", "suggest"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "enableListSuggest" : {name : "enableListSuggest", type : "boolean", group : "Behavior", defaultValue : true},
    "showListExpander" : {name : "showListExpander", type : "boolean", group : "Behavior", defaultValue : true},
    "enableClear" : {name : "enableClear", type : "boolean", group : "Behavior", defaultValue : false},
    "showExternalButton" : {name : "showExternalButton", type : "boolean", group : "Behavior", defaultValue : false},
    "value" : {name : "value", type : "string", group : "Data", defaultValue : ''},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "maxLength" : {name : "maxLength", type : "int", group : "Behavior", defaultValue : 0},
    "textAlign" : {name : "textAlign", type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
    "visibleItemCount" : {name : "visibleItemCount", type : "int", group : "Behavior", defaultValue : 20},
    "startSuggestion" : {name : "startSuggestion", type : "int", group : "Behavior", defaultValue : 3},
    "maxSuggestionItems" : {name : "maxSuggestionItems", type : "int", group : "Behavior", defaultValue : 10},
    "maxHistoryItems" : {name : "maxHistoryItems", type : "int", group : "Behavior", defaultValue : 5}
  },
  
  aggregations : {
    "searchProvider" : {name : "searchProvider", type : "sap.ui.commons.SearchProvider", multiple : false}
  },
  associations : {},
  events : {
    "search" : "search", 
    "suggest" : "suggest"
  }

});	

sap.ui.commons.SearchField.M_EVENTS = {'search':'search','suggest':'suggest'};


/**
 * Getter for property <code>enableListSuggest</code>.
 * Defines whether a pop up list shall be provided for suggestions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableListSuggest</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getEnableListSuggest = function() {
	return this.getProperty("enableListSuggest");
};

/**
 * Setter for property <code>enableListSuggest</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableListSuggest  new value for property <code>enableListSuggest</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setEnableListSuggest = function(bEnableListSuggest) {
	this.setProperty("enableListSuggest", bEnableListSuggest);
	return this;
};


/**
 * Getter for property <code>showListExpander</code>.
 * Defines whether the list expander shall be displayed in the case of an enabled list for suggestions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showListExpander</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getShowListExpander = function() {
	return this.getProperty("showListExpander");
};

/**
 * Setter for property <code>showListExpander</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowListExpander  new value for property <code>showListExpander</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setShowListExpander = function(bShowListExpander) {
	this.setProperty("showListExpander", bShowListExpander);
	return this;
};


/**
 * Getter for property <code>enableClear</code>.
 * Defines whether the clear functionality shall be active
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableClear</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getEnableClear = function() {
	return this.getProperty("enableClear");
};

/**
 * Setter for property <code>enableClear</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableClear  new value for property <code>enableClear</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setEnableClear = function(bEnableClear) {
	this.setProperty("enableClear", bEnableClear);
	return this;
};


/**
 * Getter for property <code>showExternalButton</code>.
 * Defines whether an additional search button shall be displayed
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showExternalButton</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getShowExternalButton = function() {
	return this.getProperty("showExternalButton");
};

/**
 * Setter for property <code>showExternalButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowExternalButton  new value for property <code>showExternalButton</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setShowExternalButton = function(bShowExternalButton) {
	this.setProperty("showExternalButton", bShowExternalButton);
	return this;
};


/**
 * Getter for property <code>value</code>.
 * Text that shall be displayed within the search field
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getValue = function() {
	return this.getProperty("value");
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setValue = function(sValue) {
	this.setProperty("value", sValue);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Disabled fields have different colors, and they can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Non-editable controls have different colors, depending on custom settings
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Control width in CSS-size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getMaxLength = function() {
	return this.getProperty("maxLength");
};

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setMaxLength = function(iMaxLength) {
	this.setProperty("maxLength", iMaxLength);
	return this;
};


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getTextAlign = function() {
	return this.getProperty("textAlign");
};

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setTextAlign = function(oTextAlign) {
	this.setProperty("textAlign", oTextAlign);
	return this;
};


/**
 * Getter for property <code>visibleItemCount</code>.
 * 
 * Defines the number of items in the suggestion list that shall be displayed at once. If the overall number of list items is higher than the setting,
 * a scroll bar is provided.
 * 
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>visibleItemCount</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getVisibleItemCount = function() {
	return this.getProperty("visibleItemCount");
};

/**
 * Setter for property <code>visibleItemCount</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iVisibleItemCount  new value for property <code>visibleItemCount</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setVisibleItemCount = function(iVisibleItemCount) {
	this.setProperty("visibleItemCount", iVisibleItemCount);
	return this;
};


/**
 * Getter for property <code>startSuggestion</code>.
 * 
 * Minimum length of the entered string triggering the suggestion list.
 * 
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>startSuggestion</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getStartSuggestion = function() {
	return this.getProperty("startSuggestion");
};

/**
 * Setter for property <code>startSuggestion</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iStartSuggestion  new value for property <code>startSuggestion</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setStartSuggestion = function(iStartSuggestion) {
	this.setProperty("startSuggestion", iStartSuggestion);
	return this;
};


/**
 * Getter for property <code>maxSuggestionItems</code>.
 * 
 * Maximum number of suggestion items in the suggestion list.
 * 
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>maxSuggestionItems</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getMaxSuggestionItems = function() {
	return this.getProperty("maxSuggestionItems");
};

/**
 * Setter for property <code>maxSuggestionItems</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMaxSuggestionItems  new value for property <code>maxSuggestionItems</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setMaxSuggestionItems = function(iMaxSuggestionItems) {
	this.setProperty("maxSuggestionItems", iMaxSuggestionItems);
	return this;
};


/**
 * Getter for property <code>maxHistoryItems</code>.
 * 
 * Maximum number of history items in the suggestion list.
 * 
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>maxHistoryItems</code>
 * @public
 * 
 */
sap.ui.commons.SearchField.prototype.getMaxHistoryItems = function() {
	return this.getProperty("maxHistoryItems");
};

/**
 * Setter for property <code>maxHistoryItems</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iMaxHistoryItems  new value for property <code>maxHistoryItems</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setMaxHistoryItems = function(iMaxHistoryItems) {
	this.setProperty("maxHistoryItems", iMaxHistoryItems);
	return this;
};

	
/**
 * Getter for aggregation <code>searchProvider</code>.<br/>
 * Search provider instance which handles the suggestions for this SearchField (e.g. Open Search Protocol).
 * 
 * @return {sap.ui.commons.SearchProvider}
 * @public
 */
sap.ui.commons.SearchField.prototype.getSearchProvider = function() {
	return this.getAggregation("searchProvider", null);
};


/**
 * Setter for the aggregated <code>searchProvider</code>.
 * @param oSearchProvider {sap.ui.commons.SearchProvider}
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.setSearchProvider = function(oSearchProvider) {
	this.setAggregation("searchProvider", oSearchProvider);
	return this;
};
	

/**
 * Destroys the searchProvider in the aggregation 
 * named <code>searchProvider</code>.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.destroySearchProvider = function() {
	this.destroyAggregation("searchProvider");
	return this;
};


/**
 * Event which is fired when the user triggers a search 
 *
 * @name sap.ui.commons.SearchField#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 * Event which is fired when the user triggers a search 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.attachSearch = function(oData, fnFunction, oListener) {
	this.attachEvent("search", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.detachSearch = function(fnFunction, oListener) {
	this.detachEvent("search", fnFunction, oListener);
	return this;	
};

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.SearchField.prototype.fireSearch = function(mArguments) {
	this.fireEvent("search", mArguments);
	return this;
};


/**
 * Event which is fired when new suggest values are required. 
 *
 * @name sap.ui.commons.SearchField#suggest
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value for which suggestions are required.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 * Event which is fired when new suggest values are required. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.attachSuggest = function(oData, fnFunction, oListener) {
	this.attachEvent("suggest", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.SearchField.prototype.detachSuggest = function(fnFunction, oListener) {
	this.detachEvent("suggest", fnFunction, oListener);
	return this;	
};

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value for which suggestions are required.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.SearchField.prototype.fireSuggest = function(mArguments) {
	this.fireEvent("suggest", mArguments);
	return this;
};


/**
 * Clears the history of the control
 *
 * @name sap.ui.commons.SearchField.prototype.clearHistory
 * @function

 * @type void
 * @public
 */


/**
 * Callback function used to provide the suggest values in the handler of the suggest event (only in list suggestion mode)
 *
 * @name sap.ui.commons.SearchField.prototype.suggest
 * @function
 * @param {string} 
 *         sSSuggestValue
 *         The value which was provided in the corresponding suggest event (parameter 'value')
 * @param {string[]} 
 *         aASuggestions
 *         The list of suggestions belonging to the suggest value

 * @type void
 * @public
 */


// Start of sap/ui/commons/SearchField.js



jQuery.sap.require('sap.ui.core.History'); // unlisted dependency retained


(function() {

var _DEFAULT_VISIBLE_ITEM_COUNT = 20;

//***********************************************
// Internal control functions
//***********************************************

/**
 * Does the setup when the control is created.
 * @private
 */
sap.ui.commons.SearchField.prototype.init = function(){
	_initChildControls(this, this.getEnableListSuggest());
	this._oHistory = new sap.ui.core.History(this.getId());
};


/**
 * Does all the cleanup when the control is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.SearchField.prototype.exit = function(){
	this._ctrl.destroy();
	this._lb.destroy();
	if(this._btn){
		this._btn.destroy();
	}
	this._ctrl = null;
	this._lb = null;
	this._btn = null;
	this._oHistory = null; 
};


/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.SearchField.prototype.onThemeChanged = function(oEvent){
	this.invalidate();
};


/**
 * Called when the rendering is complete.
 * @private
 */
sap.ui.commons.SearchField.prototype.onAfterRendering = function(){
	if(this.getShowExternalButton()){
    	var iButtonWidth = jQuery.sap.byId(this._btn.getId()).outerWidth(true);
    	jQuery.sap.byId(this._ctrl.getId()).css(sap.ui.getCore().getConfiguration().getRTL() ? "left" : "right", iButtonWidth+"px");
    }
};


sap.ui.commons.SearchField.prototype.getFocusDomRef = function() {
	return this._ctrl.getFocusDomRef();
};


sap.ui.commons.SearchField.prototype.fireSearch = function(mArguments) {
	var sVal = jQuery(this._ctrl.getInputDomRef()).val();
	if(!sVal || !this.getEditable() || !this.getEnabled()) {
		return this;
	}
	if(!mArguments) {
		mArguments = {};
	}
	
	this.setValue(sVal);
	if(!mArguments.noFocus){
		sVal = this.getValue();
		this.focus();
		this._oHistory.add(sVal);
		this.fireEvent("search", {query: sVal});
	}
	return this;
};


//***********************************************
// Overridden getter und setter, API functions
//***********************************************

sap.ui.commons.SearchField.prototype.clearHistory = function() {
	this._oHistory.clear();
};


sap.ui.commons.SearchField.prototype.suggest = function(sSuggestValue, aSuggestions) {
	if(!this.getEnableListSuggest() || !sSuggestValue || !aSuggestions){
		return;
	}
	this._ctrl.updateSuggestions(sSuggestValue, aSuggestions);
};


sap.ui.commons.SearchField.prototype.setEnableListSuggest = function(bEnableListSuggest) {
	if((this.getEnableListSuggest() && bEnableListSuggest) || (!this.getEnableListSuggest() && !bEnableListSuggest)){
		return;
	}
	_initChildControls(this, bEnableListSuggest);
	this.setProperty("enableListSuggest", bEnableListSuggest);
	return this;
};

sap.ui.commons.SearchField.prototype.getValue = function() {
	return _get(this, "Value");
};

sap.ui.commons.SearchField.prototype.setValue = function(sValue) {
	return _set(this, "Value", sValue, !!this.getDomRef());
};

sap.ui.commons.SearchField.prototype.getEnabled = function() {
	return _get(this, "Enabled");
};

sap.ui.commons.SearchField.prototype.setEnabled = function(bEnabled) {
	if(this._btn){
		this._btn.setEnabled(bEnabled && this.getEditable());
	}
	return _set(this, "Enabled", bEnabled);
};

sap.ui.commons.SearchField.prototype.getEditable = function() {
	return _get(this, "Editable");
};

sap.ui.commons.SearchField.prototype.setEditable = function(bEditable) {
	if(this._btn){
		this._btn.setEnabled(bEditable && this.getEnabled());
	}
	return _set(this, "Editable", bEditable);
};

sap.ui.commons.SearchField.prototype.getMaxLength = function() {
	return _get(this, "MaxLength");
};

sap.ui.commons.SearchField.prototype.setMaxLength = function(iMaxLength) {
	return _set(this, "MaxLength", iMaxLength);
};

sap.ui.commons.SearchField.prototype.getTextAlign = function() {
	return _get(this, "TextAlign");
};

sap.ui.commons.SearchField.prototype.setTextAlign = function(oTextAlign) {
	return _set(this, "TextAlign", oTextAlign);
};

sap.ui.commons.SearchField.prototype.getTooltip = function() {
	return _get(this, "Tooltip");
};

sap.ui.commons.SearchField.prototype.setTooltip = function(oTooltip) {
	return _set(this, "Tooltip", oTooltip);
};

sap.ui.commons.SearchField.prototype.getVisibleItemCount = function() {
	return _get(this, "MaxPopupItems");
};

sap.ui.commons.SearchField.prototype.setVisibleItemCount = function(iVisibleItemCount) {
	return _set(this, "MaxPopupItems", iVisibleItemCount);
};

sap.ui.commons.SearchField.prototype.setShowExternalButton = function(bShowExternalButton) {
	if(!this._btn){
		jQuery.sap.require("sap.ui.commons.Button");
		var that = this;
		this._btn = new sap.ui.commons.Button(this.getId()+"-btn", {
			text: getText("SEARCHFIELD_BUTTONTEXT"),
			enabled: this.getEditable() && this.getEnabled(),
			press: function(){
				that.fireSearch();
			}
		});
		this._btn.setParent(this);
	}
	this.setProperty("showExternalButton", bShowExternalButton);
	return this;
};


//***********************************************
// Private helper functions
//***********************************************

var _set = function(oThis, sMutator, oVal, bSuppressRerendering) {
	oThis._ctrl["set"+sMutator](oVal);
	if(!bSuppressRerendering){
		oThis.invalidate();
	}
	return oThis;
};


var _get = function(oThis, sGetter) {
	return oThis._ctrl["get"+sGetter]();
};


var _initChildControls = function(oThis, bEnableListSuggest) {
	if(!oThis._lb){
		oThis._lb = new sap.ui.commons.ListBox(oThis.getId()+"-lb");
	}

	var oOldControl = oThis._ctrl;
	var oNewControl = null;
	if(bEnableListSuggest){
		oNewControl = new sap.ui.commons.SearchField.CB(oThis.getId()+"-cb", {listBox: oThis._lb, maxPopupItems: _DEFAULT_VISIBLE_ITEM_COUNT});
	}else{
		oNewControl = new sap.ui.commons.SearchField.TF(oThis.getId()+"-tf");
	}
	oNewControl.setParent(oThis);
	if(oOldControl){
		oNewControl.setValue(oOldControl.getValue());
		oNewControl.setEnabled(oOldControl.getEnabled());
		oNewControl.setEditable(oOldControl.getEditable());
		oNewControl.setMaxLength(oOldControl.getMaxLength());
		oNewControl.setTextAlign(oOldControl.getTextAlign());
		oNewControl.setTooltip(oOldControl.getTooltip());
		oNewControl.setMaxPopupItems(oOldControl.getMaxPopupItems());
		oOldControl.destroy();
	}
	oThis._ctrl = oNewControl;
};


var getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};


//***********************************************
//***********************************************
// Inner Controls
//***********************************************

jQuery.sap.require("sap.ui.core.Renderer");

var _renderSearchIcon = function(oRM, oCtrl){
	oRM.write("<div");
	oRM.writeAttributeEscaped('id', oCtrl.getId() + '-searchico');
	oRM.writeAttribute('unselectable', 'on');
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		oRM.writeAttribute("role", "presentation");
	}
	oRM.addClass("sapUiSearchFieldIco");
	oRM.writeClasses();
	oRM.write(">X</div>");
};


//***********************************************
// Inner Control "Search Textfield"
//***********************************************

sap.ui.commons.SearchField.TF = function (sId, mSettings) {
	sap.ui.commons.TextField.apply(this, arguments);
};
sap.ui.commons.SearchField.TF.prototype = jQuery.sap.newObject(sap.ui.commons.TextField.prototype);
sap.ui.core.Element.defineClass("sap.ui.commons.SearchField.TF", {
  baseType : "sap.ui.commons.TextField",
  library : "sap.ui.commons"
});

sap.ui.commons.SearchField.TF.prototype.getInputDomRef = function() {
	return jQuery.sap.domById(this.getId() + "-input");
};

sap.ui.commons.SearchField.TF.prototype.getFocusDomRef = sap.ui.commons.SearchField.TF.prototype.getInputDomRef;

sap.ui.commons.SearchField.TF.prototype.onkeypress = function(oEvent) {
	sap.ui.commons.SearchField.CB.prototype.onkeypress.apply(this, arguments);
};

sap.ui.commons.SearchField.TF.prototype.onkeyup = function(oEvent) {
	sap.ui.commons.SearchField.CB.prototype.onkeyup.apply(this, arguments);
};

sap.ui.commons.SearchField.TF.prototype._triggerSuggest = function(sCurrentValue) {
	this._sSuggest = null;
	if((sCurrentValue && sCurrentValue.length >= this.getParent().getStartSuggestion()) || (!sCurrentValue && this.getParent().getStartSuggestion() == 0)){
		this.getParent().fireSuggest({value: sCurrentValue});
	}
};

sap.ui.commons.SearchField.TF.prototype._checkChange = function(oEvent, bDoNotFireSearch) {
	this.getParent().fireSearch({noFocus:bDoNotFireSearch});
};

sap.ui.commons.SearchField.TF.prototype.onfocusout = function(oEvent) {
	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}
	this._checkChange(oEvent, true);
};

sap.ui.commons.SearchField.TF.prototype.onclick = function(oEvent){
	if(oEvent.target === jQuery.sap.domById(this.getId() + "-searchico")) {
		if(this.getEditable() && this.getEnabled()){
			this.focus();
		}
		if(!this.getParent().getEnableClear()){
			this._checkChange(oEvent);
		}else{
			this.setValue("");
			this._triggerValueHelp = true;
			this.onkeyup();
		}
	}
};

sap.ui.commons.SearchField.TF.prototype.getMaxPopupItems = function(){
	return this._iVisibleItemCount ? this._iVisibleItemCount : _DEFAULT_VISIBLE_ITEM_COUNT;
};

sap.ui.commons.SearchField.TF.prototype.setMaxPopupItems = function(iMaxPopupItems){
	this._iVisibleItemCount = iMaxPopupItems;
};


jQuery.sap.require("sap.ui.commons.TextFieldRenderer");
sap.ui.commons.SearchField.TFRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);
sap.ui.commons.SearchField.TFRenderer.renderOuterContent = _renderSearchIcon;
sap.ui.commons.SearchField.TFRenderer.renderOuterAttributes = function(oRM, oCtrl) {
	oRM.addClass("sapUiSearchFieldTf");
};


//***********************************************
// Inner Control "Search Combo Box"
//***********************************************

sap.ui.commons.SearchField.CB = function (sId, mSettings) {
	sap.ui.commons.ComboBox.apply(this, arguments);
	this._mSuggestions = {};
	this._aSuggestValues = [];
};
sap.ui.commons.SearchField.CB.prototype = jQuery.sap.newObject(sap.ui.commons.ComboBox.prototype);
sap.ui.core.Element.defineClass("sap.ui.commons.SearchField.CB", {
  baseType : "sap.ui.commons.ComboBox",
  library : "sap.ui.commons"
});

sap.ui.commons.SearchField.CB.prototype.updateSuggestions = function(sSuggestVal, aSuggestions) {
	this._mSuggestions[sSuggestVal] = aSuggestions;
	if(this.getInputDomRef() && jQuery(this.getInputDomRef()).val() === sSuggestVal && this._hasSuggestValue(sSuggestVal)){
		this._doUpdateList(sSuggestVal);
		this._aSuggestValues = [sSuggestVal];
	}
};

sap.ui.commons.SearchField.CB.prototype._getListBox = function() {
	return this.getParent()._lb;
};

sap.ui.commons.SearchField.CB.prototype._hasSuggestValue = function(sSuggestVal) {
	return this._aSuggestValues.length > 0 && sSuggestVal == this._aSuggestValues[this._aSuggestValues.length-1];
};

sap.ui.commons.SearchField.CB.prototype._doUpdateList = function(sSuggestVal, bSkipOpen) {
	if((!this.oPopup || !this.oPopup.isOpen()) && !bSkipOpen){
		this._open();
	}else{
		this._updateList(sSuggestVal);
	}	
	if(!this._lastKeyIsDel){
		this._doTypeAhead();
	}
};

sap.ui.commons.SearchField.CB.prototype.onclick = function(oEvent) {
	sap.ui.commons.ComboBox.prototype.onclick.apply(this, arguments);
	if(oEvent.target === jQuery.sap.domById(this.getId() + "-searchico")) {
		if(!this.getParent().getEnableClear()){
			this.getParent().fireSearch();
		}else{
			this.setValue("");
			this._triggerValueHelp = true;
			this.onkeyup(null, true);
			this._aSuggestValues = [];
		}
		if(this.getEditable() && this.getEnabled()){
			this.focus();
		}
	}else if(jQuery.sap.containsOrEquals(jQuery.sap.domById(this.getId() + "-providerico"), oEvent.target)) {
		if(this.getEditable() && this.getEnabled()){
			this.focus();
		}
	}
};

sap.ui.commons.SearchField.CB.prototype.onkeypress = function(oEvent) {
	var oKC = jQuery.sap.KeyCodes;
	if(sap.ui.commons.ComboBox._isHotKey(oEvent) || oEvent.keyCode === oKC.F4 && oEvent.which === 0 /*this is the Firefox case and ensures 's' with same charCode is accepted*/) {
		return;
	}

	var iKC = oEvent.which || oEvent.keyCode;
	if(iKC !== oKC.ESCAPE) {
		this._triggerValueHelp = true;
		this._lastKeyIsDel = iKC == oKC.DELETE || iKC == oKC.BACKSPACE; 
	}
};

sap.ui.commons.SearchField.CB.prototype.onkeyup = function(oEvent, bSkipOpen) {
	if(this._triggerValueHelp){
		this._triggerValueHelp = false;
		if(this._sSuggest){
			jQuery.sap.clearDelayedCall(this._sSuggest);
			this._sSuggest = null;
		}
		var sCurrentValue = jQuery(this.getInputDomRef()).val();
		if((sCurrentValue && sCurrentValue.length >= this.getParent().getStartSuggestion()) || (!sCurrentValue && this.getParent().getStartSuggestion() == 0)){
			this._sSuggest = jQuery.sap.delayedCall(200, this, "_triggerSuggest", [sCurrentValue]);
		}else if(this._doUpdateList){ //Textfield uses the same onkeyup function -> therefore check existence of this function
			this._doUpdateList(sCurrentValue, bSkipOpen);
		}
	}
};

sap.ui.commons.SearchField.CB.prototype._triggerSuggest = function(sSuggestValue) {
	this._sSuggest = null;
	if(!this._mSuggestions[sSuggestValue]){
		this._aSuggestValues.push(sSuggestValue);
		var oSearchProvider = this.getParent().getSearchProvider();
		if(oSearchProvider){
			oSearchProvider._doSuggest(this.getParent(), sSuggestValue);
		}else{
			this.getParent().fireSuggest({value: sSuggestValue});
		}
	}else{
		this._doUpdateList(sSuggestValue);
	}
};

sap.ui.commons.SearchField.CB.prototype._updateList = function(sSuggestVal) {
	var bEmpty = false;
	var oLb = this._getListBox();
	oLb.destroyAggregation("items", true);
	
	var addToListbox = function(oLb, aValues, iMax, bSeparatorBefore){
		aValues = aValues ? aValues : [];
		var iCount = Math.min(aValues.length, iMax);
		
		if(bSeparatorBefore && iCount > 0){
			oLb.addItem(new sap.ui.core.SeparatorItem());
		}
		
		for(var i=0; i<iCount; i++){
			//oLb.addAggregation("items", new sap.ui.core.ListItem({text: aSug[i]}), true);
			oLb.addItem(new sap.ui.core.ListItem({text: aValues[i]}));
		}
		return iCount;
	};
	
	var iHistoryCount = addToListbox(oLb, this.getParent()._oHistory.get(sSuggestVal), this.getParent().getMaxHistoryItems(), false);

	var iSuggestCount = addToListbox(oLb, 
			sSuggestVal && sSuggestVal.length >= this.getParent().getStartSuggestion() ? this._mSuggestions[sSuggestVal] : [],
			this.getParent().getMaxSuggestionItems(),
			iHistoryCount > 0);

	if(iHistoryCount == 0 && iSuggestCount == 0) {
		oLb.addItem(new sap.ui.core.ListItem({text: getText("SEARCHFIELD_NO_ITEMS"), enabled: false}));
		bEmpty = true;
	}
	
	var iItemsLength = oLb.getItems().length;
	var iMaxPopupItems = this.getMaxPopupItems();
	oLb.setVisibleItems(iMaxPopupItems < iItemsLength ? iMaxPopupItems : iItemsLength);
	oLb.setSelectedIndex(-1);
	oLb.setMinWidth(jQuery(this.getDomRef()).rect().width + "px");
	oLb.rerender();
	return bEmpty;
};

sap.ui.commons.SearchField.CB.prototype._prepareOpen = function() {};

sap.ui.commons.SearchField.CB.prototype._open = function() {
	sap.ui.commons.ComboBox.prototype._open.apply(this, [0]);
};

sap.ui.commons.SearchField.CB.prototype._rerenderListBox = function(){
	return this._updateList(this._aSuggestValues.length > 0 ? this._aSuggestValues[this._aSuggestValues.length-1] : null);
};

sap.ui.commons.SearchField.CB.prototype._checkChange = function(oEvent, bImmediate, bDoNotFireSearch) {
	this.getParent().fireSearch({noFocus:bDoNotFireSearch});
};

sap.ui.commons.SearchField.CB.prototype.onsapfocusleave = function(oEvent) {
	if(oEvent.relatedControlId === this._getListBox().getId()){
		this.focus();
		return;
	}
	this._checkChange(oEvent, true, true);
};

sap.ui.commons.SearchField.CB.prototype.onfocusout = function(oEvent) {
	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}
	this._checkChange(oEvent, true, true);
};

sap.ui.commons.SearchField.CB.prototype.onsapshow = function(oEvent){
	if(this.getParent().getShowListExpander()){
		sap.ui.commons.ComboBox.prototype.onsapshow.apply(this, arguments);
	}else{
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	}
};

sap.ui.commons.SearchField.CB.prototype._handleSelect = function(oControlEvent) {
	var oItem = sap.ui.commons.ComboBox.prototype._handleSelect.apply(this, arguments);
	if(oItem && oItem.getEnabled()) {
		this.getParent().fireSearch();
	}
};


jQuery.sap.require("sap.ui.commons.ComboBoxRenderer");
sap.ui.commons.SearchField.CBRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ComboBoxRenderer);
sap.ui.commons.SearchField.CBRenderer.renderOuterContent = function(oRM, oCtrl){
	if(oCtrl.getParent().getShowListExpander()){
		sap.ui.commons.ComboBoxRenderer.renderOuterContent.apply(this, arguments);
	}
	_renderSearchIcon.apply(this, arguments);
	
	if(oCtrl.getParent().getSearchProvider() && oCtrl.getParent().getSearchProvider().getIcon()){
		oRM.write("<div");
		oRM.writeAttributeEscaped('id', oCtrl.getId() + '-providerico');
		oRM.writeAttribute('unselectable', 'on');
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			oRM.writeAttribute("role", "presentation");
		}
		oRM.addClass("sapUiSearchFieldProvIco");
		oRM.writeClasses();
		oRM.write("><img src=\""+oCtrl.getParent().getSearchProvider().getIcon()+"\"></img></div>");
	}
};
sap.ui.commons.SearchField.CBRenderer.renderOuterAttributes = function(oRM, oCtrl) {
	sap.ui.commons.ComboBoxRenderer.renderOuterAttributes.apply(this, arguments);
	oRM.addClass("sapUiSearchFieldCb");
	if(oCtrl.getParent().getSearchProvider() && oCtrl.getParent().getSearchProvider().getIcon()){
		oRM.addClass("sapUiSearchFieldCbProv");
	}
};

}());
}; // end of sap.ui.commons.SearchField
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToggleButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *
 * (c) Copyright 2009-2011 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.ui.commons.ToggleButtonRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ToggleButton renderer.
 * @author D040134 
 * @static
 */

sap.ui.commons.ToggleButtonRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ButtonRenderer);

/**
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.ToggleButton}
 *            oToggleButton the ToggleButton that should be rendered
 * @private
 * P.S.: "renderButtonAttributes" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 */
sap.ui.commons.ToggleButtonRenderer.renderButtonAttributes = function(rm, oToggleButton) {
	rm.addClass("sapUiToggleBtn");
	if (oToggleButton.getPressed()){
		rm.addClass("sapUiToggleBtnPressed");
	}
};


/**
 * Function called by ToggleButton control to enable Pressed state.
 */
sap.ui.commons.ToggleButtonRenderer.onactivePressed = function(oToggleButton) {
	jQuery.sap.byId(oToggleButton.getId()).addClass("sapUiToggleBtnPressed");
};

/**
 * Function called by button control to disable Pressed state.
 */
sap.ui.commons.ToggleButtonRenderer.ondeactivePressed = function(oToggleButton) {
	jQuery.sap.byId(oToggleButton.getId()).removeClass("sapUiToggleBtnPressed");
};

}; // end of sap.ui.commons.ToggleButtonRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.CheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.CheckBox
jQuery.sap.declare("sap.ui.commons.CheckBoxRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class
 * @author d046011
 * @version 0.1
 * @static
 */
sap.ui.commons.CheckBoxRenderer = {
};

/**
 * Renders the HTML for the CheckBox, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that is used for writing to the render output buffer.
 * @param {sap.ui.commons.CheckBox} oCheckBox The CheckBox control that should be rendered.
 */
sap.ui.commons.CheckBoxRenderer.render = function(oRenderManager, oCheckBox) {
	var rm = oRenderManager;

	// Return immediately if control is invisible
	if (!oCheckBox.getVisible()) {
		return;
	}

	rm.addClass("sapUiCb");

	// Open the containing <span> tag
	rm.write("<span");
	rm.writeControlData(oCheckBox);

	// ARIA
	rm.writeAttribute("role", sap.ui.core.AccessibleRole.Checkbox.toLowerCase());
	rm.writeAccessibilityState(oCheckBox);

	// Collect state information
	var enabled = oCheckBox.getEnabled() != null && oCheckBox.getEnabled();
	var editable = oCheckBox.getEditable() != null && oCheckBox.getEditable();
	var inErrorState = false;
	var inWarningState = false;
	if (oCheckBox.getValueState() != null) {
		inErrorState = sap.ui.core.ValueState.Error == oCheckBox.getValueState();
		inWarningState = sap.ui.core.ValueState.Warning == oCheckBox.getValueState();
	}


	// Add classes and properties depending on the state
	if (oCheckBox.getChecked()) {
		rm.addClass("sapUiCbChk");
	}

	var myTabIndex = 0;
	var bReadOnly = false;

	if (!enabled) {
		bReadOnly = true;
		rm.addClass("sapUiCbDis");
		myTabIndex = -1;
	}
	if (!editable) {
		bReadOnly = true;
		rm.addClass("sapUiCbRo");
		myTabIndex = -1;
	}
	if (inErrorState) {
		rm.addClass("sapUiCbErr");
		rm.writeAttribute("aria-invalid", "true");
	} else if (inWarningState) {
		rm.addClass("sapUiCbWarn");
	}
	if (enabled && editable && !inErrorState && !inWarningState) {
		rm.addClass("sapUiCbStd");
	}
	if (enabled && editable) {
		rm.addClass("sapUiCbInteractive");
	}
	rm.writeClasses();

	if (oCheckBox.getWidth() && oCheckBox.getWidth() != '') {
		rm.writeAttribute("style", "width:" + oCheckBox.getWidth() + ";");
	}

	rm.writeAttribute("tabIndex", myTabIndex);
	
	rm.write(">"); // close the containing <span> tag


	// Write the (potentially hidden) HTML checkbox element
	rm.write("<input type='CheckBox' tabindex='-1' id='");
	rm.write(oCheckBox.getId());
	rm.write("-CB'");
	
	if (oCheckBox.getName()) {
		rm.writeAttributeEscaped('name', oCheckBox.getName());
	}

	if (oCheckBox.getChecked()) {
		rm.write(" checked='checked'");
	}
	if (!enabled) {
		rm.write(" disabled='disabled'");
	}
	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oCheckBox, oCheckBox.getTooltip_AsString());
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	if(bReadOnly) {
		rm.write(" readOnly='readOnly'");
	}
	rm.write(" />"); // close checkbox-input-element


	// Write the checkbox label which also holds the background image
	rm.write("<label");
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	rm.writeAttribute("for", oCheckBox.getId() + "-CB"); // label for checkbox, so clicks toggle the state
	if (!oCheckBox.getText()) {
		rm.write(" class='sapUiCbNoText'");
	}
	rm.write(">");
	if (oCheckBox.getText()) {
		this.renderText(rm, oCheckBox.getText(), oCheckBox.getTextDirection());
	}
	rm.write("</label>");

	// close the surrounding <span> element
	rm.write("</span>");
};



/**
 * Write the CheckBox label either flat or - in case the text direction is different from the environment - within a &lt;span&gt; tag with an explicit "dir".
 */
sap.ui.commons.CheckBoxRenderer.renderText = function(oRenderManager, sText, eTextDirection) {
	var rm = oRenderManager;
	if (!eTextDirection || eTextDirection == sap.ui.core.TextDirection.Inherit) {
		rm.writeEscaped(sText);
	} else {
		rm.write("<span dir=\"" + eTextDirection + "\">");
		rm.writeEscaped(sText);
		rm.write("</span>");
	}
};
}; // end of sap.ui.commons.CheckBoxRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.SliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Slider
jQuery.sap.declare("sap.ui.commons.SliderRenderer");

/**
 * @class Slider renderer.
 * @static
 */
sap.ui.commons.SliderRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.SliderRenderer.render = function(oRenderManager, oSlider){
	// Convenience variable
	var rm = oRenderManager;
	var oR  = sap.ui.commons.SliderRenderer;

	// Return immediately if control is invisible
	if (!oSlider.getVisible()) {
		return;
	}

	// Write the HTML into the render manager
	rm.write('<DIV');
	rm.writeControlData(oSlider);
	rm.addClass('sapUiSli');
	if(oSlider.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oSlider.getTooltip_AsString());
	}

	if (oSlider.getWidth() && oSlider.getWidth() != '') {
		rm.writeAttribute('style', 'width:' + oSlider.getWidth() + ';');
	}

	if (!oSlider.getEnabled()) {
		rm.addClass('sapUiSliDsbl');
	}else{
		if (!oSlider.getEditable()) {
			rm.addClass('sapUiSliRo');
		}else {
			rm.addClass('sapUiSliStd');
		}
	}

	rm.writeClasses();

	// Write slide bar
	rm.write('><DIV');
	rm.writeAttribute('id', oSlider.getId() + '-right');
	rm.write('class="sapUiSliR" > <DIV');

	rm.writeAttribute('id', oSlider.getId() + '-left');
	rm.write('class="sapUiSliL" > <DIV');

	rm.writeAttribute('id', oSlider.getId() + '-bar');
	rm.write('class="sapUiSliBar" >');

	if(oSlider.getTotalUnits() > 0){

		var fStepSize = (oSlider.getMax() - oSlider.getMin()) / oSlider.getTotalUnits();

		// Add ticks
		for (var i = 0; i <= oSlider.getTotalUnits(); i++){
			rm.write('<DIV');
			rm.writeAttribute('id', oSlider.getId() + '-tick' + i);
			rm.write('class="sapUiSliTick" ');
			rm.write('></DIV>'); // tick

			if( oSlider.getStepLabels()){
				// Texts
				rm.write('<DIV');
				rm.writeAttribute('id', oSlider.getId() + '-text' + i);
				switch (i){
				case ( 0 ):
					rm.write('class="sapUiSliText sapUiSliTextLeft" >');
					break;
				case (oSlider.getTotalUnits()):
					rm.write('class="sapUiSliText sapUiSliTextRight" >');
					break;
				default:
					rm.write('class="sapUiSliText" >');
					break;
				}

				rm.write(oSlider.getMin() + i * fStepSize);
				rm.write('</DIV>'); // Text
			}
		}
	}

	// Highlight bar
	rm.write('<DIV');
	rm.writeAttribute('id', oSlider.getId() + '-hili');
	rm.write('class="sapUiSliHiLi"></DIV><DIV');

	// Icon for grip
	rm.writeAttribute('id', oSlider.getId() + '-grip');
	if (oSlider.getEnabled()) {
		rm.writeAttribute('tabIndex', '0');
	}else{
		rm.writeAttribute('tabIndex', '-1');
	}
	rm.writeAttribute('class', 'sapUiSliGrip');
	rm.writeAttribute('title', oSlider.getValue());

	// ARIA
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
//		rm.writeAttribute("role", sap.ui.core.AccessibleRole.Slider);
		rm.writeAttribute('role', 'slider');
		rm.writeAccessibilityState(oSlider, {orientation: 'horizontal'});
		rm.writeAccessibilityState(oSlider, {valuemin:oSlider.getMin()});
		rm.writeAccessibilityState(oSlider, {valuemax:oSlider.getMax()});
		rm.writeAccessibilityState(oSlider, {live: 'assertive'});
		rm.writeAccessibilityState(oSlider, {label:oSlider.getTooltip_AsString()});

		if (!oSlider.getEditable() || !oSlider.getEnabled()) {
			rm.writeAccessibilityState(oSlider, {disabled: true});
		}else {
			rm.writeAccessibilityState(oSlider, {disabled: false});
		}
	}

	rm.write('>&#9650;</DIV></DIV></DIV></DIV></DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

};
}; // end of sap.ui.commons.SliderRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Title.
jQuery.sap.declare("sap.ui.commons.Title");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Title.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>icon : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Represents a title element that can be used for aggregation with other controls.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Title = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Title.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.Title. 
 * Resulting metadata can be obtained via sap.ui.commons.Title.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Title", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getIcon", "setIcon"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : null},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * Property for title text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Title.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Title} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Title.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * Property for icon URL.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.Title.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.Title} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Title.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


// Start of sap/ui/commons/Title.js

}; // end of sap.ui.commons.Title
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Toolbar
jQuery.sap.declare("sap.ui.commons.ToolbarRenderer");

/**
 * @class
 *
 * @static
 */
sap.ui.commons.ToolbarRenderer = {
};

/**
 * Renders the HTML for the given toolbar using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Toolbar} oToolbar An object representation of the control that should be rendered.
 */
sap.ui.commons.ToolbarRenderer.render = function(oRenderManager, oToolbar) {
	var r = sap.ui.commons.ToolbarRenderer;
	var rm = oRenderManager;
	jQuery.sap.assert(oToolbar instanceof sap.ui.commons.Toolbar, "ToolbarRenderer.render: oToolbar must be a toolbar");

	if (!oToolbar.getVisible()) {
		return;
	}

	rm.write("<div role='toolbar' tabindex='0'"); // Tab index required for ItemNavigation, the Toolbar is actually not tabable
	rm.writeControlData(oToolbar);
	if (oToolbar.getWidth()) {
		rm.addStyle("width", oToolbar.getWidth());
	}

	rm.addClass("sapUiTb");
	rm.addClass("sapUiTbDesign" + oToolbar.getDesign());
	if (oToolbar.getStandalone()) {
		rm.addClass("sapUiTbStandalone");
	}

	rm.writeStyles();
	rm.writeClasses();
	rm.write("><div class='sapUiTbCont'><div class='sapUiTbInner'>");


	// Render each item, also the hidden ones, as they might become visible when the toolbar is resized
	var aItems = oToolbar.getItems();
	var iLength = aItems.length;
	for (var i = 0; i < iLength; i++) {
		var oToolbarItem = aItems[i];
		if (oToolbarItem) {
			jQuery.sap.assert(oToolbarItem.getMetadata().isInstanceOf("sap.ui.commons.ToolbarItem"), "ToolbarRenderer.render: oToolbarItem must be a ToolbarItem");

			// Render ToolbarSeparator elements internally, dispatch rendering of real controls
			if (oToolbarItem instanceof sap.ui.commons.ToolbarSeparator) {
				sap.ui.commons.ToolbarRenderer.renderSeparator(rm, oToolbarItem);
			} else {
				rm.renderControl(oToolbarItem);
			}
		}
	}

	// Render the overflow menu button and the cover hiding it, if appropriate
	rm.write('<div id="');
	rm.write(oToolbar.getId());
	rm.write('-mn"');
	rm.write(" class='sapUiTbOB' role='button' title='Toolbar Overflow'></div></div></div></div>"); // TODO: i18n, make translatable

};


/**
 * Renders the given ToolbarSeparator
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager
 * @param {sap.ui.commons.ToolbarItem} oToolbarItem The ToolbarSeparator
 * @private
 */
sap.ui.commons.ToolbarRenderer.renderSeparator = function(oRm, oToolbarItem) {
	if (oToolbarItem.getDisplayVisualSeparator()) {
		oRm.write("<span ");
		oRm.writeElementData(oToolbarItem);
		oRm.write(" class='sapUiTbSeparator' role='separator'></span>");
	} else {
		oRm.write("<span ");
		oRm.writeElementData(oToolbarItem);
		oRm.write(" class='sapUiTbSpacer' role='separator'></span>");
	}
};


/**
 * Fills the overflow popup with the currently invisible toolbar items.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.fillOverflowPopup = function(oToolbar) {
	var oPopupHolder = jQuery.sap.domById(oToolbar.getId() + "-pu");
	if (!oPopupHolder) {
		oPopupHolder = sap.ui.commons.ToolbarRenderer.initOverflowPopup(oToolbar).firstChild;
	}

	// Move all invisible items from the second row of the toolbar to the popup
	var iVisibleItems = oToolbar.getVisibleItemInfo().count;
	var oToolbarCont = oToolbar.getDomRef().firstChild.firstChild;
	var iPos = 0;
	var oChild = oToolbarCont.firstChild;
	var sOverflowButtonId = oToolbar.getId() + "-mn";
	while (oChild) {
		var nextChild = oChild.nextSibling;
		if (iPos >= iVisibleItems) {
			if (oChild.id == sOverflowButtonId) { // do not move overflow button and cover
				break;
			}

			oPopupHolder.appendChild(oChild);
		}
		oChild = nextChild;
		iPos++;
	}
};


/**
 * Creates the overflow popup inside the static area, but does not fill its contents (=no items).
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.initOverflowPopup = function(oToolbar) {
	var oStaticArea = sap.ui.getCore().getStaticAreaRef();
	var oPopupHolder = document.createElement("div");
	oPopupHolder.className = "sapUiTbDD sapUiTbDesignFlat";
	oPopupHolder.innerHTML = "<div id='" + oToolbar.getId() + "-pu' data-sap-ui=" + oToolbar.getId() + " tabindex='0'></div>";
	oStaticArea.appendChild(oPopupHolder);
	return oPopupHolder;
};


/**
 * Removes the toolbar items from the overflow popup and puts them back into the toolbar.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.emptyOverflowPopup = function(oToolbar) {
	var oPopupHolder = jQuery.sap.domById(oToolbar.getId() + "-pu");
	var oOverflowButton = jQuery.sap.domById(oToolbar.getId() + "-mn");
	var oToolbarCont = oToolbar.getDomRef().firstChild.firstChild;
	while (oPopupHolder.hasChildNodes()) {
		oToolbarCont.insertBefore(oPopupHolder.firstChild, oOverflowButton);
	}
};


/**
 * Returns the area in which the overflow popup should be rendered.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar whose popup area is requested
 *
 * @private
 */
sap.ui.commons.ToolbarRenderer.getPopupArea = function(oToolbar) {
	return jQuery.sap.domById(oToolbar.getId() + "-pu");
};

/**
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar where the overflow button should be set active
 * @private
 */
sap.ui.commons.ToolbarRenderer.setActive = function(oToolbar) {
	jQuery.sap.byId(oToolbar.getId() + "-mn").addClass("sapUiTbOBAct");
};

/**
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar where the overflow button should be set not active
 * @private
 */
sap.ui.commons.ToolbarRenderer.unsetActive = function(oToolbar) {
	jQuery.sap.byId(oToolbar.getId() + "-mn").removeClass("sapUiTbOBAct");
};
}; // end of sap.ui.commons.ToolbarRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.MessageBar
jQuery.sap.declare("sap.ui.commons.MessageBarRenderer");
//jQuery.sap.require("sap.ui.commons.MessageType");
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * @class MessageBar renderer.
 * @static
 */
sap.ui.commons.MessageBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageBarRenderer.render = function(oRenderManager, oControl){
  // Convenience variables
	var rm  = oRenderManager;
	var id  = oControl.getId();

	// Opening the outer DIV container:
	// (Marking it as "draggable" stops the browser text selection on drag.)
	rm.write('<div draggable="true"');
  rm.writeControlData(oControl);
  rm.addClass("sapUiMsgBar");
  if (this.oDropPosition) {
	// A "re-dock" image will be added if the MessageBar has been dragged.
	rm.addClass("sapUiMsgBarMoved");
  }
  rm.writeClasses();
  rm.write(">");

		// Opening the counters&icons DIV container:
		// (An "id" is provided as the Toast will have to right-align against this element.)
		rm.write('<div id="' + id + '__sums" class="sapUiMsgBarSums">');

		  // Open-Hide message list arrow:
			// (An "id" is provided as the Toast will have to point-back towards this element.)
			// (This "Arrow" image is state-dependent and theme-dependent.)
			rm.write('<div id="' + id + '__arrowImg" class="sapUiMsgBarToggle"></div>');

		  // Error area: Image and Error count.
			// IDs are provided for DOM updates: display:none and count.
			rm.write('<div id="' + id + '__ErrorImg" class="sapUiMsgIcon sapUiMsgIconError sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__ErrorCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		  // Warning area: Image and Warning count.
			rm.write('<div id="' + id + '__WarningImg" class="sapUiMsgIcon sapUiMsgIconWarning sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__WarningCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		  // Success area: Image and Success count.
			rm.write('<div id="' + id + '__SuccessImg" class="sapUiMsgIcon sapUiMsgIconSuccess sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__SuccessCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		// Closing the counters&icons DIV container:
	  rm.write("</div>");

	  // Re-dock icon: Appears after Drag&Drop.
		rm.write('<div class="sapUiMsgBarHome"></div>');

	// Closing the outer DIV container:
  rm.write("</div>");
};
}; // end of sap.ui.commons.MessageBarRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RatingIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RatingIndicator
jQuery.sap.declare("sap.ui.commons.RatingIndicatorRenderer");

/**
 * @class RatingIndicatorRenderer.
 * @static
 */
sap.ui.commons.RatingIndicatorRenderer = function() {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oRating an object representation of the control that should be rendered
 */
sap.ui.commons.RatingIndicatorRenderer.render = function(oRenderManager, oRating) {
	var rm = oRenderManager;

	// return immediately if control is invisible
	if(!oRating.getVisible()){
		return;
	}

	var iNumberOfSymbols = oRating.getMaxValue();

	rm.write("<div");
	rm.writeControlData(oRating);
	rm.addClass("sapUiRating");
	if(oRating.getEditable()){
		rm.addClass("sapUiRatingEdit");
	}
	rm.writeClasses();
	rm.writeAttribute("tabindex", oRating.getEditable() ? "0" : "-1");
	if(oRating.getTooltip() && oRating.getTooltip_AsString()){
		rm.writeAttribute("title", oRating.getTooltip_AsString());
	}else if(!oRating.getEditable()){
		rm.writeAttribute("title", oRating.getValue());
	}

	//ARIA
	rm.writeAttribute("role", "slider");
	rm.writeAttribute("aria-orientation", "horizontal");
	rm.writeAttribute("aria-valuemin", 1);
	rm.writeAttribute("aria-valuemax", iNumberOfSymbols);
	rm.writeAttribute("aria-disabled", !oRating.getEditable());
	rm.writeAttribute("aria-live", "assertive");

	rm.write(">");

	for(var i=0; i<iNumberOfSymbols; i++){
		sap.ui.commons.RatingIndicatorRenderer.renderItem(rm, oRating, i, oRating.getValue());
	}

	rm.write("</div>");
};

/**
 * Helper function to render a rating symbol.
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.renderItem = function(rm, oRating, i, fValue){
	var val = i+1;
	rm.write("<div");
	rm.writeAttribute("id", oRating.getId() + "-itm-" + val);
	rm.writeAttribute("itemvalue", val);
	rm.writeAttribute("class", "sapUiRatingItm");
	rm.writeAttribute("style", "line-height:0px;");
	if(!oRating.getTooltip() && oRating.getEditable()){
		//rm.writeAttribute("dir", "ltr"); //Do we need this to avoid tooltips like "of 5 3" instead of "3 of 5"
		rm.writeAttribute("title", oRating._getText("RATING_TOOLTIP" , [val, oRating.getMaxValue()]));
	}
	rm.write(">");

	rm.write("<img");
	rm.writeAttribute("class", "sapUiRatingItmImg");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("selected", oRating);
	rm.writeAttributeEscaped("src", sIcon);
	rm.write("/>");

	rm.write("<div");
	rm.writeAttribute("class", "sapUiRatingItmOvrflw");

	var visualMode = oRating.getVisualMode();
	if(visualMode == "Full"){
		fValue = Math.round(fValue);
	}
	var style;
	if(fValue >= val){
		style = "width:0%;";
	}else if(fValue < i){
		style = "width:100%;";
	}else{
		var diff = fValue-i;
		if(visualMode == "Half"){
			var width = 50;
			if(diff < 0.25) {
				width = 100;
			}
			if(diff >= 0.75) {
				width = 0;
			}
			style = "width:" + width + "%;";
		}else{ //Continuous
			style = "width:" + (100-Math.round(diff*100)) + "%;";
		}
	}
	rm.writeAttribute("style", style);
	rm.write(">");

	rm.write("<img");
	rm.writeAttribute("class", "sapUiRatingItmOvrflwImg");
	sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("unselected", oRating);
	rm.writeAttributeEscaped("src", sIcon);
	rm.write("/>");

	rm.write("</div>");
	rm.write("</div>");
};

/**
 * Helper function to render a rating symbol in hover state.
 *
 * @param {integer} iCount the number of the rating image which should be hovered.
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @param {boolean} bAfter specifies whether the rating image is behind the hovered one.
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol = function(iCount, oRating, bAfter){
	var oSymbol = jQuery.sap.byId(oRating.getId() + "-itm-" + iCount);
	oSymbol.addClass("sapUiRatingItmHov");
	var oSymbolImage = oSymbol.children("img");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol(bAfter ? "unselected" : "hover", oRating);
	oSymbolImage.attr("src", sIcon);
};

/**
 * Helper function to render a rating symbol in normal (selected/deselected) state.
 *
 * @param {integer} iCount the number of the rating image which should be unhovered.
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol = function(iCount, oRating){
	var oSymbol = jQuery.sap.byId(oRating.getId() + "-itm-" + iCount);
	oSymbol.removeClass("sapUiRatingItmHov");
	var oSymbolImage = oSymbol.children("img");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("selected", oRating);
	oSymbolImage.attr("src", sIcon);
};

/**
 * Helper function to find the right symbol.
 *
 * @param {string} sType type of desired image (selected, unselected, hover)
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol = function(sType, oRating){
	var sIcon;

	if(sType == "selected"){
		sIcon = oRating.getIconSelected();
	}else if(sType == "unselected"){
		sIcon = oRating.getIconUnselected();
	}else{
		sIcon = oRating.getIconHovered();
	}

	if(!sIcon){
		//TODO: Access the parameters in the CSS to get the path
		var sPath = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/rating/";
		sIcon = sPath + "star_" + sType + ".png";
	}

	return sIcon;
};
}; // end of sap.ui.commons.RatingIndicatorRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonGroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RadioButtonGroup
jQuery.sap.declare("sap.ui.commons.RadioButtonGroupRenderer");

/**
 * @class RadioButtonGroup renderer.
 * @static
 */
sap.ui.commons.RadioButtonGroupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.RadioButtonGroupRenderer.render = function(oRenderManager, oRBGroup){
	// convenience variable
	var rm = oRenderManager;

	// Return immediately if control is invisible or has no RadioButtons
	if (!oRBGroup.getVisible() || !oRBGroup.aRBs) {
		return;
	}

	var iColumns = oRBGroup.getColumns();

	rm.write("<DIV");
	rm.writeControlData(oRBGroup);
	rm.addClass("sapUiRbG");
	if(iColumns > 1){
		if(iColumns == oRBGroup.aRBs.length){
			rm.addClass("sapUiRbG1Row");
		}else{
			rm.addClass("sapUiRbGTab");
		}
	}

	if (oRBGroup.getWidth() && oRBGroup.getWidth() != '') {
		rm.addStyle("width", oRBGroup.getWidth());
	}

	if (oRBGroup.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oRBGroup.getTooltip_AsString());
	}

	if(oRBGroup.getEditable()){
		rm.writeAttribute('tabindex', '0');
	}else{
		rm.writeAttribute('tabindex', '-1');
	}

	// ARIA
	rm.writeAttribute("role", "radiogroup");
	rm.writeAccessibilityState(oRBGroup, {invalid: oRBGroup.getValueState() == sap.ui.core.ValueState.Error,
										  disabled: !oRBGroup.getEditable()});
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // DIV

	// columns
	for (var c = 0; c < iColumns; c++) {
		if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
			// if only 1 column -> no DIV necessary
			rm.write("<DIV");
			rm.addClass("sapUiRbGCol");
			rm.writeClasses();
			rm.write(">"); // DIV element
		}

		// render RadioButtons
		for (var i = c; i < oRBGroup.aRBs.length; i=i+iColumns) {
			rm.renderControl(oRBGroup.aRBs[i]);
		}

		if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
			rm.write("</DIV>");
		}
	}

		if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
			// dummy Column to avoid big spaces between RadioButtons in Safari
			rm.write('<DIV class="sapUiRbGDummy"> </DIV>');
		}

	rm.write("</DIV>");
};
}; // end of sap.ui.commons.RadioButtonGroupRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeater') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeater.
jQuery.sap.declare("sap.ui.commons.RowRepeater");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RowRepeater.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>numberOfRows : int</li>
 * <li>currentPage : int</li>
 * <li>showMoreSteps : int</li>
 * <li>fixedRowHeight : sap.ui.core.CSSSize</li>
 * <li>design : sap.ui.commons.RowRepeaterDesign</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>rows : sap.ui.core.Control</li>
 * <li>title : sap.ui.commons.Title</li>
 * <li>filters : sap.ui.commons.RowRepeaterFilter</li>
 * <li>sorters : sap.ui.commons.RowRepeaterSorter</li>
 * <li>noData : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>filter : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>sort : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>page : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>resize : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This control displays items in a stacked list format, allowing the user to page in order to see more items or to use the offered filtering and sorting capabilities in order to manipulate the displayed data.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RowRepeater = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RowRepeater.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.RowRepeater. 
 * Resulting metadata can be obtained via sap.ui.commons.RowRepeater.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RowRepeater", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getNumberOfRows", "setNumberOfRows", "getCurrentPage", "setCurrentPage", "getShowMoreSteps", "setShowMoreSteps", "getFixedRowHeight", "setFixedRowHeight", "getDesign", "setDesign", 
    // aggregations
    "getRows", "insertRow", "addRow", "removeRow", "removeAllRows", "indexOfRow", "destroyRows", "bindRows", "unbindRows", "getTitle", "setTitle", "destroyTitle", "getFilters", "insertFilter", "addFilter", "removeFilter", "removeAllFilters", "indexOfFilter", "destroyFilters", "getSorters", "insertSorter", "addSorter", "removeSorter", "removeAllSorters", "indexOfSorter", "destroySorters", "getNoData", "setNoData", "destroyNoData", 
    // associations
    
    // events
    "attachFilter", "detachFilter", "attachSort", "detachSort", "attachPage", "detachPage", "attachResize", "detachResize", 
    // methods
    "triggerShowMore", "resize", "applyFilter", "triggerSort", "firstPage", "lastPage", "previousPage", "nextPage", "gotoPage"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "numberOfRows" : {name : "numberOfRows", type : "int", group : "Dimension", defaultValue : 5},
    "currentPage" : {name : "currentPage", type : "int", group : "Data", defaultValue : 1},
    "showMoreSteps" : {name : "showMoreSteps", type : "int", group : "Behavior", defaultValue : 0},
    "fixedRowHeight" : {name : "fixedRowHeight", type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : ''},
    "design" : {name : "design", type : "sap.ui.commons.RowRepeaterDesign", group : "Appearance", defaultValue : sap.ui.commons.RowRepeaterDesign.Standard}
  },
  defaultAggregation : "rows",
  aggregations : {
    "rows" : {name : "rows", type : "sap.ui.core.Control", multiple : true, singularName : "row"}, 
    "title" : {name : "title", type : "sap.ui.commons.Title", multiple : false}, 
    "filters" : {name : "filters", type : "sap.ui.commons.RowRepeaterFilter", multiple : true, singularName : "filter"}, 
    "sorters" : {name : "sorters", type : "sap.ui.commons.RowRepeaterSorter", multiple : true, singularName : "sorter"}, 
    "noData" : {name : "noData", type : "sap.ui.core.Control", multiple : false}
  },
  associations : {},
  events : {
    "filter" : "filter", 
    "sort" : "sort", 
    "page" : "page", 
    "resize" : "resize"
  }

});	

sap.ui.commons.RowRepeater.M_EVENTS = {'filter':'filter','sort':'sort','page':'page','resize':'resize'};


/**
 * Getter for property <code>visible</code>.
 * Invisible row-repeaters are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>numberOfRows</code>.
 * Number of rows displayed.
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>numberOfRows</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getNumberOfRows = function() {
	return this.getProperty("numberOfRows");
};

/**
 * Setter for property <code>numberOfRows</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iNumberOfRows  new value for property <code>numberOfRows</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setNumberOfRows = function(iNumberOfRows) {
	this.setProperty("numberOfRows", iNumberOfRows);
	return this;
};


/**
 * Getter for property <code>currentPage</code>.
 * The index of the page currently displayed. The index starts at 1.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>currentPage</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getCurrentPage = function() {
	return this.getProperty("currentPage");
};

/**
 * Setter for property <code>currentPage</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setCurrentPage = function(iCurrentPage) {
	this.setProperty("currentPage", iCurrentPage);
	return this;
};


/**
 * Getter for property <code>showMoreSteps</code>.
 * Step size used to increase the numberOfRows value. This feature is only active if value is greater than 0. This will deactivate the paging feature.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>showMoreSteps</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getShowMoreSteps = function() {
	return this.getProperty("showMoreSteps");
};

/**
 * Setter for property <code>showMoreSteps</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iShowMoreSteps  new value for property <code>showMoreSteps</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setShowMoreSteps = function(iShowMoreSteps) {
	this.setProperty("showMoreSteps", iShowMoreSteps);
	return this;
};


/**
 * Getter for property <code>fixedRowHeight</code>.
 * Row height adapts to rendered content. If a fixed height is specified the cells have a maximum height and the overflow will be hidden.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>fixedRowHeight</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getFixedRowHeight = function() {
	return this.getProperty("fixedRowHeight");
};

/**
 * Setter for property <code>fixedRowHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sFixedRowHeight  new value for property <code>fixedRowHeight</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setFixedRowHeight = function(sFixedRowHeight) {
	this.setProperty("fixedRowHeight", sFixedRowHeight);
	return this;
};


/**
 * Getter for property <code>design</code>.
 * The visual design of the control.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.RowRepeaterDesign} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeater.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.RowRepeaterDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setDesign = function(oDesign) {
	this.setProperty("design", oDesign);
	return this;
};

	
/**
 * Getter for aggregation <code>rows</code>.<br/>
 * Rows to be repeated.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.RowRepeater.prototype.getRows = function() {
	return this.getAggregation("rows", []);
};


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.core.Control}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.insertRow = function(oRow, iIndex) {
	this.insertAggregation("rows", oRow, iIndex);
	return this;
};

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.core.Control}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.RowRepeater.prototype.addRow = function(oRow) {
	this.addAggregation("rows", oRow);
	return this;
};

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.ui.core.Control} vRow the row to remove or its index or id
 * @return {sap.ui.core.Control} the removed row or null
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeRow = function(vRow) {
	return this.removeAggregation("rows", vRow);
};

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeAllRows = function() {
	return this.removeAllAggregation("rows");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.RowRepeater.prototype.indexOfRow = function(oRow) {
	return this.indexOfAggregation("rows", oRow);
};
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.destroyRows = function() {
	this.destroyAggregation("rows");
	return this;
};


/**
 * Binder for aggregation <code>rows</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.bindRows = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("rows", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>rows</code>.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.unbindRows = function() {
	this.unbindAggregation("rows");
	return this;
};

	
/**
 * Getter for aggregation <code>title</code>.<br/>
 * Title to be displayed in top left corner. Either text or icon.
 * 
 * @return {sap.ui.commons.Title}
 * @public
 */
sap.ui.commons.RowRepeater.prototype.getTitle = function() {
	return this.getAggregation("title", null);
};


/**
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.ui.commons.Title}
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setTitle = function(oTitle) {
	this.setAggregation("title", oTitle);
	return this;
};
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.destroyTitle = function() {
	this.destroyAggregation("title");
	return this;
};

	
/**
 * Getter for aggregation <code>filters</code>.<br/>
 * Filters to be provided in toolbar.
 * 
 * @return {sap.ui.commons.RowRepeaterFilter[]}
 * @public
 */
sap.ui.commons.RowRepeater.prototype.getFilters = function() {
	return this.getAggregation("filters", []);
};


/**
 * Inserts a filter into the aggregation named <code>filters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *          oFilter the filter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filter is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.insertFilter = function(oFilter, iIndex) {
	this.insertAggregation("filters", oFilter, iIndex);
	return this;
};

/**
 * Adds some filter <code>oFilter</code> 
 * to the aggregation named <code>filters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *            oFilter the filter to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.RowRepeater.prototype.addFilter = function(oFilter) {
	this.addAggregation("filters", oFilter);
	return this;
};

/**
 * Removes an filter from the aggregation named <code>filters</code>.
 *
 * @param {int | string | sap.ui.commons.RowRepeaterFilter} vFilter the filter to remove or its index or id
 * @return {sap.ui.commons.RowRepeaterFilter} the removed filter or null
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeFilter = function(vFilter) {
	return this.removeAggregation("filters", vFilter);
};

/**
 * Removes all the controls in the aggregation named <code>filters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RowRepeaterFilter[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeAllFilters = function() {
	return this.removeAllAggregation("filters");
};

/**
 * Checks for the provided <code>sap.ui.commons.RowRepeaterFilter</code> in the aggregation named <code>filters</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *            oFilter the filter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.RowRepeater.prototype.indexOfFilter = function(oFilter) {
	return this.indexOfAggregation("filters", oFilter);
};
	

/**
 * Destroys all the filters in the aggregation 
 * named <code>filters</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.destroyFilters = function() {
	this.destroyAggregation("filters");
	return this;
};

	
/**
 * Getter for aggregation <code>sorters</code>.<br/>
 * Sorters to be provided in secondary toolbar.
 * 
 * @return {sap.ui.commons.RowRepeaterSorter[]}
 * @public
 */
sap.ui.commons.RowRepeater.prototype.getSorters = function() {
	return this.getAggregation("sorters", []);
};


/**
 * Inserts a sorter into the aggregation named <code>sorters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *          oSorter the sorter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the sorter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the sorter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the sorter is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.insertSorter = function(oSorter, iIndex) {
	this.insertAggregation("sorters", oSorter, iIndex);
	return this;
};

/**
 * Adds some sorter <code>oSorter</code> 
 * to the aggregation named <code>sorters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *            oSorter the sorter to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.RowRepeater.prototype.addSorter = function(oSorter) {
	this.addAggregation("sorters", oSorter);
	return this;
};

/**
 * Removes an sorter from the aggregation named <code>sorters</code>.
 *
 * @param {int | string | sap.ui.commons.RowRepeaterSorter} vSorter the sorter to remove or its index or id
 * @return {sap.ui.commons.RowRepeaterSorter} the removed sorter or null
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeSorter = function(vSorter) {
	return this.removeAggregation("sorters", vSorter);
};

/**
 * Removes all the controls in the aggregation named <code>sorters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RowRepeaterSorter[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.RowRepeater.prototype.removeAllSorters = function() {
	return this.removeAllAggregation("sorters");
};

/**
 * Checks for the provided <code>sap.ui.commons.RowRepeaterSorter</code> in the aggregation named <code>sorters</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *            oSorter the sorter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.RowRepeater.prototype.indexOfSorter = function(oSorter) {
	return this.indexOfAggregation("sorters", oSorter);
};
	

/**
 * Destroys all the sorters in the aggregation 
 * named <code>sorters</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.destroySorters = function() {
	this.destroyAggregation("sorters");
	return this;
};

	
/**
 * Getter for aggregation <code>noData</code>.<br/>
 * This control is shown, in case there is no data available to be displayed in the RowRepeater.
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.commons.RowRepeater.prototype.getNoData = function() {
	return this.getAggregation("noData", null);
};


/**
 * Setter for the aggregated <code>noData</code>.
 * @param oNoData {sap.ui.core.Control}
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setNoData = function(oNoData) {
	this.setAggregation("noData", oNoData);
	return this;
};
	

/**
 * Destroys the noData in the aggregation 
 * named <code>noData</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.destroyNoData = function() {
	this.destroyAggregation("noData");
	return this;
};


/**
 * This event is triggered when a filter is set. 
 *
 * @name sap.ui.commons.RowRepeater#filter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filterId The ID of the filter that has just been applied.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 * This event is triggered when a filter is set. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.attachFilter = function(oData, fnFunction, oListener) {
	this.attachEvent("filter", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("filter", fnFunction, oListener);
	return this;	
};

/**
 * Fire event filter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filterId' of type <code>string</code> The ID of the filter that has just been applied.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RowRepeater.prototype.fireFilter = function(mArguments) {
	this.fireEvent("filter", mArguments);
	return this;
};


/**
 * This event is triggered when a sorting is applied. 
 *
 * @name sap.ui.commons.RowRepeater#sort
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.sorterId The ID of the sorter that has just been applied.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 * This event is triggered when a sorting is applied. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.attachSort = function(oData, fnFunction, oListener) {
	this.attachEvent("sort", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.detachSort = function(fnFunction, oListener) {
	this.detachEvent("sort", fnFunction, oListener);
	return this;	
};

/**
 * Fire event sort to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'sorterId' of type <code>string</code> The ID of the sorter that has just been applied.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RowRepeater.prototype.fireSort = function(mArguments) {
	this.fireEvent("sort", mArguments);
	return this;
};


/**
 * This event is triggered when paging was executed. 
 *
 * @name sap.ui.commons.RowRepeater#page
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.currentPage The value of the currentPage property after the change.
 * @param {int} oControlEvent.getParameters.previousPage The value of the currentPage property before the change.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'page' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 * This event is triggered when paging was executed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.attachPage = function(oData, fnFunction, oListener) {
	this.attachEvent("page", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'page' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.detachPage = function(fnFunction, oListener) {
	this.detachEvent("page", fnFunction, oListener);
	return this;	
};

/**
 * Fire event page to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'currentPage' of type <code>int</code> The value of the currentPage property after the change.</li>
 * <li>'previousPage' of type <code>int</code> The value of the currentPage property before the change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RowRepeater.prototype.firePage = function(mArguments) {
	this.fireEvent("page", mArguments);
	return this;
};


/**
 * This event is triggered when the number of rows was changed. 
 *
 * @name sap.ui.commons.RowRepeater#resize
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.numberOfRows The value of the numberOfRows property after the change.
 * @param {int} oControlEvent.getParameters.previousNumberOfRows The value of the numberOfRows property before the change.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'resize' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 * This event is triggered when the number of rows was changed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.attachResize = function(oData, fnFunction, oListener) {
	this.attachEvent("resize", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'resize' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.detachResize = function(fnFunction, oListener) {
	this.detachEvent("resize", fnFunction, oListener);
	return this;	
};

/**
 * Fire event resize to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'numberOfRows' of type <code>int</code> The value of the numberOfRows property after the change.</li>
 * <li>'previousNumberOfRows' of type <code>int</code> The value of the numberOfRows property before the change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RowRepeater.prototype.fireResize = function(mArguments) {
	this.fireEvent("resize", mArguments);
	return this;
};


/**
 * Increments the number of rows. This method will only trigger a showMore if the property showMoreSteps is set.
 *
 * @name sap.ui.commons.RowRepeater.prototype.triggerShowMore
 * @function

 * @type void
 * @public
 */


/**
 * Resizes the row repeater by changing the number of displayed rows. This method will only resize the RowRepeater if the property showMoreSteps is set.
 *
 * @name sap.ui.commons.RowRepeater.prototype.resize
 * @function
 * @param {int} 
 *         iNumberOfRows
 *         The new value of number of rows displayed.

 * @type void
 * @public
 */


/**
 * Applies a filter.
 *
 * @name sap.ui.commons.RowRepeater.prototype.applyFilter
 * @function
 * @param {string} 
 *         sId
 *         The ID if the filter.

 * @type void
 * @public
 */


/**
 * Sort the data.
 *
 * @name sap.ui.commons.RowRepeater.prototype.triggerSort
 * @function
 * @param {string} 
 *         sId
 *         The ID of the sorter.

 * @type void
 * @public
 */


/**
 * Switch to first page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.firstPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to last page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.lastPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to previous page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.previousPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to next page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.nextPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to specified page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.gotoPage
 * @function
 * @param {int} 
 *         iPageNumber
 *         The index of the page to go to.

 * @type void
 * @public
 */


// Start of sap/ui/commons/RowRepeater.js
///**
//* This file defines behavior for the control,
//*/

/**
 * This value of the paging mode boolean is true if the showMoreSteps
 * property is not set. This value is updated whenever the value
 * of showMoreSteps is changed.
 *
 * @private
 */
sap.ui.commons.RowRepeater.prototype.bPagingMode = true;

/**
 * All animations of the RowRepeater control can be centrally switched
 * off by setting the <code>bShowAnimation</code> flag to <code>false</code>.
 *
 * @private
 */
sap.ui.commons.RowRepeater.prototype.bShowAnimation = true;


/* animation constants */
sap.ui.commons.RowRepeater.SHOW_MORE = "show_more";
sap.ui.commons.RowRepeater.RESIZE = "resize";
sap.ui.commons.RowRepeater.FIRST_PAGE = "first_page";
sap.ui.commons.RowRepeater.LAST_PAGE = "last_page";
sap.ui.commons.RowRepeater.PREVIOUS_PAGE = "previous_page";
sap.ui.commons.RowRepeater.NEXT_PAGE = "next_page";
sap.ui.commons.RowRepeater.GOTO_PAGE = "goto_page";

sap.ui.commons.RowRepeater.prototype.init = function() {

	// local variables
	var sId = this.getId();

	// get reference to resource bundle
	this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// initialize animation and queuing variables
	this.sCurrentAnimation = null;
	this.aAnimationQueue = [];
	this.aRemoveBuffer = [];

	// previous page and numberOfRows animation
	this.iPreviousPage = this.getCurrentPage();
	this.iPreviousNumberOfRows = this.getNumberOfRows();

	// create filter and sorter toolbar control and add as aggregation
	this.setAggregation( "filterToolbar", new sap.ui.commons.Toolbar(sId+"-ftb",{standalone:false,design:sap.ui.commons.ToolbarDesign.Transparent}));
	this.setAggregation( "sorterToolbar", new sap.ui.commons.Toolbar(sId+"-stb",{standalone:false}));

	// create pager controls and their event handlers, add them as aggregations
	var oPager = new sap.ui.commons.Paginator(sId+"-fp",{page:[this.paging,this]});
	this.setAggregation("footerPager",oPager);

	// create show more buttons and add them as aggregation
	var sShowMoreText = this.oResourceBundle.getText("SHOW_MORE");
	this.setAggregation( "headerShowMoreButton", new sap.ui.commons.Button(sId+"-hsm",{text:sShowMoreText,press:[this.triggerShowMore,this]}));
	this.setAggregation( "footerShowMoreButton", new sap.ui.commons.Button(sId+"-fsm",{text:sShowMoreText,press:[this.triggerShowMore,this]}));

};



/*
 * PUBLIC API METHODS
 */
// TODO: check where to document: here or in API definition
/**
 * The <code>triggerShowMore</code> function increments the number of rows by the
 * value of <code>showMoreSteps</code>.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.triggerShowMore = function() {

	// execute only if showMoreSteps is bigger than 0
	if(this.getShowMoreSteps()<=0) {
		return this;
	}

	// local variables
	var iShowMoreSteps = this.getShowMoreSteps();
	var iNumberOfRows = this.getNumberOfRows();

	// verify that the new value is not larger than number of rows available
	var iNewNumberOfRows = Math.min(this.getRows().length,iNumberOfRows+iShowMoreSteps);

	// exit if value remains the same
	if(iNumberOfRows===iNewNumberOfRows) {
		return this;
	}

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.SHOW_MORE,
				animationFunction:this.triggerShowMore,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.SHOW_MORE;
		}

		// set property and animate
		this.iPreviousNumberOfRows = iNumberOfRows;
		this.setProperty("numberOfRows",iNewNumberOfRows,true);
		this.startResizeAnimation();

	} else {

		// set property and invalidate
		this.setNumberOfRows(iNewNumberOfRows);

	}

	// fire page event
	this.fireResize({numberOfRows:iNewNumberOfRows,previousNumberOfRows:iNumberOfRows});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.resize = function(numberOfRows) {

	// execute only if showMoreSteps is bigger than 0
	if(this.getShowMoreSteps()<=0) {
		return this;
	}

	// local variables
	var iNumberOfRows = this.getNumberOfRows();

	// exit if new value is not in range or equals to old value
	if(numberOfRows<=0 || numberOfRows>this.getRows().length || numberOfRows===iNumberOfRows ) {
		return this;
	}

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.RESIZE,
				animationFunction:this.resize,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.RESIZE;
		}

		// set property and animate
		this.iPreviousNumberOfRows = iNumberOfRows;
		this.setProperty("numberOfRows",numberOfRows,true);
		this.startResizeAnimation();

	} else {

		// set property and invalidate
		this.setNumberOfRows(numberOfRows);

	}

	// fire page event
	this.fireResize({numberOfRows:numberOfRows,previousNumberOfRows:iNumberOfRows});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.applyFilter = function(id) {

	// local variables
	var aFilters = this.getFilters();
	var oListBinding = this.getBinding("rows");
	var oFilter, n;

	// exit directly if there are no filters or no binding defined
	if(aFilters.length===0 || oListBinding===null) {
		return this;
	}

	// try to read the filter defined by the ID, unfortunately by looping
	for( n=0; n<aFilters.length; n++ ) {
		if(aFilters[n].getId()===id) {
			// we found the requested filter
			oFilter = aFilters[n];
			break;
		}
	}

	// don't do anything if we can't find the filter
	if(oFilter) {

		// apply the filter assigned to filter item
		oListBinding.filter(oFilter.getFilters());

		// fire the filter
		this.fireFilter({filterId:id});

		// goto first page via public API method (i.e. animated)
		this.firstPage();

	}

	// return instance to allow chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.triggerSort = function(id) {

	// local variables
	var aSorters = this.getSorters();
	var oListBinding = this.getBinding("rows");
	var oSorter, n;

	// exit directly if there are no sorters or no binding defined
	if(aSorters.length===0 || oListBinding===null) {
		return this;
	}

	// try to read the sorter defined by the ID, unfortunately by looping
	for( n=0; n<aSorters.length; n++ ) {
		if(aSorters[n].getId()===id) {
			// we found the requested filter
			oSorter = aSorters[n];
			break;
		}
	}

	// don't do anything if we can't find the sorter
	if(oSorter) {

		// trigger the sorter assigned to sorter item
		oListBinding.sort(oSorter.getSorter());

		// fire sort event
		this.fireSort({sorterId:id});

		// goto first page via public API method (i.e. animated)
		this.firstPage();

	}

	// return instance to allow chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.firstPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();

	// don't do anything if we are on the first page
	if(iCurrentPage===1) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(1);

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.FIRST_PAGE,
				animationFunction:this.firstPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.FIRST_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(1);

	}

	// fire page event
	this.firePage({currentPage:1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.lastPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this.getRows().length/this.getNumberOfRows());

	// don't do anything if we are on the last page
	if(iCurrentPage===iLastPage) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iLastPage);

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.LAST_PAGE,
				animationFunction:this.lastPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.LAST_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iLastPage,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iLastPage);

	}

	// fire page event
	this.firePage({currentPage:iLastPage,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.previousPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();

	// don't do anything if we are on the first page or even below
	if(iCurrentPage<=1) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iCurrentPage-1);

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.PREVIOUS_PAGE,
				animationFunction:this.previousPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.PREVIOUS_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iCurrentPage-1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iCurrentPage-1);

	}

	// fire page event
	this.firePage({currentPage:iCurrentPage-1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.nextPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this.getRows().length/this.getNumberOfRows());

	// don't do anything if we are on the last page or even further
	if(iCurrentPage>=iLastPage) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iCurrentPage+1);

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.NEXT_PAGE,
				animationFunction:this.nextPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.NEXT_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iCurrentPage+1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iCurrentPage+1);

	}

	// fire page event
	this.firePage({currentPage:iCurrentPage+1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.gotoPage = function(iPageNumber) {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this.getRows().length/this.getNumberOfRows());

	// don't do anything if page if not in range or same as before
	if(iPageNumber<1 || iPageNumber>iLastPage || iCurrentPage===iPageNumber) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iPageNumber);

	// start animation or just set the property
	if(this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
				animationFunction:this.gotoPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.GOTO_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iPageNumber,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iPageNumber);

	}

	// fire page event
	this.firePage({currentPage:iPageNumber,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};



/*
 * OVERRIDE OF SETTERS
 */

/**
 * Setter for property <code>numberOfRows</code>.
 *
 * Default value is <code>5</code>
 *
 * @param {int} iNumberOfRows  new value for property <code>numberOfRows</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setNumberOfRows = function(iNumberOfRows) {

	// change property without setting suppress rendering flag
	this.setProperty("numberOfRows", iNumberOfRows);

	// child controls might need a re-render after this change
	this.updateChildControls();

	// return instance to allow chaining
	return this;

};

/**
 * Setter for property <code>currentPage</code>.
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setCurrentPage = function(iCurrentPage) {

	// invalidate with this update
	this.setProperty("currentPage", iCurrentPage);

	// child controls might need a re-render after this change
	this.updateChildControls();

	// return instance to allow chaining
	return this;

};

/**
 * Override the default behavior of <code>setShowMoreSteps</code> to update the
 * paging mode flag. Any change to the paging mode flag will result in the current
 * page being set to the first page.
 *
 * @param {int} iShowMoreSteps  new value for property <code>showMoreSteps</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setShowMoreSteps = function(iShowMoreSteps) {

	// calculate new paging mode by looking at step size
	var bNewPagingMode = iShowMoreSteps>0 ? false : true;

	// the state is to be reset if the mode changes
	if(bNewPagingMode!==this.bPagingMode) {
		this.bPagingMode = bNewPagingMode;
		this.setCurrentPage(1);
	}


	// set the property allowing a re-rendering of the row repeater
	this.setProperty("showMoreSteps", iShowMoreSteps);
	return this;

};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertRow = function(oRow, iIndex) {
	this.insertAggregation("rows", oRow, iIndex);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addRow = function(oRow) {
	this.addAggregation("rows", oRow);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeRow = function(vElement) {
	this.removeAggregation("rows", vElement);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllRows = function() {
	this.removeAllAggregation("rows");
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroyRows = function() {
	this.destroyAggregation("rows");
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertFilter = function(oFilter, iIndex) {

	// insert a button into the filter toolbar's aggregation
	var oToolbar = this.getAggregation("filterToolbar");
	var sFilterId = oFilter.getId();
	var oButton = new sap.ui.commons.Button({text:oFilter.getText(),icon:oFilter.getIcon(),tooltip:oFilter.getTooltip(),press:[function(){this.applyFilter(sFilterId);},this]});
	oToolbar.insertItem(oButton,iIndex);

	this.insertAggregation("filters", oFilter, iIndex);
	return this;

};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addFilter = function(oFilter) {

	// add a button to the filter toolbar's aggregation
	var oToolbar = this.getAggregation("filterToolbar");
	var sFilterId = oFilter.getId();
	var oButton = new sap.ui.commons.Button({text:oFilter.getText(),icon:oFilter.getIcon(),tooltip:oFilter.getTooltip(),press:[function(){this.applyFilter(sFilterId);},this]});
	oToolbar.addItem(oButton);

	this.addAggregation("filters", oFilter);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeFilter = function(vElement) {

	// remove button from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeItem(vElement);

	return this.removeAggregation("filters", vElement);
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllFilters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeAllItems();

	return this.removeAllAggregation("filters");
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroyFilters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeAllItems();

	this.destroyAggregation("filters");
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertSorter = function(oSorter, iIndex) {

	// add a button to the sorter toolbar's aggregation
	var oToolbar = this.getAggregation("sorterToolbar");
	var sSorterId = oSorter.getId();
	var oButton = new sap.ui.commons.Button({text:oSorter.getText(),icon:oSorter.getIcon(),tooltip:oSorter.getTooltip(),press:[function(){this.triggerSort(sSorterId);},this]});
	oToolbar.insertItem(oButton,iIndex);

	this.insertAggregation("sorters", oSorter, iIndex);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addSorter = function(oSorter) {

	// add a button to the sorter toolbar's aggregation
	var oToolbar = this.getAggregation("sorterToolbar");
	var sSorterId = oSorter.getId();
	var oButton = new sap.ui.commons.Button({text:oSorter.getText(),icon:oSorter.getIcon(),tooltip:oSorter.getTooltip(),press:[function(){this.triggerSort(sSorterId);},this]});
	oToolbar.addItem(oButton);

	this.addAggregation("sorters", oSorter);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeSorter = function(vElement) {

	// remove button from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeItem(vElement);

	return this.removeAggregation("sorters", vElement);
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllSorters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeAllItems();

	return this.removeAllAggregation("sorters");
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroySorters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeAllItems();

	this.destroyAggregation("sorters");
	return this;
};


/*
 * ANIMATION METHODS
 */

sap.ui.commons.RowRepeater.prototype.startPagingAnimation = function() {

	// local variables
	var oCore = sap.ui.getCore();
	var oRenderManager = oCore.getRenderManager();
	var sId = this.getId();
	var iPageFrom = this.iPreviousPage;
	var iPageTo = this.getCurrentPage();
	var iNumberOfRows = this.getNumberOfRows();
	var iStartIndex = (iPageTo-1) * iNumberOfRows;
	var aRows = this.getRows();
	var iCurrentVisibleRows = aRows.length>iNumberOfRows*iPageTo ? iNumberOfRows : aRows.length-iNumberOfRows*(iPageTo-1);
	var iLastPage = Math.ceil( aRows.length/iNumberOfRows );
	var n;

	// DOM elements
	var oDomCurrentLI;
	var oJQDomULFrom = jQuery(jQuery.sap.domById(sId+"-page_"+iPageFrom));
	var oDomBodyDIV = jQuery.sap.domById(sId+"-body");
	var oJQDomBodyDIV = jQuery(oDomBodyDIV);

	// fix the height on the body DIV to allow an animated height change
	oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

	// create UL for new page
	var sDirection;
	if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
		sDirection = (iPageTo<iPageFrom) ? "left" : "right";
	}else{
		sDirection = (iPageTo<iPageFrom) ? "right" : "left";
	}
	var sStyleString = "\"top:-" + oJQDomULFrom.outerHeight(true) + "px;" + sDirection + ":" + oJQDomULFrom.outerWidth(true) + "px;\"";
	jQuery("<ul id=\"" + sId + "-page_" + iPageTo + "\" class=\"sapUiRrPage\" style=" + sStyleString + "/>").appendTo(oDomBodyDIV);
	var oDomULTo = oDomBodyDIV.lastChild;
	var oJQDomULTo = jQuery(oDomULTo);
	for( n=iStartIndex; n<iStartIndex+iCurrentVisibleRows; n++ ) {
		jQuery("<li id=\"" + sId + "-row_" + n + "\" class=\"sapUiRrRow\"/>").appendTo(oDomULTo);
		oDomCurrentLI =  oDomULTo.lastChild;
		oRenderManager.render(aRows[n], oDomCurrentLI);
	}

	// animate the paging effect
	if(sDirection==="right") {
		oJQDomULFrom.animate({right:-oJQDomULFrom.outerWidth(true)},"slow");
		oJQDomULTo.animate({right:0},"slow");
	} else {
		oJQDomULFrom.animate({left:-oJQDomULFrom.outerWidth(true)},"slow");
		oJQDomULTo.animate({left:0},"slow");
	}

	// animate the height change if number of displayed rows changes
	oJQDomBodyDIV.animate({height:oJQDomULTo.outerHeight(true)},"slow",jQuery.proxy(this.endPagingAnimation,this));

};


sap.ui.commons.RowRepeater.prototype.endPagingAnimation = function() {

	// local variables
	var sId = this.getId();

	// get all needed DOM objects
	var oDomDIV = jQuery.sap.domById(sId+"-body");
	var oDomOldUL = jQuery.sap.domById(sId+"-page_"+this.iPreviousPage);
	var oDomCurrentUL = jQuery.sap.domById(sId+"-page_"+this.getCurrentPage());
	var oJQDomCurrentUL = jQuery(oDomCurrentUL);

	// un-fix the height on DIV
	jQuery(oDomDIV).css("height","");

	// remove the old UL from DOM
	jQuery(oDomOldUL).remove();

	// remove positioning from new UL
	var sDirection;
	if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
		sDirection = (this.getCurrentPage()<this.iPreviousPage) ? "left" : "right";
	}else{
		sDirection = (this.getCurrentPage()<this.iPreviousPage) ? "right" : "left";
	}
	oJQDomCurrentUL.css("top","");
	oJQDomCurrentUL.css(sDirection,"");

	// reset animation indicator
	this.sCurrentAnimation = null;

	// start new animation
	this.nextQueuedAnimation();

};


sap.ui.commons.RowRepeater.prototype.startResizeAnimation = function() {

	// variables
	var oRenderManager = sap.ui.getCore().getRenderManager();
	var iNewNumberOfRows = this.getNumberOfRows();
	var iOldNumberOfRows = this.iPreviousNumberOfRows;
	var sId = this.getId();
	var aRows = this.getRows();
	var iSizeDelta = 0;
	var n;

	// dom elements
	var oDomCurrentLI;
	var oDomBodyDIV = jQuery.sap.domById(sId+"-body");
	var oJQDomBodyDIV = jQuery(oDomBodyDIV);
	var oDomPageUL = jQuery.sap.domById(sId+"-page_"+this.getCurrentPage());

	// fix the height
	oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

	// check if control is growing or shrinking
	if(iNewNumberOfRows>iOldNumberOfRows) {

		// create all newly visible child elements, if size grows
		for( n=iOldNumberOfRows; n<iNewNumberOfRows; n++ ) {
			jQuery("<li id=\"" + sId + "-row_" + n + "\" class=\"sapUiRrRow\"/>").appendTo(oDomPageUL);
			oDomCurrentLI =  oDomPageUL.lastChild;
			oRenderManager.render(aRows[n], oDomCurrentLI);
		}

	} else {

		// measure controls to be removed and store them in array for later removal
		for( n=iNewNumberOfRows; n<iOldNumberOfRows; n++ ) {
			oDomCurrentLI = jQuery.sap.domById(sId+"-row_"+n);
			iSizeDelta -= jQuery( oDomCurrentLI ).outerHeight(true);
			this.aRemoveBuffer.push(oDomCurrentLI);
		}

	}

	// animate resize of container
	oJQDomBodyDIV.animate({height:jQuery(oDomPageUL).outerHeight(true)+iSizeDelta},"slow",jQuery.proxy(this.endResizeAnimation,this));

};


sap.ui.commons.RowRepeater.prototype.endResizeAnimation = function() {

	// get body DIV
	var oDomBodyDIV = jQuery.sap.domById(this.getId()+"-body");

	// remove LI element after shrinking
	while( this.aRemoveBuffer.length>0 ) {
		jQuery(this.aRemoveBuffer.pop()).remove();
	}

	// un-fix the height on DIV
	jQuery(oDomBodyDIV).css("height","");

	// reset animation indicator
	this.sCurrentAnimation = null;

	// start new animation
	this.nextQueuedAnimation();

};


sap.ui.commons.RowRepeater.prototype.nextQueuedAnimation = function() {

	// local variables
	var oNextAnimation, oLastQueuedAnimation;
	var iCounter = 1;
	var aQueue = this.aAnimationQueue;
	var iPageNumber, iNumberOfRows;

	// get first one
	if(aQueue.length>0) {
		oNextAnimation = aQueue.shift();
	}

	// if there are more in the queue of same name we try to summarize
	if(oNextAnimation && aQueue.length>0) {

		// remove all upcoming animations with same name
		while(aQueue[0]&&aQueue[0].name===oNextAnimation.name) {
			iCounter++;
			oLastQueuedAnimation = aQueue.shift();
		}

		// reaction depends of animation name
		if(iCounter>0) {
			switch(oNextAnimation.name) {
			case sap.ui.commons.RowRepeater.SHOW_MORE:
				// replace with resize of summarized size
				iNumberOfRows = Math.min(this.getRows().length,this.getNumberOfRows()+this.getShowMoreSteps()*iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.RESIZE,
						animationFunction:this.resize,
						args:[iNumberOfRows]};
				break;
			case sap.ui.commons.RowRepeater.RESIZE:
				// execute the last one and skip the ones before
				oNextAnimation = oLastQueuedAnimation;
				break;
			case sap.ui.commons.RowRepeater.FIRST_PAGE:
				// the animations are duplicates and can be droppped
				break;
			case sap.ui.commons.RowRepeater.LAST_PAGE:
				// the animations are duplicates and can be droppped
				break;
			case sap.ui.commons.RowRepeater.PREVIOUS_PAGE:
				// replace with goto page
				iPageNumber = Math.max(1,this.getCurrentPage()-iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
						animationFunction:this.gotoPage,
						args:[iPageNumber]};
				break;
			case sap.ui.commons.RowRepeater.NEXT_PAGE:
				// replace with goto page
				iPageNumber = Math.min(Math.ceil(this.getRows().length/this.getNumberOfRows()),this.getCurrentPage()+iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
						animationFunction:this.gotoPage,
						args:[iPageNumber]};
				break;
			case sap.ui.commons.RowRepeater.GOTO_PAGE:
				// execute the last one and skip the ones before
				oNextAnimation = oLastQueuedAnimation;
				break;
			}
		}

	}

	// finally execute
	if(oNextAnimation) {
		oNextAnimation.animationFunction.apply(this,oNextAnimation.args);
	}

};


/*
 * INTERNAL METHODS
 */

/**
 * Handle paging events from the Paginator(s)
 *
 * @private
 */
 sap.ui.commons.RowRepeater.prototype.paging = function(oEvent) {

	 switch(oEvent.getParameter("type")) {
		 case sap.ui.commons.PaginatorEvent.First:
			 this.firstPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Last:
			 this.lastPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Previous:
			 this.previousPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Next:
			 this.nextPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Goto:
			 this.gotoPage(oEvent.getParameter("targetPage"));
			 break;
	 }

 }

/**
 * Update the state of aggregated child controls inside this row repeater.
 *
 * @private
 */;
sap.ui.commons.RowRepeater.prototype.updateChildControls = function() {

	// local referenced to controls
	var oShowMoreButton, oPager;

	// local variables
	var bShowMoreEnabled;

	// only care about pagers if we are in paging mode, otherwise it is the showMore buttons
	if(this.bPagingMode) {

		// the pager is itself responsible for activation, just update the page info
		var iCurrentPage = this.getCurrentPage();
		var iLastPage = Math.ceil( this.getRows().length/this.getNumberOfRows() );
		if (this.getRows().length == 0){
			iLastPage = 1;
		}

		// update header pager
		oPager = this.getAggregation("footerPager");
		if(oPager) {
			oPager.setCurrentPage( iCurrentPage );
			oPager.setNumberOfPages( iLastPage );
		}

	} else {

		// show more buttons are only active if there are more lines to show
		bShowMoreEnabled = this.getRows().length > this.getNumberOfRows();

		// update header showMore button
		oShowMoreButton = this.getAggregation("headerShowMoreButton");
		if(oShowMoreButton) {
			oShowMoreButton.setEnabled(bShowMoreEnabled);
		}

		// update footer showMore button
		oShowMoreButton = this.getAggregation("footerShowMoreButton");
		if(oShowMoreButton) {
			oShowMoreButton.setEnabled(bShowMoreEnabled);
		}

	}

};


/**
 * Verify if the rows aggregation of this control is bound.
 */
sap.ui.commons.RowRepeater.prototype.isBound = function(sName) {
	return sap.ui.core.Element.prototype.isBound.call(this, sName || "rows");
};
}; // end of sap.ui.commons.RowRepeater
if ( !jQuery.sap.isDeclared('sap.ui.commons.SplitterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Splitter
jQuery.sap.declare("sap.ui.commons.SplitterRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.SplitterRenderer = {};

/**
 * Renders the HTML for the Splitter, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.SplitterRenderer.render = function(oRenderManager, oControl) {

	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var orientation = oControl.getSplitterOrientation();
	var position = oControl.getSplitterPosition();
	var dimensionSecPane;
	var oControls;
	var iLength;
	var i;
	/*
	 * dimension (height or width) of the first pane is equal to the position of the splitter bar
	 * dimension of the second pane is the remaining available place after placing the first place
	 * 100 - position
	 * the splitter bar width/height is not taken into account since it has a fix width/height of 4px,
	 * it will be calculated after rendering
	 * it will be converted into percentage once we had the width/height of the splitter available area in px
	 */
	position = position.substring(0, position.length - 1);
	dimensionSecPane = 100 - position;

	/* Opening Splitter Wrapper DIV*/
	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapUiSplitter");

	rm.addStyle("width",  oControl.getWidth());
	rm.addStyle("height",  oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	/*rendering the first pane*/
	rm.write("<div id=\"" + oControl.getId() + "_firstPane\" tabIndex=\"0\" ");
	if (oControl.getShowScrollBars()){
		rm.addStyle("overflow", "auto");
	} else{
		rm.addStyle("overflow", "hidden");
	}
	if (orientation == sap.ui.commons.Orientation.Vertical) {
		rm.addClass("sapUiVSplitterFirstPane");
		rm.addStyle("width", position + "%");
	} else if (orientation == sap.ui.commons.Orientation.Horizontal) {
		rm.addClass("sapUiHSplitterFirstPane");
		rm.addStyle("height", position + "%");
	}

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	/*First content (child controls)*/
	oControls = oControl.getFirstPaneContent();
	iLength = oControls.length;
	for (i = 0; i < iLength; i++) {
		rm.renderControl(oControls[i]);
	}
	rm.write("</div>");

	/*rendering the splitter bar*/
	rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"-1\" ");
	if (orientation == sap.ui.commons.Orientation.Vertical) {
		if (oControl.getSplitterBarVisible()){
			rm.addClass("sapUiVerticalSplitterBar");		
		} else {
			rm.addClass("sapUiVerticalSplitterBarHidden");
		}
		rm.addStyle("width", 0 + "%");
	} else if (orientation == sap.ui.commons.Orientation.Horizontal) {
		if (oControl.getSplitterBarVisible()){
			rm.addClass("sapUiHorizontalSplitterBar");		
		} else {
			rm.addClass("sapUiHorizontalSplitterBarHidden");
		} 
		rm.addStyle("height", 0 + "%");
	}
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");

	/*rendering the second pane*/
	rm.write("<div id=\"" + oControl.getId() + "_secondPane\" tabIndex=\"0\" ");
	if (oControl.getShowScrollBars()){
		rm.addStyle("overflow", "auto");
	} else{
		rm.addStyle("overflow", "hidden");
	}
	if (orientation == sap.ui.commons.Orientation.Vertical) {
		rm.addClass("sapUiVSplitterSecondPane");
		rm.addStyle("width", dimensionSecPane + '%');
	} else if (orientation == sap.ui.commons.Orientation.Horizontal) {
		rm.addClass("sapUiHSplitterSecondPane");
		rm.addStyle("height", dimensionSecPane + '%');
	}
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	/*Second content (child controls)*/
	oControls = oControl.getSecondPaneContent();
	iLength = oControls.length;
	for (i = 0; i < iLength; i++) {
		rm.renderControl(oControls[i]);
	}
	rm.write("</div>");

	/* Closing the Splitter Wrapper DIV*/
	rm.write("</div>");
};
}; // end of sap.ui.commons.SplitterRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Message
jQuery.sap.declare("sap.ui.commons.MessageRenderer");

/**
 * @class Message renderer.
 * @static
 */
sap.ui.commons.MessageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * A "Message" renders with:
 *  - An icon,
 *  - Possibly with a "Details" pointer to point to its longText
 *  - A shortText
 * It is up to its host (Toast, List, ... ) to hide or not the different parts.
 * For example, it is for the Toast to decide if icons are to be shown or not! Decision can be theme-dependent!
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageRenderer.render = function(oRenderManager, oControl){
	// Convenience variables
	var rm = oRenderManager;

	// Opening the outer container:
	// tabindex="0": Message must be focusable for accessibility?!?
  rm.write('<div class="sapUiMsg" tabindex="0">');

		// Message icon:
	  rm.write('<div class="sapUiMsgIcon sapUiMsgIcon' + oControl.getType() + '"></div>');

	  // Possible "Details" pointer, with its trailing "-" separator:
	if ( typeof oControl.fnCallBack === "function" ) {
			rm.write('<span class="sapUiMsgLnk">');
			// Rendering a "short" Link pointing to the "long" Details:
			if (!oControl.oLink) {
				oControl.oLink = new sap.ui.commons.Link();
				var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
				oControl.oLink.setText(rb.getText("MSGLIST_DETAILS"));
				oControl.oLink.attachPress(function() {oControl.openDetails();});
			}
				rm.renderControl(oControl.oLink);
			rm.write(' - </span>');
	  }

	  // ShortText:
	  rm.write('<span class="sapUiMsgTxt">' + oControl.getText() + '</span>');

	// Closing the outer container:
  rm.write('</div>');
};
}; // end of sap.ui.commons.MessageRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RadioButton.
jQuery.sap.declare("sap.ui.commons.RadioButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RadioButton.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>visible : boolean</li>
 * <li>enabled : boolean</li>
 * <li>editable : boolean</li>
 * <li>selected : boolean</li>
 * <li>valueState : sap.ui.core.ValueState</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>groupName : string</li>
 * <li>key : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Consists of a round element and a descriptive text. Generally, you would create at least two radio button controls;
 * by this, you provide a limited choice for the user. Radio buttons can trigger events.
 * Available value states are "Error", "None", "Success", "Warning".
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RadioButton = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RadioButton.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.RadioButton. 
 * Resulting metadata can be obtained via sap.ui.commons.RadioButton.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RadioButton", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getText", "setText", "getVisible", "setVisible", "getEnabled", "setEnabled", "getEditable", "setEditable", "getSelected", "setSelected", "getValueState", "setValueState", "getWidth", "setWidth", "getTextDirection", "setTextDirection", "getGroupName", "setGroupName", "getKey", "setKey", 
    // aggregations
    
    // associations
    
    // events
    "attachSelect", "detachSelect"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Data", defaultValue : null},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "editable" : {name : "editable", type : "boolean", group : "Behavior", defaultValue : true},
    "selected" : {name : "selected", type : "boolean", group : "Data", defaultValue : false},
    "valueState" : {name : "valueState", type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
    "groupName" : {name : "groupName", type : "string", group : "Behavior", defaultValue : 'sapUiRbDefaultGroup'},
    "key" : {name : "key", type : "string", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.commons.RadioButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the radio button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled controls are displayed in another color, depending on the customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can choose a radio button.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getSelected = function() {
	return this.getProperty("selected");
};

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setSelected = function(bSelected) {
	this.setProperty("selected", bSelected);
	return this;
};


/**
 * Getter for property <code>valueState</code>.
 * 
 * The value state to be displayed.
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getValueState = function() {
	return this.getProperty("valueState");
};

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setValueState = function(oValueState) {
	this.setProperty("valueState", oValueState);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * The control width depends on the text length. Alternatively, CSS-sizes in % or px can be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * 
 * Available options here are LTR and RTL. Alternatively, the control can inherit the text direction from its parent container.
 * 
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current one belongs to where you can define a new group name. All radio buttons in a page belong to the default group.
 * When any of the radio buttons in this group is selected, all others are deselected.
 *
 * Default value is <code>'sapUiRbDefaultGroup'</code>
 *
 * @return {string} the value of property <code>groupName</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getGroupName = function() {
	return this.getProperty("groupName");
};

/**
 * Setter for property <code>groupName</code>.
 *
 * Default value is <code>'sapUiRbDefaultGroup'</code> 
 *
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setGroupName = function(sGroupName) {
	this.setProperty("groupName", sGroupName);
	return this;
};


/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.ui.commons.RadioButton.prototype.getKey = function() {
	return this.getProperty("key");
};

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.setKey = function(sKey) {
	this.setProperty("key", sKey);
	return this;
};


/**
 * Event is triggered when user interaction causes a radio button switch from state "unselected" to "selected". 
 *
 * @name sap.ui.commons.RadioButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.RadioButton</code>.<br/>
 * Event is triggered when user interaction causes a radio button switch from state "unselected" to "selected". 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.RadioButton</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RadioButton.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RadioButton.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


// Start of sap/ui/commons/RadioButton.js
/**
 * Event handler called when the radio button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onclick = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		this.focus();
	}

	if(jQuery.browser.msie && (!this.getEditable() || !this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in readOnly case tabindex must be set to 0
		// as long as RadioButton is clicked on
		jQuery.sap.byId(this.getId()).attr("tabindex", 0).toggleClass("sapUiRbFoc");
	}

	this.userSelect(oEvent);
};

/**
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onsapspace = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		this.focus();
	}
	this.userSelect(oEvent);
};

/**
 * Event handler called focus is set on Radio button
 * Problem in HCB: Focus is set in IE8 to bullet, not to whole control
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onsaptabnext = function(oEvent) {

	if(jQuery.browser.msie){
		this.bTabPressed = true;
		var that = this;
		window.setTimeout(function(){that.bTabPressed = false;}, 100);
	}
};

/**
 * Event handler called when the radio button is focused
 * Problem in HCB: Focus is sometimes set in IE8 to bullet, not to whole control
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onfocusin = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		if(this.bTabPressed){
			// this only occurs in IE in HCB mode
			var aFocusableElements = jQuery(":focusable"),
				bFound = false;
			for(var i = 0; i < aFocusableElements.length; i++){
				if(bFound && aFocusableElements[i].parentNode != oEvent.target && aFocusableElements[i].tabIndex != "-1"){
					aFocusableElements[i].focus();
					oEvent.preventDefault();
					break;
				}
				if(oEvent.target == aFocusableElements[i]){
					bFound = true;
				}
			}
		}else{
			this.focus();
		}
	}
};

/**
 * Event handler called when the radio button is left
 * Problem in IE: Tabindex must be set back to -1
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onfocusout = function(oEvent) {

	if(jQuery.browser.msie && (!this.getEditable() || !this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in readOnly case tabindex must be set to 0
		// as long as RadioButton is clicked on
		jQuery.sap.byId(this.getId()).attr("tabindex", -1).toggleClass("sapUiRbFoc");
	}

};
/**
 * This method is used internally only, whenever the user somehow selects the RadioButton.
 * It is responsible for event cancellation and for firing the select event.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.userSelect = function(oEvent) {
//	oEvent.preventDefault();
	// the control should not stop browser event propagation
	// Example: table control needs to catch and handle the event as well
	//oEvent.stopPropagation();

	if (this.getEnabled() && this.getEditable()) {
		var selected = this.getSelected();
		if (!selected) {
			this.setSelected(true);
			this.fireSelect({/* no parameters */});
		}
	}else{
		// readOnly or disabled -> don't allow browser to switch RadioButton on
		oEvent.preventDefault();
	}
};

// #############################################################################
// Overwritten methods that are also generated in RadioButton.API.js
// #############################################################################

/*
 * Overwrite the definition from RadioButton.API.js
 */
sap.ui.commons.RadioButton.prototype.setSelected = function(bSelected) {

	var bSelectedOld = this.getSelected();

	this.setProperty("selected", bSelected, true); // No re-rendering

	if (bSelected) { // If this radio button is selected, explicitly deselect the other radio buttons of the same group
		if (this.getGroupName() && (this.getGroupName() != "")) { // Do it only if groupName is set
			// TODO: Add control references to some static list when they are constructed, in order to avoid searching every time
			var others = document.getElementsByName(this.getGroupName());
			for (var i = 0; i < others.length; i++) {
				var other = others[i];
				// Recommendation is that the HTML radio button has an ID ending with "-RB"
				if (other.id && (other.id.length > 3) && (other.id.substr(other.id.length-3) == "-RB")) {
					// The SAPUI5 control is known by an ID without the "-RB" suffix
					var oControl = sap.ui.getCore().getElementById(other.id.substr(0, other.id.length-3));
					if (oControl instanceof sap.ui.commons.RadioButton && (oControl != this)) {
						oControl.setSelected(false);
					}
				}
			}
		}
	}
	if ((bSelectedOld != bSelected) && this.getDomRef() && this.getRenderer().setSelected){
		this.getRenderer().setSelected(this, bSelected);
	}

	return this;
};
}; // end of sap.ui.commons.RadioButton
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeaterFilter.
jQuery.sap.declare("sap.ui.commons.RowRepeaterFilter");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new RowRepeaterFilter.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>icon : string</li>
 * <li>filters : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This element is used by the RowRepeater and allows to define a filter in this context along with the related data such as a text and an icon.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RowRepeaterFilter = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RowRepeaterFilter.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.RowRepeaterFilter. 
 * Resulting metadata can be obtained via sap.ui.commons.RowRepeaterFilter.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RowRepeaterFilter", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getIcon", "setIcon", "getFilters", "setFilters"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : null},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : null},
    "filters" : {name : "filters", type : "object", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * The filter title if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterFilter.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterFilter.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * The filter icon if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterFilter.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterFilter.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>filters</code>.
 * The set of filter objects.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>filters</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterFilter.prototype.getFilters = function() {
	return this.getProperty("filters");
};

/**
 * Setter for property <code>filters</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} sFilters  new value for property <code>filters</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterFilter.prototype.setFilters = function(sFilters) {
	this.setProperty("filters", sFilters);
	return this;
};


// Start of sap/ui/commons/RowRepeaterFilter.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.commons.RowRepeaterFilter.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap.ui.commons.RowRepeaterFilter
if ( !jQuery.sap.isDeclared('sap.ui.commons.HorizontalDividerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.HorizontalDivider
jQuery.sap.declare("sap.ui.commons.HorizontalDividerRenderer");

/**
 * @class HorizontalDivider renderer.
 * @static
 */
sap.ui.commons.HorizontalDividerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.HorizontalDividerRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;

	// return immediately if control is invisible
	if(!oControl.getVisible()){
		return;
	}

	rm.write("<hr");
	rm.writeControlData(oControl);
	rm.writeAttribute("role", "separator"); //ARIA
	if(oControl.getWidth()) {
		rm.writeAttribute("style", "width:"+oControl.getWidth()+";");
	}
	rm.addClass("sapUiCommonsHoriDiv");
	rm.addClass(oControl.getType() == "Page" ? "sapUiCommonsHoriDivTypePage" : "sapUiCommonsHoriDivTypeArea");
	switch(oControl.getHeight()){
		case "Ruleheight":
			rm.addClass("sapUiCommonsHoriDivHeightR");
			break;
		case "Small":
			rm.addClass("sapUiCommonsHoriDivHeightS");
			break;
		case "Large":
			rm.addClass("sapUiCommonsHoriDivHeightL");
			break;
		default:
			rm.addClass("sapUiCommonsHoriDivHeightM");
	}
	rm.writeClasses();
	rm.write("></hr>");
};

}; // end of sap.ui.commons.HorizontalDividerRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.DatePicker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.DatePicker.
jQuery.sap.declare("sap.ui.commons.DatePicker");



/**
 * Constructor for a new DatePicker.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>locale : string</li>
 * <li>yyyymmdd : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.TextField#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Allows end users to interact with dates.
 * Entries can directly be written in, or selected from a calendar pad.
 * Note: Dates can always be manually entered in the fix YYYYMMDD format, on top of the flexible "locale" format.
 * @extends sap.ui.commons.TextField
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.DatePicker = function (sId, mSettings) {
	sap.ui.commons.TextField.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.DatePicker.prototype = jQuery.sap.newObject(sap.ui.commons.TextField.prototype);

/*
 * Describe the sap.ui.commons.DatePicker. 
 * Resulting metadata can be obtained via sap.ui.commons.DatePicker.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.DatePicker", {

  // ---- object ----
  baseType : "sap.ui.commons.TextField",
  publicMethods : [
    // properties 
    "getLocale", "setLocale", "getYyyymmdd", "setYyyymmdd"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "locale" : {name : "locale", type : "string", group : "Misc", defaultValue : null},
    "yyyymmdd" : {name : "yyyymmdd", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>locale</code>.
 * 
 * Defines the locale (language and country), e.g. "en-US", whose translations should be used to render the DatePicker.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>locale</code>
 * @public
 * 
 */
sap.ui.commons.DatePicker.prototype.getLocale = function() {
	return this.getProperty("locale");
};

/**
 * Setter for property <code>locale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLocale  new value for property <code>locale</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DatePicker.prototype.setLocale = function(sLocale) {
	this.setProperty("locale", sLocale);
	return this;
};


/**
 * Getter for property <code>yyyymmdd</code>.
 * Defines the date as a "yyyymmdd" string, independent from the format used. The inherited textField "value" attribute uses the date format as configured via the locale.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>yyyymmdd</code>
 * @public
 * 
 */
sap.ui.commons.DatePicker.prototype.getYyyymmdd = function() {
	return this.getProperty("yyyymmdd");
};

/**
 * Setter for property <code>yyyymmdd</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sYyyymmdd  new value for property <code>yyyymmdd</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DatePicker.prototype.setYyyymmdd = function(sYyyymmdd) {
	this.setProperty("yyyymmdd", sYyyymmdd);
	return this;
};


// Start of sap/ui/commons/DatePicker.js
jQuery.sap.require('jquery-ui-core'); // unlisted dependency retained

jQuery.sap.require('jquery-ui-datepicker'); // unlisted dependency retained


/**
 * This code should run only once!
**/
(function(){
	// Call-back function to record the closure.
	// If someone clicks on the window, that closes the DatePicker.
	// Our controller wants to be informed about such state-change.
	var fOnClose = function(dateText, inst) {
		// "this" refers to the associated input field.
		var sInputId   = this.id;
		var sControlID = sInputId.replace(/-input/, '');
		var oControl   = sap.ui.getCore().getControl(sControlID);
		if (oControl) {
			if (oControl.oPrivate.bVerboseMode) {
				jQuery.sap.log.debug("DATEPICKER: JQUERY ONCLOSE CALLBACK");
			}
			oControl._hide();
		}
	};

	// Call-back function used to override jQuery's setting of the focus
	// on the alternate DDLB, for those DDLBs to behave like all other ones.
	// Used since our Keyboard Navigator is without effect on those ENTER events.
	// Also used for focusing into the Calendar Pad after Month Previous/Next
	// (PageUp/PageDown) events.
	var fOnChangeMonthYear = function(year, month, inst) {
		// "this" refers to the associated input field.
		if (document.activeElement) {
			if (document.activeElement.className == "ui-datepicker-month") {
				// User expects focus to stay on (changed) Month DDLB.
				setTimeout(sap.ui.commons.DatePicker._focusMonth, 100);
			} else if (document.activeElement.className == "ui-datepicker-year") {
				// User expects focus to stay on (changed) Year DDLB.
				setTimeout(sap.ui.commons.DatePicker._focusYear, 100);
			}
			else {
				// Assuming Calendar Pad focus needed, for Previous/Next Month button support.
				// However jQuery may also be calling us because it is internally initializing
				// the Month while the picker is still closed.
				// "_focusCalendar()" will check for that!
//				jQuery.sap.log.debug("DATEPICKER: CalendarPad CALLBACK");
				setTimeout(sap.ui.commons.DatePicker._focusCalendar, 100);
			}
		}
	};

//	Defining the Language-independent, SAP-specific jQuery settings:
	jQuery.datepicker.regional[''] = {
//			buttonImage    : "icon.gif", // Works as shown below...
			changeMonth    : true,       // For rendering the DDLB allowing month changes.
			changeYear     : true,       // For rendering the DDLB allowing year changes.
//			disabled       : true,       // Does not seem to work...
			isRTL          : sap.ui.getCore().getConfiguration().getRTL(),
			onChangeMonthYear: fOnChangeMonthYear,
			onClose        : fOnClose,   // For reacting to picker closing.
//			onSelect       : fOnSelect,  // For reacting to date selection.
			showOn         : 'button',   // Works as shown below... Not useful to us.
			showOtherMonths: true,       // For rendering the days outside the current month.
			showWeek       : true,       // For rendering the week numbers.
			weekHeader     : ''          // For rendering no header (e.g. 'Wk') on top of the week numbers.
	};
	// Default settings for ALL DatePickers!:
	jQuery.datepicker.setDefaults(jQuery.datepicker.regional['']);
}());

/**
 * Initializes the control.
 * It is called from the constructor.
 * @private
 */
sap.ui.commons.DatePicker.prototype.init = function(){
  // The <INPUT> part of the DatePicker should look like that of the ComboBox.
  // (to share same look&feel)
//	this.addStyleClass("sapUiTfCombo");
	// this.setAccessibleRole("DatePicker");//sap.ui.core.AccessibleRole.Combobox);

	// There is no point really in setting the "maxLength" attribute for the DatePicker,
	// as jQuery already parses the input according to the configured language-dependent dateFormat.
	// Anyway, such maxLength would be language-dependent!
	// this.setMaxLength(10);

	this.oPrivate = {
	  bIsVisible: false,    // "visibility:hidden" allows not to display the jQuery
							// DatePicker on INPUT-focus!  :-)
	  tLastTimeStamp: "",   // Used to avoid re-opening on double-clicks.
	  sValue: "",						// VALUE saved on KEYUP for IE to use next if ONKEYDOWN = ENTER,
							// for processing YYYYMMDD entries before jQuery kicks in.
	  bVerboseMode: false   // When set to "true", prints console logs.
	};
};

/**
 * Small utility.
 */
sap.ui.commons.DatePicker.prototype._getInputId = function(){
	// To follow the ComboBox behavior, the <INPUT> ID = control ID + "-input":
	return this.getId() + "-input";
};

/**
 * Adds the jQuery DatePicker onAfterRendering.
 * Another possibility would be to wait until INPUT-focus or BUTTON-click,
 * if performance becomes an issue with multiple instances.
 */
sap.ui.commons.DatePicker.prototype.onAfterRendering = function(){
	var sInputId  = this._getInputId();

	// Attaching our onKeydown non-jQuery handler before the jQuery DatePicker binds
	// its own, as we want to be invoked first for parsing entries in the YYYYMMDD format!
	// The SAPUI5 "sapOnEnter" and "onKeydown" handlers are of no use since the DatePicker
	// onENTER handler kicks-in before those two (and event intercepts the ENTER events).
	// jQuery "INPUT.bind('keydown',...)" can't be used without causing jQuery JavaScript errors.
	// So we are left with the basic JavaScript event registering mechanisms.
	var oInput = jQuery.sap.domById(sInputId);

	// Attaching a jQuery DatePicker to the <INPUT> element, with the supported locale:
	var oSelector = jQuery.sap.byId(sInputId);
	var sLocale   = this.getRenderedLocale();
	oSelector.datepicker(jQuery.datepicker.regional[sLocale]);

	// Attaching our CSS classes to the jQuery DatePicker for styling and visibility.
	jQuery('#ui-datepicker-div').addClass('sapUi-jQdatePicker sapUi-visibilityHidden sapUiShd');

	// Now that we have the jQuery DatePicker attached, we can convert YYYYDDMM to VALUE
	// or VALUE to YYYYMMDD!
	// Only one of the two YYYYMMDD and VALUE attributes can be set.
	// (Setting one resets the other. So the last in wins.)
	var initialDate = this.getYyyymmdd();
	if (initialDate && initialDate!="-1") {
		this.setYyyymmdd(initialDate);
	} else {
		initialDate = this.getValue();
		if (initialDate && initialDate!="-1") {
			this.setValue(initialDate);
		}
	}
};

/**
 * The "_show()" and "_hide()" utilities are for opening/closing the DatePicker.
 * "visibility:hidden" is applied, not to render the Picker on INPUT-focus.
 * Own Keyboard Handler is required for overriding jQuery navigation.
 */
sap.ui.commons.DatePicker.prototype._show = function(){
	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: ._show()");
	}

	// Opening the DatePicker!
	var sInputId  = this._getInputId();
	var oSelector = jQuery.sap.byId(sInputId);
	var oPicker = jQuery('#ui-datepicker-div');
	oPicker.removeClass('sapUi-visibilityHidden');
	oSelector.datepicker( "show" );

	// in RTL case set the position to right
	if(sap.ui.getCore().getConfiguration().getRTL()){
		var oDom = jQuery.sap.domById(this.getId());
		var sRight = (jQuery(document).width() - oDom.offsetLeft - oDom.offsetWidth) + "px";
		oPicker.css('left','').css('right', sRight);
	}
	
	// workaound for jQuery-DatePicker bug in fixed ares
	if(oPicker.css('position') == 'fixed'){
		if((oPicker.position().top - jQuery(document).scrollTop() + oPicker.outerHeight()) > document.documentElement.clientHeight){
			var sNewTop = (oPicker.position().top - jQuery(document).scrollTop() - oPicker.outerHeight() - oSelector.outerHeight()) + 'px';
			oPicker.css('top', sNewTop);
		}
	}

	// Taking note of that state.
	this.oPrivate.bIsVisible = true;
	// Making sure this DatePicker has our keydown handler:
	this._setKeyboardNavigation();
	// Focusing onto the selected or current day:
	// Can't focus right-away in IE8/9! (No issue with Firefox and Safari.)
	//this._focusCalendar();
	// Therefore adding a delay for the Picker to have time to render.
	// Anyway, this can only make this code more robust for future jQuery releases!
	setTimeout(sap.ui.commons.DatePicker._focusCalendar, 100);

	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: open");
	}
};

/**
 * Functionality to close the DatePicker
 */
sap.ui.commons.DatePicker.prototype._hide = function(){
	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: ._hide()");
	}

	if (this.oPrivate.bIsVisible) {
		// Record time of closing:
		var currentTime = new Date().getTime();
		this.oPrivate.tLastTimeStamp = currentTime;

		// Proceeding with the closing.
		jQuery('#ui-datepicker-div').addClass('sapUi-visibilityHidden');
		this.oPrivate.bIsVisible = false;
		var sInputId  = this._getInputId();
		var oSelector = jQuery.sap.byId(sInputId);
		oSelector.datepicker( "hide" );

		// By default (ENTER, ESC, Picker-CLICK, ...) focusing back onto the INPUT field.
		// However, clicking anywhere else will override this default behavior.
		var oInput = this.getInputDomRef();
		if (oInput) {
			oInput.focus();
		}
		if (oInput.value != this.getValue()) {
			this._checkChange();
		}
	}

	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: closed");
	}
};

/**
 * BUTTON-click is to toggle the DatePicker.
 */
sap.ui.commons.DatePicker.prototype.onclick = function(oEvent){
	var target = (oEvent.target) ? oEvent.target : oEvent.srcElement;

	// Do not react if disabled/nonEditable, in case defined as such by inheritance.
	if ( !this.getEnabled() || !this.getEditable() ) {
		if (target.nodeName != "INPUT") {
			// button clicked -> focus complete field.
			jQuery.sap.byId(this.getId()).focus();
		}
		return;
	}

	if (target.nodeName != "INPUT") {
		// The button must have been clicked!
		// DIV#myDatePickerId              <-- DIV container
		//   INPUT#myDatePickerId-input    <-- INPUT field
		//   DIV#myDatePickerId-icon       <-- BUTTON field
		if (this.oPrivate.bIsVisible) {
			if (this.oPrivate.bVerboseMode) {
				jQuery.sap.log.debug("DATEPICKER: BUTTON-CLICK HIDE");
			}
			this._hide();
		} else {
			// Discard double-events:
			// Scenario: When clicking outside of the DatePicker and of its INPUT field,
			//           jQuery closes the DatePicker.
			//           Now, if one happens to be clicking on the DatePicker button,
			//           jQuery will first close the DatePicker, then, we will get this
			//           button-click event that we will have to discard, not to immediately
			//           re-open the DatePicker!
			//           The time interval between these two events typically range between
			//           50 and 170 msec.
			var currentTime = new Date().getTime();
			var timeLapse   = currentTime - this.oPrivate.tLastTimeStamp;
			// Assuming that anything received within 300msec interval is invalid.
			if (timeLapse && timeLapse < 300) {
				if (this.oPrivate.bVerboseMode) {
					jQuery.sap.log.debug("DATEPICKER: BUTTON-D-CLICK IGNORED: " + timeLapse + "msec");
				}
				this.getInputDomRef().focus();
			} else {
				if (this.oPrivate.bVerboseMode) {
					jQuery.sap.log.debug("DATEPICKER: BUTTON-CLICK SHOW");
				}
				this._show();
			}
		}
	}
};

/**
 * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow).
 * Used for opening the DatePicker.
*/
sap.ui.commons.DatePicker.prototype.onsapshow = function(oEvent){
	// Do not react if disabled/nonEditable, in case defined as such by inheritance.
	if ( !this.getEnabled || !this.getEditable() ) {
		return;
	}

	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: .onsapshow()");
	}
	this._show();

	// Would be nice if Framework could intercept the F4 event, so that IE would not open its
	// URL history...
	// Doing it here for now.
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Event handler for saving DATEs when FOCUS is lost.
 * Handles TABs as well.
 */
sap.ui.commons.DatePicker.prototype.onsapfocusleave = function(oEvent){
	// Ignore event if DatePicker is opening.
	if (this.oPrivate.bIsVisible) {
		return;
	}

	if (this.oPrivate.bVerboseMode) {
		jQuery.sap.log.debug("DATEPICKER: .onsapfocusleave()");
	}
	
	this._checkChange(oEvent);
};

/**
 * On opening of the DatePicker, the requirement is to:
 * - focus on a move-to day, as done via arrow keys (Up, Right, Down, Left).
 * - focus on the already "selected" date, if one has already been set, or else:
 * - focus on the current date, or else (if having selected a new Month):
 * - focus on the 1st of the Month.
 * Meant to be called if the Picker is already open or just opening.
 * However the use of "setTimeout()" means we will have to make sure the picker
 * is still open before proceeding!
 * Also, can be called "any time" via our OnChangeMonthYear() callback function!
 * Not "prototype" since instance-independent.
*/
sap.ui.commons.DatePicker._focusCalendar = function() {
	var oPicker       = jQuery('#ui-datepicker-div');
	var sControlID    = oPicker.attr('associatedControlId');
	// Return if called back for a Picker that has not even reached the opening state:
	if (!sControlID) {
		return;
	}
	var oControl      = sap.ui.getCore().getControl(sControlID);
	// Return if the Picker is now closed. May happen after setTimeout():
	if (!oControl.oPrivate.bIsVisible) {
		oPicker.attr('restoreFocusOnDay', "");
		return;
	}
	var oDivContainer = jQuery.sap.domById(sControlID);
	var oFocusCell    = null;
	var oFocusDay     = null;

	// Were we to restore the focus against a particular day?
	var sDay = oPicker.attr('restoreFocusOnDay');
	if (sDay) {
		oFocusCell = jQuery('a.ui-state-default');
		var day = Number(sDay);
		if (day <= 0) {day += oFocusCell.length;}
		oFocusDay = oFocusCell[day-1];
		if (oFocusDay && oFocusDay.offsetHeight) {
			// Can only focus on "in-the-month" Anchors (not on "out-of-the-month" SPANs),
			// and can only focus if the calendar day has been rendered (height check).
			oFocusDay.focus();
			// Although we just focused into the Calendar, having our INPUT field
			// still look "in-focus", like a ComboBox would do when open:
			if (oDivContainer.className.indexOf("sapUiTfFoc") == -1) {
				oDivContainer.className += " sapUiTfFoc";
			}
			oPicker.attr('restoreFocusOnDay', "");
			return;
		}
	}

	// Currently selected date:
	oFocusCell = jQuery('td.ui-datepicker-current-day');
	oFocusDay  = (oFocusCell[0]) ? oFocusCell[0].firstChild : null;
	if (oFocusDay && oFocusDay.nodeName == "A" && oFocusDay.offsetHeight) {
		oFocusDay.focus();
		if (oDivContainer.className.indexOf("sapUiTfFoc") == -1) {
			oDivContainer.className += " sapUiTfFoc";
		}
		return;
	}

	// Today:
	oFocusCell = jQuery('td.ui-datepicker-today');
	oFocusDay  = (oFocusCell[0]) ? oFocusCell[0].firstChild : null;
	if (oFocusDay && oFocusDay.nodeName == "A" && oFocusDay.offsetHeight) {
		oFocusDay.focus();
		if (oDivContainer.className.indexOf("sapUiTfFoc") == -1) {
			oDivContainer.className += " sapUiTfFoc";
		}
		return;
	}

	// 1st of the Month:
	oFocusCell = jQuery('a.ui-state-default');
	oFocusDay  = oFocusCell[0];
	if (oFocusDay && oFocusDay.offsetHeight) {
		oFocusDay.focus();
		if (oDivContainer.className.indexOf("sapUiTfFoc") == -1) {
			oDivContainer.className += " sapUiTfFoc";
		}
		return;
	}

	// Just to be on the safe side, in case more time is needed on IE to render
	// the inner calendar, we will try again in 100msec.
	// Infinite loops are avoided by stopping if no open picker is found.
	setTimeout(sap.ui.commons.DatePicker._focusCalendar, 100);
};

/**
 * Similar, but simpler, utilities for focusing onto the DDLBs.
 * Can only be called if the Picker is already rendered.
 * Not "prototype" since instance-independent.
*/
sap.ui.commons.DatePicker._focusMonth = function() {
	jQuery('select.ui-datepicker-year')[0].focus(); // Focussing elsewhere closes the month DDLB.
	jQuery('select.ui-datepicker-month')[0].focus();
};

sap.ui.commons.DatePicker._focusYear = function() {
	jQuery('select.ui-datepicker-month')[0].focus(); // Focussing elsewhere closes the year DDLB.
  jQuery('select.ui-datepicker-year')[0].focus();
};

/**
 * Keyboard Navigation:
 * - Tab						: For navigating between the 3 selectors (2 DDLBs + 1 Calendar).
 * - Arrows					: For navigating within a selector.
 * - Enter or Space	: For making a selection.
 * - Esc						: For closing with no selection.
 * - Home						: For navigating to the first day.
 * - End						: For navigating to the last day.
 * - PageUp					: For rendering the previous month.
 * - PageDown				: For rendering the next month.
 *
 * BEWARE: "this" points to the jQuery Picker, as this handler got bound against it.
 *         Use "oControl" for pointing to "this" controller!
 *
 * JAWS: Please do not forget to change cursor modes, as by default, JAWS
 *       uses some keys for its own usage, e.g. RightArrow = "SayNextCharacter".
 *       INSERT-Z will toggle you in and out of normal arrow keyboard navigation mode.
 *       Arrow navigation can be used within the Calendar part of the DatePicker.
 *       Otherwise one can still use Alt-LeftArrow and Alt-RightArrow for navigation.
 *
 * Not "prototype" since instance-independent.
*/
sap.ui.commons.DatePicker._keyboardHandler = function(event) {
	// Sub-function for focusing onto a given calendar day, i.e. 1 through 31.
	function focusDay(nDay) {
		// Retrieving all possible day cells within the calendar:
		var days = jQuery("a.ui-state-default");
		if ((nDay > 0) && (nDay <= days.length)) {
			// Focussing within the current month:
			days[nDay-1].focus(); // Day 1 is at index 0...
		} else if (nDay <= 0) {
			// Focussing within the previous month:
			var nextDay = String(nDay);
			jQuery('#ui-datepicker-div').attr('restoreFocusOnDay', nextDay);
			jQuery("a.ui-datepicker-prev")[0].focus();
			jQuery("a.ui-datepicker-prev")[0].onclick();
		} else {
			// Focussing within the next month:
			var nextDay = String(nDay - days.length);
			jQuery('#ui-datepicker-div').attr('restoreFocusOnDay', nextDay);
			jQuery("a.ui-datepicker-next")[0].focus();
			jQuery("a.ui-datepicker-next")[0].onclick();
		}
	}

	// Sub-function for focusing onto the last calendar day.
	function focusLastDayOfMonth() {
		var days = jQuery("a.ui-state-default");
		days[days.length-1].focus();
	}

	// Sub-function for focusing onto the 1st day of the week, given a day within the week.
	function focusFirstDayOfWeek(nDay) {
		var days = jQuery("a.ui-state-default");
		// Fetching the current Calendar Row. Going up from "A" to "TD" to "TR":
		var currentRow = days[nDay-1].parentNode.parentNode;
		// Looking for the 1st Calendar day found within that row:
		for (var i=0, len=days.length; i<len; i++) {
			if (days[i].parentNode.parentNode == currentRow) {
				days[i].focus();
				return;
			}
		}
	}

	// Sub-function for focusing onto the last day of the week, given a day within the week.
	function focusLastDayOfWeek(nDay) {
		var days = jQuery("a.ui-state-default");
		var currentRow = days[nDay-1].parentNode.parentNode;
		// Looking for the last Calendar day found within that row:
		for (var i=days.length-1; i>=0; i--) {
			if (days[i].parentNode.parentNode == currentRow) {
				days[i].focus();
				return;
			}
		}
	}

	// Retrieving some current data:
	var key              = event.keyCode;
	var target           = (event.target) ? event.target : event.srcElement;
	var currentFocusDay  = Number(target.innerHTML);
	var bIsHeaderEvent   = (target.nodeName == "SELECT"); // DDLB event
	var bIsCalendarEvent = (target.nodeName == "A");      // Day-cell event
	if (!bIsHeaderEvent && !bIsCalendarEvent) {
		jQuery.sap.log.debug("ERROR: DatePicker.prototype._keyboardHandler()");
		return;
	}

	switch (key){
	case jQuery.sap.KeyCodes.TAB: /* 9 */
		// Moving between DDLBs and Calendar areas.
		if (bIsHeaderEvent) {
			if ((target.className.indexOf("year")!=-1 && !event.shiftKey) ||
					(target.className.indexOf("month")!=-1 && event.shiftKey)) {
				setTimeout(sap.ui.commons.DatePicker._focusCalendar, 100);
			} else {
				if (target.className.indexOf("year")!=-1) {
					setTimeout(sap.ui.commons.DatePicker._focusMonth, 100);
				}
				else {
					setTimeout(sap.ui.commons.DatePicker._focusYear, 100);
				}
				return;
			} // Native TABing between DDLBs.
		} else {
			if (event.shiftKey) {
				jQuery("select.ui-datepicker-year")[0].focus();
			}
			else                {
				jQuery("select.ui-datepicker-month")[0].focus();
			}
		}
		break;
	case jQuery.sap.KeyCodes.ENTER: /* 13 */
		if (document.activeElement) {
			// Oddly enough, on IE, have to stop jQuery from doing a 2nd selection back!
			if (document.activeElement.className == "ui-datepicker-month"){
				setTimeout(sap.ui.commons.DatePicker._focusMonth, 100);
				break;  // Intercept this event from jQuery.
			} else if (document.activeElement.className == "ui-datepicker-year" ){
				setTimeout(sap.ui.commons.DatePicker._focusYear, 100);
				break;  // Intercept this event from jQuery.
			}
		}
		return; // Leave this event to jQuery to handle.
		break;
	case jQuery.sap.KeyCodes.ESCAPE: /* 27 */
		// Closing the current DatePicker:
		// jQuery('#ui-datepicker-div').hide(); <- Does not work as jQuery will not invoke
		//                                         our supplied onClose() callback function
		//                                         since we are the ones triggering this closure!
		// So, invoking our "_hide()" function instead, as our Controller needs to register this.
		var oPicker    = jQuery('#ui-datepicker-div');
		var sControlID = oPicker.attr('associatedControlId');
		var oControl   = sap.ui.getCore().getControl(sControlID);
		oControl._hide();
		break;
	case jQuery.sap.KeyCodes.SPACE: /* 32 */
		// Select the current day. jQuery handler is on parent TD.
		if (bIsCalendarEvent) {
			target.offsetParent.onclick();
		}
		else {
			return;
		}
		break;
	case jQuery.sap.KeyCodes.PAGE_UP: /* 33 */
		// Activate the "Previous" button:
		jQuery("a.ui-datepicker-prev")[0].focus();
		jQuery("a.ui-datepicker-prev")[0].onclick();
		//sap.ui.commons.DatePicker._focusCalendar();
		//setTimeout(sap.ui.commons.DatePicker._focusCalendar, 100);
		// -> Calendar focusing postponed to OnChangeMonthYear() callback function.
		break;
	case jQuery.sap.KeyCodes.PAGE_DOWN: /* 34 */
		// Activate the "Next" button:
		jQuery("a.ui-datepicker-next")[0].focus();
		jQuery("a.ui-datepicker-next")[0].onclick();
		// See PAGE_UP comments.
		break;
	case jQuery.sap.KeyCodes.END: /* 35 */
		// Focus on last day of...
		if (bIsCalendarEvent) {
			if (event.ctrlKey) {
				focusLastDayOfMonth();
			}
			else               {
				focusLastDayOfWeek(currentFocusDay);
			}
		} else {
			return;
		}
		break;
	case jQuery.sap.KeyCodes.HOME: /* 36 */
		// Focus on first day of...
		if (bIsCalendarEvent) {
			if (event.ctrlKey) {
				focusDay(1);
			}
			else               {
				focusFirstDayOfWeek(currentFocusDay);
			}
		} else {
			return;
		}
		break;
	case jQuery.sap.KeyCodes.ARROW_LEFT: /* 37 */
		// Focus onto "day-1", if possible.
		if (bIsCalendarEvent) {
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				focusDay(currentFocusDay+1);
			}
			else {
				focusDay(currentFocusDay-1);
			}
		}
		else {
			return;
		} // Allow native DDLB selection
		break;
	case jQuery.sap.KeyCodes.ARROW_UP: /* 38 */
		// Focus onto "day-7", if possible.
		if (bIsCalendarEvent) {
			focusDay(currentFocusDay-7);
		}
		else {
			return;
		} // Allow native DDLB selection
		break;
	case jQuery.sap.KeyCodes.ARROW_RIGHT: /* 39 */
		// Focus onto "day+1", if possible.
		if (bIsCalendarEvent) {
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				focusDay(currentFocusDay-1);
			}
			else {
				focusDay(currentFocusDay+1);
			}
		}
		else {
			return;
		} // Allow native DDLB selection
		break;
	case jQuery.sap.KeyCodes.ARROW_DOWN: /* 40 */
		// Focus onto "day+7", if possible.
		if (bIsCalendarEvent) {
			focusDay(currentFocusDay+7);
		}
		else                  {
			return;
		} // Allow native DDLB selection
		break;
	default:
		return;
	}

	// If we did not return, then this event was ours. Intercept!
	event.preventDefault();
	event.stopPropagation();
};

/**
 * Registering our DatePicker Keyboard Navigation handler over that of jQuery.
 * Also records the Control ID, as a means to reach it given a jQuery Picker.
 * @private
 */
sap.ui.commons.DatePicker.prototype._setKeyboardNavigation = function() {
	var oPicker = jQuery('#ui-datepicker-div');
	if (oPicker) {
		// BEWARE: Do not register the KeyDown Event Handler more than once!
		//         Avoid multiple eventing and memory gobbler.
		var registeredCtrlId = oPicker.attr('associatedControlId');
		if (!registeredCtrlId) {
			oPicker.bind('keydown', sap.ui.commons.DatePicker._keyboardHandler);
		}
		// Note that jQuery uses only 1 picker for all instances, so we always
		// need to update our current Control ID:
		oPicker.attr('associatedControlId', this.getId());
	} else {
		jQuery.sap.log.debug("ERROR: DatePicker ._setKeyboardNavigation() fails.");
	}
};

/**
 * Checks if there are translations for the supplied locale (e.g. "en-US") or locale-language (e.g. "en").
 * Returns the locale or locale-language for which a match is found.
 * '' is returned if no match is found.
 * @private
 */
sap.ui.commons.DatePicker.prototype.parseForSupportedLocale = function(sLocale) {
	// Do we have texts defined for this locale?
	if (sLocale) {
		// Is this whole "locale" supported?
		var aTranslations = jQuery.datepicker.regional[sLocale];
		if (!aTranslations) {
			// Is the language-only supported?
			var sLanguage = sLocale.split('-')[0];
			if (sLanguage != sLocale) {
				aTranslations = jQuery.datepicker.regional[sLanguage];
				if (!aTranslations) {
					// This language is not supported.
					sLocale = '';
				}else{
					// We can go with the language-part of the locale:
					sLocale = sLanguage;
				}
			}else{
				sLocale = '';
			}
		}
	}
	return sLocale;
};

/**
 * Returns the "locale" (e.g. "en-US") to use for rendering a DatePicker.
 * Checks with the controller, the page, the navigator, until a match is found.
 * If no match is found, return the SAP 'en' default supported locale-language.
 * @private
 */
sap.ui.commons.DatePicker.prototype.getRenderedLocale = function() {
	// Fetch and check if the Control locale can be supported:
	var sLocale = this.getProperty("locale");
	sLocale = this.parseForSupportedLocale(sLocale);

	if (!sLocale) {
		// Next, fetch and check if the Application/URL locale can be supported:
		// (no matter if the Control locale was non nil)
		// NOTE: Best would be if we had a getLocales() function to fetch
		//       all the possible locales at once (URL, Navigator, Portal...).
		sLocale = sap.ui.getCore().getConfiguration().getLanguage();
		sLocale = this.parseForSupportedLocale(sLocale);
	}

	if (!sLocale) {
		// Next, fetch and check if the Navigator locale can be supported:
		// (no matter if the URL locale was non nil)
		if (navigator) {
			if (navigator.language) {
				sLocale = navigator.language;
			}
			else if (navigator.browserLanguage) {
				sLocale = navigator.browserLanguage;
			}
			else if (navigator.systemLanguage) {
				sLocale = navigator.systemLanguage;
			}
			else if (navigator.userLanguage) {
				sLocale = navigator.userLanguage;
			}
		}
		sLocale = this.parseForSupportedLocale(sLocale);
	}

	if (!sLocale) {
		// At last, using the SAP-default "en" locale:
		sLocale = "en";
	}

	return sLocale;
};

// #############################################################################
// Overwritting methods that are generated in DatePicker.API.js
// #############################################################################

/**
 * Setter for property <code>yyyymmdd</code>.
 * Required for handling application inputs (mainly onLoad).
 *
 * Default value is <code>''</code>, which means today.
 * "-1" value means to be discarded (used by tools generating all attributes).
 *
 * @param {string} sYyyymmdd  new value for property <code>yyyymmdd</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DatePicker.prototype.setYyyymmdd = function(sYyyymmdd) {
	// Just disregarding this input if told so:
	if (sYyyymmdd == "-1") {
		return this;
	}

	// Quickly saving this non-validated YYYYMMDD as is, in case getter is called
	// before we are done.
	// "true" to suppress rendering. Rendering done on VALUE change.
	this.setProperty("yyyymmdd", sYyyymmdd, true);

	// No need to process this YYYYMMDD before control is rendered.
	// (Propection against multiple qUnit-test YYYYMMDD changes.)
	// Attribute will be processed onAfterRendering.
	var sInputId = this.getId() + "-input";
	var oInput = jQuery.sap.domById(sInputId);
	if (!oInput) {
		// Erasing any VALUE attribute to avoid potential clashes.
		this.setProperty("value", "-1", true);
		return this;
	}

	// Now we need to tell the jQuery DatePicker!
	// Needed since the jQuery function has its own "this":
	var that = this;
	try{
		// WBN to avoid this function($), but no picker without $.datepicker!
		// Hmm, this statement should be re-checked now that this code only runs onAfterRendering...
		jQuery(function($) {
			// Building a date object with the fix-format received date:
			var oDate = $.datepicker.parseDate('yymmdd', sYyyymmdd);
			// Updating the DatePicker:
			var oSelector = jQuery.sap.byId(sInputId);
			oSelector.datepicker( "setDate" , oDate );
			// Saving the current date value:
			var oInput = jQuery.sap.domById(sInputId);
			var sValue = oInput.value;
			// "true" to suppress rendering. Not needed since we just read it from the DOM!
			that.setProperty("value", sValue, true);
		});
	} catch (e) {
		jQuery.sap.log.debug("Warning: DATEPICKER setYyyymmdd(" + sYyyymmdd + ") failed");
		// Maybe YYYYMMDD was not supplied in the YYYYDDMM format!?
		this.setProperty("value", "", true);
		this.setProperty("yyyymmdd", "", true);
	};

	return this;
};

/**
 * Setter for property <code>value</code>.
 * Required for handling user manual inputs.
 *
 * Default value is <code>''</code>, which means today.
 * "-1" value means to be discarded (used by tools generating all attributes).
 *
 * @param {string} sValue new value for property <code>value</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DatePicker.prototype.setValue = function(sValue) {
	// Just disregarding this input if told so:
	if (sValue == "-1") {
		return this;
	}

	// Quickly saving this non-validated VALUE as is, in case getter is called
	// before we are done.
	// "true" to suppress rendering. jQuery DatePicker handles that.
	this.setProperty("value", sValue, true);

	// No need to process this VALUE before control is rendered.
	// (Propection against multiple qUnit-test VALUE changes.)
	// Attribute will be processed onAfterRendering.
	var sInputId = this.getId() + "-input";
	var oInput = jQuery.sap.domById(sInputId);
	if (!oInput) {
		// Erasing any YYYYMMDD attribute to avoid potential clashes.
		this.setProperty("yyyymmdd", "-1", true);
		return this;
	}

	// Now we need to tell the jQuery DatePicker!
	// Needed since the jQuery function has its own "this":
	var that = this;
	try{
		// jQuery needed to compute yyyymmdd.
		jQuery(function($) {
			// Updating the DatePicker with the raw VALUE:
			var oSelector = jQuery.sap.byId(sInputId);
			oSelector.datepicker( "setDate" , sValue );
			// Using a date object, asking jQuery to reformat it in our fix-YYYYMMDD format:
			var oDate = oSelector.datepicker( "getDate" );
			var sYyyymmdd = $.datepicker.formatDate( 'yymmdd', oDate );
			// Saving the concurrent date attribute:
			// "true" to suppress rendering. Rendering done on VALUE change.
			that.setProperty("yyyymmdd", sYyyymmdd, true);
			// Checking how jQuery interpreted the supplied DATE:
			var oInput = jQuery.sap.domById(sInputId);
			var newValue = oInput.value;
			if (newValue != sValue) {
				// "true" to suppress rendering. jQuery handles that.
				that.setProperty("value", newValue, true);
			}
		});
	} catch (e) {
		jQuery.sap.log.debug("Warning: DATEPICKER setValue(" + sValue + ") failed");
		// Maybe VALUE was not supplied in the appropriate LOCALE format!?
		this.setProperty("value", "", true);
		this.setProperty("yyyymmdd", "", true);
	}

	jQuery.sap.log.debug("DATEPICKER(" + this.getId() + "): setValue: value= " + that.getValue() + " yyyymmdd= " + that.getYyyymmdd());
	return this;
};

/**
 * Setter for property <code>locale</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sLocale  new value for property <code>locale</code>
 * @public
 */
sap.ui.commons.DatePicker.prototype.setLocale = function(sLocale) {
	// Worth checking if there is any change to process:
	var oldLoc = this.getLocale();
	if(sLocale == oldLoc) {
		return this;
	}

	// Saving the supplied locale:
	// "true" to suppress rendering. Rendering done on VALUE change.
	this.setProperty("locale", sLocale, true);
	this.setLocaleTexts(sLocale);

	// If control has not been rendered, there is no point rendering a new one now!
	var sInputId = this.getId() + "-input";
	var oInput = jQuery.sap.domById(sInputId);
	if (!oInput) {
		return this;
	}

	// Retrieving the supported translations, to give jQuery:
	sLocale = this.getRenderedLocale();
	this.setLocaleTexts(sLocale);
	var oSelector = jQuery.sap.byId(sInputId);
	// Have to instantiate a new jQuery DatePicker for reformating the rendered Date!
	// Updating the new jQuery DatePicker and ourselves via a JavaScript Date object.
	var oDate = oSelector.datepicker( "getDate" );
	// Only way to reformat VALUE on the fly, according to the new LOCALE:
	oSelector.datepicker( "destroy" );
	oSelector.datepicker(jQuery.datepicker.regional[sLocale]);
	oSelector.datepicker( "setDate" , oDate );
	this.setValue(oInput.value);

	return this;
};

/**
 * Setter for texts of <code>locale</code>.
 *
 * @param {string} sLocale  new value for property <code>locale</code>
 * @public
 */
sap.ui.commons.DatePicker.prototype.setLocaleTexts = function(sLocale) {

	// check if texts already loaded
	if(!jQuery.datepicker.regional[sLocale] || !jQuery.datepicker.regional[sLocale].closeText){
		var sLanguage = sLocale.split('-')[0];

		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons", sLanguage);

		if(!jQuery.datepicker.regional[sLanguage]){
			jQuery.datepicker.regional[sLanguage] = {};
		}
			//language dependend fields
		jQuery.datepicker.regional[sLanguage].closeText = rb.getText("DATEPICKER_CLOSE_TEXT");
		jQuery.datepicker.regional[sLanguage].prevText = rb.getText("DATEPICKER_PREV_TEXT");
		jQuery.datepicker.regional[sLanguage].nextText = rb.getText("DATEPICKER_NEXT_TEXT");
		jQuery.datepicker.regional[sLanguage].currentText = rb.getText("DATEPICKER_CURRENT_TEXT");
		jQuery.datepicker.regional[sLanguage].monthNames = [rb.getText("DATEPICKER_MONTH_01"),rb.getText("DATEPICKER_MONTH_02"),rb.getText("DATEPICKER_MONTH_03"),
															rb.getText("DATEPICKER_MONTH_04"),rb.getText("DATEPICKER_MONTH_05"),rb.getText("DATEPICKER_MONTH_06"),
															rb.getText("DATEPICKER_MONTH_07"),rb.getText("DATEPICKER_MONTH_08"),rb.getText("DATEPICKER_MONTH_09"),
															rb.getText("DATEPICKER_MONTH_10"),rb.getText("DATEPICKER_MONTH_11"),rb.getText("DATEPICKER_MONTH_12")];
		jQuery.datepicker.regional[sLanguage].monthNamesShort = [rb.getText("DATEPICKER_MONTH_SHORT_01"),rb.getText("DATEPICKER_MONTH_SHORT_02"),rb.getText("DATEPICKER_MONTH_SHORT_03"),
																 rb.getText("DATEPICKER_MONTH_SHORT_04"),rb.getText("DATEPICKER_MONTH_SHORT_05"),rb.getText("DATEPICKER_MONTH_SHORT_06"),
																 rb.getText("DATEPICKER_MONTH_SHORT_07"),rb.getText("DATEPICKER_MONTH_SHORT_08"),rb.getText("DATEPICKER_MONTH_SHORT_09"),
																 rb.getText("DATEPICKER_MONTH_SHORT_10"),rb.getText("DATEPICKER_MONTH_SHORT_11"),rb.getText("DATEPICKER_MONTH_SHORT_12")];
		jQuery.datepicker.regional[sLanguage].dayNames = [rb.getText("DATEPICKER_DAY_01"),rb.getText("DATEPICKER_DAY_02"),rb.getText("DATEPICKER_DAY_03"),rb.getText("DATEPICKER_DAY_04"),
														  rb.getText("DATEPICKER_DAY_05"),rb.getText("DATEPICKER_DAY_06"),rb.getText("DATEPICKER_DAY_07")];
		jQuery.datepicker.regional[sLanguage].dayNamesShort = [rb.getText("DATEPICKER_DAY_SHORT_01"),rb.getText("DATEPICKER_DAY_SHORT_02"),rb.getText("DATEPICKER_DAY_SHORT_03"),rb.getText("DATEPICKER_DAY_SHORT_04"),
															   rb.getText("DATEPICKER_DAY_SHORT_05"),rb.getText("DATEPICKER_DAY_SHORT_06"),rb.getText("DATEPICKER_DAY_SHORT_07")];
		jQuery.datepicker.regional[sLanguage].dayNamesMin = [rb.getText("DATEPICKER_DAY_MIN_01"),rb.getText("DATEPICKER_DAY_MIN_02"),rb.getText("DATEPICKER_DAY_MIN_03"),rb.getText("DATEPICKER_DAY_MIN_04"),
															 rb.getText("DATEPICKER_DAY_MIN_05"),rb.getText("DATEPICKER_DAY_MIN_06"),rb.getText("DATEPICKER_DAY_MIN_07")];
	}
};

/**
 * Returns the DomRef that allows input.
 * Could be overwritten in child-classes
 *
 * @return {DOMNode} The input element's DOM reference or null
 * @protected
 */
sap.ui.commons.DatePicker.prototype.getInputDomRef = function() {
	return jQuery.sap.domById(this.getId() + "-input");
};

/**
 *Overwrite fireChange of TextField because additional parameter
 *
 * @private
 */
sap.ui.commons.DatePicker.prototype.fireChange = function() {
	this.fireEvent("change", {newValue:this.getValue(),
							  newYyyymmdd:this.getYyyymmdd()});
	return this;
};

/**
 * Overwrites the mehod in TextField to add additional YYYYMMDD parameter
 */
sap.ui.commons.DatePicker.prototype._checkChange = function(oEvent) {
	var oInput = this.getInputDomRef(),
		newVal = oInput && oInput.value;

	if(this.getEditable() && this.getEnabled() && newVal != this.getValue() && newVal != this.getYyyymmdd()) {
		if (newVal.length==8 && parseInt(newVal, 10)==newVal){
			this.setYyyymmdd(newVal);
		}else{
			this.setValue(newVal);
		}
		this.fireChange();
	}
};
}; // end of sap.ui.commons.DatePicker
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMapStep') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RoadMapStep.
jQuery.sap.declare("sap.ui.commons.RoadMapStep");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new RoadMapStep.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>label : string</li>
 * <li>enabled : boolean</li>
 * <li>expanded : boolean</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>subSteps : sap.ui.commons.RoadMapStep</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Step used within a RoadMap Control.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RoadMapStep = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RoadMapStep.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.RoadMapStep. 
 * Resulting metadata can be obtained via sap.ui.commons.RoadMapStep.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RoadMapStep", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getLabel", "setLabel", "getEnabled", "setEnabled", "getExpanded", "setExpanded", "getVisible", "setVisible", 
    // aggregations
    "getSubSteps", "insertSubStep", "addSubStep", "removeSubStep", "removeAllSubSteps", "indexOfSubStep", "destroySubSteps"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "label" : {name : "label", type : "string", group : "Misc", defaultValue : null},
    "enabled" : {name : "enabled", type : "boolean", group : "Misc", defaultValue : true},
    "expanded" : {name : "expanded", type : "boolean", group : "Misc", defaultValue : false},
    "visible" : {name : "visible", type : "boolean", group : "Misc", defaultValue : true}
  },
  defaultAggregation : "subSteps",
  aggregations : {
    "subSteps" : {name : "subSteps", type : "sap.ui.commons.RoadMapStep", multiple : true, singularName : "subStep"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>label</code>.
 * Label of the step
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * 
 */
sap.ui.commons.RoadMapStep.prototype.getLabel = function() {
	return this.getProperty("label");
};

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMapStep.prototype.setLabel = function(sLabel) {
	this.setProperty("label", sLabel);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Specifies whether the user shall be allowed to click a step, or not
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.RoadMapStep.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMapStep.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>expanded</code>.
 * This property is only relevant when using sub steps.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * 
 * @deprecated Since version 0.19.0. 
 * Note that sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.getExpanded = function() {
	jQuery.sap.log.warning("Using deprecated property 'expanded'.");
	return this.getProperty("expanded");
};

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.19.0. 
 * Note that sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.setExpanded = function(bExpanded) {
	jQuery.sap.log.warning("Using deprecated property 'expanded'.");
	this.setProperty("expanded", bExpanded);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Step is visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RoadMapStep.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMapStep.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>subSteps</code>.<br/>
 * Sub steps for the current step. Will be displayed only in the case that the step is expanded. Otherwise, special arrows show the availability
 * of sub steps. One level of sub steps supported.
 * 
 * @return {sap.ui.commons.RoadMapStep[]}
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.getSubSteps = function() {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	return this.getAggregation("subSteps", []);
};


/**
 * Inserts a subStep into the aggregation named <code>subSteps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *          oSubStep the subStep to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subStep should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subStep is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subStep is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.insertSubStep = function(oSubStep, iIndex) {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	this.insertAggregation("subSteps", oSubStep, iIndex);
	return this;
};

/**
 * Adds some subStep <code>oSubStep</code> 
 * to the aggregation named <code>subSteps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oSubStep the subStep to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public 
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.addSubStep = function(oSubStep) {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	this.addAggregation("subSteps", oSubStep);
	return this;
};

/**
 * Removes an subStep from the aggregation named <code>subSteps</code>.
 *
 * @param {int | string | sap.ui.commons.RoadMapStep} vSubStep the subStep to remove or its index or id
 * @return {sap.ui.commons.RoadMapStep} the removed subStep or null
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.removeSubStep = function(vSubStep) {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	return this.removeAggregation("subSteps", vSubStep);
};

/**
 * Removes all the controls in the aggregation named <code>subSteps</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RoadMapStep[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.removeAllSubSteps = function() {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	return this.removeAllAggregation("subSteps");
};

/**
 * Checks for the provided <code>sap.ui.commons.RoadMapStep</code> in the aggregation named <code>subSteps</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oSubStep the subStep whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.indexOfSubStep = function(oSubStep) {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	return this.indexOfAggregation("subSteps", oSubStep);
};
	

/**
 * Destroys all the subSteps in the aggregation 
 * named <code>subSteps</code>.
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.19.0. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 */
sap.ui.commons.RoadMapStep.prototype.destroySubSteps = function() {
	jQuery.sap.log.warning("Using deprecated aggregation 'subSteps'.");
	this.destroyAggregation("subSteps");
	return this;
};


// Start of sap/ui/commons/RoadMapStep.js
(function() {

//Setter for property label which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setLabel = function(sLabel) {
	setProperty(this, "label", sLabel, function(){
		sap.ui.commons.RoadMapRenderer.setStepLabel(this, sLabel);
		this.setProperty("label", sLabel, true);
		sap.ui.commons.RoadMapRenderer.addEllipses(this);
		return true;
	});
	return this;
};


//Setter for property enabled which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setEnabled = function(bEnabled) {
	var bOldEnabled = this.getEnabled();
	if((bEnabled && bOldEnabled) || (!bEnabled && !bOldEnabled)) {
		return this;
	}
	setProperty(this, "enabled", bEnabled, function(){
		var oRoadMap = getRoadMap(this);
		var bWasSelected = sap.ui.commons.RoadMapRenderer.setStepEnabled(oRoadMap, this, bEnabled);
		if(bWasSelected) {
			oRoadMap.setProperty("selectedStep", "", true);
		}
		if(!bEnabled) {
			this.setExpanded(false);
		}
		return false;
	});
	return this;
};


//Setter for property expanded which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setExpanded = function(bExpanded) {
	var bOldExpanded= this.getExpanded();
	if((bExpanded && bOldExpanded) || (!bExpanded && !bOldExpanded)) {
		return this;
	}
	setProperty(this, "expanded", bExpanded, function(){
		if(isSubStep(this) || this.getSubSteps().length == 0 || !this.getEnabled() || !bExpanded){
			this.setProperty("expanded", false, true);
			if(!isSubStep(this) && this.getSubSteps().length > 0 && this.getEnabled()){
				sap.ui.commons.RoadMapRenderer.selectStep(getRoadMap(this), this, false, true, null, true);
			}
		}else{
			this.setProperty("expanded", true, true);
			sap.ui.commons.RoadMapRenderer.selectStep(getRoadMap(this), this, false, true, null, true);
		}
		return true;
	});
	return this;
};


//Setter for property visible which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setVisible = function(bVisible) {
	var bOldVisible = this.getVisible();
	if((bVisible && bOldVisible) || (!bVisible && !bOldVisible)) {
		return this;
	}
	setProperty(this, "visible", bVisible, function(){
		var oRoadMap = getRoadMap(this);
		var bWasSelected = sap.ui.commons.RoadMapRenderer.setStepVisible(oRoadMap, this, isSubStep(this), bVisible);
		if(bWasSelected) {
			oRoadMap.setProperty("selectedStep", "", true);
		}
		this.setProperty("visible", bVisible, true);
		sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
		return true;
	});
	return this;
};


/**
 * Returns the dom reference that should get the focus
 * @type DOMNode
 * @return Returns the dom reference that should get the focus
 */
sap.ui.commons.RoadMapStep.prototype.getFocusDomRef = function () {
	return jQuery.sap.byId(this.getFocusInfo().id).get(0) || null;
};


/**
 * Returns an object representing the serialized focus information
 * @type object
 * @return an object representing the serialized focus information
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.getFocusInfo = function () {
	return {id: this.getId()+"-box"};
};


/**
 * Behavior implementation which is executed when the user clicks the step.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.onclick = function(oEvent){
	this.handleSelect(oEvent);
};


/**
 * Behavior implementation which is executed when the user presses the space or enter key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.onsapselect = function(oEvent){
	this.handleSelect(oEvent);
};


/**
 * Handler which is called when the step is selected.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.handleSelect = function(oEvent, bIgnoreDomCheck){
	oEvent.stopPropagation();
	oEvent.preventDefault();

	if(!bIgnoreDomCheck && !jQuery.sap.containsOrEquals(this.getDomRef(), oEvent.target)) {
		return;
	}

	if(this.getEnabled()){
		var oRoadMap = getRoadMap(this);
		var oStep = this;
		sap.ui.commons.RoadMapRenderer.selectStep(oRoadMap, this, isSubStep(this), false, function(sType){
			var bWasAlreadySelected = oRoadMap.getSelectedStep() == oStep.getId();
			oRoadMap.setProperty("selectedStep", oStep.getId(), true);
			oStep.focus();
			if(sType != "selected"){
				oStep.setProperty("expanded", sType == "expanded", true);
				oRoadMap.fireStepExpanded({stepId: oStep.getId()});
			}
			if(!bWasAlreadySelected) {
				oRoadMap.fireStepSelected({stepId: oStep.getId()});
			}
		});
	}else{
		this.focus();
	}
};


//********* Private *********


//Returns the corresponding Roadmap control
var getRoadMap = function(oThis){
	var oRoadMap = oThis.getParent();
	if(isSubStep(oThis)) {
		oRoadMap = oRoadMap.getParent();
	}
	return oRoadMap;
};


//Returns true if the parent of this step is not of type sap.ui.commons.RoadMap
var isSubStep = function(oThis){
	return !(oThis.getParent() instanceof sap.ui.commons.RoadMap);
};


//Helper function to set a property without rerendering (see overridden setter functions)
var setProperty = function(oThis, sName, oValue, fDomAdaptationCallback){
	if(!oThis.getDomRef()){
		oThis.setProperty(sName, oValue);
		return;
	}
	var bSkipUpdate = fDomAdaptationCallback.apply(oThis, []);
	if(!bSkipUpdate) {
		oThis.setProperty(sName, oValue, true);
	}
};

}());
}; // end of sap.ui.commons.RoadMapStep
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuButton.
jQuery.sap.declare("sap.ui.commons.MenuButton");



/**
 * Constructor for a new MenuButton.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>dockButton : string</li>
 * <li>dockMenu : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>menu : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>itemSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.Button#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Common button control that opens a menu when clicked by the user. The control provides an API for configuring the docking position
 * of the menu.
 * 
 * @extends sap.ui.commons.Button
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MenuButton = function (sId, mSettings) {
	sap.ui.commons.Button.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MenuButton.prototype = jQuery.sap.newObject(sap.ui.commons.Button.prototype);

/*
 * Describe the sap.ui.commons.MenuButton. 
 * Resulting metadata can be obtained via sap.ui.commons.MenuButton.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MenuButton", {

  // ---- object ----
  baseType : "sap.ui.commons.Button",
  publicMethods : [
    // properties 
    "getDockButton", "setDockButton", "getDockMenu", "setDockMenu", 
    // aggregations
    "getMenu", "setMenu", "destroyMenu", 
    // associations
    
    // events
    "attachItemSelected", "detachItemSelected"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "dockButton" : {name : "dockButton", type : "string", group : "Misc", defaultValue : null},
    "dockMenu" : {name : "dockMenu", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "menu",
  aggregations : {
    "menu" : {name : "menu", type : "sap.ui.commons.Menu", multiple : false}
  },
  associations : {},
  events : {
    "itemSelected" : "itemSelected"
  }

});	

sap.ui.commons.MenuButton.M_EVENTS = {'itemSelected':'itemSelected'};


/**
 * Getter for property <code>dockButton</code>.
 * The position / edge (see sap.ui.core.Popup.Dock) of the button where the menu is docked. Default is 'begin bottom'.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dockButton</code>
 * @public
 * 
 */
sap.ui.commons.MenuButton.prototype.getDockButton = function() {
	return this.getProperty("dockButton");
};

/**
 * Setter for property <code>dockButton</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDockButton  new value for property <code>dockButton</code>
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.setDockButton = function(sDockButton) {
	this.setProperty("dockButton", sDockButton);
	return this;
};


/**
 * Getter for property <code>dockMenu</code>.
 * The position / edge (see sap.ui.core.Popup.Dock) of the menu which is docked to the button. Default is 'begin top'.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dockMenu</code>
 * @public
 * 
 */
sap.ui.commons.MenuButton.prototype.getDockMenu = function() {
	return this.getProperty("dockMenu");
};

/**
 * Setter for property <code>dockMenu</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDockMenu  new value for property <code>dockMenu</code>
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.setDockMenu = function(sDockMenu) {
	this.setProperty("dockMenu", sDockMenu);
	return this;
};

	
/**
 * Getter for aggregation <code>menu</code>.<br/>
 * Menu that shall be opened when the button is clicked
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 */
sap.ui.commons.MenuButton.prototype.getMenu = function() {
	return this.getAggregation("menu", null);
};


/**
 * Setter for the aggregated <code>menu</code>.
 * @param oMenu {sap.ui.commons.Menu}
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.setMenu = function(oMenu) {
	this.setAggregation("menu", oMenu);
	return this;
};
	

/**
 * Destroys the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.destroyMenu = function() {
	this.destroyAggregation("menu");
	return this;
};


/**
 * Event that is fired when a menu item is selected by the user 
 *
 * @name sap.ui.commons.MenuButton#itemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The ID of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'itemSelected' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 * Event that is fired when a menu item is selected by the user 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.attachItemSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("itemSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'itemSelected' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.detachItemSelected = function(fnFunction, oListener) {
	this.detachEvent("itemSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event itemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The ID of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.MenuButton.prototype.fireItemSelected = function(mArguments) {
	this.fireEvent("itemSelected", mArguments);
	return this;
};


// Start of sap/ui/commons/MenuButton.js
(function() {

sap.ui.commons.MenuButton.prototype.init = function() {
	this.addStyleClass("sapUiMenuButton");
	this.bWithKeyboard = false;
};

/**
 * Function is called when button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onclick = function(oEvent) {
	if(this.getEnabled()){
		var sDockButton = this.getDockButton() ? this.getDockButton() : sap.ui.core.Popup.Dock.BeginBottom;
		var sDockMenu = this.getDockMenu() ? this.getDockMenu() : sap.ui.core.Popup.Dock.BeginTop;
		this.getMenu().open(this.bWithKeyboard, this.getDomRef(), sDockMenu, sDockButton, this.getDomRef());
	}
	this.bWithKeyboard = false;
	oEvent.preventDefault();
};

/**
 * Function is called when enter key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onsapenter = function(oEvent){
	//It is sufficient to set this flag here only. A click event to open the menu will follow.
	this.bWithKeyboard = true;
};

/**
 * Function is called when space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onsapspace = function(oEvent){
	//It is sufficient to set this flag here only. A click event to open the menu will follow.
	this.bWithKeyboard = true;
};

/**
 * Function is called when down key is pressed with a modifier key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
//Requested by UX, see CSN 0120061532 0001379793 2011
sap.ui.commons.MenuButton.prototype.onsapdownmodifiers = function(oEvent){
	if(oEvent.altKey){
		this.bWithKeyboard = true;
		this.onclick(oEvent);
	}
};

/**
 * Setter for the aggregated <code>menu</code>.
 * @param oMenu {sap.ui.commons.Menu}
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.setMenu = function(oMenu) {
	updateMenuEventRegistration(this, oMenu);
	this.setAggregation("menu", oMenu);
	return this;
};

/**
 * Destroys the menu in the aggregation
 * named <code>menu</code>.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.destroyMenu = function() {
	updateMenuEventRegistration(this, null);
	this.destroyAggregation("menu");
	return this;
};

//********** Private **********

// Detaches the select event handler from the current menu and attaches it to the new menu
var updateMenuEventRegistration = function(oThis, oNewMenu){
	var oMenu = oThis.getMenu();
	if(oMenu) {
		oMenu.detachItemSelect(oThis._fItemSelectHandler);
	}
	oThis._fItemSelectHandler = jQuery.proxy(onItemSelected, oThis);
	if(oNewMenu) {
		oNewMenu.attachItemSelect(oThis._fItemSelectHandler);
	}
};

//Function is called when an item in the menu was selected.
var onItemSelected = function(oEvent){
	var oItem = oEvent.getParameter("item");
	this.fireItemSelected({itemId: oItem.getId(), item: oItem});
	this.firePress({itemId: oItem.getId(), item: oItem});
	//Forces menu closing
	this.getMenu().close();
};

}());

// to overwrite JS doc for inherited press event

/**
 * Fired when an item from the menu was selected.
 * 
 * @see sap.ui.commons.MenuButton#itemSelected
 *
 * @name sap.ui.commons.MenuButton#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * 
 * @param {string} oControlEvent.getParameters.itemId The id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 * 
 * Event is fired when an item from the menu was selected.
 * 
 * @see sap.ui.commons.MenuButton#attachItemSelected
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @see sap.ui.commons.MenuButton#detachItemSelected
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */

/**
 * Fire event press to attached listeners.
 * 
 * @see sap.ui.commons.MenuButton#fireItemSelected
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @protected
 */
}; // end of sap.ui.commons.MenuButton
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.AbsoluteLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.layout.AbsoluteLayout
jQuery.sap.declare("sap.ui.commons.layout.AbsoluteLayoutRenderer");

/**
 * @class AbsoluteLayout renderer.
 * @static
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer = {
};


(function() {

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;
	
	oControl.doBeforeRendering();

	if(!oControl.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiLayoutAbs");
	rm.addClass("sapUiLayoutAbsOvrflwY" + oControl.getVerticalScrolling());
	rm.addClass("sapUiLayoutAbsOvrflwX" + oControl.getHorizontalScrolling());
	rm.writeClasses();
	var sStyle = "width:" + oControl.getWidth() + ";height:" + oControl.getHeight() + ";";
	rm.writeAttribute("style", sStyle);
	rm.write(">");

	var aPositions = oControl.getPositions();
	if(aPositions && aPositions.length > 0){
		for(var index=0; index<aPositions.length; index++){
			var oPosition = aPositions[index];
			var oChildControl = oPosition.getControl();
			if(oChildControl) {
				rm.write("<div");
				rm.writeElementData(oPosition);
				rm.writeAttribute("class", "sapUiLayoutAbsPos");
				rm.writeAttribute("style", getComputedStyles(oPosition));
				rm.write(">");
				rm.renderControl(oChildControl);
				rm.write("</div>");
			}
		}
	}

	rm.write("</div>");
};


/**
 * Updates the size of the layout.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutSize = function(oLayout) {
	jQuery(oLayout.getDomRef()).css("width", oLayout.getWidth()).css("height", oLayout.getHeight());
};


/**
 * Updates the scrolling mode of the layout.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutScolling = function(oLayout) {
	var jLayout = jQuery(oLayout.getDomRef());
	for(var sScrollingType in sap.ui.core.Scrolling) {
		jLayout.removeClass("sapUiLayoutAbsOvrflwY"+sScrollingType).removeClass("sapUiLayoutAbsOvrflwX"+sScrollingType);
	}
	jLayout.addClass("sapUiLayoutAbsOvrflwY"+oLayout.getVerticalScrolling()).addClass("sapUiLayoutAbsOvrflwX"+oLayout.getHorizontalScrolling());
};


/**
 * Updates the styles of the given position in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles = function(oPosition) {
	jQuery(oPosition.getDomRef()).attr("style", getComputedStyles(oPosition));
};


/**
 * Removes the given position from the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.removePosition = function(oPosition) {
	jQuery(oPosition.getDomRef()).remove();
};


/**
 * Removes all positions of the given layout from the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.removeAllPositions = function(oLayout) {
	jQuery(oLayout.getDomRef()).html("");
};


/**
 * Updates the styles and the content of the given position in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl = function(oPosition) {
	sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oPosition);
	var rm = sap.ui.getCore().createRenderManager();
	rm.renderControl(oPosition.getControl());
	rm.flush(oPosition.getDomRef());
	rm.destroy();
};


/**
 * Inserts the given position into the Dom incl. the content and updating the styles.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.insertPosition = function(oLayout, oPosition) {
	var index = oLayout.indexOfPosition(oPosition);
	var oPositions = oLayout.getPositions();
	var oPredecessorPosition = null;
	while(index > 0) {
		index--;
		if(oPositions[index].getDomRef()){
			oPredecessorPosition = oPositions[index];
			break;
		}
	}
	
	var sHTML = "<div id=\""+oPosition.getId()+"\" data-sap-ui=\""+oPosition.getId()+"\" class=\"sapUiLayoutAbsPos\"></div>";
	if(!oPredecessorPosition){
		jQuery(oLayout.getDomRef()).prepend(sHTML);
	}else{
		jQuery(oPredecessorPosition.getDomRef()).after(sHTML);
	}
	
	sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl(oPosition);
};


/**
 * Computes and returns the CSS styles for the given position.
 *
 * @private
 */
var getComputedStyles = function(oPosition) {
	var oPos = oPosition.getComputedPosition();
	
	var addStyle = function(oPosition, aBuffer, sPos, sVal){
		if(sVal) {
			aBuffer.push(sPos+":"+sVal+";");
		}
	};
	
	var aBuffer = [];
	addStyle(oPosition, aBuffer, "top", oPos.top);
	addStyle(oPosition, aBuffer, "bottom", oPos.bottom);
	addStyle(oPosition, aBuffer, "left", oPos.left);
	addStyle(oPosition, aBuffer, "right", oPos.right);
	addStyle(oPosition, aBuffer, "width", oPos.width);
	addStyle(oPosition, aBuffer, "height", oPos.height);
	
	return aBuffer.join("");
};

}());
}; // end of sap.ui.commons.layout.AbsoluteLayoutRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.PositionContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.PositionContainer.
jQuery.sap.declare("sap.ui.commons.layout.PositionContainer");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new layout/PositionContainer.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>top : sap.ui.core.CSSSize</li>
 * <li>bottom : sap.ui.core.CSSSize</li>
 * <li>left : sap.ui.core.CSSSize</li>
 * <li>right : sap.ui.core.CSSSize</li>
 * <li>centerHorizontally : boolean</li>
 * <li>centerVertically : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>control : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is used to specify the position of a control in the AbsoluteLayout
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.PositionContainer = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.PositionContainer.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.layout.PositionContainer. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.PositionContainer.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.PositionContainer", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getTop", "setTop", "getBottom", "setBottom", "getLeft", "setLeft", "getRight", "setRight", "getCenterHorizontally", "setCenterHorizontally", "getCenterVertically", "setCenterVertically", 
    // aggregations
    "getControl", "setControl", "destroyControl", 
    // associations
    
    // events
    
    // methods
    "updatePosition"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "top" : {name : "top", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "bottom" : {name : "bottom", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "left" : {name : "left", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "right" : {name : "right", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "centerHorizontally" : {name : "centerHorizontally", type : "boolean", group : "Dimension", defaultValue : false},
    "centerVertically" : {name : "centerVertically", type : "boolean", group : "Dimension", defaultValue : false}
  },
  defaultAggregation : "control",
  aggregations : {
    "control" : {name : "control", type : "sap.ui.core.Control", multiple : false}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>top</code>.
 * Defines the distance to the top of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>top</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getTop = function() {
	return this.getProperty("top");
};

/**
 * Setter for property <code>top</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTop  new value for property <code>top</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setTop = function(sTop) {
	this.setProperty("top", sTop);
	return this;
};


/**
 * Getter for property <code>bottom</code>.
 * Defines the distance to the bottom of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>bottom</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getBottom = function() {
	return this.getProperty("bottom");
};

/**
 * Setter for property <code>bottom</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sBottom  new value for property <code>bottom</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setBottom = function(sBottom) {
	this.setProperty("bottom", sBottom);
	return this;
};


/**
 * Getter for property <code>left</code>.
 * Defines the distance to the left of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>left</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getLeft = function() {
	return this.getProperty("left");
};

/**
 * Setter for property <code>left</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sLeft  new value for property <code>left</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setLeft = function(sLeft) {
	this.setProperty("left", sLeft);
	return this;
};


/**
 * Getter for property <code>right</code>.
 * Defines the distance to the right of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>right</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getRight = function() {
	return this.getProperty("right");
};

/**
 * Setter for property <code>right</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sRight  new value for property <code>right</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setRight = function(sRight) {
	this.setProperty("right", sRight);
	return this;
};


/**
 * Getter for property <code>centerHorizontally</code>.
 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
 * The values of the attributes left and right are ignored when this feature is activated.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>centerHorizontally</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getCenterHorizontally = function() {
	return this.getProperty("centerHorizontally");
};

/**
 * Setter for property <code>centerHorizontally</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCenterHorizontally  new value for property <code>centerHorizontally</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setCenterHorizontally = function(bCenterHorizontally) {
	this.setProperty("centerHorizontally", bCenterHorizontally);
	return this;
};


/**
 * Getter for property <code>centerVertically</code>.
 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
 * The values of the attributes top and bottom are ignored when this feature is activated.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>centerVertically</code>
 * @public
 * 
 */
sap.ui.commons.layout.PositionContainer.prototype.getCenterVertically = function() {
	return this.getProperty("centerVertically");
};

/**
 * Setter for property <code>centerVertically</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCenterVertically  new value for property <code>centerVertically</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setCenterVertically = function(bCenterVertically) {
	this.setProperty("centerVertically", bCenterVertically);
	return this;
};

	
/**
 * Getter for aggregation <code>control</code>.<br/>
 * Child control of the position container
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.getControl = function() {
	return this.getAggregation("control", null);
};


/**
 * Setter for the aggregated <code>control</code>.
 * @param oControl {sap.ui.core.Control}
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.setControl = function(oControl) {
	this.setAggregation("control", oControl);
	return this;
};
	

/**
 * Destroys the control in the aggregation 
 * named <code>control</code>.
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.PositionContainer.prototype.destroyControl = function() {
	this.destroyAggregation("control");
	return this;
};


/**
 * Updates the position properties of the container according to the given position in JSON style.
 *
 * @name sap.ui.commons.layout.PositionContainer.prototype.updatePosition
 * @function
 * @param {object} 
 *         sOPos
 *         JSON-like object which defines the position of the child control in the absolute layout. The object is expected
 * to have one or more out of the attributes top, bottom, left, right (each with a value of type sap.ui.core.CSSSize). If no object
 * is given, nothing is updated.

 * @type void
 * @public
 */


// Start of sap/ui/commons/layout/PositionContainer.js
(function() {

//**** Overridden API Functions ****

sap.ui.commons.layout.PositionContainer.prototype.setControl = function(oControl) {
	cleanup(this);
	
	if(this.getDomRef()) {
		this.setAggregation("control", oControl, true);
		notifyLayoutOnChange(this, oControl ? "CTRL_CHANGE" : "CTRL_REMOVE");
	}else{
		if(this.getParent() && this.getParent().getDomRef()){
			this.setAggregation("control", oControl, true);
			if(oControl) {
				notifyLayoutOnChange(this, "CTRL_ADD");
			}
		}else{
			this.setAggregation("control", oControl);
		}
	}

	return this;
};

	
sap.ui.commons.layout.PositionContainer.prototype.destroyControl = function() {
	cleanup(this);
	
	var bSuppressRerendering = !!this.getDomRef();
	this.destroyAggregation("control", bSuppressRerendering);
	if(bSuppressRerendering) {
		notifyLayoutOnChange(this, "CTRL_REMOVE");
	}

	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setTop = function(sTop) {
	setProp(this, "top", sTop, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setBottom = function(sBottom) {
	setProp(this, "bottom", sBottom, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setLeft = function(sLeft) {
	setProp(this, "left", sLeft, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setRight = function(sRight) {
	setProp(this, "right", sRight, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setCenterHorizontally = function(bCenterHorizontally) {
	setProp(this, "centerHorizontally", bCenterHorizontally, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setCenterVertically = function(bCenterVertically) {
	setProp(this, "centerVertically", bCenterVertically, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.updatePosition = function(oPos) {
	if(!oPos) {
		oPos = {};
	}
	
	setProp(this, "centerHorizontally", oPos.centerHorizontally ? oPos.centerHorizontally : null);
	setProp(this, "centerVertically", oPos.centerVertically ? oPos.centerVertically : null);
	setProp(this, "left", oPos.left ? oPos.left : null);
	setProp(this, "right", oPos.right ? oPos.right : null);
	setProp(this, "top", oPos.top ? oPos.top : null);
	var bNotify = setProp(this, "bottom", oPos.bottom ? oPos.bottom : null);
	if(bNotify) {
		notifyLayoutOnChange(this, "CTRL_POS");
	}

};


//**** Other Functions ****

/**
 * Checks the position information for the child control against the width/height property and
 * returns the compute position.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.getComputedPosition = function() {
	var sTop = this.getTop();
	var sBottom = this.getBottom();
	var sLeft = this.getLeft();
	var sRight = this.getRight();
	var sWidth = null;
	var sHeight = null;
	
	var oControl = this.getControl();
	
	if(oControl){
		if(this.getCenterHorizontally()){
			sLeft = "50%";
			sRight = null;
		}else{
			if(!checkProperty(this.getParent(), oControl, "width", "left", sLeft, "right", sRight)) {
				sRight = undefined;
			}
			if(!sLeft && !sRight) {
				sLeft = "0px";
			}
		}
		
		if(this.getCenterVertically()){
			sTop = "50%";
			sBottom = null;
		}else{
			if(!checkProperty(this.getParent(), oControl, "height", "top", sTop, "bottom", sBottom)) {
				sBottom = undefined;
			}
			if(!sTop && !sBottom) {
				sTop = "0px";
			}
		}
		
		sWidth = getContainerDimension(oControl, "width");
		sHeight = getContainerDimension(oControl, "height");
	}
	
	return {top: sTop, bottom: sBottom, left: sLeft, right: sRight, width: sWidth, height: sHeight};
};


/**
 * Factory for <code>sap.ui.commons.layout.PositionContainer</code> using a given
 * child control and a position in JSON style.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.createPosition = function(oControl, oPos) {
	var oPosition = new sap.ui.commons.layout.PositionContainer();
	oPosition.setControl(oControl);
	if(oPos) {
		if(oPos.left) {
			oPosition.setLeft(oPos.left);
		}
		if(oPos.right) {
			oPosition.setRight(oPos.right);
		}
		if(oPos.top) {
			oPosition.setTop(oPos.top);
		}
		if(oPos.bottom) {
			oPosition.setBottom(oPos.bottom);
		}
		if(oPos.centerHorizontally) {
			oPosition.setCenterHorizontally(oPos.centerHorizontally);
		}
		if(oPos.centerVertically) {
			oPosition.setCenterVertically(oPos.centerVertically);
		}
	}
	return oPosition;
};


/**
 * Cleans up and optionally reinitalizes the event handler registrations of the element.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.reinitializeEventHandlers = function(bCleanupOnly) {
	if(this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	if(!bCleanupOnly && this.getDomRef() && (this.getCenterHorizontally() || this.getCenterVertically())) {
		var that = this;
		var onResize = function(){
			var jRef = jQuery(that.getDomRef());
			if(that.getCenterHorizontally()){
				jRef.css("margin-left", "-"+jRef.width()/2+"px");
			}
			if(that.getCenterVertically()){
				jRef.css("margin-top", "-"+jRef.height()/2+"px");
			}
		};
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), onResize);
		onResize();
	}
};


/**
 * Called when the element is destroyed.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.exit = function(oPos) {
	this.reinitializeEventHandlers(true);
};



//**** Private Helper Functions ****

/**
 * Sets the value of the given property and notifies the layout
 * if necessary and desired.
 *
 * @private
 */
var setProp = function(oThis, sProp, oValue, bNotifyLayout) {
	var bSuppressRerendering = !!oThis.getDomRef();
	oThis.setProperty(sProp, oValue, bSuppressRerendering);
	if(bSuppressRerendering && bNotifyLayout) {
		notifyLayoutOnChange(oThis, "CTRL_POS");
	}
	return bSuppressRerendering;
};


/**
 * Notifies the layout of this container about the change of the given type.
 *
 * @private
 */
var notifyLayoutOnChange = function(oThis, sChangeType) {
	var oLayout = oThis.getParent();
	if(oLayout) {
		oLayout.contentChanged(oThis, sChangeType);
	}
};


/**
 * @see sap.ui.commons.layout.AbsoluteLayout#cleanUpControl
 *
 * @private
 */
var cleanup = function(oThis) {
	var oControl = oThis.getControl();
	if(oControl) {
		sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oControl);
	}
};


/**
 * Checks whether the position settings fits to the set height/width attribute of a control.
 *
 * @private
 */
var checkProperty = function(oLayout, oControl, sProp, sPos1, sVal1, sPos2, sVal2) {
	if(sVal1 && sVal2) {
		if(getPropertyInfo(oControl, sProp)) {
			var val = oControl[getTypedGetterName(sProp)]();
			if(!(!val || val == "" || val == "auto" || val == "inherit")) {
				jQuery.sap.log.warning("Position "+sPos2+"="+sVal2+" ignored, because child control "+oControl.getId()+" has fixed "+sProp+" ("+val+").",
						"", "AbsoluteLayout '"+(oLayout ? oLayout.getId() : "_undefined")+"'");
				return false;
			}
		}else{
			jQuery.sap.log.warning("Position "+sPos2+"="+sVal2+" ignored, because child control "+oControl.getId()+" not resizable.",
					"", "AbsoluteLayout '"+(oLayout ? oLayout.getId() : "_undefined")+"'");
			return false;
		}
	}
	return true;
};


/**
 * Checks whether the given control has a property with the given name and type 'sap.ui.core.CSSSize' and
 * returns the corresponding metadata object.
 *
 * @private
 */
var getPropertyInfo = function(oControl, sPropertyName) {
	var oPropertyInfo = oControl.getMetadata().getAllProperties()[sPropertyName];
	if(oPropertyInfo && sap.ui.base.DataType.getType(oPropertyInfo.type) == sap.ui.base.DataType.getType("sap.ui.core.CSSSize")) {
		return oPropertyInfo;
	}
	return null;
};


/**
 * Returns the name of the typed getter function of the given control property name.
 *
 * @private
 */
var getTypedGetterName = function(sProp) {
	return "get" + sProp.substring(0,1).toUpperCase() + sProp.substring(1);
};


/**
 * Returns the value width or height property (depending of <code>sDim</code>) of the given
 * control if the width or height is specified in %.
 *
 * @private
 */
var getContainerDimension = function(oControl, sDim){
	if(getPropertyInfo(oControl, sDim)) {
		var val = oControl[getTypedGetterName(sDim)]();
		if(val && jQuery.sap.endsWith(val, "%")) {
			return val;
		}
	}
	return null;
};

}());
}; // end of sap.ui.commons.layout.PositionContainer
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.VerticalLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.VerticalLayout.
jQuery.sap.declare("sap.ui.commons.layout.VerticalLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new layout/VerticalLayout.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * In this layout the elemnts are orderd one below the other
 * @extends sap.ui.core.Control
 *
 * @author d031513 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.VerticalLayout = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.VerticalLayout.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.layout.VerticalLayout. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.VerticalLayout.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.VerticalLayout", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getEnabled", "setEnabled", "getVisible", "setVisible", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>width</code>.
 * CSS width of the vertical layout.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.layout.VerticalLayout.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * 
 * If not enabled all controls inside are not enabled automatically.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.layout.VerticalLayout.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Whether this VerticalLayout is visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.layout.VerticalLayout.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Child Controls within the layout.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.VerticalLayout.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.VerticalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.VerticalLayout.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


// Start of sap/ui/commons/layout/VerticalLayout.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


///**
// * This file defines behavior for the control,
// */
//sap.ui.commons.layout.VerticalLayout.prototype.init = function(){
//   // do something for initialization...
//};

sap.ui.core.EnabledPropagator.apply(sap.ui.commons.layout.VerticalLayout.prototype, [true]);
}; // end of sap.ui.commons.layout.VerticalLayout
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayoutArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.BorderLayoutArea.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutArea");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new layout/BorderLayoutArea.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>areaId : sap.ui.commons.layout.BorderLayoutAreaTypes</li>
 * <li>overflowX : string</li>
 * <li>overflowY : string</li>
 * <li>contentAlign : string</li>
 * <li>size : sap.ui.core.CSSSize</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The BorderLayoutArea represents one area of a BorderLayout when using the BorderLayout control
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.BorderLayoutArea.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.layout.BorderLayoutArea. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.BorderLayoutArea.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.BorderLayoutArea", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getAreaId", "setAreaId", "getOverflowX", "setOverflowX", "getOverflowY", "setOverflowY", "getContentAlign", "setContentAlign", "getSize", "setSize", "getVisible", "setVisible", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    
    // events
    
    // methods
    "setVisible"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "areaId" : {name : "areaId", type : "sap.ui.commons.layout.BorderLayoutAreaTypes", group : "Identification", defaultValue : sap.ui.commons.layout.BorderLayoutAreaTypes.top},
    "overflowX" : {name : "overflowX", type : "string", group : "Misc", defaultValue : 'auto'},
    "overflowY" : {name : "overflowY", type : "string", group : "Misc", defaultValue : 'auto'},
    "contentAlign" : {name : "contentAlign", type : "string", group : "Misc", defaultValue : 'left'},
    "size" : {name : "size", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100px'},
    "visible" : {name : "visible", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>areaId</code>.
 * Defines which area the element represents.
 * {"top"; "begin"; "center"; "end"; "bottom")
 *
 * Default value is <code>top</code>
 *
 * @return {sap.ui.commons.layout.BorderLayoutAreaTypes} the value of property <code>areaId</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getAreaId = function() {
	return this.getProperty("areaId");
};

/**
 * Setter for property <code>areaId</code>.
 *
 * Default value is <code>top</code> 
 *
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} oAreaId  new value for property <code>areaId</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setAreaId = function(oAreaId) {
	this.setProperty("areaId", oAreaId);
	return this;
};


/**
 * Getter for property <code>overflowX</code>.
 * The overflow mode of the area in horizontal direction (as CSS value)
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>overflowX</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getOverflowX = function() {
	return this.getProperty("overflowX");
};

/**
 * Setter for property <code>overflowX</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sOverflowX  new value for property <code>overflowX</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setOverflowX = function(sOverflowX) {
	this.setProperty("overflowX", sOverflowX);
	return this;
};


/**
 * Getter for property <code>overflowY</code>.
 * The overflow mode of the area in vertical direction (as CSS value)
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>overflowY</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getOverflowY = function() {
	return this.getProperty("overflowY");
};

/**
 * Setter for property <code>overflowY</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sOverflowY  new value for property <code>overflowY</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setOverflowY = function(sOverflowY) {
	this.setProperty("overflowY", sOverflowY);
	return this;
};


/**
 * Getter for property <code>contentAlign</code>.
 * The content alignment (as CSS value)
 *
 * Default value is <code>left</code>
 *
 * @return {string} the value of property <code>contentAlign</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getContentAlign = function() {
	return this.getProperty("contentAlign");
};

/**
 * Setter for property <code>contentAlign</code>.
 *
 * Default value is <code>left</code> 
 *
 * @param {string} sContentAlign  new value for property <code>contentAlign</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setContentAlign = function(sContentAlign) {
	this.setProperty("contentAlign", sContentAlign);
	return this;
};


/**
 * Getter for property <code>size</code>.
 * Defines the height (North/South) or the width (West/East). Is not used when the area element is in center.
 *
 * Default value is <code>100px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getSize = function() {
	return this.getProperty("size");
};

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>100px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setSize = function(sSize) {
	this.setProperty("size", sSize);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Controls the area visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Controls within the area
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayoutArea.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * Setter for property visible. Optionally a vanish/appearance-sliding animation is shown
 *
 * @name sap.ui.commons.layout.BorderLayoutArea.prototype.setVisible
 * @function
 * @param {boolean} 
 *         bVisible
 *         new value for property visible
 * @param {sap.ui.core.Control} 
 *         oBorderLayout
 *         OPTIONAL. When the corresponding BorderLayout control of the area is submitted a slide animation will be shown

 * @type void
 * @public
 */


// Start of sap/ui/commons/layout/BorderLayoutArea.js
sap.ui.commons.layout.BorderLayoutArea.prototype.init = function(){
   // do something for initialization...
	// set default values depending on areaId
	switch(this.getAreaId())
	{
		case "center":	this.setSize("");
						break;
	}
};

sap.ui.commons.layout.BorderLayoutArea.prototype.setVisible = function(bVisible) {
	// FIXME derived IDs should be created with a "-" as separator, case conversion not necessary?
	var sAreaId = this.getAreaId();
	var oBorderLayout = arguments[1];

	//if the current area is the center or if no BorderLayout is submitted no animation will be shown
	if(sAreaId=="center" || !oBorderLayout){
		this.setProperty("visible", bVisible);
		return this;
	}
	this.setProperty("visible", bVisible, true);


	if(oBorderLayout){
		var oBorderLayoutId = oBorderLayout.getId();
		var bRtl = oBorderLayout.getRtl();
		var jTop;
		var jBegin;
		var jCenter;
		var jEnd;
		var jBottom;
		var end = "0";
		if (bVisible) {
			end = this.getSize();
		}

		switch(sAreaId)
		{
			case "top":		jTop = jQuery.sap.byId(oBorderLayoutId+"top".toUpperCase());
							jBegin = jQuery.sap.byId(oBorderLayoutId+"begin".toUpperCase());
							jCenter = jQuery.sap.byId(oBorderLayoutId+"center".toUpperCase());
							jEnd = jQuery.sap.byId(oBorderLayoutId+"end".toUpperCase());

							jTop.animate({height: end});
							jBegin.animate({top: end});
							jCenter.animate({top: end});
							jEnd.animate({top: end});
							break;
			case "begin":	jBegin = jQuery.sap.byId(oBorderLayoutId+sAreaId.toUpperCase());
							jCenter = jQuery.sap.byId(oBorderLayoutId+"center".toUpperCase());

							jBegin.animate({width: end});
							if(bRtl){
								jCenter.animate({right: end});
							}else{
								jCenter.animate({left: end});
							}
							break;
			case "end":		jEnd = jQuery.sap.byId(oBorderLayoutId+sAreaId.toUpperCase());
							jCenter = jQuery.sap.byId(oBorderLayoutId+"center".toUpperCase());

							jEnd.animate({width: end});
							if(!bRtl){
								jCenter.animate({right: end});
							}else{
								jCenter.animate({left: end});
							}
							break;
			case "bottom":	jBottom = jQuery.sap.byId(oBorderLayoutId+"bottom".toUpperCase());
							jBegin = jQuery.sap.byId(oBorderLayoutId+"begin".toUpperCase());
							jCenter = jQuery.sap.byId(oBorderLayoutId+"center".toUpperCase());
							jEnd = jQuery.sap.byId(oBorderLayoutId+"end".toUpperCase());

							jBottom.animate({height: end});
							jBegin.animate({bottom: end});
							jCenter.animate({bottom: end});
							jEnd.animate({bottom: end});
							break;
		}
	}

	return this;
};
}; // end of sap.ui.commons.layout.BorderLayoutArea
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.HorizontalLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.HorizontalLayout.
jQuery.sap.declare("sap.ui.commons.layout.HorizontalLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new layout/HorizontalLayout.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>allowWrapping : boolean</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A simple HorizontalLayout
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.HorizontalLayout = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.HorizontalLayout.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.layout.HorizontalLayout. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.HorizontalLayout.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.HorizontalLayout", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getAllowWrapping", "setAllowWrapping", "getVisible", "setVisible", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "allowWrapping" : {name : "allowWrapping", type : "boolean", group : "Misc", defaultValue : false},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true}
  },
  
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>allowWrapping</code>.
 * Determines whether the elements inside the HorizontalLayout should line-wrap when there is insufficient horizontal space.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>allowWrapping</code>
 * @public
 * 
 */
sap.ui.commons.layout.HorizontalLayout.prototype.getAllowWrapping = function() {
	return this.getProperty("allowWrapping");
};

/**
 * Setter for property <code>allowWrapping</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAllowWrapping  new value for property <code>allowWrapping</code>
 * @return {sap.ui.commons.layout.HorizontalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.setAllowWrapping = function(bAllowWrapping) {
	this.setProperty("allowWrapping", bAllowWrapping);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Whether this HorizontalLayout is visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.layout.HorizontalLayout.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.HorizontalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The controls inside this layout.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.HorizontalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.HorizontalLayout} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.HorizontalLayout.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.HorizontalLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.HorizontalLayout.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


// Start of sap/ui/commons/layout/HorizontalLayout.js

}; // end of sap.ui.commons.layout.HorizontalLayout
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.AbsoluteLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.AbsoluteLayout.
jQuery.sap.declare("sap.ui.commons.layout.AbsoluteLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new layout/AbsoluteLayout.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>verticalScrolling : sap.ui.core.Scrolling</li>
 * <li>horizontalScrolling : sap.ui.core.Scrolling</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>positions : sap.ui.commons.layout.PositionContainer</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * The Absolute Layout positions its child controls absolutely
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.AbsoluteLayout.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.layout.AbsoluteLayout. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.AbsoluteLayout.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.AbsoluteLayout", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getWidth", "setWidth", "getHeight", "setHeight", "getVerticalScrolling", "setVerticalScrolling", "getHorizontalScrolling", "setHorizontalScrolling", 
    // aggregations
    "getPositions", "insertPosition", "addPosition", "removePosition", "removeAllPositions", "indexOfPosition", "destroyPositions", 
    // associations
    
    // events
    
    // methods
    "setPositionOfChild", "destroyContent", "indexOfContent", "removeAllContent", "removeContent", "insertContent", "addContent", "getContent"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "verticalScrolling" : {name : "verticalScrolling", type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.Hidden},
    "horizontalScrolling" : {name : "horizontalScrolling", type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.Hidden}
  },
  defaultAggregation : "positions",
  aggregations : {
    "positions" : {name : "positions", type : "sap.ui.commons.layout.PositionContainer", multiple : true, singularName : "position"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * The overall width of the control. When not set, 100% is automatically set.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * The overall height of the control. When not set, 100% is automatically set.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>verticalScrolling</code>.
 * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
 *
 * Default value is <code>Hidden</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>verticalScrolling</code>
 * @public
 * 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getVerticalScrolling = function() {
	return this.getProperty("verticalScrolling");
};

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>Hidden</code> 
 *
 * @param {sap.ui.core.Scrolling} oVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.setVerticalScrolling = function(oVerticalScrolling) {
	this.setProperty("verticalScrolling", oVerticalScrolling);
	return this;
};


/**
 * Getter for property <code>horizontalScrolling</code>.
 * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
 *
 * Default value is <code>Hidden</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>horizontalScrolling</code>
 * @public
 * 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getHorizontalScrolling = function() {
	return this.getProperty("horizontalScrolling");
};

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>Hidden</code> 
 *
 * @param {sap.ui.core.Scrolling} oHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.setHorizontalScrolling = function(oHorizontalScrolling) {
	this.setProperty("horizontalScrolling", oHorizontalScrolling);
	return this;
};

	
/**
 * Getter for aggregation <code>positions</code>.<br/>
 * Positioned child controls within the layout
 * 
 * @return {sap.ui.commons.layout.PositionContainer[]}
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getPositions = function() {
	return this.getAggregation("positions", []);
};


/**
 * Inserts a position into the aggregation named <code>positions</code>.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *          oPosition the position to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the position should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the position is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the position is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.insertPosition = function(oPosition, iIndex) {
	this.insertAggregation("positions", oPosition, iIndex);
	return this;
};

/**
 * Adds some position <code>oPosition</code> 
 * to the aggregation named <code>positions</code>.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *            oPosition the position to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.addPosition = function(oPosition) {
	this.addAggregation("positions", oPosition);
	return this;
};

/**
 * Removes an position from the aggregation named <code>positions</code>.
 *
 * @param {int | string | sap.ui.commons.layout.PositionContainer} vPosition the position to remove or its index or id
 * @return {sap.ui.commons.layout.PositionContainer} the removed position or null
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.removePosition = function(vPosition) {
	return this.removeAggregation("positions", vPosition);
};

/**
 * Removes all the controls in the aggregation named <code>positions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.PositionContainer[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllPositions = function() {
	return this.removeAllAggregation("positions");
};

/**
 * Checks for the provided <code>sap.ui.commons.layout.PositionContainer</code> in the aggregation named <code>positions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *            oPosition the position whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.indexOfPosition = function(oPosition) {
	return this.indexOfAggregation("positions", oPosition);
};
	

/**
 * Destroys all the positions in the aggregation 
 * named <code>positions</code>.
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.destroyPositions = function() {
	this.destroyAggregation("positions");
	return this;
};


/**
 * Allows to set or change the position information of the given child control
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.setPositionOfChild
 * @function
 * @param {sap.ui.core.Control} 
 *         oOControl
 *         The child control for which to change the position information; if empty or not aggregated, nothing is changed
 * @param {object} 
 *         sOPos
 *         JSON-like object which defines the position of the child control. The object is expected to have one or more from the attribute set
 * top, bottom, left, right; each with a value of type sap.ui.core.CSSSize.
 * If no object is given, the default is used which is left=0px,right=0px.

 * @type boolean
 * @public
 */


/**
 * Destroys all aggregated position containers and their child controls. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.destroyContent
 * @function

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Checks for the provided sap.ui.core.Control in the aggregated position containers, and returns the index of the container in the positions aggregation
 * if found, or '-1' otherwise.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.indexOfContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oOContent
 *         The content of which the index is looked for

 * @type int
 * @public
 */


/**
 * Removes all aggregated position containers. Returns an array of the controls contained in the removed position containers (might be empty).
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllContent
 * @function

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Removes the given control and its corresponding position container from the aggregation named 'positions'.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.removeContent
 * @function
 * @param {object} 
 *         sVContent
 *         The content control to remove, its ID, or the index of the corresponding position container in the 'positions' aggregation.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Inserts the given control and a corresponding position container into the aggregation named 'positions'. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.insertContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oOContent
 *         The content to insert; if empty, nothing is inserted
 * @param {int} 
 *         iIIndex
 *         The '0'-based index where the content shall be inserted at. For a negative value of iIndex, the content is inserted at position '0';
 * for a value greater than the current size of the aggregation, the content is inserted at the last position.
 * @param {object} 
 *         sOPos
 *         JSON-like object which defines the position of the child control within the layout. The object is expected to have one or more
 * from the attribute set top, bottom, left, right; each with a value of type sap.ui.core.CSSSize. If no object is given, the default is left=0px,right=0px.

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Adds the given control and a corresponding position container into the aggregation named 'positions'. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.addContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oOContent
 *         The content to add; if empty, nothing is inserted.
 * @param {object} 
 *         sOPos
 *         JSON-like object which defines the position of the child control in the layout. The object is expected to have one or more from the attribute set
 * top, bottom, left, right; each with a value of type sap.ui.core.CSSSize. If no object is given, the default is left=0px,right=0px

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Returns an array of the controls contained in the aggregated position containers (might be empty).
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.getContent
 * @function

 * @type sap.ui.core.Control[]
 * @public
 */


// Start of sap/ui/commons/layout/AbsoluteLayout.js


(function() {

//**** Overridden API Functions ****
	
sap.ui.commons.layout.AbsoluteLayout.prototype.setWidth = function(sWidth) {
	return setProp(this, "width", sWidth, "LYT_SIZE");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setHeight = function(sHeight) {
	return setProp(this, "height", sHeight, "LYT_SIZE");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setVerticalScrolling = function(oVerticalScrolling) {
	return setProp(this, "verticalScrolling", oVerticalScrolling, "LYT_SCROLL");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setHorizontalScrolling = function(oHorizontalScrolling) {
	return setProp(this, "horizontalScrolling", oHorizontalScrolling, "LYT_SCROLL");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.insertPosition = function(oPosition, iIndex) {
	var bHasDomRef = !!this.getDomRef();
	this.insertAggregation("positions", oPosition, iIndex, bHasDomRef);
	if(bHasDomRef && oPosition && oPosition.getControl()) {
		this.contentChanged(oPosition, "CTRL_ADD");
	}
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.addPosition = function(oPosition) {
	var bHasDomRef = !!this.getDomRef();
	this.addAggregation("positions", oPosition, bHasDomRef);
	if(bHasDomRef && oPosition && oPosition.getControl()) {
		this.contentChanged(oPosition, "CTRL_ADD");
	}
	return this;
};
	

sap.ui.commons.layout.AbsoluteLayout.prototype.removePosition = function(vPosition) {
	var bHasDomRef = !!this.getDomRef();
	var oRemovedPosition = this.removeAggregation("positions", vPosition, bHasDomRef);
	if(oRemovedPosition){
		cleanup([oRemovedPosition]);
		this.contentChanged(oRemovedPosition, "CTRL_REMOVE");
	}
	return oRemovedPosition;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllPositions = function() {
	cleanup(this.getPositions());
	var bHasDomRef = !!this.getDomRef();
	var aRemovedPositions = this.removeAllAggregation("positions", bHasDomRef);
	if(bHasDomRef) {
		this.contentChanged(aRemovedPositions, "CTRL_REMOVE_ALL");
	}
	return aRemovedPositions;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.destroyPositions = function() {
	cleanup(this.getPositions());
	var bHasDomRef = !!this.getDomRef();
	this.destroyAggregation("positions", bHasDomRef);
	if(bHasDomRef) {
		this.contentChanged(null, "CTRL_REMOVE_ALL");
	}
	return this;
};



//**** Additional API Functions ****

sap.ui.commons.layout.AbsoluteLayout.prototype.getContent = function() {
	var aControls = [];
	var aPositions = this.getPositions();
	for(var index=0; index<aPositions.length; index++) {
		aControls.push(aPositions[index].getControl());
	}
	return aControls;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.addContent = function(oContent, oPos) {
	var oPosition = sap.ui.commons.layout.PositionContainer.createPosition(oContent, oPos);
	this.addPosition(oPosition);
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.insertContent = function(oContent, iIndex, oPos) {
	var oPosition = sap.ui.commons.layout.PositionContainer.createPosition(oContent, oPos);
	this.insertPosition(oPosition, iIndex);
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeContent = function(vContent) {
	var iIndex = vContent;
	if (typeof(vContent) == "string") { // ID of the element is given
		vContent = sap.ui.getCore().byId(vContent);
	}
	if (typeof(vContent) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfContent(vContent);
	}
	if(iIndex >= 0 && iIndex < this.getContent().length) {
		this.removePosition(iIndex);
		return vContent;
	}
	return null;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllContent = function() {
	var aControls = this.getContent();
	this.removeAllPositions();
	return aControls;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.indexOfContent = function(oContent) {
	var aControls = this.getContent();
	for(var index=0; index<aControls.length; index++) {
		if(oContent === aControls[index]){
			return index;
		}
	}
	return -1;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.destroyContent = function() {
	this.destroyPositions();
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setPositionOfChild = function(oControl, oPos) {
	var iIdx = this.indexOfContent(oControl);
	if(iIdx >= 0){
		var oPosition = this.getPositions()[iIdx];
		oPosition.updatePosition(oPos);
		return true;
	}
	return false;
};



//**** Other Functions ****

/**
 * @see sap.ui.commons.layout.PositionContainer#getComputedPosition
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getPositionOfChild = function(oControl){
	var iIdx = this.indexOfContent(oControl);
	if(iIdx >= 0){
		//Adapt when width/height attribute on control is set
		var oPosition = this.getPositions()[iIdx];
		return oPosition.getComputedPosition();
	}
	return {};
};


/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.exit = function(){
	cleanup(this.getPositions());
};


/**
 * Called by the Renderer before the control is rendered.
 * Attention: Do not mix it up with onBeforeRendering!
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.doBeforeRendering = function() {
	var aPositions = this.getPositions();
	if(!aPositions || aPositions.length == 0) {
		return;
	}
	
	for(var index=0; index<aPositions.length; index++) {
		var oPosition = aPositions[index];
		oPosition.reinitializeEventHandlers(true);
		adaptChildControl(oPosition, true);
	}
};


/**
 * Called after the control is rendered.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.onAfterRendering = function() {
	var aPositions = this.getPositions();
	if(!aPositions || aPositions.length == 0) {
		return;
	}
	
	for(var index=0; index<aPositions.length; index++) {
		aPositions[index].reinitializeEventHandlers();
	}
};


/**
 * Cleanup modifications of the given control.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.cleanUpControl = function(oControl) {
	if(oControl && oControl[SAVED_DELEGATOR]){
		oControl.removeDelegate(oControl[SAVED_DELEGATOR]);
		oControl[SAVED_DELEGATOR] = undefined;
	}
};


/**
 * Handles changes on an aggregated position container when it is already in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.contentChanged = function(oPosition, sChangeType) {
	switch(sChangeType) {
		case "CTRL_POS":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oPosition);
			adaptChildControl(oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "CTRL_CHANGE":
			adaptChildControl(oPosition, true);
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl(oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "CTRL_REMOVE":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.removePosition(oPosition);
			oPosition.reinitializeEventHandlers(true);
			break;
		case "CTRL_REMOVE_ALL":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.removeAllPositions(this);
			var aPositions = oPosition;
			if(aPositions) {
				for(var index=0; index<aPositions.length; index++) {
					aPositions[index].reinitializeEventHandlers(true);
				}
			}
			break;
		case "CTRL_ADD":
			adaptChildControl(oPosition, true);
			sap.ui.commons.layout.AbsoluteLayoutRenderer.insertPosition(this, oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "LYT_SCROLL":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutScolling(this);
			break;
		case "LYT_SIZE":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutSize(this);
			break;
	}
};



//**** Private Helper Functions ****

//Constant which defines the "save location" for the used delegator object
var SAVED_DELEGATOR = "__absolutelayout__delegator";

/**
 * Cleanup modifications of all child controls of the given positions.
 *
 * @private
 */
var cleanup = function(aPositions) {
	for(var index=0; index<aPositions.length; index++) {
		var oPosition = aPositions[index];
		var oChildControl = oPosition.getControl();
		if(oChildControl) {
			sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oChildControl);
		}
	}
};


/**
 * (Re-)Initialize listening to child rerendering
 *
 * @private
 */
var adaptChildControl = function(oPosition, bRegisterOnly) {
	var oChildControl = oPosition.getControl();
	if(oChildControl) {
		sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oChildControl);
		
		if(!bRegisterOnly) {
			adaptControlSize(oChildControl);
		}
		
		var oDelegate = (function(oControl) {
			return {
				onAfterRendering: function(){
					adaptControlSize(oControl);
				}
			};
		}(oChildControl));
		
		oChildControl[SAVED_DELEGATOR] = oDelegate;
		oChildControl.addDelegate(oDelegate, true);
	}
};


/**
 * Adapt the sizes of controls if necessary.
 *
 * @private
 */
var adaptControlSize = function(oControl){
	var bAdapted = false;
	if(oControl.getParent() && oControl.getParent().getComputedPosition) {
		var oPos = oControl.getParent().getComputedPosition();
		if(oPos.top && oPos.bottom || oPos.height){
			jQuery(oControl.getDomRef()).height("100%");
			bAdapted = true;
		}
		if(oPos.left && oPos.right || oPos.width){
			jQuery(oControl.getDomRef()).width("100%");
			bAdapted = true;
		}
		if(bAdapted) {
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oControl.getParent());
		}
	}
	return bAdapted;
};


/**
 * Sets the value of the given property and triggers Dom change if
 * possible.
 *
 * @private
 */
var setProp = function(oThis, sProp, oValue, sChangeType) {
	var bHasDomRef = !!oThis.getDomRef();
	oThis.setProperty(sProp, oValue, bHasDomRef);
	if(bHasDomRef) {
		oThis.contentChanged(null, sChangeType);
	}
	return oThis;
};


}());
}; // end of sap.ui.commons.layout.AbsoluteLayout
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.BorderLayout.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new layout/BorderLayout.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>rtl : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>top : sap.ui.core.Element</li>
 * <li>begin : sap.ui.core.Element</li>
 * <li>center : sap.ui.core.Element</li>
 * <li>end : sap.ui.core.Element</li>
 * <li>bottom : sap.ui.core.Element</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A BorderLayout control based upon the JAVA border-layout.
 * With this layout you are able to divide your available space into 5 areas whose sizes can be defined.
 * The 5 areas are:
 * Top: Header;
 * Bottom: Footer;
 * Begin: left/right handed side panel;
 * Center: content area in the middle;
 * End: right/left handed side panel.
 * @extends sap.ui.core.Control
 *
 * @author Maximilian Naehrlich 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.layout.BorderLayout = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.layout.BorderLayout.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.layout.BorderLayout. 
 * Resulting metadata can be obtained via sap.ui.commons.layout.BorderLayout.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.layout.BorderLayout", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getRtl", "setRtl", "getWidth", "setWidth", "getHeight", "setHeight", 
    // aggregations
    "getTop", "setTop", "destroyTop", "getBegin", "setBegin", "destroyBegin", "getCenter", "setCenter", "destroyCenter", "getEnd", "setEnd", "destroyEnd", "getBottom", "setBottom", "destroyBottom", 
    // associations
    
    // events
    
    // methods
    "createArea", "setAreaData", "addContent", "insertContent", "removeContent", "removeAllContent", "getContent", "indexOfContent", "destroyContent", "getAreaData", "getAreaById"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "rtl" : {name : "rtl", type : "boolean", group : "Appearance", defaultValue : false},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
  },
  
  aggregations : {
    "top" : {name : "top", type : "sap.ui.core.Element", multiple : false}, 
    "begin" : {name : "begin", type : "sap.ui.core.Element", multiple : false}, 
    "center" : {name : "center", type : "sap.ui.core.Element", multiple : false}, 
    "end" : {name : "end", type : "sap.ui.core.Element", multiple : false}, 
    "bottom" : {name : "bottom", type : "sap.ui.core.Element", multiple : false}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>rtl</code>.
 * 
 * RTL will rotate the begin and end areas.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>rtl</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayout.prototype.getRtl = function() {
	return this.getProperty("rtl");
};

/**
 * Setter for property <code>rtl</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRtl  new value for property <code>rtl</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setRtl = function(bRtl) {
	this.setProperty("rtl", bRtl);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Defines the width of the BorderLayout
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayout.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * Defines the height of the BorderLayout
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.layout.BorderLayout.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};

	
/**
 * Getter for aggregation <code>top</code>.<br/>
 * Represents the top area
 * 
 * @return {sap.ui.core.Element}
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.getTop = function() {
	return this.getAggregation("top", null);
};


/**
 * Setter for the aggregated <code>top</code>.
 * @param oTop {sap.ui.core.Element}
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setTop = function(oTop) {
	this.setAggregation("top", oTop);
	return this;
};
	

/**
 * Destroys the top in the aggregation 
 * named <code>top</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.destroyTop = function() {
	this.destroyAggregation("top");
	return this;
};

	
/**
 * Getter for aggregation <code>begin</code>.<br/>
 * Represents the begin area
 * 
 * @return {sap.ui.core.Element}
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.getBegin = function() {
	return this.getAggregation("begin", null);
};


/**
 * Setter for the aggregated <code>begin</code>.
 * @param oBegin {sap.ui.core.Element}
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setBegin = function(oBegin) {
	this.setAggregation("begin", oBegin);
	return this;
};
	

/**
 * Destroys the begin in the aggregation 
 * named <code>begin</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.destroyBegin = function() {
	this.destroyAggregation("begin");
	return this;
};

	
/**
 * Getter for aggregation <code>center</code>.<br/>
 * Represents the center area
 * 
 * @return {sap.ui.core.Element}
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.getCenter = function() {
	return this.getAggregation("center", null);
};


/**
 * Setter for the aggregated <code>center</code>.
 * @param oCenter {sap.ui.core.Element}
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setCenter = function(oCenter) {
	this.setAggregation("center", oCenter);
	return this;
};
	

/**
 * Destroys the center in the aggregation 
 * named <code>center</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.destroyCenter = function() {
	this.destroyAggregation("center");
	return this;
};

	
/**
 * Getter for aggregation <code>end</code>.<br/>
 * Represents the end area
 * 
 * @return {sap.ui.core.Element}
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.getEnd = function() {
	return this.getAggregation("end", null);
};


/**
 * Setter for the aggregated <code>end</code>.
 * @param oEnd {sap.ui.core.Element}
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setEnd = function(oEnd) {
	this.setAggregation("end", oEnd);
	return this;
};
	

/**
 * Destroys the end in the aggregation 
 * named <code>end</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.destroyEnd = function() {
	this.destroyAggregation("end");
	return this;
};

	
/**
 * Getter for aggregation <code>bottom</code>.<br/>
 * Represents the bottom area
 * 
 * @return {sap.ui.core.Element}
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.getBottom = function() {
	return this.getAggregation("bottom", null);
};


/**
 * Setter for the aggregated <code>bottom</code>.
 * @param oBottom {sap.ui.core.Element}
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.setBottom = function(oBottom) {
	this.setAggregation("bottom", oBottom);
	return this;
};
	

/**
 * Destroys the bottom in the aggregation 
 * named <code>bottom</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.BorderLayout.prototype.destroyBottom = function() {
	this.destroyAggregation("bottom");
	return this;
};


/**
 * Creates the specified area and adds the given controls to it. Returns the created area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.createArea
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies which area will be created. If the area has already been created, nothing is done.
 * @param {sap.ui.core.Control} 
 *         oControls
 *         n Controls can be submitted to be added to the new created area. Each control is submitted as one argument.

 * @type sap.ui.core.Element
 * @public
 */


/**
 * Set the properties of the specified area with the given values.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.setAreaData
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose properties will be set.
 * @param {object} 
 *         sData
 *         JSON-like object that contains the values to be set.

 * @type void
 * @public
 */


/**
 * Adds controls to the specified area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.addContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area where controls will be added.
 * @param {sap.ui.core.Control} 
 *         oControls
 *         n Controls can be submitted to be added. Each control is submitted as one argument.

 * @type void
 * @public
 */


/**
 * Inserts controls to an area at a given index.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.insertContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area where controls will be inserted.
 * @param {int} 
 *         iIndex
 *         Specifies the index where controls will be added. For a negative value of iIndex, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position.
 * @param {sap.ui.core.Control} 
 *         oControl
 *         n Controls can be submitted to be added. Each control is submitted as one argument.

 * @type void
 * @public
 */


/**
 * Removes the content with the given index from an area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.removeContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose content will be removed.
 * @param {int} 
 *         iIndex
 *         Specifies the index of the control that will be removed.

 * @type void
 * @public
 */


/**
 * Removes all content from an area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.removeAllContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose content will be removed.

 * @type void
 * @public
 */


/**
 * Returns all controls inside the specified area inside an array.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose content controls will be returned.

 * @type object
 * @public
 */


/**
 * Determines the index of a given content control.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.indexOfContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area that will be searched.
 * @param {sap.ui.core.Control} 
 *         oContent
 *         Specifies the control whose index will be searched.

 * @type int
 * @public
 */


/**
 * Destroys the content of the specified area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.destroyContent
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose content will be destroyed.

 * @type void
 * @public
 */


/**
 * Returns a JSON like object that contains all properties values of the requested area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getAreaData
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose data will be returned.

 * @type object
 * @public
 */


/**
 * Returns the object of the specified area. If the area does not exist, the area will be created and returned.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getAreaById
 * @function
 * @param {string} 
 *         sAreaId
 *         Specifies the area whose object will be returned.

 * @type sap.ui.core.Element
 * @public
 */


// Start of sap/ui/commons/layout/BorderLayout.js
/**
 * This file defines behavior for the control,
 */
sap.ui.commons.layout.BorderLayout.prototype.init = function(){
   // do something for initialization...

};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.createArea = function()
{
	// FIXME getAreaById() down below assumes that this method returns the created area, but it doesn't
	var top = sap.ui.commons.layout.BorderLayoutAreaTypes.top;
	var begin = sap.ui.commons.layout.BorderLayoutAreaTypes.begin;
	var center = sap.ui.commons.layout.BorderLayoutAreaTypes.center;
	var end = sap.ui.commons.layout.BorderLayoutAreaTypes.end;
	var bottom = sap.ui.commons.layout.BorderLayoutAreaTypes.bottom;

	if(arguments[0] != top && arguments[0] != begin && arguments[0] != center && arguments[0] != end && arguments[0] != bottom ){
		return;
	}


	/*if(arguments[0] != "top" && arguments[0] != "begin" && arguments[0] != "center" && arguments[0] != "end" && arguments[0] != "bottom" ){
		return;
	}*/

	var oArea = new sap.ui.commons.layout.BorderLayoutArea(this.getId()+arguments[0]);
	oArea.setAreaId(arguments[0]);

//if the expected area has already been created, nothing is done
	switch(arguments[0])
	{
	case top:		if(this.getTop()){
						return
					}
					this.setTop(oArea);
					break;
	case begin:	if(this.getBegin()){
						return;
					}
					this.setBegin(oArea);
					break;
	case center:	if(this.getCenter()){
						return;
					}
					this.setCenter(oArea);
					break;
	case end:		if(this.getEnd()){
						return;
					}
					this.setEnd(oArea);
					break;
	case bottom:	if(this.getBottom()){
						return;
					}
					this.setBottom(oArea);
					break;
	}



	for( var i = 1 ; i < arguments.length ; i++){
		var oContent = arguments[i];
		oArea.addContent(oContent);
	}

	return oArea;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.setAreaData = function(sAreaId, oData)
{
	var oArea = this.getAreaById(sAreaId);

	if(!oArea){
		return this;
	}

	if(oArea){
		if(oData.size != null)
		{
			oArea.setSize(oData.size);
		}
		if(oData.visible != null)
		{
			oArea.setVisible(oData.visible);
		}
		if(oData.overflowX != null)
		{
			oArea.setOverflowX(oData.overflowX);
		}
		if(oData.overflowY != null)
		{
			oArea.setOverflowY(oData.overflowY);
		}
		if(oData.contentAlign != null)
		{
			oArea.setContentAlign(oData.contentAlign);
		}
	}
	return this;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.addContent = function()
{
	//arguments[0] -> areaID
	//arguments[>0] -> controls
	var oArea = this.getAreaById(arguments[0]);

	/*if(!oArea){
		this.createArea(arguments[0]);
		oArea = this.getAreaById(arguments[0]);
	}*/

	for(var i=1;i<=arguments.length-1;i++){
		oArea.addContent(arguments[i]);
	}
	return this;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.insertContent = function()//obsolete
{
	//arguments[0] -> areaID
	//arguments[1] -> index
	//arguments[>1] -> controls
	var oArea = this.getAreaById(arguments[0]);
	var indexCnt = arguments[1];

	for(var i=2;i<=arguments.length-1;i++){
		oArea.insertContent(arguments[i], indexCnt);
		indexCnt++;
	}
	return this;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.removeContent = function(sAreaId, vElement)
{
	var oArea = this.getAreaById(sAreaId);
	oArea.removeContent(vElement);
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.removeAllContent = function(sAreaId)
{
	var oArea = this.getAreaById(sAreaId);
	oArea.removeAllContent();
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.getContent = function(sAreaId)
{
	var oArea = this.getAreaById(sAreaId);

	return oArea.getContent();
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.indexOfContent = function(sAreaId, oContent)
{
	var oArea = this.getAreaById(sAreaId);
	return oArea.indexOfContent(oContent);
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.destroyContent = function(sAreaId)
{
	var oArea = this.getAreaById(sAreaId);
	oArea.destroyContent();
	return this;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.getAreaData = function(sAreaId)
{
	var oArea = this.getAreaById(sAreaId);

	if(!oArea){
		return;
	}

	var oData = {};
	oData.size			= oArea.getSize();
	oData.visible		= oArea.getVisible();
	oData.overflowX		= oArea.getOverflowX();
	oData.overflowY		= oArea.getOverflowY();
	oData.contentAlign	= oArea.getContentAlign();
	return oData;
};
// -------------------------------------------------------------------------------------------------------------
sap.ui.commons.layout.BorderLayout.prototype.getAreaById = function(sAreaId)
{
	var oArea;

	switch(sAreaId)
	{
	case sap.ui.commons.layout.BorderLayoutAreaTypes.top	:	oArea = this.getTop();
																break;
	case sap.ui.commons.layout.BorderLayoutAreaTypes.begin	:	oArea = this.getBegin();
																break;
	case sap.ui.commons.layout.BorderLayoutAreaTypes.center	:	oArea = this.getCenter();
																break;
	case sap.ui.commons.layout.BorderLayoutAreaTypes.end	:	oArea = this.getEnd();
																break;
	case sap.ui.commons.layout.BorderLayoutAreaTypes.bottom	:	oArea = this.getBottom();
																break;
	}

	if(!oArea){
		oArea = this.createArea(arguments[0]);
	}

	return oArea;
};
// -------------------------------------------------------------------------------------------------------------
}; // end of sap.ui.commons.layout.BorderLayout
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.HorizontalLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.layout.HorizontalLayoutRenderer");

/**
 * @class HorizontalLayout renderer. 
 * @static
 */
sap.ui.commons.layout.HorizontalLayoutRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.xRenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.layout.HorizontalLayoutRenderer.render = function(oRenderManager, oControl){
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	// convenience variable
	var rm = oRenderManager;
	var bNoWrap = !oControl.getAllowWrapping();

	// write the HTML into the render manager  
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiHLayout");
	if (bNoWrap) {
		rm.addClass("sapUiHLayoutNoWrap");
	}
	rm.writeClasses(); 
	rm.write(">"); // div element

	var aChildren = oControl.getContent();
	for (var i = 0; i < aChildren.length; i++) {
		if (bNoWrap) {
			rm.write("<div class='sapUiHLayoutChildWrapper'>");
		}
		rm.renderControl(aChildren[i]);
		if (bNoWrap) {
			rm.write("</div>");
		}
	}

	rm.write("</div>");
};

}; // end of sap.ui.commons.layout.HorizontalLayoutRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.VerticalLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.layout.VerticalLayout
jQuery.sap.declare("sap.ui.commons.layout.VerticalLayoutRenderer");

/**
 * @class layout/VerticalLayout renderer.
 * @static
 */
sap.ui.commons.layout.VerticalLayoutRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.layout.VerticalLayoutRenderer.render = function(oRenderManager, oVerticalLayout){
	// convenience variable
	var rm = oRenderManager;
	
	// return immediately if control is invisible
	if (!oVerticalLayout.getVisible()) {
		return;
	}

	// write the HTML into the render manager
	rm.write("<DIV");
	rm.writeControlData(oVerticalLayout);
	rm.addClass("sapuiVlt");

	if(oVerticalLayout.getWidth() && oVerticalLayout.getWidth() != ''){
		rm.addStyle("width", oVerticalLayout.getWidth());
	}
	rm.addStyle("display", "inline-block");
	rm.addStyle("overflow", "hidden");
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">"); // DIV element

	// render content
	var aContent = oVerticalLayout.getContent();

	for ( var i = 0; i < aContent.length; i++) {
		rm.write("<DIV class=\"sapuiVltCell\">");
		rm.renderControl(aContent[i]);
		rm.write("</DIV>");
	}

	rm.write("</DIV>");
};
}; // end of sap.ui.commons.layout.VerticalLayoutRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.layout.MatrixLayout
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutRenderer");

/**
 * @class MatrixLayout renderer.
 *
 * @author d029921
 * @static
 */
sap.ui.commons.layout.MatrixLayoutRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer.
 * @param {sap.ui.core.Control} oMatrixLayout an object representation of the control that should be rendered
 */
sap.ui.commons.layout.MatrixLayoutRenderer.render = function(oRenderManager, oMatrixLayout) {

	// some convenience variables.
	var rm = oRenderManager;
	var r = sap.ui.commons.layout.MatrixLayoutRenderer;

	// return immediately if control is invisible
	if ( !oMatrixLayout.getVisible() ) {
		return;
	}

	var bRTL = sap.ui.getCore().getConfiguration().getRTL();

	//ARIA
	rm.write("<TABLE role=\"presentation\"");
	rm.writeControlData(oMatrixLayout);
	rm.write(" cellpadding=\"0\" cellspacing=\"0\"");
	rm.addStyle("border-collapse", "collapse");

	if(oMatrixLayout.getWidth() && oMatrixLayout.getWidth() != ''){
		rm.addStyle("width", oMatrixLayout.getWidth());
	}

	if(oMatrixLayout.getHeight() && oMatrixLayout.getHeight() != ''){
		rm.addStyle("height", oMatrixLayout.getHeight());
		// get value and unit of Layout height (to determine row heights if given in %)
		var oMatrixHeight = r.getValueUnit( oMatrixLayout.getHeight() );
	}

	if(oMatrixLayout.getLayoutFixed()){
		// table layout is fixed
		rm.addStyle("table-layout", "fixed");
		if(!oMatrixLayout.getWidth() || oMatrixLayout.getWidth() == ''){
			rm.addStyle("width", "100%");
		}
	}

	rm.addClass("sapUiMlt");
	rm.writeStyles();
	rm.writeClasses();

	// close table-start-tag
	rm.write('>')
;
	var aRows = oMatrixLayout.getRows();
	var iCols = oMatrixLayout.getColumns();
	if(iCols < 1){
		// determine number of columns
		for (var i = 0; i < aRows.length; i++) {
			var oMatrixLayoutRow = aRows[i];
			var aCells = oMatrixLayoutRow.getCells();
			if( iCols < aCells.length){
				iCols = aCells.length;
			}
		}
	}

	// create columns
	if(iCols > 0){
		var aWidths = oMatrixLayout.getWidths();
		rm.write("<colgroup>");
		for (var j = 0; j < iCols; j++) {
			rm.write("<col");
			if(aWidths && aWidths[j] && aWidths[j] != "auto"){
				rm.addStyle('width', aWidths[j]); // use style because col width in HTML supports only be px or %
				rm.writeStyles();
			}
			rm.write("/>");
		}
		rm.write("</colgroup>");
	}

	rm.write('<TBODY style="width: 100%; height: 100%">');

	// for each row
	for (var i = 0; i < aRows.length; i++) {
		var oMatrixLayoutRow = aRows[i];
		rm.write("<tr");
		rm.writeElementData(oMatrixLayoutRow);
		rm.writeClasses(oMatrixLayoutRow);
		rm.write(">");

		// get value and unit of Row height (to determine row heights if given in %)
		var sRowHeight = false;
		if (oMatrixLayoutRow.getHeight()){
			sRowHeight = oMatrixLayoutRow.getHeight();
		}
		if (oMatrixLayoutRow.getHeight() && oMatrixLayoutRow.getHeight() != "" && oMatrixHeight) {
			var oRowHeight = r.getValueUnit( oMatrixLayoutRow.getHeight() );
			if( oRowHeight.Unit == '%' && oMatrixHeight.Unit != '%'){
				// Matrix has fix height and Row % -> calculate Row height to fix value
				sRowHeight = ( oMatrixHeight.Value * oRowHeight.Value / 100 ) + oMatrixHeight.Unit;
			}
		}

		// for each cell
		var aCells = oMatrixLayoutRow.getCells();

		var iColumns = iCols;
		if(iCols < 1){
			// render only defined cells
			iColumns = aCells.length;
		}

		var iColSpans = 0;
		if(!oMatrixLayoutRow.RowSpanCells){
			oMatrixLayoutRow.RowSpanCells = 0;
		}

		for (var j = 0; j < iColumns; j++) {
			if(j >= (iColumns - iColSpans - oMatrixLayoutRow.RowSpanCells)){
			// no more cells because of Colspan
				break;
			}

			var oMatrixLayoutCell = aCells[j];

			rm.write("<td");

			if (sRowHeight && sRowHeight != "" && ( !oMatrixLayoutCell || oMatrixLayoutCell.getRowSpan() == 1 )) {
				// set height only if cell has no rowspan or is not specified
				rm.addStyle("height", sRowHeight);
			}

			if(oMatrixLayoutCell){
				// if empty cell only render empty TD
				rm.writeElementData(oMatrixLayoutCell);	// TODO writes also the ID of all elements (cells) - is this really required??

				if(oMatrixLayout.getLayoutFixed() && oMatrixLayoutCell.getContent().length > 0){
					// table layout is fixed
					rm.addStyle("overflow", "hidden");
					rm.addStyle("text-overflow", "ellipsis");
				}

				var sHAlign = r.getHAlign(oMatrixLayoutCell.getHAlign(), bRTL);
				if (sHAlign) {
					rm.writeAttribute("align", sHAlign);
				}
				var sVAlign = r.getVAlign(oMatrixLayoutCell.getVAlign());
				if (sVAlign && sVAlign != "middle") { //middle is default, not needed
					rm.writeAttribute("valign", sVAlign);
				}
				if (oMatrixLayoutCell.getColSpan() != 1) {
					rm.writeAttribute("colspan", oMatrixLayoutCell.getColSpan());
					iColSpans = iColSpans + oMatrixLayoutCell.getColSpan() - 1;
				}
				if (oMatrixLayoutCell.getRowSpan() != 1) {
					rm.writeAttribute("rowspan", oMatrixLayoutCell.getRowSpan());

					// summarize height of all used rows
					var fValue = 0;
					var sUnit = "";
					for (var x = 0; x < oMatrixLayoutCell.getRowSpan(); x++) {
						var oRow = aRows[i+x];

						if(!oRow){
							sUnit = false;
							break;
						}

						if(!oRow.RowSpanCells){
							oRow.RowSpanCells = 0;
						}

						if(x > 0){
							// add number of cells with rowspan to following rows to not render additional cells
							oRow.RowSpanCells = oRow.RowSpanCells + oMatrixLayoutCell.getColSpan();
						}
						if(!oRow.getHeight() || oRow.getHeight() == ""){
							//no height defined for one row -> no summarize possible
							sUnit = false;
							//break;
						}else{
							var oHeight = r.getValueUnit( oRow.getHeight() );
							if(sUnit == ""){
								sUnit = oHeight.Unit;
							}else{
								if(sUnit != oHeight.Unit){
									//different unit -> no summarize possible
									sUnit = false;
									//break;
								}
							}
							fValue = fValue + oHeight.Value;
						}
					}
					if(sUnit != false){
						var sSpanHeight = fValue + sUnit;
						rm.addStyle("height", sSpanHeight);
					}
				}

				// set CSS class for appropriate background
				rm.addClass(r.getBackgroundClass(oMatrixLayoutCell.getBackgroundDesign()));

				// set CSS class for appropriate separator
				rm.addClass(r.getSeparationClass(oMatrixLayoutCell.getSeparation()));

				if(!oMatrixLayout.getLayoutFixed() || !oMatrixLayoutRow.getHeight()){
					// set CSS class for appropriate padding
					rm.addClass(r.getPaddingClass(oMatrixLayoutCell.getPadding()));

					rm.addClass("sapUiMltCell");
				}


				else{
					rm.addStyle("white-space", "nowrap");
				}


				rm.writeClasses(oMatrixLayoutCell);
			}
			rm.writeStyles();

			// close td-start-tag
			rm.write(">");

			if(oMatrixLayoutCell){
				// if empty cell only render empty TD

				if(oMatrixLayout.getLayoutFixed() && oMatrixLayoutRow.getHeight()){
					// table layout is fixed
					// in case of defined height some DIVs are needed.
					// 1. one DIV to define height
					// 2. DIV to set vertical alignment
					// 3. DIV inside 2. DIV to set paddings for control inside.
					rm.write('<div');

					if( oMatrixLayoutCell.getRowSpan() != 1 && sSpanHeight && sSpanHeight.search('%') == -1){
						rm.addStyle("height", sSpanHeight);
					}else if(sRowHeight.search('%') != -1 || (oMatrixLayoutCell.getRowSpan() != 1 && !sSpanHeight)){
						rm.addStyle("height", '100%');
					}else{
						rm.addStyle("height", sRowHeight);
					}

					rm.addStyle("display", "inline-block");
					if (sVAlign) {
						rm.addStyle("vertical-align", sVAlign);
					}
					rm.writeStyles();
					rm.writeClasses(false);
					rm.write("></div>");
					rm.write('<div');
					rm.addStyle("display", "inline-block");
					if (sVAlign) {
						rm.addStyle("vertical-align", sVAlign);
					}
					if( oMatrixLayoutCell.getRowSpan() != 1 && sSpanHeight && sSpanHeight.search('%') == -1){
						rm.addStyle("max-height", sSpanHeight);
					}else if(sRowHeight.search('%') != -1 || (oMatrixLayoutCell.getRowSpan() != 1 && !sSpanHeight)){
						rm.addStyle("max-height", '100%');
					}else{
						rm.addStyle("max-height", sRowHeight);
					}
					/* determine height of content (if its a property there)
					   and set it to DIV (if possible) */
					var sContentHeight;
					var sDivHeight = "0";
					var sDivUnit = "";
					var sInnerDivHeight = "0";
					var aContentControls = oMatrixLayoutCell.getContent();
					for (var index = 0, length = aContentControls.length; index < length; index++) {
						if(aContentControls[index].getHeight && aContentControls[index].getHeight() !=""){
							// check unit
							var oControlHeight = r.getValueUnit( aContentControls[index].getHeight() );
							if(sDivUnit == ""){
								sDivUnit = oControlHeight.Unit;
							}
							if(sDivUnit != oControlHeight.Unit){
								// different units in content controls not allowed -> use 100%
								sDivUnit = "%";
								sDivHeight = "100";
								break;
							}
							if(oControlHeight.Unit == "%"){
								// give %-height to outer DIV but the reverse %-height to the inner DIV
								// -> height of the content is right
								if(parseFloat(sDivHeight) < parseFloat(oControlHeight.Value)){
									sDivHeight = oControlHeight.Value;
									if(sDivHeight != "100"){
										sInnerDivHeight = 10000 / parseFloat(sDivHeight);
									}
								}
							}// for fix units no calculation needed -DIVs get the size automatically
						}
					}
					if(sDivHeight != "0"){
						rm.addStyle("height", sDivHeight+sDivUnit);
					}
					rm.addStyle("white-space", "normal");
					rm.addStyle("width", "100%");
					rm.writeStyles();
					rm.writeClasses(false);

					rm.write("><div");
					rm.addStyle("overflow", "hidden");
					rm.addStyle("text-overflow", "inherit");
					if(sDivHeight != "0"){
						if(sInnerDivHeight != "0"){
							rm.addStyle("height", sInnerDivHeight + "%");
						}else{
							rm.addStyle("height", "100%");
						}
					}
					rm.addClass("sapUiMltCell");

					// set CSS class for appropriate padding
					rm.addClass(r.getPaddingClass(oMatrixLayoutCell.getPadding()));

					rm.writeStyles();
					rm.writeClasses(false);
					rm.write(">"); // DIV
				}
				var aContentControls = oMatrixLayoutCell.getContent();
				for (var index = 0, length = aContentControls.length; index < length; index++) {
					oRenderManager.renderControl(aContentControls[index]);
				}
				if(oMatrixLayout.getLayoutFixed() && oMatrixLayoutRow.getHeight()){
					// table layout is fixed
					rm.write("</div></div>");
				}
			}

			// close cell
			rm.write("</td>");
		}

		// close row
		rm.write("</tr>");

		// initialize RowSpanCounter after Row is rendered
		oMatrixLayoutRow.RowSpanCells = undefined;
	} // end of rows-rendering

	// close tbody, close table
	rm.write("</TBODY></TABLE>");

};

/**
 * Returns the value for the HTML "align" attribute according to the given
 * horizontal alignment and RTL mode, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign
 * @param {boolean} bRTL
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getHAlign = function(oHAlign, bRTL) {
  switch (oHAlign) {
	case sap.ui.commons.layout.HAlign.Begin:
	  return null; // this is the HTML default

	case sap.ui.commons.layout.HAlign.Center:
	  return "center";

	case sap.ui.commons.layout.HAlign.End:
	  return bRTL ? "left" : "right";

	case sap.ui.commons.layout.HAlign.Left:
	  return bRTL ? "left" : null;

	case sap.ui.commons.layout.HAlign.Right:
	  return bRTL ? null : "right";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getHAlign: oHAlign must be a known value");
  return null;
};

/**
 * Returns the value for the HTML "valign" attribute according to the given
 * vertical alignment, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.VAlign} oVAlign
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getVAlign = function(oVAlign) {
  switch (oVAlign) {
	case sap.ui.commons.layout.VAlign.Bottom:
	  return "bottom";

	case sap.ui.commons.layout.VAlign.Middle:
		return "middle";
	case sap.ui.commons.layout.VAlign.Top:
	  return "top";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getVAlign: oVAlign must be a known value");
  return null;
};

/**
 * Returns the class name according to the given background design or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.BackgroundDesign} oBackgroundDesign
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getBackgroundClass = function(oBackgroundDesign) {
  switch (oBackgroundDesign) {
	case sap.ui.commons.layout.BackgroundDesign.Border:
	  return "sapUiMltBgBorder";

	case sap.ui.commons.layout.BackgroundDesign.Fill1:
	  return "sapUiMltBgFill1";

	case sap.ui.commons.layout.BackgroundDesign.Fill2:
	  return "sapUiMltBgFill2";

	case sap.ui.commons.layout.BackgroundDesign.Fill3:
	  return "sapUiMltBgFill3";

	case sap.ui.commons.layout.BackgroundDesign.Header:
	  return "sapUiMltBgHeader";

	case sap.ui.commons.layout.BackgroundDesign.Plain:
	  return "sapUiMltBgPlain";

	case sap.ui.commons.layout.BackgroundDesign.Transparent:
	  return null;
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getBackgroundClass: oBackgroundDesign must be a known value");
  return null;
};

/**
 * Returns the class name according to the given padding or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.Padding} oPadding
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getPaddingClass = function(oPadding) {
  switch (oPadding) {
	case sap.ui.commons.layout.Padding.None:
	  return "sapUiMltPadNone";

	case sap.ui.commons.layout.Padding.Begin:
	  return "sapUiMltPadLeft"; //TODO OK with RTL?

	case sap.ui.commons.layout.Padding.End:
	  return "sapUiMltPadRight"; //TODO OK with RTL?

	case sap.ui.commons.layout.Padding.Both:
	  return "sapUiMltPadBoth";

	case sap.ui.commons.layout.Padding.Neither:
	  return "sapUiMltPadNeither";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getPaddingClass: oPadding must be a known value");
  return null;
};

/**
 * Returns the class name according to the given separation or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.Separation} oSeparation
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getSeparationClass = function(oSeparation) {
  switch (oSeparation) {
	case sap.ui.commons.layout.Separation.None:
	  return null;

	case sap.ui.commons.layout.Separation.Small:
	  return "sapUiMltSepS";

	case sap.ui.commons.layout.Separation.SmallWithLine:
	  return "sapUiMltSepSWL";

	case sap.ui.commons.layout.Separation.Medium:
	  return "sapUiMltSepM";

	case sap.ui.commons.layout.Separation.MediumWithLine:
	  return "sapUiMltSepMWL";

	case sap.ui.commons.layout.Separation.Large:
	  return "sapUiMltSepL";

	case sap.ui.commons.layout.Separation.LargeWithLine:
	  return "sapUiMltSepLWL";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getSeparationClass: oSeparation must be a known value");
  return null;
};

/**
 * get Value and Unit for size
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getValueUnit = function(sSize) {

	var fValue = 0;
	var sUnit = "";

	var iPos = sSize.search('px');
	if(iPos > -1){
		sUnit = "px";
		fValue = parseInt(sSize.slice(0,iPos), 10);
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('pt');
	if(iPos > -1){
		sUnit = "pt";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('in');
	if(iPos > -1){
		sUnit = "in";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('mm');
	if(iPos > -1){
		sUnit = "mm";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('cm');
	if(iPos > -1){
		sUnit = "cm";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('em');
	if(iPos > -1){
		sUnit = "em";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('ex');
	if(iPos > -1){
		sUnit = "ex";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('%');
	if(iPos > -1){
		sUnit = "%";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

}
}; // end of sap.ui.commons.layout.MatrixLayoutRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.layout.BorderLayout
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutRenderer");

/**
 * @class BorderLayout renderer.
 * @static
 */
sap.ui.commons.layout.BorderLayoutRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.layout.BorderLayoutRenderer.render = function(oRenderManager, oControl){

	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager

	// open the outer HTML tag
	rm.write("<div");
	// let control data be written so that connection to SAPUI5 eventing gets established
	rm.writeControlData(oControl);

	rm.writeAttribute("id", oControl.getId());
	rm.addClass("sapUiBorderLayout");
	rm.writeClasses();

	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.writeStyles();

	// don't forget to close the HTML tag
	rm.write(">");

/* Rendering with Elements */
//Some initial ToDos:
//----------------------------------------------------------------------------------------------------------------------------------------
	var aAreaSizes = [];
	var bRtl = oControl.getRtl();

	var sCssClassBegin = "sapUiBorderLayoutLeft";
	var sCssClassEnd = "sapUiBorderLayoutRight";
//Determine with which CSS class begin and end are ought to be rendered depending on RTL property
	if(bRtl){
		sCssClassBegin = "sapUiBorderLayoutRight";
		sCssClassEnd = "sapUiBorderLayoutLeft";
	}

//Prepare Top
	var oTop = oControl.getTop();
	aAreaSizes.top = sap.ui.commons.layout.BorderLayoutRenderer.determineAreaSize(oTop);
//Prepare Begin
	var oBegin = oControl.getBegin();
	aAreaSizes.begin = sap.ui.commons.layout.BorderLayoutRenderer.determineAreaSize(oBegin);
//Prepare Center (center has no explicit size)
	var oCenter = oControl.getCenter();
//prepare End
	var oEnd = oControl.getEnd();
	aAreaSizes.end = sap.ui.commons.layout.BorderLayoutRenderer.determineAreaSize(oEnd);
//Prepare Bottom
	var oBottom = oControl.getBottom();
	aAreaSizes.bottom = sap.ui.commons.layout.BorderLayoutRenderer.determineAreaSize(oBottom);

//Rendering
//write Top
//----------------------------------------------------------------------------------------------------------------------------------------
	if(oTop/* && oTop.getVisible()*/){
		sap.ui.commons.layout.BorderLayoutRenderer.renderArea( rm, oTop , oControl , "top" , "sapUiBorderLayoutTop", aAreaSizes);
	}

//write begin on left handed side case that RTL=false or right handed side in case that RTL=true
//----------------------------------------------------------------------------------------------------------------------------------------
	if(oBegin/* && oBegin.getVisible()*/){
		sap.ui.commons.layout.BorderLayoutRenderer.renderArea( rm, oBegin , oControl , "begin" , sCssClassBegin, aAreaSizes);
	}

//write center
//----------------------------------------------------------------------------------------------------------------------------------------
	if(oCenter && oCenter.getVisible()){
		sap.ui.commons.layout.BorderLayoutRenderer.renderArea( rm, oCenter , oControl , "center" , "sapUiBorderLayoutCenter", aAreaSizes);
	}

//write end on right handed side in case that RTL=false or on left handed side in case that RTL=true
//----------------------------------------------------------------------------------------------------------------------------------------
	if(oEnd/* && oEnd.getVisible()*/){
		sap.ui.commons.layout.BorderLayoutRenderer.renderArea( rm, oEnd , oControl , "end" , sCssClassEnd, aAreaSizes);
	}

//write bottom
//----------------------------------------------------------------------------------------------------------------------------------------
	if(oBottom/* && oBottom.getVisible()*/)
	{
		sap.ui.commons.layout.BorderLayoutRenderer.renderArea( rm, oBottom , oControl , "bottom" , "sapUiBorderLayoutBottom", aAreaSizes);
	}

//close surrounding div
//----------------------------------------------------------------------------------------------------------------------------------------
	rm.write("</div>");
};

sap.ui.commons.layout.BorderLayoutRenderer.determineAreaSize = function(oArea)
{
	if(oArea && oArea.getVisible()){
		return oArea.getSize();
	}else{
		return "0";
	}
};

sap.ui.commons.layout.BorderLayoutRenderer.renderArea = function(oRenderManager, oArea, oBorderLayout, sAreaId, sClass, aAreaSizes){
	var rm = oRenderManager;
	var sAreaSize		= aAreaSizes[sAreaId];
	var aAreaControls	= oArea.getContent();
	var aAreaStyleValue = "";
	var length			= aAreaControls.length;


	rm.write("<div");
	rm.writeAttribute("id", oBorderLayout.getId()+ sAreaId.toUpperCase());
	rm.addClass(sClass);
	rm.writeClasses();

	//build the style attribute for the corresponding area
	switch(sAreaId)
	{
		case "top":
		case "bottom":	aAreaStyleValue = "height:"+sAreaSize+";";
						break;
		case "begin":
		case "end":		aAreaStyleValue = "width:"+sAreaSize+"; top:"+aAreaSizes.top+"; bottom:"+aAreaSizes.bottom+";";
						break;
		case "center":	if(!oBorderLayout.getRtl()){
							aAreaStyleValue = "top:"+aAreaSizes.top+"; right:"+aAreaSizes.end+"; bottom:"+aAreaSizes.bottom+"; left:"+aAreaSizes.begin+"; ";
						} else {
							aAreaStyleValue = "top:"+aAreaSizes.top+"; left:"+aAreaSizes.end+"; bottom:"+aAreaSizes.bottom+"; right:"+aAreaSizes.begin+"; ";
						}
						break;
	}

	//add overflow definition to the style-attribute value
	aAreaStyleValue = aAreaStyleValue + " overflow-x: " + oArea.getOverflowX() + ";" + "overflow-y:" + oArea.getOverflowY() + ";";
	rm.writeAttributeEscaped("style", aAreaStyleValue);
	//write alignment
	rm.writeAttributeEscaped("align", oArea.getContentAlign());
	rm.write(">");

	//render the controls
	for(var i=0;i<length;i++)
	{
		rm.renderControl(aAreaControls[i]);
	}

	rm.write("</div>");

};
}; // end of sap.ui.commons.layout.BorderLayoutRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToggleButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ToggleButton.
jQuery.sap.declare("sap.ui.commons.ToggleButton");



/**
 * Constructor for a new ToggleButton.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>pressed : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.Button#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The ToggleButton Control is a Button that can be toggled between pressed and normal state
 * @extends sap.ui.commons.Button
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.2. 
 * do not use yet
 */
sap.ui.commons.ToggleButton = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'ToggleButton'.");
	sap.ui.commons.Button.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ToggleButton.prototype = jQuery.sap.newObject(sap.ui.commons.Button.prototype);

/*
 * Describe the sap.ui.commons.ToggleButton. 
 * Resulting metadata can be obtained via sap.ui.commons.ToggleButton.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ToggleButton", {

  // ---- object ----
  baseType : "sap.ui.commons.Button",
  publicMethods : [
    // properties 
    "getPressed", "setPressed"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "pressed" : {name : "pressed", type : "boolean", group : "Data", defaultValue : false}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>pressed</code>.
 * true when button is pressed down.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pressed</code>
 * @public
 * 
 * @deprecated Since version 1.1.2. 
 * do not use yet
 */
sap.ui.commons.ToggleButton.prototype.getPressed = function() {
	jQuery.sap.log.warning("Using deprecated property 'pressed'.");
	return this.getProperty("pressed");
};

/**
 * Setter for property <code>pressed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPressed  new value for property <code>pressed</code>
 * @return {sap.ui.commons.ToggleButton} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.1.2. 
 * do not use yet
 */
sap.ui.commons.ToggleButton.prototype.setPressed = function(bPressed) {
	jQuery.sap.log.warning("Using deprecated property 'pressed'.");
	this.setProperty("pressed", bPressed);
	return this;
};


// Start of sap/ui/commons/ToggleButton.js
/**
 * Function is called when ToggleButton is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.ToggleButton.prototype.onclick = function(oEvent) {
	if (this.getEnabled()){
		this.setPressed(!this.getPressed());
		this.firePress({pressed: this.getPressed()});
	}
	oEvent.preventDefault();
	oEvent.stopPropagation();
};


sap.ui.commons.ToggleButton.prototype.setPressed = function(bPressed) {
	if (!bPressed){
		this.getRenderer().ondeactivePressed(this);
	} else {
		this.getRenderer().onactivePressed(this);
	}
	this.setProperty("pressed", bPressed, true);
	return this;
}; 
}; // end of sap.ui.commons.ToggleButton
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextArea.
jQuery.sap.declare("sap.ui.commons.TextArea");



/**
 * Constructor for a new TextArea.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>cols : int</li>
 * <li>rows : int</li>
 * <li>wrapping : sap.ui.core.Wrapping</li>
 * <li>cursorPos : int</li>
 * <li>explanation : string</li>
 * <li>labeledBy : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.TextField#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Control to enter or display multible row text.
 * @extends sap.ui.commons.TextField
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.TextArea = function (sId, mSettings) {
	sap.ui.commons.TextField.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.TextArea.prototype = jQuery.sap.newObject(sap.ui.commons.TextField.prototype);

/*
 * Describe the sap.ui.commons.TextArea. 
 * Resulting metadata can be obtained via sap.ui.commons.TextArea.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.TextArea", {

  // ---- object ----
  baseType : "sap.ui.commons.TextField",
  publicMethods : [
    // properties 
    "getHeight", "setHeight", "getCols", "setCols", "getRows", "setRows", "getWrapping", "setWrapping", "getCursorPos", "setCursorPos", "getExplanation", "setExplanation", "getLabeledBy", "setLabeledBy"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "cols" : {name : "cols", type : "int", group : "Dimension", defaultValue : null},
    "rows" : {name : "rows", type : "int", group : "Dimension", defaultValue : null},
    "wrapping" : {name : "wrapping", type : "sap.ui.core.Wrapping", group : "Appearance", defaultValue : null},
    "cursorPos" : {name : "cursorPos", type : "int", group : "Appearance", defaultValue : null},
    "explanation" : {name : "explanation", type : "string", group : "Misc", defaultValue : null},
    "labeledBy" : {name : "labeledBy", type : "string", group : "Identification", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>height</code>.
 * Height of text field. When it is set (CSS-size such as % or px), this is the exact size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>cols</code>.
 * Number of Columns. Cols means number of characters per row. This proprty is only used if Width is not used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>cols</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getCols = function() {
	return this.getProperty("cols");
};

/**
 * Setter for property <code>cols</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCols  new value for property <code>cols</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setCols = function(iCols) {
	this.setProperty("cols", iCols);
	return this;
};


/**
 * Getter for property <code>rows</code>.
 * Number of Rows. This proprty is only used if Height is not used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>rows</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getRows = function() {
	return this.getProperty("rows");
};

/**
 * Setter for property <code>rows</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iRows  new value for property <code>rows</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setRows = function(iRows) {
	this.setProperty("rows", iRows);
	return this;
};


/**
 * Getter for property <code>wrapping</code>.
 * Text wrapping. Possible values are: Soft, Hard, Off.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getWrapping = function() {
	return this.getProperty("wrapping");
};

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.Wrapping} oWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setWrapping = function(oWrapping) {
	this.setProperty("wrapping", oWrapping);
	return this;
};


/**
 * Getter for property <code>cursorPos</code>.
 * Position of cursor, e.g., to let the user re-start typing at the same position as before the server roundtrip
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>cursorPos</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getCursorPos = function() {
	return this.getProperty("cursorPos");
};

/**
 * Setter for property <code>cursorPos</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCursorPos  new value for property <code>cursorPos</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setCursorPos = function(iCursorPos) {
	this.setProperty("cursorPos", iCursorPos);
	return this;
};


/**
 * Getter for property <code>explanation</code>.
 * text which appears, in case quick-help is switched on
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>explanation</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getExplanation = function() {
	return this.getProperty("explanation");
};

/**
 * Setter for property <code>explanation</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExplanation  new value for property <code>explanation</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setExplanation = function(sExplanation) {
	this.setProperty("explanation", sExplanation);
	return this;
};


/**
 * Getter for property <code>labeledBy</code>.
 * ID of label control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>labeledBy</code>
 * @public
 * 
 */
sap.ui.commons.TextArea.prototype.getLabeledBy = function() {
	return this.getProperty("labeledBy");
};

/**
 * Setter for property <code>labeledBy</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabeledBy  new value for property <code>labeledBy</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setLabeledBy = function(sLabeledBy) {
	this.setProperty("labeledBy", sLabeledBy);
	return this;
};


// Start of sap/ui/commons/TextArea.js
///**
// * This file defines the control behavior.
// */
//.TextArea.prototype.init = function(){
//   // do something for initialization...
//};

/**
 * Event handler called before control is rendered
 */
sap.ui.commons.TextArea.prototype.onBeforeRendering = function() {
	// Unbind events
	if(this.pasteHandlerId){
		jQuery(this.getDomRef()).unbind('paste', jQuery.proxy(this.handlePaste, this));
		this.pasteHandlerId = null;
	}

	if(this.inputHandlerId){
		jQuery(this.getDomRef()).unbind('input', jQuery.proxy(this.handleInput, this));
		this.inputHandlerId = null;
	}

	if(this.proChHandlerId){
		jQuery(this.getDomRef()).unbind('propertychange', jQuery.proxy(this.handleInput, this));
		this.proChHandlerId = null;
	}
};

/**
 * Event handler called after control is rendered
 */
sap.ui.commons.TextArea.prototype.onAfterRendering = function () {

	this.pasteHandlerId = jQuery(this.getDomRef()).bind('paste', jQuery.proxy(this.handlePaste, this));
	this.inputHandlerId = jQuery(this.getDomRef()).bind('input', jQuery.proxy(this.handleInput, this)); // for FF
	this.proChHandlerId = jQuery(this.getDomRef()).bind('propertychange', jQuery.proxy(this.handleInput, this)); // for IE

};

/**
 * Event handler called when control is getting the focus
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onfocusin = function(oEvent){

	this.getMetadata().getParent().getClass().prototype.onfocusin.call(this, oEvent);

	var oFocusDomRef = this.getFocusDomRef();

	// Set focus flag
	this.bFocus = true;

	oEvent.preventDefault();
};

/**
 * Event handler called when control is loosing the focus
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onfocusout = function(oEvent){

	this.getMetadata().getParent().getClass().prototype.onfocusout.call(this, oEvent);

	var newVal;

	if(this.getDomRef()){
		newVal = this.getDomRef().value;
	}
	var oldVal = this.getValue();

	if(this.getEditable() && this.getEnabled() && oldVal != newVal) {
		this.setProperty("value", newVal, true); // Suppress re-rendering
		this.fireChange({value:newVal});
	}

	var oFocusDomRef = this.getFocusDomRef();
	if (oFocusDomRef && jQuery.browser.mozilla) { // Only for FF -> deselect text
		if (oFocusDomRef.selectionStart != oFocusDomRef.selectionEnd){
			jQuery(oFocusDomRef).selectText(oFocusDomRef.selectionStart, oFocusDomRef.selectionStart);
		}
	}

	// Clear focus flag
	this.bFocus = false;

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Returns an object representing the serialized focus information.
 * Overwrites the standard function.
 * @type Object
 * @return An object representing the serialized focus information.
 * @private
 */
sap.ui.commons.TextArea.prototype.getFocusInfo = function () {
	return {id:this.getId(), cursorPos:this.getCursorPos()};
};

/**
 * Applies the focus info.
 * Overwrites the standard function.
 * @param {object} oFocusInfo
 * @private
 */
sap.ui.commons.TextArea.prototype.applyFocusInfo = function (oFocusInfo) {
	this.focus();
	var oFocusDomRef = this.getFocusDomRef();
	jQuery(oFocusDomRef).cursorPos(this.getCursorPos());
};

/**
 * Event handler called on Key press
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onkeypress = function(oEvent){

	sap.ui.commons.TextField.prototype.onkeypress.apply(this, arguments);

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oKC = jQuery.sap.KeyCodes;
	var iKC = oEvent.which || oEvent.keyCode;
	var oDom = this.getDomRef();

	// Check if some text is selected since this is different in Internet Explorer and FireFox
	// If some text is selected, it is overwritten by a key press -> Value will not get too large
	if(document.selection){ //IE
		var oSel = document.selection.createRange();
		if (oSel.text.length > 0){
			return
		}
	}else{ // FF
		if(oDom.selectionStart != oDom.selectionEnd){
			return;
		}
	}

	// Only real characters and ENTER, no backspace
	if(oDom.value.length >= this.getMaxLength() && ( iKC >= oKC.SPACE || iKC == oKC.ENTER) && !oEvent.ctrlKey){
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}

};

/**
 * Event handler called on Key up
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onkeyup = function(oEvent){

// save cursor position
	var oDomRef = this.getDomRef();
	this.setProperty('cursorPos', jQuery(oDomRef).cursorPos(), true); // no re-rendering!

	// call keyup function of TextField to get liveChange event
	sap.ui.commons.TextField.prototype.onkeyup.apply(this, arguments);

};

/**
 * Event handler called when the enter key is pressed.
 * @see sap.ui.commons.TextField#onsapenter
 * @private
 */
sap.ui.commons.TextArea.prototype.onsapenter = function (oEvent) {
// stop bubbling of event when in the textarea so other actions of parent control handlers won't be called.
// don't do a prevent default because we want the default browser behavior...e.g. new line when pressing enter in the text area.
	oEvent.stopPropagation();
}

/**
 * Event handler called on Mouse up
 *
 * @param {jQuery.Event} oEvent
 * @private
 */;
sap.ui.commons.TextArea.prototype.onmouseup = function(oEvent){

// Save cursor position
	var oDomRef = this.getDomRef();
	this.setProperty('cursorPos', jQuery(oDomRef).cursorPos(), true); // no re-rendering!

};

/**
 * Event handler called on Paste
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.handlePaste = function(oEvent){

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oDom = this.getDomRef();

	if(oDom.value.length >= this.getMaxLength() && oDom.selectionStart == oDom.selectionEnd){
		// already maxLenght reached and nothing selected -> no paste possible
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}

};

/**
 * Event handler called on Input
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.handleInput = function(oEvent){

	if (oEvent.originalEvent.propertyName && oEvent.originalEvent.propertyName.toLowerCase () != "value") {
		// In Internet Explorer, check for correct property
		return;
	}

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oDom = this.getDomRef();

	// If text is entered or pasted, cut it if is too long
	if(oDom.value.length > this.getMaxLength()){
		oDom.value = oDom.value.substring(0,this.getMaxLength());
	}
	// The result is if text is pasted via clipboard or drag and drop the result is cut to fit the
	// maxLength. It's not easy to cut only the pasted text because in FireFox there is no access to the clipboard.
	// An option would be to store the old value after each change and compare it after each change.
	// Then the pasted text must be determined and cut. But this would need a lot of effort and script on
	// every change.

};

/**
 * Property setter for MaxLength
 *
 * @param {int} iMaxLength
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setMaxLength = function(iMaxLength) {

	this.setProperty('maxLength', iMaxLength, true); // No re-rendering

	var oDom = this.getDomRef();

	if(oDom && oDom.value.length > iMaxLength && iMaxLength > 0 ){
		oDom.value = oDom.value.substring(0,iMaxLength);
	}

	var sValue = this.getValue();
	if(sValue.length > iMaxLength && iMaxLength > 0 ){
		this.setProperty('value', sValue.substring(0,iMaxLength));
	}

	return this;
};

/**
 * Property setter for the cursor position
 *
 * @param {int} iCursorPos
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setCursorPos = function(iCursorPos) {

	this.setProperty('cursorPos', iCursorPos, true); // no re-rendering!

	if(this.bFocus){
		jQuery(this.getDomRef()).cursorPos(iCursorPos);
	}

	return this;
};
}; // end of sap.ui.commons.TextArea
if ( !jQuery.sap.isDeclared('sap.ui.commons.Accordion') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Accordion.
jQuery.sap.declare("sap.ui.commons.Accordion");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Accordion.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>openedSectionsId : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>sections : sap.ui.commons.AccordionSection</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>sectionOpen : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>sectionClose : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>sectionsReorder : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Contains N sections which act as containers for any library control.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Accordion = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Accordion.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Accordion. 
 * Resulting metadata can be obtained via sap.ui.commons.Accordion.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Accordion", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getOpenedSectionsId", "setOpenedSectionsId", 
    // aggregations
    "getSections", "insertSection", "addSection", "removeSection", "removeAllSections", "indexOfSection", "destroySections", 
    // associations
    
    // events
    "attachSectionOpen", "detachSectionOpen", "attachSectionClose", "detachSectionClose", "attachSectionsReorder", "detachSectionsReorder", 
    // methods
    "openSection", "closeSection"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '200px'},
    "openedSectionsId" : {name : "openedSectionsId", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "sections",
  aggregations : {
    "sections" : {name : "sections", type : "sap.ui.commons.AccordionSection", multiple : true, singularName : "section"}
  },
  associations : {},
  events : {
    "sectionOpen" : "sectionOpen", 
    "sectionClose" : "sectionClose", 
    "sectionsReorder" : "sectionsReorder"
  }

});	

sap.ui.commons.Accordion.M_EVENTS = {'sectionOpen':'sectionOpen','sectionClose':'sectionClose','sectionsReorder':'sectionsReorder'};


/**
 * Getter for property <code>width</code>.
 * When the width specified is smaller than a section content, a horizontal scrollbar is provided.
 *
 * Default value is <code>200px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Accordion.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>200px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>openedSectionsId</code>.
 * IDs of the opened sections by default and on first rendering. At the moment only one opened section is supported by the Accordion, this will be the first one if several are given.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>openedSectionsId</code>
 * @public
 * 
 */
sap.ui.commons.Accordion.prototype.getOpenedSectionsId = function() {
	return this.getProperty("openedSectionsId");
};

/**
 * Setter for property <code>openedSectionsId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sOpenedSectionsId  new value for property <code>openedSectionsId</code>
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.setOpenedSectionsId = function(sOpenedSectionsId) {
	this.setProperty("openedSectionsId", sOpenedSectionsId);
	return this;
};

	
/**
 * Getter for aggregation <code>sections</code>.<br/>
 * Empty container used to display any library controls.
 * 
 * @return {sap.ui.commons.AccordionSection[]}
 * @public
 */
sap.ui.commons.Accordion.prototype.getSections = function() {
	return this.getAggregation("sections", []);
};


/**
 * Inserts a section into the aggregation named <code>sections</code>.
 *
 * @param {sap.ui.commons.AccordionSection}
 *          oSection the section to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the section should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the section is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the section is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.insertSection = function(oSection, iIndex) {
	this.insertAggregation("sections", oSection, iIndex);
	return this;
};

/**
 * Adds some section <code>oSection</code> 
 * to the aggregation named <code>sections</code>.
 *
 * @param {sap.ui.commons.AccordionSection}
 *            oSection the section to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Accordion.prototype.addSection = function(oSection) {
	this.addAggregation("sections", oSection);
	return this;
};

/**
 * Removes an section from the aggregation named <code>sections</code>.
 *
 * @param {int | string | sap.ui.commons.AccordionSection} vSection the section to remove or its index or id
 * @return {sap.ui.commons.AccordionSection} the removed section or null
 * @public
 */
sap.ui.commons.Accordion.prototype.removeSection = function(vSection) {
	return this.removeAggregation("sections", vSection);
};

/**
 * Removes all the controls in the aggregation named <code>sections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.AccordionSection[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Accordion.prototype.removeAllSections = function() {
	return this.removeAllAggregation("sections");
};

/**
 * Checks for the provided <code>sap.ui.commons.AccordionSection</code> in the aggregation named <code>sections</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.AccordionSection}
 *            oSection the section whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Accordion.prototype.indexOfSection = function(oSection) {
	return this.indexOfAggregation("sections", oSection);
};
	

/**
 * Destroys all the sections in the aggregation 
 * named <code>sections</code>.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.destroySections = function() {
	this.destroyAggregation("sections");
	return this;
};


/**
 * Triggered when user opens a section. 
 *
 * @name sap.ui.commons.Accordion#sectionOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.openSectionId ID of the section opened.
 * @param {string[]} oControlEvent.getParameters.closeSectionIds Index of the sections to close. It can be initial if no section were previously open.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'sectionOpen' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 * Triggered when user opens a section. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.attachSectionOpen = function(oData, fnFunction, oListener) {
	this.attachEvent("sectionOpen", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sectionOpen' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.detachSectionOpen = function(fnFunction, oListener) {
	this.detachEvent("sectionOpen", fnFunction, oListener);
	return this;	
};

/**
 * Fire event sectionOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openSectionId' of type <code>string</code> ID of the section opened.</li>
 * <li>'closeSectionIds' of type <code>string[]</code> Index of the sections to close. It can be initial if no section were previously open.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Accordion.prototype.fireSectionOpen = function(mArguments) {
	this.fireEvent("sectionOpen", mArguments);
	return this;
};


/**
 * Triggered when user closes a section. 
 *
 * @name sap.ui.commons.Accordion#sectionClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.closeSectionId ID of the section closed.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'sectionClose' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 * Triggered when user closes a section. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.attachSectionClose = function(oData, fnFunction, oListener) {
	this.attachEvent("sectionClose", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sectionClose' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.detachSectionClose = function(fnFunction, oListener) {
	this.detachEvent("sectionClose", fnFunction, oListener);
	return this;	
};

/**
 * Fire event sectionClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'closeSectionId' of type <code>string</code> ID of the section closed.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Accordion.prototype.fireSectionClose = function(mArguments) {
	this.fireEvent("sectionClose", mArguments);
	return this;
};


/**
 * Triggered when user changes the position of a section. 
 *
 * @name sap.ui.commons.Accordion#sectionsReorder
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.movedSectionId ID of the moved section.
 * @param {int} oControlEvent.getParameters.newIndex New index of the moved section.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'sectionsReorder' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 * Triggered when user changes the position of a section. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.attachSectionsReorder = function(oData, fnFunction, oListener) {
	this.attachEvent("sectionsReorder", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sectionsReorder' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.detachSectionsReorder = function(fnFunction, oListener) {
	this.detachEvent("sectionsReorder", fnFunction, oListener);
	return this;	
};

/**
 * Fire event sectionsReorder to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'movedSectionId' of type <code>string</code> ID of the moved section.</li>
 * <li>'newIndex' of type <code>int</code> New index of the moved section.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Accordion.prototype.fireSectionsReorder = function(mArguments) {
	this.fireEvent("sectionsReorder", mArguments);
	return this;
};


/**
 * Opens a given section.
 *
 * @name sap.ui.commons.Accordion.prototype.openSection
 * @function
 * @param {string} 
 *         sSectionId
 *         Section to open.

 * @type void
 * @public
 */


/**
 * Closes a given section and opens the default section.
 *
 * @name sap.ui.commons.Accordion.prototype.closeSection
 * @function
 * @param {string} 
 *         sSectionId
 *         Section to close.

 * @type void
 * @public
 */


// Start of sap/ui/commons/Accordion.js
/***************************************************
* ACCORDION CONTROL - JAVASCRIPT FUNCTIONS
*
* An accordion is a control that applications can use
* to define N sections in which they can display N
* elements of X types. One section can be opened at
* once and one section is always opened. If the application
* does not provide a default section to be opened,
* the first enabled section is opened by default.
****************************************************/
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


/*"*************************************************
* CONSTANTS DECLARATION - CLASS ATTRIBUTES
****************************************************/
sap.ui.commons.Accordion.CARD_1   = 1;
sap.ui.commons.Accordion.CARD_0_1 = 2;
sap.ui.commons.Accordion.CARD_0_N = 3;
sap.ui.commons.Accordion.CARD_1_N = 4;
sap.ui.commons.Accordion.KEY_TIMEOUT = 500;

sap.ui.commons.Accordion.aAccordionsToReplace = [];
sap.ui.commons.Accordion.aAccordions = [];

/***************************************************
* INITIALIZATION
****************************************************/
/**
* Initialization of the Accordion control
* @private
*/
sap.ui.commons.Accordion.prototype.init = function(){

   this.bInitialRendering = true;

   // By default, only one section is opened
   this.activationMode = sap.ui.commons.Accordion.CARD_1;

   // Drag and drop events
   jQuery(window.document).bind("dragover", this.ondragover);
   jQuery(window.document).bind("dragenter", this.ondragenter);
   jQuery(window.document).bind("dragleave", this.ondragleave);
   jQuery(window.document).bind("dragend", this.ondragend);

   // Array used to store all section titles
   this.aSectionTitles = [];

   // Initialization of variables used for the type ahead functionality
   this.sInterKeyTimerID = null;
   this.sSearchString    = "";
   this.fClearFunction   = this.getClearFunction(this);
   this.bDragBeforeFirst = false;

   sap.ui.commons.Accordion.aAccordions.push(this);

};

/***********************************************************************************
* KEYBOARD NAVIGATION
* Note that we rely on 2 mechanisms to support all keyboard shortcuts needed.
* First, for control activation (open/close sections), we rely on UI5 pseudo-events
* which are called before the browser event. These events all start with onsap_xyz.
* For the other navigation such as next/previous element, we use the itemNavigation.
* Note that to enter the section's content, one needs to use the TAB key which
* will take the browser's default behavior.
***********************************************************************************/

/**
 * SPACE key behavior
 * Opens the section or activates the UI element on SPACE key
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapspace = function(oEvent){
   this.onclick(oEvent);
};

/**
 * PAGE DOWN key behavior
 * Beware that these shortcuts are used by FF3.6 to navigate between opened TABS in the browsers.
 * So this is declared as a limitation, but behaves as expected in Safari 5
 * Opens the next section and focuses 1st element of this opened section
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsappagedownmodifiers = function(oEvent){

	// Get all the sections
	var target = jQuery(oEvent.target);
	var aParents = target.parentsUntil('.sapUiAcd');

	// Get the next section
	var oDOMSection = aParents[aParents.length - 1];
	var oNextSection = jQuery(oDOMSection).next();

	// Skip all disabled sections
	while(!this.getCorrespondingSection(oNextSection[0]).getEnabled()){
		oNextSection = oNextSection.next();
	}
	oNextSection = oNextSection[0];


	// Open the next enabled section
	this.openSection(oNextSection.id);

	// Drill down the DOM to get the next section and focus on its first active element
	var oSection = this.getCorrespondingSection(oNextSection);
	oSection.focusFirstControl();

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * PAGE UP key behavior
 * Beware that these shortcuts are used by FF3.6 to navigate between opened TABS in the browsers.
 * So this is declared as a limitation, but behaves as expected in Safari 5
 * Opens the previous section and focuses 1st element of this opened section
 * @param [jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsappageupmodifiers = function(oEvent){

	// Get all the sections
	var target = jQuery(oEvent.target);
	var aParents = target.parentsUntil('.sapUiAcd');

	// Get the previous section
	var oSection = aParents[aParents.length - 1];
	var oNextSection = jQuery(oSection).prev();

	// Skip all disabled sections
	while(!this.getCorrespondingSection(oNextSection[0]).getEnabled()){
		oNextSection = oNextSection.prev();
	}
	oNextSection = oNextSection[0];

	// Open the previously enabled section
	this.openSection(oNextSection.id);

	// Drill down the DOM to get the previous section and focus its first active element
	var oSection = this.getCorrespondingSection(oNextSection);
	if(oSection){
		oSection.focusFirstControl();
	}

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

sap.ui.commons.Accordion.prototype.onsapupmodifiers = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	// Get the section to move
	var aParents	= jQuery(oEvent.target).parentsUntil('.sapUiAcd');
	var oDomSection = aParents[aParents.length - 1];

	// Is the section if the first one. if so, no up possible!
	if(this.__idxOfSec(oDomSection.id)==0){
		return;
	}

	var oDomTargetSection = jQuery(oDomSection).prev().first()[0]
;
	var bInsertFirst = false;
	if(this.__idxOfSec(oDomTargetSection.id)==0){
		bInsertFirst = true;
	}

	this.dropSection(oDomSection,oDomTargetSection,bInsertFirst);

	// Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();



};

sap.ui.commons.Accordion.prototype.onsapdownmodifiers = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the section to move
	var aParents	= jQuery(oEvent.target).parentsUntil('.sapUiAcd');
	var oDomSection = aParents[aParents.length - 1];

	//Is the section if the first one. if so, no up possible!
	if(this.__idxOfSec(oDomSection.id)==this.getSections().length-1){
		return;
	}

	var oDomTargetSection = jQuery(oDomSection).next().first()[0]
;
	this.dropSection(oDomSection,oDomTargetSection,false);

	//Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();

};

/**
 * Called when the user presses the UP arrow key
 * @param oEvent The event triggered from the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapup = function(oEvent){

	//Get the current section
	var oCurrentSection = this.getCurrentSection(oEvent.target);

	//Extra check to see of we are on the first section, if yes, set the focus on this one
	if (oCurrentSection.id = this.getSections()[0].getId()){
		var oNextFocusableElement = jQuery(oCurrentSection).find("a.sapUiAcdSectionMinArrow");
		if (oNextFocusableElement){
			oNextFocusableElement.focus()
		}
	}

	//Simply set the focus on the next section if any
	if (oCurrentSection){

		//Get the previous section that is enabled, disregard disabled sections
		var oPreviousSection = jQuery(oCurrentSection).prev();
		while (oPreviousSection && jQuery(oPreviousSection).hasClass("sapUiAcdSectionDis")){
			oPreviousSection = jQuery(oPreviousSection).prev();
		}
		if (oPreviousSection){
			var oNextFocusableElement = jQuery(oPreviousSection).find("a.sapUiAcdSectionMinArrow");
			if (oNextFocusableElement){
				oNextFocusableElement.focus()
			}
		}
	}

};

/**
 * Ensure the sapleft event is also handled
 * @see #onsapup
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapleft = sap.ui.commons.Accordion.prototype.onsapup;

/**
 * Called when the user presses the down arrow key
 * @param {jQuery.Event} oEvent The event triggered from the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapdown = function(oEvent){

	//Get the current section
	var oCurrentSection = this.getCurrentSection(oEvent.target);

	//Simply set the focus on the next section if any
	if (oCurrentSection){

		//Get the next section that is enabled, disregard disabled sections
		var oNextSection = jQuery(oCurrentSection).next();
		while (oNextSection && jQuery(oNextSection).hasClass("sapUiAcdSectionDis")){
			oNextSection = jQuery(oNextSection).next();
		}
		if (oNextSection){
			var oNextFocusableElement = jQuery(oNextSection).find("a.sapUiAcdSectionMinArrow");
			if (oNextFocusableElement){
				oNextFocusableElement.focus()
			}
		}
	}

};

/**
 * Called when the user presses the home key
 * @param oEvent The event triggered from the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsaphome = function(oEvent){

	//Get the current first section id
	var oFocusableSection = jQuery.sap.domById(this.getSections()[0].getId());

	//If the section is disabled, get the next section that is enabled, disregard disabled sections
	if (jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
		oFocusableSection = jQuery(oFocusableSection).next();
		while (oFocusableSection && jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
			oFocusableSection = jQuery(oFocusableSection).next();
		}
	}

	//We found one focusable section, put the focus on the arrow
	if (oFocusableSection){
		var oNextFocusableElement = jQuery(oFocusableSection).find("a.sapUiAcdSectionMinArrow");
		if (oNextFocusableElement){
			oNextFocusableElement.focus()
		}
	}

};

/**
 * Called when the user presses the end key
 * @param oEvent The event triggered from the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapend = function(oEvent){

	//Get the last section
	var iNbSections = this.getSections().length;
	var oFocusableSection = jQuery.sap.domById(this.getSections()[iNbSections-1].getId());

	//If the section is disabled, get the previous section that is enabled, disregard disabled sections
	if (jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
		oFocusableSection = jQuery(oFocusableSection).prev();
		while (oFocusableSection && jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
			oFocusableSection = jQuery(oFocusableSection).prev();
		}
	}

	//We found one focusable section, put the focus on the arrow
	if (oFocusableSection){
		var oNextFocusableElement = jQuery(oFocusableSection).find("a.sapUiAcdSectionMinArrow");
		if (oNextFocusableElement){
			oNextFocusableElement.focus()
		}
	}

};

/**
 * Ensure the sapright event is also handled
 * @see #onsapleft
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapright = sap.ui.commons.Accordion.prototype.onsapdown;

/**
 * Utility to get the current section
 * @param {DOMElement} oDomElement The current element from which an event is triggered
 * @private
 */
sap.ui.commons.Accordion.prototype.getCurrentSection = function(oDomElement){

	//Use jQuery to get the parent section
	var oCurrentSection = oDomElement;
	while (!jQuery(oCurrentSection).hasClass("sapUiAcdSection")){
		oCurrentSection = jQuery(oCurrentSection).parent();
	}
	return oCurrentSection[0];


};


/*******************************************************************************
* TYPE AHEAD FUNCTIONALITY
* When the focus is on a section and the user types some keyboard keys, the focus
* is set the the matching section title. Note that there is a delay of 1 second
* before the matching string is reset to empty. So for instance, you have 2 titles
* like TitleA and MyTitle, if the focus is on TitleA and the user types 'M', the
* focus will automatically move the 'MyTitle' section. Note that the focus is
* actually put on the arrow to allow opening/closing the section right away either
* via a mouse click or via ENTER/SPACE keys.
* Note that we skip the disabled sections since they can't be collapsed/opened.
********************************************************************************/

/**
 * On key press event is used only for the type ahead functionality. This is the entry
 * point when the user types a searchString when the focus is currently on an enabled
 * section.
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onkeypress = function(oEvent){

		//When TAB key is pressed or ENTER, do not process
		if (oEvent.keyCode == 9 || oEvent.keyCode == 13){
		  return;
		}

		//Get all accordion's sections
		var aSections = this.getSections();

		//Add key in the current search string
		var iKeyCode = (oEvent.keyCode == 0) ? oEvent.charCode : oEvent.keyCode;
		var sAscii   = String.fromCharCode(iKeyCode);
		this.sSearchString += sAscii;

		//Compare with all section titles
		var iIndex = this.findSectionBySubstring(this.sSearchString);

		//Substring found. Focus on this section
		if(iIndex != -1){
			aSections[iIndex].focus();
		}
		//Not found, reset timer & search string
		else{
			this.fClearFunction();
		}

		//Stop the keypress event here
		oEvent.preventDefault();
		oEvent.stopPropagation();

};

/**
 * Returns the index of the first section that the title corresponds to the given substring
 * @param {string} sSubstring The current searchString to look for in our array containing all titles
 * @private
 */
sap.ui.commons.Accordion.prototype.findSectionBySubstring = function(sSubstring){

	//Put everything to upper case for comparison
	var sUpperSubstring = sSubstring.toUpperCase();

	//Loop through all titles and find a match if any
	for (var i=0;i<this.aSectionTitles.length;i++) {

		//Check with index == 0 --> From the beginning of the title
		if( this.aSectionTitles[i].toUpperCase().indexOf(sUpperSubstring) == 0){

			//Start timer if needed
			if(this.sInterKeyTimerID){
				clearTimeout(this.sInterKeyTimerID);
			}

			//Set timeout, starting from here, the user has one second to continue to type to find a matching title
			this.sInterKeyTimerID = setTimeout(this.fClearFunction, sap.ui.commons.Accordion.KEY_TIMEOUT);
			return i;
		}
	}

	//No match was found at all, return -1 as an indicator
	return -1;

};

/**
 * Javascript closure used to ensure we are always working on the same memory area of the current
 * searchString. This closure returns the function used to clear the searchString and the timer
 * when the time has ended.
 * @param {sap.ui.commons.Accordion} oAccordion The current accordion on which we are working
 * @return {function}
 * @private
 */
sap.ui.commons.Accordion.prototype.getClearFunction = function(oAccordion){
	var f =  function(){
		oAccordion.sInterKeyTimerID = null;
		oAccordion.sSearchString    = "";
	};
	return f;
};

/***********************************************************************************
 * DRAG AND DROP
 * Drag and drop is used to move a single section at once up/down in the accordion
 * This can be achieved via a mouse click (down/up) and also via some keyboard
 * shortcuts (Ctrl-up and Ctrl-down)
 ***********************************************************************************/
/**
 * On drag start event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.ondragstart = function(oEvent){

	//Drag & Drop not supported in IE yet.
	if(jQuery.browser.msie){
		return;
	}

	var target	  = jQuery(oEvent.target);

	//Keep a trace of the dragged section

	if(jQuery(oEvent.target).hasClass("sapUiAcdSection")){
		this.draggedSection = oEvent.target;
	}
	else{
		var aParents = target.parentsUntil('.sapUiAcd');
		this.draggedSection = aParents[aParents.length - 1];
	}


	//Disable dragging on the scrollbars
	if(target.hasClass("sapUiAcdSectionCont")){
		return;
	}

	var container = target.children(".sapUiAcdSectionCont");
	container	  = container[0];

	//Hide Scrollbar
	var containerStyle = jQuery(container).addClass("sapUiAcdSectionContDragged");

	target.addClass("sapUiAcdSectionDragged");


	oEvent.originalEvent.dataTransfer.effectAllowed='move';
	oEvent.originalEvent.dataTransfer.setData("Text", target.attr("id"));

	if(oEvent.originalEvent.dataTransfer.setDragImage){
		var domHeader = jQuery.sap.domById(this.draggedSection.id + "-hdr");
		oEvent.originalEvent.dataTransfer.setDragImage(domHeader,0,0);
	}


};

/**
* On drop start event
* @param {jQuery.Event} oEvent The browser event
* @private
*/
sap.ui.commons.Accordion.prototype.ondrop = function(oEvent){


	oEvent.preventDefault();
	oEvent.stopPropagation();

	var section;
	var accordion;
	var bInsertFirst = false;

	if(jQuery(oEvent.target).hasClass("sapUiAcd-droptarget")){
		//Over the drop target before the firsts section.
		var aSections = this.getSections();
		section = jQuery.sap.domById(aSections[0].getId());
		accordion = jQuery.sap.domById(this.getId());
		bInsertFirst = true;
	}
	else if(jQuery(oEvent.target).hasClass("sapUiAcd") ){
		//Over the accordion itself. It means we are just before the first section
		bInsertFirst = true;
		accordion = oEvent.target;
		var aChildren = jQuery(accordion).children();
		//First section is at index 1
		section   = aChildren[1];
	}
	else{
		//Otherwise, over a section
		var target = jQuery(oEvent.target);
		var aParents = target.parentsUntil('.sapUiAcd');
		section = aParents[aParents.length - 1];
		accordion = jQuery(section).parent()[0];
	}



	//We have to move the dragged section after the target section.
	var format = oEvent.originalEvent.dataTransfer.types ? "text/plain" : "Text";
	var dropId = oEvent.originalEvent.dataTransfer.getData(format);
	var droppedObj = jQuery.sap.domById(dropId);

	//Dropping in a different accordion is not allowed
	if(!sap.ui.commons.Accordion.areInSameAccordion(droppedObj, section)){
		return;
	}

	//When dragging up, we need to adjust the section
	var aDomSections = jQuery(accordion).children(".sapUiAcdSection").toArray();
	if(jQuery.inArray(droppedObj, aDomSections)>jQuery.inArray(section, aDomSections)){
		//We are dragging up, let provide the next section dom object to adjust
		section = aDomSections[aDomSections.indexOf(section)+1];
	}

	this.dropSection(droppedObj,section,bInsertFirst);

};

/**
 * Drops a section to a new index
 * @param {DOMNode} oDomSection			section to drop to a new index
 * @param {DOMNode} oDomTargetSection	section after which to drop the section
 * @param {boolean} bDropFirst			If true, drop at first place
 * @private
 */
sap.ui.commons.Accordion.prototype.dropSection = function(oDomSection, oDomTargetSection, bDropFirst){

	//Get accordion DOM object
	var oDomAccordion = jQuery(oDomSection).parent()[0];

	//We substract 1 as the first child is the drop target and the should not be considered
	var aChildren = jQuery(oDomAccordion).children(".sapUiAcdSection").toArray();
	var iIndexToInsert = jQuery.inArray(oDomTargetSection, aChildren);

	if(bDropFirst){
		iIndexToInsert -= 1;
	}

	//Update accordion with the change
	this.moveSection(oDomSection.id,iIndexToInsert);

};

/**
 * On drag end event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.ondragend = function(oEvent){

	if(this.bDragBeforeFirst){

		this.replaceSectionFirst();

	}

	if(sap.ui.commons.Accordion.aAccordionsToReplace.length != 0){
		for(var i = 0;i<sap.ui.commons.Accordion.aAccordionsToReplace.length;i++){
			sap.ui.commons.Accordion.replaceAccordionById(sap.ui.commons.Accordion.aAccordionsToReplace[i].id)
		}
		sap.ui.commons.Accordion.aAccordionsToReplace = [];
	}

	var target			= jQuery(oEvent.target);
	target.removeClass("sapUiAcdSectionDragged");

	var container		= target.children(".sapUiAcdSectionCont");
	var containerStyle	= container.removeClass("sapUiAcdSectionContDragged");


	//Stop the event here
	oEvent.preventDefault();
	oEvent.stopPropagation();

	this.bDragBeforeFirst = false;
	this.currentDragTargetId = null;
	this.draggedSection = null;

};

/**
 * On drag over event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.ondragover = function(oEvent){

	var format = oEvent.originalEvent.dataTransfer.types ? "text/plain" : "Text";
	var dropId = oEvent.originalEvent.dataTransfer.getData(format);

	var parents = jQuery(oEvent.target).parentsUntil('.sapUiAcd');
	var oDomSection = parents[parents.length - 1];

	if(!sap.ui.commons.Accordion.areInSameAccordion(oEvent.target, jQuery.sap.domById(dropId))){
		//Dropping in a different Accordion is not allowed
		return true;
	}

	//Identifying valid drop target
	if (this.bDragBeforeFirst){
		//When we are dragging before the first section, it still the drop target as long we don't go over another section
		return false;
	}

	if(jQuery(oEvent.target).hasClass("sapUiAcd-droptarget") ){
		//Drop target before the first section is valid
		return false;
	}

	if(jQuery(oEvent.target).hasClass("sapUiAcd") ){
		//Drop target before the first section is valid. (Equivalent of drop target itself)
		return false;
	}

	if(oDomSection && jQuery(oDomSection).hasClass("sapUiAcdSection")){
		//A section is valid
		return false;
	}


};

/**
* Returns true if the 2 provided DOM element belongs to the same accordion
* @param {DOMNode} oDomElement1 First DOM element
* @param {DOMNode} oDomElement2 Second DOM element
* @return {boolean} whether the given two DOMNodes belong to the same Accordion
* @private
*/
sap.ui.commons.Accordion.areInSameAccordion = function(oDomElement1, oDomElement2){

	if(!oDomElement1 || !oDomElement2){
		return true;
	}



	var oDomAccordion1;
	if(	jQuery(oDomElement1).hasClass("sapUiAcdSection") ||
		jQuery(oDomElement1).hasClass("sapUiAcd-droptarget")){
		oDomAccordion1  = jQuery(oDomElement1).parent();
	}
	else{
		var aParents1		= jQuery(oDomElement1).parentsUntil('.sapUiAcd');
		var oDomSection1	= aParents1[aParents1.length - 1];
		oDomAccordion1		= jQuery(oDomSection1).parent();
	}

	var oDomAccordion2;
	if(	jQuery(oDomElement2).hasClass("sapUiAcdSection") ||
		jQuery(oDomElement2).hasClass("sapUiAcd-droptarget")){
		oDomAccordion2  = jQuery(oDomElement2).parent();
	}
	else{
		var aParents2		= jQuery(oDomElement2).parentsUntil('.sapUiAcd');
		var oDomSection2	= aParents2[aParents2.length - 1];
		oDomAccordion2		= jQuery(oDomSection2).parent();
	}


	if(oDomAccordion1.attr('id')==oDomAccordion2.attr('id')){
		return true;
	}
	else{
		return false;
	}
};

/**
 * On drag enter event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.ondragenter = function(oEvent){

	var format = oEvent.originalEvent.dataTransfer.types ? "text/plain" : "Text";
	var dropId = oEvent.originalEvent.dataTransfer.getData(format);



	if(!sap.ui.commons.Accordion.areInSameAccordion(oEvent.target, jQuery.sap.domById(dropId))){
		//Dropping in a different Accordion is not allowed
		return ;
	}

	if(this.bDragBeforeFirst == undefined){return;}


	var oDomSection;

	//Depending of the place we are over, we retrieve the corresponding DOM Section accordingly.

	if(jQuery(oEvent.target).hasClass("sapUiAcd-droptarget")){
		//Over the drop target, we change the mode. It will be set to Off the next time we go over another section
		this.bDragBeforeFirst = true;
		var aSections = this.getSections();
		oDomSection = jQuery.sap.domById(aSections[0].getId());
	}
	else{
		var parents = jQuery(oEvent.target).parentsUntil('.sapUiAcd');
		oDomSection = parents[parents.length - 1];

		//Are we back on a section coming from the drop target ?
		if (this.bDragBeforeFirst && oDomSection && jQuery(oDomSection).hasClass("sapUiAcdSection")){
			//DragBeforeFirst mode is over as we are dragging over another section
			this.bDragBeforeFirst = false;
		}

		if (this.bDragBeforeFirst){
			//We are still in the top drop target. Do not move the section
			return;

		}

	}


	if(!this.currentDragTargetId && oDomSection && jQuery(oDomSection).hasClass("sapUiAcdSection")){

		//Over a section(or its corresponding child), slide the section to show the dragging state
		this.slideSectionDown(oDomSection, this.bDragBeforeFirst);
		this.currentDragTargetId = oDomSection.id;

	}

	//Stop the event here
	oEvent.preventDefault();
	oEvent.stopPropagation();

};



/**
 * On drag leave event
 * @param {jQuery.Event} oEvent The browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.ondragleave = function(oEvent){

	if(this.bDragBeforeFirst == undefined){
		//We are dragging outside the accordion. This means that "this" is not pointing at the accordion but the window.
		//Exit to avoid problems
		return;
	}

	if (this.bDragBeforeFirst){
		//In this mode, nothing to do
		return;
	}

	//Depending of the place we are over, we retrieve the corresponding DOM Section accordingly.
	var oDomSection;

	if(jQuery(oEvent.target).hasClass("sapUiAcd-droptarget")){
		//Over the drop target before the first section
		var bMoveFirst = true;
		var aSections = this.getSections();
		oDomSection = jQuery.sap.domById(aSections[0].getId());
	}
	else{
		//Over the section
		var parents = jQuery(oEvent.target).parentsUntil('.sapUiAcd');
		oDomSection = parents[parents.length - 1];
	}

	if(this.currentDragTargetId && oDomSection && jQuery(oDomSection).hasClass("sapUiAcdSection")){

		//Sliding section back to their original position
		var oldTarget = jQuery.sap.domById(this.currentDragTargetId);
		this.replaceSection();
		this.currentDragTargetId = null;

	}

	//Stop the event here
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * Moves one section to a given new index by adjusting all internal information
 * @param {string} sSectionId The current section ID being moved
 * @param {int} iTargetIndex Where is the section dropped
 * @private
 */
sap.ui.commons.Accordion.prototype.moveSection = function(sSectionId, iTargetIndex){

	//Get previous index
	var iOldIndex = this.__idxOfSec(sSectionId);


	if(iTargetIndex==iOldIndex){
		 //Nothing to do
		 return;
	}


	/****Remove section from arrays*********************************/

	//Remove title for the list
	var sSectionTitle = this.aSectionTitles[iOldIndex];
	this.aSectionTitles.splice(iOldIndex,1);

	//Remove section aggregation
	var aSections = this.getSections();
	var oSection = aSections[iOldIndex];
	this.removeSection(iOldIndex, true);


	/****Add section to new index*********************************/
	if(iTargetIndex != -1){
		this.aSectionTitles.splice(iTargetIndex,0,sSectionTitle);
	}
	else{
		this.aSectionTitles.splice(0,0,sSectionTitle);
	}

	//Update aggregation
	this.insertSection(oSection,iTargetIndex, true);

	//Trigger event for application to react
	this.fireSectionsReorder({movedSectionId:sSectionId, newIndex:iTargetIndex});

};


/**
 * Slides some section down to show a space. This space is the drop target.
 * @param {sap.ui.commons.AccordionSection} oSection The section being moved
 * @param {boolean} moveFirst
 * @private
 */
sap.ui.commons.Accordion.prototype.slideSectionDown = function(oSection, moveFirst){

  if(moveFirst){
	  //We are over the first section. We then slide it down also
	 jQuery(oSection).addClass("sapUiAcdSection-down");
	 sap.ui.commons.Accordion.aAccordionsToReplace.push(jQuery(oSection).parent()[0]);

  }

  //Increase accordion Height to fit a blank space
  var accordion = jQuery.sap.domById(this.getId());
  accordion.style.height = (accordion.offsetHeight + 20) + "px";

  var aNextSections = jQuery(oSection).nextAll();

  for(var i=0;i<aNextSections.length;i++){
	  jQuery(aNextSections[i]).addClass("sapUiAcdSection-down");
  }


};

/**
 * Once the dragging is over (or changed), replace the section to their original places
 * @private
 */
sap.ui.commons.Accordion.prototype.replaceSection = function(){


  var accordion = jQuery.sap.domById(this.getId());

  sap.ui.commons.Accordion.replaceAccordion(this);

};

/**
 * Once the dragging is over (or changed), replace the section to their original places
 * @private
 */
sap.ui.commons.Accordion.prototype.replaceSectionFirst = function(){


  var accordion = jQuery.sap.domById(this.getId());

  sap.ui.commons.Accordion.replaceAccordionFirst(this);

};

/**
 * Replace with the given id
 * @param {string} iAccordionId
 * @private
 */
sap.ui.commons.Accordion.replaceAccordionById = function(iAccordionId){

  for(var i=0;i<sap.ui.commons.Accordion.aAccordions.length;i++){
	  if(sap.ui.commons.Accordion.aAccordions[i].getId() == iAccordionId){
		  sap.ui.commons.Accordion.replaceAccordion(sap.ui.commons.Accordion.aAccordions[i]);
		  return true;
	  }

  }

};

/**
 * Replace a given accordion.
 * @param {sap.ui.commons.Accordion} oAccordion
 * @private
 */
sap.ui.commons.Accordion.replaceAccordion = function(oAccordion){

  var oDomAccordion = jQuery.sap.domById(oAccordion.getId());

  //Back to original height
  oDomAccordion.style.height = (oDomAccordion.offsetHeight - 24) + "px";

  //Slide the section itself
  var aSections = oAccordion.getSections();

  //Remove the CSS class that slides the section down
  for(var i=0;i<aSections.length;i++){
	  var iSectionId = aSections[i].getId();
	  var oDomSection = jQuery.sap.domById(iSectionId);
	  jQuery(oDomSection).removeClass("sapUiAcdSection-down");
  }

};

/**
 * Replace a given accordion when a section is dragged before the first section.
 * @param {sap.ui.commons.Accordion} oAccordion
 * @private
 */
sap.ui.commons.Accordion.replaceAccordionFirst = function(oAccordion){

  var oDomAccordion = jQuery.sap.domById(oAccordion.getId());

  //Slide the section itself
  var aSections = oAccordion.getSections();

  //Remove the CSS class that slides the section down
  for(var i=0;i<aSections.length;i++){
	  var iSectionId = aSections[i].getId();
	  var oDomSection = jQuery.sap.domById(iSectionId);
	  jQuery(oDomSection).removeClass("sapUiAcdSection-down");
  }

};

/***********************************************************************************
 * FUNCTIONALITIES
 * Available functionalities in the accordion are the following:
 * - Open a section
 * - Close a section
 ***********************************************************************************/

/**
 * Activation of the section - Opens or closes a section.
 * If the focus is on a collapsed section, it will close the currently opened section and open this one.
 * If the focus is on an expanded section, it will collapse the section and open the default section.
 * This function is called onClick by the mouse, or via ENTER/SPACE keys
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onclick = function(oEvent){

	//Click on the accordion itself are not considered
	if(oEvent.srcControl.getId() ==  this.getId()){
		return;
	}

	//Move up in the DOM to get the section (click occurs on the arrow which is an inner html element)
	var target = jQuery(oEvent.target);

	//Disable the possibility to click on the content to open/close a section
	if(target.hasClass("sapUiAcdSectionCont")){
		return;
	}

	if ( !(jQuery(oEvent.target).control(0) instanceof sap.ui.commons.AccordionSection) ) { 
		return; 
	}
	
	var oDomSection = oEvent.srcControl.getDomRef();

	//If the section is disabled, we cannot open/close it.
	var oSection = this.getCorrespondingSection(oDomSection);
	if(oSection && !oSection.getEnabled()){
		return;
	}

	//If the section is closed, open it
	if(oEvent.srcControl && oEvent.srcControl.getCollapsed() == true){
		this.openSection(oDomSection.id);
	}
	//If it is opened, close it
	else{
		if (oEvent.srcControl){
			this.closeSection(oDomSection.id);
		}
	}

	//Stop the event here
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();

};

/**
 * Opens a given section
 * @param {string} sSectionId, the given section ID
 * @private
 */
sap.ui.commons.Accordion.prototype.openSection = function(sSectionId){

	//Map the section ID to its internal index
	var iIndex = this.__idxOfSec(sSectionId);

	//Get all accordion's sections
	var aSections = this.getSections();

	//Close all sections currently opened
	if (this.activationMode == sap.ui.commons.Accordion.CARD_0_1 || this.activationMode == sap.ui.commons.Accordion.CARD_1){
	  var aClosedSections = this.closeOpenedSections();
	}

	//Open the section with the index retrieved from the importing section ID
	aSections[iIndex]._setCollapsed(false);

	//Trigger event for application to react
	this.fireSectionOpen({openSectionId:sSectionId, closeSectionIds:aClosedSections});

};

/**
 * Closes a given section
 * @param {string} sSectionId, the given section ID
 * @private
 */
sap.ui.commons.Accordion.prototype.closeSection = function(sSectionId){

	//Get the corresponding mapping index
	var iIndex = this.__idxOfSec(sSectionId);

	//Get all accordion's sections
	var aSections = this.getSections();
	var oCurrentSection = aSections[iIndex];

	//Get all default sections that should be opened
	var aDefaultSections = this.getOpenedSectionsId().split(",");

	//If we are in a context that one opened section is required and that the section we are about to
	//close is the default one, we avoid closing and reopening it.
	/**
	if ((	this.activationMode == sap.ui.commons.Accordion.CARD_1_N || this.activationMode == sap.ui.commons.Accordion.CARD_1) &&
			this.getNumberOfOpenedSections() == 1 && jQuery.inArray(oCurrentSection.getId(),aDefaultSections) != -1) {
			return;
	}
	*/

	//Close the given section
	aSections[iIndex]._setCollapsed(true);
	//If there is no section opened and at least one is required to be, we open the default one to respect activationMode
	if ((this.activationMode == sap.ui.commons.Accordion.CARD_1_N || this.activationMode == sap.ui.commons.Accordion.CARD_1) && this.getNumberOfOpenedSections() == 0){
	  this.openDefaultSections();
	}

	//Trigger event for application to react
	this.fireSectionClose({closeSectionId:sSectionId});


};

/**
 * Closes all opened sections
 * @private
 */
sap.ui.commons.Accordion.prototype.closeOpenedSections = function(){

	var aClosedSections = [];
	var aSections = this.getSections();

	//Simply loop and close the sections already opened
	for(var i=0;i<aSections.length;i++){
		if ( aSections[i].getCollapsed() == false ){
			aSections[i]._setCollapsed(true);
			aClosedSections.push(aSections[i].getId());
		}
	}

	//Return all sections that were closed
	return aClosedSections;

};

/**
 * Opens the default section. Use to respect activationMode
 * @private
 */
sap.ui.commons.Accordion.prototype.openDefaultSections = function(){

	//Get all accordion's sections
	var aSections = this.getSections();

	//Loop trough all defaulted opened section and open them
	var aDefaultSections = this.getOpenedSectionsId().split(",");
	for(var i=0 ; i<aDefaultSections.length ; i++){
	  //From the default section ID to open, we retrieve the index
	  var oActiveSection = aSections[this.__idxOfSec(aDefaultSections[i])];
	  oActiveSection._setCollapsed(false);
	}

};

/**
 * Returns the number of currently opened sections
 * @return the number of currently opened sections
 * @private
 */
sap.ui.commons.Accordion.prototype.getNumberOfOpenedSections = function(){

	//Initialize the return parameter
	var openedSections  = 0;

	//Get all accordion's sections
	var aSections		= this.getSections();

	//Loop and sum up all opened sections
	for(var i=0;i<aSections.length;i++){
		if ( aSections[i].getCollapsed() == false ){
			openedSections++;
		}
	}
	return openedSections;
};


/***********************************************************************************
 * UTILITIES FUNCTIONS
 * List of all javascript utilities functions needed to achieve the required behavior
 ***********************************************************************************/

sap.ui.commons.Accordion.prototype.addSection = function(oSection) {

	this.addAggregation("sections", oSection);

	//Add a default opened section id
	if ( (this.getOpenedSectionsId() == null || this.getOpenedSectionsId() == "" ) && oSection.getEnabled()){
		this.setOpenedSectionsId(oSection.getId());
	}

	this.aSectionTitles.push(oSection.getTitle());

};

/**
 * Returns the index of the given section or id of a section.
 * @private
 */
sap.ui.commons.Accordion.prototype.__idxOfSec = function(oSection){
	if(typeof(oSection) == "string"){
		oSection = sap.ui.getCore().byId(oSection);
	}
	return this.indexOfSection(oSection);
};

/**
 * Redefinition of the method to add additional handling
 *
 * @param {string} sOpenedSectionsId  new value for property <code>openedSectionsId</code>
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.setOpenedSectionsId = function(sOpenedSectionsId) {

	var aSections = this.getSections();

	var aDefaultSections = sOpenedSectionsId.split(",");


	if(aDefaultSections.length==1){
		//it can be that the method is called from method AddSection. We don't want to intefere with those
		// call.
		if(this.__idxOfSec(sOpenedSectionsId) < 0){
			this.setProperty("openedSectionsId", sOpenedSectionsId);
			return this;
		}

		if(aSections[this.__idxOfSec(sOpenedSectionsId)].getEnabled()){
			//If the provided section is enabled
			this.setProperty("openedSectionsId", sOpenedSectionsId);
		}
		else{

			//If the provided section is disabled, the open section will be the first enable section starting for the top
			for(var i=0;i<aSections.length;i++){
				if(aSections[i].getEnabled()){
					this.setProperty("openedSectionsId", aSections[i].getId());
					return this;
				}
			}
		}


	}
	else if(aDefaultSections.length==0){
		//If the empty string is provided, we keep the automatically selected section(as selected in method AddSection).
		return this;

	}
	//Several sections were provided, but some can be disabled. Check each of them
	else{
		var sCheckIndices;

		for(var i=0;i<aDefaultSections.length;i++){
			if(aSections[this.__idxOfSec(aDefaultSections[i])].getEnabled()){

				if(sCheckIndices){
					sCheckIndices += "," + aDefaultSections[i];
					
					//only one section should be opened at once, so return after the first is set
					return;
				}
				else{
					sCheckIndices = aDefaultSections[i];
				}

			}
		}

		if(sCheckIndices){
			//If at least one section remains
			this.setProperty("openedSectionsId", sCheckIndices);
		}


	}

	return this;

};


/**
 * Returns AccordionSection Object corresponding to a given Section DOM Object
 * @param oDomSection The section in a DOM representation object
 * @return The current section control
 * @private
 */
sap.ui.commons.Accordion.prototype.getCorrespondingSection = function (oDomSection) {

	//Look for section index within accordion
	if(jQuery(oDomSection).hasClass("sapUiAcdSection") ){
		var aAccordion	= jQuery(oDomSection).parent();
		var oAccordion  = aAccordion[0];
		var aSections	= jQuery(oAccordion).children();
		var iIndex		= aSections.index( oDomSection );
		var aoSections	= this.getSections();
		//Remove 1 as we have the target div as first child
		return aoSections[iIndex-1];
	}

};

/**
 * Returns true if the current section being processed is the last one of the accordion
 * @param oSection the current section being processed
 * @return true if the current section being processed is the last one of the accordion
 * @private
 */
sap.ui.commons.Accordion.prototype.isLastSection = function(oSection) {

	//Get all accordion's sections
	var aSections = this.getSections();

	//Simply check in our internal array containing all titles
	/*if(aSections.indexOf(oSection) == aSections.length-1 ){*/
	if(jQuery.inArray(oSection,aSections) == aSections.length-1 ){
		return true;
	}
	else{
		return false;
	}

};

/**
 * Once the accordion is rendered, build the list of active controls that will be included
 * in the item navigation object. This support arrow keys navigation.
 * @private
 */
sap.ui.commons.Accordion.prototype.onAfterRendering = function () {

	//Collect the dom references of the items
	var oFocusRef = this.getDomRef(),
		aSections = oFocusRef.getElementsByTagName("SECTION"),
		aDomRefs = [];

	var accordion	  = this.getDomRef();
	var leftBorder	= jQuery(accordion).css("border-left-width");
	var rightBorder = jQuery(accordion).css("border-right-width");
	var borderTotal = parseFloat(leftBorder.substring(0, leftBorder.indexOf("px") )) +	parseFloat(rightBorder.substring(0, rightBorder.indexOf("px") ))
;
	accordion.style.height = accordion.offsetHeight - borderTotal -  1 + "px";


};
}; // end of sap.ui.commons.Accordion
if ( !jQuery.sap.isDeclared('sap.ui.commons.PaginatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

//Provides default renderer for control sap.ui.commons.Paginator
jQuery.sap.declare("sap.ui.commons.PaginatorRenderer");

/**
 * @class Paginator renderer.
 * @static
 */
sap.ui.commons.PaginatorRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be rendered
 */
sap.ui.commons.PaginatorRenderer.render = function(oRm, oPaginator){

	oRm.write("<div");
	oRm.writeControlData(oPaginator);
	oRm.write(" class='sapUiPag' role='toolbar' aria-labelledby='" + oPaginator.getId() + "-accDesc'>");
	oRm.write("<span class='sapUiPagAccDesc' id='" + oPaginator.getId() + "-accDesc'>Paginator</span>");

	this.renderPaginator(oRm, oPaginator);

	oRm.write("</div>");
};


/**
 * Builds the paginator
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be rendered
 */
sap.ui.commons.PaginatorRenderer.renderPaginator = function(oRm, oPaginator) {
	// First check if number of page is 1 or less, in this case, we do not render the paginator
	if (oPaginator.getNumberOfPages() <= 1) {
		return;
	}

	// Buffer paginator id for other ids concatenation
	var paginatorId = oPaginator.getId();
	var iCurrentPage = oPaginator.getCurrentPage();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");


	/************************************************************************************
	 * Render the Page 1 (first page link) when necessary, back arrow, back link
	 ************************************************************************************/
	var linkClass = (iCurrentPage == 1) ? "sapUiLnkDsbl" : "sapUiLnk";

	// First page link must only appear when at least 5 pages are available
	if (oPaginator.getNumberOfPages() > 5) {
		oRm.write("<a id='" + paginatorId + "--firstPageLink' href='javascript:void(0);' title='" + rb.getText("FIRST_PAGE") + "' ");
		oRm.write("class='sapUiPagBtn sapUiPagFirst " + linkClass + "'><span class='sapUiPagText'>");
		oRm.writeEscaped(rb.getText("PAGE") + " 1");
		oRm.write("</span></a>");
	}
	oRm.write("<a id='" + paginatorId + "--backLink' href='javascript:void(0);' title='" + rb.getText("PREVIOUS_PAGE") + "' ");
	oRm.write("class='sapUiPagBtn sapUiPagBack " + linkClass + "'><span class='sapUiPagText'>");
	oRm.writeEscaped(rb.getText("BACK"));
	oRm.write("</span></a>");



	/************************************************************************************
	 * Render the page numbers in a list
	 *************************************************************************************/
	oRm.write("<ul id='" + paginatorId + "-pages' role='presentation'>");
	oRm.write(sap.ui.commons.PaginatorRenderer.getPagesHtml(paginatorId, oPaginator._calculatePagesRange(), oPaginator.getCurrentPage(), true));
	oRm.write("</ul>");



	/************************************************************************************
	 * Render the forward link, forward arrow and last page link when necessary
	 *************************************************************************************/
	linkClass = (iCurrentPage == oPaginator.getNumberOfPages()) ? "sapUiLnkDsbl" : "sapUiLnk";

	oRm.write("<a id='" + paginatorId + "--forwardLink' href='javascript:void(0);' title='" + rb.getText("NEXT_PAGE") + "' ");
	oRm.write("class='sapUiPagBtn sapUiPagForward " + linkClass + "'><span class='sapUiPagText'>");
	oRm.writeEscaped(rb.getText("FORWARD"));
	oRm.write("</span></a>");
	if (oPaginator.getNumberOfPages() > 5) {
		oRm.write("<a id='" + paginatorId + "--lastPageLink' href='javascript:void(0);' title='" + rb.getText("LAST_PAGE") + "' ");
		oRm.write("class='sapUiPagBtn sapUiPagLast " + linkClass + "'><span class='sapUiPagText'>");
		oRm.write(oPaginator.getNumberOfPages());
		oRm.write("</span></a>");
	}
};


sap.ui.commons.PaginatorRenderer.getPagesHtml = function(sPaginatorId, oRange, iCurrent, bVisible) {
	var aHtml = [];
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// each single page link is an <li> with an <a> inside
	for (var i = oRange.firstPage; i <= oRange.lastPage; i++) {
		aHtml.push("<li id='" + sPaginatorId + "-li--" + i + "' class='sapUiPagPage");
		aHtml.push((i == iCurrent) ? " sapUiPagCurrentPage'" : "'");
		if (!bVisible) { // for those items to be animated into view
			aHtml.push(" style='display:none'");
		}
		aHtml.push(">");
		aHtml.push("<a id='" + sPaginatorId + "-a--" + i + "' title='" + rb.getText("PAGE") + " " + i + "'");
		if (i == iCurrent) {
			aHtml.push(" tabindex='0' class='sapUiLnkDsbl'");
		} else {
			 aHtml.push(" class='sapUiLnk'");
		}
		aHtml.push(">" + i + "</a>"); // TODO: clickable?! onPageClick
		aHtml.push("</li>");
	}

	return aHtml.join("");
};

/**
 * Updates the back/first/next/last page links
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be updated
 * @private
 */
sap.ui.commons.PaginatorRenderer.updateBackAndForward = function(oPaginator) {
	var page = oPaginator.getCurrentPage();
	var id = oPaginator.getId();

	var isFirst = (page == 1);
	var isLast = (page == oPaginator.getNumberOfPages());

	jQuery.sap.byId(id + "--firstPageLink").toggleClass("sapUiLnk", !isFirst).toggleClass("sapUiLnkDsbl", isFirst);
	jQuery.sap.byId(id + "--backLink").toggleClass("sapUiLnk", !isFirst).toggleClass("sapUiLnkDsbl", isFirst);
	jQuery.sap.byId(id + "--forwardLink").toggleClass("sapUiLnk", !isLast).toggleClass("sapUiLnkDsbl", isLast);
	jQuery.sap.byId(id + "--lastPageLink").toggleClass("sapUiLnk", !isLast).toggleClass("sapUiLnkDsbl", isLast);
};
}; // end of sap.ui.commons.PaginatorRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.DialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Dialog
jQuery.sap.declare("sap.ui.commons.DialogRenderer");

/**
 * @class  sap.ui.commons.DialogRenderer
 * @static
 */
sap.ui.commons.DialogRenderer = {};


/**
 * Renders the HTML for the Dialog, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.DialogRenderer.render = function(oRenderManager, oControl) {
	var rm = oRenderManager;

	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	var heightSet = sap.ui.commons.Dialog._isSizeSet(oControl.getHeight());
	var widthSet = sap.ui.commons.Dialog._isSizeSet(oControl.getWidth());

	oControl.getScrollTop();  // Update the scroll position properties
	oControl.getScrollLeft();

	var aButtons = oControl.getButtons();
	var iButtonCount = aButtons.length;


	// Root element and classes/styles
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiDlg");
	rm.addClass("sapUiDlgContentBorderDesign" + oControl.getContentBorderDesign());

	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.addStyle("min-width", oControl.getMinWidth());
	rm.addStyle("min-height", oControl.getMinHeight());
	rm.addStyle("max-width", oControl.getMaxWidth());
	rm.addStyle("max-height", oControl.getMaxHeight());

	if (!heightSet) {
		rm.addClass("sapUiDlgFlexHeight");
	}
	if (!widthSet) {
		rm.addClass("sapUiDlgFlexWidth");
	}
	if (iButtonCount == 0) {
		rm.addClass("sapUiDlgNoButtons");
	}
	if (!oControl.getApplyContentPadding()) {
		rm.addClass("sapUiDlgNoPad");
	}
	rm.writeClasses();
	rm.writeStyles();

	if (accessibility) {
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");
		rm.writeAttribute("role", oControl.getAccessibleRole().toLowerCase());
	}


	// Header
	rm.write("><span id='" + oControl.getId() + "-fhfe' tabIndex='0'></span><div class='sapUiDlgHdrL'></div><div class='sapUiDlgHdrR'></div><div id='" + oControl.getId() + "-hdr' class='sapUiDlgHdr'>");
	rm.write("<span class='sapUiDlgHdrLeft' id='" + oControl.getId() + "-hdrL'>");

	// Header label
	rm.write("<span id='" + oControl.getId() + "-lbl' class='sapUiDlgLabel'");

	if (accessibility) {
		rm.writeAttribute("role", "heading");
		rm.writeAttribute("aria-level", "1");
//		rm.writeAttribute("tabindex", "0");
	}

	rm.write(">");

	var title = oControl.getTitle();
	if (!title) {
		rm.write("&nbsp;");
	} else {
		rm.writeEscaped(title);
	}
	rm.write("</span>");
	rm.write("</span>");
	rm.write("<span id='" + oControl.getId() + "-hdrR' class='sapUiDlgHdrBtns'>");
	// Example for an additional button:   rm.write("<a class='sapUiDlgOptBtn'></a>");

	if (oControl.getShowCloseButton()) {
		rm.write("<a id='" + oControl.getId() + "-close' class='sapUiDlgCloseBtn' href='javascript:void(0)'");
		// FIXME according to Oliver Keim, the 'x' should not be tab-able
		rm.write(" tabIndex='-1'");
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		if (accessibility){
			rm.writeAttribute("role","button");
			rm.writeAttribute("aria-label", rb.getText("DIALOG_CLOSE_HELP"));
			//rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");
		}
		rm.writeAttribute('title', rb.getText("DIALOG_CLOSE_TEXT"));
		rm.write(">X</a>");
	}
	rm.write("</span></div>");


	// Content area
	rm.write("<div class='sapUiDlgContL'></div>"); // Can be used for styling irregular borders
	rm.write("<div class='sapUiDlgCont' id='" + oControl.getId() + "-cont' tabindex=\"-1\">");

	// Content
	var aChildren = oControl.getContent();
	for(var i = 0; i < aChildren.length; i++) {
		rm.renderControl(aChildren[i]);
	}
	rm.write("</div><div class='sapUiDlgContR'></div>");


	// Footer
	rm.write("<div class='sapUiDlgFooterL'></div><div class='sapUiDlgFooterR'></div><div id='");
	rm.write(oControl.getId());
	rm.write("-footer' class='sapUiDlgFooter'>");

	// Wave and Buttons
	rm.write("<div class='sapUiDlgBtns'>");
	for (var i = 0; i < iButtonCount; i++) {
		rm.renderControl(aButtons[i]);
	}
	rm.write("</div><div class='sapUiDlgWave'></div></div>");

	// Grip
	if (oControl.getResizable()) {
		rm.write("<span id='");
		rm.write(oControl.getId());
		rm.write("-grip' class='sapUiDlgGrip'>&#916;</span>");
	}

	// End of Dialog
	rm.write("<span id='" + oControl.getId() + "-fhee' tabIndex='0'></span></div>");

};
}; // end of sap.ui.commons.DialogRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.DropdownBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.DropdownBox
jQuery.sap.declare("sap.ui.commons.DropdownBoxRenderer");


/**
 * @class DropdownBox renderer.
 * @static
 */
sap.ui.commons.DropdownBoxRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ComboBoxRenderer);


/**
 * Renders ARIA information for the combobox (outer &lt;div&gt;)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.DropdownBoxRenderer.renderComboARIAInfo = function(rm, oDdb) {
//	nothing to do
};

/**
 * Renders ARIA information for the dropdownbox (outer &lt;div&gt;)
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.DropdownBoxRenderer.renderARIAInfo = function(rm, oDdb) {
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "combobox");
		var oACCInfo = {
				owns: oDdb._getListBox().getId(),
				autocomplete: "list",
				live: "polite",
				describedby: oDdb.getId()};
		if(oDdb.getValueState() == sap.ui.core.ValueState.Error){
			jQuery.extend(oACCInfo, {invalid: true});
		}
		rm.writeAccessibilityState(oDdb, oACCInfo);
	}
};
}; // end of sap.ui.commons.DropdownBoxRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.LabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Label
jQuery.sap.declare("sap.ui.commons.LabelRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class
 *
 * @author SAP - TD Core UI&AM UI Infra
 * @version 0.1
 * @static
 */
sap.ui.commons.LabelRenderer = {
//	sap.ui.core.Renderer.apply(this, arguments);
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.core.Control} oLabel An object representation of the control that should be rendered.
 */
sap.ui.commons.LabelRenderer.render = function(oRenderManager, oLabel) {
	// Some convenience variables.
	var rm = oRenderManager;
	var r = sap.ui.commons.LabelRenderer;

	// Return immediately if control is invisible
	if (!oLabel.getVisible()) {
		return;
	}

	var myStyles = "";

	rm.write("<label");
	rm.writeControlData(oLabel);

	if (oLabel.getLabelFor()) {
		var oFor = sap.ui.getCore().byId(oLabel.getLabelFor());
		rm.write(" for=\"");
		// for some controls the label must point to an special HTML element, not the outer one. 
		if ( oFor && oFor.getIdForLabel) {
			rm.write(oFor.getIdForLabel());
		} else{
			rm.write(oLabel.getLabelFor());
		}
		rm.write("\"");

		// check whether a 'required' marker is needed
		// control must exist, have a getter for property 'required' and a boolean value of true
		if ( oFor && oFor.getRequired && oFor.getRequired() === true ) {
			rm.addClass('sapUiLblReq');
		}
	}

	// Styles
	rm.addClass("sapUiLbl");
	if (oLabel.getDesign() == sap.ui.commons.LabelDesign.Bold) {
		rm.addClass("sapUiLblEmph");
	}

	// Text direction
	var oTextDir = oLabel.getTextDirection();
	if (oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}

	// Style for text alignment
	var oTextAlign = oLabel.getTextAlign();
	if(oTextAlign) {
		myStyles += "text-align:" + r.getTextAlign(oTextAlign, oTextDir) + ";";
	}

	// Style for width
	var sWidth = oLabel.getWidth();
	if(sWidth) {
		myStyles += "width:" + sWidth + ";";
	}

	rm.writeAttribute("style", myStyles);
	rm.writeClasses();

	// Close start tag
	rm.write(">");

	// Get image fragment if there is one, and write
	if (oLabel.getIcon()) {
		this.writeImgHtml(rm, oLabel);
	}

	// Write the label text
	if (oLabel.getText()) {
		if (!oLabel.getIcon()) {
			rm.writeEscaped(oLabel.getText());
		} else { // if there is an icon, an additional span is required
			rm.write("<span class=\"sapUiLblTxt\">");
			rm.writeEscaped(oLabel.getText());
			rm.write("</span>");
		}
	}

	// Close tag
	rm.write("</label>");
};


sap.ui.commons.LabelRenderer.writeImgHtml = function(oRenderManager, oLabel) {
	var rm = oRenderManager;
	var iconUrl = oLabel.getIcon();
	var oConfig = oRenderManager.getConfiguration();
	rm.write("<img");
	rm.writeAttributeEscaped("src", iconUrl);
	rm.writeAttributeEscaped("title", oLabel.getText());
	rm.addClass("sapUiLblIco");
	if (oLabel.getTextDirection()=="RTL" || (oLabel.getTextDirection()=="Inherit" && oConfig.getRTL())) {
		rm.addClass("sapUiLblIcoR");
	} else {
		rm.addClass("sapUiLblIcoL");
	}
	rm.writeClasses();
	rm.write("/>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.LabelRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap.ui.commons.LabelRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.HorizontalDivider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.HorizontalDivider.
jQuery.sap.declare("sap.ui.commons.HorizontalDivider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new HorizontalDivider.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>type : sap.ui.commons.HorizontalDividerType</li>
 * <li>height : sap.ui.commons.HorizontalDividerHeight</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Divides the screen in visual areas.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.HorizontalDivider = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.HorizontalDivider.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.HorizontalDivider. 
 * Resulting metadata can be obtained via sap.ui.commons.HorizontalDivider.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.HorizontalDivider", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getWidth", "setWidth", "getType", "setType", "getHeight", "setHeight"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
    "type" : {name : "type", type : "sap.ui.commons.HorizontalDividerType", group : "Appearance", defaultValue : sap.ui.commons.HorizontalDividerType.Area},
    "height" : {name : "height", type : "sap.ui.commons.HorizontalDividerHeight", group : "Appearance", defaultValue : sap.ui.commons.HorizontalDividerHeight.Medium}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * Invisible dividers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.HorizontalDivider.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.HorizontalDivider.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Defines the width of the divider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.HorizontalDivider.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.HorizontalDivider.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>type</code>.
 * Defines the type of the divider.
 *
 * Default value is <code>Area</code>
 *
 * @return {sap.ui.commons.HorizontalDividerType} the value of property <code>type</code>
 * @public
 * 
 */
sap.ui.commons.HorizontalDivider.prototype.getType = function() {
	return this.getProperty("type");
};

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Area</code> 
 *
 * @param {sap.ui.commons.HorizontalDividerType} oType  new value for property <code>type</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.HorizontalDivider.prototype.setType = function(oType) {
	this.setProperty("type", oType);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * Defines the height of the divider.
 *
 * Default value is <code>Medium</code>
 *
 * @return {sap.ui.commons.HorizontalDividerHeight} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.HorizontalDivider.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>Medium</code> 
 *
 * @param {sap.ui.commons.HorizontalDividerHeight} oHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.HorizontalDivider.prototype.setHeight = function(oHeight) {
	this.setProperty("height", oHeight);
	return this;
};


// Start of sap/ui/commons/HorizontalDivider.js
// No Behaviour
}; // end of sap.ui.commons.HorizontalDivider
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageToastRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.MessageToast
jQuery.sap.declare("sap.ui.commons.MessageToastRenderer");

/**
 * @class MessageToast renderer.
 * @static
 */
sap.ui.commons.MessageToastRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageToastRenderer.render = function(oRenderManager, oControl){
	// Convenience variable
	var rm = oRenderManager;

	// Opening the invisible outer-DIV container:
	// (Required to host the down-arrow.)
	// "classing" as per Type/Priority, for influencing the inner rendering:
	rm.write('<div class="' + oControl.getClasses() + '"');
	rm.writeControlData(oControl);
	rm.write('>');

		// Opening the inner-DIV message-container:
		rm.write('<div class="sapUiMsgToastMsg sapUiShd">');

			// Checking what message is to be toasted:
		  if (oControl.oMessage) {
			rm.renderControl(oControl.oMessage);
		  } else {
			// No message supplied. Rendering "Multiple new messages...":
				var sMultiMsgs = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons").getText("MSGTOAST_MULTI_MSGS");
				rm.write('<div class="sapUiMsg" tabindex="0"><span class="sapUiMsgTxt">' + sMultiMsgs + '</span></div>');
		  }

		// Closing the inner-DIV message-container:
		rm.write("</div>");

	  // Down-arrow:
		// (An "id" is provided as this arrow will have to point-back towards the right Bar icon.)
		// (This "Arrow" image is Type/Priority-dependent and theme-dependent.)
		rm.write('<div id="' + oControl.getId() + 'Arrow" class="sapUiMsgToastArrow"></div>');

	// Closing the invisible outer-DIV container:
	rm.write("</div>");
};
}; // end of sap.ui.commons.MessageToastRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RadioButton
jQuery.sap.declare("sap.ui.commons.RadioButtonRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RadioButton Renderer
 *
 * @author d046011
 * @version 0.1
 * @static
 */
sap.ui.commons.RadioButtonRenderer = {
};

/**
 * Renders the HTML for the RadioButton, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.RadioButton} oRadioButton The RadioButton control that should be rendered.
 */
sap.ui.commons.RadioButtonRenderer.render = function(oRenderManager, oRadioButton) {
	var rm = oRenderManager;

	// Return immediately if control is invisible
	if (!oRadioButton.getVisible()) {
		return;
	}

	rm.addClass("sapUiRb");

	// Open the containing <span> tag
	rm.write("<span");
	rm.writeControlData(oRadioButton);

	// ARIA
	rm.writeAttribute("role", "radio");
	rm.writeAccessibilityState(oRadioButton, {checked: oRadioButton.getSelected()===true,
											  invalid: oRadioButton.getValueState() == sap.ui.core.ValueState.Error,
											  disabled: !oRadioButton.getEditable()});

	// Collect state information
	var enabled = oRadioButton.getEnabled() != null && oRadioButton.getEnabled();
	var editable = oRadioButton.getEditable() != null && oRadioButton.getEditable();
	var inErrorState = false;
	var inWarningState = false;
	if (oRadioButton.getValueState() != null) {
		inErrorState = sap.ui.core.ValueState.Error == oRadioButton.getValueState();
		inWarningState = sap.ui.core.ValueState.Warning == oRadioButton.getValueState();
	}

	// Add classes and properties depending on the state
	if (oRadioButton.getSelected()) {
		rm.addClass("sapUiRbSel");
	}

	var myTabIndex = 0;
	var bReadOnly = false;

	if (!enabled) {
		myTabIndex = -1;
		bReadOnly = true;
		rm.addClass("sapUiRbDis");
	}
	if (!editable) {
		myTabIndex = -1;
		bReadOnly = true;
		rm.addClass("sapUiRbRo");
	}
	if (inErrorState) {
		rm.addClass("sapUiRbErr");
	} else if (inWarningState) {
		rm.addClass("sapUiRbWarn");
	}
	if (enabled && editable && !inErrorState && !inWarningState) {
		rm.addClass("sapUiRbStd");
	}
	if (enabled && editable) {
		rm.addClass("sapUiRbInteractive");
	}
	rm.writeClasses();

	if (oRadioButton.getWidth() && oRadioButton.getWidth() != '') {
		rm.writeAttribute("style", "width:" + oRadioButton.getWidth() + ";");
	}

	rm.writeAttribute("tabIndex", myTabIndex);

	rm.write(">"); // Close the containing <span> tag


	// Write the real - potentially hidden - HTML RadioButton element
	rm.write("<input type='radio' tabindex='-1' id='");
	rm.write(oRadioButton.getId());
	rm.write("-RB' name=\"");
	rm.write(oRadioButton.getGroupName());
	rm.write("\" ");
	if (oRadioButton.getSelected()) {
		rm.write(" checked='checked'");
	}
	if (!enabled) {
		rm.write(" disabled='disabled'");
	}
	var tooltip = oRadioButton.getTooltip_AsString();
	var tooltipToUse = sap.ui.core.ValueStateSupport.enrichTooltip(oRadioButton, tooltip ? tooltip : oRadioButton.getText());
	if (tooltipToUse) {
		rm.writeAttributeEscaped("title", tooltipToUse);
	}
	if(bReadOnly) {
		rm.write(" readonly='readonly'");
		rm.write(" disabled='disabled'");
	}
	if (oRadioButton.getKey()) {
		rm.writeAttribute("value", oRadioButton.getKey());
	}

	rm.write(" />"); // Close RadioButton-input-element


	// Write the RadioButton label which also holds the background image
	rm.write("<label");
	if (tooltipToUse) {
		rm.writeAttributeEscaped("title", tooltipToUse);
	}
	rm.writeAttribute("for", oRadioButton.getId() + "-RB"); // Label for RadioButton, so a click toggles the state
	if (!oRadioButton.getText()) {
		rm.write(" class=\"sapUiRbNoText\"");
	}
	rm.write(">");
	if (oRadioButton.getText()) {
		this.renderText(rm, oRadioButton.getText(), oRadioButton.getTextDirection());
	}
	rm.write("</label>");

	// Close the surrounding <span> element
	rm.write("</span>");
};

/**
 * Write RadioButton label - either flat, or, in case the text direction is different from the environment, within a <span> with an explicit "dir".
 */
sap.ui.commons.RadioButtonRenderer.renderText = function(oRenderManager, sText, eTextDirection) {
	var rm = oRenderManager;
	if (!eTextDirection || eTextDirection == sap.ui.core.TextDirection.Inherit){
		rm.writeEscaped(sText);
	} else {
		rm.write("<span dir=\"" + eTextDirection + "\">");
		rm.writeEscaped(sText);
		rm.write("</span>");
	}
};

sap.ui.commons.RadioButtonRenderer.setSelected = function(oRadioButton, bSelected) {

	jQuery.sap.byId(oRadioButton.getId()).toggleClass('sapUiRbSel', bSelected).attr('aria-checked', bSelected);
	if(bSelected){
		jQuery.sap.domById(oRadioButton.getId()+'-RB').checked = true;
		jQuery.sap.domById(oRadioButton.getId()+'-RB').setAttribute('checked', 'checked');
	}else{
		jQuery.sap.domById(oRadioButton.getId()+'-RB').checked = false;
		jQuery.sap.domById(oRadioButton.getId()+'-RB').removeAttribute('checked');
	}

};

}; // end of sap.ui.commons.RadioButtonRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.RoadMap
jQuery.sap.declare("sap.ui.commons.RoadMapRenderer");

(function() {

/**
 * @class RoadMap renderer.
 * @static
 */
sap.ui.commons.RoadMapRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.render = function(oRenderManager, oRoadMap){
	var rm = oRenderManager;

	oRoadMap.doBeforeRendering(); //Inform the Roadmap that the rendering starts

	if(!oRoadMap.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oRoadMap);
	rm.addClass("sapUiRoadMap");
	rm.writeClasses();
	rm.writeAttribute("tabIndex", "0");

	var sTooltip = oRoadMap.getTooltip_AsString();
	if(sTooltip){
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.writeAttribute("style", "width:"+(oRoadMap.getWidth() ? oRoadMap.getWidth() : "100%")+";");

	rm.write(">");

	renderDelimiter(rm, oRoadMap, true);

	rm.write("<ul");
	rm.writeAttribute("id", oRoadMap.getId() + "-steparea");
	rm.addClass("sapUiRoadMapStepArea");
	rm.writeClasses();

	//ARIA
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "group");
		rm.writeAttribute("aria-label", getText("RDMP_DEFAULT_TOOLTIP", []));
		if(sTooltip){
			rm.writeAttributeEscaped("title", sTooltip);
		}
	}

	rm.write(">");

	var aSteps = oRoadMap.getSteps();
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		if(oStep.getSubSteps().length > 0){ //is expandable?
			renderExpandableStep(rm, oRoadMap, oStep);
		}else{
			renderStep(rm, oRoadMap, oStep);
		}
	}

	rm.write("</ul>");

	renderDelimiter(rm, oRoadMap, false);

	rm.write("</div>");
};


/**
 * Updates the CSS classes of the Roadmap to select a new step.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sId the ID of the step which should be selected.
 * @private
 */
sap.ui.commons.RoadMapRenderer.selectStepWithId = function(oRoadMap, sId){
	var sCurrentId = oRoadMap.getSelectedStep();
	if(sCurrentId) {
		jQuery.sap.byId(sCurrentId).removeClass("sapUiRoadMapSelected");
	}
	if(sId) {
		jQuery.sap.byId(sId).addClass("sapUiRoadMapSelected");
	}
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		if(sCurrentId) {
			jQuery.sap.byId(sCurrentId+"-box").removeAttr("aria-checked");
		}
		if(sId) {
			jQuery.sap.byId(sId+"-box").attr("aria-checked", true);
		}
	}
};


/**
 * Updates the CSS classes of the Roadmap when a step is selected. If the step is an
 * expandable step the exapnd state is toggled.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.selectStepWithId</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the step which was selected.
 * @param {boolean} bIsSubStep indicator whether the given step is a sub step or not.
 * @param {boolean} bSkipAnim indicator whether animation should be used or not.
 * @param {function} fEndCallBack callback function which is called in the end with a string parameter indicating the operation which was done ("expanded", "collapsed", "selected")
 * @param {boolean} bSkipSelect indicator whether selection state should be switched or not.
 * @private
 */
sap.ui.commons.RoadMapRenderer.selectStep = function(oRoadMap, oStep, bIsSubStep, bSkipAnim, fEndCallBack, bSkipSelect){
	if(!bSkipSelect){
		//Select the step
		sap.ui.commons.RoadMapRenderer.selectStepWithId(oRoadMap, oStep.getId());
	}
	if(!bIsSubStep && oStep.getSubSteps().length > 0){
		//Expandable step -> Toggle the expand state

		var aSteps = oStep.getSubSteps();
		var jDomRef = jQuery.sap.byId(oStep.getId());
		var bIsExpanded = jDomRef.hasClass("sapUiRoadMapExpanded"); //Get the current expand state

		var iCounter = 1; //Must be in the end 0 when all animations are done (see fDoOnAnimComplete)

		var fDoOnAnimComplete = function(){ //Function called when an animation is done
			iCounter--;
			if(iCounter > 0) {
				return;
			}

			//Only do something if the last animation finishs
			if(fEndCallBack) {
				fEndCallBack(!bIsExpanded ? "expanded" : "collapsed");
			}
			sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
		};

		//Animation function to hide / show a step (depending on the current expand state)
		var fAnim = function(sId, bOpen, fComplete){
			var jRef = jQuery.sap.byId(sId);
			if(!jQuery.fx.off && !bSkipAnim){ //Animation only if turned on globally and if should not be skipped
				jRef.width(bOpen ? "0px" : oRoadMap.iStepWidth);
				var oLabel = jQuery.sap.byId(sId+"-label");
				oLabel.addClass("sapUiRoadMapHidden");
				if(bOpen) {
					jRef.toggleClass("sapUiRoadMapHidden");
				}
				jRef.animate({width: bOpen ? oRoadMap.iStepWidth : "0px"}, "fast", function(){
					if(!bOpen) {
						jRef.toggleClass("sapUiRoadMapHidden");
					}
					jRef.width("");
					oLabel.removeClass("sapUiRoadMapHidden");
					if(fComplete) {
						fComplete();
					}
				});
			}else{
				jRef.toggleClass("sapUiRoadMapHidden");
				if(fComplete) {
					fComplete();
				}
			}
		};

		//Change the expand state of the step immediately
		jDomRef.toggleClass("sapUiRoadMapExpanded");

		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			var bExp = jDomRef.hasClass("sapUiRoadMapExpanded");
			jQuery.sap.byId(oStep.getId()+"-box").attr("aria-expanded", bExp);
			jQuery.sap.byId(oStep.getId()+"-expandend-box").attr("aria-expanded", bExp);
		}

		//Hide / Show the sub steps
		for(var i=0; i<aSteps.length; i++){
			if(aSteps[i].getVisible()){
				iCounter++;
				fAnim(aSteps[i].getId(), !bIsExpanded, fDoOnAnimComplete);
			}
		}
		//Hide / Show the end step
		fAnim(oStep.getId()+"-expandend", !bIsExpanded, fDoOnAnimComplete);
	}else{
		if(fEndCallBack) {
			fEndCallBack("selected");
		}
	}
};


/**
 * Recalculates the width of the step area and updates the delimiters.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.updateStepArea = function(oRoadMap){
	if(oRoadMap.iStepWidth != -1){
		var jStepAreaRef = jQuery.sap.byId(oRoadMap.getId() + "-steparea");
		var jStartDelimRef = jQuery.sap.byId(oRoadMap.getId() + "-Start");
		var jEndDelimRef = jQuery.sap.byId(oRoadMap.getId() + "-End");
		var jRoadMapRef = jQuery.sap.byId(oRoadMap.getId());

		var iScrollLeft = jStepAreaRef.scrollLeft();

		var iAvailableSpaceForSteps = jRoadMapRef.width() - jStartDelimRef.outerWidth(true) - jEndDelimRef.outerWidth(true);
		var iMaxVisibleSteps = oRoadMap.getNumberOfVisibleSteps();
		var iCurrentMaxVisibleSteps = getNumberOfPotentiallyVisibleSteps(oRoadMap);
		if(iMaxVisibleSteps < 1){
			iMaxVisibleSteps = iCurrentMaxVisibleSteps;
		}else{
			iMaxVisibleSteps = Math.min(iMaxVisibleSteps, iCurrentMaxVisibleSteps);
		}

		var iPossibleSteps = Math.floor(iAvailableSpaceForSteps / oRoadMap.iStepWidth);
		var iNumberOfVisibleSteps = Math.min(iMaxVisibleSteps, iPossibleSteps);
		jStepAreaRef.width(iNumberOfVisibleSteps * oRoadMap.iStepWidth).scrollLeft(iScrollLeft);

		updateDelimiters(oRoadMap);
	}
};


/**
 * Recalculates the width of the step area and updates the delimiters and sets the
 * focus either to the specified first visible step of the Roadmap (if not exists the first visible
 * step is focused).
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.updateStepArea</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {boolean} bSkipScrollState if false the function does the same as <code>sap.ui.commons.RoadMapRenderer.updateStepArea</code>
 * @private
 */
sap.ui.commons.RoadMapRenderer.updateScrollArea = function(oRoadMap, bSkipScrollState){
	sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
	if(!bSkipScrollState){
		var jStepArea = jQuery.sap.byId(oRoadMap.getId() + "-steparea");
		var oPos = getStepEndPosition(oRoadMap, false);
		if(oRoadMap.getFirstVisibleStep()){
			var jStep = jQuery.sap.byId(oRoadMap.getFirstVisibleStep());
			oPos = getPositionLeft(jStepArea, jStep);
		}
		updateScrollState(oRoadMap, oPos + getRTLFactor()*jStepArea.scrollLeft(), true);
	}
};


/**
 * Checks whether the step with the given Id is currently in the visible part of the scroll area.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sId the ID of the step which should be checked.
 * @private
 */
sap.ui.commons.RoadMapRenderer.isVisibleRef = function(oRoadMap, sId){
	var jStepArea = jQuery.sap.byId(oRoadMap.getId() + "-steparea");
	var jStepAreaChildren = jStepArea.children(":visible");
	for(var i=0; i<jStepAreaChildren.length; i++){
		var jChild = jQuery(jStepAreaChildren.get(i));
		if(jChild.attr("id") == sId){
			var iPos = getPositionLeft(jStepArea, jChild);
			return iPos >= 0 && iPos < jStepArea.width();
		}
	}
	return false;
};


/**
 * Returns the Id of the first step in the visible part of the scroll area.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.getFirstVisibleRef = function(oRoadMap){
	var jStepArea = jQuery.sap.byId(oRoadMap.getId() + "-steparea");
	var jStepAreaChildren = jStepArea.children(":visible");
	for(var i=0; i<jStepAreaChildren.length; i++){
		var jChild = jQuery(jStepAreaChildren.get(i));
		if(getPositionLeft(jStepArea, jChild) == 0){
			return jChild;
		}
	}
	return null;
};


/**
 * Updates the label text of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Element} oStep the Step for which the label should be changed.
 * @param {string} sLabel the new label.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepLabel = function(oStep, sLabel){
	var l = sLabel ? jQuery.sap.escapeHTML(sLabel) : "";
	jQuery.sap.byId(oStep.getId()+"-label").html(l);
	jQuery.sap.byId(oStep.getId()+"-expandend-label").html(l);
};


/**
 * Updates the enabled state of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the Step for which the state should be changed.
 * @param {boolean} bEnabled the enabled state.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepEnabled = function(oRoadMap, oStep, bEnabled){
	var jRef = jQuery.sap.byId(oStep.getId());
	var jRef2 = jQuery.sap.byId(oStep.getId()+"-expandend");
	if(bEnabled){
		jRef.removeClass("sapUiRoadMapDisabled");
		jRef2.removeClass("sapUiRoadMapDisabled");
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			jQuery.sap.byId(oStep.getId()+"-box").removeAttr("aria-disabled");
			jQuery.sap.byId(oStep.getId()+"-expandend-box").removeAttr("aria-disabled");
		}
		return false;
	}else{
		var bSelected = oRoadMap.getSelectedStep() == oStep.getId();
		if(bSelected) {
			jRef.removeClass("sapUiRoadMapSelected");
		}
		jRef.addClass("sapUiRoadMapDisabled");
		jRef2.addClass("sapUiRoadMapDisabled");
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			var jRefBox = jQuery.sap.byId(oStep.getId()+"-box");
			jRefBox.attr("aria-disabled", true);
			if(bSelected) {
				jRefBox.removeAttr("aria-checked");
			}
			jQuery.sap.byId(oStep.getId()+"-expandend-box").attr("aria-disabled", true);
		}
		return bSelected;
	}
};


/**
 * Updates the visible state of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the Step for which the state should be changed.
 * @param {boolean} bIsSubStep indicates whether the given step is a substep or not
 * @param {boolean} bVisible the visible state.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepVisible = function(oRoadMap, oStep, bIsSubStep, bVisible){
	var jRef = jQuery.sap.byId(oStep.getId());
	var jRef2 = jQuery.sap.byId(oStep.getId()+"-expandend");
	var bSelected = oRoadMap.getSelectedStep() == oStep.getId();

	var oParent = oStep.getParent();
	if(bIsSubStep){
		if(oParent.getEnabled() && oParent.getVisible() && oParent.getExpanded()){
			if(bVisible){
				jRef.removeClass("sapUiRoadMapHidden");
			}else{
				jRef.addClass("sapUiRoadMapHidden");
			}
		}
	}else{
		if(bVisible){
			jRef.removeClass("sapUiRoadMapHidden");
		}else{
			jRef.addClass("sapUiRoadMapHidden");
		}

		var aSteps = oStep.getSubSteps();
		if(aSteps.length > 0 && oStep.getExpanded()){
			if(bVisible){
				jRef2.removeClass("sapUiRoadMapHidden");
			}else{
				jRef2.addClass("sapUiRoadMapHidden");
			}

			for(var i=0; i<aSteps.length; i++){
				if(aSteps[i].getVisible()){
					var jRef3 = jQuery.sap.byId(aSteps[i].getId());
					if(oRoadMap.getSelectedStep() == aSteps[i].getId()){
						bSelected = true;
						jRef3.removeClass("sapUiRoadMapSelected");
						jQuery.sap.byId(aSteps[i].getId()+"-box").removeAttr("aria-checked");
					}
					if(bVisible){
						jRef3.removeClass("sapUiRoadMapHidden");
					}else{
						jRef3.addClass("sapUiRoadMapHidden");
					}
				}
			}
		}
	}

	return bSelected;
};


/**
 * Updates the width of the Roadmap
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sWidth the new width.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setRoadMapWidth = function(oRoadMap, sWidth){
	var jRef = jQuery.sap.byId(oRoadMap.getId());
	jRef.attr("style", "width:"+(sWidth ? sWidth : "100%")+";");
};


/**
 * Scrolls according to the given direction.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.getFirstVisibleRef</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sDir the scroll direction (allowed are "next", "prev", "first", "last")
 * @param {function} fEndCallBack callback function which is called in the end with a string parameter indicating the id of the new first visible step
 * @private
 */
sap.ui.commons.RoadMapRenderer.scrollToNextStep = function(oRoadMap, sDir, fEndCallBack){
	var oPos = sDir;
	if(sDir == "first" || sDir == "last") {
		oPos = getStepEndPosition(oRoadMap, sDir == "last");
	}
	updateScrollState(oRoadMap, oPos, false, fEndCallBack);
};


/**
 * Shortens the label of the given step and adds ellipses if necessary
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Element} oStep the Step for which the label should be adapted
 * @private
 */
sap.ui.commons.RoadMapRenderer.addEllipses = function(oStep){
	if(!oStep) {
		return;
	}

	var jStepLabel = jQuery.sap.byId(oStep.getId()+"-label");
	var sOriginalText = jQuery.sap.escapeHTML(oStep.getLabel());
	var sText = sOriginalText + "";

	var jClone = jQuery("<label class=\"sapUiRoadMapTitle\" style=\"display:none;position:absolute;overflow:visible;font-weight:bold;height:auto\">"+sText+"</label>");
	jClone.width(jStepLabel.width());
	jQuery(sap.ui.getCore().getStaticAreaRef()).append(jClone);

	var bIsShortened = false;
	while(sText.length > 0 && jClone.height() > jStepLabel.height()){
		//TODO: Do we need special RTL handling here?
		sText = sText.substr(0, sText.length - 1);
		jClone.html(sText + "...");
		bIsShortened = true;
	}

	if(bIsShortened){
		var sHTML = jClone.html();
		sHTML = sHTML.substr(0, sHTML.length - 3);
		sHTML = jQuery.sap.escapeHTML(sHTML);
		sHTML = "<span>" +sHTML + "</span>";
		jStepLabel.html(sHTML);
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			jStepLabel.attr("aria-label", oStep.getLabel());
		}
		jStepLabel.attr("title", oStep.getLabel());
	}else{
		jStepLabel.removeAttr("aria-label");
		jStepLabel.attr("title", getStepTooltip(oStep));
	}

	jClone.remove();
};


//********* Private *********


//Writes the delimiter HTML into the rendermanger
var renderDelimiter = function(rm, oRoadMap, bStart){
	var sType = bStart ? "Start" : "End";
	rm.write("<div");
	rm.writeAttribute("id", oRoadMap.getId() + "-" + sType);
	rm.writeAttribute("tabindex", "-1");
	var hasHiddenSteps = true; //Simply assume that there are hidden steps -> updated later (see function updateScrollState)
	rm.addClass(hasHiddenSteps ? "sapUiRoadMap" + sType + "Scroll" : "sapUiRoadMap" + sType + "Fixed");
	rm.addClass("sapUiRoadMapDelim");
	rm.addClass("sapUiRoadMapContent");
	rm.writeClasses();
	rm.write("></div>");
};


//Writes the step HTML into the rendermanger
var renderStep = function(rm, oRoadMap, oStep, aAdditionalClasses, fAddAdditionalBoxContent, sId){
	rm.write("<li");
	if(sId){ //Write the given Id if available, otherwise use writeControlData
		rm.writeAttribute("id", sId);
	}else{
		rm.writeControlData(oStep);
	}
	var sStepName = getStepName(oRoadMap, oStep);
	oStep.__stepName = sStepName;
	var sTooltip = getStepTooltip(oStep);

	rm.addClass("sapUiRoadMapContent");
	rm.addClass("sapUiRoadMapStep");
	if(!oStep.getVisible()) {
		rm.addClass("sapUiRoadMapHidden");
	}
	if(oStep.getEnabled()){
		if(oRoadMap.getSelectedStep() == oStep.getId()) {
			rm.addClass("sapUiRoadMapSelected");
		}
	}else{
		rm.addClass("sapUiRoadMapDisabled");
	}
	if(aAdditionalClasses){ //Write additional CSS classes if available
		for(var i=0; i<aAdditionalClasses.length; i++){
			rm.addClass(aAdditionalClasses[i]);
		}
	}
	rm.writeClasses();

	rm.write(">");

	renderAdditionalStyleElem(rm, sId ? sId : oStep.getId(), 1);

	rm.write("<div");
	rm.writeAttribute("id", (sId ? sId : oStep.getId()) + "-box");
	rm.writeAttribute("tabindex", "-1");
	rm.addClass("sapUiRoadMapStepBox");
	rm.writeClasses();
	rm.writeAttributeEscaped("title", sTooltip);

	writeStepAria(rm, oRoadMap, oStep, fAddAdditionalBoxContent ? true : false);

	rm.write("><span>");
	rm.write(sStepName);
	rm.write("</span>");

	//Call callback function to render additional content
	if(fAddAdditionalBoxContent) {
		fAddAdditionalBoxContent(rm, oRoadMap, oStep);
	}

	rm.write("</div>");

	rm.write("<label");
	rm.writeAttribute("id", (sId ? sId : oStep.getId()) + "-label");
	rm.writeAttribute("for", (sId ? sId : oStep.getId()) + "-box");
	rm.addClass("sapUiRoadMapTitle");
	rm.writeAttributeEscaped("title", sTooltip);
	rm.writeClasses();
	rm.write(">");
	var sLabel = oStep.getLabel();
	if(sLabel) {
		rm.writeEscaped(sLabel);
	}
	rm.write("</label>");

	renderAdditionalStyleElem(rm, sId ? sId : oStep.getId(), 2);

	rm.write("</li>");
};


//Returns the tooltip of the given step
var getStepTooltip = function(oStep){
	var sTooltip = oStep.getTooltip_AsString();
	if(!sTooltip){
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			sTooltip = getText("RDMP_DEFAULT_STEP_TOOLTIP", [oStep.__stepName]);
		}else{
			sTooltip = "";
		}
	}
	return sTooltip;
};


//Writes the additonal style HTML into the rendermanger (see renderStep)
var renderAdditionalStyleElem = function(rm, sId, iIdx){
	rm.write("<div");
	rm.writeAttribute("id", sId + "-add" + iIdx);
	rm.addClass("sapUiRoadMapStepAdd" + iIdx);
	rm.writeClasses();
	rm.write("></div>");
};


//Writes the ARIA properties of a step
var writeStepAria = function(rm, oRoadMap, oStep, bIsExpandable){
	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}

	rm.writeAttribute("role", "treeitem");

	if(oStep.getEnabled()){
		rm.writeAttribute("aria-checked", oRoadMap.getSelectedStep() == oStep.getId());
	}else{
		rm.writeAttribute("aria-disabled", true);
	}
	rm.writeAttribute("aria-haspopup", bIsExpandable);
	rm.writeAttribute("aria-level", oStep.getParent() instanceof sap.ui.commons.RoadMap ? 1 : 2);

	if(!bIsExpandable) {
		return;
	}

	rm.writeAttribute("aria-expanded", oStep.getExpanded());
};


//Writes the step HTML of the expandable step and its children into the rendermanger
var renderExpandableStep = function(rm, oRoadMap, oStep){
	var fCreateIcon = function(rm, oRoadMap, sId, sIcon, sAdditonalClass){
		rm.write("<div");
		rm.writeAttribute("id", sId + "-ico");
		rm.addClass("sapUiRoadMapStepIco");
		if(sAdditonalClass) {
			rm.addClass(sAdditonalClass);
		}
		rm.writeClasses();
		rm.write("></div>");
	};

	var bIsExpanded = oStep.getExpanded();

	//Render the start step with an additional icon
	renderStep(rm, oRoadMap, oStep, bIsExpanded ? ["sapUiRoadMapExpanded"] : null, function(rm, oRoadMap, oStep){
		fCreateIcon(rm, oRoadMap, oStep.getId(), bIsExpanded ? "roundtripstart.gif" : "roundtrip.gif");
	});

	//Render the sub steps
	var aSteps = oStep.getSubSteps();
	for(var i=0; i<aSteps.length; i++){
		var aClasses = ["sapUiRoadMapSubStep"];
		if(!bIsExpanded && aSteps[i].getVisible()) {
			aClasses.push("sapUiRoadMapHidden");
		}
		renderStep(rm, oRoadMap, aSteps[i], aClasses);
	}

	//Render the end step with an additional icon
	aClasses = ["sapUiRoadMapExpanded", "sapUiRoadMapStepEnd"];
	if(!bIsExpanded) {
		aClasses.push("sapUiRoadMapHidden");
	}
	renderStep(rm, oRoadMap, oStep, aClasses, function(rm, oRoadMap, oStep){
		fCreateIcon(rm, oRoadMap, oStep.getId()+"-expandend", "roundtripend.gif");
	}, oStep.getId()+"-expandend");
};


//Returns the name of the step according to its index in the aggregation (like "1", "a", "aa")
var getStepName = function(oRoadMap, oStep){
	var oParent = oStep.getParent();
	if(oParent === oRoadMap) {
		return oParent.indexOfStep(oStep) + 1;
	}

	var iIdx = oParent.indexOfSubStep(oStep);

	if(iIdx < 26) {
		return String.fromCharCode(97+iIdx);
	} // Single character

	//Double characters Substeps name are formed of 2 letters (e.g. "aa"). -> so overall 702 substeps possible
	var firstCharIdx = Math.floor(iIdx/26) - 1;
	var secondCharIdx = iIdx % 26;
	return String.fromCharCode(97+firstCharIdx, 97+secondCharIdx);
};


//Refreshs teh delimiters according to the current scroll state
var updateDelimiters = function(oRoadMap){
	var iRTLFactor = getRTLFactor();

	var jStepArea = jQuery.sap.byId(oRoadMap.getId() + "-steparea");

	var iScrollLeft = getScrollLeft(jStepArea);

	var jStartDelim = jQuery.sap.byId(oRoadMap.getId() + "-Start");
	jStartDelim.removeClass("sapUiRoadMapStartScroll").removeClass("sapUiRoadMapStartFixed");
	jStartDelim.addClass(iRTLFactor*iScrollLeft >= oRoadMap.iStepWidth ? "sapUiRoadMapStartScroll" : "sapUiRoadMapStartFixed");

	var jEndDelim = jQuery.sap.byId(oRoadMap.getId() + "-End");
	jEndDelim.removeClass("sapUiRoadMapEndScroll").removeClass("sapUiRoadMapEndFixed");
	var bEndReached = jStepArea.get(0).scrollWidth - iRTLFactor*iScrollLeft - jStepArea.width() < oRoadMap.iStepWidth;
	jEndDelim.addClass(bEndReached ? "sapUiRoadMapEndFixed" : "sapUiRoadMapEndScroll");
};


//Returns the translatable text according to the given key and arguments
var getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};


//Returns the number of steps which currently could be visible
//(Must be visible and for substeps the parent must be expanded)
var getNumberOfPotentiallyVisibleSteps = function(oRoadMap){
	var counter = 0;
	var aSteps = oRoadMap.getSteps();
	for(var i=0; i<aSteps.length; i++){
		if(aSteps[i].getVisible()){
			counter++;
			if(aSteps[i].getExpanded()){
				counter++; //End of Expanded Step
				var aSubSteps = aSteps[i].getSubSteps();
				for(var j=0; j<aSubSteps.length; j++){
					if(aSubSteps[j].getVisible()) {
						counter++;
					}
				}
			}
		}
	}
	return counter;
};


//Returns the position left attribute of the given step within the scroll area
var getPositionLeft = function(jStepArea, jStep){
	var iPos = jStep.position().left;
	if(sap.ui.getCore().getConfiguration().getRTL()){ //Recompute in RTL case
		iPos = jStepArea.width() - iPos - jStep.outerWidth();
	}
	return iPos;
};


//Returns a factor which is needed in some browsers in RTL mode to make the position and scroll calculations running:
//Scrolling in RTL is quite strange in the different browsers:
//  -Firefox: right side has scrollleft=0, scrolling is indicated with negative values
//  -IE:      right side has scrollleft=0, scrolling is indicated with positive values
//  -Safari:  left side has scrollleft=0, scrolling is indicated with positive values
var getRTLFactor = function(){
	return sap.ui.getCore().getConfiguration().getRTL() && !jQuery.browser.msie ? -1 : 1;
};


//Calculates the scroll left attribute (with fix for Safari in RTL mode) to make the position and scroll calculations running
//(see comment on getRTLFactor for RTL behavior)
var getScrollLeft = function(jStepArea){
	if(sap.ui.getCore().getConfiguration().getRTL() && jQuery.browser.webkit){
		return (-1)*(jStepArea.get(0).scrollWidth - jStepArea.scrollLeft() - jStepArea.width());
	}
	return jStepArea.scrollLeft();
};


//Calculates the position of the fisrt/last step (with fix for Safari in RTL mode) to make the position and scroll calculations running
//(see comment on getRTLFactor for RTL behavior)
var getStepEndPosition = function(oRoadMap, bLast){
	var iScrollWidth = jQuery.sap.byId(oRoadMap.getId() + "-steparea").get(0).scrollWidth;
	if(sap.ui.getCore().getConfiguration().getRTL() && jQuery.browser.webkit){
		return bLast ? 0 : (-1)*iScrollWidth;
	}
	return bLast ? iScrollWidth : 0;
};


//Scrolls to the given position
var updateScrollState = function(oRoadMap, iNewPos, bSkipAnim, fEndCallBack){
	var jStepArea = jQuery.sap.byId(oRoadMap.getId() + "-steparea");
	jStepArea.stop(false, true);

	if(iNewPos == "next"){
		iNewPos = jStepArea.scrollLeft() + oRoadMap.iStepWidth*getRTLFactor();
	}else if(iNewPos == "prev"){
		iNewPos = jStepArea.scrollLeft() - oRoadMap.iStepWidth*getRTLFactor();
	}else if(iNewPos == "keep"){
		iNewPos = jStepArea.scrollLeft();
	}else{
		iNewPos = iNewPos*getRTLFactor();
	}

	var fDoAfterScroll = function(){
		updateDelimiters(oRoadMap);

		if(fEndCallBack){
			var jFirstVisibleRef = sap.ui.commons.RoadMapRenderer.getFirstVisibleRef(oRoadMap);
			fEndCallBack(jFirstVisibleRef.attr("id"));
		}
	};

	if(!jQuery.fx.off && !bSkipAnim){
		jStepArea.animate({scrollLeft: iNewPos}, "fast", fDoAfterScroll);
	}else{
		jStepArea.scrollLeft(iNewPos);
		fDoAfterScroll();
	}
};


}());
}; // end of sap.ui.commons.RoadMapRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Link') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Link.
jQuery.sap.declare("sap.ui.commons.Link");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Link.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li>
 * <li>helpId : string</li>
 * <li>href : string</li>
 * <li>target : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>press : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Using this control, you provide an absolute or relative reference to an internal or external URL. The classical target parameters are supported. Another usage scenario is triggering an action, for example to open a popup window. In both cases, the link is a hypertext link.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Link = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Link.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Link. 
 * Resulting metadata can be obtained via sap.ui.commons.Link.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Link", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getText", "setText", "getEnabled", "setEnabled", "getVisible", "setVisible", "getHelpId", "setHelpId", "getHref", "setHref", "getTarget", "setTarget", 
    // aggregations
    
    // associations
    
    // events
    "attachPress", "detachPress", 
    // methods
    "focus"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : ''},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "", defaultValue : true},
    "helpId" : {name : "helpId", type : "string", group : "Behavior", defaultValue : ''},
    "href" : {name : "href", type : "string", group : "Data", defaultValue : null},
    "target" : {name : "target", type : "string", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "press" : "press"
  }

});	

sap.ui.commons.Link.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * 
 * Link text to be displayed.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled controls have different colors, depending on customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible links are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>helpId</code>.
 * 
 * Unique identifier used for help service.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getHelpId = function() {
	return this.getProperty("helpId");
};

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setHelpId = function(sHelpId) {
	this.setProperty("helpId", sHelpId);
	return this;
};


/**
 * Getter for property <code>href</code>.
 * 
 * Supports standard hyperlink behavior.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>href</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getHref = function() {
	return this.getProperty("href");
};

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHref  new value for property <code>href</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setHref = function(sHref) {
	this.setProperty("href", sHref);
	return this;
};


/**
 * Getter for property <code>target</code>.
 * 
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * 
 */
sap.ui.commons.Link.prototype.getTarget = function() {
	return this.getProperty("target");
};

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.setTarget = function(sTarget) {
	this.setProperty("target", sTarget);
	return this;
};


/**
 * 
 * Event is fired when the user clicks the control.
 *  
 *
 * @name sap.ui.commons.Link#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Link</code>.<br/>
 * 
 * Event is fired when the user clicks the control.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.attachPress = function(oData, fnFunction, oListener) {
	this.attachEvent("press", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Link</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Link.prototype.detachPress = function(fnFunction, oListener) {
	this.detachEvent("press", fnFunction, oListener);
	return this;	
};

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.Link.prototype.firePress = function(mArguments) {
	this.fireEvent("press", mArguments);
	return this;
};


/**
 * Puts the focus to the link.
 *
 * @name sap.ui.commons.Link.prototype.focus
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/Link.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.apply(sap.ui.commons.Link.prototype, [true]);

/**
 * Function is called when Link is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Link.prototype.onclick = function(oEvent) {
	if (this.getEnabled()) {
		this.firePress({/* no parameters */});
	}
};
}; // end of sap.ui.commons.Link
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.MessageList
jQuery.sap.declare("sap.ui.commons.MessageListRenderer");

/**
 * @class MessageList renderer.
 * @static
 */
sap.ui.commons.MessageListRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageListRenderer.render = function(oRenderManager, oControl){
	// Convenience variable
	var rm = oRenderManager;

	// Opening the outer container:
  rm.write('<ul class="sapUiMsgList"');
  rm.writeControlData(oControl);
  rm.write(">");

	  // Rendering all supplied messages:
	  // Most recent messages were pushed in last, so looping in reversed order
	  // to display those first.
		for (var i=oControl.aMessages.length-1; i>=0; i--) {
		  rm.write('<li class="sapUiMsgListLi">');
		  rm.renderControl(oControl.aMessages[i]);
		  rm.write("</li>");
		} // end for

  // Closing container:
  rm.write("</ul>");
};
}; // end of sap.ui.commons.MessageListRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.TreeNode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TreeNode.
jQuery.sap.declare("sap.ui.commons.TreeNode");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new TreeNode.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>expanded : boolean</li>
 * <li>hasExpander : boolean</li>
 * <li>icon : string</li>
 * <li>isSelected : boolean</li>
 * <li>selectable : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>nodes : sap.ui.commons.TreeNode</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>toggleOpenState : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>selected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Tree node element
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.TreeNode = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.TreeNode.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.TreeNode. 
 * Resulting metadata can be obtained via sap.ui.commons.TreeNode.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.TreeNode", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getExpanded", "setExpanded", "getHasExpander", "setHasExpander", "getIcon", "setIcon", "getIsSelected", "setIsSelected", "getSelectable", "setSelectable", 
    // aggregations
    "getNodes", "insertNode", "addNode", "removeNode", "removeAllNodes", "indexOfNode", "destroyNodes", 
    // associations
    
    // events
    "attachToggleOpenState", "detachToggleOpenState", "attachSelected", "detachSelected", 
    // methods
    "select", "expand", "collapse"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null},
    "expanded" : {name : "expanded", type : "boolean", group : "Misc", defaultValue : true},
    "hasExpander" : {name : "hasExpander", type : "boolean", group : "Misc", defaultValue : false},
    "icon" : {name : "icon", type : "string", group : "Misc", defaultValue : null},
    "isSelected" : {name : "isSelected", type : "boolean", group : "Misc", defaultValue : false},
    "selectable" : {name : "selectable", type : "boolean", group : "Misc", defaultValue : true}
  },
  defaultAggregation : "nodes",
  aggregations : {
    "nodes" : {name : "nodes", type : "sap.ui.commons.TreeNode", multiple : true, singularName : "node"}
  },
  associations : {},
  events : {
    "toggleOpenState" : "toggleOpenState", 
    "selected" : "selected"
  }

});	

sap.ui.commons.TreeNode.M_EVENTS = {'toggleOpenState':'toggleOpenState','selected':'selected'};


/**
 * Getter for property <code>text</code>.
 * Node text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>expanded</code>.
 * Node is expanded
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getExpanded = function() {
	return this.getProperty("expanded");
};

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setExpanded = function(bExpanded) {
	this.setProperty("expanded", bExpanded);
	return this;
};


/**
 * Getter for property <code>hasExpander</code>.
 * Should the node has an expander.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hasExpander</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getHasExpander = function() {
	return this.getProperty("hasExpander");
};

/**
 * Setter for property <code>hasExpander</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHasExpander  new value for property <code>hasExpander</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setHasExpander = function(bHasExpander) {
	this.setProperty("hasExpander", bHasExpander);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * Icon to display in front of the node
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>isSelected</code>.
 * Node is selected
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isSelected</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getIsSelected = function() {
	return this.getProperty("isSelected");
};

/**
 * Setter for property <code>isSelected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsSelected  new value for property <code>isSelected</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setIsSelected = function(bIsSelected) {
	this.setProperty("isSelected", bIsSelected);
	return this;
};


/**
 * Getter for property <code>selectable</code>.
 * The node is selectable. If true, clicking on the node text triggers "selected" event
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>selectable</code>
 * @public
 * 
 */
sap.ui.commons.TreeNode.prototype.getSelectable = function() {
	return this.getProperty("selectable");
};

/**
 * Setter for property <code>selectable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSelectable  new value for property <code>selectable</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setSelectable = function(bSelectable) {
	this.setProperty("selectable", bSelectable);
	return this;
};

	
/**
 * Getter for aggregation <code>nodes</code>.<br/>
 * Subnodes for the current node
 * 
 * @return {sap.ui.commons.TreeNode[]}
 * @public
 */
sap.ui.commons.TreeNode.prototype.getNodes = function() {
	return this.getAggregation("nodes", []);
};


/**
 * Inserts a node into the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *          oNode the node to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the node should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the node is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the node is inserted at 
 *             the last position        
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.insertNode = function(oNode, iIndex) {
	this.insertAggregation("nodes", oNode, iIndex);
	return this;
};

/**
 * Adds some node <code>oNode</code> 
 * to the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node to add; if empty, nothing is inserted
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.TreeNode.prototype.addNode = function(oNode) {
	this.addAggregation("nodes", oNode);
	return this;
};

/**
 * Removes an node from the aggregation named <code>nodes</code>.
 *
 * @param {int | string | sap.ui.commons.TreeNode} vNode the node to remove or its index or id
 * @return {sap.ui.commons.TreeNode} the removed node or null
 * @public
 */
sap.ui.commons.TreeNode.prototype.removeNode = function(vNode) {
	return this.removeAggregation("nodes", vNode);
};

/**
 * Removes all the controls in the aggregation named <code>nodes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.TreeNode[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.TreeNode.prototype.removeAllNodes = function() {
	return this.removeAllAggregation("nodes");
};

/**
 * Checks for the provided <code>sap.ui.commons.TreeNode</code> in the aggregation named <code>nodes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.TreeNode.prototype.indexOfNode = function(oNode) {
	return this.indexOfAggregation("nodes", oNode);
};
	

/**
 * Destroys all the nodes in the aggregation 
 * named <code>nodes</code>.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.destroyNodes = function() {
	this.destroyAggregation("nodes");
	return this;
};


/**
 * Node state has changed. 
 *
 * @name sap.ui.commons.TreeNode#toggleOpenState
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.opened Node has been opened if true
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleOpenState' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 * Node state has changed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.attachToggleOpenState = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleOpenState", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleOpenState' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.detachToggleOpenState = function(fnFunction, oListener) {
	this.detachEvent("toggleOpenState", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleOpenState to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'opened' of type <code>boolean</code> Node has been opened if true</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TreeNode.prototype.fireToggleOpenState = function(mArguments) {
	this.fireEvent("toggleOpenState", mArguments);
	return this;
};


/**
 * Node is selected 
 *
 * @name sap.ui.commons.TreeNode#selected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'selected' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 * Node is selected 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.attachSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("selected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'selected' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.detachSelected = function(fnFunction, oListener) {
	this.detachEvent("selected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event selected to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.TreeNode.prototype.fireSelected = function(mArguments) {
	this.fireEvent("selected", mArguments);
	return this;
};


/**
 * Select the node, and if any, deselects the previously selected node
 *
 * @name sap.ui.commons.TreeNode.prototype.select
 * @function

 * @type void
 * @public
 */


/**
 * Expands the node
 *
 * @name sap.ui.commons.TreeNode.prototype.expand
 * @function

 * @type void
 * @public
 */


/**
 * Collapses the node
 *
 * @name sap.ui.commons.TreeNode.prototype.collapse
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/TreeNode.js
sap.ui.commons.TreeNode.ANIMATION_DURATION 	 = 600;

/***********************************************************************************
* PUBLIC METHODS
***********************************************************************************/

/**Expands the node
 * @public
 */

sap.ui.commons.TreeNode.prototype.expand = function(bExpandChildren){

   var oDomNode = jQuery.sap.byId(this.getId());

   if(oDomNode.hasClass("sapUiTreeNodeCollapsed")){
	   //If not, not an expandable node

	   var oDomChildrenNodes = jQuery.sap.byId(this.getId() + "-children");
	   if(oDomChildrenNodes){
		   oDomChildrenNodes.show(sap.ui.commons.TreeNode.ANIMATION_DURATION,this.getCallbackFunction(this,oDomNode,false));
	   }
	   oDomNode.attr("aria-expanded", "true");
	   this.fireToggleOpenState({opened:true});

   }
   //Change property anyway. (Even if node has no expander)
   this.setProperty("expanded", true, true); //Suppress Re-rendering

   if(bExpandChildren){
	   var aNodes = this.getNodes();
	   for(var i=0;i<aNodes.length;i++){
			aNodes[i].expand(bExpandChildren);
	   }
   }

};



/**Collapses the node
 * @public
 */
sap.ui.commons.TreeNode.prototype.collapse = function(bCollapseChildren){

   var oDomNode = jQuery.sap.byId(this.getId());

   if(oDomNode.hasClass("sapUiTreeNodeExpanded")){
	   //If not, not a collapsable node

	   var oDomChildrenNodes = jQuery.sap.byId(this.getId() + "-children");
	   if(oDomChildrenNodes){
		   oDomChildrenNodes.hide(sap.ui.commons.TreeNode.ANIMATION_DURATION,this.getCallbackFunction(this,oDomNode,true));
	   }
	   oDomNode.attr("aria-expanded", "false");
	   this.fireToggleOpenState({opened:false});

   }
   //Change property anyway. (Even if node has no expander)
   this.setProperty("expanded", false, true); //Suppress Re-rendering

	if(bCollapseChildren){
	   var aNodes = this.getNodes();
	   for(var i=0;i<aNodes.length;i++){
			aNodes[i].collapse(bCollapseChildren);
	   }
   }

};

/**Select the node, and if any, deselects the previously selected node
 * @public
 */
sap.ui.commons.TreeNode.prototype.select = function(bSuppressEvent) {
	var oTree = this.getTree(),
		$Tree;
	
	this.setProperty("isSelected", true, true);

	// If not connected to a tree or not rendered yet, return here
	if (!oTree || !this.getDomRef()) {
		return;
	}
	
	$Tree = oTree.$();
	
	//Remove selection elsewhere
	var oDomSelectedNode = $Tree.find(".sapUiTreeNodeSelected");
	oDomSelectedNode.removeClass("sapUiTreeNodeSelected").removeAttr("aria-selected");
	$Tree.find(".sapUiTreeNodeSelectedParent").removeClass("sapUiTreeNodeSelectedParent");

	if(oDomSelectedNode.length){
		//Any Selection found
		var oSelectedNode = sap.ui.getCore().getControl(oDomSelectedNode[0].id);
		oSelectedNode.setProperty("isSelected", false, true); //Suppress Re-rendering
	}

	//Set selection on clicked node
	jQuery.sap.byId(this.getId()).closest(".sapUiTreeNode").addClass("sapUiTreeNodeSelected").attr("aria-selected", "true");

	if (!bSuppressEvent) {
		this.fireSelected();
	}

	this.scrollIntoView();

};

/***********************************************************************************
* SELECTION PRIVATE METHODS
***********************************************************************************/

/**Deselect the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.deselect = function(bSuppressEvent) {
	var oTree = this.getTree();
	
	this.setProperty("isSelected", false, true);

	// If not connected to a tree or not rendered yet, return here
	if (!oTree || !this.getDomRef()) {
		return;
	}

	this.$().removeClass("sapUiTreeNodeSelected").removeAttr("aria-selected");
};

/**Returns true if the node has a selected child node, which is not visible
 * @returns True if the node has such child node
 * @private
 */
sap.ui.commons.TreeNode.prototype.hasSelectedHiddenChild = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){

		if((!aNodes[i].isVisible() && aNodes[i].getIsSelected()) || aNodes[i].hasSelectedHiddenChild()){
			return true;
		}
	}
	return false;
};

/**
 * Redefinition of Setter for property <code>isSelected</code> for validation purpose
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {boolean} bIsSelected  new value for property <code>isSelected</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setIsSelected = function(bIsSelected) {

	if(!this.getSelectable()){
		//Node is not selectable.
		return this;
	}

	if (bIsSelected) {
		this.select(true);
	}
	else {
		this.deselect();
	}
	return this;
};

/**
 * Redefinition of Setter for property <code>selectable</code> for validation purpose.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bSelectable  new value for property <code>selectable</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setSelectable = function(bSelectable) {

	if(!bSelectable && this.getIsSelected()){
		//Setting the node to not selectable: remove selection
		this.setIsSelected(false);
	}

	this.setProperty("selectable", bSelectable);
	return this;
};

/***********************************************************************************
* EVENTS HANDLING
***********************************************************************************/

/** The mouse click event, which will expand/collapse the node
 * @param {event} oEvent The click event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onclick = function(oEvent){

  var oDomClicked = oEvent.target;

  if(jQuery(oDomClicked).is(".sapUiTreeNode") || jQuery(oDomClicked).is(".sapUiTreeNodeNotSelectable") ){
	  //When user click a Not-Selectable node text, it behaves as clicking on the node itself
	  if(jQuery(oDomClicked).is(".sapUiTreeNodeNotSelectable")){
		  //Get the node itself
		  oDomClicked = jQuery(oDomClicked).closest(".sapUiTreeNode")[0];
	  }

	  //Expand/Collapse
	  if(jQuery(oDomClicked).hasClass("sapUiTreeNodeExpanded")){
		  this.collapse();
	  }
	  else{
		  this.expand();
	  }

	  this.getTree().placeFocus(oDomClicked);
	  oDomClicked.focus();

  }
  else if(jQuery(oDomClicked).is(".sapUiTreeNodeContent") || jQuery(oDomClicked).is(".sapUiTreeIcon")){

	  this.getTree().setSelection(this);

	  //Set focus
	  oDomClicked = jQuery(oDomClicked).closest(".sapUiTreeNode")[0];
	  this.getTree().placeFocus(oDomClicked);
	  oDomClicked.focus();
  }

};

/***********************************************************************************
* KEYBOARD NAVIGATION
***********************************************************************************/
/** The generic selection event (ENTER or SPACE)
* @param {event} oEvent The sapselect event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onsapselect = function(oEvent){

	if(this.getSelectable()){
		this.getTree().setSelection(this);
	}
	else if(this.getExpanded()){
		this.collapse();
	}
	else{
		this.expand();
	}


};

/**
 * The numpad + key event, which will expand the current node
 * @param {event} oEvent The sapexpand event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onsapexpand = function(oEvent) {
	this.expand();
};

/**
 * The numpad - key event, which will expand the current node
 * @private
 * @param {event} oEvent The sapcollapse event object
 */
sap.ui.commons.TreeNode.prototype.onsapcollapse = function(oEvent) {
	this.collapse();

};

/***********************************************************************************
* FOCUS HANDLING
***********************************************************************************/

/**Focuses the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.focus = function () {
	var domFocus = this.getFocusDomRef();
	domFocus.setAttribute("tabindex", "0");
	domFocus.focus();
};

/**Removes focus from the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.blur = function () {
	var domFocus = this.getFocusDomRef();
	domFocus.setAttribute("tabindex", "-1");
};



/***********************************************************************************
* HELPER METHODS
***********************************************************************************/

/** Returns the parent tree control. Not necessarily the direct parent if the node is a subnode.
 * @returns The parent tree control
 * @private
 */
sap.ui.commons.TreeNode.prototype.getTree = function() {
	var parent = this.getParent();

	while(parent instanceof sap.ui.commons.TreeNode){
		parent = parent.getParent();
	}
	return parent;
};

/** Returns true if the node has any subnodes.
 * @returns True if the node has any subnode
 * @private
 */
sap.ui.commons.TreeNode.prototype.hasChildren = function(){
   var aSubNodes = this.getNodes();
   if(aSubNodes.length){
	   return true;
   }
   return false;
};

/** Returns true if the node is visible(parent and all grand parent expanded).
 * @returns True if the node is visible
 * @private
 */
sap.ui.commons.TreeNode.prototype.isVisible = function(){
   var parent = this.getParent();
   while(parent instanceof sap.ui.commons.TreeNode){
	   if(!parent.getExpanded()){
		   return false;
	   }

	   parent = parent.getParent();
   }
   return true;
};


/**
* Used for Javascript closure.
* @private
* @return	Returns a function to be called as callback function for jQuery animation
*/
sap.ui.commons.TreeNode.prototype.getCallbackFunction = function(oNode,oDomNode,bCollapsing){

	if(bCollapsing){
		var f =  function(){
			oDomNode.toggleClass("sapUiTreeNodeCollapsed");
			oDomNode.toggleClass("sapUiTreeNodeExpanded");
			oNode.getTree().adjustFocus();
			oNode.getTree().adjustSelectionOnCollapsing(oDomNode);
		};
		return f;
	}
	else{
		var f =  function(){
			oDomNode.toggleClass("sapUiTreeNodeCollapsed");
			oDomNode.toggleClass("sapUiTreeNodeExpanded");
			oNode.getTree().adjustSelectionOnExpanding(oDomNode);
		};
		return f;
	}

};

/**
 * In case the selected node is not visible, change the scroll position of the
 * tree to get it into view.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.commons.TreeNode.prototype.scrollIntoView = function() {
	var $Node = this.$(),
		$Tree = this.getTree().$(),
		$TreeCont = $Tree.find(".sapUiTreeCont"),
		iOffsetTop = $Node[0].offsetTop,
		iScrollTop = $TreeCont.scrollTop(),
		iHeight = $TreeCont.height(),
		iNewScrollTop;

	if (iOffsetTop > iScrollTop + iHeight) {
		iNewScrollTop = iOffsetTop - Math.floor(iHeight * 0.8); 
		$TreeCont.animate({scrollTop:iNewScrollTop});
	}
	else if (iOffsetTop < iScrollTop) {
		iNewScrollTop = iOffsetTop - Math.floor(iHeight * 0.2);
		$TreeCont.animate({scrollTop:iNewScrollTop});
	}
};

/***********************************************************************************
* REDEFINITIONS
***********************************************************************************/

/**
 * Returns the regular tooltip. If empty, returns the text
* @private
 * @return {string} string tooltip
 */
sap.ui.commons.TreeNode.prototype.getTooltip_AsString = function() {
	var sTooltip;
	var oTooltip = this.getTooltip();
	if (typeof oTooltip === "string" || oTooltip instanceof String ) {
		sTooltip = oTooltip;
	}

	if(!sTooltip){
		sTooltip = this.getText();
	}
	return sTooltip;
};

}; // end of sap.ui.commons.TreeNode
if ( !jQuery.sap.isDeclared('sap.ui.commons.Message') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Message.
jQuery.sap.declare("sap.ui.commons.Message");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Message.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>type : sap.ui.commons.MessageType</li>
 * <li>text : string</li>
 * <li>associatedElementId : string</li>
 * <li>design : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Creates the "Message"s to be supplied to the "MessageBar" Control.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Message = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Message.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Message. 
 * Resulting metadata can be obtained via sap.ui.commons.Message.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Message", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getType", "setType", "getText", "setText", "getAssociatedElementId", "setAssociatedElementId", "getDesign", "setDesign", 
    // aggregations
    
    // associations
    
    // events
    
    // methods
    "bindDetails"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "type" : {name : "type", type : "sap.ui.commons.MessageType", group : "Behavior", defaultValue : null},
    "text" : {name : "text", type : "string", group : "Data", defaultValue : null},
    "associatedElementId" : {name : "associatedElementId", type : "string", group : "Data", defaultValue : null},
    "design" : {name : "design", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>type</code>.
 * "Success", or "Warning", or "Error" messages. (Mandatory)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.commons.MessageType} the value of property <code>type</code>
 * @public
 * 
 */
sap.ui.commons.Message.prototype.getType = function() {
	return this.getProperty("type");
};

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.commons.MessageType} oType  new value for property <code>type</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Message.prototype.setType = function(oType) {
	this.setProperty("type", oType);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * Message short text. (Mandatory)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.Message.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Message.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>associatedElementId</code>.
 * Associated UI element ID. (Optional)
 * For navigation to error field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>associatedElementId</code>
 * @public
 * 
 */
sap.ui.commons.Message.prototype.getAssociatedElementId = function() {
	return this.getProperty("associatedElementId");
};

/**
 * Setter for property <code>associatedElementId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAssociatedElementId  new value for property <code>associatedElementId</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Message.prototype.setAssociatedElementId = function(sAssociatedElementId) {
	this.setProperty("associatedElementId", sAssociatedElementId);
	return this;
};


/**
 * Getter for property <code>design</code>.
 * Internal attribute, used to force the display of the "short" or the "long" text only.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>design</code>
 * @public
 * 
 */
sap.ui.commons.Message.prototype.getDesign = function() {
	return this.getProperty("design");
};

/**
 * Setter for property <code>design</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Message.prototype.setDesign = function(sDesign) {
	this.setProperty("design", sDesign);
	return this;
};


/**
 * Registers a callback function to be invoked if long text Details are to be made available. This callback function will be supplied the corresponding Message "id", and should return the HTML string to be displayed within the Message Details Dialog.
 * E.g.: myMessage.bindDetails(getDetails);
 * where
 * function getDetails(sId) {... return htmlString;}
 *
 * @name sap.ui.commons.Message.prototype.bindDetails
 * @function

 * @type string
 * @public
 */


// Start of sap/ui/commons/Message.js


sap.ui.commons.Message.prototype.init = function(){
	// Defining some private data...
	this.isRTL = sap.ui.getCore().getConfiguration().getRTL();

	// The "Details" related Controls.
  this.fnCallBack    = null; // Supplied only if a longText is to be provided on demand.
	this.oLink         = null; // Created only if a longText exists. This is the link opening the Details Dialog.
	this.oContainer    = null; // Created only if a longText exists. This is the "Dialog" hosting the Details.
	this.oDetails      = null; // Created only if a longText exists. This is the Controller rendering the Details.
	this.oBtnOK        = null; // Created only if a longText exists. This is the OK button found within the Dialog.
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.Message.prototype.exit = function() {
	if (this.oLink) {
		this.oLink.destroy();
		this.oLink = null;
	}
	if (this.oDetails) {
		this.oDetails.destroy();
		this.oDetails = null;
	}
	if (this.oContainer) {
		this.oContainer.destroy();
		this.oContainer = null;
	}
	if (this.oBtnOK) {
		this.oBtnOK.destroy();
		this.oBtnOK = null;
	}
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility is for closing the Message Details from its OK button.
 * @private
 */
sap.ui.commons.Message.closeDetails = function(oControlEvent) {
  oControlEvent.getSource().getParent().close();
};
/**
 * This utility closes THIS Message's Details.
 * @private
 */
sap.ui.commons.Message.prototype.closeDetails = function() {
  // If Details have been opened, can attempt to close them:
  if (this.oContainer) {
	this.oContainer.close();
  }
};

/**
 * This utility renders the Message Details.
 * Current Specifications are those of JPaaS:
 *    Supported by:               "Dialog"              "MessageBox"
 *  - Title:                       Yes                   Yes
 *  - Non-blocking:                Yes, configurable.    No, modal only
 *  - Accepts HTML string:         Yes, via oContent.    No, sMessage only
 *  - Bottom-Right resize handle:  Yes                   No
 *  - No icon:                     Yes                   Possible
 * @private
 */
sap.ui.commons.Message.prototype.openDetails = function() {
  if (!this.oContainer) {
	var rb          = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	var OK          = rb.getText("MSGBAR_DETAILS_DIALOG_CLOSE");
	var title       = rb.getText("MSGBAR_DETAILS_DIALOG_TITLE");
	// Reading the HTML details as is, styles included:
	var	htmlDetails = this.fnCallBack(this.getId());
	this.oDetails   = new sap.ui.commons.Message({type: this.getType(), text: htmlDetails});
	this.oBtnOK     = new sap.ui.commons.Button({text: OK, press:sap.ui.commons.Message.closeDetails});
	this.oContainer = new sap.ui.commons.Dialog();
	this.oContainer.addContent(this.oDetails);
	this.oContainer.setTitle(title);
		this.oContainer.addButton(this.oBtnOK);
  //this.oContainer.setDefaultButton(this.oBtnOK); // Already the default since the only button...
  }
	// Other visible Dialogs around?
  var sContainerId = this.oContainer.getId();
  var iOthersMaxZIndex = 0;
  var oOtherOpenDialogs = jQuery('.sapUiDlg');
  for (var i=oOtherOpenDialogs.length-1; i>=0; i--) {
	if (jQuery(oOtherOpenDialogs[i]).css('visibility') != "visible") {
	  oOtherOpenDialogs.splice(i, 1);
	} else if (oOtherOpenDialogs[i].id == sContainerId) {
	  oOtherOpenDialogs.splice(i, 1);
	} else {
	  iOthersMaxZIndex = Math.max(iOthersMaxZIndex,jQuery(oOtherOpenDialogs[i]).css('zIndex'));
	}
  }

  // Taking note for later:
  var bWasOpen = this.oContainer.isOpen();
  // No matter what, we have to open the new Details, so:
  this.oContainer.open();

  // jQuery version of our OPEN Dialog Container:
	var jContainer = this.oContainer.$();

  // Starting a new Stack in the default Dialog's location:
  var jContainerRect = jContainer.rect(); // For Height and Width...
	if (oOtherOpenDialogs.length == 0) {
		// "offsets.right" & "offsets.left" should be identical as plain Dialogs are centered,
		// but in case there is a bug (like in Safari RTL):
		if (this.isRTL) {
		  // Will be using "left" invariably for RTL or LTR:
			jContainerRect.left = Number(jContainer.css('right').replace("px", ""));
		}
		this.setLastOffsets(jContainerRect);
		// Nothing else to do:
		return;
	}

  // Dialog limitation. Work-around:
  if (bWasOpen) {
		if (iOthersMaxZIndex > jContainer.css('zIndex')) {
			// zIndex not raised via previous re-open()...
			// Have to raise it ourselves.
		jContainer.css('zIndex',iOthersMaxZIndex+1);
		}
		// Nothing else to do:
	return;
  }

  /*************** Stacking process starts ***************/
  // 1st rendering the new Dialog on top of the old one...
  var oNextOffsets = this.getNextOffsets();
	jContainer.css('top',  (oNextOffsets.top -sap.ui.commons.Message.TOP_INCR ) + "px");
  if (this.isRTL) {
		jContainer.css('right', (oNextOffsets.left-sap.ui.commons.Message.LEFT_INCR) + "px");
  } else {
	jContainer.css('left',  (oNextOffsets.left-sap.ui.commons.Message.LEFT_INCR) + "px");
  }

  // Figuring what should the next coordinates be:
  var jContainerRect = jContainer.rect(); // For Height and Width...
  var scrollTop   = jQuery(window).scrollTop();
  var scrollLeft  = jQuery(window).scrollLeft(); // Negative in RTL
  var scrollRight = -scrollLeft;
  // Checking if the new coordinates fit within the window:
  if ((jQuery(window).height()+scrollTop) < (oNextOffsets.top+jContainerRect.height)) {
	// ReStacking from the top:
	oNextOffsets.top = scrollTop;
	this.setLastOffsets(oNextOffsets);
  }
  if (this.isRTL) {
	  if ((jQuery(window).width()+scrollRight) < (oNextOffsets.left+jContainerRect.width)) {
		// ReStacking from the right:
		oNextOffsets.left = scrollRight;
		this.setLastOffsets(oNextOffsets);
	  }
		// Animating the Dialog to its new offset position:
		jContainer.animate({top:oNextOffsets.top+"px", right:oNextOffsets.left+"px"}, 200);
  } else {
	  if ((jQuery(window).width()+scrollLeft) < (oNextOffsets.left+jContainerRect.width)) {
		// ReStacking from the left:
		oNextOffsets.left = scrollLeft;
		this.setLastOffsets(oNextOffsets);
	  }
		// Animating the Dialog to its new offset position:
		jContainer.animate({top:oNextOffsets.top+"px", left:oNextOffsets.left+"px"}, 200);
  }

//MESSAGEBOX BACKUP: Issues: Only Modal, Doesn't accept HTML string, No Resize-Area.
//	var rb    = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
//  var ICON  = this.getType().toUpperCase();		// ERROR, WARNING, ...
//  var title = rb.getText("MSGTYPE_" + ICON);
//  var text  = this.getLongText();
//  sap.ui.commons.MessageBox.show(text, ICON, title);
};

sap.ui.commons.Message.TOP_INCR  = 20;
sap.ui.commons.Message.LEFT_INCR = 10;


// Begin of Dialog-Offsets-Stacking facilities
(function() {
	var oLastOffsets = null;
	/**
	 * @static
	 */
	sap.ui.commons.Message.setLastOffsets = function(oOffsets){
		oLastOffsets = oOffsets;
	};
	sap.ui.commons.Message.prototype.setLastOffsets = function(oOffsets){
		sap.ui.commons.Message.setLastOffsets(oOffsets);
	};
	sap.ui.commons.Message.getNextOffsets = function(){
	  oLastOffsets.top   += sap.ui.commons.Message.TOP_INCR;
	  oLastOffsets.left  += sap.ui.commons.Message.LEFT_INCR;
		return oLastOffsets;
	};
	sap.ui.commons.Message.prototype.getNextOffsets = function(){
		return sap.ui.commons.Message.getNextOffsets();
	};
}());
// End of Dialog-Offsets-Stacking facilities


// #############################################################################
// Public APIs
// #############################################################################
/**
 * This interface registers a CallBack function, to be called for rendering
 * the longText Details of a Message.
 * This function will be supplied the ID of the Message.
 * This function is expected to return the (simple) HTML string giving the
 * details belonging to this message ID.
 * @public
 */
sap.ui.commons.Message.prototype.bindDetails = function(fnCallBack) {
  this.fnCallBack = fnCallBack;
};
}; // end of sap.ui.commons.Message
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.TextView
jQuery.sap.declare("sap.ui.commons.TextViewRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class TextView renderer.
 * @author SAP AG
 * @static
 */
sap.ui.commons.TextViewRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oTextView An object representation of the control that should be rendered.
 */
sap.ui.commons.TextViewRenderer.render = function(oRenderManager, oTextView) {

	var rm = oRenderManager;
	var r = sap.ui.commons.TextViewRenderer;

	// return immediately if control is invisible
	if (!oTextView.getVisible()) {
		return;
	}

	// Get parameters
	var enabled = oTextView.getEnabled() === true,
		oDesign = oTextView.getDesign(),
		tabIndex = 0;

	// Enable/disable
	if(!enabled) {
		tabIndex = -1;
		rm.addClass("sapUiTvDsbl");
		oTextView.allowTextSelection(false);
	}
	// Show error/warning states if they are enabled
	else {
		// error/warning state
		switch (oTextView.getSemanticColor()){
		case (sap.ui.commons.TextViewColor.Negative) :
			rm.addClass('sapUiTvErr');
			break;
		case (sap.ui.commons.TextViewColor.Positive) :
			rm.addClass('sapUiTvSucc');
			break;
		case (sap.ui.commons.TextViewColor.Critical) :
			rm.addClass('sapUiTvWarn');
			break;
		}
	}

	// Styles
	var TextViewDesign = sap.ui.commons.TextViewDesign;
	if (oDesign != TextViewDesign.Standard) {
		if (oDesign === TextViewDesign.Bold) {
			rm.addClass("sapUiTvEmph");
		} else if (oDesign === TextViewDesign.H1) {
			rm.addClass("sapUiTvH1");
		} else if (oDesign === TextViewDesign.H2) {
			rm.addClass("sapUiTvH2");
		} else if (oDesign === TextViewDesign.H3) {
			rm.addClass("sapUiTvH3");
		} else if (oDesign === TextViewDesign.H4) {
			rm.addClass("sapUiTvH4");
		} else if (oDesign === TextViewDesign.Italic) {
			rm.addClass("sapUiTvItalic");
		} else if (oDesign === TextViewDesign.Small) {
			rm.addClass("sapUiTvSmall");
		} else if (oDesign === TextViewDesign.Monospace) {
			rm.addClass("sapUiTvMono");
		} else if (oDesign === TextViewDesign.Underline) {
			rm.addClass("sapUiTvULine");
		}
	}

	if(!oTextView.getWrapping()){
		rm.addStyle("white-space", "nowrap");
		rm.addStyle("overflow", "hidden");
		rm.addStyle("text-overflow", "ellipsis");
	}

	if (oTextView.getWidth() && oTextView.getWidth() != '') {
		rm.addStyle("width", oTextView.getWidth());
	}

	rm.write("<span");
	rm.writeControlData(oTextView);

	rm.addClass("sapUiTv");

	if (oTextView.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oTextView.getTooltip_AsString());
	}else if (oTextView.getText()) {
		rm.writeAttributeEscaped("title", oTextView.getText());
	}

	// Appearance
	var oTextDir = oTextView.getTextDirection();
	if(oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}

	var oTextAlign = oTextView.getTextAlign();
	if(oTextAlign) {
		rm.addStyle("text-align", r.getTextAlign(oTextAlign, oTextDir));
	}

	// Make control focusable via tab
	// according to Stefan Schnabel there shall not be a tabstop   rm.writeAttribute('tabindex', tabIndex);
	// Set Accessible Role
	rm.writeAttribute('role', oTextView.getAccessibleRole().toLowerCase());
	rm.writeAccessibilityState(oTextView, {invalid: oTextView.getSemanticColor() == sap.ui.commons.TextViewColor.Negative,
										   disabled: !oTextView.getEnabled()});

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.write(oTextView.getTextAsHTML());
	rm.write("</span>");

};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.TextViewRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;
}; // end of sap.ui.commons.TextViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageToast') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageToast.
jQuery.sap.declare("sap.ui.commons.MessageToast");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new MessageToast.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>anchorId : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>next : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Responsible for displaying the new incoming messages, one at the time, on top of the MessageBar.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MessageToast = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MessageToast.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.MessageToast. 
 * Resulting metadata can be obtained via sap.ui.commons.MessageToast.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MessageToast", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getAnchorId", "setAnchorId", 
    // aggregations
    
    // associations
    
    // events
    "attachNext", "detachNext", 
    // methods
    "toast", "isIdle"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "anchorId" : {name : "anchorId", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "next" : "next"
  }

});	

sap.ui.commons.MessageToast.M_EVENTS = {'next':'next'};


/**
 * Getter for property <code>anchorId</code>.
 * Id of the anchor on top of which the MessageToast is to render.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorId</code>
 * @public
 * 
 */
sap.ui.commons.MessageToast.prototype.getAnchorId = function() {
	return this.getProperty("anchorId");
};

/**
 * Setter for property <code>anchorId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorId  new value for property <code>anchorId</code>
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageToast.prototype.setAnchorId = function(sAnchorId) {
	this.setProperty("anchorId", sAnchorId);
	return this;
};


/**
 * Fired once the "toast()" method is over, so that the MessageBar can toast() another message if needed. 
 *
 * @name sap.ui.commons.MessageToast#next
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'next' event of this <code>sap.ui.commons.MessageToast</code>.<br/>
 * Fired once the "toast()" method is over, so that the MessageBar can toast() another message if needed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageToast.prototype.attachNext = function(oData, fnFunction, oListener) {
	this.attachEvent("next", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'next' event of this <code>sap.ui.commons.MessageToast</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageToast.prototype.detachNext = function(fnFunction, oListener) {
	this.detachEvent("next", fnFunction, oListener);
	return this;	
};

/**
 * Fire event next to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.MessageToast.prototype.fireNext = function(mArguments) {
	this.fireEvent("next", mArguments);
	return this;
};


/**
 * Triggers the toasting of a message, on top of the MessageBar.
 * If no message is supplied, displayes the "Multiple new messages..." message.
 *
 * @name sap.ui.commons.MessageToast.prototype.toast
 * @function
 * @param {sap.ui.commons.Message} 
 *         oMessage
 *         The Message to be toasted.
 * @param {string} 
 *         sAnchorId
 *         DOM ID of the anchor against which the Toast Arrow should align for a given Toast.

 * @type void
 * @public
 */


/**
 * Returns TRUE if no message is being toasted.
 *
 * @name sap.ui.commons.MessageToast.prototype.isIdle
 * @function

 * @type boolean
 * @public
 */


// Start of sap/ui/commons/MessageToast.js
jQuery.sap.require('jquery-ui-core'); // unlisted dependency retained


sap.ui.commons.MessageToast.prototype.init = function(){
	// Local variables...
	this.oMessage    = null;
	this.sAnchorId   = "";
	this.bIdle       = true;
	this.sLeftOffset = "";

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - oModal: "true/false" : For blocking the background window.
	// - bShadow: "false" as the MessageBar Popup is displayed without shadow in all themes.
	//            Shadow is added but not at the Popup level because in contains a down-arrow.
	//            Therefore the shadow is added to an inner container, excluding this down-arrow.
	this.oPopup   = new sap.ui.core.Popup(this, false, false, false);
	// Asking the Popup to fire our "next" event once a "toast()" is over.
	this.oPopup.attachClosed(this.next, this);
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageToast.prototype.exit = function() {
  if (!this.bIdle) {
	this.close();
  }

	this.oPopup.destroy();
	this.oPopup = null;
};

/**
 * This utility makes sure that the Toast is pointing down towards
 * the right MessageBar Icon.
 * @private
 */
sap.ui.commons.MessageToast.prototype.onAfterRendering = function(){
  // The MessageToast and the MessageBar are right-aligned.
  // The MessageToast has a minWidth matching that of the MessageBar.
  // (That allows us to position the down-arrow without moving the MessageToast.)
  // The MessageToast Arrow aligns towards the proper MessageBar Icon.

  var rtl = sap.ui.getCore().getConfiguration().getRTL();

  // 1) Calculating the distance between the Icon and the right side of its MessageBar container:
  var jIcon = jQuery.sap.byId(this.sAnchorId); // Anchor against which our Arrow has to align
//if (!jIcon) return;
  var iconPosition  = jIcon.position();
  var jBar = jQuery.sap.byId(this.getAnchorId()); // Anchor against which our Toast has to align
//if (!jBar) return;
  var barWidth = jBar.outerWidth();
  if (iconPosition) {
	  var targetRightOffset = rtl ? iconPosition.left + jIcon.outerWidth()
								  : barWidth - iconPosition.left;


	  // 2) Calculating the default distance between the Arrow and the right side of our Toast:
		var jToast = this.$();  // = jQuery.sap.byId(this.getId());
	  var toastWidth = jToast.width();
	  var defaultArrowRightOffset = Math.max(toastWidth,barWidth);

	  // 3) Taking care of too-small a Toast:
	  var delta = barWidth - toastWidth;
		if (delta > 0) {
		// Making the Toast as wide as the Bar:
		jToast.css('minWidth', barWidth);
		}

	  // 4) Now, we need to move our Arrow right, by what is missing:
	  var moveRightOffset = rtl ? (defaultArrowRightOffset - targetRightOffset + 2) + "px"
								: (defaultArrowRightOffset - targetRightOffset - 2) + "px";
		if (defaultArrowRightOffset >= targetRightOffset) {
		var jArrow = jQuery.sap.byId(this.getId() + "Arrow");
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			jArrow.css('marginRight', moveRightOffset); // Positive padding
		} else {
			jArrow.css('marginLeft', moveRightOffset); // Positive padding
		}
		// Our right-alignment can stay:
		this.sLeftOffset = "0";
		}
	}
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * Our popup-close callback function.
 * Registers the fact that a toast just completed, and fires our "next" event.
 * @private
 */
sap.ui.commons.MessageToast.prototype.next = function(){
	// Toast done (allows for smooth toasting):
  this.bIdle = true;
  this.fireNext()
}

/**
 * This utility opens the MessageToast Popup.
 * @private
 */;
sap.ui.commons.MessageToast.prototype.open = function(iDuration) {
	// For Multiple Messages, 1st we need to close the existing toast:
  if (!this.bIdle) {
	this.oPopup.close(0);
  }

	// Toast start (allows for no interruption):
  this.bIdle = false;

  var rtl = sap.ui.getCore().getConfiguration().getRTL();

	// Defining or fetching the Popup attributes:
  var popupSnapPoint  = rtl ? sap.ui.core.Popup.Dock.LeftBottom : sap.ui.core.Popup.Dock.RightBottom;
  var anchorSnapPoint = rtl ? sap.ui.core.Popup.Dock.LeftTop    : sap.ui.core.Popup.Dock.RightTop;
  var relativeAnchorPosition = this.sLeftOffset + " 5";
  var anchor = null;
  var anchorId = this.getAnchorId();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
  this.oPopup.open(iDuration, popupSnapPoint, anchorSnapPoint, anchor, relativeAnchorPosition);
};

/**
 * This utility closes the MessageToast Popup.
 * @private
 */
sap.ui.commons.MessageToast.prototype.close = function(iDuration) {
  // Invoking the Popup close = function(iDuration):
  this.oPopup.close(iDuration);
};

/**
 * This utility returns the class of the MessageToast container,
 * which changes according to the displayed message TYPE/PRIORITY
 * to allow for "semantic" rendering.  :-)
 * @private
 */
sap.ui.commons.MessageToast.prototype.getClasses = function() {
  // By default assuming the "Multiple new messages..." css:
  var css = "sapUiMsgToast";
  // Allow for specializing as per the message Type:
  if (this.oMessage && this.oMessage.getType()) {
	css += " sapUiMsgT" + this.oMessage.getType();
  }
  return css;
};

// #############################################################################
// Public APIs
// #############################################################################
/**
 * This public API receives the list of Messages to be displayed,
 * and re-render this Control if visible.
 * @public
 */
sap.ui.commons.MessageToast.prototype.toast = function(oMessage, sAnchorId) {
  // Storing the supplied data:
	this.oMessage = oMessage;
	this.sAnchorId = sAnchorId;
  // Render according to new message, and animate:
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
  this.open(750);
  this.close(2250); // <-- CAN BE COMMENTED OUT WHILE STYLING THE TOAST...

	return this;
};

/**
 * Returns the idle state of the control.
 * @public ???
 */
sap.ui.commons.MessageToast.prototype.isIdle = function() {
  return this.bIdle;
};
}; // end of sap.ui.commons.MessageToast
if ( !jQuery.sap.isDeclared('sap.ui.commons.TabStripRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.TabStrip
jQuery.sap.declare("sap.ui.commons.TabStripRenderer");

/**
 * @class TabStrip renderer.
 * @static
 */
sap.ui.commons.TabStripRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.TabStripRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	//outer DIV
	rm.write("<div role='presentation'");
	rm.addClass("sapUiTabStrip");
	rm.addStyle("height",oControl.getHeight());
	rm.addStyle("width",oControl.getWidth());
	rm.writeClasses();
	rm.writeStyles();
	rm.writeControlData(oControl);
	//header area
	rm.write("><div class=\"sapUiTabBar\" tabIndex=\"0\"");
	if(oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oControl.getTooltip_AsString());
	}
	// menu and list header	
	rm.write("><div class=\"sapUiTabMenu\"></div><ul class=\"sapUiTabBarCnt\" role=\"tablist\">");

	var aTabs = oControl.getTabs();
	// check if selected tab exists and is visible -> otherwise select first active one
	var bWrongIndex = false;
	if(!aTabs[oControl.getSelectedIndex()] || !aTabs[oControl.getSelectedIndex()].getVisible() || !aTabs[oControl.getSelectedIndex()].getEnabled()){
		bWrongIndex = true;
	}

	// for ARIA determine number of visible tabs
	oControl.iVisibleTabs = 0;
	for (var i=0;i<aTabs.length;i++) {
		var oTab = aTabs[i];
		if(oTab.getVisible() === false) {
			continue;
		}
		oControl.iVisibleTabs++;
	}

	var iVisibleIndex = 0;
	// tabs
	for (var i = 0; i < aTabs.length; i++) {
		var oTab = aTabs[i];
		if(oTab.getVisible() === false) {
			continue;
		}

		if(bWrongIndex && oTab.getEnabled()){
			oControl.setProperty( 'selectedIndex', i, true );
			bWrongIndex = false;
		}

		rm.write("<li");

		if (oTab.getEnabled() == false) {
			rm.addClass("sapUiTabDsbl");
		} else if (i==oControl.getSelectedIndex()) {
			rm.addClass("sapUiTabSel");
		} else {
			rm.addClass("sapUiTab");
		}

		// enable the successor tab to overlap this tab if selected
		if (i==oControl.getSelectedIndex()-1) {
			rm.addClass("sapUiTabBeforeSel");
		} else if (i==oControl.getSelectedIndex()+1) {
			rm.addClass("sapUiTabAfterSel");
		}

		rm.writeControlData(oTab);
		rm.writeAttribute("tabidx", i);

		//ARIA
		iVisibleIndex++;

		rm.writeAttribute("tabindex", "-1");
		rm.writeAttribute("role", "tab");

		rm.writeAccessibilityState(oTab, {selected: i==oControl.getSelectedIndex(),
										  controls: oTab.getId() + "-panel",
										  disabled: !oTab.getEnabled(),
										  posinset: iVisibleIndex,
										  setsize: oControl.iVisibleTabs});
		if (oTab.getClosable()) {
			// close button text must be read
			rm.writeAccessibilityState(oTab, {describedby: oTab.getId() + "-close"});
		}
		
		if (iVisibleIndex == oControl.iVisibleTabs) {
			rm.addClass("sapUiTabLast"); // needed for IE8
		}
		rm.writeClasses();
		
		var oTitle = oTab.getTitle();
		// tooltip: if title has a tooltip use it, if not use the tooltip of the tab
		if(oTitle.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oTitle.getTooltip_AsString());
		} else if(oTab.getTooltip_AsString()){
			rm.writeAttributeEscaped('title', oTab.getTooltip_AsString());
		}
		rm.write(">");

		// title with icon
		if (oTitle.getIcon()) {
			rm.write("<img class=\"sapUiTabIco\"");
			rm.writeAttributeEscaped("src", oTitle.getIcon());
			rm.write("></img>");
		}
		rm.writeEscaped(oTab.getTitle().getText());
		if (oTab.getClosable()) {
			// close button
			rm.write("<button id='" + oTab.getId() + "-close' type=\"button\" tabindex= \"-1\" class=\"sapUiTabClose\" title=\""+rb.getText("TAB_CLOSE_TEXT")+"\"></button>");
		}
		rm.write("</li>");
	}
	rm.write("</ul></div>");

	for (var i=0;i<aTabs.length;i++) {
		var oTab = aTabs[i];
		//do not render unselected (or invisible) tab content
		if (i!=oControl.getSelectedIndex() || oTab.getVisible() === false) {
			continue;
		}

		// Improved version... now announcing the title when clicked into the tabpanel... into the full tabpanel!
		// ARIA requires ID for the Panel...
		rm.write("<div id=\"" + oTab.getId() + "-panel" + "\" role=\"tabpanel\" aria-labelledby=\"" + oTab.getId() +"\"");
		rm.addClass("sapUiTabPanel");
		if(oControl.getHeight() != ""){
			rm.addClass("sapUiTabPanelHeight");
		}
		rm.writeClasses();
		rm.write(">");

		sap.ui.commons.TabStripRenderer.renderTabContents(rm,oTab);
		rm.write("</div>");
	}
	rm.write("</div>");
};

/*moved over from former (and replaced) Panel control
 * @private
 */
sap.ui.commons.TabStripRenderer.renderTabContents = function(rm, oControl) {

	// Content
	var oControls = oControl.getContent(),
	iLength = oControls.length;
	for (var i=0;i<iLength;i++) {
		rm.renderControl(oControls[i]);
	}

};
}; // end of sap.ui.commons.TabStripRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ProgressIndicator.
jQuery.sap.declare("sap.ui.commons.ProgressIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ProgressIndicator.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>enabled : boolean</li>
 * <li>barColor : sap.ui.core.BarColor</li>
 * <li>displayValue : string</li>
 * <li>percentValue : int</li>
 * <li>showValue : boolean</li>
 * <li>width : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This control can be used to e.g. visualize the progress of an activity.
 * @extends sap.ui.core.Control
 *
 * @author Michael Sobczak 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ProgressIndicator = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ProgressIndicator.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.ProgressIndicator. 
 * Resulting metadata can be obtained via sap.ui.commons.ProgressIndicator.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ProgressIndicator", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getEnabled", "setEnabled", "getBarColor", "setBarColor", "getDisplayValue", "setDisplayValue", "getPercentValue", "setPercentValue", "getShowValue", "setShowValue", "getWidth", "setWidth"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "barColor" : {name : "barColor", type : "sap.ui.core.BarColor", group : "Appearance", defaultValue : sap.ui.core.BarColor.NEUTRAL},
    "displayValue" : {name : "displayValue", type : "string", group : "Appearance", defaultValue : '0%'},
    "percentValue" : {name : "percentValue", type : "int", group : "Data", defaultValue : 0},
    "showValue" : {name : "showValue", type : "boolean", group : "Appearance", defaultValue : true},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * The visibility of the ProgressIndicator. Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>barColor</code>.
 * The color of the ProgressIndicator bar.
 *
 * Default value is <code>NEUTRAL</code>
 *
 * @return {sap.ui.core.BarColor} the value of property <code>barColor</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getBarColor = function() {
	return this.getProperty("barColor");
};

/**
 * Setter for property <code>barColor</code>.
 *
 * Default value is <code>NEUTRAL</code> 
 *
 * @param {sap.ui.core.BarColor} oBarColor  new value for property <code>barColor</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setBarColor = function(oBarColor) {
	this.setProperty("barColor", oBarColor);
	return this;
};


/**
 * Getter for property <code>displayValue</code>.
 * The text value to display in the ProgressIndicator. If not set, there will be nothing displayed.
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getDisplayValue = function() {
	return this.getProperty("displayValue");
};

/**
 * Setter for property <code>displayValue</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setDisplayValue = function(sDisplayValue) {
	this.setProperty("displayValue", sDisplayValue);
	return this;
};


/**
 * Getter for property <code>percentValue</code>.
 * The numerical value between 0 and 100 which determines the position of the ProgressIndicator bar.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>percentValue</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getPercentValue = function() {
	return this.getProperty("percentValue");
};

/**
 * Setter for property <code>percentValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iPercentValue  new value for property <code>percentValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setPercentValue = function(iPercentValue) {
	this.setProperty("percentValue", iPercentValue);
	return this;
};


/**
 * Getter for property <code>showValue</code>.
 * Determines whether the current value should be rendered inside the bar.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getShowValue = function() {
	return this.getProperty("showValue");
};

/**
 * Setter for property <code>showValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValue  new value for property <code>showValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setShowValue = function(bShowValue) {
	this.setProperty("showValue", bShowValue);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * The width of the ProgressIndicator.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.ProgressIndicator.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


// Start of sap/ui/commons/ProgressIndicator.js
/**
 * Function is called when ProgressIndicator is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.ProgressIndicator.prototype.onclick = function(oEvent) {

	// Set focus to whole ProgressIndicator control
	this.focus();

}
;
sap.ui.commons.ProgressIndicator.prototype.setEndBar = function () {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	jQuery(this.oEnd).removeClass('sapUiProgIndEndHidden');

	switch (sBarColor) {
		case "POSITIVE":
			jQuery(this.oEnd).addClass('sapUiProgIndPosEnd');
			break;
		case "NEGATIVE":
			jQuery(this.oEnd).addClass('sapUiProgIndNegEnd');
			break;
		case "CRITICAL":
			jQuery(this.oEnd).addClass('sapUiProgIndCritEnd');
			break;
		case "NEUTRAL":
			jQuery(this.oEnd).addClass('sapUiProgIndEnd');
			break;
		default:
			jQuery(this.oEnd).addClass('sapUiProgIndEnd');
			break;
	}

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

	if(this.bRtl){
		jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
	}
	else {
		jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	}

	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	if(!this.oThis){
		this.oThis = jQuery.sap.byId(this.getId());
	}
	this.oThis.attr('aria-valuenow', widthBar + '%');

}
;
sap.ui.commons.ProgressIndicator.prototype.setEndBarGoesBack = function (iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

	switch (sBarColor) {
		case "POSITIVE":
			jQuery(this.oEnd).removeClass('sapUiProgIndPosEnd');
			break;
		case "NEGATIVE":
			jQuery(this.oEnd).removeClass('sapUiProgIndNegEnd');
			break;
		case "CRITICAL":
			jQuery(this.oEnd).removeClass('sapUiProgIndCritEnd');
			break;
		case "NEUTRAL":
			jQuery(this.oEnd).removeClass('sapUiProgIndEnd');
			break;
		default:
			jQuery(this.oEnd).removeClass('sapUiProgIndEnd');
			break;
	}

	jQuery(this.oEnd).addClass('sapUiProgIndEndHidden');

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

	if(this.bRtl){
		jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
	}
	else {
		jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	}

	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	if(!this.oThis){
		this.oThis = jQuery.sap.byId(this.getId());
	}
	this.oThis.attr('aria-valuenow', widthBar + '%');

}

/**
 * Property setter for the PercentValue
 * A new rendering is not necessary, only the bar has to be moved.
 *
 * @param iPercentValue
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */;
sap.ui.commons.ProgressIndicator.prototype.setPercentValue = function(iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();

	this.oBar  = jQuery.sap.domById(this.getId() + '-bar');
	this.oEnd  = jQuery.sap.domById(this.getId() + '-end');
	this.oBox  = jQuery.sap.domById(this.getId() + '-box');

	var that = this;
	var time;

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if(!this.oBar){
		// Not already rendered -> return and render
		time = iPercentValue * 20;
		this.setProperty('percentValue', iPercentValue, true); // No re-rendering!
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		return this;
	}

	if (iPercentValue > 100 && widthBar <= 100) {
		time = (100 - widthBar) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBar();
		});
	}
	else if (iPercentValue <= 100 && widthBar > 100) {
		time = (widthBar - 100) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBarGoesBack();
		});
	}
	else if (iPercentValue > 100 && widthBar > 100) {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		widthBorder = (10000 / iPercentValue) + '%';
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

		if(this.bRtl){
			jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
		}
		else {
			jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
		}

		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear', function() {
		});
		if(!this.oThis){
			this.oThis = jQuery.sap.byId(this.getId());
		}
		this.oThis.attr('aria-valuenow', iPercentValue + '%');
	}
	else {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		if(!this.oThis){
			this.oThis = jQuery.sap.byId(this.getId());
		}
		this.oThis.attr('aria-valuenow', iPercentValue + '%');
	}

	return this;
}
}; // end of sap.ui.commons.ProgressIndicator
if ( !jQuery.sap.isDeclared('sap.ui.commons.LinkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Link
jQuery.sap.declare("sap.ui.commons.LinkRenderer");

/**
 * @class
 *
 * @author SAP - TD Core UI&AM UI Infra
 * @version 0.1
 * @static
 */
sap.ui.commons.LinkRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oLink An object representation of the control that should be rendered.
 */
sap.ui.commons.LinkRenderer.render = function(oRenderManager, oLink) {
	var rm = oRenderManager,
		r = sap.ui.commons.LinkRenderer;

	// Return immediately if control is invisible
	if (!oLink.getVisible()) {
		return;
	}

	// Link is rendered as a "<Link>" element
	rm.write("<a");
	rm.writeControlData(oLink);

	if (!oLink.getEnabled()) {
		rm.addClass("sapUiLnkDsbl");
		rm.writeAttribute("disabled", "true");
	} else {
		rm.addClass("sapUiLnk");
	}
	rm.writeClasses();

	if (oLink.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oLink.getTooltip_AsString());
	}

	if (oLink.getHref()) {
		rm.writeAttributeEscaped("href", oLink.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oLink.getTarget()) {
		rm.writeAttribute("target", oLink.getTarget());
	}

	if (!oLink.getEnabled()) {
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}

	// Close the starting tag
	rm.write(">");

	// Write the Link label
	if (oLink.getText()) {
		rm.writeEscaped(oLink.getText());
	}

	// Close all tags
	rm.write("</a>");

};
}; // end of sap.ui.commons.LinkRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RoadMap.
jQuery.sap.declare("sap.ui.commons.RoadMap");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RoadMap.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>numberOfVisibleSteps : int</li>
 * <li>firstVisibleStep : string</li>
 * <li>selectedStep : string</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>steps : sap.ui.commons.RoadMapStep</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>stepSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>stepExpanded : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is used to display step-by-step work flows of a clearly defined work process
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RoadMap = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RoadMap.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.RoadMap. 
 * Resulting metadata can be obtained via sap.ui.commons.RoadMap.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RoadMap", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getNumberOfVisibleSteps", "setNumberOfVisibleSteps", "getFirstVisibleStep", "setFirstVisibleStep", "getSelectedStep", "setSelectedStep", "getWidth", "setWidth", "getVisible", "setVisible", 
    // aggregations
    "getSteps", "insertStep", "addStep", "removeStep", "removeAllSteps", "indexOfStep", "destroySteps", 
    // associations
    
    // events
    "attachStepSelected", "detachStepSelected", "attachStepExpanded", "detachStepExpanded"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "numberOfVisibleSteps" : {name : "numberOfVisibleSteps", type : "int", group : "Misc", defaultValue : null},
    "firstVisibleStep" : {name : "firstVisibleStep", type : "string", group : "Misc", defaultValue : null},
    "selectedStep" : {name : "selectedStep", type : "string", group : "Misc", defaultValue : null},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "visible" : {name : "visible", type : "boolean", group : "Misc", defaultValue : true}
  },
  defaultAggregation : "steps",
  aggregations : {
    "steps" : {name : "steps", type : "sap.ui.commons.RoadMapStep", multiple : true, singularName : "step"}
  },
  associations : {},
  events : {
    "stepSelected" : "stepSelected", 
    "stepExpanded" : "stepExpanded"
  }

});	

sap.ui.commons.RoadMap.M_EVENTS = {'stepSelected':'stepSelected','stepExpanded':'stepExpanded'};


/**
 * Getter for property <code>numberOfVisibleSteps</code>.
 * Total number of steps to be displayed at once
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfVisibleSteps</code>
 * @public
 * 
 */
sap.ui.commons.RoadMap.prototype.getNumberOfVisibleSteps = function() {
	return this.getProperty("numberOfVisibleSteps");
};

/**
 * Setter for property <code>numberOfVisibleSteps</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfVisibleSteps  new value for property <code>numberOfVisibleSteps</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.setNumberOfVisibleSteps = function(iNumberOfVisibleSteps) {
	this.setProperty("numberOfVisibleSteps", iNumberOfVisibleSteps);
	return this;
};


/**
 * Getter for property <code>firstVisibleStep</code>.
 * Id of the first step to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstVisibleStep</code>
 * @public
 * 
 */
sap.ui.commons.RoadMap.prototype.getFirstVisibleStep = function() {
	return this.getProperty("firstVisibleStep");
};

/**
 * Setter for property <code>firstVisibleStep</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstVisibleStep  new value for property <code>firstVisibleStep</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.setFirstVisibleStep = function(sFirstVisibleStep) {
	this.setProperty("firstVisibleStep", sFirstVisibleStep);
	return this;
};


/**
 * Getter for property <code>selectedStep</code>.
 * Id of the step which is currently selected
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedStep</code>
 * @public
 * 
 */
sap.ui.commons.RoadMap.prototype.getSelectedStep = function() {
	return this.getProperty("selectedStep");
};

/**
 * Setter for property <code>selectedStep</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedStep  new value for property <code>selectedStep</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.setSelectedStep = function(sSelectedStep) {
	this.setProperty("selectedStep", sSelectedStep);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Control width in CSS size
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.RoadMap.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.RoadMap.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>steps</code>.<br/>
 * Steps that are composing the RoadMap
 * 
 * @return {sap.ui.commons.RoadMapStep[]}
 * @public
 */
sap.ui.commons.RoadMap.prototype.getSteps = function() {
	return this.getAggregation("steps", []);
};


/**
 * Inserts a step into the aggregation named <code>steps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *          oStep the step to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the step should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the step is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the step is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.insertStep = function(oStep, iIndex) {
	this.insertAggregation("steps", oStep, iIndex);
	return this;
};

/**
 * Adds some step <code>oStep</code> 
 * to the aggregation named <code>steps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oStep the step to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.RoadMap.prototype.addStep = function(oStep) {
	this.addAggregation("steps", oStep);
	return this;
};

/**
 * Removes an step from the aggregation named <code>steps</code>.
 *
 * @param {int | string | sap.ui.commons.RoadMapStep} vStep the step to remove or its index or id
 * @return {sap.ui.commons.RoadMapStep} the removed step or null
 * @public
 */
sap.ui.commons.RoadMap.prototype.removeStep = function(vStep) {
	return this.removeAggregation("steps", vStep);
};

/**
 * Removes all the controls in the aggregation named <code>steps</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RoadMapStep[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.RoadMap.prototype.removeAllSteps = function() {
	return this.removeAllAggregation("steps");
};

/**
 * Checks for the provided <code>sap.ui.commons.RoadMapStep</code> in the aggregation named <code>steps</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oStep the step whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.RoadMap.prototype.indexOfStep = function(oStep) {
	return this.indexOfAggregation("steps", oStep);
};
	

/**
 * Destroys all the steps in the aggregation 
 * named <code>steps</code>.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.destroySteps = function() {
	this.destroyAggregation("steps");
	return this;
};


/**
 * Event is fired when the user selects a step; assumption is that this step was not selected with the previously done select action. 
 *
 * @name sap.ui.commons.RoadMap#stepSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.stepId Id of the selected step
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'stepSelected' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 * Event is fired when the user selects a step; assumption is that this step was not selected with the previously done select action. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.attachStepSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("stepSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'stepSelected' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.detachStepSelected = function(fnFunction, oListener) {
	this.detachEvent("stepSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event stepSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'stepId' of type <code>string</code> Id of the selected step</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RoadMap.prototype.fireStepSelected = function(mArguments) {
	this.fireEvent("stepSelected", mArguments);
	return this;
};


/**
 * Event is fired when a given step is expanded or collapsed by user. 
 *
 * @name sap.ui.commons.RoadMap#stepExpanded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.stepId Id of the expanded/collapsed step
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'stepExpanded' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 * Event is fired when a given step is expanded or collapsed by user. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.attachStepExpanded = function(oData, fnFunction, oListener) {
	this.attachEvent("stepExpanded", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'stepExpanded' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RoadMap.prototype.detachStepExpanded = function(fnFunction, oListener) {
	this.detachEvent("stepExpanded", fnFunction, oListener);
	return this;	
};

/**
 * Fire event stepExpanded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'stepId' of type <code>string</code> Id of the expanded/collapsed step</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.RoadMap.prototype.fireStepExpanded = function(mArguments) {
	this.fireEvent("stepExpanded", mArguments);
	return this;
};


// Start of sap/ui/commons/RoadMap.js
(function() {

/**
 * Does the setup when the RoadMap is created.
 * @private
 */
sap.ui.commons.RoadMap.prototype.init = function(){
	this.iStepWidth = -1;
	this.sCurrentFocusedStepRefId = null;
};

/**
 * Does all the cleanup when the RoadMap is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.RoadMap.prototype.exit = function (){
	// Cleanup resize event registration
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


//Setter for property numberOfVisibleSteps which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setNumberOfVisibleSteps = function(iNumberOfVisibleSteps) {
	var bIsRendered = this.getDomRef() ? true : false;
	this.setProperty("numberOfVisibleSteps", iNumberOfVisibleSteps, bIsRendered);
	if(bIsRendered) {
		sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
	}
	return this;
};


//Setter for property firstVisibleStep which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setFirstVisibleStep = function(sFirstVisibleStep) {
	var bIsRendered = this.getDomRef() ? true : false;
	if(bIsRendered){
		if(sFirstVisibleStep){
			var oStep = sap.ui.getCore().byId(sFirstVisibleStep);
			if(oStep && oStep.getParent() && (oStep.getParent() === this || oStep.getParent().getParent() === this) && oStep.getVisible()){
				this.setProperty("firstVisibleStep", sFirstVisibleStep, true);
				sap.ui.commons.RoadMapRenderer.updateScrollArea(this);
			}
		}else{
			this.setProperty("firstVisibleStep", "", true);
			sap.ui.commons.RoadMapRenderer.updateScrollArea(this);
		}
	}else{
		this.setProperty("firstVisibleStep", sFirstVisibleStep);
	}
	return this;
};


//Setter for property width which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setWidth = function(sWidth) {
	var bIsRendered = this.getDomRef() ? true : false;
	this.setProperty("width", sWidth, bIsRendered);
	if(bIsRendered){
		sap.ui.commons.RoadMapRenderer.setRoadMapWidth(this, sWidth);
		sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
	}
	return this;
};


//Setter for property selectedStep which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setSelectedStep = function(sSelectedStep) {
	var bIsRendered = this.getDomRef() ? true : false;
	if(bIsRendered){
		if(sSelectedStep){
			var oStep = sap.ui.getCore().byId(sSelectedStep);
			if(oStep && oStep.getParent() && (oStep.getParent() === this || oStep.getParent().getParent() === this)
				&& oStep.getEnabled() && oStep.getVisible()){
				sap.ui.commons.RoadMapRenderer.selectStepWithId(this, sSelectedStep);
				this.setProperty("selectedStep", sSelectedStep, true);
			}
		}else{
			sap.ui.commons.RoadMapRenderer.selectStepWithId(this, "");
			this.setProperty("selectedStep", "", true);
		}
	}else{
		this.setProperty("selectedStep", sSelectedStep);
	}
	return this;
};


/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.RoadMap.prototype.onThemeChanged = function(oEvent){
	this.iStepWidth = -1;
	this.invalidate();
	this.rerender();
};


/**
 * Called before rendering starts by the renderer
 * (This is not the onBeforeRendering method which would be not called for the first rendering)
 * @private
 */
sap.ui.commons.RoadMap.prototype.doBeforeRendering = function(){
	//Bring the properties into a solid state
	var bIsValidSelectedStep = false;
	var bIsValidFirstStep = false;
	var aSteps = this.getSteps();
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		//expanded=true only possible if substeps available and enabled
		if(oStep.getSubSteps().length == 0 || !oStep.getEnabled()){
			oStep.setProperty("expanded", false, true);
		}
		//A selected step must exist, be enabled and visible
		if(!oStep.getEnabled() && !oStep.getVisible() && this.getSelectedStep() == oStep.getId()){
			this.setProperty("selectedStep", "", true);
		}else if(oStep.getEnabled() && oStep.getVisible() && this.getSelectedStep() == oStep.getId()){
			bIsValidSelectedStep = true;
		}
		//A first step must exist and be visible
		if(oStep.getVisible() && this.getFirstVisibleStep() == oStep.getId()){
			bIsValidFirstStep = true;
		}

		var aSubSteps = oStep.getSubSteps();
		for(var j=0; j<aSubSteps.length; j++){
			var oSubStep = aSubSteps[j];
			//expanded always false
			oSubStep.setProperty("expanded", false, true);
			//A selected step must exist, be enabled and visible
			if(!oSubStep.getEnabled() && !oSubStep.getVisible() && this.getSelectedStep() == oSubStep.getId()){
				this.setProperty("selectedStep", "", true);
			}else if(oSubStep.getEnabled() && oSubStep.getVisible() && this.getSelectedStep() == oSubStep.getId()){
				bIsValidSelectedStep = true;
			}
			//A first step must exist and be visible
			if(oSubStep.getVisible() && this.getFirstVisibleStep() == oSubStep.getId()){
				bIsValidFirstStep = true;
			}
		}
	}

	if(!bIsValidSelectedStep) {
		this.setProperty("selectedStep", "", true);
	}
	if(!bIsValidFirstStep) {
		this.setProperty("firstVisibleStep", "", true);
	}

	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Called when the rendering is complete
 * @private
 */
sap.ui.commons.RoadMap.prototype.onAfterRendering = function(){

	var aSteps = this.getSteps();

	//Compute the step width
	if(this.iStepWidth == -1 && aSteps.length > 0){
		var jRef = jQuery.sap.byId(aSteps[0].getId());
		this.iStepWidth = jRef.outerWidth();
	}

	//Adapt the step labels if needed
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		sap.ui.commons.RoadMapRenderer.addEllipses(oStep);
		var aSubSteps = oStep.getSubSteps();
		for(var j=0; j<aSubSteps.length; j++){
			sap.ui.commons.RoadMapRenderer.addEllipses(aSubSteps[j]);
		}
	}

	//Adapt the size of the scroll area
	sap.ui.commons.RoadMapRenderer.updateScrollArea(this);

	// Listen to resizing
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
};


/**
 * Called when the Roadmap is resized
 * @private
 */
sap.ui.commons.RoadMap.prototype.onresize = function(oEvent) {
	var fDoOnResize = function() {
		if (this.getDomRef()) {
			//Adapt the size of the scroll area
			sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
			refreshFocus(this, "prev");
			this.sResizeInProgress = null;
		}
	};

	if(jQuery.browser.mozilla){
		fDoOnResize.apply(this, []);
	}else{
		if(!this.sResizeInProgress){
			this.sResizeInProgress = jQuery.sap.delayedCall(300, this, fDoOnResize);
		}
	}
};


/**
 * Behavior implementation which is executed when the user clicks the step.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onclick = function(oEvent){
	handleSelect(this, oEvent);
};


/**
 * Behavior implementation which is executed when the user presses the space or enter key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapselect = function(oEvent){
	handleSelect(this, oEvent);
};


/**
 * Behavior implementation which is executed when the focus comes into the control or on one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onfocusin = function(oEvent){
	var jTarget = jQuery(oEvent.target);
	var jTargetId = jTarget.attr("id");
	if(jTargetId && jQuery.sap.endsWith(jTargetId, "-box")){
		this.sCurrentFocusedStepRefId = jTargetId.substring(0, jTargetId.length-4);
	}else if(jTargetId && (jQuery.sap.endsWith(jTargetId, "-Start") || jQuery.sap.endsWith(jTargetId, "-End"))){
		//Keep the current focus
	}else{
		this.sCurrentFocusedStepRefId = sap.ui.commons.RoadMapRenderer.getFirstVisibleRef(this).attr("id");
		refreshFocus(this);
	}
	//Remove the control from tab chain to make tab out working (see onfocusout)
	jQuery.sap.byId(this.getId()).attr("tabindex", "-1");
};


/**
 * Behavior implementation which is executed when the focus leaves the control or one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onfocusout = function(oEvent){
	//Add the control to tab chain again to make tab in working (see onfocusin)
	jQuery.sap.byId(this.getId()).attr("tabindex", "0");
};


/**
 * Behavior implementation which is executed when the user presses the arrow up or arrow left (RTL: arrow right) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapprevious = function(oEvent){
	focusStep(oEvent, this, "prev");
};


/**
 * Behavior implementation which is executed when the user presses the arrow down or arrow right (RTL: arrow left) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapnext = function(oEvent){
	focusStep(oEvent, this, "next");
};


/**
 * Behavior implementation which is executed when the user presses the home/pos1 key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsaphome = function(oEvent){
	focusStep(oEvent, this, "first");
};


/**
 * Behavior implementation which is executed when the user presses the end key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapend = function(oEvent){
	focusStep(oEvent, this, "last");
};


//********* Private *********


//Called when either the Roadmap is clicked or the space or enter key is pressed
var handleSelect = function(oThis, oEvent){
	oEvent.stopPropagation();
	oEvent.preventDefault();

	var jTarget = jQuery(oEvent.target);
	var sTargetId = jTarget.attr("id");

	if(!sTargetId) {
		return;
	}

	//Handle event for the end of an expandable step
	var iIdx = sTargetId.lastIndexOf("-expandend");
	if(iIdx != -1){
		var oStep = sap.ui.getCore().byId(sTargetId.substring(0, iIdx));
		if(oStep && oThis.indexOfStep(oStep) >= 0){
			oStep.handleSelect(oEvent, true);
			return;
		}
	}

	//Handle select on delimiter
	if(sTargetId == oThis.getId() + "-Start"){
		if(jTarget.hasClass("sapUiRoadMapStartScroll")){
			scrollToNextStep(oThis, "prev", true);
		}else{
			refreshFocus(oThis);
		}
	}else if(sTargetId == oThis.getId() + "-End"){
		if(jTarget.hasClass("sapUiRoadMapEndScroll")){
			scrollToNextStep(oThis, "next", true);
		}else{
			refreshFocus(oThis);
		}
	}
};


//Helper function to scroll to following step (optionally with updating the focus (see focusStep)).
//Allowed directions are: next, prev, first, last.
var scrollToNextStep = function(oThis, sDir, bUpdateFocus){
	sap.ui.commons.RoadMapRenderer.scrollToNextStep(oThis, sDir, function(sFirstVisibleNodeId){
		var iIdx = sFirstVisibleNodeId.lastIndexOf("-expandend");
		if(iIdx != -1) {
			sFirstVisibleNodeId = sFirstVisibleNodeId.substring(0, iIdx);
		}
		oThis.setProperty("firstVisibleStep", sFirstVisibleNodeId, true);

		if(bUpdateFocus) {
			refreshFocus(oThis, sDir);
		}
	});
};


//Helper function to focus the following step of the current focused step in the given direction.
//Allowed directions are: next, prev, first, last. If this step is not visible an automatic scrolling is done.
var focusStep = function(oEvent, oThis, sDir){
	if(oEvent){
		oEvent.stopPropagation();
		oEvent.preventDefault();
	}
	if(!oThis.sCurrentFocusedStepRefId) {
		return;
	}

	var sFoo = sDir+"All";
	var bIsJumpToDelimiter = false;
	if(sDir == "first"){
		sFoo = "prevAll";
		bIsJumpToDelimiter = true;
	}else if(sDir == "last"){
		sFoo = "nextAll";
		bIsJumpToDelimiter = true;
	}

	var jCurrentFocusStep = jQuery.sap.byId(oThis.sCurrentFocusedStepRefId);
	var jFollowingSteps = jCurrentFocusStep[sFoo](":visible");
	var sFollowingFocusStepId = jQuery(jFollowingSteps.get(bIsJumpToDelimiter ? jFollowingSteps.length-1 : 0)).attr("id");
	if(sFollowingFocusStepId){
		if(!sap.ui.commons.RoadMapRenderer.isVisibleRef(oThis, sFollowingFocusStepId)) {
			scrollToNextStep(oThis, sDir);
		}

		jQuery.sap.byId(sFollowingFocusStepId+"-box").get(0).focus();
	}
};


//Sets the focus on the current focused step again. If the current focused step is not visible anymore
//the following step in the given direction is focused. Allowed directions are: next, prev, first, last
var refreshFocus = function(oThis, sDir){
	if(!oThis.sCurrentFocusedStepRefId) {
		return;
	}

	if(sDir && !sap.ui.commons.RoadMapRenderer.isVisibleRef(oThis, oThis.sCurrentFocusedStepRefId)){
		focusStep(null, oThis, sDir);
	}else{
		jQuery.sap.byId(oThis.sCurrentFocusedStepRefId+"-box").get(0).focus();
	}
};

}());
}; // end of sap.ui.commons.RoadMap
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.SearchField
jQuery.sap.declare("sap.ui.commons.SearchFieldRenderer");

/**
 * @class SearchField renderer. 
 * @static
 */
sap.ui.commons.SearchFieldRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.SearchFieldRenderer.render = function(oRenderManager, oControl){ 
    var rm = oRenderManager;
	
	if(!oControl.getVisible()){
		return;
	}
	 
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapUiSearchField");
    if(!oControl.getEditable() || !oControl.getEnabled()){
    	rm.addClass("sapUiSearchFieldDsbl");
    }
    if(!oControl.getShowListExpander()){
    	rm.addClass("sapUiSearchFieldNoExp");
    }
    if(oControl.getEnableClear()){
    	rm.addClass("sapUiSearchFieldClear");
    }
    if(oControl.getWidth()) {
    	rm.addStyle("width", oControl.getWidth());
    }
    rm.writeClasses();
    rm.writeStyles();
    /*if(sap.ui.getCore().getConfiguration().getAccessibility()){
    	rm.writeAttribute("role", "search");
    }*/
    rm.write(">");
    rm.renderControl(oControl._ctrl);
    if(oControl.getShowExternalButton()){
    	rm.renderControl(oControl._btn);
    }
    rm.write("</div>");
};






}; // end of sap.ui.commons.SearchFieldRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.RichTooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RichTooltip.
jQuery.sap.declare("sap.ui.commons.RichTooltip");

jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained


/**
 * Constructor for a new RichTooltip.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>imageSrc : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.TooltipBase#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * 
 * Is used to provide tool tips that can have long text, image and title. This tool tip extends the TooltipBase.
 * 
 * @extends sap.ui.core.TooltipBase
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RichTooltip = function (sId, mSettings) {
	sap.ui.core.TooltipBase.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RichTooltip.prototype = jQuery.sap.newObject(sap.ui.core.TooltipBase.prototype);

/*
 * Describe the sap.ui.commons.RichTooltip. 
 * Resulting metadata can be obtained via sap.ui.commons.RichTooltip.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RichTooltip", {

  // ---- object ----
  baseType : "sap.ui.core.TooltipBase",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getImageSrc", "setImageSrc"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null},
    "imageSrc" : {name : "imageSrc", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>title</code>.
 * Tool tip title to be displayed in the header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.commons.RichTooltip.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RichTooltip.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>imageSrc</code>.
 * If RichTooltip contains an image, this property is used to define the source path.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageSrc</code>
 * @public
 * 
 */
sap.ui.commons.RichTooltip.prototype.getImageSrc = function() {
	return this.getProperty("imageSrc");
};

/**
 * Setter for property <code>imageSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageSrc  new value for property <code>imageSrc</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RichTooltip.prototype.setImageSrc = function(sImageSrc) {
	this.setProperty("imageSrc", sImageSrc);
	return this;
};


// Start of sap/ui/commons/RichTooltip.js
/**
 * Returns the DOM reference of the Tooltip. There shall be only one DOM instance to reduce memory usage
 * (one should never see multiple RichTooltips at once...). So the ID is hardcoded.
 *
 * @return DOM reference
 * @private
*/
sap.ui.commons.RichTooltip.prototype.getDomRef = function() {
	return jQuery.sap.domById("sap-ui-rtt");
};
}; // end of sap.ui.commons.RichTooltip
if ( !jQuery.sap.isDeclared('sap.ui.commons.TreeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.TreeRenderer
jQuery.sap.declare("sap.ui.commons.TreeRenderer");

/**
 * @class Tree renderer.
 * @static
 */
sap.ui.commons.TreeRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oTree an object representation of the control that should be rendered
 */
sap.ui.commons.TreeRenderer.render = function(oRenderManager, oTree){
	// convenience variable
	var rm = oRenderManager;

	//First node get is focusable.
	sap.ui.commons.TreeRenderer.bFirstNodeRendered = false;

	rm.write("<div");
	rm.writeControlData(oTree);
	rm.addClass("sapUiTree");

	if(oTree.getHeight() != "" && oTree.getHeight() != "auto"){
		rm.addClass("sapUiTreeFixedHeight");
	} 
	if(!oTree.getShowHeader()){
		rm.addClass("sapUiTreeTransparent");
	} 
	rm.writeClasses();

	rm.addStyle("width", oTree.getWidth() || "auto");
	rm.addStyle("height", oTree.getHeight());
	rm.addStyle("min-width", oTree.getMinWidth());

	rm.writeStyles();

	//ARIA
	rm.writeAttribute('role', 'tree');
	rm.write(">");

	if(oTree.getShowHeader()){

		rm.write("<div id=\""+ oTree.getId() +"-Header\" class=\"sapUiTreeHeader\""); //Header
		rm.writeAttribute('role', 'heading');
		rm.write(">");

		//Title
		rm.write("<div class='sapUiTreeTitle'");

		if(oTree.getTooltip_AsString()){
			rm.writeAttributeEscaped( "title", oTree.getTooltip_AsString());//Tree tooltip
		}
		rm.write(">");
		rm.writeEscaped(oTree.getTitle());
		rm.write("</div>");


		if(oTree.getShowHeaderIcons()){
			rm.write("<div id='"+oTree.getId()+"-TBCont' class='sapUiTreeTbCont'"); //ToolbarContainer
			rm.writeAttribute('role', 'toolbar');
			rm.write(">");
			rm.renderControl(oTree.oCollapseAllButton);
			rm.renderControl(oTree.oExpandAllButton );

			rm.write("</div>");
		}


		rm.write("</div>");//End of Header
	}

	rm.write("<div id=\""+ oTree.getId() +"-TreeCont\""); //tree container


	rm.addClass("sapUiTreeCont");
	var showScroll = oTree.getShowHorizontalScrollbar();
	if(!showScroll){
		rm.addClass("sapUiTreeContNoScroll");
	}
	rm.writeClasses();

	rm.write(">");

	// write the HTML into the render manager
	rm.write("<ul class=\"sapUiTreeList\">");

	var aNodes = oTree.getNodes();
	 for(var i=0;i<aNodes.length;i++){
	   sap.ui.commons.TreeRenderer.renderNode(rm, aNodes[i], 1);
	}

	rm.write("</ul>");
	rm.write("</div>");//Tree Container
	rm.write("</div>");//Tree
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oNode an object representation of the control that should be rendered
 * @param {int} iLevel the hierarchical level value of the node
 */
sap.ui.commons.TreeRenderer.renderNode = function(oRenderManager, oNode, iLevel){
	// convenience variable
	var rm = oRenderManager;
	var bExpanded;

	// write the HTML into the render manager
	rm.write("<li");
	rm.writeControlData(oNode);
	rm.addClass("sapUiTreeNode");

	if(oNode.getExpanded() && (oNode.getHasExpander() || oNode.hasChildren() )){
		rm.addClass("sapUiTreeNodeExpanded");
		bExpanded = true;
	}
	else if(!oNode.getExpanded() && (oNode.getHasExpander() || oNode.hasChildren() )){

		rm.addClass("sapUiTreeNodeCollapsed");
		bExpanded = false;
	}

	if(oNode.getSelectable() && oNode.getIsSelected()){
		rm.addClass("sapUiTreeNodeSelected");
		rm.writeAttribute('aria-selected', 'true');
	}

	if(! bExpanded && oNode.hasSelectedHiddenChild()){
		rm.addClass("sapUiTreeNodeSelectedParent");
		rm.writeAttribute('aria-selected', 'true');
	}

	rm.writeClasses();

	//ARIA
	rm.writeAttribute('role', 'treeitem');
	rm.writeAttribute('aria-level', iLevel);

	if(bExpanded){
		rm.writeAttribute("aria-expanded", "true");
	}
	else{
		// don't write aria expanded attribute if a node has no children
		// if a node has an expander we assume that it also has children
		if (oNode.getHasExpander()) {
			rm.writeAttribute("aria-expanded", "false");
		}
	}


	//Tooltip
	rm.writeAttributeEscaped( "title", oNode.getTooltip_AsString());

	if(!sap.ui.commons.TreeRenderer.bFirstNodeRendered){
		rm.write("tabindex='0'");
		sap.ui.commons.TreeRenderer.bFirstNodeRendered = true;
	}
	rm.write(">");


	rm.write("<span");  //Node Content

	rm.addClass("sapUiTreeNodeContent");
	if(!oNode.getSelectable()){
		rm.addClass("sapUiTreeNodeNotSelectable");
	}
	rm.writeClasses();

	rm.write(">");  //Node Content

	if(oNode.getIcon()){
		rm.write("<img class='sapUiTreeIcon'");
		rm.writeAttributeEscaped( "src",oNode.getIcon());
		rm.write("/>");
	}

	rm.writeEscaped( oNode.getText());


	rm.write("</span>"); //Node Content

	rm.write("</li>");

	if(oNode.getNodes()){
		var aSubNodes = oNode.getNodes();
		rm.write("<ul");

		rm.writeAttribute("id", oNode.getId() + "-children");

		rm.addClass("sapUiTreeChildrenNodes");
		if(!bExpanded){
			rm.addClass("sapUiTreeHiddenChildrenNodes");
		}
		else{
			rm.writeAttribute("style", "display: block;");//For animation sake
		}
		rm.writeClasses();

		rm.write(">");
		iLevel ++;
		for(var i=0;i<aSubNodes.length;i++){
			sap.ui.commons.TreeRenderer.renderNode(rm, aSubNodes[i], iLevel);
		}
		rm.write("</ul>");
	}
};

}; // end of sap.ui.commons.TreeRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageList.
jQuery.sap.declare("sap.ui.commons.MessageList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new MessageList.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>visible : boolean</li>
 * <li>anchorId : string</li>
 * <li>maxListed : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Instantiated by the "MessageBar" Control if the user ever requests to generate the corresponding "MessageList".
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.MessageList = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.MessageList.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.MessageList. 
 * Resulting metadata can be obtained via sap.ui.commons.MessageList.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.MessageList", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVisible", "setVisible", "getAnchorId", "setAnchorId", "getMaxListed", "setMaxListed", 
    // aggregations
    
    // associations
    
    // events
    
    // methods
    "setMessages"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : false},
    "anchorId" : {name : "anchorId", type : "string", group : "Appearance", defaultValue : null},
    "maxListed" : {name : "maxListed", type : "string", group : "Misc", defaultValue : '7'}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>visible</code>.
 * To open or close the Control.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.MessageList.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageList.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>anchorId</code>.
 * Id of the anchor under which the MessageList is to render.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorId</code>
 * @public
 * 
 */
sap.ui.commons.MessageList.prototype.getAnchorId = function() {
	return this.getProperty("anchorId");
};

/**
 * Setter for property <code>anchorId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorId  new value for property <code>anchorId</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageList.prototype.setAnchorId = function(sAnchorId) {
	this.setProperty("anchorId", sAnchorId);
	return this;
};


/**
 * Getter for property <code>maxListed</code>.
 * Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.
 *
 * Default value is <code>7</code>
 *
 * @return {string} the value of property <code>maxListed</code>
 * @public
 * 
 */
sap.ui.commons.MessageList.prototype.getMaxListed = function() {
	return this.getProperty("maxListed");
};

/**
 * Setter for property <code>maxListed</code>.
 *
 * Default value is <code>7</code> 
 *
 * @param {string} sMaxListed  new value for property <code>maxListed</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageList.prototype.setMaxListed = function(sMaxListed) {
	this.setProperty("maxListed", sMaxListed);
	return this;
};


/**
 * Sets the message list to be displayed.
 *
 * @name sap.ui.commons.MessageList.prototype.setMessages
 * @function
 * @param {sap.ui.commons.Message[]} 
 *         aMessages
 *         Message list.

 * @type void
 * @public
 */


// Start of sap/ui/commons/MessageList.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

///**
// * This file defines behavior for the control,
// */
sap.ui.commons.MessageList.prototype.init = function(){
	// Defining some private data:
	this.aMessages = [];
	this.iItemHeight = 0;

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - bModal: "true/false" : For blocking the background window.
	this.oPopup   = new sap.ui.core.Popup(this, false, true, false);
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageList.prototype.exit = function() {
  this.close();

	this.oPopup.destroy();
	this.oPopup = null;
};

/**
 * Re-initializes the measurements, so all sizes are recalculated after a theme switch.
 * @private
 */
sap.ui.commons.MessageList.prototype.onThemeChanged = function () {
	this.iItemHeight = 0;
};

/**
 * This utility checks to see if a scrollbar has to be rendered.
 */
sap.ui.commons.MessageList.prototype.onAfterRendering = function () {
	var oList = this.getDomRef();
	var jList = jQuery(oList);

  // A scrollbar is only required over 7 items:
  var maxVisibleItems = this.getMaxListed();
  var len = this.aMessages.length;
  if (len <= maxVisibleItems) {
	// By default, css height was set to "20px" to make sure List would fit, for Popup to open.
	jList.height("auto");
	return;
  }

	// Calculating 1 item height:
	if (this.iItemHeight == 0) {
		var oItem = oList.firstChild;
		var jItem = jQuery(oItem);
		this.iItemHeight = jItem.height();
	}

  oList.style.overflowY = "scroll";
  oList.style.overflowX = "hidden";
	var desiredHeight = (maxVisibleItems * this.iItemHeight) + "px";
	jList.height(desiredHeight);
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility opens the MessageList Popup.
 */
sap.ui.commons.MessageList.prototype.open = function() {
  var rtl = sap.ui.getCore().getConfiguration().getRTL();

	// Defining or fetching the Popup attributes:
  var animationDuration = 200;
  var msgListSnapPoint = rtl ? sap.ui.core.Popup.Dock.RightTop    : sap.ui.core.Popup.Dock.LeftTop;
  var anchorSnapPoint  = rtl ? sap.ui.core.Popup.Dock.RightBottom : sap.ui.core.Popup.Dock.LeftBottom;
  var relativeAnchorPosition = "0 0";
  var anchor = null;
  var anchorId = this.getAnchorId();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
  this.oPopup.open(animationDuration, msgListSnapPoint, anchorSnapPoint, anchor, relativeAnchorPosition);
};

/**
 * This utility closes the MessageList Popup.
 */
sap.ui.commons.MessageList.prototype.close = function() {
  // Invoking the MsgBar Popup close = function(iDuration):
  var animationDuration = 200;
  this.oPopup.close(animationDuration);
};

/**
 * This public API receives the list of Messages to be displayed,
 * and re-render this Control if visible.
 */
sap.ui.commons.MessageList.prototype.setMessages = function(aMessages) {
  // Storing the Messages:
  this.aMessages = aMessages;

  // Re-rendering this MessageList if visible:
  if (this.getVisible()) {
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
  }

  return this;
};


// #############################################################################
// Overwriting auto-generated methods of MessageList.API.js
// #############################################################################

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 *
 * The MessageBar.API.js "setVisible" function is overwritten in order to
 * invoke the open() and close() the MessageList Popup.
 */
sap.ui.commons.MessageList.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);

  // Opening or closing the MessageBar, as requested:
  if (bVisible) {
	// Re-rendering, in case content is new.
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
		this.open();
  } else {
	  this.close();
  }

	return this;
};
}; // end of sap.ui.commons.MessageList
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageMapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.ImageMapRenderer");

/**
 * @class ImageMap renderer.
 * @static
 */
sap.ui.commons.ImageMapRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ImageMapRenderer.render = function(oImageRenderManager, oImageMap){
    // convenience variable
	var rm = oImageRenderManager;
	
	rm.write("<map tabindex='-1'");
	rm.writeControlData(oImageMap);
	
	// Render name attribute
	rm.writeAttributeEscaped("name",  oImageMap.getName());
	
	if (oImageMap.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oImageMap.getTooltip_AsString());
	}
	
	rm.write(">");
	var aAreas = oImageMap.getAreas();
		for (var index = 0, length = aAreas.length; index < length; index++) {
			rm.write("<area ");
			
			rm.writeElementData(aAreas[index]);
			
			// Get the Attributes of the area
			var sShape = aAreas[index].getShape();
			var sCoords = aAreas[index].getCoords();
			var sHref = aAreas[index].getHref();
			var sAlt = aAreas[index].getAlt();
			var sTitle = aAreas[index].getTooltip_AsString();
			
			// Render Shape Attribute. It can an be only rect, circle, poly and default
			if ( (sShape === "rect") || (sShape === "circle") || (sShape === "poly")){
				rm.writeAttribute("shape", sShape);
			} else {
				rm.writeAttribute("shape", "default");
			}
			
			// Render Coordinates. To do: check syntax of the input array of the coordinates
			if (sCoords) {
				rm.writeAttributeEscaped("coords", sCoords);
			}
			
			// Render href
			if (sHref) {
				rm.writeAttributeEscaped("href", sHref);
			}
			
			// Render text on ALT
			if (sAlt) {
				rm.writeAttributeEscaped("alt", sAlt);
			}		
			
			// Tooltip
			if (sTitle) {
				rm.writeAttributeEscaped("title", sTitle);
			}
			
			
			
			rm.writeAttribute("tabIndex", 0);
			rm.write(">");
		} // end of for
	
	rm.write("</map>");
	
};

}; // end of sap.ui.commons.ImageMapRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.FileUploader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.FileUploader.
jQuery.sap.declare("sap.ui.commons.FileUploader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new FileUploader.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>value : string</li>
 * <li>enabled : boolean</li>
 * <li>visible : boolean</li>
 * <li>uploadUrl : string</li>
 * <li>name : string</li>
 * <li>width : string</li>
 * <li>uploadOnChange : boolean</li>
 * <li>additionalData : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>change : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>uploadComplete : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The framework generates an input field and a button with text "Browse ...". The API supports features such as on change uploads (the upload starts immediately after a file has been selected), file uploads with explicit calls, adjustable control sizes, text display after uploads, or tooltips containing complete file paths.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.FileUploader = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.FileUploader.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.FileUploader. 
 * Resulting metadata can be obtained via sap.ui.commons.FileUploader.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.FileUploader", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getValue", "setValue", "getEnabled", "setEnabled", "getVisible", "setVisible", "getUploadUrl", "setUploadUrl", "getName", "setName", "getWidth", "setWidth", "getUploadOnChange", "setUploadOnChange", "getAdditionalData", "setAdditionalData", 
    // aggregations
    
    // associations
    
    // events
    "attachChange", "detachChange", "attachUploadComplete", "detachUploadComplete", 
    // methods
    "upload"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "value" : {name : "value", type : "string", group : "Data", defaultValue : ''},
    "enabled" : {name : "enabled", type : "boolean", group : "Behavior", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "uploadUrl" : {name : "uploadUrl", type : "string", group : "Data", defaultValue : ''},
    "name" : {name : "name", type : "string", group : "Data", defaultValue : null},
    "width" : {name : "width", type : "string", group : "Misc", defaultValue : ''},
    "uploadOnChange" : {name : "uploadOnChange", type : "boolean", group : "Behavior", defaultValue : false},
    "additionalData" : {name : "additionalData", type : "string", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "change" : "change", 
    "uploadComplete" : "uploadComplete"
  }

});	

sap.ui.commons.FileUploader.M_EVENTS = {'change':'change','uploadComplete':'uploadComplete'};


/**
 * Getter for property <code>value</code>.
 * Value of the path for file upload.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getValue = function() {
	return this.getProperty("value");
};

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setValue = function(sValue) {
	this.setProperty("value", sValue);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Disabled controls have different colors, depending on customer settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>uploadUrl</code>.
 * Used when URL address is on a remote server.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>uploadUrl</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getUploadUrl = function() {
	return this.getProperty("uploadUrl");
};

/**
 * Setter for property <code>uploadUrl</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sUploadUrl  new value for property <code>uploadUrl</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setUploadUrl = function(sUploadUrl) {
	this.setProperty("uploadUrl", sUploadUrl);
	return this;
};


/**
 * Getter for property <code>name</code>.
 * Unique control name for identification on the server side after sending data to the server.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getName = function() {
	return this.getProperty("name");
};

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setName = function(sName) {
	this.setProperty("name", sName);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Specifies the displayed control width.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>uploadOnChange</code>.
 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitely triggered.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>uploadOnChange</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getUploadOnChange = function() {
	return this.getProperty("uploadOnChange");
};

/**
 * Setter for property <code>uploadOnChange</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bUploadOnChange  new value for property <code>uploadOnChange</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setUploadOnChange = function(bUploadOnChange) {
	this.setProperty("uploadOnChange", bUploadOnChange);
	return this;
};


/**
 * Getter for property <code>additionalData</code>.
 * Additional data to send to the backend service (will be transmitted as value of a hidden input which name is derived from the name property with the suffix "-data").
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>additionalData</code>
 * @public
 * 
 */
sap.ui.commons.FileUploader.prototype.getAdditionalData = function() {
	return this.getProperty("additionalData");
};

/**
 * Setter for property <code>additionalData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAdditionalData  new value for property <code>additionalData</code>
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.setAdditionalData = function(sAdditionalData) {
	this.setProperty("additionalData", sAdditionalData);
	return this;
};


/**
 * Event is fired when the value of the file path has been changed. 
 *
 * @name sap.ui.commons.FileUploader#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue New file path value.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.FileUploader</code>.<br/>
 * Event is fired when the value of the file path has been changed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.attachChange = function(oData, fnFunction, oListener) {
	this.attachEvent("change", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.FileUploader</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	return this;	
};

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> New file path value.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.FileUploader.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	return this;
};


/**
 * Event is fired when the upload of the file is completed. <b>Except: when the file upload component returns a status code other than 200 this event will not be triggered.</b> This behavior is aligned with the HTTP specification. 
 *
 * @name sap.ui.commons.FileUploader#uploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'uploadComplete' event of this <code>sap.ui.commons.FileUploader</code>.<br/>
 * Event is fired when the upload of the file is completed. <b>Except: when the file upload component returns a status code other than 200 this event will not be triggered.</b> This behavior is aligned with the HTTP specification. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.attachUploadComplete = function(oData, fnFunction, oListener) {
	this.attachEvent("uploadComplete", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'uploadComplete' event of this <code>sap.ui.commons.FileUploader</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.FileUploader.prototype.detachUploadComplete = function(fnFunction, oListener) {
	this.detachEvent("uploadComplete", fnFunction, oListener);
	return this;	
};

/**
 * Fire event uploadComplete to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.FileUploader} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.FileUploader.prototype.fireUploadComplete = function(mArguments) {
	this.fireEvent("uploadComplete", mArguments);
	return this;
};


/**
 * Begins the upload as defined by uploadUrl.
 *
 * @name sap.ui.commons.FileUploader.prototype.upload
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/commons/FileUploader.js
/**
 * Initializes the control.
 * It is called from the constructor.
 * @private
 */
sap.ui.commons.FileUploader.prototype.init = function(){

	// works fine with applySettings() after init() - most things are done in onAfterRendering
	this.oFilePath = new sap.ui.commons.TextField(this.getId() + "-fu_input",
												  {width: this.getWidth()});
	this.oFilePath.setParent(this);
	this.oBrowse = new sap.ui.commons.Button({enabled : this.getEnabled(),
											  text: this.getBrowseText()});
	this.oBrowse.setParent(this);
	this.oFileUpload = null;

};

/**
 * Terminates the control when it has been destroyed.
 * @private
 */
sap.ui.commons.FileUploader.prototype.exit = function(){

	// destroy the nested controls
	this.oFilePath.destroy();
	this.oBrowse.destroy();

	// remove the IFRAME
	jQuery(this.oIFrameRef).unbind();
	sap.ui.getCore().getStaticAreaRef().removeChild(this.oIFrameRef);
	this.oIFrameRef = null;

};

/**
 * Clean up event listeners before rendering
 * @private
 */
sap.ui.commons.FileUploader.prototype.onBeforeRendering = function() {
	// unbind the custom event handlers in case of IE8
	jQuery(this.oFileUpload).unbind();
};

/**
 * Prepare the upload processing, establish the change handler for the
 * pure html input object.
 * @private
 */
sap.ui.commons.FileUploader.prototype.onAfterRendering = function() {

	// get the reference to the fileuploader
	this.oFileUpload = jQuery.sap.domById(this.getId() + "-fu");

	// prepare the upload iframe
	this.prepareUploadFrame();
	
	if (this.getEnabled()) {

		// event listener registration for change event in IE8 because the change
		// event is not bubbling for IE8 => so we do this for all browsers!
		jQuery(this.oFileUpload).change(jQuery.proxy(this.handlechange, this));

	}

	// calculation of the width of the overlay for the original file upload
	// !jQuery.browser.msie check: only for non IE browsers since there we need
	// the button in front of the fileuploader
	if (this.getWidth()) {
		// Recalculate the textfield width...
		var _buttonWidth = this.oBrowse.getDomRef().clientWidth;
		try {
			this.oFilePath.getDomRef().style.width = this.getWidth();
		} catch(oException) {
			jQuery.sap.log.error("Failed to set width of " + this.getWidth() + "\n" + oException.message);
		}
		var _newWidth = this.oFilePath.getDomRef().clientWidth - _buttonWidth;
		if (_newWidth < 0) {
			this.oFilePath.getDomRef().style.width = "0px";
			if (!jQuery.browser.msie) {
				this.oFileUpload.style.width = _buttonWidth;
			}
		}
		else {
			this.oFilePath.getDomRef().style.width = _newWidth + "px";
			this.oFilePath.setWidth(_newWidth ? _newWidth + "px" : null);
			if (!jQuery.browser.msie) {
				this.oFileUpload.style.width = _newWidth + _buttonWidth + "px";
			}
		}
	}

};


sap.ui.commons.FileUploader.prototype.setEnabled = function(bEnabled){
	this.setProperty("enabled", bEnabled, true);
	this.oFilePath.setEnabled(bEnabled);
	this.oBrowse.setEnabled(bEnabled);
	return this;
};


sap.ui.commons.FileUploader.prototype.setValue = function(sValue, bFireEvent) {
	var oldValue = this.getValue();
	if(oldValue != sValue) {
		// only upload when a valid value is set
		var bUpload = this.getUploadOnChange() && sValue;
		// when we do not upload we re-render (cause some browsers don't like
		// to change the value of file uploader INPUT elements)
		this.setProperty("value", sValue, bUpload);
		if (this.oFilePath) {
			this.oFilePath.setValue(sValue);
			if (this.oFilePath.getFocusDomRef()) {
				this.oFilePath.getFocusDomRef().focus();
			}
		}
		// only fire event when triggered by user interaction
		if (bFireEvent) {
			this.fireChange({id:this.getId(), newValue:sValue});
		}
		if (bUpload) {
			this.upload();
		}
	}
	return this;
};


sap.ui.commons.FileUploader.prototype.setAdditionalData = function(sAdditionalData) {
	// set the additional data in the hidden input
	this.setProperty("additionalData", sAdditionalData, true);
	var oAdditionalData = jQuery.sap.domById(this.getId() + "-fu_data");
	if (oAdditionalData) {
		var sAdditionalData = this.getAdditionalData() || "";
		oAdditionalData.value = sAdditionalData;
	}
	return this;
};


sap.ui.commons.FileUploader.prototype.upload = function() {
	var uploadForm = jQuery.sap.domById(this.getId() + "-fu_form");
	try {
		if (uploadForm) {
			this._bUploading = true;
			uploadForm.submit();
			jQuery.sap.log.info("File uploading to " + this.getUploadUrl());
		}
	} catch(oException) {
		jQuery.sap.log.error("File upload failed:\n" + oException.message);
	}
};
 

//
//	Event Handling
//
sap.ui.commons.FileUploader.prototype.onkeydown = function(oEvent) {
	if (!this.getEnabled()) {
		return;
	}
	var iKeyCode = oEvent.keyCode,
		eKC = jQuery.sap.KeyCodes;
	if (iKeyCode == eKC.DELETE || iKeyCode == eKC.BACKSPACE) {
		if (this.oFileUpload) {
			this.setValue("", true);
		}
	} else if (iKeyCode == eKC.SPACE) {
		// this does not work for IE8!
		// consider to always put the focus on the hidden file uploader
		// and let the fileuploader manager the keyboard interaction
		if (!jQuery.browser.msie && this.oFileUpload) {
			this.oFileUpload.click();
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
	} else if (iKeyCode != eKC.TAB &&
			   iKeyCode != eKC.F6) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

sap.ui.commons.FileUploader.prototype.handlechange = function(oEvent) {
	if (this.oFileUpload && this.getEnabled()) {
		this.setValue(this.oFileUpload.value, true);
	}
};

//
//	Private
//
/**
 * Helper to retrieve the I18N texts for a button
 * @private
 * TODO what about RenderManager.translate?
 */
sap.ui.commons.FileUploader.prototype.getBrowseText = function() {
	// TODO: add text to bundle
	return "Browse...";
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	var sText = undefined;
	if (rb) {
		sText = rb.getText("FILEUPLOAD_BROWSE");
	}
	return sText ? sText : "Browse...";
};

/**
 * Setter for property <code>value</code>.<br/>
 * Default value is: <code>''</code><br/><br/>
 * @param sValue {string}
 * @private
 */
sap.ui.commons.FileUploader.prototype.getShortenValue = function() {
	var sValue = this.getValue();
	return sValue.substr(sValue.lastIndexOf("\\")+1, sValue.length);
};

/**
 * Prepares the hidden IFrame for uploading the file (in static area).
 * @private
 */
sap.ui.commons.FileUploader.prototype.prepareUploadFrame = function() {
	if (!this.oIFrameRef) {
	
		// create the upload iframe
		var uploadForm = jQuery.sap.domById(this.getId() + "-fu_form");
		var oIFrameRef = document.createElement("iframe");
		oIFrameRef.style.display = "none";
		oIFrameRef.src = "javascript:''";
		oIFrameRef.id = this.sId + "-frame";
		sap.ui.getCore().getStaticAreaRef().appendChild(oIFrameRef);
		oIFrameRef.contentWindow.name = this.sId + "-frame";
		
		// sink the load event of the upload iframe
		var that = this;
		this._bUploading = false; // flag for uploading (because of IE8 to make sure that complete is only triggered after upload)
		jQuery(oIFrameRef).load(function(oEvent) {
			if (that._bUploading) {
				jQuery.sap.log.info("File uploaded to " + that.getUploadUrl());
				that.fireUploadComplete({uploadFrame: that.oIFrameRef}); 
				that._bUploading = false;
			}
		});

		// keep the reference
		this.oIFrameRef = oIFrameRef;
		
	}
};
}; // end of sap.ui.commons.FileUploader
if ( !jQuery.sap.isDeclared('sap.ui.commons.PasswordFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.PasswordFieldRenderer");


/**
 * @class PasswordFieldRenderer.
 * @static
 */
sap.ui.commons.PasswordFieldRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.PasswordFieldRenderer.renderInnerAttributes = function(rm, oTextField) {
	rm.writeAttribute('type', 'password');
};


sap.ui.commons.PasswordFieldRenderer.renderTextFieldEnabled = function(rm, oTextField) {
	if (!oTextField.getEnabled() && !oTextField.getEditable()) {
		// "disabled" may not be rendered because the Jaws screenreader then reads the password
		// use "readonly" instead
		// but write it only if it has not yet been written by the TextFieldRenderer
		rm.writeAttribute('readonly', 'readonly');
		rm.writeAttribute('tabindex', '-1'); // apart from that, act as if disabled, e.g. no tab-stop
	} else {
		rm.writeAttribute('tabindex', '0'); // editable and readonly have a tab-stop
	}
};


// this method uses "readonly" instead of "disabled" because with "disabled" the Jaws screenreader reads the password
sap.ui.commons.PasswordFieldRenderer.setEnabled = function(oTextField, bEnabled) {
	var oTfRef = jQuery.sap.domById(oTextField.getId());

	if (bEnabled) {
		if (oTextField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfStd');
			jQuery(oTfRef).removeAttr('readonly').attr('tabindex', '0');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfRo');
			jQuery(oTfRef).attr('tabindex', '0');
		}
	} else {
		if (oTextField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfStd').addClass('sapUiTfDsbl');
			jQuery(oTfRef).attr('readonly', 'readonly').attr('tabindex', '-1');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfRo').addClass('sapUiTfDsbl');
			jQuery(oTfRef).attr( 'tabindex', '-1');
		}
	}
};


}; // end of sap.ui.commons.PasswordFieldRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.Splitter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Splitter.
jQuery.sap.declare("sap.ui.commons.Splitter");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Splitter.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>splitterOrientation : sap.ui.commons.Orientation</li>
 * <li>splitterPosition : string</li>
 * <li>minSizeFirstPane : string</li>
 * <li>minSizeSecondPane : string</li>
 * <li>width : string</li>
 * <li>height : string</li>
 * <li>visible : boolean</li>
 * <li>showScrollBars : boolean</li>
 * <li>splitterBarVisible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>firstPaneContent : sap.ui.core.Control</li>
 * <li>secondPaneContent : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Allows to split the screen into two areas. Make sure that the container for the splitter has an absolute height or set an absolute height for the splitter using the height property. Otherwise the height of the splitter is calculated by the height of its contents.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Splitter = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Splitter.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.Splitter. 
 * Resulting metadata can be obtained via sap.ui.commons.Splitter.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Splitter", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getSplitterOrientation", "setSplitterOrientation", "getSplitterPosition", "setSplitterPosition", "getMinSizeFirstPane", "setMinSizeFirstPane", "getMinSizeSecondPane", "setMinSizeSecondPane", "getWidth", "setWidth", "getHeight", "setHeight", "getVisible", "setVisible", "getShowScrollBars", "setShowScrollBars", "getSplitterBarVisible", "setSplitterBarVisible", 
    // aggregations
    "getFirstPaneContent", "insertFirstPaneContent", "addFirstPaneContent", "removeFirstPaneContent", "removeAllFirstPaneContent", "indexOfFirstPaneContent", "destroyFirstPaneContent", "getSecondPaneContent", "insertSecondPaneContent", "addSecondPaneContent", "removeSecondPaneContent", "removeAllSecondPaneContent", "indexOfSecondPaneContent", "destroySecondPaneContent"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "splitterOrientation" : {name : "splitterOrientation", type : "sap.ui.commons.Orientation", group : "Behavior", defaultValue : sap.ui.commons.Orientation.Vertical},
    "splitterPosition" : {name : "splitterPosition", type : "string", group : "Behavior", defaultValue : '50%'},
    "minSizeFirstPane" : {name : "minSizeFirstPane", type : "string", group : "Behavior", defaultValue : '0%'},
    "minSizeSecondPane" : {name : "minSizeSecondPane", type : "string", group : "Behavior", defaultValue : '0%'},
    "width" : {name : "width", type : "string", group : "Behavior", defaultValue : '100%'},
    "height" : {name : "height", type : "string", group : "Behavior", defaultValue : '100%'},
    "visible" : {name : "visible", type : "boolean", group : "Behavior", defaultValue : true},
    "showScrollBars" : {name : "showScrollBars", type : "boolean", group : "Behavior", defaultValue : true},
    "splitterBarVisible" : {name : "splitterBarVisible", type : "boolean", group : "Behavior", defaultValue : true}
  },
  
  aggregations : {
    "firstPaneContent" : {name : "firstPaneContent", type : "sap.ui.core.Control", multiple : true, singularName : "firstPaneContent"}, 
    "secondPaneContent" : {name : "secondPaneContent", type : "sap.ui.core.Control", multiple : true, singularName : "secondPaneContent"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>splitterOrientation</code>.
 * The splitter can have horizontal or vertical orientation.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.ui.commons.Orientation} the value of property <code>splitterOrientation</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getSplitterOrientation = function() {
	return this.getProperty("splitterOrientation");
};

/**
 * Setter for property <code>splitterOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.ui.commons.Orientation} oSplitterOrientation  new value for property <code>splitterOrientation</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setSplitterOrientation = function(oSplitterOrientation) {
	this.setProperty("splitterOrientation", oSplitterOrientation);
	return this;
};


/**
 * Getter for property <code>splitterPosition</code>.
 * Position of splitter bar in percentage.
 * The default value means that the splitter is positioned in the middle of the area that is available for the splitter.
 *
 * Default value is <code>50%</code>
 *
 * @return {string} the value of property <code>splitterPosition</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getSplitterPosition = function() {
	return this.getProperty("splitterPosition");
};

/**
 * Setter for property <code>splitterPosition</code>.
 *
 * Default value is <code>50%</code> 
 *
 * @param {string} sSplitterPosition  new value for property <code>splitterPosition</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setSplitterPosition = function(sSplitterPosition) {
	this.setProperty("splitterPosition", sSplitterPosition);
	return this;
};


/**
 * Getter for property <code>minSizeFirstPane</code>.
 * The minimum size (width for vertical splitter or height for horizontal splitter) of the first Pane
 * 
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>minSizeFirstPane</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getMinSizeFirstPane = function() {
	return this.getProperty("minSizeFirstPane");
};

/**
 * Setter for property <code>minSizeFirstPane</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sMinSizeFirstPane  new value for property <code>minSizeFirstPane</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setMinSizeFirstPane = function(sMinSizeFirstPane) {
	this.setProperty("minSizeFirstPane", sMinSizeFirstPane);
	return this;
};


/**
 * Getter for property <code>minSizeSecondPane</code>.
 * The minimum size (width for vertical splitter or height for horizontal splitter) of the second Pane
 * 
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>minSizeSecondPane</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getMinSizeSecondPane = function() {
	return this.getProperty("minSizeSecondPane");
};

/**
 * Setter for property <code>minSizeSecondPane</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sMinSizeSecondPane  new value for property <code>minSizeSecondPane</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setMinSizeSecondPane = function(sMinSizeSecondPane) {
	this.setProperty("minSizeSecondPane", sMinSizeSecondPane);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * The width of the split area in px or in %
 *
 * Default value is <code>100%</code>
 *
 * @return {string} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * The height of the split area in px or in %
 *
 * Default value is <code>100%</code>
 *
 * @return {string} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {string} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible splitters are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>showScrollBars</code>.
 * Specifies if the browser should display scroll bars or simply cut the content of a splitter pane when the content does not fit into its pane.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showScrollBars</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getShowScrollBars = function() {
	return this.getProperty("showScrollBars");
};

/**
 * Setter for property <code>showScrollBars</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowScrollBars  new value for property <code>showScrollBars</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setShowScrollBars = function(bShowScrollBars) {
	this.setProperty("showScrollBars", bShowScrollBars);
	return this;
};


/**
 * Getter for property <code>splitterBarVisible</code>.
 * set the splitter bar to be visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>splitterBarVisible</code>
 * @public
 * 
 */
sap.ui.commons.Splitter.prototype.getSplitterBarVisible = function() {
	return this.getProperty("splitterBarVisible");
};

/**
 * Setter for property <code>splitterBarVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSplitterBarVisible  new value for property <code>splitterBarVisible</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.setSplitterBarVisible = function(bSplitterBarVisible) {
	this.setProperty("splitterBarVisible", bSplitterBarVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>firstPaneContent</code>.<br/>
 * Controls inside the first pane. These are the left ones in case of defining a vertical splitter, and the top ones in case of using the horizontal splitter.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.Splitter.prototype.getFirstPaneContent = function() {
	return this.getAggregation("firstPaneContent", []);
};


/**
 * Inserts a firstPaneContent into the aggregation named <code>firstPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFirstPaneContent the firstPaneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the firstPaneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the firstPaneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the firstPaneContent is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.insertFirstPaneContent = function(oFirstPaneContent, iIndex) {
	this.insertAggregation("firstPaneContent", oFirstPaneContent, iIndex);
	return this;
};

/**
 * Adds some firstPaneContent <code>oFirstPaneContent</code> 
 * to the aggregation named <code>firstPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFirstPaneContent the firstPaneContent to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Splitter.prototype.addFirstPaneContent = function(oFirstPaneContent) {
	this.addAggregation("firstPaneContent", oFirstPaneContent);
	return this;
};

/**
 * Removes an firstPaneContent from the aggregation named <code>firstPaneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFirstPaneContent the firstPaneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed firstPaneContent or null
 * @public
 */
sap.ui.commons.Splitter.prototype.removeFirstPaneContent = function(vFirstPaneContent) {
	return this.removeAggregation("firstPaneContent", vFirstPaneContent);
};

/**
 * Removes all the controls in the aggregation named <code>firstPaneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Splitter.prototype.removeAllFirstPaneContent = function() {
	return this.removeAllAggregation("firstPaneContent");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>firstPaneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFirstPaneContent the firstPaneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Splitter.prototype.indexOfFirstPaneContent = function(oFirstPaneContent) {
	return this.indexOfAggregation("firstPaneContent", oFirstPaneContent);
};
	

/**
 * Destroys all the firstPaneContent in the aggregation 
 * named <code>firstPaneContent</code>.
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.destroyFirstPaneContent = function() {
	this.destroyAggregation("firstPaneContent");
	return this;
};

	
/**
 * Getter for aggregation <code>secondPaneContent</code>.<br/>
 * Controls inside the second pane. These are the right ones in case of defining a vertical splitter, and the bottom ones in case of using the horizontal splitter.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.commons.Splitter.prototype.getSecondPaneContent = function() {
	return this.getAggregation("secondPaneContent", []);
};


/**
 * Inserts a secondPaneContent into the aggregation named <code>secondPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oSecondPaneContent the secondPaneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the secondPaneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the secondPaneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the secondPaneContent is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.insertSecondPaneContent = function(oSecondPaneContent, iIndex) {
	this.insertAggregation("secondPaneContent", oSecondPaneContent, iIndex);
	return this;
};

/**
 * Adds some secondPaneContent <code>oSecondPaneContent</code> 
 * to the aggregation named <code>secondPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oSecondPaneContent the secondPaneContent to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.Splitter.prototype.addSecondPaneContent = function(oSecondPaneContent) {
	this.addAggregation("secondPaneContent", oSecondPaneContent);
	return this;
};

/**
 * Removes an secondPaneContent from the aggregation named <code>secondPaneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vSecondPaneContent the secondPaneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed secondPaneContent or null
 * @public
 */
sap.ui.commons.Splitter.prototype.removeSecondPaneContent = function(vSecondPaneContent) {
	return this.removeAggregation("secondPaneContent", vSecondPaneContent);
};

/**
 * Removes all the controls in the aggregation named <code>secondPaneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.Splitter.prototype.removeAllSecondPaneContent = function() {
	return this.removeAllAggregation("secondPaneContent");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>secondPaneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oSecondPaneContent the secondPaneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.Splitter.prototype.indexOfSecondPaneContent = function(oSecondPaneContent) {
	return this.indexOfAggregation("secondPaneContent", oSecondPaneContent);
};
	

/**
 * Destroys all the secondPaneContent in the aggregation 
 * named <code>secondPaneContent</code>.
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Splitter.prototype.destroySecondPaneContent = function() {
	this.destroyAggregation("secondPaneContent");
	return this;
};


// Start of sap/ui/commons/Splitter.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.events'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.keycodes'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained



sap.ui.commons.Splitter.prototype.onBeforeRendering = function() {
	// cleanup resize event registration before re-rendering
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	if (this.sSpecialResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sSpecialResizeListenerId);
		this.sSpecialResizeListenerId = null;
	}
};

sap.ui.commons.Splitter.prototype.onAfterRendering = function() {

	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	this.splitterDIV = jQuery.sap.domById(this.getId());
	this.splitterBar = jQuery.sap.domById(this.getId() + '_SB');
	this.firstPane = jQuery.sap.domById(this.getId() + '_firstPane');
	this.secondPane = jQuery.sap.domById(this.getId() + '_secondPane');

	this.minSizeFP = this.getMinSizeFirstPane();
	this.minSizeSP = this.getMinSizeSecondPane();

	this.minSizeFP = this.minSizeFP.substring(0, (this.minSizeFP).length - 1);
	this.minSizeFP = parseFloat(this.minSizeFP);

	this.minSizeSP = this.minSizeSP.substring(0, (this.minSizeSP).length - 1);
	this.minSizeSP = parseFloat(this.minSizeSP);

	this.spOrientation =  this.getSplitterOrientation();

	this.sBarPosition = this.getSplitterPosition();
	this.sBarPosition = this.sBarPosition.substring(0, this.sBarPosition.length - 1);
	this.sBarPosition = parseFloat(this.sBarPosition);

	// in hcb mode set splitter bar width to 6 px
	if (sap.ui.getCore().getConfiguration().getTheme() == "sap_hcb") {
		this.sbSize = 6;
	}
	else {
		this.sbSize = 4;
	}
	this.resizeSplitterElements();

	// if no splitter parent height is specified and the splitter height is specified in % the splitter won't be displayed
	// and the splitterbar height will be
	// FF: 0 in vertical and horizontal splitters
	// or in IE: >= the div height (vertical) or  != sbSize (horizontal)
	// if any above is the case we have to set its height to a fixed pixel value
	var splitterBarHeight = jQuery(this.splitterBar).height();
	if (this.spOrientation == sap.ui.commons.Orientation.Vertical){
		if (splitterBarHeight <= 0 || splitterBarHeight > jQuery(this.splitterDIV).height()){
			this.fixHeight();
		}
	}else{
		if (splitterBarHeight <= 0 || splitterBarHeight != this.sbSize){
			this.fixHeight();
		}
	}

	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.splitterDIV, jQuery.proxy(this.onresize, this));

};


sap.ui.commons.Splitter.prototype.onresize = function(oEvent) {

	this.resizeSplitterElements();

};

sap.ui.commons.Splitter.prototype.resizeSplitterElements = function() {

	var sbW, sbH, width, height, widthSP, heightSP;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	/**
	 * Calculate the equivalent percentage of the 4px : the width/height of the splitter bar
	 */

	if (this.spOrientation == sap.ui.commons.Orientation.Vertical) {

		width = jQuery(this.splitterDIV).width();
		if (width == 0) {
			width = 100; //px so it would show something at least
		}		
		sbW = (this.sbSize * 100) / width;
		
		// check if bar is in the far right
		if (this.sBarPosition >= 100 || this.sBarPosition + sbW > 100) {
			this.sBarPosition = 100 - sbW;
			widthSP = 0;
		}else{
			widthSP = 100 - sbW - this.sBarPosition;
		}
		jQuery(this.firstPane).css("width", this.sBarPosition + "%");
		jQuery(this.splitterBar).css("width", sbW + "%");
		jQuery(this.secondPane).css("width", widthSP + "%");

	} else {

		height = jQuery(this.splitterDIV).height();
		if (height == 0 ){
			height = 100; //px so it would show something at least
		}
		sbH = (this.sbSize * 100) / height;

		// check if bar is in the far bottom
		if (this.sBarPosition >= 100 || this.sBarPosition + sbH > 100){
			this.sBarPosition = 100 - sbH;
			heightSP = 0;
		}else{
			heightSP = 100 - sbH - this.sBarPosition;
		}
		jQuery(this.firstPane).css("height", this.sBarPosition + "%");
		jQuery(this.splitterBar).css("height", sbH + "%");
		jQuery(this.secondPane).css("height", heightSP + "%");

	}

	// update splitterpos value...suppress rerendering
	this.setProperty("splitterPosition", this.sBarPosition + "%", true);
	
	// fix height if splitterdiv height is 0 we set it to 100 px to show something at least
	// further resizing should then work correctly
	if (jQuery(this.splitterDIV).height() == 0){
		jQuery(this.splitterDIV).css("height", "100px");
		jQuery(this.splitterBar).css("height", "100px");
	}

};
/*
sap.ui.commons.Splitter.prototype.setSplitterPosition = function(oSplitterPosition){
	this.splitterPosition = oSplitterPosition;
};

sap.ui.commons.Splitter.prototype.getSplitterPosition = function(oSplitterPosition){
	this.splitterPosition = oSplitterPosition;
};
*/

/**
 * set height to a fixed height if there is no absolute height specified
 */
sap.ui.commons.Splitter.prototype.fixHeight = function() {
	var height = jQuery(this.splitterDIV).height();
	// reset the splitter div height so that its contents fit inside...
	jQuery(this.splitterDIV).css("height", height + "px");
	if (this.spOrientation == sap.ui.commons.Orientation.Vertical) {
		jQuery(this.splitterBar).css("height", height + "px");
	}
	var oParent = this.splitterDIV.parentNode;
	if (oParent){
		var fHandler = jQuery.proxy(this.onresizespecial, this);
		this.sSpecialResizeListenerId = sap.ui.core.ResizeHandler.register(oParent, fHandler);
		//fHandler({target: oParent});
	}
};

/**
 *	cleanup resize event registration before re-rendering
 */
sap.ui.commons.Splitter.prototype.exit = function() {
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	if (this.sSpecialResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sSpecialResizeListenerId);
		this.sSpecialResizeListenerId = null;
	}
};


/**
 * resize event handler to handle the special case when no splitter parent height is specified and the splitter height is specified in %.
 * Then the splitter won't be displayed. In this case when the parent gets resized, get the parents height and use it to adapt the current fixed splitter height in px
 * so that everything stays in place.
 */
sap.ui.commons.Splitter.prototype.onresizespecial = function(oEvent) {
	// perhaps this is event handler is not needed. depends on if current child elements should be resized or not
	var parentHeight = jQuery(oEvent.target).height();
	var currentHeight = jQuery(this.splitterDIV).height();
	if (currentHeight != parentHeight){
		// set bar height to the splitterDIV height value
		jQuery(this.splitterDIV).css("height", parentHeight + "px");
		if (this.spOrientation == sap.ui.commons.Orientation.Vertical) {
			jQuery(this.splitterBar).css("height", parentHeight + "px");
		}
	}
};

/**
 * mousedown event handler: create a ghost bar for the splitter bar and starts dragging it
 */
sap.ui.commons.Splitter.prototype.onmousedown = function(oEvent) {

	if (!(oEvent.target == this.splitterBar)) {
		return;
	}

	var oJBody = jQuery(document.body);
		// Fix for IE text selection while dragging
	oJBody.bind("selectstart",jQuery.proxy(this.splitterSelectStart,this));

	var offset = jQuery(this.splitterBar).offset();
	var height = jQuery(this.splitterBar).height();
	var width = jQuery(this.splitterBar).width();
	var cssClass;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	if (this.spOrientation == sap.ui.commons.Orientation.Vertical) {
		cssClass = "sapUiVSBGhost";
	}
	else {
		cssClass = "sapUiHSBGhost";
	}

	jQuery(document.body).append(
			"<div id=\"" + this.getId() + "_ghost\" class=\"" + cssClass + "\" style =\" height:" + height + "px; width:"
			+ width + "px; left:" + offset.left + "px; top:" + offset.top + "px\" ></div>");

	// append overlay over splitter to enable correct functionality of moving the splitter
	jQuery(this.splitterDIV).append(
			"<div id=\"" + this.getId() + "_overlay\" style =\"left: 0px;" +
					" right: 0px; bottom: 0px; top: 0px; position:absolute\" ></div>");

	jQuery(document).bind("mouseup", jQuery.proxy(this.onGhostMouseRelease, this));
	jQuery(document).bind("mousemove", jQuery.proxy(this.onGhostMouseMove, this));
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * The selectstart event triggered in IE to select the text.
 * @private
 * @param {event} oEvent The splitterselectstart event
 * @return {boolean} false
 */
sap.ui.commons.Splitter.prototype.splitterSelectStart = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};

/**
 * drops the splitter bar
 */

sap.ui.commons.Splitter.prototype.onGhostMouseRelease = function(oEvent) {

	var newSbPosition, spHeight, spWidth;
	var splitterBarGhost = jQuery.sap.domById(this.getId() + "_ghost");
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	if ( this.spOrientation == sap.ui.commons.Orientation.Vertical){

		if (!rtl)
		{
		newSbPosition = oEvent.pageX - jQuery(this.firstPane).offset().left;
		spWidth = jQuery(this.splitterDIV).width();
		newSbPosition = (newSbPosition * 100) / spWidth;
		}
		else {
		newSbPosition = oEvent.pageX - jQuery(this.secondPane).offset().left;
		spWidth = jQuery(this.splitterDIV).width();
		newSbPosition = (( spWidth - newSbPosition ) * 100) / spWidth;
		}
	}
	else{
		newSbPosition = oEvent.pageY - jQuery(this.firstPane).offset().top;
		spHeight = jQuery(this.splitterDIV).height();
		newSbPosition = (newSbPosition * 100) / spHeight;
	}

	if (newSbPosition < this.minSizeFP) {
		newSbPosition = this.minSizeFP;
	}
	else
		if ((100 - newSbPosition) < this.minSizeSP) {
			newSbPosition = 100 - this.minSizeSP;
		}

	this.sBarPosition =  newSbPosition;

	this.resizeSplitterElements();

	jQuery(splitterBarGhost).remove();
	jQuery("#" + this.getId() + "_overlay").remove();

	var oJBody = jQuery(document.body);
	oJBody.unbind("selectstart", this.splitterSelectStart);

	jQuery(document).unbind("mouseup", this.onGhostMouseRelease);
	jQuery(document).unbind("mousemove", this.onGhostMouseMove);

};

sap.ui.commons.Splitter.prototype.onGhostMouseMove = function(oEvent) {

	var splitterBarGhost = jQuery.sap.domById(this.getId() + "_ghost");
	var max;
	var min;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	var leftFirstPane = jQuery(this.firstPane).offset().left;
	var w = jQuery(this.splitterDIV).width();
	var leftSecondPane = jQuery(this.secondPane).offset().left;

	if (this.getSplitterOrientation() == sap.ui.commons.Orientation.Vertical) {

		if (!rtl) {

			min = leftFirstPane + (w * this.minSizeFP) / 100;
			max = leftFirstPane + (w * (100 - this.minSizeSP)) / 100;

			if (oEvent.pageX > min && oEvent.pageX < max) {
				jQuery(splitterBarGhost).css("left", oEvent.pageX + "px");
			}
		}
		else{


			min = leftSecondPane + (w * this.minSizeSP) / 100;
			max = leftSecondPane + (w * (100 - this.minSizeFP)) / 100;

			if (oEvent.pageX > min && oEvent.pageX < max) {
				jQuery(splitterBarGhost).css("left", oEvent.pageX + "px");
			}


		}

	} else {

		var h = jQuery(this.splitterDIV).height();

		min = jQuery(this.firstPane).offset().top + (h * this.minSizeFP) / 100;
		max = jQuery(this.secondPane).offset().top + jQuery(this.secondPane).height() - (h * this.minSizeSP) / 100;
		if (oEvent.pageY > min && oEvent.pageY < max) {
			jQuery(splitterBarGhost).css("top", oEvent.pageY + "px");
		}
	}
};

/**
 * Convenience method for handling of Ctrl key, meta key etc.
 *
 * @private
 */
sap.ui.commons.Splitter.prototype.getCtrlKey = function(oEvent) {
	// Maybe we should use the metaKey when running on Mac OS (window.navigator.userAgent.indexOf("Mac OS") > -1)
	// and the ctrlKey otherwise. The normalization of the metaKey in jQuery is slightly different from this approach.
	return !!oEvent.metaKey; // double negation doesn't have effect on boolean but ensures null and undefined are
	// equivalent to false.
};

/**
 * Convenience method to check an event for a certain combination of modifier keys
 *
 * @private
 */
sap.ui.commons.Splitter.prototype.checkModifierKey = function(oEvent, bCtrlKey, bAltKey, bShiftKey) {
	return oEvent.shiftKey == bShiftKey && oEvent.altKey == bAltKey && this.getCtrlKey(oEvent) == bCtrlKey;
};

/**
 * Home key minimizes the focused pane to the last possible position
 */
sap.ui.commons.Splitter.prototype.onsaphome = function(oEvent) {
	if (oEvent.target == this.firstPane){
		this.sBarPosition = this.minSizeFP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
	if (oEvent.target == this.secondPane){
		this.sBarPosition = 100-this.minSizeSP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * End key maximizes the focused pane to the last possible position
 */
sap.ui.commons.Splitter.prototype.onsapend = function(oEvent) {
	if (oEvent.target == this.firstPane){
		this.sBarPosition = 100-this.minSizeSP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
	if (oEvent.target == this.secondPane){
		this.sBarPosition = this.minSizeFP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

sap.ui.commons.Splitter.prototype.onArrowKeys = function(oEvent,oInc) {
	var width, height, sbSize, sbPosition, newSbPosition;

	if (this.spOrientation == sap.ui.commons.Orientation.Vertical) {
		width = jQuery(this.splitterDIV).width();
		sbPosition = jQuery(this.firstPane).width();
		sbPosition = (sbPosition * 100) / width;
		// move 10 pixels
		sbSize = (10 * 100) / width;
	} else {
		height = jQuery(this.splitterDIV).height();
		sbPosition = jQuery(this.firstPane).height();
		sbPosition = (sbPosition * 100) / height;
		// move 10 pixels
		sbSize = (10 * 100) / height;
	}

	if (oInc == "false") {
		newSbPosition = sbPosition - sbSize;
	}
	else if (oInc == "true") {
		newSbPosition = sbPosition + sbSize;
	}

	if (newSbPosition < this.minSizeFP)	{
		newSbPosition = this.minSizeFP;
	}
	else if ((100 - newSbPosition) < this.minSizeSP) {
		newSbPosition = 100 - this.minSizeSP;
	}

	this.sBarPosition = newSbPosition;
	this.resizeSplitterElements();
};

/**
 * Only working for horizontal splitters.
 * If the Shift and Up keys are pressed and if the focus is on one of the splitter panes moves the horizontal sash bar up by one step
 */
sap.ui.commons.Splitter.prototype.onsapupmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true) && this.spOrientation == sap.ui.commons.Orientation.Horizontal){
		if (oEvent.target == this.firstPane || oEvent.target == this.secondPane){
			this.onArrowKeys(oEvent,"false");
			// cancel the event
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};


/**
 * Only working for horizontal splitters.
 * If the Shift and Up keys are pressed and if the focus is on one of the splitter panes moves the horizontal sash bar down by one step
 */
sap.ui.commons.Splitter.prototype.onsapdownmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true) && this.spOrientation == sap.ui.commons.Orientation.Horizontal){
		if (oEvent.target == this.firstPane || oEvent.target == this.secondPane){
			this.onArrowKeys(oEvent,"true");
			// cancel the event
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};

/**
 * Only working for vertical splitters.
 * If the Shift and Left keys are pressed and if the focus is on one of the splitter panes moves the vertical sash bar left by one step
 */
sap.ui.commons.Splitter.prototype.onsapleftmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true) && this.spOrientation == sap.ui.commons.Orientation.Vertical){
		if (oEvent.target == this.firstPane || oEvent.target == this.secondPane){
			var rtl = sap.ui.getCore().getConfiguration().getRTL();
			if (rtl) {
				this.onArrowKeys(oEvent,"true");
			}
			else {
				this.onArrowKeys(oEvent,"false");
			}
			// cancel the event
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};

/**
 * Only working for vertical splitters.
 * If the Shift and Right keys are pressed and if the focus is on one of the splitter panes moves the vertical sash bar right by one step
 */
sap.ui.commons.Splitter.prototype.onsaprightmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true) && this.spOrientation == sap.ui.commons.Orientation.Vertical){
		if (oEvent.target == this.firstPane || oEvent.target == this.secondPane){
			var rtl = sap.ui.getCore().getConfiguration().getRTL();
			if (rtl) {
				this.onArrowKeys(oEvent,"false");
			}
			else {
				this.onArrowKeys(oEvent,"true");
			}
			// cancel the event
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};

/**
 * only drag events are fired; mouse events such as mousemove are not fired during drag operation
 */
/**
 * event dragstart fired when the user starts dragging the sash bar
 */

sap.ui.commons.Splitter.prototype.ondragstart = function(oEvent) {
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Convenience method checks if a domElement is a first Pane, a second Pane or a splitter bar
 */

sap.ui.commons.Splitter.prototype.splitterPart = function(domElement) {
	/** *************method variables********************** */
	var classDomElement;
	/** *************************************************** */

	classDomElement = jQuery(domElement).attr("class");

	switch (classDomElement) {
		case "sapUiVSplitterFirstPane" :
		case "sapUiHSplitterFirstPane" : {
			return "first";
		}
		case "sapUiHSplitterSecondPane" :
		case "sapUiVSplitterSecondPane" : {
			return "second";
		}
		case "sapUiVerticalSplitterBar" :
		case "sapUiHorizontalSplitterBar" : {
			return "bar";
		}
		case "sapUiSplitter" : {
			return "DIV";
		}
		default :
			return "other";
	}
};

/**
 * Convenience method to set the focus on the next splitter element (first pane, splitter bar or second pane) in case of
 * embedded splitters: we consider the splitters as the nodes of a ternary tree, each node is a DOM element and has at
 * most three childs (FP, SB, SP) in this order if the focus is in a given node of the tree the next focus is computed
 * following the algorithm: 1- if the node has a child set the focus on the first child (first pane) 2- otherwise if the
 * node has a direct sibling on the right (SB or SP) set the focus on it 3- otherwise recursively search up (parent) the
 * tree the first node with a direct sibling on the right 4- if found set the focus on it otherwise return
 *
 * Note: in current spec splitter bar shouldn't be focused any more. This was changed in the code.
 */
sap.ui.commons.Splitter.prototype.setFocusNextSplitterElement = function(oEvent) {

	var currentFocusedDE = oEvent.target;
	var splitterElement = this.splitterPart(currentFocusedDE);
	var parent;
	var sibling;
	var child;
	var p;

	switch (splitterElement) {
		case "first" : {
			p = jQuery(currentFocusedDE).children(".sapUiSplitter");
			if (p.length != 0) {
				currentFocusedDE = p[0];
				child = jQuery(currentFocusedDE).children(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");

				jQuery(child[0]).focus();
				return;
			} else {
				sibling = jQuery(currentFocusedDE).next();
				//new: splitter bar shouldn't be focused anymore so skip it
				//jQuery(sibling).focus();
				jQuery(sibling).next().focus();
				return;
			}
		}
		case "second" : {
			p = jQuery(currentFocusedDE).children(".sapUiSplitter");
			if (p.length != 0) {
				currentFocusedDE = p[0];
				child = jQuery(currentFocusedDE).children(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");

				jQuery(child[0]).focus();
				return;
			} else {
				parent = jQuery(currentFocusedDE).closest(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");
				if (parent.length != 0) {
					sibling = jQuery(parent[0]).next();
					jQuery(sibling).focus();
					return;
				} else {
					return;
				}
			}
		}
		case "bar" : {
			jQuery(jQuery(currentFocusedDE).next()).focus();
			return;
		}
		case "other" : {
			parent = jQuery(currentFocusedDE).closest(
			".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane, .sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
			if (parent.length != 0) {
				jQuery(parent[0]).focus();
				return;
			} else {
				return;
			}
		}
	}
};

sap.ui.commons.Splitter.prototype.focusPrev = function(oElement) {
	var child = jQuery(oElement).children(".sapUiSplitter");
	var sPane;
	if (child.length != 0) {
		sPane = jQuery(child[0]).children(".sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
		this.focusPrev(sPane[0]);
	} else {
		jQuery(oElement).focus();
		return;
	}
};

/**
 * Convenience method to search for the next focusable splitter element in case of embedded splitters: we consider the
 * splitters as the nodes of a ternary tree, each node is a DOM element and has at most three childs (FP, SB, SP) in
 * this order. The algorithm is a recursive call of the following steps starting with the current focused node : 1- if
 * the node has a direct sibling on the left (SB or FP) call the method on it 2- else if the node has childs then call
 * the method on the third child (SP) 3- else set the focus on the node
 *
 * Note: in current spec splitter bar shouldn't be focused any more. This was changed in the code.
 */
sap.ui.commons.Splitter.prototype.setFocusPreviousSplitterElement = function(oEvent) {

	var currentFocusedDE = oEvent.target;
	var splitterElement = this.splitterPart(currentFocusedDE);
	var parent;
	var prevSibling;

	switch (splitterElement) {
		case "second" : {
			prevSibling = jQuery(currentFocusedDE).prev();
			// new: splitter bar shouldn't be focused any more so skip it
			if (this.splitterPart(prevSibling) == "bar"){
				var prevBarSibling = jQuery(prevSibling).prev();
				if (prevBarSibling && this.splitterPart(prevBarSibling) == "first") {
					this.focusPrev(prevBarSibling);
				}
			}else if (prevSibling && this.splitterPart(prevSibling) != "other"){
				jQuery(prevSibling).focus();
			}
			return;

		}
		case "bar" : {
			prevSibling = jQuery(currentFocusedDE).prev();
			if (prevSibling && this.splitterPart(prevSibling) == "first") {
				this.focusPrev(prevSibling);
			}
			return;
		}
		case "first" : {
		}
		case "other" : {
			var parent1 = jQuery(currentFocusedDE).parent();
			parent = jQuery(parent1).closest(
			".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane, .sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
			if (parent.length != 0) {
				jQuery(parent[0]).focus();
				return;
			} else {
				return;
			}
		}
	}

};

/**
 * F6 Key combination if the keyboard focus is on the first Splitter Container The focus should move to the second Splitter Container if the focus is on the
 * second splitter Container it should jump to the next first splitter container if it exists
 */
sap.ui.commons.Splitter.prototype.onsapskipforward = function(oEvent) {
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
	this.setFocusNextSplitterElement(oEvent);
};


/**
 * Shift F6 Key combination if the focus is on the second Splitter Container The focus should move back to the first container if the focus is on an UI element
 * inside a splitter container it should be set to the current splitter container
 */
sap.ui.commons.Splitter.prototype.onsapskipback = function(oEvent) {
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
	this.setFocusPreviousSplitterElement(oEvent);
};
}; // end of sap.ui.commons.Splitter
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Image
jQuery.sap.declare("sap.ui.commons.ImageRenderer");

/**
 * @class
 *
 * @author d046011
 * @version 0.1
 * @static
 */
sap.ui.commons.ImageRenderer = {
};

/**
 * Renders the HTML for the Image, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Image} oImage The control that should be rendered.
 */
sap.ui.commons.ImageRenderer.render = function(oRenderManager, oImage) {
	var rm = oRenderManager;

	// Return immediately if control is invisible
	if (!oImage.getVisible()) {
		return;
	}

	// Open the <img> tag
	rm.write("<img");
	rm.writeControlData(oImage);

	rm.writeAttributeEscaped("src", oImage.getSrc());

	rm.addClass("sapUiImg");
	if (oImage.hasListeners("press")) {
		rm.addClass("sapUiImgWithHandler");
	}
	rm.writeClasses();

	var tooltip = oImage.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	
	var sUseMap = oImage.getUseMap();
	if (sUseMap) {
		if (!(jQuery.sap.startsWith(sUseMap, "#"))) {
			sUseMap = "#" + sUseMap;
		}
		rm.writeAttributeEscaped("useMap", sUseMap);
	}

	// determine tab index and write alt attribute - both depending on "decorative" state (which is overridden by the "useMap" property 
	var myTabIndex = 0;
	if ((oImage.getDecorative() && (!sUseMap))) {
		myTabIndex = -1;
		rm.writeAttribute("role", "presentation");
		rm.write(" alt=''"); // accessibility requirement: write always empty alt attribute for decorative images
	} else {
		if (oImage.getAlt()) {
			rm.writeAttributeEscaped("alt", oImage.getAlt() || tooltip); // accessibility requirement: use tooltip for alt if alt is not set
		} else if (tooltip) {
			rm.writeAttributeEscaped("alt", tooltip); 
		}
	}
	rm.writeAttribute("tabIndex", myTabIndex);
	
	// Dimensions
	var myStyle = "";
	if (oImage.getWidth() && oImage.getWidth() != '') {
		myStyle += "width:" + oImage.getWidth() + ";";
	}
	if (oImage.getHeight() && oImage.getHeight() != '') {
		myStyle += "height:" + oImage.getHeight() + ";";
	}
	if (myStyle != "") {
		rm.writeAttribute("style", myStyle);
	}

	rm.write("></img>"); // close the <img> element
};
}; // end of sap.ui.commons.ImageRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ImageMap.
jQuery.sap.declare("sap.ui.commons.ImageMap");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ImageMap.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>name : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>areas : sap.ui.commons.Area</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>press : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Image Map defines the parts of the Image that could serve as the hyper links
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.ImageMap = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.ImageMap.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.commons.ImageMap. 
 * Resulting metadata can be obtained via sap.ui.commons.ImageMap.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.ImageMap", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getName", "setName", 
    // aggregations
    "getAreas", "insertArea", "addArea", "removeArea", "removeAllAreas", "indexOfArea", "destroyAreas", 
    // associations
    
    // events
    "attachPress", "detachPress", 
    // methods
    "createArea"
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "name" : {name : "name", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {
    "areas" : {name : "areas", type : "sap.ui.commons.Area", multiple : true, singularName : "area"}
  },
  associations : {},
  events : {
    "press" : "press"
  }

});	

sap.ui.commons.ImageMap.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>name</code>.
 * Name of the Image that can be referenced from the Image
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.commons.ImageMap.prototype.getName = function() {
	return this.getProperty("name");
};

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.setName = function(sName) {
	this.setProperty("name", sName);
	return this;
};

	
/**
 * Getter for aggregation <code>areas</code>.<br/>
 * Area of the image that is link to the desired location
 * 
 * @return {sap.ui.commons.Area[]}
 * @public
 */
sap.ui.commons.ImageMap.prototype.getAreas = function() {
	return this.getAggregation("areas", []);
};


/**
 * Inserts a area into the aggregation named <code>areas</code>.
 *
 * @param {sap.ui.commons.Area}
 *          oArea the area to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the area should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the area is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the area is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.insertArea = function(oArea, iIndex) {
	this.insertAggregation("areas", oArea, iIndex);
	return this;
};

/**
 * Adds some area <code>oArea</code> 
 * to the aggregation named <code>areas</code>.
 *
 * @param {sap.ui.commons.Area}
 *            oArea the area to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.commons.ImageMap.prototype.addArea = function(oArea) {
	this.addAggregation("areas", oArea);
	return this;
};

/**
 * Removes an area from the aggregation named <code>areas</code>.
 *
 * @param {int | string | sap.ui.commons.Area} vArea the area to remove or its index or id
 * @return {sap.ui.commons.Area} the removed area or null
 * @public
 */
sap.ui.commons.ImageMap.prototype.removeArea = function(vArea) {
	return this.removeAggregation("areas", vArea);
};

/**
 * Removes all the controls in the aggregation named <code>areas</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Area[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.commons.ImageMap.prototype.removeAllAreas = function() {
	return this.removeAllAggregation("areas");
};

/**
 * Checks for the provided <code>sap.ui.commons.Area</code> in the aggregation named <code>areas</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Area}
 *            oArea the area whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.commons.ImageMap.prototype.indexOfArea = function(oArea) {
	return this.indexOfAggregation("areas", oArea);
};
	

/**
 * Destroys all the areas in the aggregation 
 * named <code>areas</code>.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.destroyAreas = function() {
	this.destroyAggregation("areas");
	return this;
};


/**
 * Presss event for the image map 
 *
 * @name sap.ui.commons.ImageMap#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.areaId Id of clicked Area.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.ImageMap</code>.<br/>
 * Presss event for the image map 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.attachPress = function(oData, fnFunction, oListener) {
	this.attachEvent("press", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.ImageMap</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.detachPress = function(fnFunction, oListener) {
	this.detachEvent("press", fnFunction, oListener);
	return this;	
};

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'areaId' of type <code>string</code> Id of clicked Area.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.commons.ImageMap.prototype.firePress = function(mArguments) {
	this.fireEvent("press", mArguments);
	return this;
};


/**
 * add an Area to the Image Map
 *
 * @name sap.ui.commons.ImageMap.prototype.createArea
 * @function
 * @param {string[]} 
 *         aArea
 *         

 * @type void
 * @public
 */


// Start of sap/ui/commons/ImageMap.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


/**
 * Adds areas to the Image Map. Each argument must be either a JSon object or
 * list of objects or the area element or elements.
 * 
 * @param {sap.ui.commons.Area|string}
 *            Area to add
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.createArea = function() {
	var oArea = new sap.ui.commons.Area();

	for ( var i = 0; i < arguments.length; i++) {
		var oContent = arguments[i];
		var oArea;
		if (oContent instanceof sap.ui.commons.Area) {
			oArea = oContent;
		} else {
			oArea = new sap.ui.commons.Area(oContent);
		}
		this.addArea(oArea);
	}
	return this;
};

/**
 * Used for after-rendering initialization.
 * 
 * @private
 */
sap.ui.commons.ImageMap.prototype.onAfterRendering = function() {

	
	this.oDomRef = this.getDomRef();

	// Initialize the ItemNavigation if does not exist yet
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		
		
		if (jQuery.browser.msie) {
		
			var that = this;
			var aImageControls = [];
			this.oItemNavigation.setTabIndex0();

			// Find the Image control and add delegate to it
			var $Images = jQuery("img[useMap=#" + this.getName() + "]");
			$Images.each(function(i, image) {
				var id = image.getAttribute("id");
				var imageControl = sap.ui.getCore().byId(id);
				imageControl.addDelegate(that.oItemNavigation);
				that.oItemNavigation.setRootDomRef(image);
				aImageControls.push(imageControl);
			});

			this.aImageControls = aImageControls;
		} else {

			this.addDelegate(this.oItemNavigation);
			this.oItemNavigation.setRootDomRef(this.oDomRef);
		}

	}

	// Set navigations items = Areas inside of Image map
	var aItemDomRefs = [];
	var aAllAreas = this.getAreas();
	for ( var i = 0; i < aAllAreas.length; i++) {
		var oDomRef = aAllAreas[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aItemDomRefs.push(oDomRef);
		}
	}

	this.oItemNavigation.setItemDomRefs(aItemDomRefs);
	this.oItemNavigation.setCycling(true);
	this.oItemNavigation.setSelectedIndex(-1);
	this.oItemNavigation.setFocusedIndex(-1);

};

/**
 * Does all the cleanup when the Image Map is to be destroyed. Called from the
 * element's destroy() method.
 * 
 * @private
 */
sap.ui.commons.ImageMap.prototype.exit = function() {
	// Remove the item navigation delegate
	if (this.oItemNavigation) {
		if (jQuery.browser.msie) {
			for ( var i = 0; i < this.aImageControls.length; i++) {
				this.aImageControls[i].removeDelegate(this.oItemNavigation);
			} 
		} else {
			this.removeDelegate(this.oItemNavigation);
		}	
		this.oItemNavigation.destroy();
	}

	// No super.exit() to call
};

}; // end of sap.ui.commons.ImageMap
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterSorter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeaterSorter.
jQuery.sap.declare("sap.ui.commons.RowRepeaterSorter");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new RowRepeaterSorter.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>icon : string</li>
 * <li>sorter : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This element is used by the RowRepeater and allows to define a sorter in this context along with the related data such as a text and an icon.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.RowRepeaterSorter = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.RowRepeaterSorter.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.RowRepeaterSorter. 
 * Resulting metadata can be obtained via sap.ui.commons.RowRepeaterSorter.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.RowRepeaterSorter", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getIcon", "setIcon", "getSorter", "setSorter"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "text" : {name : "text", type : "string", group : "Appearance", defaultValue : null},
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : null},
    "sorter" : {name : "sorter", type : "object", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * The sorter title if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterSorter.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterSorter.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * The sorter icon if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterSorter.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterSorter.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>sorter</code>.
 * The sorter object.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>sorter</code>
 * @public
 * 
 */
sap.ui.commons.RowRepeaterSorter.prototype.getSorter = function() {
	return this.getProperty("sorter");
};

/**
 * Setter for property <code>sorter</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} sSorter  new value for property <code>sorter</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeaterSorter.prototype.setSorter = function(sSorter) {
	this.setProperty("sorter", sSorter);
	return this;
};


// Start of sap/ui/commons/RowRepeaterSorter.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.commons.RowRepeaterSorter.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap.ui.commons.RowRepeaterSorter
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Menu
jQuery.sap.declare("sap.ui.commons.MenuRenderer");


/**
 * @class Menu renderer.
 * @author SAP - TD Core UI&AM UI Infra
 *
 * @version 1.2.0
 * @static
 */
sap.ui.commons.MenuRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.core.Control}
 *            oMenu An object representation of the control that should be rendered
 */
sap.ui.commons.MenuRenderer.render = function(oRenderManager,oMenu) {
	var aItems = oMenu.getItems();
	var rm = oRenderManager;
	var colCount = 8;
	rm.write("<div tabindex=\"-1\" hideFocus=\"true\"");

	if(oMenu.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oMenu.getTooltip_AsString());
	}

	// ARIA
	var bAccessible = sap.ui.getCore().getConfiguration().getAccessibility();
	if(bAccessible){
		rm.writeAttribute("aria-orientation", "vertical");
		rm.writeAttribute("role", "menu");

		var _getText = function(sKey, aArgs) {
			var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
			if(rb) {
				return rb.getText(sKey, aArgs);
			}
			return sKey;
		};

		rm.writeAttribute("aria-label", oMenu.getAriaDescription() ? oMenu.getAriaDescription() : _getText("MNU_ARIA_NAME"));
		rm.writeAttribute("aria-level", oMenu.getMenuLevel());
		if(oMenu.oHoveredItem) {
			rm.writeAttribute("aria-activedescendant", oMenu.oHoveredItem.getId());
		}
	}

	rm.addClass("sapUiMnu");
	if(oMenu.getRootMenu().bUseTopStyle){
		rm.addClass("sapUiMnuTop");
	}
	rm.writeClasses();
	rm.writeControlData(oMenu);
	rm.write("><ul class=\"sapUiMnuLst");

	var bHasIcons = false;
	var bHasSubMenus = false;
	for(var idx=0; idx<aItems.length; idx++){
		if(aItems[idx].getIcon && aItems[idx].getIcon()){
			bHasIcons = true;
		}
		if(aItems[idx].getSubmenu()){
			bHasSubMenus = true;
		}
	}

	if(!bHasIcons) {
		rm.write(" sapUiMnuNoIco");
	}
	if(!bHasSubMenus) {
		rm.write(" sapUiMnuNoSbMnu");
	}

	rm.write("\">");

	var iNumberOfVisibleItems = 0;
	for (var i=0;i<aItems.length;i++) {
		if(aItems[i].getVisible() && aItems[i].render){
			iNumberOfVisibleItems++;
		}
	}

	var index = 0;
	// Menu items
	for (var i=0;i<aItems.length;i++) {
		var oItem = aItems[i];
		if(oItem.getVisible() && oItem.render){
			index++;

			if(oItem.getStartsSection()){
				rm.write("<li ");
				if(bAccessible) {
					rm.write("role=\"separator\" ");
				}
				rm.write("class=\"sapUiMnuDiv\"><div class=\"sapUiMnuDivL\"></div><hr><div class=\"sapUiMnuDivR\"></div></li>");
			}

			oItem.render(rm, oItem, oMenu, {bAccessible: bAccessible, iItemNo: index, iTotalItems: iNumberOfVisibleItems});
		}
	}

	rm.write("</ul></div>");
};
}; // end of sap.ui.commons.MenuRenderer
if ( !jQuery.sap.isDeclared('sap.ui.commons.PasswordField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.PasswordField.
jQuery.sap.declare("sap.ui.commons.PasswordField");



/**
 * Constructor for a new PasswordField.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.commons.TextField#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This Control is basically a text field with masked characters.
 * @extends sap.ui.commons.TextField
 *
 * @author Michael Sobczak 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.PasswordField = function (sId, mSettings) {
	sap.ui.commons.TextField.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.PasswordField.prototype = jQuery.sap.newObject(sap.ui.commons.TextField.prototype);

/*
 * Describe the sap.ui.commons.PasswordField. 
 * Resulting metadata can be obtained via sap.ui.commons.PasswordField.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.PasswordField", {

  // ---- object ----
  baseType : "sap.ui.commons.TextField",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/commons/PasswordField.js

}; // end of sap.ui.commons.PasswordField
if ( !jQuery.sap.isDeclared('sap.ui.commons.Area') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Area.
jQuery.sap.declare("sap.ui.commons.Area");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Area.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>shape : string</li>
 * <li>coords : string</li>
 * <li>href : string</li>
 * <li>alt : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Add your documentation for the new Area
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.commons.Area = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.commons.Area.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.commons.Area. 
 * Resulting metadata can be obtained via sap.ui.commons.Area.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.commons.Area", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getShape", "setShape", "getCoords", "setCoords", "getHref", "setHref", "getAlt", "setAlt"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.commons",
  properties : {
    "shape" : {name : "shape", type : "string", group : "Misc", defaultValue : null},
    "coords" : {name : "coords", type : "string", group : "Misc", defaultValue : null},
    "href" : {name : "href", type : "string", group : "Misc", defaultValue : null},
    "alt" : {name : "alt", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>shape</code>.
 * Shape desription. The value is a string and can be rect for rectangle, poly for poligon, circle or defalt.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>shape</code>
 * @public
 * 
 */
sap.ui.commons.Area.prototype.getShape = function() {
	return this.getProperty("shape");
};

/**
 * Setter for property <code>shape</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sShape  new value for property <code>shape</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Area.prototype.setShape = function(sShape) {
	this.setProperty("shape", sShape);
	return this;
};


/**
 * Getter for property <code>coords</code>.
 * Coordinates of the area
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>coords</code>
 * @public
 * 
 */
sap.ui.commons.Area.prototype.getCoords = function() {
	return this.getProperty("coords");
};

/**
 * Setter for property <code>coords</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCoords  new value for property <code>coords</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Area.prototype.setCoords = function(sCoords) {
	this.setProperty("coords", sCoords);
	return this;
};


/**
 * Getter for property <code>href</code>.
 * hyper link that is excuted if clicking the area
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>href</code>
 * @public
 * 
 */
sap.ui.commons.Area.prototype.getHref = function() {
	return this.getProperty("href");
};

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHref  new value for property <code>href</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Area.prototype.setHref = function(sHref) {
	this.setProperty("href", sHref);
	return this;
};


/**
 * Getter for property <code>alt</code>.
 * Alt Text - the text that comes over the Image
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * 
 */
sap.ui.commons.Area.prototype.getAlt = function() {
	return this.getProperty("alt");
};

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Area.prototype.setAlt = function(sAlt) {
	this.setProperty("alt", sAlt);
	return this;
};


// Start of sap/ui/commons/Area.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.dev.Area.prototype.init = function(){
//   // do something for initialization...
//};

/**
 * Function is called when Link is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Area.prototype.onclick = function(oEvent) {
	   
	// The Element or Control that initiated the event. For example the id of the area if image map is defined for the current image.
	var oEventSource = jQuery(oEvent.target).control(0);

    // Fire event on Image Map
	this.getParent().firePress({areaId: oEventSource.getId()});
};
}; // end of sap.ui.commons.Area
if ( !jQuery.sap.isDeclared('sap.ui.commons.PanelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.ui.commons.Panel
jQuery.sap.declare("sap.ui.commons.PanelRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.PanelRenderer = function() {
};


/**
 * Renders the HTML for the Panel, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.PanelRenderer.render = function(oRenderManager, oControl) {
	var rm = oRenderManager;

	// do not render anything for invisible Panels
	if (!oControl.getVisible()) {
		return;
	}

	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	//var hasToolbar = false; // TODO: this can be used in the future; rendering should already be quite ok, but minor adjustments are expected

	var heightSet = sap.ui.commons.Panel._isSizeSet(oControl.getHeight());
	var widthSet = sap.ui.commons.Panel._isSizeSet(oControl.getWidth());

	oControl.getScrollTop();  // update the scroll position properties
	oControl.getScrollLeft();


	// root element and classes
	rm.write("<section");
	rm.writeControlData(oControl);
	rm.addClass("sapUiPanel");
	rm.addStyle("width", oControl.getWidth());

	if (!oControl.getCollapsed()) {
		rm.addStyle("height", oControl.getHeight());
	} else {
		rm.addClass("sapUiPanelColl");
		rm.addStyle("height", "auto");
	}
	if (heightSet) {
		rm.addClass("sapUiPanelHeightSet");
	}
	if (widthSet) {
		rm.addClass("sapUiPanelWidthSet");
	}
	if (oControl.getApplyContentPadding()) {
		rm.addClass("sapUiPanelWithPadding");
	}
	if (!oControl.getEnabled()) {
		rm.addClass("sapUiPanelDis");
	}
	if (oControl.getShowCollapseIcon()) {
		rm.addClass("sapUiPanelWithCollapseIcon");
	}
	rm.addClass("sapUiPanelBorderDesign" + oControl.getBorderDesign());
	rm.addClass("sapUiPanelAreaDesign" + oControl.getAreaDesign());
	rm.writeClasses();
	rm.writeStyles();

	if (accessibility) {
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-title");
		rm.writeAttribute("role", "region");
		if (oControl.getCollapsed()) {
			rm.writeAttribute("aria-expanded", "false");
		} else {
			rm.writeAttribute("aria-expanded", "true");
		}
		rm.writeAttribute("tabindex", "0");
	}

	// tooltip of Panel
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}


	// header
	rm.write("><header class='sapUiPanelHdr' id='" + oControl.getId() + "-hdr'");


	// tooltip of Title, might be set in addition
	var oTitle = oControl.getTitle();
	var sTitleTooltip;
	if (oTitle) {
		sTitleTooltip = oTitle.getTooltip_AsString();
		if (sTitleTooltip) {
			rm.writeAttributeEscaped("title", sTitleTooltip);
		}
	}

	rm.write(">");

	var sCollapseTooltip = oControl.getCollapsed() ? "Expand" : "Collapse"; // TODO: translate
	if (oControl.getShowCollapseIcon()) { /* TODO: remove this one and rearrange the other in CSS */
		rm.write("<a id='" + oControl.getId() + "-collArrow' class='sapUiPanelHdrItem sapUiPanelCollArrow' href='javascript:void(0)' tabindex='0' title='" + sCollapseTooltip + "'");
		if (accessibility) {
			//rm.writeAttribute("aria-labelledby", oControl.getId() + "-title");
			rm.writeAttribute("role", "button");
		}
		rm.write(">&nbsp;</a>");
	}


	// IMPORTANT: title h1 is always rendered to simplify calculations and because having no title should be a rare use-case
	// if (oTitle) {
	if (oTitle && oTitle.getIcon()) {
		// header icon, if available
		rm.write("<img id='" + oControl.getId() + "-ico' class='sapUiPanelHdrItem sapUiPanelIco' src='");
		rm.writeEscaped(oTitle.getIcon());
		rm.write("'");
		if (accessibility) {
			rm.write(" role='presentation' alt=''"); // role and alt added as per accessibility requirement
		}
		rm.write("/>");
	}

	// header title text
	var text = oTitle ? jQuery.sap.escapeHTML(oTitle.getText()) : "&nbsp;";
	rm.write("<h1 id='" + oControl.getId() + "-title' class='sapUiPanelHdrItem sapUiPanelTitle'");
	if (accessibility) {
		rm.writeAttribute("role", "heading");
	}
	rm.write(">");
	rm.write(text); // already escaped!
	rm.write("</h1>");


  // toolbar + buttons
  var aButtons = oControl.getButtons();
  if (aButtons && (aButtons.length > 0)) {
	rm.write("<div id='" + oControl.getId() + "-tb' class='sapUiPanelHdrItem sapUiPanelTb sapUiTbDesignFlat'>");

	for (var i = 0; i < aButtons.length; i++) {
		rm.renderControl(aButtons[i]);
	}

		rm.write("</div>");
  }


  // any other right-aligned buttons go like this:
  // <a id="firstIcoRight" class="sapUiPanelHdrRightItem sapUiPanel*">O</a>
  // the positioning among these items needs to be solved then, either by fixed CSS classes if there are few items (like Right1 Right2)
  // or maybe they need to be put into a nowrap div

  // collapse icon
  if (oControl.getShowCollapseIcon()) {
		rm.write("<a id='" + oControl.getId() + "-collIco' class='sapUiPanelHdrRightItem sapUiPanelCollIco' href='javascript:void(0)' tabindex='0' title='" + sCollapseTooltip + "'");
		if (accessibility) {
			//rm.writeAttribute("aria-labelledby", oControl.getId() + "-title");
			rm.writeAttribute("role", "button");
		}
		rm.write(">&nbsp;</a>");
	}

  rm.write("</header>");



	// content area

	// everything below the header is only rendered initially if not collapsed - saves performance and Panel just re-renders later on expand
	if (!oControl.getCollapsed()) {
		rm.write("<div class='sapUiPanelCont' id='", oControl.getId(), "-cont'>");

		// Content (child controls)
		var oControls = oControl.getContent(),
				iLength = oControls.length;
		for (var i=0; i < iLength; i++) {
			rm.renderControl(oControls[i]);
		}

		rm.write("</div>");
	}

	rm.write("</section>");
};
}; // end of sap.ui.commons.PanelRenderer
