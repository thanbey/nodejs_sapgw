// This file has been generated by the Phoenix 'AllInOne' Builder
jQuery.sap.declare('sap-ui-table-all');
if ( !jQuery.sap.isDeclared('sap.ui.table.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.table (1.2.0)
 */
jQuery.sap.declare("sap.ui.table.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with table controls.
 *
 * @namespace
 * @name sap.ui.table
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.table",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [
    "sap.ui.table.SelectionMode"
  ],
  interfaces: [],
  controls: [
    "sap.ui.table.DataTable",
    "sap.ui.table.Table"
  ],
  elements: [
    "sap.ui.table.Column",
    "sap.ui.table.Row"
  ],
  version: "1.2.0"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.table.SelectionMode.
jQuery.sap.declare("sap.ui.table.SelectionMode");

/**
 * @class Selection mode of the table
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.table.SelectionMode = {
  
    /**
     * Select multiple rows at a time. 
     * @public
     */
    Multi : "Multi",

    /**
     * Select multiple rows at a time - a click toggles the selection. 
     * @public
     */
    MultiToggle : "MultiToggle",

    /**
     * Select one row at a time. 
     * @public
     */
    Single : "Single",

    /**
     * No rows can be selected. 
     * @public
     */
    None : "None"

  };
  

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// map the new Column to the old ColumnHeader
sap.ui.table.ColumnHeader = sap.ui.table.Column;

// map the SelectionMode All to MultiToggle
sap.ui.table.SelectionMode.All = sap.ui.table.SelectionMode.MultiToggle;
}; // end of sap.ui.table.library
if ( !jQuery.sap.isDeclared('sap.ui.table.TableRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

//Provides default renderer for control sap.ui.table.Table
jQuery.sap.declare("sap.ui.table.TableRenderer");

/**
 * @class Table renderer.
 * @static
 */
sap.ui.table.TableRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oTable an object representation of the control that should be rendered
 */
sap.ui.table.TableRenderer.render = function(rm, oTable) {

	// get the relevant information
	var oInfo = oTable._oInfo;

	// basic table div
	rm.write("<div");
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("tabindex", "0");
		var aAriaOwnsIds = []; 
		if (oTable.getToolbar()) {
			aAriaOwnsIds.push(oTable.getToolbar().getId());
		}
		aAriaOwnsIds.push(oTable.getId() + "-table");
		rm.writeAttribute("aria-owns", aAriaOwnsIds.join(" "));
	}
	rm.writeControlData(oTable);
	rm.addClass("sapUiTable");
	rm.addClass("sapUiTableCHdr"); // show column headers
	if (oTable.getSelectionMode() !== sap.ui.table.SelectionMode.None) {
		rm.addClass("sapUiTableRSel"); // show row selector
	}
	//rm.addClass("sapUiTableHScr"); // show horizontal scrollbar
	rm.addClass("sapUiTableVScr"); // show vertical scrollbar
	rm.writeClasses();
	if (oTable.getWidth()) {
		rm.addStyle("width", oTable.getWidth());
	}
	rm.writeStyles();
	rm.write(">");
	
	if (oTable.getTitle()) {
		sap.ui.table.TableRenderer.renderHeader(rm, oTable, oTable.getTitle());
	}

	if (oTable.getToolbar()) {
		sap.ui.table.TableRenderer.renderToolbar(rm, oTable, oTable.getToolbar());
	}
	
	sap.ui.table.TableRenderer.renderContent(rm, oTable);
	
	if (oTable.getFooter()) {
		sap.ui.table.TableRenderer.renderFooter(rm, oTable, oTable.getFooter());
	}

	rm.write("</div>");

};

// =============================================================================
// BASIC AREAS OF THE TABLE
// =============================================================================

sap.ui.table.TableRenderer.renderHeader = function(rm, oTable, oTitle) {
	rm.write("<div");
	rm.addClass("sapUiTableHdr");
	rm.writeClasses();
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "heading");
	}
	rm.write(">");
	
	rm.renderControl(oTitle);

	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderToolbar = function(rm, oTable, oToolbar) {
	rm.write("<div");
	rm.addClass("sapUiTableTbr");
	rm.writeClasses();
	rm.write(">");
	
	rm.renderControl(oToolbar);

	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderContent = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableCnt");
	rm.writeClasses();
	rm.write(">");
	
	sap.ui.table.TableRenderer.renderColRowHdr(rm, oTable);
	sap.ui.table.TableRenderer.renderColHdr(rm, oTable);
	sap.ui.table.TableRenderer.renderRowHdr(rm, oTable);
	sap.ui.table.TableRenderer.renderTable(rm, oTable);
	sap.ui.table.TableRenderer.renderVSb(rm, oTable);
	sap.ui.table.TableRenderer.renderHSb(rm, oTable);

	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderFooter = function(rm, oTable, oFooter) {
	rm.write("<div");
	rm.addClass("sapUiTableFtr");
	rm.writeClasses();
	rm.write(">");
	
	rm.renderControl(oFooter);

	rm.write("</div>");
};

// =============================================================================
// CONTENT AREA OF THE TABLE
// =============================================================================

sap.ui.table.TableRenderer.renderColRowHdr = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableColRowHdr");
	rm.writeClasses();
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("height", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	rm.write(">");
	if (oTable.getSelectionMode() !== sap.ui.table.SelectionMode.Single) {
		rm.write("<div");
		rm.writeAttribute("id", oTable.getId() + "-selall");
		rm.writeAttribute("title", oTable._oInfo.oResBundle.getText("TBL_SELECT_ALL"));
		rm.addClass("sapUiTableColRowHdrIco");
		rm.writeClasses();
		/* Centers the select all icon!
		if (oTable.getColumnHeaderHeight()) {
			rm.addStyle("height", oTable.getColumnHeaderHeight() + "px");
		}
		rm.writeStyles();
		 */
		if (oTable._oInfo.bAccMode) {
			//rm.writeAttribute("role", "rowheader");
			rm.writeAttribute("tabindex", "0");
		}
		rm.write(">");
		rm.write("</div>");
	}
	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderColHdr = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableColHdrScr");
	rm.writeClasses();
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("height", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	rm.write(">");
	
	rm.write("<div");
	rm.addClass("sapUiTableColHdr");
	rm.writeClasses();
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("height", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "row");
	}
	rm.write(">");

	var aCols = oTable.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		sap.ui.table.TableRenderer.renderCol(rm, oTable, aCols[i], i);
		sap.ui.table.TableRenderer.renderColRsz(rm, oTable, aCols[i], i);
	}
	
	rm.write("</div>");

	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderCol = function(rm, oTable, oColumn, iIndex) {
	rm.write("<div");
	rm.writeAttribute("id", oColumn.getId());
	rm.writeAttribute("data-sap-ui-colindex", iIndex);
	rm.addClass("sapUiTableCol");
	rm.writeClasses();
	var sWidth = oColumn.getWidth();
	if (jQuery.sap.endsWith(sWidth, "px")) {
		rm.addStyle("width", sWidth);
	}
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("height", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	rm.writeAttribute("tabindex", "0");
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "columnheader");
	}
	rm.write(">");
	
	// TODO: rework column sort / filter status integration
	rm.write("<div id=\"" + oTable.getId() + "_icons_" + oColumn.getId() + "\" class=\"sapUiTblColIcons\"></div>");
	rm.renderControl(oColumn.getLabel());
	
	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderColRsz = function(rm, oTable, oColumn, iIndex) {
	if (oColumn.getResizable()) {
		rm.write("<div");
		rm.writeAttribute("id", oColumn.getId() + "-rsz");
		rm.writeAttribute("data-sap-ui-colindex", iIndex);
		rm.addClass("sapUiTableColRsz");
		rm.writeClasses();
		rm.write("></div>");
	}
};

sap.ui.table.TableRenderer.renderRowHdr = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableRowHdrScr");
	rm.writeClasses();
	rm.addStyle("height", (oTable.getRowHeight() * oTable.getVisibleRowCount()) + "px"); //oTable.getHeight());
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("top", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	rm.write(">");
	
	rm.write("<div");
	rm.addClass("sapUiTableRowHdrCnt");
	rm.writeClasses();
	rm.write(">");
	
	rm.write("<table");
	rm.addClass("sapUiTableRowHdr");
	rm.writeClasses();
	rm.write(">");

	// start with the first current top visible row
	for (var row = 0, count = oTable.getRows().length; row < count; row++) {
		sap.ui.table.TableRenderer.renderRowHdrRow(rm, oTable, oTable.getRows()[row]);
	}
	
	rm.write("</table>");
	
	rm.write("</div>");
	
	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderRowHdrRow = function(rm, oTable, oRow) {
	rm.write("<tr");
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "row");
	}
	var iRowHeight = oTable.getRowHeight();
	if (iRowHeight) {
		rm.addStyle("height", iRowHeight + "px");
	}
	rm.writeStyles();
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "rowheader");
	}
	rm.write("><td");
	rm.writeAttribute("tabindex", "0");
	rm.write("></td></tr>");
};

sap.ui.table.TableRenderer.renderTable = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableCtrlScr");
	rm.writeClasses();
	rm.addStyle("height", (oTable.getRowHeight() * oTable.getVisibleRowCount()) + "px"); //oTable.getHeight());
	rm.writeStyles();
	rm.write(">");
	
	rm.write("<div");
	rm.addClass("sapUiTableCtrlCnt");
	rm.writeClasses();
	rm.write(">");
	
	sap.ui.table.TableRenderer.renderTableControl(rm, oTable);
	
	rm.write("</div>");

	rm.write("</div>");
};


sap.ui.table.TableRenderer.renderTableControl = function(rm, oTable) {
	rm.write("<table");
	rm.writeAttribute("id", oTable.getId() + "-table");
	rm.addClass("sapUiTableCtrl");
	rm.writeClasses();
	rm.write(">");
	
	rm.write("<tr");
	rm.addClass("sapUiTableCtrlCol");
	rm.writeClasses();
	rm.write(">");
	
	for (var col = 0, count = oTable.getColumns().length; col < count; col++) {
		rm.write("<th");
		var sWidth = oTable.getColumns()[col].getWidth();
		if (jQuery.sap.endsWith(sWidth, "px")) {
			rm.addStyle("width", sWidth);
			rm.writeStyles();
		}
		rm.write("></th>");
	}
	
	rm.write("</tr>");
	
	var aRows = oTable.getRows();
	for (var row = 0, count = aRows.length; row < count; row++) {
		sap.ui.table.TableRenderer.renderTableRow(rm, oTable, aRows[row]);
	}
	
	rm.write("</table>");
};

sap.ui.table.TableRenderer.renderTableRow = function(rm, oTable, oRow) {

	rm.write("<tr");
	if (oRow._bHidden) {
		rm.writeAttribute("class", "sapUiTableRowHidden");
	}
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "row");
		//rm.writeAttribute("tabindex", "0");
	}
	var iRowHeight = oTable.getRowHeight();
	if (iRowHeight) {
		rm.addStyle("height", iRowHeight + "px");
	}
	rm.writeStyles();
	rm.write(">");
	var aCells = oRow.getCells();
	for (var cell = 0, count = aCells.length; cell < count; cell++) {
		sap.ui.table.TableRenderer.renderTableCell(rm, oTable, aCells[cell], cell);
	}
	rm.write("</tr>");
	
};

sap.ui.table.TableRenderer.renderTableCell = function(rm, oTable, oCell, iCellIndex) {
	var oColumn = oTable.getColumns()[iCellIndex];
	rm.write("<td");
	if (oTable._oInfo.bAccMode) {
		rm.writeAttribute("role", "gridcell");
		rm.writeAttribute("tabindex", "-1");
	}
	var sHAlign = sap.ui.table.TableRenderer.getHAlign(oColumn.getHAlign(), oTable._oInfo.bRtlMode);
	if (sHAlign) {
		rm.addStyle("text-align", sHAlign);
	}
	rm.writeStyles();
	rm.write(">");
	rm.renderControl(oCell);
	rm.write("</td>");
};

sap.ui.table.TableRenderer.renderVSb = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableVSb");
	rm.writeClasses();
	if (oTable.getColumnHeaderHeight()) {
		rm.addStyle("top", oTable.getColumnHeaderHeight() + "px");
	}
	rm.writeStyles();
	rm.write(">");
	rm.renderControl(oTable._oVSb);
	rm.write("</div>");
};

sap.ui.table.TableRenderer.renderHSb = function(rm, oTable) {
	rm.write("<div");
	rm.addClass("sapUiTableHSb");
	rm.writeClasses();
	rm.write(">");
	rm.renderControl(oTable._oHSb);
	rm.write("</div>");
};


// =============================================================================
// HELPER FUNCTIONALITY
// =============================================================================

/**
 * Returns the value for the HTML "align" attribute according to the given
 * horizontal alignment and RTL mode, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign
 * @param {boolean} bRTL
 * @type string
 */
sap.ui.table.TableRenderer.getHAlign = function(oHAlign, bRTL) {
  switch (oHAlign) {
	case sap.ui.commons.layout.HAlign.Center:
	  return "center";
	case sap.ui.commons.layout.HAlign.End:
	case sap.ui.commons.layout.HAlign.Right:
	  return bRTL ? "left" : "right";
  }
  // case sap.ui.commons.layout.HAlign.Left:
  // case sap.ui.commons.layout.HAlign.Begin:
  return bRTL ? "right" : "left";
};

}; // end of sap.ui.table.TableRenderer
if ( !jQuery.sap.isDeclared('sap.ui.table.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.table.Column.
jQuery.sap.declare("sap.ui.table.Column");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Column.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>flexible : boolean</li>
 * <li>resizable : boolean</li>
 * <li>hAlign : sap.ui.commons.layout.HAlign</li>
 * <li>sortProperty : string</li>
 * <li>filterProperty : string</li>
 * <li>filterOperator : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>label : sap.ui.core.Control</li>
 * <li>template : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The column allows to define column specific properties that will be applied when rendering the table.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.table.Column = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.table.Column.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.table.Column. 
 * Resulting metadata can be obtained via sap.ui.table.Column.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.table.Column", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getFlexible", "setFlexible", "getResizable", "setResizable", "getHAlign", "setHAlign", "getSortProperty", "setSortProperty", "getFilterProperty", "setFilterProperty", "getFilterOperator", "setFilterOperator", 
    // aggregations
    "getLabel", "setLabel", "destroyLabel", "getTemplate", "setTemplate", "destroyTemplate"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.table",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "", defaultValue : null},
    "flexible" : {name : "flexible", type : "boolean", group : "", defaultValue : null},
    "resizable" : {name : "resizable", type : "boolean", group : "", defaultValue : true},
    "hAlign" : {name : "hAlign", type : "sap.ui.commons.layout.HAlign", group : "", defaultValue : sap.ui.commons.layout.HAlign.Begin},
    "sortProperty" : {name : "sortProperty", type : "string", group : "", defaultValue : null},
    "filterProperty" : {name : "filterProperty", type : "string", group : "", defaultValue : null},
    "filterOperator" : {name : "filterOperator", type : "string", group : "", defaultValue : 'Contains'}
  },
  defaultAggregation : "label",
  aggregations : {
    "label" : {name : "label", type : "sap.ui.core.Control", multiple : false}, 
    "template" : {name : "template", type : "sap.ui.core.Control", multiple : false}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>width</code>.
 * Width of the column.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>flexible</code>.
 * Is the width of the column flexible (grows on resize)?
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>flexible</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getFlexible = function() {
	return this.getProperty("flexible");
};

/**
 * Setter for property <code>flexible</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bFlexible  new value for property <code>flexible</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setFlexible = function(bFlexible) {
	this.setProperty("flexible", bFlexible);
	return this;
};


/**
 * Getter for property <code>resizable</code>.
 * Is the column resizable or not?
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizable</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getResizable = function() {
	return this.getProperty("resizable");
};

/**
 * Setter for property <code>resizable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizable  new value for property <code>resizable</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setResizable = function(bResizable) {
	this.setProperty("resizable", bResizable);
	return this;
};


/**
 * Getter for property <code>hAlign</code>.
 * Horizontal alignment of the column content.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.commons.layout.HAlign} the value of property <code>hAlign</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getHAlign = function() {
	return this.getProperty("hAlign");
};

/**
 * Setter for property <code>hAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setHAlign = function(oHAlign) {
	this.setProperty("hAlign", oHAlign);
	return this;
};


/**
 * Getter for property <code>sortProperty</code>.
 * Specifies the binding property on which the column will sort.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sortProperty</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getSortProperty = function() {
	return this.getProperty("sortProperty");
};

/**
 * Setter for property <code>sortProperty</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSortProperty  new value for property <code>sortProperty</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setSortProperty = function(sSortProperty) {
	this.setProperty("sortProperty", sSortProperty);
	return this;
};


/**
 * Getter for property <code>filterProperty</code>.
 * Specifies the binding property on which the column will filter.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>filterProperty</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getFilterProperty = function() {
	return this.getProperty("filterProperty");
};

/**
 * Setter for property <code>filterProperty</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFilterProperty  new value for property <code>filterProperty</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setFilterProperty = function(sFilterProperty) {
	this.setProperty("filterProperty", sFilterProperty);
	return this;
};


/**
 * Getter for property <code>filterOperator</code>.
 * @see sap.ui.model.FilterOperator (default value: "Contains")
 *
 * Default value is <code>Contains</code>
 *
 * @return {string} the value of property <code>filterOperator</code>
 * @public
 * 
 */
sap.ui.table.Column.prototype.getFilterOperator = function() {
	return this.getProperty("filterOperator");
};

/**
 * Setter for property <code>filterOperator</code>.
 *
 * Default value is <code>Contains</code> 
 *
 * @param {string} sFilterOperator  new value for property <code>filterOperator</code>
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setFilterOperator = function(sFilterOperator) {
	this.setProperty("filterOperator", sFilterOperator);
	return this;
};

	
/**
 * Getter for aggregation <code>label</code>.<br/>
 * Label (header renderer) of the column which is displayed in the column header.
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.table.Column.prototype.getLabel = function() {
	return this.getAggregation("label", null);
};


/**
 * Setter for the aggregated <code>label</code>.
 * @param oLabel {sap.ui.core.Control}
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setLabel = function(oLabel) {
	this.setAggregation("label", oLabel);
	return this;
};
	

/**
 * Destroys the label in the aggregation 
 * named <code>label</code>.
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.destroyLabel = function() {
	this.destroyAggregation("label");
	return this;
};

	
/**
 * Getter for aggregation <code>template</code>.<br/>
 * Template (cell renderer) of this column. The default is: sap.ui.commons.TextView.
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.table.Column.prototype.getTemplate = function() {
	return this.getAggregation("template", null);
};


/**
 * Setter for the aggregated <code>template</code>.
 * @param oTemplate {sap.ui.core.Control}
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.setTemplate = function(oTemplate) {
	this.setAggregation("template", oTemplate);
	return this;
};
	

/**
 * Destroys the template in the aggregation 
 * named <code>template</code>.
 * @return {sap.ui.table.Column} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Column.prototype.destroyTemplate = function() {
	this.destroyAggregation("template");
	return this;
};


// Start of sap/ui/table/Column.js
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuItem'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.ui.table.Column.prototype.init = function() {

	this.oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.table");

};

sap.ui.table.Column.prototype.exit = function() {

	if (this.oMenu) {
		this.oMenu.destroy();
	}

};

sap.ui.table.Column.prototype.onThemeChanged = function() {
	if (this.oMenu) {
		var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
		var oControl = sap.ui.getCore().byId(this.getId() + "_asc");
		if (oControl) {
			oControl.setIcon(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_asc.gif"));
		}
		var oControl = sap.ui.getCore().byId(this.getId() + "_desc");
		if (oControl) {
			oControl.setIcon(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_desc.gif"));
		}
		var oControl = sap.ui.getCore().byId(this.getId() + "_filter");
		if (oControl) {
			oControl.setIcon(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_filter.gif"));
		}
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Column.prototype.setLabel = function(vLabel) {
	var oLabel = vLabel;
	if (typeof (vLabel) === "string") {
		oLabel = new sap.ui.commons.Label({
			text : vLabel
		});
	}
	this.setAggregation("label", oLabel);
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Column.prototype.setTemplate = function(vTemplate) {
	var oTemplate = vTemplate;
	if (typeof (vTemplate) === "string") {
		oTemplate = new sap.ui.commons.TextView().bindText(vTemplate);
	}
	this.setAggregation("template", oTemplate);
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
sap.ui.table.Column.prototype.setEditorTemplate = function(vTemplate) {
	var oTemplate = vTemplate;
	if (typeof (vTemplate) === "string") {
		oTemplate = new sap.ui.commons.TextField().bindValue(vTemplate);
	}
	this.setAggregation("editorTemplate", oTemplate);
	return this;
};
 */

sap.ui.table.Column.prototype._openMenu = function() {

	if (!this.oMenu) {
		this.oMenu = new sap.ui.commons.Menu();
		var that = this;
		if (jQuery.browser.msie && jQuery.browser.version < 9) {
			// special handling for old IE's because strangewise
			// the focus is lost after closing the popup
			this.oMenu.getPopup().attachClosed(function(oEvent) {
				setTimeout(function() {
					that.focus();
				}, 0);
			});
		}
		var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
		if (this.getSortProperty()) {
			this.oMenu.addItem(new sap.ui.commons.MenuItem(this.getId() + "_asc", {
				text: this.oResBundle.getText("TBL_SORT_ASC"),
				icon: sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_asc.gif"),
				select: function(oEvent) { that.sort(oEvent) }
			}));
			this.oMenu.addItem(new sap.ui.commons.MenuItem(this.getId() + "_desc", {
				text: this.oResBundle.getText("TBL_SORT_DESC"),
				icon: sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_desc.gif"),
				select: function(oEvent) { that.sort(oEvent) }
			}));
		}
		if (this.getFilterProperty()) {
			// TODO: move MenuInputItem to commons or table and require correctly!!
			try {
				jQuery.sap.require("sap.ui.dev.MenuInputItem");
				if (sap.ui.dev && sap.ui.dev.MenuInputItem) {
					this.oMenu.addItem(new sap.ui.dev.MenuInputItem(this.getId() + "_filter", {
						text: this.oResBundle.getText("TBL_FILTER"),
						icon: sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_filter.gif"),
						select: function(oEvent) { that.filter(oEvent) }
					}));
				}
			} catch (ex) {
				jQuery.sap.log.warning("The filter feature is not working since sap.ui.dev library is not available.");
			}
		}
	}
	if (this.oMenu.getItems().length > 0) {
		var eDock = sap.ui.core.Popup.Dock;
		this.oMenu.open(false, this.getFocusDomRef(), eDock.BeginTop, eDock.BeginBottom, this.getDomRef());
	}

};

sap.ui.table.Column.prototype.sort = function(oEvent) {
	var oItem = oEvent.getParameter("item");
	var bDescending = (oItem.getId().indexOf('_asc') == -1);
	var aCols = this.getParent().getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		aCols[i].oSorter = undefined;
	}
	this.oSorter = new sap.ui.model.Sorter(this.getSortProperty(), bDescending);
	this.getParent().getBinding("rows").sort(this.oSorter);
	this._renderSortIcon(bDescending);
};

sap.ui.table.Column.prototype._renderSortIcon = function(bDescending) {
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	var oImage = sap.ui.getCore().byId(this.getId() + "-sortIcon") || new sap.ui.commons.Image(this.getId() + "-sortIcon");
	oImage.addStyleClass("sapUiTblColIconsOrder");
	if (!bDescending) {
		oImage.setSrc(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_asc.gif"));
	} else {
		oImage.setSrc(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_sort_desc.gif"));
	}
	var oRenderManager = new sap.ui.core.RenderManager();
	var htmlImage = oRenderManager.getHTML(oImage);
	jQuery.sap.byId(this.getParent().getId()).find(".sapUiTblColIconsOrder").remove();
	jQuery.sap.byId(this.getParent().getId()).find("th").removeAttr("aria-sort");
	jQuery(htmlImage).prependTo(jQuery.sap.domById(this.getParent().getId() + "_icons_" + this.getId()));
	this.$().attr("aria-sort", bDescending ? "descending" : "ascending");
};

sap.ui.table.Column.prototype.filter = function(oEvent) {
	var oItem = oEvent.getParameter("item");
	if (oItem.getValue()) {
		var oFilterOperator = sap.ui.model.FilterOperator[this.getFilterOperator()] || sap.ui.model.FilterOperator.Contains;
		// determine the data type (to convert the value into )
		// TODO: remove the hack when databinding supports datatypes
		var vFilterValue = oItem.getValue();
		if (this.getParent().isBound()) {
			var oTable = this.getParent();
			var sType = typeof oTable.getModel().getProperty(this.getFilterProperty(), oTable.getContextByIndex(oTable.getFirstVisibleRow()));
			if (sType === "boolean") {
				vFilterValue = vFilterValue == "true";
			} else if (sType === "int") {
				vFilterValue = parseInt(vFilterValue, 10);
			} else if (sType === "float") {
				vFilterValue = parseFloat(vFilterValue);
			}
		}
		this.oFilter = new sap.ui.model.Filter(this.getFilterProperty(), oFilterOperator, vFilterValue);
	} else {
		this.oFilter = undefined;
	}
	var aFilters = [];
	var aCols = this.getParent().getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		if (aCols[i].oFilter) {
			aFilters.push(aCols[i].oFilter);
		}
	}
	this.getParent().getBinding("rows").filter(aFilters);
	this._renderFilterIcon(oItem.getValue());
};

sap.ui.table.Column.prototype._renderFilterIcon = function(bHasFilter) {
	var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
	var oImage = sap.ui.getCore().byId(this.getId() + "-filterIcon") || new sap.ui.commons.Image(this.getId() + "-filterIcon");
	jQuery.sap.byId(oImage.getId()).remove();
	oImage.addStyleClass("sapUiTblColIconsFilter");
	if (bHasFilter) {
		oImage.setSrc(sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_filter.gif"));
		var oRenderManager = new sap.ui.core.RenderManager();
		var htmlImage = oRenderManager.getHTML(oImage);
		jQuery(htmlImage).prependTo(jQuery.sap.domById(this.getParent().getId() + "_icons_" + this.getId()));
	}
};

sap.ui.table.Column.prototype._restoreIcons = function() {
	
	if (this.oSorter) {
		this._renderSortIcon(this.oSorter.bDescending);
	}
	
	if (this.oFilter) {
		this._renderFilterIcon(true);
	}
		
};

sap.ui.table.Column.prototype.setResizable = function(bFlag) {
	this.setProperty("resizable", bFlag, true); // no re-rendering!
	if (bFlag) {
		this.$().find(".sapUiTblColResize").css("cursor", "");
	} else {
		this.$().find(".sapUiTblColResize").css("cursor", "auto");
	}
	return this;
};

}; // end of sap.ui.table.Column
if ( !jQuery.sap.isDeclared('sap.ui.table.Row') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.table.Row.
jQuery.sap.declare("sap.ui.table.Row");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Row.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>cells : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The row.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.table.Row = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.table.Row.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.table.Row. 
 * Resulting metadata can be obtained via sap.ui.table.Row.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.table.Row", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    
    // aggregations
    "getCells", "insertCell", "addCell", "removeCell", "removeAllCells", "indexOfCell", "destroyCells"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.table",
  properties : {},
  defaultAggregation : "cells",
  aggregations : {
    "cells" : {name : "cells", type : "sap.ui.core.Control", multiple : true, singularName : "cell"}
  },
  associations : {},
  events : {}

});	

	
/**
 * Getter for aggregation <code>cells</code>.<br/>
 * The controls for the cells.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.table.Row.prototype.getCells = function() {
	return this.getAggregation("cells", []);
};


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.ui.table.Row} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Row.prototype.insertCell = function(oCell, iIndex) {
	this.insertAggregation("cells", oCell, iIndex);
	return this;
};

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.ui.table.Row} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.table.Row.prototype.addCell = function(oCell) {
	this.addAggregation("cells", oCell);
	return this;
};

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCell the cell to remove or its index or id
 * @return {sap.ui.core.Control} the removed cell or null
 * @public
 */
sap.ui.table.Row.prototype.removeCell = function(vCell) {
	return this.removeAggregation("cells", vCell);
};

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.table.Row.prototype.removeAllCells = function() {
	return this.removeAllAggregation("cells");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.table.Row.prototype.indexOfCell = function(oCell) {
	return this.indexOfAggregation("cells", oCell);
};
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.ui.table.Row} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Row.prototype.destroyCells = function() {
	this.destroyAggregation("cells");
	return this;
};


// Start of sap/ui/table/Row.js

}; // end of sap.ui.table.Row
if ( !jQuery.sap.isDeclared('sap.ui.table.Table') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.table.Table.
jQuery.sap.declare("sap.ui.table.Table");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Table.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>rowHeight : int</li>
 * <li>columnHeaderHeight : int</li>
 * <li>visibleRowCount : int</li>
 * <li>firstVisibleRow : int</li>
 * <li>selectionMode : sap.ui.table.SelectionMode</li>
 * <li>selectedIndex : int</li>
 * <li>allowColumnReordering : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>title : sap.ui.core.Control</li>
 * <li>footer : sap.ui.core.Control</li>
 * <li>toolbar : sap.ui.commons.Toolbar</li>
 * <li>columns : sap.ui.table.Column</li>
 * <li>rows : sap.ui.table.Row</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>rowSelectionChange : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>columnSelect : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The Table Control.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.table.Table = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.table.Table.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.table.Table. 
 * Resulting metadata can be obtained via sap.ui.table.Table.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.table.Table", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getRowHeight", "setRowHeight", "getColumnHeaderHeight", "setColumnHeaderHeight", "getVisibleRowCount", "setVisibleRowCount", "getFirstVisibleRow", "setFirstVisibleRow", "getSelectionMode", "setSelectionMode", "getSelectedIndex", "setSelectedIndex", "getAllowColumnReordering", "setAllowColumnReordering", 
    // aggregations
    "getTitle", "setTitle", "destroyTitle", "getFooter", "setFooter", "destroyFooter", "getToolbar", "setToolbar", "destroyToolbar", "getColumns", "insertColumn", "addColumn", "removeColumn", "removeAllColumns", "indexOfColumn", "destroyColumns", "bindColumns", "unbindColumns", "getRows", "insertRow", "addRow", "removeRow", "removeAllRows", "indexOfRow", "destroyRows", "bindRows", "unbindRows", 
    // associations
    
    // events
    "attachRowSelectionChange", "detachRowSelectionChange", "attachColumnSelect", "detachColumnSelect", 
    // methods
    "getSelectedIndices", "addSelectionInterval", "setSelectionInterval", "removeSelectionInterval", "isIndexSelected", "clearSelection", "selectAll", "getContextByIndex"
  ],

  // ---- control specific ----
  library : "sap.ui.table",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "", defaultValue : 'auto'},
    "rowHeight" : {name : "rowHeight", type : "int", group : "", defaultValue : 22},
    "columnHeaderHeight" : {name : "columnHeaderHeight", type : "int", group : "", defaultValue : 22},
    "visibleRowCount" : {name : "visibleRowCount", type : "int", group : "", defaultValue : 10},
    "firstVisibleRow" : {name : "firstVisibleRow", type : "int", group : "", defaultValue : 0},
    "selectionMode" : {name : "selectionMode", type : "sap.ui.table.SelectionMode", group : "", defaultValue : sap.ui.table.SelectionMode.Multi},
    "selectedIndex" : {name : "selectedIndex", type : "int", group : "", defaultValue : -1},
    "allowColumnReordering" : {name : "allowColumnReordering", type : "boolean", group : "", defaultValue : true}
  },
  defaultAggregation : "columns",
  aggregations : {
    "title" : {name : "title", type : "sap.ui.core.Control", multiple : false}, 
    "footer" : {name : "footer", type : "sap.ui.core.Control", multiple : false}, 
    "toolbar" : {name : "toolbar", type : "sap.ui.commons.Toolbar", multiple : false}, 
    "columns" : {name : "columns", type : "sap.ui.table.Column", multiple : true, singularName : "column"}, 
    "rows" : {name : "rows", type : "sap.ui.table.Row", multiple : true, singularName : "row"}
  },
  associations : {},
  events : {
    "rowSelectionChange" : "rowSelectionChange", 
    "columnSelect" : "columnSelect"
  }

});	

sap.ui.table.Table.M_EVENTS = {'rowSelectionChange':'rowSelectionChange','columnSelect':'columnSelect'};


/**
 * Getter for property <code>width</code>.
 * Width of the Table.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>rowHeight</code>.
 * Height of a row of the Table in pixel.
 *
 * Default value is <code>22</code>
 *
 * @return {int} the value of property <code>rowHeight</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getRowHeight = function() {
	return this.getProperty("rowHeight");
};

/**
 * Setter for property <code>rowHeight</code>.
 *
 * Default value is <code>22</code> 
 *
 * @param {int} iRowHeight  new value for property <code>rowHeight</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setRowHeight = function(iRowHeight) {
	this.setProperty("rowHeight", iRowHeight);
	return this;
};


/**
 * Getter for property <code>columnHeaderHeight</code>.
 * Height of the column header of the Table in pixel.
 *
 * Default value is <code>22</code>
 *
 * @return {int} the value of property <code>columnHeaderHeight</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getColumnHeaderHeight = function() {
	return this.getProperty("columnHeaderHeight");
};

/**
 * Setter for property <code>columnHeaderHeight</code>.
 *
 * Default value is <code>22</code> 
 *
 * @param {int} iColumnHeaderHeight  new value for property <code>columnHeaderHeight</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setColumnHeaderHeight = function(iColumnHeaderHeight) {
	this.setProperty("columnHeaderHeight", iColumnHeaderHeight);
	return this;
};


/**
 * Getter for property <code>visibleRowCount</code>.
 * Count of visible rows (will overwrite the height property).
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>visibleRowCount</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getVisibleRowCount = function() {
	return this.getProperty("visibleRowCount");
};

/**
 * Setter for property <code>visibleRowCount</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iVisibleRowCount  new value for property <code>visibleRowCount</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setVisibleRowCount = function(iVisibleRowCount) {
	this.setProperty("visibleRowCount", iVisibleRowCount);
	return this;
};


/**
 * Getter for property <code>firstVisibleRow</code>.
 * First visible row.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>firstVisibleRow</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getFirstVisibleRow = function() {
	return this.getProperty("firstVisibleRow");
};

/**
 * Setter for property <code>firstVisibleRow</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstVisibleRow  new value for property <code>firstVisibleRow</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setFirstVisibleRow = function(iFirstVisibleRow) {
	this.setProperty("firstVisibleRow", iFirstVisibleRow);
	return this;
};


/**
 * Getter for property <code>selectionMode</code>.
 * Selection mode of the Table.
 *
 * Default value is <code>Multi</code>
 *
 * @return {sap.ui.table.SelectionMode} the value of property <code>selectionMode</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getSelectionMode = function() {
	return this.getProperty("selectionMode");
};

/**
 * Setter for property <code>selectionMode</code>.
 *
 * Default value is <code>Multi</code> 
 *
 * @param {sap.ui.table.SelectionMode} oSelectionMode  new value for property <code>selectionMode</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setSelectionMode = function(oSelectionMode) {
	this.setProperty("selectionMode", oSelectionMode);
	return this;
};


/**
 * Getter for property <code>selectedIndex</code>.
 * Zero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the first selected item. Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getSelectedIndex = function() {
	return this.getProperty("selectedIndex");
};

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setSelectedIndex = function(iSelectedIndex) {
	this.setProperty("selectedIndex", iSelectedIndex);
	return this;
};


/**
 * Getter for property <code>allowColumnReordering</code>.
 * Flag to enable or disable column reordering
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowColumnReordering</code>
 * @public
 * 
 */
sap.ui.table.Table.prototype.getAllowColumnReordering = function() {
	return this.getProperty("allowColumnReordering");
};

/**
 * Setter for property <code>allowColumnReordering</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowColumnReordering  new value for property <code>allowColumnReordering</code>
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setAllowColumnReordering = function(bAllowColumnReordering) {
	this.setProperty("allowColumnReordering", bAllowColumnReordering);
	return this;
};

	
/**
 * Getter for aggregation <code>title</code>.<br/>
 * Control or text of title section of the Table (if not set/empty) the title will be hidden)
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.table.Table.prototype.getTitle = function() {
	return this.getAggregation("title", null);
};


/**
 * Setter for the aggregated <code>title</code>.
 * @param oTitle {sap.ui.core.Control}
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setTitle = function(oTitle) {
	this.setAggregation("title", oTitle);
	return this;
};
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.destroyTitle = function() {
	this.destroyAggregation("title");
	return this;
};

	
/**
 * Getter for aggregation <code>footer</code>.<br/>
 * Control or text of footer section of the Table (if not set/empty) the footer will be hidden)
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.table.Table.prototype.getFooter = function() {
	return this.getAggregation("footer", null);
};


/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.ui.core.Control}
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setFooter = function(oFooter) {
	this.setAggregation("footer", oFooter);
	return this;
};
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.destroyFooter = function() {
	this.destroyAggregation("footer");
	return this;
};

	
/**
 * Getter for aggregation <code>toolbar</code>.<br/>
 * Toolbar of the Table (if not set it will be hidden)
 * 
 * @return {sap.ui.commons.Toolbar}
 * @public
 */
sap.ui.table.Table.prototype.getToolbar = function() {
	return this.getAggregation("toolbar", null);
};


/**
 * Setter for the aggregated <code>toolbar</code>.
 * @param oToolbar {sap.ui.commons.Toolbar}
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.setToolbar = function(oToolbar) {
	this.setAggregation("toolbar", oToolbar);
	return this;
};
	

/**
 * Destroys the toolbar in the aggregation 
 * named <code>toolbar</code>.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.destroyToolbar = function() {
	this.destroyAggregation("toolbar");
	return this;
};

	
/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns of the Table
 * 
 * @return {sap.ui.table.Column[]}
 * @public
 */
sap.ui.table.Table.prototype.getColumns = function() {
	return this.getAggregation("columns", []);
};


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.ui.table.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.insertColumn = function(oColumn, iIndex) {
	this.insertAggregation("columns", oColumn, iIndex);
	return this;
};

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.ui.table.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.table.Table.prototype.addColumn = function(oColumn) {
	this.addAggregation("columns", oColumn);
	return this;
};

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.ui.table.Column} vColumn the column to remove or its index or id
 * @return {sap.ui.table.Column} the removed column or null
 * @public
 */
sap.ui.table.Table.prototype.removeColumn = function(vColumn) {
	return this.removeAggregation("columns", vColumn);
};

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.table.Column[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.table.Table.prototype.removeAllColumns = function() {
	return this.removeAllAggregation("columns");
};

/**
 * Checks for the provided <code>sap.ui.table.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.table.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.table.Table.prototype.indexOfColumn = function(oColumn) {
	return this.indexOfAggregation("columns", oColumn);
};
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.destroyColumns = function() {
	this.destroyAggregation("columns");
	return this;
};


/**
 * Binder for aggregation <code>columns</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.bindColumns = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("columns", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>columns</code>.
 *
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.unbindColumns = function() {
	this.unbindAggregation("columns");
	return this;
};

	
/**
 * Getter for aggregation <code>rows</code>.<br/>
 * Rows of the Table
 * 
 * @return {sap.ui.table.Row[]}
 * @public
 */
sap.ui.table.Table.prototype.getRows = function() {
	return this.getAggregation("rows", []);
};


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.table.Row}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.insertRow = function(oRow, iIndex) {
	this.insertAggregation("rows", oRow, iIndex);
	return this;
};

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.table.Row}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.table.Table.prototype.addRow = function(oRow) {
	this.addAggregation("rows", oRow);
	return this;
};

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.ui.table.Row} vRow the row to remove or its index or id
 * @return {sap.ui.table.Row} the removed row or null
 * @public
 */
sap.ui.table.Table.prototype.removeRow = function(vRow) {
	return this.removeAggregation("rows", vRow);
};

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.table.Row[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.table.Table.prototype.removeAllRows = function() {
	return this.removeAllAggregation("rows");
};

/**
 * Checks for the provided <code>sap.ui.table.Row</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.table.Row}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.table.Table.prototype.indexOfRow = function(oRow) {
	return this.indexOfAggregation("rows", oRow);
};
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.destroyRows = function() {
	this.destroyAggregation("rows");
	return this;
};


/**
 * Binder for aggregation <code>rows</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.bindRows = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("rows", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>rows</code>.
 *
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.unbindRows = function() {
	this.unbindAggregation("rows");
	return this;
};


/**
 * fired when the row selection of the table has been changed 
 *
 * @name sap.ui.table.Table#rowSelectionChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.rowIndex index of the lead selected row
 * @param {object} oControlEvent.getParameters.rowContext binding context of the lead selected row
 * @param {int[]} oControlEvent.getParameters.rowIndices indices of other selected rows
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'rowSelectionChange' event of this <code>sap.ui.table.Table</code>.<br/>
 * fired when the row selection of the table has been changed 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.attachRowSelectionChange = function(oData, fnFunction, oListener) {
	this.attachEvent("rowSelectionChange", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'rowSelectionChange' event of this <code>sap.ui.table.Table</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.detachRowSelectionChange = function(fnFunction, oListener) {
	this.detachEvent("rowSelectionChange", fnFunction, oListener);
	return this;	
};

/**
 * Fire event rowSelectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'rowIndex' of type <code>int</code> index of the lead selected row</li>
 * <li>'rowContext' of type <code>object</code> binding context of the lead selected row</li>
 * <li>'rowIndices' of type <code>int[]</code> indices of other selected rows</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.table.Table.prototype.fireRowSelectionChange = function(mArguments) {
	this.fireEvent("rowSelectionChange", mArguments);
	return this;
};


/**
 * fired when a column of the table has been selected 
 *
 * @name sap.ui.table.Table#columnSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.table.Column} oControlEvent.getParameters.column reference to the selected column
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'columnSelect' event of this <code>sap.ui.table.Table</code>.<br/>
 * fired when a column of the table has been selected 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.attachColumnSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("columnSelect", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'columnSelect' event of this <code>sap.ui.table.Table</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.Table.prototype.detachColumnSelect = function(fnFunction, oListener) {
	this.detachEvent("columnSelect", fnFunction, oListener);
	return this;	
};

/**
 * Fire event columnSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'column' of type <code>sap.ui.table.Column</code> reference to the selected column</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.table.Table} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.table.Table.prototype.fireColumnSelect = function(mArguments) {
	this.fireEvent("columnSelect", mArguments);
	return this;
};


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 *
 * @name sap.ui.table.Table.prototype.getSelectedIndices
 * @function

 * @type int[]
 * @public
 */


/**
 * Adds the given selection interval to the selection. In case of single selection the "indexTo" value will be used for as selected index.
 *
 * @name sap.ui.table.Table.prototype.addSelectionInterval
 * @function
 * @param {int} 
 *         iIndexFrom
 *         Index from which .
 * @param {int} 
 *         iIndexTo
 *         Indices of the items that shall additionally be selected.

 * @type sap.ui.table.Table
 * @public
 */


/**
 * Sets the given selection interval as selection. In case of single selection the "indexTo" value will be used for as selected index.
 *
 * @name sap.ui.table.Table.prototype.setSelectionInterval
 * @function
 * @param {int} 
 *         iIndexFrom
 *         Index from which .
 * @param {int} 
 *         iIndexTo
 *         Indices of the items that shall additionally be selected.

 * @type sap.ui.table.Table
 * @public
 */


/**
 * Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the "indexTo" value.
 *
 * @name sap.ui.table.Table.prototype.removeSelectionInterval
 * @function
 * @param {int} 
 *         iIndexFrom
 *         Index from which .
 * @param {int} 
 *         iIndexTo
 *         Indices of the items that shall additionally be selected.

 * @type sap.ui.table.Table
 * @public
 */


/**
 * Returns whether the given index is selected.
 *
 * @name sap.ui.table.Table.prototype.isIndexSelected
 * @function
 * @param {int} 
 *         iIndex
 *         Index which is checked for selection state.

 * @type boolean
 * @public
 */


/**
 * Removes complete selection.
 *
 * @name sap.ui.table.Table.prototype.clearSelection
 * @function

 * @type sap.ui.table.Table
 * @public
 */


/**
 * Add all rows to the selection.
 *
 * @name sap.ui.table.Table.prototype.selectAll
 * @function

 * @type sap.ui.table.Table
 * @public
 */


/**
 * Returns the context of a row by its index.
 *
 * @name sap.ui.table.Table.prototype.getContextByIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index of the row to return the context from.

 * @type object
 * @public
 */


// Start of sap/ui/table/Table.js
jQuery.sap.require('sap.ui.model.SelectionModel'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/*

Things to consider:
  - what happens when changing/adding/removing a column? Recreate?
    -> call rerender(true);

Open Points:
  - Keyboard Navigation
  - Tests
  - Hierarchical Table (separate control?)

*/ 

// =============================================================================
// BASIC CONTROL API
// =============================================================================

/**
 * Initialization of the Table control
 * @private
 */
sap.ui.table.Table.prototype.init = function() {

	// create an information object which contains always required infos
	this._oInfo = {
		oResBundle: sap.ui.getCore().getLibraryResourceBundle("sap.ui.table"),
		bAccMode: sap.ui.getCore().getConfiguration().getAccessibility(),
		bRtlMode: sap.ui.getCore().getConfiguration().getRTL()
	};
	
	// basic selection model
	this._oSelection = new sap.ui.model.SelectionModel();
	this._oSelection.attachSelectionChanged(this._onSelectionChange, this);
	
	// minimum width of a table column in pixel:
	// should at least be larger than the paddings for cols and cells!
	this._iColMinWidth = 20; 

	// read the row height from CSS
	this.onThemeChanged();
	
	// first & last visible columns
	this._iFirstCol = undefined;
	this._iLastCol = undefined;

	// scrollbars (configure by default for the pixel mode)
	this._oVSb = new sap.ui.core.ScrollBar(this.getId() + "-vsb", {size: "100%"});
	this._oVSb.attachScroll(this.onvscroll, this);
	this._oHSb = new sap.ui.core.ScrollBar(this.getId() + "-hsb", {size: "100%", contentSize: "0px", vertical: false});
	this._oHSb.attachScroll(this.onhscroll, this);
	
	// rendered or not
	this._bRendered = false;
	
	// custom heights
	this._bCustomRowHeight = false;
	this._bCustomColHdrHeight = false;

};


/**
 * Termination of the DataTable control
 * @private
 */
sap.ui.table.Table.prototype.exit = function() {
	// destroy the child controls
	this._oVSB.destroy();
	this._oHSB.destroy();
	// cleanup
	this._cleanUpTimers();
	this._detachEvents();
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.table.Table.prototype.onThemeChanged = function() {
	
	if (!this._bCustomRowHeight) {
		// read the value of the row height parameter
		var sRowHeightParamName = "sap.ui.table.Table:sapUiTableRowHeight";
		this.setProperty("rowHeight", parseInt(sap.ui.core.theming.Parameters.get(sRowHeightParamName), 10), false);
	}
	if (!this._bCustomColHdrHeight) {
		// read the value of the column header height parameter
		var sColHdrHeightParamName = "sap.ui.table.Table:sapUiTableColHdrHeight";
		this.setProperty("columnHeaderHeight", parseInt(sap.ui.core.theming.Parameters.get(sColHdrHeightParamName), 10), false);
	}
	
	if (this._bRendered) {
		this.invalidate();
	}
	
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.table.Table.prototype.onBeforeRendering = function() {
	this._bRendered = false;
	this._cleanUpTimers();
	this._detachEvents();
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.table.Table.prototype.onAfterRendering = function() {
	this._bRendered = true;

	this._bOnAfterRendering = true;

	var $this = this.$();
	
	this._updateVSb();
	this._updateSelection();

	this._handleResize();

	//this._oHSb._doScroll(); // TODO: HACK (to apply the scrollPosition to the scrollbar!)
	
	this._attachEvents();
	
	// restore the column icons
	var aCols = this.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		aCols[i]._restoreIcons();
	}

	this._bOnAfterRendering = false;

};


// =============================================================================
// PUBLIC TABLE API
// =============================================================================


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.rerender = function(bRecreateColumns) {
	if (bRecreateColumns) {
		this._createRows();
	}
	sap.ui.core.Control.prototype.rerender.apply(this, arguments);
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setTitle = function(vTitle) {
	var oTitle = vTitle;
	if (typeof (vTitle) === "string") {
		oTitle = new sap.ui.commons.TextView({
			text: vTitle,
			design: sap.ui.commons.TextViewDesign.H1
		});
	}
	this.setAggregation("title", oTitle);
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setFooter = function(vFooter) {
	var oFooter = vFooter;
	if (typeof (vFooter) === "string") {
		oFooter = new sap.ui.commons.TextView({
			text: vFooter
		});
	}
	this.setAggregation("footer", oFooter);
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setSelectionMode = function(oSelectionMode) {
	this._oSelection.clearSelection();
	if (oSelectionMode === sap.ui.table.SelectionMode.Single) {
		this._oSelection.setSelectionMode(sap.ui.model.SelectionModel.SINGLE_SELECTION);
	} else {
		this._oSelection.setSelectionMode(sap.ui.model.SelectionModel.MULTI_SELECTION);
	}
	this.setProperty("selectionMode", oSelectionMode);
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setRowHeight = function(iHeight) {
	this._bCustomRowHeight = true;
	this.setProperty("rowHeight", iHeight);
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setColumnHeaderHeight = function(iHeight) {
	this._bCustomColHdrHeight = true;
	this.setProperty("columnHeaderHeight", iHeight);
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setFirstVisibleRow = function(iRowIndex, bOnScroll) {
	if (this._bRendered && !bOnScroll && this.$().hasClass("sapUiTableVScr")) {
		// update the scroll position => calls this function again by the event
		this._oVSb.setScrollPosition(iRowIndex);
	} else {
		// update the bindings
		this.setProperty("firstVisibleRow", this._oVSb.getScrollPosition(), true);
		if (this.isBound("rows")) {
			this.updateAggregation("rows");
		}
	}
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setVisibleRowCount = function(iRowCount) {
	this.setProperty("visibleRowCount", iRowCount);
	if (iRowCount >= this._getRowCount()) {
		// when we have more visible rows than rows we reset the first 
		// visible row to the first one!
		this.setProperty("firstVisibleRow", 0);
	}
	this._createRows();
	return this;
};


/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.bindRows = function(sPath, oTemplate, oSorter, aFilters) {
	// bind the aggregation and return (we ignore the template!!)
	return this.bindAggregation("rows", sPath, {}, oSorter, aFilters);
};


/**
 * updates the rows - called internally by the updateAggregation function when
 * anything in the model has been changed.
 * @private
 */
sap.ui.table.Table.prototype.updateRows = function(oBindingInfo, iStartIndex, iLength) {
		
	jQuery.sap.log.warning("updateRows");
		
	// by default the start index is the first visible row
	iStartIndex = iStartIndex === undefined ? this.getFirstVisibleRow() : iStartIndex;

	// in case of the table is not being rendered (or in case of recreation) 
	// it will create the rows for the rows aggregation based on the columns 
	if (!this._bRendered) {
		this._createRows(iStartIndex);
	} else {
		// update the bindings
		this.updateRowsAfterOutput(oBindingInfo, iStartIndex, iLength);
	}

};


/**
 * updates the rows - called internally by the updateAggregation function when
 * anything in the model has been changed.
 * @private
 */
sap.ui.table.Table.prototype.updateRowsAfterOutput = function(oBindingInfo, iStartIndex, iLength) {

	// update the bindings by using a delayed mechanism to avoid to many update
	// requests: by using the mechanism below it will trigger an update each 
	// 50ms 
	var that = this,
	    $this = this.$(),
	    oBinding = oBindingInfo.binding;

	// delayed update mechanism
	this._sBindingTimer = this._sBindingTimer || jQuery.sap.delayedCall(50, this, function() {
	
		this._determineVisibleCols();
		this._updateBindingContexts();
		this._updateSelection();
		this._sBindingTimer = undefined;
		
	});
		
};


// =============================================================================
// EVENT HANDLING & CLEANUP
// =============================================================================

/**
 * attaches the required native event handlers
 */
sap.ui.table.Table.prototype._attachEvents = function() {

	var $this = this.$();

	// listen to the scroll events of the containers (for keyboard navigation)
	$this.find(".sapUiTableRowHdrScr").scroll(jQuery.proxy(this._onrowscroll, this));
	$this.find(".sapUiTableColHdrScr").scroll(jQuery.proxy(this._oncolscroll, this));

	// sync row header > content
	$this.find(".sapUiTableRowHdr > tbody > tr").hover(function() {
		jQuery(this).addClass("sapUiTableRowHvr");
		var iIndex = jQuery(".sapUiTableRowHdr > tbody > tr").index(this) + 2;
		jQuery(".sapUiTableCtrl > tbody > tr").filter(":nth-child(" + iIndex + ")").addClass("sapUiTableRowHvr");
	}, function() {
		jQuery(this).removeClass("sapUiTableRowHvr");
		jQuery(".sapUiTableCtrl > tbody > tr").removeClass("sapUiTableRowHvr");
	});

	// sync content > row header
	$this.find(".sapUiTableCtrl > tbody > tr").hover(function() {
		jQuery(this).addClass("sapUiTableRowHvr");
		var iIndex = jQuery(".sapUiTableCtrl > tbody > tr").index(this);
		jQuery(".sapUiTableRowHdr > tbody > tr").filter(":nth-child(" + iIndex + ")").addClass("sapUiTableRowHvr");
	}, function() {
		jQuery(this).removeClass("sapUiTableRowHvr");
		jQuery(".sapUiTableRowHdr > tbody > tr").removeClass("sapUiTableRowHvr");
	});
		
	// listen to the resize handlers 
	$this.find(".sapUiTableColRsz").mousedown(jQuery.proxy(this._onColumnResizeStart, this));

	// listen to resize events of the browser (or surrounding DOM elements)
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
	
	// the vertical scrollbar listens to the mousewheel on the content section
	this._oVSb.bind($this.find(".sapUiTableCtrlScr").get(0));
	
};

/**
 * detaches the required native event handlers
 */
sap.ui.table.Table.prototype._detachEvents = function() {

	var $this = this.$();

	$this.find(".sapUiTableRowHdrScr").unbind();
	$this.find(".sapUiTableColHdrScr").unbind();
	
	$this.find(".sapUiTableCtrl > tbody > tr").unbind();
	$this.find(".sapUiTableRowHdr > tbody > tr").unbind();

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	$this.find(".sapUiTableColRsz").unbind();

	this._oVSb.unbind($this.find(".sapUiTableCtrlScr").get(0));
	
};

/**
 * cleanup the timers when not required anymore
 */
sap.ui.table.Table.prototype._cleanUpTimers = function() {

	if (this._sBindingTimer) {
		jQuery.sap.clearDelayedCall(this._sBindingTimer);
		this._sBindingTimer = undefined;
	}
	
	if (this._sRenderingTimer) {
		jQuery.sap.clearDelayedCall(this._sRenderingTimer);
		this._sRenderingTimer = undefined;
	}
	
	if (this._sDelayedActionTimer) {
		jQuery.sap.clearDelayedCall(this._sDelayedActionTimer);
		this._sDelayedActionTimer = undefined;
	}
	
	if (this._sColHdrPosTimer) {
		jQuery.sap.clearDelayedCall(this._sColHdrPosTimer);
		this._sColHdrPosTimer = undefined;
	}
	
};


// =============================================================================
// PRIVATE TABLE STUFF
// =============================================================================


/**
 * creates the rows for the rows aggregation
 */
sap.ui.table.Table.prototype._createRows = function(iStartIndex) {

	// by default the start index is the first visible row
	iStartIndex = iStartIndex === undefined ? this.getFirstVisibleRow() : iStartIndex;

	// create the new template
	var oTemplate = new sap.ui.table.Row();
	var aCols = this.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		oTemplate.addCell(aCols[i].getTemplate().clone());
	}
	
	// initially called without iStartIndex and iLength
	this.destroyRows();
	var aRows = []; 
	var aContexts = undefined;
	if (this.isBound("rows")) {
		aContexts = this.getBinding("rows").getContexts(iStartIndex, iStartIndex + this.getVisibleRowCount());
	}
	for (var i = 0; i < this.getVisibleRowCount(); i++) {
		var oClone = oTemplate.clone(this.getId() + "-row-" + i);
		if (aContexts && aContexts[i]) {
			oClone.setBindingContext(aContexts[i]);
			oClone._bHidden = false;
		} else {
			oClone._bHidden = true;
		}
		this.addRow(oClone);
	}
	
};


/**
 * updates the horizontal scrollbar
 */
sap.ui.table.Table.prototype._updateHSb = function() {

	// get the width of the container 
	var $this = this.$();

	// apply the new content size
	var iColsWidth = $this.find(".sapUiTableCtrl").width();
	this._oHSb.setContentSize(iColsWidth + "px");
	
	// add the horizontal scrollbar
	if (iColsWidth > $this.find(".sapUiTableCtrlScr").width()) {
		// show the scrollbar
		$this.addClass("sapUiTableHScr");
	} else {
		// hide the scrollbar
		$this.removeClass("sapUiTableHScr");
	}

};


/**
 * updates the vertical scrollbar
 */
sap.ui.table.Table.prototype._updateVSb = function() {
	var $this = this.$();
	var bDoResize = false;
	if (this.isBound("rows")) {
		var iSteps = Math.max(0, this.getBinding("rows").getLength() - this.getVisibleRowCount());
		if (iSteps) {
			if (!$this.hasClass("sapUiTableVScr")) {
				$this.addClass("sapUiTableVScr");
				bDoResize = true;
			}
		} else {
			if ($this.hasClass("sapUiTableVScr")) {
				$this.removeClass("sapUiTableVScr");
				bDoResize = true;
			}
		}
		this._oVSb.setSteps(iSteps);
		this._oVSb.setScrollPosition(this.getFirstVisibleRow());
		this._oVSb.rerender();
	}
	if (bDoResize && !this._bOnAfterRendering) {
		this._handleResize();
	}
};


/**
 * updates the binding contexts of the currently visible controls
 */ 
sap.ui.table.Table.prototype._updateBindingContexts = function(aContexts) {

	var aRows = this.getRows();
	var aContexts = this.getBinding("rows").getContexts(this.getFirstVisibleRow(), aRows.length);
	
	// update the binding contexts only for the visible columns
	for (var iIndex = 0, iLength = this.getRows().length; iIndex < iLength; iIndex++) {
	//for (var iIndex = aRows.length - 1; iIndex >= 0; iIndex--) {
		var oContext = aContexts[iIndex];
		var oRow = aRows[iIndex];
		if (oRow) {
			var aCells = oRow.getCells();
			var $row = aCells[0].$().parents("tr").first();
			if (oContext) {
				for (var col = this._iFirstCol, l = this._iLastCol + 1; col < l; col++) {
					aCells[col].setBindingContext(oContext);
					//if (col == 0) jQuery.sap.log.warning(aCells[col].getId() + "  => " + aCells[col].getDomRef().innerHTML); 
				}
				if ($row.hasClass("sapUiTableRowHidden")) {
					$row.removeClass("sapUiTableRowHidden");
				}
				oRow._bHidden = false;
			} else {
				if (!$row.hasClass("sapUiTableRowHidden")) {
					$row.addClass("sapUiTableRowHidden");
				}
				oRow._bHidden = true;
			}
		}
	}
	
	// since webkit browsers have an optimized painting mechanism we need to force
	// the rerendering of the complete element (reconsider if this would be ok)
	// Google for: "Force-redraw DOM technique for WebKit-based browsers" to find the page!
	if (jQuery.browser.webkit && this.$().css("-webkit-transform") === "none") {
		this.$().css("-webkit-transform", "scale(1)");
	}

};


/**
 * determines the currently visible columns (used for simply updating only the
 * controls of the visible columns instead of the complete row!)t
 */
sap.ui.table.Table.prototype._determineVisibleCols = function() {

	// determine the visible colums
	var $this = this.$();

	if ($this.hasClass("sapUiTableHScr")) {
	
		// calculate the view port
		var iScrollLeft = this._getScrollLeft();
		var iScrollRight = iScrollLeft + this._getScrollWidth();
	
		// has the view port changed?
		if (this._iOldScrollLeft !== iScrollLeft || this._iOldScrollRight !== iScrollRight) {
		
			// calculate the first and last visible column
			var bRtl = this._oInfo.bRtlMode;
			var iLeft = bRtl ? $this.find(".sapUiTableCtrl").width() : 0;
			this._iFirstCol = undefined;
			this._iLastCol = undefined;
			var that = this;
			$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
				var iWidth = jQuery(oElement).width();
				if (bRtl) {
					iLeft -= iWidth;
				}
				if (iLeft + iWidth >= iScrollLeft && iLeft <= iScrollRight) {
					if (that._iFirstCol === undefined) {
						that._iFirstCol = iIndex;
					}
					that._iLastCol = iIndex; 
				}
				if (!bRtl) {
					iLeft += iWidth;
				} 
			});
			this._iLastCol = Math.min(this._iLastCol, this.getColumns().length);
			
			// keep the view port information (performance!!)
			this._iOldScrollLeft = iScrollLeft;
			this._iOldScrollRight = iScrollRight;
			
		}
	
	} else {
	
		this._iFirstCol = 0;
		this._iLastCol = this.getColumns().length - 1;
			
	}

};

sap.ui.table.Table.prototype._getRowCount = function() {
	if (this.isBound("rows")) {
		return this.getBinding("rows").getLength();
	} else {
		return 0;
	}
};


sap.ui.table.Table.prototype._getScrollLeft = function() {
	if (this.$().hasClass("sapUiTableHScr")) {
		return this._oHSb.getScrollPosition() || 0;
	} else {
		return 0;
	}
};

sap.ui.table.Table.prototype._getScrollTop = function() {
	if (this.$().hasClass("sapUiTableVScr")) {
		return this._oVSb.getScrollPosition() || 0;
	} else {
		return 0;
	}
};

sap.ui.table.Table.prototype._getScrollWidth = function() {
	return this.$().find(".sapUiTableCtrlScr").width();
};

sap.ui.table.Table.prototype._getScrollHeight = function() {
	return this.$().find(".sapUiTableCtrlScr").height();
};


/**
 * calculates the width of the columns by using the browsers calculation
 * mechanism and setting a fix width to the columns
 */
sap.ui.table.Table.prototype._handleResize = function() {

	//var millis = new Date();
	var $this = this.$();

	// reset the table width to the maximal width without scrollbar
	var iTableWidth = $this.find(".sapUiTableCtrl").width();
	
	// first calculate the min width of the table for all columns
	var aCols = this.getColumns();
	var iColsWidth = 0;
	for (var i = 0, l = aCols.length; i < l; i++) {
		var sWidth = aCols[i].getWidth();
		var fWidth = parseFloat(sWidth);
		if (jQuery.sap.endsWith(sWidth, "px")) {
			iColsWidth += fWidth;
		} else if (jQuery.sap.endsWith(sWidth, "%")) {
			iColsWidth += fWidth * iTableWidth / 100;
		} else {
			// for unknown width we use the min width
			iColsWidth += /* aCols[i].getMinWidth() || */ this._iColMinWidth;
		}
	}
	
	// performance optimization! when the screen is smaller than the columns 
	// total width we do not recalculate the width anymore!! not needed!!
	if (!this._bOnAfterRendering && iColsWidth > window.screen.width) {
		return;
	}
	
	// reset the table width to the maximal width without scrollbar
	iTableWidth = $this.find(".sapUiTableCtrlScr").width();
	
	// FYI: table-layout: fixed => allows overflow: hidden for TD's!
	//      but for the determination of the width we need table-layout: auto!
	
	// we have two options now (columns are wider than the possible table width)
	if (iColsWidth > iTableWidth) {

		// HORIZONTAL SCROLLING:
		// if the columns are wider the table control will get this width
		$this.find(".sapUiTableCtrl").width(iColsWidth);
		
		// set the width of the columns in the first invisible row of the table
		$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
			jQuery(oElement).width(aCols[iIndex].getWidth() || /* aCols[iIndex].getMinWidth() || */ "auto");
		});

		// calculate and apply the real width
		iColsWidth = 0;
		$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
			iColsWidth += jQuery(oElement).width();
		});

	} else {
	
		// "NO" HORIZONTAL SCROLLING:
		// if the table is wider than the columns - the cells will define the length
		$this.find(".sapUiTableCtrl").width(iTableWidth);
		
		// set the width of the columns in the first invisible row of the table
		$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
			// columns with a fixed with and beeing flexible will also get the auto size
			// to expand dynamically their width!
			if (aCols[iIndex].getWidth() && !aCols[iIndex].getFlexible()) {
				jQuery(oElement).width(aCols[iIndex].getWidth());
			} else {
				jQuery(oElement).width("auto");
			}
		});

		// we set the width of the columns to guarantee pixel perfect alignment
		// of the columns - especially for IE this is important!!
		iColsWidth = 0;
		$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
			iColsWidth += jQuery(oElement).width();
			jQuery(oElement).width(jQuery(oElement).width());
		});
	}
	
	// apply the total width of all columns to the table again 
	$this.find(".sapUiTableCtrl").width(iColsWidth);

	// update the horizontal scrollbar
	this._updateHSb();

	// finally we take the width of the columns and apply them to the column headers
	var iNewTableWidth = Math.max(iColsWidth, iTableWidth) + $this.find(".sapUiTableVSb").width();
	$this.find(".sapUiTableColHdr").width(iNewTableWidth);
	
	// update the positions of the resize handlers
	this._updateColumnHeader();
	//jQuery.sap.log.warning("_handleResize: " + (new Date() - millis) + "ms");

};

/**
 * updates the column headers (width and position of the resize handles)
 */
sap.ui.table.Table.prototype._updateColumnHeader = function () {
	if (this._sColHdrPosTimer) {
		jQuery.sap.clearDelayedCall(this._sColHdrPosTimer);
	}
	var bRtl = this._oInfo.bRtlMode;
	this._sColHdrPosTimer = jQuery.sap.delayedCall(this._bOnAfterRendering ? 0 : 100, this, function() {
		var that = this, $this = this.$();
		var $cols = $this.find(".sapUiTableColHdrScr .sapUiTableCol");
		$this.find(".sapUiTableCtrlCol > th").each(function(iIndex, oElement) {
			var iWidth = jQuery(oElement).width();
			var $col = jQuery($cols.get(iIndex));
			// apply the width of the column (here we need to do a pixel correction)
			if (iIndex === 0 && !jQuery.browser.mozilla && !that._oInfo.bRtlMode) {
				iWidth += 1;
			}
			$col.width(iWidth);
			// the left position is calculated from the sapUiTableCnt element (therefore we need the offset!)
			jQuery.sap.byId($col.attr("id") + "-rsz").css({
				"left": $col.position().left + (bRtl ? -2 : iWidth - 3)
			});
		});
		this._sColHdrPosTimer = undefined;
	});
};

/**
 * disables text selection on the document (disabled fro Dnd)
 */
sap.ui.table.Table.prototype._disableTextSelection = function () {
	jQuery(document.body).
		attr("unselectable", "on").
		css({
			"cursor": "col-resize",
        	"-moz-user-select": "none",
        	"-webkit-user-select": "none",
        	"user-select": "none"
        }).
		bind("selectstart", function() { 
			return false; 
		});
};

/**
 * enables text selection on the document (disabled fro Dnd)
 */
sap.ui.table.Table.prototype._enableTextSelection = function () {
	jQuery(document.body).
		attr("unselectable", "off").
		css({
			"cursor": "",
        	"-moz-user-select": "",
        	"-webkit-user-select": "",
        	"user-select": ""
        }).
		unbind("selectstart");
};


// =============================================================================
// CONTROL EVENT HANDLING
// =============================================================================

sap.ui.table.Table.prototype.onresize = function(oEvent) {
	this._handleResize();
	if (this.isBound("rows")) {
		this.updateAggregation("rows");
	}
};

sap.ui.table.Table.prototype.onvscroll = function(oEvent) {
	this.setFirstVisibleRow(this._getScrollTop(), true);
};

sap.ui.table.Table.prototype.onhscroll = function(oEvent) {

	if (!this._bOnAfterRendering) {
	
		var $this = this.$();
		
		// synchronize the scroll areas
		var iScrollLeft = this._getScrollLeft();
		$this.find(".sapUiTableColHdrScr").scrollLeft(iScrollLeft);
		$this.find(".sapUiTableCtrlScr").scrollLeft(iScrollLeft);
		
		// update the column headers (resize handles)
		this._updateColumnHeader();
	
		// update the bindings
		if (this.isBound("rows")) {
			this.updateAggregation("rows");
		}
		
	}

};

sap.ui.table.Table.prototype._onrowscroll = function(oEvent) {
	var $Row = this.$().find(".sapUiTableRowHdrScr");
	this._oVSb.setScrollPosition($Row.scrollTop());
};

sap.ui.table.Table.prototype._oncolscroll = function(oEvent) {
	var $Col = this.$().find(".sapUiTableColHdrScr");
	this._oHSb.setScrollPosition($Col.scrollLeft());
};


sap.ui.table.Table.prototype.onmousedown = function(oEvent) {
	
	this._bShowMenu = true;

	if (this.getAllowColumnReordering()) {
		var $target = jQuery(oEvent.target);
		var $col = $target.closest(".sapUiTableCol");
		if ($col.length === 1) {
	
			var iIndex = parseInt($col.attr("data-sap-ui-colindex"), 10);
			var oColumn = this.getColumns()[iIndex];
	
			this._sDelayedActionTimer = jQuery.sap.delayedCall(200, this, function() {
			
				this._bShowMenu = false;
				
				this._onColumnMoveStart(oColumn);
			
			});
			
		}
	}

};

sap.ui.table.Table.prototype.onclick = function(oEvent) {
	// clean up the timer
	jQuery.sap.clearDelayedCall(this._sDelayedActionTimer);
	// forward the event
	this._onSelect(oEvent);
};


// =============================================================================
// SELECT HANDLING
// =============================================================================

sap.ui.table.Table.prototype._onSelect = function(oEvent) {

	var $this = this.$();

	// trigger column menu
	var $target = jQuery(oEvent.target);
	
	// column header?
	var $col = $target.closest(".sapUiTableCol");
	if (this._bShowMenu && $col.length === 1) {
		var iIndex = parseInt($col.attr("data-sap-ui-colindex"), 10);
		var oColumn = this.getColumns()[iIndex];
		this._onColumnSelect(oColumn);
		return;
	}
	
	// row header?
	var $row = $target.closest(".sapUiTableRowHdr tr");
	if ($row.length === 1) {
		var iIndex = $this.find(".sapUiTableRowHdr tr").index($row.get(0));
		this._onRowSelect(this.getFirstVisibleRow() + iIndex);
		return;
	}
	
	// select all?
	if ($target.attr("id") === this.getId() + "-selall") {
		if (this._getRowCount() === this.getSelectedIndices().length) {
			this.clearSelection();
		} else {
			this.selectAll();
		}
		return;
	}
	
};


// =============================================================================
// ROW EVENT HANDLING
// =============================================================================

sap.ui.table.Table.prototype._onRowSelect = function(iRowIndex) {
	
	var oSelMode = this.getSelectionMode();
	if (oSelMode !== sap.ui.table.SelectionMode.None) {
		if (oSelMode === sap.ui.table.SelectionMode.Single) {
			if (!this.isIndexSelected(iRowIndex)) {
				this.setSelectedIndex(iRowIndex);
			} else {
				this.clearSelection();
			}
		} else {
			if (!this.isIndexSelected(iRowIndex)) {
				this.addSelectionInterval(iRowIndex, iRowIndex);
			} else {
				this.removeSelectionInterval(iRowIndex, iRowIndex);
			}
		}
	}
		
};


// =============================================================================
// COLUMN EVENT HANDLING
// =============================================================================

sap.ui.table.Table.prototype._onColumnSelect = function(oColumn) {

	// forward the event
	var bExecuteDefault = this.fireEvent("columnSelect", {
		column: oColumn
	}, true /* allow preventDefault() */);
	
	// if the default behavior should be prevented we suppress to open
	// the column menu! 
	if (bExecuteDefault) {
		oColumn._openMenu();
	}
	
};

sap.ui.table.Table.prototype._onColumnMoveStart = function(oColumn) {

	this._disableTextSelection();

	var $col = oColumn.$();
	
	this._$colGhost = $col.clone().removeAttr("id");
	
	$col.css({
		"backgroundColor": "white",
		"backgroundImage": "none",
		"opacity": ".5"
	});

	this._$colGhost.css({
		"position": "absolute",
		"width": "auto",
		"border": "1px solid red",
		"backgroundColor": "white",
		"left": -10000,
		"top": -10000,
		"cursor": "pointer"
	});
	
	this.$().find(".sapUiTableCol").each(function(iIndex, oElement) {
	
		var $col = jQuery(this);
		$col.css({position: "relative"});
		
		$col.data("pos", {
			left: $col.position().left,
			center: $col.position().left + $col.outerWidth() / 2,
			right:  $col.position().left + $col.outerWidth()
		});
	
	});
	
	this._$colGhost.appendTo(document.body);

	jQuery(document.body).
		mousemove(jQuery.proxy(this._onColumnMove, this)).
		mouseup(jQuery.proxy(this._onColumnMoved, this));
	
};

sap.ui.table.Table.prototype._onColumnMove = function(oEvent) {
	
	var $this = this.$();
	var bRtl = this._oInfo.bRtlMode;
	var iRelX = oEvent.pageX - $this.offset().left;
	var iDnDColIndex = parseInt(this._$colGhost.attr("data-sap-ui-colindex"), 10);
	var $DnDCol = this.getColumns()[iDnDColIndex].$();
	
	// find out the new col position
	var iOldColPos = this._iNewColPos;
	this._iNewColPos = iDnDColIndex;
	var that = this;
	$this.find(".sapUiTableCol").each(function(iIndex, oCol) {
	
		var $col = jQuery(oCol);
		var iColIndex = parseInt($col.attr("data-sap-ui-colindex"), 10);
		
		if ($col.get(0) !== $DnDCol.get(0)) {
		
			var oPos = $col.data("pos");
		
			var bBefore = iRelX >= oPos.left && iRelX <= oPos.center;
			var bAfter = iRelX >= oPos.center && iRelX <= oPos.right;
			
			if (!bRtl) {
				that._iNewColPos = bBefore ? iColIndex : bAfter ? iColIndex + 1 : that._iNewColPos;
			} else {
				that._iNewColPos = bAfter ? iColIndex : bBefore ? iColIndex + 1 : that._iNewColPos;
			}
			
			if ((bBefore || bAfter) && iColIndex > iDnDColIndex) {
				that._iNewColPos--;
			}
			
		} 
			
	}); 
	
	// position has been changed => reorder
	if (iOldColPos !== this._iNewColPos) {
	
		for (var i = Math.min(iOldColPos, this._iNewColPos), l = Math.max(iOldColPos, this._iNewColPos); i <= l; i++) {
			if (i !== iDnDColIndex) {
				this.getColumns()[i].$().stop(true, true).animate({left: "0px"});
			}
		}
		
		var iOffsetLeft = 0;
		if (this._iNewColPos < iDnDColIndex) {
			for (var i = this._iNewColPos; i < iDnDColIndex; i++) {
				var $col = this.getColumns()[i].$()
				iOffsetLeft -= $col.outerWidth();
				$col.stop(true, true).animate({left: $DnDCol.outerWidth() * (bRtl ? -1 : 1) + "px"});
			}
		} else {
			for (var i = iDnDColIndex + 1, l = this._iNewColPos + 1; i < l; i++) {
				var $col = this.getColumns()[i].$()
				iOffsetLeft += $col.outerWidth();
				$col.stop(true, true).animate({left: $DnDCol.outerWidth() * (bRtl ? 1 : -1) + "px"});
			}
		}
		$DnDCol.stop(true, true).animate({left: iOffsetLeft * (bRtl ? -1 : 1) + "px"});
		
	}
	
	this._$colGhost.css({
		"left": oEvent.pageX - 1,
		"top": oEvent.pageY - 1
	});
	
};

sap.ui.table.Table.prototype._onColumnMoved = function(oEvent) {
	
	var iDnDColIndex = parseInt(this._$colGhost.attr("data-sap-ui-colindex"), 10);
	var oDnDCol = this.getColumns()[iDnDColIndex];
	
	jQuery(document.body).
		unbind("mousemove", this._onColumnMove).
		unbind("mouseup", this._onColumnMoved);
	
	this._$colGhost.remove();
	this._$colGhost = undefined;
	
	this._enableTextSelection();
		
	if (this._iNewColPos !== undefined && this._iNewColPos !== iDnDColIndex) {
		this.removeColumn(oDnDCol);
		this.insertColumn(oDnDCol, this._iNewColPos);
		this._iNewColPos = undefined;
		this._createRows();
	} else {
		oDnDCol.$().css({
			"backgroundColor": "",
			"backgroundImage": "",
			"opacity": ""
		});
	}

};

sap.ui.table.Table.prototype._onColumnResizeStart = function(oEvent) {

	this._disableTextSelection();
	this._$colResize = jQuery(oEvent.target).addClass("sapUiTableColRszActive");
	
	jQuery(document.body).
		mousemove(jQuery.proxy(this._onColumnResize, this)).
		mouseup(jQuery.proxy(this._onColumnResized, this));
	
};

sap.ui.table.Table.prototype._onColumnResize = function(oEvent) {
	
	var $this = this.$();
	
	var bRtl = this._oInfo.bRtlMode;
	var iColIndex = parseInt(this._$colResize.attr("data-sap-ui-colindex"), 10);
	var oColumn = this.getColumns()[iColIndex];
	var $col = oColumn.$();
	
	// find the total left offset from the document (required for pageX info)
	var iOffsetLeft = $this.find(".sapUiTableCnt").offset().left;
	
	// relative left position within the table scroll container
	var iRelLeft = oEvent.pageX - iOffsetLeft;
	
	// get the left position of the column to calculate the new width
	// relative to the parent container (sapUiTableCnt)!
	var iColLeft = $col.position().left;
	
	// calculate the new width
	var iPos = iRelLeft - iColLeft;
	
	// check the boundaries for the column width
	var iWidth = bRtl ? $col.outerWidth() - iPos : iPos;
	iWidth = Math.max(iWidth, /* oColumn.getMinWidth() || */ this._iColMinWidth);
	//iWidth = Math.min(iWidth, oColumn.getMaxWidth() || iWidth);
	
	// calculate and set the position of the resize handle
	var iRszLeft = iColLeft + (bRtl ? $col.outerWidth() - iWidth : iWidth);
	iRszLeft -= (this._$colResize.width() - 2) / 2;
	this._$colResize.css("left", iRszLeft);
	
	// store the width of the column
	oColumn.setProperty("width", iWidth + "px", true);
		
};

sap.ui.table.Table.prototype._onColumnResized = function(oEvent) {
	
	this._onColumnResize(oEvent);
	
	jQuery(document.body).
		unbind("mousemove", this._onColumnResize).
		unbind("mouseup", this._onColumnResized);
	
	this._$colResize.removeClass("sapUiTableColRszActive");
	this._$colResize = undefined;
	this._enableTextSelection();
		
	this.invalidate();
	
};


// =============================================================================
// SELECTION HANDLING
// =============================================================================

/**
 * updates the visual selection in the HTML markup 
 */
sap.ui.table.Table.prototype._updateSelection = function() {
	var $this = this.$();
	var iFirstRow = this.getFirstVisibleRow();
	var that = this;
	var oResBundle = this._oInfo.oResBundle;
	$this.find(".sapUiTableRowHdr tr").each(function(iIndex, oElement) {
		if (that.isIndexSelected(iFirstRow + iIndex)) {
			jQuery(this).addClass("sapUiTableRowSel").
				attr("title", oResBundle.getText("TBL_ROW_DESELECT")).
				attr("aria-selected", "true");
			jQuery($this.find(".sapUiTableCtrl tr").get(iIndex + 1)).addClass("sapUiTableRowSel");
		} else {
			jQuery(this).removeClass("sapUiTableRowSel").
				attr("title", oResBundle.getText("TBL_ROW_SELECT")).
				attr("aria-selected", "false");
			jQuery($this.find(".sapUiTableCtrl tr").get(iIndex + 1)).removeClass("sapUiTableRowSel");
		}
	});
};


/**
 * handles and delegates the selection events
 */
sap.ui.table.Table.prototype._onSelectionChange = function(oEvent) {
	if (this._oSelection) {
		var iLeadIndex = this._oSelection.getLeadSelectedIndex();
		this.fireRowSelectionChange({
			rowIndex: iLeadIndex,
			rowContext: this.getContextByIndex(iLeadIndex),
			rowIndices: this._oSelection.getSelectedIndices()
		});
	}
}; 
 

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.getContextByIndex = function(iIndex) {
	// TODO: ODataListBinding needs to make sure to prevent loading multiple times
	return this.isBound("rows") ? this.getBinding("rows").getContexts(iIndex, 1)[0] : undefined;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.getSelectedIndex = function() {
	return this._oSelection.getLeadSelectedIndex();
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setSelectedIndex = function(iIndex) {
	this._oSelection.setSelectionInterval(iIndex, iIndex);
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.clearSelection = function() {
	this._oSelection.clearSelection();
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.selectAll = function() {
	if (this.isBound("rows")) {
		this._oSelection.setSelectionInterval(0, this.getBinding("rows").getLength() - 1);
	}
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.getSelectedIndices = function() {
	return this._oSelection.getSelectedIndices();
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.addSelectionInterval = function(iIndexFrom, iIndexTo) {
	this._oSelection.addSelectionInterval(iIndexFrom, iIndexTo);
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.setSelectionInterval = function(iIndexFrom, iIndexTo) {
	this._oSelection.setSelectionInterval(iIndexFrom, iIndexTo);
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.removeSelectionInterval = function(iIndexFrom, iIndexTo) {
	this._oSelection.removeSelectionInterval(iIndexFrom, iIndexTo);
	this._updateSelection();
	return this;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.table.Table.prototype.isIndexSelected = function(iIndex) {
	return this._oSelection.isSelectedIndex(iIndex);
};


// =============================================================================
// KEYBOARD HANDLING
// =============================================================================

sap.ui.table.Table.prototype.onkeypress = function(oEvent) {

	if (oEvent.keyCode == jQuery.sap.KeyCodes.SPACE ||
	    oEvent.keyCode == jQuery.sap.KeyCodes.ENTER) {
	    // handle selection events
		this._onSelect(oEvent);
	} else if (oEvent.keyCode == jQuery.sap.KeyCodes.F2) {
		jQuery.sap.log.info(this.getId() + ": F2");
	}

};

sap.ui.table.Table.prototype.onkeydown = function(oEvent) {
	if (jQuery(oEvent.target).closest(".sapUiTableCnt").length > 0) {
		if (oEvent.keyCode == jQuery.sap.KeyCodes.TAB) {
			oEvent.preventDefault();
		} else {
			this._handleNavigation(oEvent);
		}
	}
};

sap.ui.table.Table.prototype.onsappageup = function(oEvent) {
	this.setFirstVisibleRow(this.getFirstVisibleRow() - this.getVisibleRowCount())
};

sap.ui.table.Table.prototype.onsappagedown = function(oEvent) {
	this.setFirstVisibleRow(this.getFirstVisibleRow() + this.getVisibleRowCount())
};



sap.ui.table.Table.prototype._handleNavigation = function(oEvent) {

	// row header
	var $this = this.$(), $target = jQuery(oEvent.target); 
	var $row = $target.closest(".sapUiTableRowHdr tr");
	if ($row.length === 1) {
		
		var $rowHdrs = $this.find(".sapUiTableRowHdr tr");
		var iIndex = $rowHdrs.index($row.get(0));
		
		if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) {
			iIndex -= 1;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) {
			iIndex += 1;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.HOME && !!oEvent.metaKey) {
			this.setFirstVisibleRow(0);
			iIndex = 0;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.END && !!oEvent.metaKey) {
			this.setFirstVisibleRow(this._oVSb.getSteps());
			iIndex = $rowHdrs.length - 1;
		}
		
		if (iIndex === -1) {
			if (this.getFirstVisibleRow() > 0) {
				this.setFirstVisibleRow(this.getFirstVisibleRow() - 1);
			}
		} else if (iIndex === this.getVisibleRowCount()) {
			if (this.getFirstVisibleRow() < this._oVSb.getSteps()) {
				this.setFirstVisibleRow(this.getFirstVisibleRow() + 1);
			}
		} else {
			jQuery($rowHdrs.get(iIndex)).find("td").focus();
		}
		
	}
	
	// TODO: table control
	/*
	var $this = this.$(), $target = jQuery(oEvent.target); 
	var $td = $target.closest(".sapUiTableCtrl td[role=gridcell]");
	if ($td.length === 1) {
	
		var $tr = $td.parent();
		
		var rowIndex = $tr.parent().children().index($tr);
		var colIndex = $tr.children().index($td);

		jQuery.sap.log.warning(rowIndex + "/" + colIndex);

		// TODO: RTL
		if (oEvent.keyCode == jQuery.sap.KeyCodes.TAB) {
			oEvent.preventDefault();
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) {
			rowIndex++;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) {
			rowIndex--;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_LEFT) {
			colIndex--;
		} else if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_RIGHT) {
			colIndex++;
		}

		$tr.parent().find("tr:nth-child(" + rowIndex + ") td:nth-child(" + (colIndex + 1) + ")").get(0).focus();
		
	}
*/

}; 

}; // end of sap.ui.table.Table
if ( !jQuery.sap.isDeclared('sap.ui.table.DataTableRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

//Provides default renderer for control sap.ui.table.DataTable
jQuery.sap.declare("sap.ui.table.DataTableRenderer");

/**
 * @class DataTableRenderer
 * @static
 */
sap.ui.table.DataTableRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.table.DataTableRenderer.render = function(oRenderManager, oControl) {

	// convenience variable
	var rm = oRenderManager;
	var r = sap.ui.table.DataTableRenderer; 

	// define the table container
	rm.write("<div");
	if (oControl.bIsACC) {
		rm.writeAttribute("tabindex", "0");
		var aAriaOwnsIds = []; 
		if (oControl.getToolbar()) {
			aAriaOwnsIds.push(oControl.getToolbar().getId());
		}
		aAriaOwnsIds.push(oControl.getId() + "-table");
		rm.writeAttribute("aria-owns", aAriaOwnsIds.join(" "));
	}
	rm.writeControlData(oControl);
	rm.addClass("sapUiTbl");
	if (!oControl.getTitle()) {
		rm.addClass("sapUiTblNoHeader");
	}
	rm.writeClasses();
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}
	rm.writeStyles();
	rm.write(">");

	// render the title
	r.renderTitle(rm, oControl);

	// render the toolbar
	r.renderToolbar(rm, oControl);

	// render the table
	r.renderTable(rm, oControl);

	// render the footer
	r.renderFooter(rm, oControl);

	// end of table container
	rm.write("</div>");

	// update the control bindings and the selection status (only when already rendered)
	if (oControl.bOutput) {
		oControl._bNeedsUpdateBindings = true;
	}
	
};


// =============================================================================
// SUB RENDERER
// =============================================================================


sap.ui.table.DataTableRenderer.renderTitle = function(rm, oControl) {
	// render the title of the table if specified
	if (oControl.getTitle()) {
		rm.write("<div");
		rm.addClass("sapUiTblHdr");
		rm.writeClasses();
		if (oControl.bIsACC) {
			rm.writeAttribute("role", "heading");
		}
		rm.write(">");
		rm.write(oControl.getTitle());
		rm.write("</div>");
	}
};


sap.ui.table.DataTableRenderer.renderToolbar = function(rm, oControl) {
	if (oControl.getToolbar()) {
		rm.renderControl(oControl.getToolbar());
	}
};

sap.ui.table.DataTableRenderer.renderTable = function(rm, oControl) {

	// render information
	var bRenderHSb = false;
	var bShowRowSelectors = oControl.getSelectionMode() != sap.ui.table.SelectionMode.None;
	var bShowSelectAllButton = oControl.getSelectionMode() === sap.ui.table.SelectionMode.All || oControl.getSelectionMode() === sap.ui.table.SelectionMode.Multi;
	
	// model information
	var oBinding = oControl.getBinding();

	rm.write("<div");
	rm.writeAttribute("class", "sapUiTblCtrlCnt");
	rm.write(">");

	rm.write("<div");
	rm.writeAttribute("class", "sapUiTblCtrlScr");
	rm.write(">");

	rm.write("<table");
	rm.writeAttribute("id", oControl.getId() + "-table");
	rm.writeAttribute("class", "sapUiTblCtrl");
	rm.write(">");
	
	// -------------------------------------------------------------------------
	// THEAD: Column Headers
	// -------------------------------------------------------------------------

	rm.write("<thead><tr>");
	if (bShowRowSelectors) {
		rm.write("<th class=\"sapUiTblColSelCell sapUiTblColFirst\"");
		if (oControl.bIsACC) {
			rm.writeAttribute("role", "columnheader");
			rm.writeAttribute("tabindex", "0");
		}
		if (bShowSelectAllButton) {
			rm.writeAttribute("title", oControl.oResBundle.getText("TBL_SELECT_ALL"));
		}
		rm.write(">");
		if (bShowSelectAllButton) {
			rm.write("<div id=\"" + oControl.getId() + "-selall\" class=\"sapUiTblColSelAll\"></div>");
		}
		rm.write("</th>");
	}
	var aHeaders = oControl.getColumns();
	var bHasHeaders = aHeaders.length > 0;
	var iHeaderCount = Math.max(1, aHeaders.length);
	for (var col = 0; col < iHeaderCount; col++) {
		rm.write("<th");
		if (oControl.bIsACC) {
			rm.writeAttribute("role", "columnheader");
			rm.writeAttribute("tabindex", "0");
		}
		if (!bShowRowSelectors && col === 0) {
			rm.addClass("sapUiTblColFirst");
		}
		if (col === iHeaderCount - 1) {
			rm.addClass("sapUiTblColLast");
		}
		rm.writeClasses();
		var sWidth = aHeaders[col] && aHeaders[col].getWidth();
		if (sWidth) {
			rm.addStyle("width", sWidth);
		}
		rm.writeStyles();
		var sId = aHeaders[col] && aHeaders[col].getId();
		if (sId) {
			rm.writeElementData(aHeaders[col])
		}
		rm.write(">");
		if (sId) {
			rm.write("<div id=\"" + oControl.getId() + "_resize_" + sId + "\" class=\"sapUiTblColResize\"");
			if (aHeaders[col] && !aHeaders[col].getResizable()) {
				rm.write(" style=\"cursor: auto;\"");
			}
			rm.write("></div>");
			rm.write("<div id=\"" + oControl.getId() + "_icons_" + sId + "\" class=\"sapUiTblColIcons\"></div>");
		}
		rm.write("<div class=\"sapUiTblCnt\"");
		/*
		if (oControl.getHeaderHeight()) {
			rm.addStyle("height", oControl.getHeaderHeight());
		}
		*/
		rm.writeStyles();
		rm.write(">");
		var oLabel = aHeaders[col] && aHeaders[col].getLabel();
		if (oLabel) {
			rm.renderControl(oLabel);
		}
		rm.write("</div>");
		rm.write("</th>");
	}
	rm.write("</tr></thead>");

	// -------------------------------------------------------------------------
	// TFOOT: Horizontal Scrollbar (TODO)
	// -------------------------------------------------------------------------

	/*
	if (bHasHeaders && bRenderHSb) {
		rm.write("<tfoot>");
		rm.write("<tr class=\"sapUiTblHSb\">");
		if (bShowRowSelectors) {
			rm.write("<td class=\"sapUiTblRowSelCell\"></td>");
		}
		rm.write("<td colspan=\"" + aHeaders.length + "\" style=\"background-color: green;\">");
		rm.write("</td>");
		rm.write("<td class=\"sapUiTblVSb\"></td>");
		rm.write("</tr>");
		rm.write("</tfoot>");
	}
	*/

	// -------------------------------------------------------------------------
	// TBODY: Content Cells
	// -------------------------------------------------------------------------

	// get the information for the content rendering
	var iFirstVisibleRow = oControl.getFirstVisibleRow();
	var iVisibleRowCount = oControl.getCurrentVisibleRowCount();

	// by default we check the length of the list binding
	var iRowCount = oBinding ? oBinding.getLength() : 0;

	// determine the scope for the visible
	var iMin = Math.max(Math.min(iFirstVisibleRow, iRowCount), 0);
	var iMax = Math.max(Math.min(iMin + iVisibleRowCount, iRowCount), iMin);
	if (iMax - iMin != iVisibleRowCount) {
		iMin = Math.max(iMax - iVisibleRowCount, 0);
	}
	oControl.setProperty("firstVisibleRow", iMin, true); // no re-rendering!

	// fetch the contexts from the model to apply them immediately
	var aContexts = [];
	if (oBinding) {
		aContexts = oBinding.getContexts(iMin, iMax, oControl.getThreshold());
	} 

	rm.write("<tbody>");
	oControl._aRows = [];
	oControl._destroyControls(true);

	var bHierarchical = oControl.getHierarchical(),
	    iMarginPx = 0, 
	    iLevel = 0;
	     
	for (var row = 0; row < iVisibleRowCount; row++) {

		// create the cells array
		oControl._aRows[row] = [];

		// row
		rm.write("<tr ");
		rm.writeAttribute("id", oControl.getId() + "-row" + row);
		if (oControl.bIsACC){
			rm.writeAttribute("role", "row");
			rm.writeAttribute("aria-label", oControl.oResBundle.getText("TBL_ROW_SELECT") + " " + row);
			rm.writeAttribute("tabindex", "0");
		}

		// determine hierarchical infos
		if (bHierarchical && oBinding) {
			iLevel = oBinding.getLevel(aContexts[row]);
			iMarginPx = iLevel * 17;
			rm.writeAttribute("data-sap-ui-level", iLevel);
		}

		rm.write(">");

		// row selector cell:
		if (bShowRowSelectors) {
			rm.write("<td id=\"");
			rm.write(oControl.getId() + "-rowsel" + row);
			rm.write("\" class=\"sapUiTblRowSelCell sapUiTblColFirst\" role=\"gridcell\" tabIndex=\"0\"></td>");
		}

		// content cells:
		for (var col = 0; col < iHeaderCount; col++) {
			rm.write("<td role=\"gridcell\""); 
			if (!bShowRowSelectors && col === 0) {
				rm.addClass("sapUiTblColFirst");
			}
			if (col === iHeaderCount - 1) {
				rm.addClass("sapUiTblColLast");
			}
			rm.writeClasses();
			rm.write("><div class=\"sapUiTblCnt\" ");
			if (oControl.getRowHeight()) {
				rm.addStyle("height", oControl.getRowHeight());
			}
			if (aHeaders[col]) {
				var sHAlign = sap.ui.table.DataTableRenderer.getHAlign(aHeaders[col].getHAlign(), oControl.bRTL);
				if (sHAlign) {
					rm.addStyle("text-align", sHAlign);
				}
			}
			rm.writeStyles();
			rm.write(">");
			if (col === 0 && bHierarchical) {
				var sTreeIconClass = "sapUiTblTreeIconLeaf";
				rm.write("<div class=\"sapUiTblTreeIcon " + sTreeIconClass + "\" tabindex=\"0\" style=\"margin-left:" + iMarginPx + "px;\"></div>");
			}
			var oTemplate = aHeaders[col] && aHeaders[col].getTemplate();
			if (oTemplate) {
				oTemplate = oTemplate.clone("_row_" + row + "_col_" + col);
				if (oTemplate.setEditable) {
					oTemplate.setEditable(oControl.getEditable());
				}
				if (aContexts[row]) {
					oTemplate.setBindingContext(aContexts[row]);
				}
				oControl._addControl(oTemplate, true);
				rm.renderControl(oTemplate);
				oControl._aRows[row][col] = oTemplate;
			}
			rm.write("</div></td>");
		}

		rm.write("</tr>");
	}
	rm.write("</tbody>");

	rm.write("</table>");

	// vertical scrollbar:
	if (bHasHeaders) {
		rm.write("<div class=\"sapUiTblVSb\">");
		rm.write("<div id=\"" + oControl.getId() + "-vsbcont\">");
		rm.write("<div id=\"" + oControl.getId() + "-vsb\">");
		rm.write("<img id=\"" + oControl.getId() + "-vsbimg\" src=\"");
		rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
		rm.write("\"></img>");
		rm.write("</div>");
		rm.write("</div>");
		rm.write("</div>");
	}
	
	rm.write("</div>");
	rm.write("</div>");


};


sap.ui.table.DataTableRenderer.renderFooter = function(rm, oControl) {

	var iExpandedVisibleRowCount = oControl.getExpandedVisibleRowCount();
	if (iExpandedVisibleRowCount && iExpandedVisibleRowCount > oControl.getVisibleRowCount()) {
		rm.write("<div class=\"sapUiTblFtr\">&nbsp;");
		var sText = oControl.getExpanded() ? oControl.oResBundle.getText("TBL_SHOW_LESS") : oControl.oResBundle.getText("TBL_SHOW_MORE");
		var sClass = oControl.getExpanded() ? "sapUiTblExpLess" : "sapUiTblExpMore";
		rm.write("<a id=\"" + oControl.getId() + "_expand\" class=\"sapUiTblExp\" href=\"javascript:void(0);\">");
		rm.write("<span class=\"" + sClass + "\"></span>");
		rm.write("<span class=\"sapUiTblExpText\">" + sText + "</span></a>");
		rm.write("</div>");
	}

};



// =============================================================================
// HELPER FUNCTIONALITY
// =============================================================================

/**
 * Returns the value for the HTML "align" attribute according to the given
 * horizontal alignment and RTL mode, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign
 * @param {boolean} bRTL
 * @type string
 */
sap.ui.table.DataTableRenderer.getHAlign = function(oHAlign, bRTL) {
  switch (oHAlign) {
	case sap.ui.commons.layout.HAlign.Center:
	  return "center";
	case sap.ui.commons.layout.HAlign.End:
	case sap.ui.commons.layout.HAlign.Right:
	  return bRTL ? "left" : "right";
  }
  // case sap.ui.commons.layout.HAlign.Left:
  // case sap.ui.commons.layout.HAlign.Begin:
  return bRTL ? "right" : "left";
};

}; // end of sap.ui.table.DataTableRenderer
if ( !jQuery.sap.isDeclared('sap.ui.table.DataTable') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.table.DataTable.
jQuery.sap.declare("sap.ui.table.DataTable");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new DataTable.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>visibleRowCount : int</li>
 * <li>expandedVisibleRowCount : int</li>
 * <li>firstVisibleRow : int</li>
 * <li>selectionMode : sap.ui.table.SelectionMode</li>
 * <li>editable : boolean</li>
 * <li>expanded : boolean</li>
 * <li>threshold : int</li>
 * <li>selectedIndex : int</li>
 * <li>rowHeight : sap.ui.core.CSSSize</li>
 * <li>allowColumnReordering : boolean</li>
 * <li>hierarchical : boolean</li>
 * <li>expandFirstLevel : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>columns : sap.ui.table.Column</li>
 * <li>toolbar : sap.ui.commons.Toolbar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>rowSelect : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>columnSelect : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleOpenState : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The DataTable control provides a set of sophisticated and comfort functions for table design. For example, you can make settings for the number of visible rows and a number for the displayed rows in the case the user expands the table. The first visible row can be explicitly set. For the selection of columns and rows, a Multi, a Single, a None, and an All mode are available. Setting the Editable property to true lets the user make changes on the table cell entries.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.table.DataTable = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.table.DataTable.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.table.DataTable. 
 * Resulting metadata can be obtained via sap.ui.table.DataTable.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.table.DataTable", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getWidth", "setWidth", "getVisibleRowCount", "setVisibleRowCount", "getExpandedVisibleRowCount", "setExpandedVisibleRowCount", "getFirstVisibleRow", "setFirstVisibleRow", "getSelectionMode", "setSelectionMode", "getEditable", "setEditable", "getExpanded", "setExpanded", "getThreshold", "setThreshold", "getSelectedIndex", "setSelectedIndex", "getRowHeight", "setRowHeight", "getAllowColumnReordering", "setAllowColumnReordering", "getHierarchical", "setHierarchical", "getExpandFirstLevel", "setExpandFirstLevel", 
    // aggregations
    "getColumns", "insertColumn", "addColumn", "removeColumn", "removeAllColumns", "indexOfColumn", "destroyColumns", "getToolbar", "setToolbar", "destroyToolbar", 
    // associations
    
    // events
    "attachRowSelect", "detachRowSelect", "attachColumnSelect", "detachColumnSelect", "attachToggleOpenState", "detachToggleOpenState", 
    // methods
    "bindRows", "unbindRows", "addSelectedIndex", "removeSelectedIndex", "getSelectedIndices", "setSelectedIndices", "addSelectedIndices", "isIndexSelected", "clearSelection", "selectAll", "getContextByIndex"
  ],

  // ---- control specific ----
  library : "sap.ui.table",
  properties : {
    "title" : {name : "title", type : "string", group : "", defaultValue : null},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "", defaultValue : 'auto'},
    "visibleRowCount" : {name : "visibleRowCount", type : "int", group : "", defaultValue : 10},
    "expandedVisibleRowCount" : {name : "expandedVisibleRowCount", type : "int", group : "", defaultValue : null},
    "firstVisibleRow" : {name : "firstVisibleRow", type : "int", group : "", defaultValue : 0},
    "selectionMode" : {name : "selectionMode", type : "sap.ui.table.SelectionMode", group : "", defaultValue : sap.ui.table.SelectionMode.Multi},
    "editable" : {name : "editable", type : "boolean", group : "", defaultValue : false},
    "expanded" : {name : "expanded", type : "boolean", group : "", defaultValue : false},
    "threshold" : {name : "threshold", type : "int", group : "", defaultValue : 100},
    "selectedIndex" : {name : "selectedIndex", type : "int", group : "", defaultValue : -1},
    "rowHeight" : {name : "rowHeight", type : "sap.ui.core.CSSSize", group : "", defaultValue : ''},
    "allowColumnReordering" : {name : "allowColumnReordering", type : "boolean", group : "", defaultValue : true},
    "hierarchical" : {name : "hierarchical", type : "boolean", group : "", defaultValue : false},
    "expandFirstLevel" : {name : "expandFirstLevel", type : "boolean", group : "", defaultValue : false}
  },
  defaultAggregation : "columns",
  aggregations : {
    "columns" : {name : "columns", type : "sap.ui.table.Column", multiple : true, singularName : "column"}, 
    "toolbar" : {name : "toolbar", type : "sap.ui.commons.Toolbar", multiple : false}
  },
  associations : {},
  events : {
    "rowSelect" : "rowSelect", 
    "columnSelect" : "columnSelect", 
    "toggleOpenState" : "toggleOpenState"
  }

});	

sap.ui.table.DataTable.M_EVENTS = {'rowSelect':'rowSelect','columnSelect':'columnSelect','toggleOpenState':'toggleOpenState'};


/**
 * Getter for property <code>title</code>.
 * Title of the Table (if not set/empty) the title will be hidden)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Width of the Table
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>visibleRowCount</code>.
 * Count of visible rows
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>visibleRowCount</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getVisibleRowCount = function() {
	return this.getProperty("visibleRowCount");
};

/**
 * Setter for property <code>visibleRowCount</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iVisibleRowCount  new value for property <code>visibleRowCount</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setVisibleRowCount = function(iVisibleRowCount) {
	this.setProperty("visibleRowCount", iVisibleRowCount);
	return this;
};


/**
 * Getter for property <code>expandedVisibleRowCount</code>.
 * Count of visible rows when expanded
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>expandedVisibleRowCount</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getExpandedVisibleRowCount = function() {
	return this.getProperty("expandedVisibleRowCount");
};

/**
 * Setter for property <code>expandedVisibleRowCount</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iExpandedVisibleRowCount  new value for property <code>expandedVisibleRowCount</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setExpandedVisibleRowCount = function(iExpandedVisibleRowCount) {
	this.setProperty("expandedVisibleRowCount", iExpandedVisibleRowCount);
	return this;
};


/**
 * Getter for property <code>firstVisibleRow</code>.
 * First visible row
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>firstVisibleRow</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getFirstVisibleRow = function() {
	return this.getProperty("firstVisibleRow");
};

/**
 * Setter for property <code>firstVisibleRow</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstVisibleRow  new value for property <code>firstVisibleRow</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setFirstVisibleRow = function(iFirstVisibleRow) {
	this.setProperty("firstVisibleRow", iFirstVisibleRow);
	return this;
};


/**
 * Getter for property <code>selectionMode</code>.
 * Selection mode of the Table
 *
 * Default value is <code>Multi</code>
 *
 * @return {sap.ui.table.SelectionMode} the value of property <code>selectionMode</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getSelectionMode = function() {
	return this.getProperty("selectionMode");
};

/**
 * Setter for property <code>selectionMode</code>.
 *
 * Default value is <code>Multi</code> 
 *
 * @param {sap.ui.table.SelectionMode} oSelectionMode  new value for property <code>selectionMode</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setSelectionMode = function(oSelectionMode) {
	this.setProperty("selectionMode", oSelectionMode);
	return this;
};


/**
 * Getter for property <code>editable</code>.
 * Flag whether the controls of the Table are editable or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getEditable = function() {
	return this.getProperty("editable");
};

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setEditable = function(bEditable) {
	this.setProperty("editable", bEditable);
	return this;
};


/**
 * Getter for property <code>expanded</code>.
 * Flag whether the Table is expanded or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getExpanded = function() {
	return this.getProperty("expanded");
};

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setExpanded = function(bExpanded) {
	this.setProperty("expanded", bExpanded);
	return this;
};


/**
 * Getter for property <code>threshold</code>.
 * Threshold to fetch the next chunk of data. The minimal threshold can be the visible row count of the DataTable. (**experimental**!!)
 *
 * Default value is <code>100</code>
 *
 * @return {int} the value of property <code>threshold</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getThreshold = function() {
	return this.getProperty("threshold");
};

/**
 * Setter for property <code>threshold</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {int} iThreshold  new value for property <code>threshold</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setThreshold = function(iThreshold) {
	this.setProperty("threshold", iThreshold);
	return this;
};


/**
 * Getter for property <code>selectedIndex</code>.
 * Zero-based index of selected item. Index value for no selection is -1. When multi-selection is enabled and multiple items are selected, the method returns the first selected item. Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getSelectedIndex = function() {
	return this.getProperty("selectedIndex");
};

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setSelectedIndex = function(iSelectedIndex) {
	this.setProperty("selectedIndex", iSelectedIndex);
	return this;
};


/**
 * Getter for property <code>rowHeight</code>.
 * Row Height of the Table
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>rowHeight</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getRowHeight = function() {
	return this.getProperty("rowHeight");
};

/**
 * Setter for property <code>rowHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sRowHeight  new value for property <code>rowHeight</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setRowHeight = function(sRowHeight) {
	this.setProperty("rowHeight", sRowHeight);
	return this;
};


/**
 * Getter for property <code>allowColumnReordering</code>.
 * Flag to enable or disable column reordering
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>allowColumnReordering</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getAllowColumnReordering = function() {
	return this.getProperty("allowColumnReordering");
};

/**
 * Setter for property <code>allowColumnReordering</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAllowColumnReordering  new value for property <code>allowColumnReordering</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setAllowColumnReordering = function(bAllowColumnReordering) {
	this.setProperty("allowColumnReordering", bAllowColumnReordering);
	return this;
};


/**
 * Getter for property <code>hierarchical</code>.
 * Flag, whether the table displays its content hierarchical or not (**experimental**!!)
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hierarchical</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getHierarchical = function() {
	return this.getProperty("hierarchical");
};

/**
 * Setter for property <code>hierarchical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHierarchical  new value for property <code>hierarchical</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setHierarchical = function(bHierarchical) {
	this.setProperty("hierarchical", bHierarchical);
	return this;
};


/**
 * Getter for property <code>expandFirstLevel</code>.
 * Flag to enable or disable expanding of first level.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>expandFirstLevel</code>
 * @public
 * 
 */
sap.ui.table.DataTable.prototype.getExpandFirstLevel = function() {
	return this.getProperty("expandFirstLevel");
};

/**
 * Setter for property <code>expandFirstLevel</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExpandFirstLevel  new value for property <code>expandFirstLevel</code>
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setExpandFirstLevel = function(bExpandFirstLevel) {
	this.setProperty("expandFirstLevel", bExpandFirstLevel);
	return this;
};

	
/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns of the Table
 * 
 * @return {sap.ui.table.Column[]}
 * @public
 */
sap.ui.table.DataTable.prototype.getColumns = function() {
	return this.getAggregation("columns", []);
};


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.ui.table.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.insertColumn = function(oColumn, iIndex) {
	this.insertAggregation("columns", oColumn, iIndex);
	return this;
};

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.ui.table.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.table.DataTable.prototype.addColumn = function(oColumn) {
	this.addAggregation("columns", oColumn);
	return this;
};

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.ui.table.Column} vColumn the column to remove or its index or id
 * @return {sap.ui.table.Column} the removed column or null
 * @public
 */
sap.ui.table.DataTable.prototype.removeColumn = function(vColumn) {
	return this.removeAggregation("columns", vColumn);
};

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.table.Column[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.table.DataTable.prototype.removeAllColumns = function() {
	return this.removeAllAggregation("columns");
};

/**
 * Checks for the provided <code>sap.ui.table.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.table.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.table.DataTable.prototype.indexOfColumn = function(oColumn) {
	return this.indexOfAggregation("columns", oColumn);
};
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.destroyColumns = function() {
	this.destroyAggregation("columns");
	return this;
};

	
/**
 * Getter for aggregation <code>toolbar</code>.<br/>
 * Toolbar of the Table (if not set it will be hidden)
 * 
 * @return {sap.ui.commons.Toolbar}
 * @public
 */
sap.ui.table.DataTable.prototype.getToolbar = function() {
	return this.getAggregation("toolbar", null);
};


/**
 * Setter for the aggregated <code>toolbar</code>.
 * @param oToolbar {sap.ui.commons.Toolbar}
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.setToolbar = function(oToolbar) {
	this.setAggregation("toolbar", oToolbar);
	return this;
};
	

/**
 * Destroys the toolbar in the aggregation 
 * named <code>toolbar</code>.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.destroyToolbar = function() {
	this.destroyAggregation("toolbar");
	return this;
};


/**
 * fired when a row of the table has been selected (in case of multi selection the lead selection will be returned!) 
 *
 * @name sap.ui.table.DataTable#rowSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.rowIndex index of the selected row
 * @param {object} oControlEvent.getParameters.rowContext binding context of the selected row
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'rowSelect' event of this <code>sap.ui.table.DataTable</code>.<br/>
 * fired when a row of the table has been selected (in case of multi selection the lead selection will be returned!) 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.attachRowSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("rowSelect", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'rowSelect' event of this <code>sap.ui.table.DataTable</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.detachRowSelect = function(fnFunction, oListener) {
	this.detachEvent("rowSelect", fnFunction, oListener);
	return this;	
};

/**
 * Fire event rowSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'rowIndex' of type <code>int</code> index of the selected row</li>
 * <li>'rowContext' of type <code>object</code> binding context of the selected row</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.table.DataTable.prototype.fireRowSelect = function(mArguments) {
	this.fireEvent("rowSelect", mArguments);
	return this;
};


/**
 * fired when a column of the table has been selected 
 *
 * @name sap.ui.table.DataTable#columnSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.table.Column} oControlEvent.getParameters.column reference to the clicked column
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'columnSelect' event of this <code>sap.ui.table.DataTable</code>.<br/>
 * fired when a column of the table has been selected 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.attachColumnSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("columnSelect", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'columnSelect' event of this <code>sap.ui.table.DataTable</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.detachColumnSelect = function(fnFunction, oListener) {
	this.detachEvent("columnSelect", fnFunction, oListener);
	return this;	
};

/**
 * Fire event columnSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'column' of type <code>sap.ui.table.Column</code> reference to the clicked column</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.table.DataTable.prototype.fireColumnSelect = function(mArguments) {
	this.fireEvent("columnSelect", mArguments);
	return this;
};


/**
 * fired when a node has been expanded or collapsed (only available in hierachical mode) 
 *
 * @name sap.ui.table.DataTable#toggleOpenState
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.rowIndex index of the selected row
 * @param {object} oControlEvent.getParameters.rowContext binding context of the selected row
 * @param {boolean} oControlEvent.getParameters.expanded flag whether the node has been expanded or collapsed
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleOpenState' event of this <code>sap.ui.table.DataTable</code>.<br/>
 * fired when a node has been expanded or collapsed (only available in hierachical mode) 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.attachToggleOpenState = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleOpenState", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleOpenState' event of this <code>sap.ui.table.DataTable</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.table.DataTable.prototype.detachToggleOpenState = function(fnFunction, oListener) {
	this.detachEvent("toggleOpenState", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleOpenState to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'rowIndex' of type <code>int</code> index of the selected row</li>
 * <li>'rowContext' of type <code>object</code> binding context of the selected row</li>
 * <li>'expanded' of type <code>boolean</code> flag whether the node has been expanded or collapsed</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.table.DataTable} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.table.DataTable.prototype.fireToggleOpenState = function(mArguments) {
	this.fireEvent("toggleOpenState", mArguments);
	return this;
};


/**
 * Binds the rows of the DataTable against the given binding path.
 *
 * @name sap.ui.table.DataTable.prototype.bindRows
 * @function
 * @param {string} 
 *         sPath
 *         Binding path for the rows of the DataTable.
 * @param {object} 
 *         sSorter
 *         Initial sorting property (defined by sap.ui.model/Sorter).
 * @param {object[]} 
 *         aFilters
 *         Predefined filter for the DataTable (defined by sap.ui.model/Filter).

 * @type void
 * @public
 */


/**
 * Unbinds the rows of the DataTable.
 *
 * @name sap.ui.table.DataTable.prototype.unbindRows
 * @function

 * @type void
 * @public
 */


/**
 * Adds the given index to current selection. When multi-selection is disabled, this replaces the current selection. When the given index is invalid, the call is ignored.
 *
 * @name sap.ui.table.DataTable.prototype.addSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index to add to selection.

 * @type void
 * @public
 */


/**
 * Removes the given index from this selection. When the index is invalid or not selected, the call is ignored.
 *
 * @name sap.ui.table.DataTable.prototype.removeSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index that shall be removed from selection.

 * @type void
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 *
 * @name sap.ui.table.DataTable.prototype.getSelectedIndices
 * @function

 * @type int[]
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 * When multi-selection is disabled and multiple items are given, the selection is set to the index of the first valid index in the given array.
 * Any invalid indices are ignored.
 *
 * @name sap.ui.table.DataTable.prototype.setSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items to be selected.

 * @type void
 * @public
 */


/**
 * Adds the given indices to selection. Any invalid indices are ignored.
 *
 * @name sap.ui.table.DataTable.prototype.addSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items that shall additionally be selected.

 * @type void
 * @public
 */


/**
 * Returns whether the given index is selected.
 *
 * @name sap.ui.table.DataTable.prototype.isIndexSelected
 * @function
 * @param {int} 
 *         iIndex
 *         Index which is checked for selection state.

 * @type boolean
 * @public
 */


/**
 * Removes complete selection.
 *
 * @name sap.ui.table.DataTable.prototype.clearSelection
 * @function

 * @type void
 * @public
 */


/**
 * Add all rows to the selection.
 *
 * @name sap.ui.table.DataTable.prototype.selectAll
 * @function

 * @type void
 * @public
 */


/**
 * Returns the context of a row by its index.
 *
 * @name sap.ui.table.DataTable.prototype.getContextByIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index of the row to return the context from.

 * @type object
 * @public
 */


// Start of sap/ui/table/DataTable.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained



/**
 * Initialization of the DataTable control
 * @private
 */
sap.ui.table.DataTable.prototype.init = function() {

	this.oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.table");
	this.bIsACC = sap.ui.getCore().getConfiguration().getAccessibility();
	this.bRTL = sap.ui.getCore().getConfiguration().getRTL();

	this.aSelectedIndices = []; // selected contexts

	this.iRowHeight = 0; // renderer sets the row height
	this.iBindingTimeout = 50;
	
	this._bNeedsUpdateBindings = false; // flag for updating the bindings in the onAfterRendering phase

	this.oPopup = new sap.ui.core.Popup(this.getId() + "-vsb-tt");
	this.oPopup.setContent(new sap.ui.commons.Label()).setDurations(250, 1000).setAutoClose(true);
	this.oPopup.getContent().addStyleClass("sapUiTblVSbTooltip");

	this.attachBrowserEvent(jQuery.browser.mozilla ? "DOMMouseScroll" : "mousewheel", jQuery.proxy(this.onmousewheel, this));

};


/**
 * Termination of the DataTable control
 * @private
 */
sap.ui.table.DataTable.prototype.exit = function() {

	// cleanup of the toolbar popup
	this.oPopup.destroy();

	// timer cleanup (hint of F.W.)
	if (this._sBindingTimer) {
		jQuery.sap.clearDelayedCall(this._sBindingTimer);
	}
	if (this._sTooltipTimer) {
		jQuery.sap.clearDelayedCall(this._sTooltipTimer);
	}
	if (this._sDragStartTimer) {
		jQuery.sap.clearDelayedCall(this._sDragStartTimer);
	}

	// cleanup the resize handler
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

};


sap.ui.table.DataTable.prototype.onThemeChanged = function() {
	this._renderVSb();
};


sap.ui.table.DataTable.prototype.onresize = function() {
	
	// added rudimentary scrolling support for DataTable 
	var $this = this.$();
	var $Scr = $this.find(".sapUiTblCtrlScr");
	if ($this.find(".sapUiTblCtrl").width() > $Scr.width()) {
		$Scr.css("overflow-x", "scroll");
		$this.find(".sapUiTblVSb").css("bottom", "16px");
	} else {
		$Scr.css("overflow-x", "hidden");
		$this.find(".sapUiTblVSb").css("bottom", "0");
	}
	
};


// *****************************************************************************
// > API FUNCTIONALITY
// *****************************************************************************

/**
 * returns the current visible row count of the Table. Once the table is expanded
 * it returns the expanded row count otherwise it returns the default row count.
 * @returns {int} current visible row count
 * @public
 */
sap.ui.table.DataTable.prototype.getCurrentVisibleRowCount = function() {
	if (this.getExpanded()) {
		return Math.max(this.getVisibleRowCount(), this.getExpandedVisibleRowCount());
	} else {
		return this.getVisibleRowCount();
	}
};

sap.ui.table.DataTable.prototype.getContextByIndex = function(index) {
	// TODO: ODataListBinding needs to make sure to prevent loading multiple times
	return this.isBound() ? this.getBinding().getContexts(index, 1)[0] : undefined;
};


sap.ui.table.DataTable.prototype.setFirstVisibleRow = function(iFirstVisibleRow) {

	// check the bounds if table has a model
	if (this.isBound()) {
		iFirstVisibleRow = Math.max(iFirstVisibleRow, 0);
		iFirstVisibleRow = Math.min(iFirstVisibleRow, this.getBinding().getLength() - this.getCurrentVisibleRowCount());
	}

	// only do something if the first visible row has been changed!
	if (iFirstVisibleRow === this.getFirstVisibleRow()) {
		return;
	}
	this.setProperty("firstVisibleRow", iFirstVisibleRow, true); // no re-rendering!

	// if the table is rendered update the bindings
	if (this.bOutput) {
	
		// update the scrollbar
		this._renderVSb();
		
		// render the tooltip
		this._renderVSbToolTip();
	
		// delete the existing timer
		if (this._sBindingTimer) {
			jQuery.sap.clearDelayedCall(this._sBindingTimer); 
		}
	
		// use a delayed binding to update the bindings of the table
		this._sBindingTimer = jQuery.sap.delayedCall(this.iBindingTimeout, this, "_updateBindings");
		
	}

};

// *****************************************************************************
// > RENDERING FUNCTIONALITY
// *****************************************************************************

/**
 * Rerendering handling
 * @private
 */
sap.ui.table.DataTable.prototype.onBeforeRendering = function() {

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	var $this = this.$();
	$this.find("table > tbody > tr").unbind();
	$this.find("table > tbody > tr > td:first-child").unbind();
	$this.find("table > thead > tr > th").unbind();
	$this.find(".sapUiTblExp").unbind();
	if (this.isTreeBinding) {
		$this.find(".sapUiTblTreeIcon").unbind();
	}

};


/**
 * Rerendering handling
 * @private
 */
sap.ui.table.DataTable.prototype.onAfterRendering = function(oEvent) {

	// row hover effects and selection
	var $this = this.$();
	var oRows = $this.find("table > tbody > tr");
	oRows.hover(jQuery.proxy(this._onRowHover, this));
	oRows.mousemove(jQuery.proxy(this._onRowOver, this));
	if (this.getSelectionMode() != sap.ui.table.SelectionMode.None) {
		var oRowSelectors = undefined;
		if (this.getEditable()) {
			oRowSelectors = $this.find("table > tbody > tr > td:first-child");
		} else {
			oRowSelectors = $this.find("table > tbody > tr");
		}
		oRowSelectors.click(jQuery.proxy(this._onRowSelect, this));
	}

	// column hover effects and selection
	var oTHs = $this.find("table > thead > tr > th");
	oTHs.hover(jQuery.proxy(this._onColumnHover, this));
	oTHs.mousemove(jQuery.proxy(this._onColumnOver, this));
	oTHs.click(jQuery.proxy(this._onColumnSelect, this));

	// expand / collapse
	$this.find(".sapUiTblExp").click(jQuery.proxy(function(oEvent) {
		this.setExpanded(!this.getExpanded());
	}, this));
	
	// select all handler
	$this.find(".sapUiTblColSelAll").click(jQuery.proxy(function(oEvent) {
		if (this.isBound()) {
			if (this.getBinding().getLength() === this.aSelectedIndices.length) {
				this.clearSelection();
				this.fireRowSelect({rowIndex: -1});
			} else {
				this.selectAll();
				this.fireRowSelect({rowIndex: 0, rowContext: this.getContextByIndex(0)});
			}
		}
	}, this));

	// column drag and drop (delayed start to avoid start when simply clicking)
	oTHs.mousedown(jQuery.proxy(function(oEvent) {
		this._bDragAndDrop = false;
		if (!this._sDragStartTimer) {
			this._sDragStartTimer = jQuery.sap.delayedCall(150, this, "_onColumnDragStart", [oEvent]);
		}
	}, this));
	oTHs.mouseup(jQuery.proxy(function(oEvent) {
		if (this._sDragStartTimer) {
			jQuery.sap.clearDelayedCall(this._sDragStartTimer);
		}
		this._sDragStartTimer = null;
	}, this));

	// tree expanding and collapsing
	if (this.isTreeBinding()) {
		$this.find(".sapUiTblTreeIcon").click(jQuery.proxy(this._onNodeClick, this));
	}
	
	// restore the column icons
	var aCols = this.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		aCols[i]._restoreIcons();
	}

	// scrollbar
	this._renderVSb();
	
	// listen to resize events of the browser (or surrounding DOM elements)
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
	this.onresize();
	
	// update the bindings (with a delay - otherwise the invalidation does not 
	// work of the controls which binding context has been changed)
	if (this._bNeedsUpdateBindings) {

		// delete the existing timer
		if (this._sBindingTimer) {
			jQuery.sap.clearDelayedCall(this._sBindingTimer); 
			this._sBindingTimer = null;
		}
	
		// use a delayed binding to update the bindings of the table
		if ( !this._sBindingTimer ) {
			this._bNeedsUpdateBindings = false;
			this._sBindingTimer = jQuery.sap.delayedCall(0, this, "_updateBindings");
		}
	
	}

};

sap.ui.table.DataTable.prototype._onRowHover = function(oEvent) {
	var oRows = this.$().find("table > tbody > tr");
	oRows.removeClass("sapUiTblRowHvr");
};

sap.ui.table.DataTable.prototype._onRowOver = function(oEvent) {
	var $parent = jQuery(oEvent.target).parents("tr");
	if ($parent.length == 0) {
		$parent = jQuery(oEvent.target);
	}
	$parent.addClass("sapUiTblRowHvr");
};

sap.ui.table.DataTable.prototype._onRowSelect = function(oEvent) {
	// TODO: cleanup dirty row selection
	if (!this.isBound()) return;
	var bSingleSelection = this.getSelectionMode() == sap.ui.table.SelectionMode.Single;
	var bShift = !bSingleSelection && oEvent.shiftKey;
	var $parent = jQuery(oEvent.target).parents("tr");
	if ($parent.length > 0) {
		var iRow = parseInt($parent[0].id.substring((this.getId() + "-row").length), 10); 
		var iRowIndex = this.getFirstVisibleRow() + iRow;
		if (iRowIndex < this.getBinding().getLength()) {
			if (!bShift) {
				// standard selection behavior
				if (this.isIndexSelected(iRowIndex) && !!oEvent.metaKey) {
					this.removeSelectedIndex(iRowIndex, true);
					this._visualizeSelection(iRow, false);
					this.fireRowSelect({rowIndex: -1});
				} else {
					if (bSingleSelection || !oEvent.metaKey) {
						for (var i = 0, l = this.getCurrentVisibleRowCount(); i < l; i++) {
							this._visualizeSelection(i, false);
						}
						this.setSelectedIndex(iRowIndex, true);
					} else {
						this.addSelectedIndex(iRowIndex, true);
					}
					if (this.isIndexSelected(iRowIndex)) {
						this._visualizeSelection(iRow, true);
					}
					this.fireRowSelect({rowIndex: iRowIndex, rowContext: this.getContextByIndex(iRowIndex)});
				}
			} else {
				if (!bSingleSelection) {
					// append selection behavior
					var iSelRowIndex = this.getSelectedIndex();
					this.clearSelection(true);
					var aSelIndices = [];
					if (iSelRowIndex < iRowIndex) {
						for (var i = iSelRowIndex; i <= iRowIndex; i++) {
							aSelIndices.push(i);
						}
					} else {
						for (var i = iSelRowIndex; i >= iRowIndex; i--) {
							aSelIndices.push(i);
						}
					}
					this.addSelectedIndices(aSelIndices, true);
					this._updateBindings();
					this.fireRowSelect({rowIndex: iRowIndex, rowContext: this.getContextByIndex(iRowIndex)});
				}
			}
		}
		// FIREFOX HACK TO PREVENT TEXT SELECTION (no select or selectall event)
		this._clearTextSelection();
	}
};

sap.ui.table.DataTable.prototype._onColumnHover = function(oEvent) {
	var oTHs = this.$().find("table > thead > tr > th");
	oTHs.removeClass("sapUiTblColHvr");
};

sap.ui.table.DataTable.prototype._onColumnOver = function(oEvent) {
	var $parent = jQuery(oEvent.target).parents("th");
	if ($parent.length == 0) {
		$parent = jQuery(oEvent.target);
	}
	$parent.addClass("sapUiTblColHvr");
};

sap.ui.table.DataTable.prototype._onColumnSelect = function(oEvent) {
	if (this._bDragAndDrop) {
		return;
	}

	var oDomTableCell = jQuery(oEvent.target).closest("th").get(0);

	var oColumn;
	jQuery.each(this.getColumns(), function(sKey, oValue) {
		if (oValue.getId() === oDomTableCell.id) {
			oColumn = oValue;
			return true;
		}
	});
	if (oColumn) {
		var oParams = {column: oColumn, bCancel: false};
		this.fireColumnSelect(oParams);
		if (!oParams.bCancel) {
			oColumn._openMenu();
		}
	}

};

sap.ui.table.DataTable.prototype._onSelectStart = function(oEvent) {
	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
}
;
sap.ui.table.DataTable.prototype._onColumnDragStart = function(oEvent) {

	this._bDragAndDrop = true;

	this._sSourceColumnId = jQuery(oEvent.target).closest("th").get(0).id;
	//jQuery.sap.log.info("_onColumnDragStart: " + this._sSourceColumnId);

	// check for resize
	var oColumn = sap.ui.getCore().byId(this._sSourceColumnId);
	var $Column = oColumn.$();
	var iOffsetRight = $Column.offset().left + $Column.width();
	var bIsResize = jQuery("#" + this.getId() + "_resize_" + this._sSourceColumnId).rectContains(oEvent.pageX, oEvent.pageY);

	// only continue if column is resizable or column reordering is allowed
	// in case of column reordering is allowed we need to check for the 
	// hierarchical mode because there we do not allow the reordering of the
	// first column!
	if (bIsResize && oColumn.getResizable() || 
		!bIsResize && this.getAllowColumnReordering() && 
			(!this.isTreeBinding() || jQuery.inArray(oColumn, this.getColumns()) > 0)) {
	
		// FIREFOX HACK TO PREVENT TEXT SELECTION (no select or selectall event)
		this._clearTextSelection();
	
	 	// prevent text selection in the browser
		jQuery(document.body).bind("selectstart", this._onSelectStart);

		// listen to mouse move and up event
		jQuery(document.body).mousemove(jQuery.proxy(!bIsResize ? this._onColumnDrag : this._onColumnResize, this));
		jQuery(document.body).mouseup(jQuery.proxy(!bIsResize ? this._onColumnDrop : this._onColumnResized, this));
		
	}

};

sap.ui.table.DataTable.prototype._onColumnDrag = function(oEvent) {

	// FIREFOX HACK TO PREVENT TEXT SELECTION (no select or selectall event)
	this._clearTextSelection();

	// prevent the reordering of the select all cell (when visible)
	var oTHs = this.$().find("table > thead > tr > th:not(.sapUiTblColSelCell)");
	// in case of hierarchical mode we prevent the reordering of the first column:
	if (this.isTreeBinding()) {
		oTHs = oTHs.filter(function(i) {
			return i > 0;
		});
	}

	oTHs.css("borderColor", "");
	var that = this;
	jQuery.each(oTHs, function(sKey, oValue) {

		var $Value = jQuery(oValue);
		if (oEvent.pageX >= $Value.offset().left &&
			oEvent.pageX <= $Value.offset().left + $Value.width()) {

			var bBefore = oEvent.pageX <= $Value.offset().left + $Value.outerWidth() / 2;

			var eDock = bBefore ? sap.ui.core.Popup.Dock.BeginTop : sap.ui.core.Popup.Dock.EndTop;
			var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
			that.oMarkerPopup = that.oMarkerPopup ||
				new sap.ui.core.Popup(that.getId() + "-dnd", false, false, true).
					setContent(new sap.ui.commons.Image({src: sap.ui.resource("sap.ui.table", "themes/" + sCurrentTheme + "/img/ico12_help_options.gif")})).
					setDurations(250, 1000);
			that.oMarkerPopup.setPosition(eDock, eDock, oValue, bBefore ? "-7 -9" : "5 -9");
			if (!that.oMarkerPopup.isOpen()) {
				that.oMarkerPopup.open();
			}

		}

	});

};

sap.ui.table.DataTable.prototype._onColumnDrop = function(oEvent) {

	//jQuery.sap.log.info("_onColumnDrop");

	// prevent the reordering of the select all cell (when visible)
	var oTHs = this.$().find("table > thead > tr > th:not(.sapUiTblColSelCell)");
	// in case of hierarchical mode we prevent the reordering of the first column:
	if (this.isTreeBinding()) {
		oTHs = oTHs.filter(function(i) {
			return i > 0;
		});
	}
	
	oTHs.css("borderColor", "");
	var that = this;
	jQuery.each(oTHs, function(sKey, oValue) {

		var $Value = jQuery(oValue);
		if (oEvent.pageX >= $Value.offset().left &&
			oEvent.pageX <= $Value.offset().left + $Value.width()) {

			var bBefore = oEvent.pageX <= $Value.offset().left + $Value.width() / 2;

			var oSourceColumn = that.getColumnById(that._sSourceColumnId);
			var oTargetColumn = that.getColumnById(oValue.id);

			if (oSourceColumn != oTargetColumn) {
				that.removeColumn(oSourceColumn);
				that.insertColumn(oSourceColumn, that.indexOfColumn(oTargetColumn) + (bBefore ? 0 : 1));
			}

		}

	});

	if (this.oMarkerPopup && this.oMarkerPopup.isOpen()) {
		this.oMarkerPopup.close();
	}

	jQuery(document.body).unbind("selectstart", this._onSelectStart);
	jQuery(document.body).unbind("mousemove", this._onColumnDrag);
	jQuery(document.body).unbind("mouseup", this._onColumnDrop);

	this._sSourceColumnId = "";

};

sap.ui.table.DataTable.prototype._onColumnResize = function(oEvent) {

	// FIREFOX HACK TO PREVENT TEXT SELECTION (no select or selectall event)
	this._clearTextSelection();

	var $Column = jQuery.sap.byId(this._sSourceColumnId);
	var iNewWidth = Math.max(1, oEvent.pageX - $Column.offset().left);

	$Column.css("width", iNewWidth + "px");
	this.getColumnById(this._sSourceColumnId).setProperty("width", iNewWidth + "px", true);

};

sap.ui.table.DataTable.prototype._onColumnResized = function(oEvent) {

	jQuery(document.body).unbind("selectstart", this._onSelectStart);
	jQuery(document.body).unbind("mousemove", this._onColumnResize);
	jQuery(document.body).unbind("mouseup", this._onColumnResized);

	this._sSourceColumnId = "";

};

sap.ui.table.DataTable.prototype._onNodeClick = function(oEvent) {

	var $parent = jQuery(oEvent.target).parents("tr");
	if ($parent.length > 0) {
		var iRowIndex = this.getFirstVisibleRow() + parseInt($parent[0].id.substring((this.getId() + "-row").length), 10);
		var oContext = this.getContextByIndex(iRowIndex);
		this.fireToggleOpenState({
			rowIndex: iRowIndex,
			rowContext: oContext,
			expanded: !this.getBinding().isExpanded(oContext)
		});
		this.getBinding().toggleContext(oContext);
	}
	
	oEvent.preventDefault();
	oEvent.stopPropagation();
	
};


sap.ui.table.DataTable.prototype._clearTextSelection = function() {
	// FIREFOX HACK TO PREVENT TEXT SELECTION (no select or selectall event)
	if (window.getSelection && window.getSelection().removeAllRanges) {
		try {
			// try catch required due to error:
			//   Could not complete the operation due to error 800a025e.
			window.getSelection().removeAllRanges();
		} catch (ex) {}
	}
};


// *****************************************************************************
// > SCROLLING FUNCTIONALITY
// *****************************************************************************

/**
 * handles the event "mousewheel" on the Table control and finally forwards this
 * event to the virtual scrollbar
 * @param {event} oEvent event object
 * @private
 */
sap.ui.table.DataTable.prototype.onmousewheel = function(oEvent) {

	if (this._$VSb) {

		// set the focus to the scrollbar
		this._$VSb.focus();

		// determine the current position of the scroll bar
		var currentScrollTop = this._$VSb.scrollTop();

		// find out if the user is scrolling up or down
		var bDown = (oEvent.detail && oEvent.detail > 0) || (oEvent.wheelDelta && oEvent.wheelDelta < 0);

		// Set the new scrollTop according to the mouse wheel event
		var newScrollTop = currentScrollTop + this.iRowHeight * (bDown ? 1 : -1);

		// scroll to the new position (next record)
		this._$VSb.scrollTop(newScrollTop);

		// prevent the default behavior
		oEvent.preventDefault();
		oEvent.stopPropagation();
		return false;

	}

};


/**
 * handles the "scroll" event of the virtual scrollbar and uses a delay to
 * trigger the re-binding of the corresponding UI controls.
 * @param {event} oEvent event object
 * @private
 */
sap.ui.table.DataTable.prototype.onscroll = function(oEvent) {

	// calculate the first visible row
	var iCurrentScrollTop = this._$VSb ? this._$VSb.scrollTop() : 0;
	var iFirstVisibleRow = Math.round(iCurrentScrollTop / this.iRowHeight);
	if (isNaN(iFirstVisibleRow)) {
		iFirstVisibleRow = 0;
	}
	
	// set the new first visible row
	this.setFirstVisibleRow(iFirstVisibleRow);

};


// *****************************************************************************
// > DATA BINDING FUNCTIONALITY
// *****************************************************************************

sap.ui.table.DataTable.prototype.bindAggregation = function(sName, sPath, oTemplate, oSorter, aFilters) {
	var oTmpl = sName === "rows" && !oTemplate ? {} : oTemplate;
	sap.ui.core.Element.prototype.bindAggregation.call(this, sName, sPath, oTmpl, oSorter, aFilters);
};

sap.ui.table.DataTable.prototype._bindAggregation = function(sName, sPath, oTemplate, oSorter, aFilters) {
	sap.ui.core.Element.prototype._bindAggregation.apply(this, arguments);
	var oBinding = this.getBinding();
	if (sName === "rows" && oBinding) {
		oBinding.attachSort(this._onBindingSort, this);
		oBinding.attachFilter(this._onBindingFilter, this);
	}
	return this;
};

sap.ui.table.DataTable.prototype.unbindAggregation = function(sName, sPath, oTemplate, oSorter, aFilters) {
	var oBinding = this.getBinding();
	if (sName === "rows" && oBinding) {
		oBinding.detachSort(this._onBindingSort);
		oBinding.detachFilter(this._onBindingFilter);
	}
	return sap.ui.core.Element.prototype.unbindAggregation.apply(this, arguments);
};

sap.ui.table.DataTable.prototype.bindRows = function(sPath, oSorter, aFilters) {
	return this.bindAggregation("rows", sPath, undefined, oSorter, aFilters);
};

sap.ui.table.DataTable.prototype.unbindRows = function() {
	return this.unbindAggregation("rows");
};

sap.ui.table.DataTable.prototype._addControl = function(vElement, bSuppressRerendering) {
	return this.addAggregation("rows", vElement, bSuppressRerendering);
};

sap.ui.table.DataTable.prototype._destroyControls = function(bSuppressRerendering) {
	return this.destroyAggregation("rows", bSuppressRerendering);
};

sap.ui.table.DataTable.prototype._onBindingSort = function(oEvent) {
	this.clearSelection(true);
	this.fireRowSelect({rowIndex: -1});
	this._updateBindings();
};

sap.ui.table.DataTable.prototype._onBindingFilter = function(oEvent) {
	this.clearSelection(true);
	this.fireRowSelect({rowIndex: -1});
	this._updateBindings();
};


sap.ui.table.DataTable.prototype.getBinding = function(sName) {
	var oBinding = sap.ui.core.Element.prototype.getBinding.apply(this, [sName || "rows"]);
	if (oBinding && this.isTreeBinding() && (sName || "rows") === "rows" && !oBinding.getLength) {
		// SIMULATE A LIST BINDING FOR THE TREE BINDING!
		//jQuery.sap.log.info("Enhancing Binding Object - Tree to List Binding");
		jQuery.extend(oBinding, ({
			_init: function() {
				return this;
			},
			updateData: function() {
				this.aContexts = this.getRootContexts();
				this.mContextInfo = {};
				for (var i = 0, l = this.aContexts.length; i < l; i++) {
					this.mContextInfo[this.aContexts[i]] = {
						iLevel: 0,
						bExpanded: false,
						bHasChildren: this.hasChildContexts(this.aContexts[i])
					};
				}
			},
			getLength: function() {
				return this.aContexts.length;
			},
			getContexts: function(iStartIndex, iLength) {
				var aContextsCopy = [];
				for (var i = iStartIndex, l = iStartIndex + iLength; i < l; i++) {
					aContextsCopy.push(this.aContexts[i]);
				}
				return aContextsCopy;
			},
			getLevel: function(oContext) {
				return this.mContextInfo[oContext] ? this.mContextInfo[oContext].iLevel : -1;
			},
			isExpanded: function(oContext) {
				return this.mContextInfo[oContext] ? this.mContextInfo[oContext].bExpanded : false;
			},
			hasChildren: function(oContext) {
				return this.mContextInfo[oContext] ? this.mContextInfo[oContext].bHasChildren : false;
			},
			hasChildContexts: function(oContext) {
				return this.getNodeContexts(oContext).length > 0;
			},
			expandContext: function(oContext) {
				var oContextInfo = this.mContextInfo[oContext];
				if (oContextInfo && !oContextInfo.bExpanded) {
					var iIndex = jQuery.inArray(oContext, this.aContexts);
					var aNodeContexts = this.getNodeContexts(oContext);
					for (var i = 0, l = aNodeContexts.length; i < l; i++) {
						this.aContexts.splice(iIndex + i + 1, 0, aNodeContexts[i]);
						this.mContextInfo[aNodeContexts[i]] = {
							iLevel: this.mContextInfo[oContext].iLevel + 1,
							bExpanded: false,
							bHasChildren: this.hasChildContexts(aNodeContexts[i])
						};
					}
					this.mContextInfo[oContext].bExpanded = true;
					this._fireChange();
				}
			},
			collapseContext: function(oContext) {
				var oContextInfo = this.mContextInfo[oContext];
				if (oContextInfo && oContextInfo.bExpanded) {
					for (var i = this.aContexts.length - 1; i > 0; i--) {
						if (this.aContexts[i] !== oContext &&
							this.aContexts[i].substring(0, oContext.length) === oContext) {
							this.aContexts.splice(i, 1);
						}
					}
					this.mContextInfo[oContext].bExpanded = false;
					this._fireChange();
				}
			},
			toggleContext: function(oContext) {
				if (this.mContextInfo[oContext].bExpanded) {
					this.collapseContext(oContext);
				} else {
					this.expandContext(oContext);
				}
			},
			attachSort: function() {},
			detachSort: function() {},
			attachFilter: function() {},
			detachFilter: function() {}
		}._init()));
		oBinding.updateData();
		if (this.getExpandFirstLevel() && oBinding.aContexts) {
			jQuery.each(oBinding.aContexts.slice(), function(iIndex, oContext) {
				oBinding.expandContext(oContext);
			});
		}
	}
	return oBinding;
};

sap.ui.table.DataTable.prototype.getBindingPath = function(sName) {
	return sap.ui.core.Element.prototype.getBindingPath.apply(this, [sName || "rows"]);
};

sap.ui.table.DataTable.prototype.isBound = function(sName) {
	return sap.ui.core.Element.prototype.isBound.apply(this, [sName || "rows"]);
};

/**
 * Enhance the Element's updateBindings function to also consider the
 * table binding path.
 * @private
 */
sap.ui.table.DataTable.prototype.updateRows = function() {
	this._renderVSb();
	this._updateBindings();
};

/**
 * TODO
 */
sap.ui.table.DataTable.prototype.isTreeBinding = function(sName) {
	return this.getHierarchical();
};

/**
 * updates the bindings of the Table control
 * @private
 */
sap.ui.table.DataTable.prototype._updateBindings = function() {

	if (this.isBound()) {
	
		if (this.getDomRef()) {

			//jQuery.sap.log.info("_updateBindings");
			
			var oBinding = this.getBinding();
	
			var oDate = new Date();
			var iStartIndex = this.getFirstVisibleRow();
			var iOffset = this.getCurrentVisibleRowCount();
			var iLength = oBinding.getLength();
			var bHierarchical = this.isTreeBinding();
	
			if (iStartIndex + iOffset > iLength) {
				iStartIndex = 0;
				this.setProperty("firstVisibleRow", iStartIndex, true); // no re-rendering!
			}
	
			// fetch the data for the section
			var aContexts = oBinding.getContexts(iStartIndex, iOffset, this.getThreshold());
			//jQuery.sap.log.warning("Rendering: "+ iStartIndex + " - " + iOffset);
		
			var sBaseUrl = jQuery.sap.getModulePath("sap.ui.table", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/";
			for (var row = 0; row < this._aRows.length; row++) {
				//var oContext = aContexts[row + (iStartIndex - iSectionStart)];
				var oContext = aContexts[row];
				//jQuery.sap.log.info("Row "+ row + " context: " + oContext);
				for (var col = 0; col < this._aRows[row].length; col++) {
					var oCellControl = this._aRows[row][col];
					if (oCellControl.getBindingContext() != oContext) {
						oCellControl.setBindingContext(oContext);
					}
				}
				var $row = jQuery.sap.byId(this.getId() + "-row" + row);
				if (row + iStartIndex < iLength) {
					this._visualizeSelection(row, this.isIndexSelected(row + iStartIndex));
					if (bHierarchical) {
						var iLevel = oBinding.getLevel(oContext);
						var $TreeIcon = jQuery.sap.byId(this.getId() + "-row" + row).find(".sapUiTblTreeIcon");
						$TreeIcon.css("marginLeft", iLevel * 17);
						var sTreeIconClass = "sapUiTblTreeIconLeaf";
						if (oBinding.hasChildren(oContext)) {
							sTreeIconClass = oBinding.isExpanded(oContext) ? "sapUiTblTreeIconNodeOpen" : "sapUiTblTreeIconNodeClosed";
						}
						$TreeIcon.removeClass("sapUiTblTreeIconLeaf sapUiTblTreeIconNodeOpen sapUiTblTreeIconNodeClosed").addClass(sTreeIconClass);
						$row.attr("data-sap-ui-level", iLevel)
					}
					$row.removeClass("sapUiTblCntHdn");
				} else {
					$row.addClass("sapUiTblCntHdn");
					if (bHierarchical) {
						$row.removeAttr("data-sap-ui-level");
					}
					this._visualizeSelection(row, false);
				}
			}
	
			var iDelay = new Date() - oDate;
			this.iBindingTimeout = iDelay + 10;
			//jQuery.sap.log.debug("this.iBindingTimeout: " + this.iBindingTimeout);
	
		} else {
		
			this._bNeedsUpdateBindings = true;
		
		}

	}

	this._sBindingTimer = null;

};


/** 
 * visualizes the selection of a table row
 * @private
 */
sap.ui.table.DataTable.prototype._visualizeSelection = function(iRow, bSelected) {
	if (bSelected) {
		jQuery.sap.byId(this.getId() + "-row" + iRow).
			addClass("sapUiTblRowSel").find(".sapUiTblRowSelCell").
				attr("title", this.oResBundle.getText("TBL_ROW_DESELECT")).
				attr("aria-selected", "true");
	} else {
		jQuery.sap.byId(this.getId() + "-row" + iRow).
			removeClass("sapUiTblRowSel").find(".sapUiTblRowSelCell").
				attr("title", this.oResBundle.getText("TBL_ROW_SELECT")).
				attr("aria-selected", "false");
	}
};


// *****************************************************************************
// > CLIENT SIDE RENDERER FUNCTIONALITY
// *****************************************************************************

sap.ui.table.DataTable.prototype._renderVSb = function() {

	// cleanup old scrollbar
	if (this._$VSb) {
		this.iRowHeight = 0;
		this._$VSb.unbind();
		this._$VSb = null;
	}

	// reference to the tds for visibility change
	var $Tbl = this.$();
	var $SbPH = $Tbl.find(".sapUiTblVSb");

	// find the relevant DOM elements => scrollbar
	var oSbCont = jQuery.sap.domById(this.getId() + "-vsbcont");

	// calculate the row height
	var oBinding = this.getBinding("rows");
	if (this.bOutput && oBinding) {

		var iFirstVisibleRow = Math.max(0, this.getFirstVisibleRow());
		var iVisibleRowCount = this.getCurrentVisibleRowCount();
		var iRowCount = oBinding.getLength();

		if (iRowCount > iVisibleRowCount) {

			var $SbCont = jQuery(oSbCont),
				$Sb = jQuery.sap.byId(this.getId() + "-vsb"),
				$SbImg = jQuery.sap.byId(this.getId() + "-vsbimg");

			$Tbl.addClass("sapUiTblHasVSb");

			this.iRowHeight = $Sb.height() / iVisibleRowCount;
			this.iStepSize = this.iRowHeight * iRowCount / ($Sb.height() - 32 - 1);

			// reset scrollbar and apply new height
			$SbImg.height(this.iRowHeight * iRowCount);
			$Sb.scrollTop(this.iRowHeight * iFirstVisibleRow);

			// bind the scroll event
			this._$VSb = $Sb;
			this._$VSb.bind("scroll", jQuery.proxy(this.onscroll, this));

		} else {
			$Tbl.removeClass("sapUiTblHasVSb");
		}

	} else {
		$Tbl.removeClass("sapUiTblHasVSb");
	}

};


sap.ui.table.DataTable.prototype._renderVSbToolTip = function() {

	if (this._$VSb) {

		var iStartIndex = this.getFirstVisibleRow();
		var sText = this.oResBundle.getText("TBL_TOOLTIP",
				[iStartIndex + 1,
				 iStartIndex + this.getCurrentVisibleRowCount(),
				 this.getBinding("rows").getLength()]);
		this.oPopup.getContent().setProperty("text", sText, true);
		this.oPopup.getContent().rerender();

		var eDock = sap.ui.core.Popup.Dock;
		var oOffset = this._$VSb.offset();
		var sOffset = this.bRTL ? "20" : "-20";
		if (this.bRTL && (jQuery.browser.webkit || jQuery.browser.mozilla && jQuery.browser.fVersion < 4)) {
			sOffset = "36";
		}
		var oDock = this.bRTL ? eDock.BeginTop : eDock.EndTop;
		this.oPopup.setPosition(oDock, oDock, this._$VSb[0], sOffset + " " + (16 + this._$VSb.scrollTop() / this.iStepSize));
		if (!this.oPopup.isOpen()) {
			this.oPopup.open();
		}

		if (this._sTooltipTimer) {
			jQuery.sap.clearDelayedCall(this._sTooltipTimer);
		}

		this._sTooltipTimer = jQuery.sap.delayedCall(1000, this, function() {
			this.oPopup.close();
			this._sTooltipTimer = null;
		});

	}

};


// *****************************************************************************
// > COLUMN HEADERS
// *****************************************************************************

/**
 * Retrieves a columnHeader object, based on a column id
 * @param {String} columnId column id for which we are looking for
 * @private
 */
sap.ui.table.DataTable.prototype.getColumnById = function(columnId) {
	// loop through all column headers until we find the right columnHeader object
	var cols = this.getColumns();
	for (var i = 0 ; i < cols.length ; i++){
		if (cols[i].getId() == columnId){
			return cols[i];
		}
	}
	// should never get here
	return null;
};


// *****************************************************************************
// > SELECTION API FUNCTIONALITY
// *****************************************************************************

sap.ui.table.DataTable.prototype.getSelectedIndex = function() {
	if (this.aSelectedIndices.length > 0) {
		return this.aSelectedIndices[0];
	}
	return -1;
};

sap.ui.table.DataTable.prototype.setSelectedIndex = function(iIndex, bSuppressRerendering) {
	if ( !this.isBound() ||iIndex < 0 || iIndex >= this.getBinding().getLength()) {
		return;
	}
	this.aSelectedIndices = [ iIndex ];
	// update
	if (!bSuppressRerendering) {
		this.invalidate();
	}
};

sap.ui.table.DataTable.prototype.addSelectedIndex = function(iIndex, bSuppressRerendering) {
	// only single selection is allowed
	if (this.getSelectionMode() == sap.ui.table.SelectionMode.Single) {
		this.setSelectedIndex(iIndex, bSuppressRerendering);
	} else {
		// selection changed?
		if (!this.isBound() || iIndex < 0 || iIndex >= this.getBinding().getLength()) {
			return;
		}
		if (jQuery.inArray(iIndex, this.aSelectedIndices) == -1) {
			this.aSelectedIndices.push(iIndex);
			// update
			if (!bSuppressRerendering) {
				this.invalidate();
			}
		}
	}
};

sap.ui.table.DataTable.prototype.removeSelectedIndex = function(iIndex, bSuppressRerendering) {
	// selection changed?
	var iIndexToRemove = jQuery.inArray(iIndex, this.aSelectedIndices);
	if (iIndexToRemove != -1) {
		this.aSelectedIndices.splice(iIndexToRemove, 1);
		// update
		if (!bSuppressRerendering) {
			this.invalidate();
		}
	}
};

sap.ui.table.DataTable.prototype.clearSelection = function(bSuppressRerendering) {
	// unselect all rows
	this.aSelectedIndices = [];
	// update
	if (!bSuppressRerendering) {
		this.invalidate();
	}
};

sap.ui.table.DataTable.prototype.selectAll = function(bSuppressRerendering) {
	// select all rows
	this.aSelectedIndices = [];
	for (var i = 0, l = this.getBinding().getLength(); i < l; i++) {
		this.aSelectedIndices.push(i);
	}
	// update
	if (!bSuppressRerendering) {
		this.invalidate();
	}
};

sap.ui.table.DataTable.prototype.getSelectedIndices = function() {
	var aSelectedIndices = this.aSelectedIndices.slice();
	aSelectedIndices.sort(function(a, b) { return a - b; });
	return aSelectedIndices;
};

sap.ui.table.DataTable.prototype.setSelectedIndices = function(aIndices, bSuppressRerendering) {
	if (this.getSelectionMode() == sap.ui.table.SelectionMode.Single) {
		return;
	}
	// clear the selection
	this.clearSelection(bSuppressRerendering);
	// add each index to the selected ones
	for (var i = 0; i < aIndices.length; i++) {
		this.addSelectedIndex(aIndices[i], bSuppressRerendering);
	}
};

sap.ui.table.DataTable.prototype.addSelectedIndices = function(aIndices, bSuppressRerendering) {
	if (!this.getSelectionMode() == sap.ui.table.SelectionMode.Single) {
		return;
	}
	// add each index to the selected ones
	for (var i = 0; i < aIndices.length; i++) {
		this.addSelectedIndex(aIndices[i], bSuppressRerendering);
	}
};

sap.ui.table.DataTable.prototype.isIndexSelected = function(iIndex) {
	return jQuery.inArray(iIndex, this.aSelectedIndices) != -1;
};


// *****************************************************************************
// > KEYBOARD HANDLING
// *****************************************************************************


sap.ui.table.DataTable.prototype.onkeypress = function(oEvent) {
	if (oEvent.keyCode == jQuery.sap.KeyCodes.F2) {
		jQuery.sap.log.info(this.getId() + ": F2");
	}
};

sap.ui.table.DataTable.prototype.onsapleft = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapleft");
};

sap.ui.table.DataTable.prototype.onsapleftmodifiers = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapleftmodifiers");
};

sap.ui.table.DataTable.prototype.onsapright = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapright");
};

sap.ui.table.DataTable.prototype.onsaprightmodifiers = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": saprightmodifiers");
};

sap.ui.table.DataTable.prototype.onsapdown = function(oEvent) {
	var $target = jQuery(oEvent.target);
	if ($target.hasClass("sapUiTblRowSelCell")) {
		var $next = $target.parent().next().children();
		if ($next.length > 0) {
			$next.get(0).focus();
		} else {
			// we are at the end => scroll one down if possible
			if (this.getFirstVisibleRow() < this.getBinding().getLength() - this.getCurrentVisibleRowCount()) {
				this.setFirstVisibleRow(this.getFirstVisibleRow() + 1);
				this._renderVSb();
			}
		}
	} else {
		jQuery.sap.log.info(this.getId() + ": sapdown");
	}
};

sap.ui.table.DataTable.prototype.onsapdownmodifiers = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapdownmodifiers");
};

sap.ui.table.DataTable.prototype.onsapup = function(oEvent) {
	var $target = jQuery(oEvent.target);
	if ($target.hasClass("sapUiTblRowSelCell")) {
		var $prev = $target.parent().prev().children();
		if ($prev.length > 0) {
			$prev.get(0).focus();
		} else {
			// we are at the beginning => scroll one up if possible
			if (this.getFirstVisibleRow() > 0) {
				this.setFirstVisibleRow(this.getFirstVisibleRow() - 1);
				this._renderVSb();
			}
		}
	} else {
		jQuery.sap.log.info(this.getId() + ": sapup");
	}
};

sap.ui.table.DataTable.prototype.onsapupmodifiers = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapupmodifiers");
};

sap.ui.table.DataTable.prototype.onsaphome = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": saphome");
};

sap.ui.table.DataTable.prototype.onsapend = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapend");
};

sap.ui.table.DataTable.prototype.onsaptop = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": saptop");
};

sap.ui.table.DataTable.prototype.onsapbottom = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapbottom");
};

sap.ui.table.DataTable.prototype.onsappageup = function(oEvent) {
	var $target = jQuery(oEvent.target);
	if ($target.hasClass("sapUiTblRowSelCell")) {
		this.setFirstVisibleRow(this.getFirstVisibleRow() - this.getCurrentVisibleRowCount());
		this._renderVSb();
	} else {
		jQuery.sap.log.info(this.getId() + ": sappageup");
	}
};

sap.ui.table.DataTable.prototype.onsappagedown = function(oEvent) {
	var $target = jQuery(oEvent.target);
	if ($target.hasClass("sapUiTblRowSelCell")) {
		this.setFirstVisibleRow(this.getFirstVisibleRow() + this.getCurrentVisibleRowCount());
		this._renderVSb();
	} else {
		jQuery.sap.log.info(this.getId() + ": sappagedown");
	}
};

sap.ui.table.DataTable.prototype.onsapenter = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapenter");
};

sap.ui.table.DataTable.prototype.onsapentermodifiers = function(oEvent) {
	jQuery.sap.log.info(this.getId() + ": sapentermodifiers");
};

}; // end of sap.ui.table.DataTable
