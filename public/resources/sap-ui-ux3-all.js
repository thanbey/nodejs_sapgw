// This file has been generated by the Phoenix 'AllInOne' Builder
jQuery.sap.declare('sap-ui-ux3-all');
if ( !jQuery.sap.isDeclared('sap.ui.ux3.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.ux3 (1.2.0)
 */
jQuery.sap.declare("sap.ui.ux3.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls that implement the SAP User Experience (UX) Guidelines 3.0
 *
 * @namespace
 * @name sap.ui.ux3
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.ux3",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [
    "sap.ui.ux3.FeederType",
    "sap.ui.ux3.FollowActionState",
    "sap.ui.ux3.feed.FeederMode"
  ],
  interfaces: [
    "sap.ui.ux3.DataSetView"
  ],
  controls: [
    "sap.ui.ux3.DataSet",
    "sap.ui.ux3.DataSetSimpleView",
    "sap.ui.ux3.Exact",
    "sap.ui.ux3.ExactArea",
    "sap.ui.ux3.ExactBrowser",
    "sap.ui.ux3.ExactList",
    "sap.ui.ux3.Feed",
    "sap.ui.ux3.FeedChunk",
    "sap.ui.ux3.Feeder",
    "sap.ui.ux3.NavigationBar",
    "sap.ui.ux3.Overlay",
    "sap.ui.ux3.OverlayContainer",
    "sap.ui.ux3.Shell",
    "sap.ui.ux3.ThingInspector",
    "sap.ui.ux3.ToolPopup",
    "sap.ui.ux3.feed.BaseFeedEntry",
    "sap.ui.ux3.feed.CommentEntry",
    "sap.ui.ux3.feed.FeedComponent",
    "sap.ui.ux3.feed.FeedEntry",
    "sap.ui.ux3.feed.Feeder"
  ],
  elements: [
    "sap.ui.ux3.DataSetItem",
    "sap.ui.ux3.ExactAttribute",
    "sap.ui.ux3.NavigationItem",
    "sap.ui.ux3.ThingAction",
    "sap.ui.ux3.ThingGroup"
  ],
  version: "1.2.0"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.FeederType.
jQuery.sap.declare("sap.ui.ux3.FeederType");

/**
 * @class Type of an Feeder.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.ux3.FeederType = {
  
    /**
     * large Feeder 
     * @public
     */
    Large : "Large",

    /**
     * medium feeder 
     * @public
     */
    Medium : "Medium",

    /**
     * comment feeder (small) 
     * @public
     */
    Comment : "Comment"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.FollowActionState.
jQuery.sap.declare("sap.ui.ux3.FollowActionState");

/**
 * @class Defines the states of the follow action
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.ux3.FollowActionState = {
  
    /**
     * follow state 
     * @public
     */
    Follow : "Follow",

    /**
     * hold state 
     * @public
     */
    Hold : "Hold",

    /**
     * default state 
     * @public
     */
    Default : "Default"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.ux3.feed.FeederMode.
jQuery.sap.declare("sap.ui.ux3.feed.FeederMode");

/**
 * @class Enumeration of possible Feeder modes.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.ux3.feed.FeederMode = {
  
    /**
     * Feeder to create new Feed Entry. 
     * @public
     */
    FeederEntry : "FeederEntry",

    /**
     * Feeder to create new Feed Comment. 
     * @public
     */
    FeederComment : "FeederComment"

  };
  

}; // end of sap.ui.ux3.library
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.BaseFeedEntry') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.feed.BaseFeedEntry.
jQuery.sap.declare("sap.ui.ux3.feed.BaseFeedEntry");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new feed/BaseFeedEntry.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>logoSrc : string</li>
 * <li>urn : string</li>
 * <li>text : string</li>
 * <li>sender : string</li>
 * <li>lastChanged : string</li>
 * <li>deletionAllowed : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>deleted : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Base Feed Entry
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.1. 
 * new Feed control: sap.ui.ux3.FeedChunk
 */
sap.ui.ux3.feed.BaseFeedEntry = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'feed/BaseFeedEntry'.");
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.feed.BaseFeedEntry.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.feed.BaseFeedEntry. 
 * Resulting metadata can be obtained via sap.ui.ux3.feed.BaseFeedEntry.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.feed.BaseFeedEntry", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getLogoSrc", "setLogoSrc", "getUrn", "setUrn", "getText", "setText", "getSender", "setSender", "getLastChanged", "setLastChanged", "getDeletionAllowed", "setDeletionAllowed", 
    // aggregations
    
    // associations
    
    // events
    "attachDeleted", "detachDeleted", 
    // methods
    "deleteEntry"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "logoSrc" : {name : "logoSrc", type : "string", group : "Misc", defaultValue : null},
    "urn" : {name : "urn", type : "string", group : "Misc", defaultValue : null},
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null},
    "sender" : {name : "sender", type : "string", group : "Misc", defaultValue : null},
    "lastChanged" : {name : "lastChanged", type : "string", group : "Misc", defaultValue : null},
    "deletionAllowed" : {name : "deletionAllowed", type : "boolean", group : "Misc", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "deleted" : "deleted"
  }

});	

sap.ui.ux3.feed.BaseFeedEntry.M_EVENTS = {'deleted':'deleted'};


/**
 * Getter for property <code>logoSrc</code>.
 * URL to the logo image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoSrc</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getLogoSrc = function() {
	return this.getProperty("logoSrc");
};

/**
 * Setter for property <code>logoSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoSrc  new value for property <code>logoSrc</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setLogoSrc = function(sLogoSrc) {
	this.setProperty("logoSrc", sLogoSrc);
	return this;
};


/**
 * Getter for property <code>urn</code>.
 * Unique identifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>urn</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getUrn = function() {
	return this.getProperty("urn");
};

/**
 * Setter for property <code>urn</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUrn  new value for property <code>urn</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setUrn = function(sUrn) {
	this.setProperty("urn", sUrn);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * Feed entry text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>sender</code>.
 * The entity from where the entry origins.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getSender = function() {
	return this.getProperty("sender");
};

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setSender = function(sSender) {
	this.setProperty("sender", sSender);
	return this;
};


/**
 * Getter for property <code>lastChanged</code>.
 * Last change time of the entry. Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC Timezone
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>lastChanged</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getLastChanged = function() {
	return this.getProperty("lastChanged");
};

/**
 * Setter for property <code>lastChanged</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLastChanged  new value for property <code>lastChanged</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setLastChanged = function(sLastChanged) {
	this.setProperty("lastChanged", sLastChanged);
	return this;
};


/**
 * Getter for property <code>deletionAllowed</code>.
 * deletion Allowed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>deletionAllowed</code>
 * @public
 * 
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.getDeletionAllowed = function() {
	return this.getProperty("deletionAllowed");
};

/**
 * Setter for property <code>deletionAllowed</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bDeletionAllowed  new value for property <code>deletionAllowed</code>
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.setDeletionAllowed = function(bDeletionAllowed) {
	this.setProperty("deletionAllowed", bDeletionAllowed);
	return this;
};


/**
 * Raised when the user delete the entry(when possible) 
 *
 * @name sap.ui.ux3.feed.BaseFeedEntry#deleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'deleted' event of this <code>sap.ui.ux3.feed.BaseFeedEntry</code>.<br/>
 * Raised when the user delete the entry(when possible) 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.attachDeleted = function(oData, fnFunction, oListener) {
	this.attachEvent("deleted", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'deleted' event of this <code>sap.ui.ux3.feed.BaseFeedEntry</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.detachDeleted = function(fnFunction, oListener) {
	this.detachEvent("deleted", fnFunction, oListener);
	return this;	
};

/**
 * Fire event deleted to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.BaseFeedEntry} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.fireDeleted = function(mArguments) {
	this.fireEvent("deleted", mArguments);
	return this;
};


/**
 * Deletes the entry
 *
 * @name sap.ui.ux3.feed.BaseFeedEntry.prototype.deleteEntry
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/ux3/feed/BaseFeedEntry.js
/**
 * Returns entry text to be display, in HTML format
 *
 * @return	The formatted entry text
 *
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.buildText = function(){
  var sText = this.getText();

  //TODO: Should render an actual link
  sText = sText.replace(/<thing/g, "<a href='#'" );
  sText = sText.replace(/p12e_prep/g, "sapUiLnk" );
  sText = sText.replace(/<\/thing>/g, "</a>" );
  //replace line breaks
  sText = sText.replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />");

  //TODO: Escaping !!!

  return sText;
};

/**
 * Returns text that represents the time elapsed since the entry
 *  was last changed.
 *
 * The text will formatted this way: (x <unit of time> ago). The right unit will be selected depending the
 *  time elapsed.
 *
 * @return	The formatted time text
 *
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.buildTime = function( ){

  var sLastChanged = this.getLastChanged();
  var iNow		   = new Date().getTime();

  //Calculate the delta between now and last update time, in seconds
  var deltaSeconds = Math.round((iNow - sap.ui.ux3.feed.BaseFeedEntry.toDate(sLastChanged))/1000);

  return this.formatDelta(deltaSeconds);
};


/**
 * Adds one leading zero, if given number is below 10.
 *
 * @param	The number to format
 * @return	The formatted number
 *
 * @private
 */
sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero = function(n) {

	return n < 10 ? '0' + n : n;

};

/**
 * Adds one or two leading zero(s), to get a number with 3 characters.
 *
 * @param	The number to format
 * @return	The formatted number
 *
 * @private
 */
sap.ui.ux3.feed.BaseFeedEntry.addTwoLeadingZero = function(n) {

	if (n < 100){
		n = '0' + n;
	}
	if (n < 10){
		n = '0' + n;
	}
	return n;
};

/**
 * Formats a date from Javascript Date to ISO String (YYYY-MM-DDThh:mm:ss:sssZ)
 *
 * @param	Javascript Date
 * @return	The formatted ISO String date
 *
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.toISOString = function(d) {
	// convenience variable
	var baseEntry = sap.ui.ux3.feed.BaseFeedEntry;

	return	d.getUTCFullYear() + '-' +
			sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero(d.getUTCMonth() + 1) + '-' +
			sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero(d.getUTCDate()) + 'T' +
			sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero(d.getUTCHours()) + ':' +
			sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero(d.getUTCMinutes()) + ':' +
			sap.ui.ux3.feed.BaseFeedEntry.addOneLeadingZero(d.getUTCSeconds()) + '.' +
			sap.ui.ux3.feed.BaseFeedEntry.addTwoLeadingZero(d.getUTCMilliseconds()) + 'Z';

};

/**
 * Converts ISO String (YYYY-MM-DDThh:mm:ss:sssZ) to Javascript Date
 *
 * @param	The ISO String date
 * @return	Javascript Date
 *
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.toDate = function(sISODate) {

	var d = new Date();
	d.setUTCFullYear(sISODate.substring(0,4), parseInt(sISODate.substring(5,7), 10)-1, sISODate.substring(8,10));
	d.setUTCHours(sISODate.substring(11,13), sISODate.substring(14,16), sISODate.substring(17,19), sISODate.substring(20,23));
	return d;
};

/**
 * Formats a given numbers of seconds in a String that expresses the time elapsed.
 *
 * @param	Number of seconds since the given time
 * @return	The formatted String
 *
 * @protected
 */
sap.ui.ux3.feed.BaseFeedEntry.prototype.formatDelta = function(iDeltaSeconds) {

	var MINUTE	= 60;
	var HOUR	= 3600;
	var DAY		= 86400;
	var WEEK	= 604800;
	var MONTH	= 2592000;  //30 days/month
	var YEAR	= 31556926; //365.25 days/year

	var iCalculatedTime;
	var sTimeAgo;
	var sTextKey;
	var iDivider = 1;

	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	if(iDeltaSeconds<0 || !iDeltaSeconds){
		//negative value(in future) or undefined value -> unknown
		iDivider = 1;
		sTextKey = "FEEDENTRY_TIME_UNKNOWN";
	}else if(iDeltaSeconds<MINUTE){
		//Below 1 minute
		iDivider = 1;
		sTextKey = "FEEDENTRY_TIME_SECOND";
	}else if(iDeltaSeconds<HOUR){
		//Below 1 hour
		iDivider = MINUTE;
		sTextKey = "FEEDENTRY_TIME_MINUTE";
	}else if(iDeltaSeconds<DAY){
		//Below 1 day
		iDivider = HOUR;
		sTextKey = "FEEDENTRY_TIME_HOUR";
	}else if(iDeltaSeconds<WEEK){
		//Below 1 week
		iDivider = DAY;
		sTextKey = "FEEDENTRY_TIME_DAY";
	}else if(iDeltaSeconds<MONTH){
		//Below 1 month
		iDivider = WEEK;
		sTextKey = "FEEDENTRY_TIME_WEEK";
	}else if(iDeltaSeconds<YEAR){
		//Below 1 year
		iDivider = MONTH;
		sTextKey = "FEEDENTRY_TIME_MONTH";
	}else{
		iDivider = YEAR;
		sTextKey = "FEEDENTRY_TIME_YEAR";
	}

	//Calculate Time number (like "2" in "2 hours ago")
	iCalculatedTime = parseInt(Math.round(iDeltaSeconds/iDivider), 10);

	if(iCalculatedTime > 1){
		//Use plural text if Time number is greater than 1.
		sTextKey += "S";
	}

	//Get the text and replace the placeholder
	sTimeAgo = rb.getText(sTextKey);
	sTimeAgo = sTimeAgo.replace("{0}", iCalculatedTime);

	return sTimeAgo;
};
}; // end of sap.ui.ux3.feed.BaseFeedEntry
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactList.
jQuery.sap.declare("sap.ui.ux3.ExactList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ExactList.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>showClose : boolean</li>
 * <li>topTitle : string</li>
 * <li>topHeight : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>subLists : sap.ui.ux3.ExactList</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>data : sap.ui.ux3.ExactAttribute</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>attributeSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>widthChanged : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Internal sub-control of the ExactBrowser. The control is not intended to be used stand alone. For this purpose, the ExactBrowser control can be used.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ExactList = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ExactList.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.ExactList. 
 * Resulting metadata can be obtained via sap.ui.ux3.ExactList.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ExactList", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getShowClose", "setShowClose", "getTopTitle", "setTopTitle", "getTopHeight", "setTopHeight", 
    // aggregations
    "getSubLists", "insertSubList", "addSubList", "removeSubList", "removeAllSubLists", "indexOfSubList", "destroySubLists", 
    // associations
    "getData", "setData", 
    // events
    "attachAttributeSelected", "detachAttributeSelected", "attachWidthChanged", "detachWidthChanged"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "showClose" : {name : "showClose", type : "boolean", group : "Misc", defaultValue : false},
    "topTitle" : {name : "topTitle", type : "string", group : "Misc", defaultValue : null},
    "topHeight" : {name : "topHeight", type : "int", group : "Appearance", defaultValue : 290}
  },
  
  aggregations : {
    "subLists" : {name : "subLists", type : "sap.ui.ux3.ExactList", multiple : true, singularName : "subList"}
  },
  associations : {
    "data" : {name : "data", type : "sap.ui.ux3.ExactAttribute", multiple : false}
  },
  events : {
    "attributeSelected" : "attributeSelected", 
    "widthChanged" : "widthChanged"
  }

});	

sap.ui.ux3.ExactList.M_EVENTS = {'attributeSelected':'attributeSelected','widthChanged':'widthChanged'};


/**
 * Getter for property <code>showClose</code>.
 * Defines whether the close icon shall be displayed in the header.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showClose</code>
 * @public
 * 
 */
sap.ui.ux3.ExactList.prototype.getShowClose = function() {
	return this.getProperty("showClose");
};

/**
 * Setter for property <code>showClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowClose  new value for property <code>showClose</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.setShowClose = function(bShowClose) {
	this.setProperty("showClose", bShowClose);
	return this;
};


/**
 * Getter for property <code>topTitle</code>.
 * The title of this list is the top of the list hierarchy.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>topTitle</code>
 * @public
 * 
 */
sap.ui.ux3.ExactList.prototype.getTopTitle = function() {
	return this.getProperty("topTitle");
};

/**
 * Setter for property <code>topTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTopTitle  new value for property <code>topTitle</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.setTopTitle = function(sTopTitle) {
	this.setProperty("topTitle", sTopTitle);
	return this;
};


/**
 * Getter for property <code>topHeight</code>.
 * The height in px if this list is the top of the list hierarchy.
 *
 * Default value is <code>290</code>
 *
 * @return {int} the value of property <code>topHeight</code>
 * @public
 * 
 */
sap.ui.ux3.ExactList.prototype.getTopHeight = function() {
	return this.getProperty("topHeight");
};

/**
 * Setter for property <code>topHeight</code>.
 *
 * Default value is <code>290</code> 
 *
 * @param {int} iTopHeight  new value for property <code>topHeight</code>
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.setTopHeight = function(iTopHeight) {
	this.setProperty("topHeight", iTopHeight);
	return this;
};

	
/**
 * Getter for aggregation <code>subLists</code>.<br/>
 * The sub-ExactLists of this list. This aggregation must not be maintained from outside.
 * The control automatically takes care to fill this aggregation according to the given ExactAttribute.
 * 
 * @return {sap.ui.ux3.ExactList[]}
 * @public
 */
sap.ui.ux3.ExactList.prototype.getSubLists = function() {
	return this.getAggregation("subLists", []);
};


/**
 * Inserts a subList into the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *          oSubList the subList to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subList should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subList is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subList is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.insertSubList = function(oSubList, iIndex) {
	this.insertAggregation("subLists", oSubList, iIndex);
	return this;
};

/**
 * Adds some subList <code>oSubList</code> 
 * to the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ExactList.prototype.addSubList = function(oSubList) {
	this.addAggregation("subLists", oSubList);
	return this;
};

/**
 * Removes an subList from the aggregation named <code>subLists</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactList} vSubList the subList to remove or its index or id
 * @return {sap.ui.ux3.ExactList} the removed subList or null
 * @public
 */
sap.ui.ux3.ExactList.prototype.removeSubList = function(vSubList) {
	return this.removeAggregation("subLists", vSubList);
};

/**
 * Removes all the controls in the aggregation named <code>subLists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactList[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ExactList.prototype.removeAllSubLists = function() {
	return this.removeAllAggregation("subLists");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ExactList</code> in the aggregation named <code>subLists</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ExactList.prototype.indexOfSubList = function(oSubList) {
	return this.indexOfAggregation("subLists", oSubList);
};
	

/**
 * Destroys all the subLists in the aggregation 
 * named <code>subLists</code>.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.destroySubLists = function() {
	this.destroyAggregation("subLists");
	return this;
};


/**
 * The associated ExactAttribute
 *
 * @return {string} Id of the element which is the current target of the <code>data</code> association, or null
 * @public
 */
sap.ui.ux3.ExactList.prototype.getData = function() {
	return this.getAssociation("data", null);
};

/**
 * The associated ExactAttribute
 *
 * @param {string | sap.ui.ux3.ExactAttribute} vData 
 *    Id of an element which becomes the new target of this <code>data</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.setData = function(vData) {
	this.setAssociation("data", vData);
	return this;
};


	
/**
 * Event which is fired when an attribute is selected/unselected 
 *
 * @name sap.ui.ux3.ExactList#attributeSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The attribute which was selected/unselected recently
 * @param {object} oControlEvent.getParameters.allAttributes Array of all ExactAttributes
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'attributeSelected' event of this <code>sap.ui.ux3.ExactList</code>.<br/>
 * Event which is fired when an attribute is selected/unselected 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.attachAttributeSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("attributeSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'attributeSelected' event of this <code>sap.ui.ux3.ExactList</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.detachAttributeSelected = function(fnFunction, oListener) {
	this.detachEvent("attributeSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event attributeSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected/unselected recently</li>
 * <li>'allAttributes' of type <code>object</code> Array of all ExactAttributes</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ExactList.prototype.fireAttributeSelected = function(mArguments) {
	this.fireEvent("attributeSelected", mArguments);
	return this;
};


/**
 * Event which is fired on a top list when the list is resized 
 *
 * @name sap.ui.ux3.ExactList#widthChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.width The new list width
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'widthChanged' event of this <code>sap.ui.ux3.ExactList</code>.<br/>
 * Event which is fired on a top list when the list is resized 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.attachWidthChanged = function(oData, fnFunction, oListener) {
	this.attachEvent("widthChanged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'widthChanged' event of this <code>sap.ui.ux3.ExactList</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactList.prototype.detachWidthChanged = function(fnFunction, oListener) {
	this.detachEvent("widthChanged", fnFunction, oListener);
	return this;	
};

/**
 * Fire event widthChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'width' of type <code>string</code> The new list width</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ExactList.prototype.fireWidthChanged = function(mArguments) {
	this.fireEvent("widthChanged", mArguments);
	return this;
};


// Start of sap/ui/ux3/ExactList.js
(function() {

jQuery.sap.require("sap.ui.commons.ListBox");
jQuery.sap.require("sap.ui.core.Popup");

/**
 * Does the setup when the control is created.
 * @private
 */
sap.ui.ux3.ExactList.prototype.init = function(){
	var that = this;
	this._bCollapsed = false; //Indicates whether the control is horizontally collapsed
	this._bIsFirstRendering = true; //Set to false when the first rendering was done (used to animate the first opening)
	
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	
	//Create the used ListBox control
	this._lb = new sap.ui.commons.ListBox(this.getId()+"-lb", {allowMultiSelect:true /*TODO: set to false if selection mode on attribute to single selection*/, displayIcons:true});
	this.addAggregation("controls", this._lb);
	//Change the multiselect behavior (click instead of CTRL+Click)
	var orig_handleUserActivation = this._lb._handleUserActivation;
	this._lb._handleUserActivation = function(oEvent){
		oEvent.metaKey = true;
		orig_handleUserActivation.apply(this, [oEvent]);
	};
	//Listen to Listbox eventing via delegate
	this._lb.addDelegate({
		onclick: function(oEvent){
			that.onclick(oEvent);
		},
		onAfterRendering: function(){
			var items = that._lb.getItems();
			for(var i=0; i<items.length; i++){
				var oItem = items[i];
				var oExactAttr = sap.ui.getCore().byId(oItem.getKey());
				if(that._isTop() || !oExactAttr || !oExactAttr.getShowSubAttributesIndicator_Computed()){
					jQuery.sap.byId(that._lb.getId()+"-I"+i).addClass("sapUiUx3ExactLstNoIco");
				}
			}
			
			var sPos = sap.ui.getCore().getConfiguration().getRTL() ? "left" : "right";
			jQuery(".sapUiLbxITxt", that._lb.getDomRef()).css("margin-"+sPos, 20+sap.ui.ux3.ExactList.__oScollbarSize.width+"px");
			jQuery(".sapUiLbxIIco", that._lb.getDomRef()).css(sPos, 5+sap.ui.ux3.ExactList.__oScollbarSize.width+"px");
			
			jQuery(that._lb.getDomRef()).attr("tabindex", "-1");
			
			that._lb.oItemNavigation.iActiveTabIndex = -1; //Do not set the tabindex to 0 on the focused list item
		}
	});
	
	//Attach to the ListBox select event
	this._lb.attachSelect(function(oEvent){
		onSelect(that, oEvent);
	});
	
	this._closeHandle = jQuery.proxy(this.onForceVerticalClose, this);
};


/**
 * Does all the cleanup when the control is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.ux3.ExactList.prototype.exit = function() {
	clearChangeListener(this);
	this._lb = null; //Destroy is called when the aggregation "controls" is cleaned up
	this._closeHandle = null;
	this._scrollCheckHandle = null;
	this._rb = null;
};


/**
 * @see sap.ui.core.Element.prototype.getFocusDomRef
 * @private
 */
sap.ui.ux3.ExactList.prototype.getFocusDomRef = function() {
	return this._bCollapsed ? jQuery.sap.byId(this.getId()+"-head") : this._lb.getFocusDomRef();
};


/**
 * Called when the rendering is complete.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onAfterRendering = function() {
	this._bRTL = sap.ui.getCore().getConfiguration().getRTL();
	var that = this;
	
	if(this._isTop()){
		//No Open Animation when the control is the top list
		this._bIsFirstRendering = false;
		
		//Register listener on content overflow for scrollbar
		this._iScrollWidthDiff = -1;
		this.onCheckScrollbar();
		jQuery.sap.byId(this.getId()+"-lst").css("bottom", sap.ui.ux3.ExactList.__oScollbarSize.height+"px");
	}
	
	//Adapt the width after rendering and remember the current width
	if(!this._iCurrentWidth){
		this._iCurrentWidth = jQuery.sap.byId(this.getId()+"-lst").width();
		
	}
	setWidth(this, this._iCurrentWidth);
	
	//Adapt the scrolling behavior and show the vertical list expander if necessary
	if(adaptScollBehavior(this)){
		jQuery.sap.byId(this.getId() + "-lst").addClass("sapUiUx3ExactLstLstExp");
		
		if(!this._oPopup){
			var fPopupEventHandle = function(oEvent){
				that._handleEvent(oEvent);
			};
			
			this._oPopup = new sap.ui.core.Popup(null, false, false, false);
			
			this._oPopup._fixPositioning = function(oPosition, bRtl) {
				//TODO Check positioning of popup here
				sap.ui.core.Popup.prototype._fixPositioning.apply(this, arguments);
				if(bRtl){
					var $Ref = this._$();
					var $Of = jQuery(oPosition.of);
					$Ref.css("right", (jQuery(window).width() - $Ref.outerWidth() - $Of.offset().left) + "px");
				}
			};
			
			this._oPopup.open = function(){
				var jListContRef = jQuery.sap.byId(that.getId() + "-lst");
				animate(jListContRef, false, -1, function(jRef){
					//Switch the expand icon
					jListContRef.addClass("sapUiUx3ExactLstExpanded");
					jQuery.sap.byId(that.getId()+"-exp").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(true, false));
					//Remember the current height for closing later and set the height explicitly
					that.__sOldHeight = jListContRef.css("height");
					jListContRef.css("height", that.__sOldHeight);
					//Calculate the target height
					var jListRef = jQuery(that._lb.getDomRef());
					var iListHeight = jListRef[0].scrollHeight + jQuery.sap.byId(that.getId() + "-exp").height() + jListRef.outerHeight() - jListRef.height() + 1;
					var iMaxListHeight = jQuery(window).height() - parseInt(jListRef.offset().top) + jQuery(window).scrollTop();
					var iTargetHeight = Math.min(iListHeight, iMaxListHeight);
					//Set the list as popup content and open the popup
					that._oPopup.setContent(jListContRef[0]);
					var oPos = jListContRef.position();
					sap.ui.core.Popup.prototype.open.apply(that._oPopup,
							[0, sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginTop, jQuery(that.getDomRef())[0], oPos.left+" "+oPos.top]);
					that._bPopupOpened = true;
					return iTargetHeight;
				}, function(jRef){
					//Adapt the scroll behavior and set the focus
					adaptScollBehavior(that);
					that.getFocusDomRef().focus();
					//Bind the event handlers for closing and control events
					jQuery.sap.bindAnyEvent(that._closeHandle);
					jRef.bind(jQuery.sap.ControlEvents.join(" "), fPopupEventHandle);
				});
			};
			this._oPopup.close = function(bSkipFocus){
				var jListContRef = jQuery.sap.byId(that.getId() + "-lst");
				animate(jListContRef, false, that.__sOldHeight, function(jRef){
					//Unbind the event handlers for closing and control events
					jQuery.sap.unbindAnyEvent(that._closeHandle);
					jRef.unbind(jQuery.sap.ControlEvents.join(" "), fPopupEventHandle);
					//Switch the expand icon
					jListContRef.removeClass("sapUiUx3ExactLstExpanded");
					jQuery.sap.byId(that.getId()+"-exp").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(false, false));
				}, function(jRef){
					//Move the list to its original position
					jRef.detach();
					jRef.attr("style", "width:"+that._iCurrentWidth+"px;");
					jQuery(that.getDomRef()).prepend(jRef);
					//Cleanup and close the popup
					that._oPopup.setContent(null);
					that._bPopupOpened = undefined;
					that.__sOldHeight = null;
					if(that._isTop()){
						jRef.css("bottom", sap.ui.ux3.ExactList.__oScollbarSize.height+"px");
					}
					adaptScollBehavior(that);
					sap.ui.core.Popup.prototype.close.apply(that._oPopup, [0]);
					if(!bSkipFocus){
						that.getFocusDomRef().focus();
					}
				});
			};
		}
	}
	
	//Init the header text
	setHeaderText(this);
	
	//Open Animation
	if(this._bIsFirstRendering){
		this._bIsFirstRendering = false;
		animate(jQuery(this.getDomRef()), true, 0, function(jRef) {
			jRef.css("overflow", "hidden").css("width", "0px");
			return jRef[0].scrollWidth;
		}, function(jRef) {
			jRef.css("overflow", "").css("width", "");
		});
	}
};


//********* EVENTING *********


/**
 * Called when the control gets the focus.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onfocusin = function(oEvent) {
	if(oEvent.target === this.getDomRef()){
		this.getFocusDomRef().focus();
	}
	if(this._isTop()){
		jQuery(this.getDomRef()).attr("tabindex", "-1");
	}
};


/**
 * Called when the control loses the focus.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onfocusout = function(oEvent) {
	if(this._isTop()){
		jQuery(this.getDomRef()).attr("tabindex", "0");
	}
};


/**
 * Called when the control is clicked.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onclick = function(oEvent) {
	if(jQuery(oEvent.target).attr("id") == this.getId() + "-exp"){
		//Toggle the vertically Collapse state
		toggleVerticalCollapseState(this);
		this.focus();
	}else if(jQuery(oEvent.target).attr("id") == this.getId() + "-close"){
		//Close this list
		close(this);
	}else if(jQuery(oEvent.target).attr("id") == this.getId() + "-hide"){
		//Toggle the horizontally Collapse state
		toggleHorizontalCollapseState(this);
	}else if(!jQuery.sap.containsOrEquals(jQuery.sap.byId(this.getId()+"-cntnt")[0], oEvent.target)){
		this.focus();
	}
};


/**
 * Called when a key is pressed.
 * @private
 */
sap.ui.ux3.ExactList.prototype.onkeydown = function(oEvent) {
	switch(oEvent.keyCode){
		case jQuery.sap.KeyCodes.DELETE:
			//If close functionality is active -> Close the control and deselect the corresponding attribute
			if(!this._isTop() && this.getShowClose()){
				close(this);
				oEvent.preventDefault();
				oEvent.stopPropagation();
			}
			break;
			
		case jQuery.sap.KeyCodes.NUMPAD_MINUS:
			if(!!oEvent.metaKey){ //NUMPAD_MINUS + CTRL: Collapse list vertically
				var jListContRef = jQuery.sap.byId(this.getId() + "-lst");
				if(jListContRef.hasClass("sapUiUx3ExactLstExpanded") && jQuery.sap.byId(this.getId() + "-exp").is(":visible")){
					toggleVerticalCollapseState(this);
				}
				oEvent.preventDefault();
				oEvent.stopPropagation();
			}else if(oEvent.shiftKey){ //NUMPAD_MINUS + SHIFT: Make width smaller
				if(!this._bCollapsed){
					setWidth(this, this._iCurrentWidth - 10);
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
			}else if(!this._bCollapsed){ //NUMPAD_MINUS: Collapse list horizontally
				if(!this._isTop()){
					toggleHorizontalCollapseState(this);
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
			}
			break;

		case jQuery.sap.KeyCodes.NUMPAD_PLUS:
			if(!!oEvent.metaKey){ //NUMPAD_PLUS + CTRL: Expand list vertically
				var jListContRef = jQuery.sap.byId(this.getId() + "-lst");
				if(!jListContRef.hasClass("sapUiUx3ExactLstExpanded") && jQuery.sap.byId(this.getId() + "-exp").is(":visible")){
					toggleVerticalCollapseState(this);
				}
				oEvent.preventDefault();
				oEvent.stopPropagation();
			}else if(oEvent.shiftKey){ //NUMPAD_PLUS + SHIFT: Make width larger
				if(!this._bCollapsed){
					setWidth(this, this._iCurrentWidth + 10);
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
			}else if(this._bCollapsed){ //NUMPAD_PLUS: Expand list horizontally
				if(!this._isTop()){
					toggleHorizontalCollapseState(this);
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
			}
			break;
			
		case jQuery.sap.KeyCodes.TAB:
			//Handle Tabbing
			if(jQuery.sap.containsOrEquals(this.getFocusDomRef(), oEvent.target)){ //skip Tabs on sub controls
				if(oEvent.shiftKey){
					if(!this._isTop()){
						this.getParent()._handleTab(this, oEvent);
					}
				}else{
					if(this.getSubLists().length == 0 || this._bCollapsed){
						if(!this._isTop()){
							this.getParent()._handleTab(this, oEvent);
						}
					}else{
						this.getSubLists()[0].focus();
						oEvent.preventDefault();
						oEvent.stopPropagation();
					}
				}
			}
			break;
	}
};


/**
 * Called when mousedown event appears. -> Starting point for the resizing
 * @private
 */
sap.ui.ux3.ExactList.prototype.onmousedown = function(oEvent) {
	if(oEvent.target.id === this.getId()+"-rsz"){
		jQuery(document.body).append(
				"<div id=\"" + this.getId() + "-ghost\" class=\"sapUiUx3ExactLstRSzGhost\" style =\" z-index:"+sap.ui.core.Popup.getNextZIndex()+"\" ></div>");
		
		// Fix for IE text selection while dragging
		jQuery(document.body).bind("selectstart", onStartSelect);
		
		jQuery.sap.byId(this.getId() + "-ghost").bind("mouseup", jQuery.proxy(onRelease, this)).bind("mousemove", jQuery.proxy(onMove, this));
		
		this._iStartDragX = oEvent.pageX;
		this._iStartWidth  = jQuery.sap.byId(this.getId()+"-lst").width();
		
		jQuery.sap.byId(this.getId()+"-rsz").addClass("sapUiUx3ExactLstRSzDrag");
	}
};


/**
 * Called when the vertically Collapse State should be closed immediately (e.g. outer event)
 * @private
 */
sap.ui.ux3.ExactList.prototype.onForceVerticalClose = function(oEvent) {
	if(oEvent.type == "mousedown" ||
			oEvent.type == "click" ||
			oEvent.type == "dblclick" ||
			oEvent.type == "focusin" ||
			oEvent.type == "focusout" ||
			oEvent.type == "keydown" ||
			oEvent.type == "keypress" ||
			oEvent.type == "keyup" ||
			oEvent.type == "mousedown" ||
			oEvent.type == "mouseup") {
		var jRef = jQuery.sap.byId(this.getId() + "-lst");
		if(!jQuery.sap.containsOrEquals(jRef[0], oEvent.target) || oEvent.target.tagName=="BODY"){
			if(jRef.hasClass("sapUiUx3ExactLstExpanded")){
				this._oPopup.close(true);
			}
		}
	}
};


/**
 * Called periodicly to check whether the content scrollbar must be show or hidden
 * @private
 */
sap.ui.ux3.ExactList.prototype.onCheckScrollbar = function(oEvent) {
	this._scrollCheckTimer = null;

	var jContentArea = jQuery.sap.byId(this.getId()+"-cntnt");
	var oContentArea = jContentArea[0];
	if(oContentArea){
		var iNewDiff = oContentArea.scrollWidth - oContentArea.clientWidth;
		if(this._iScrollWidthDiff != iNewDiff){
			this._iScrollWidthDiff = iNewDiff;
			if(iNewDiff <= 0){
				//hidden scrollbar
				jContentArea.css({"overflow-x": "hidden", "bottom": sap.ui.ux3.ExactList.__oScollbarSize.height+"px"});
			}else{
				//visible scrollbar
				jContentArea.css({"overflow-x": "scroll", "bottom": "0px"});
			}
		}
		this._scrollCheckTimer = jQuery.sap.delayedCall(300, this, this.onCheckScrollbar);
	}
};


//********* OVERRIDDEN API FUNCTIONS *********


sap.ui.ux3.ExactList.prototype.setData = function(vData) {
	if (vData != null && typeof(vData) != "string") {
		vData = vData.getId();
	}
	
	if(vData) {
		//Set the associated ExactAttribute
		this.setAssociation("data", vData);
		vData = this._getAtt();
		this._lb.destroyItems();
		var aAtts = vData.getAttributesInternal(true);
		var aSelectedKeys = [];
		var aLists = [];
		//Update the used ListBox accordingly and create child exact lists
		for(var i=0; i<aAtts.length; i++){
			var oItem = new sap.ui.core.ListItem({text:aAtts[i].getText(), key: aAtts[i].getId()});
			this._lb.addItem(oItem);
			if(aAtts[i].getSelected()){
				var oList = createExactListForAttribute(this, aAtts[i]);
				if(oList){
					aLists.push(oList);
				}
				aSelectedKeys.push(oItem.getKey());
			}
		}
		this._lb.setSelectedKeys(aSelectedKeys);
		
		//Update child lists
		var aOldChildren = this.getSubLists();
		for(var i=0; i<aOldChildren.length; i++){
			var idx = jQuery.inArray(aOldChildren[i], aLists);
			if(idx >= 0){
				//List is already a sublist -> remove it from the array of lists to add
				aLists.splice(idx, 1);
			}else{
				//List does not exist anymore in the array of lists to add -> destroy it (also removes it from the aggregation)
				aOldChildren[i].destroy();
			}
		}
		//Append all newly created lists
		for(var i=0; i<aLists.length; i++){
			this.addSubList(aLists[i]);
		}
		
		/* Alternative Algorithm
		var aChildLists = [];
		for(var i=0; i<aOldChildren.length; i++){
			for(var j=0; j<aLists.length; j++){
				if(aOldChildren[i].getId() === aLists[j].getId()){
					aChildLists.push(aLists[j]);
				}
			}
		}
		for(var i=0; i<aLists.length; i++){
			var bIsInChildList = false;
			for(var j=0; j<aChildLists.length; j++){
				if(aLists[i].getId() === aChildLists[j].getId()){
					bIsInChildList = true;
				}
			}
			if(!bIsInChildList){
				aChildLists.push(aLists[i]);
			}
		}
		
		for(var i=0; i<aChildLists.length; i++){
			this.addSubList(aChildLists[i]);
		}*/
		
		//Set the change listener to the exact attribute
		var that = this;
		vData.setChangeListener({id: that.getId(), _notifyOnChange: function(sType, oAttribute){
			if(!that._isTop()){
				that.getParent().setData(that.getParent().getData());
			}else{
				that.setData(that.getData());
			}
		}});
	}

	return this;
};


sap.ui.ux3.ExactList.prototype.setShowClose = function(bShowClose) {
	if(this._isTop()){
		this.setProperty("showClose", bShowClose);
	}
	return this;
};


sap.ui.ux3.ExactList.prototype.getShowClose = function() {
	return getTopList(this).getProperty("showClose");
};


sap.ui.ux3.ExactList.prototype.getTopTitle = function() {
	var sTitle = this.getProperty("topTitle");
	return sTitle ? sTitle : this._rb.getText("EXACT_BRWSR_LST_TITLE");
};


//********* GLOBAL HELPERS *********


/**
 * Returns the associated ExactAttribute.
 * @private
 */
sap.ui.ux3.ExactList.prototype._getAtt = function() {
	return sap.ui.getCore().byId(this.getData());
};


/**
 * Returns <code>true</code>, when this control is the top most in the hierarchy, <code>false</code> otherwise.
 * @private
 */
sap.ui.ux3.ExactList.prototype._isTop = function() {
	return !(this.getParent() instanceof sap.ui.ux3.ExactList);
};


/**
 * Handles the TAB for a sub list.
 * @see sap.ui.ux3.ExactList.prototype.onkeydown
 * @private
 */
sap.ui.ux3.ExactList.prototype._handleTab = function(oSubList, oEvent) {
	var iIndex = this.indexOfSubList(oSubList);
	if(oEvent.shiftKey){
		if(iIndex > 0){
			this.getSubLists()[iIndex-1].focus();
		}else{
			this.focus();
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}else{
		if(iIndex < this.getSubLists().length - 1){
			this.getSubLists()[iIndex+1].focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}else if(!this._isTop()){
			this.getParent()._handleTab(this, oEvent);
		}
	}
};


/**
 * Handles selections of the whole list tree and fires selection change event.
 * @private
 */
sap.ui.ux3.ExactList.prototype._selectionChanged = function(oAttribute) {
	if(!this._isTop()){
		return;
	}
	
	//Computes recursivly all selected attributes and adds them to the given result list
	var _computeSelectedAttributes = function(oAtt, aResult){
		if(!oAtt.getSelected()) {
			return;
		}
		aResult.push(oAtt);
		var aValues = oAtt.getAttributesInternal();
		for(var idx=0; idx<aValues.length; idx++){
			_computeSelectedAttributes(aValues[idx], aResult);
		}
	};

	var aSelectedAttributes = [];
	var aTopValues = this._getAtt().getAttributesInternal();
	for(var idx=0; idx<aTopValues.length; idx++){
		_computeSelectedAttributes(aTopValues[idx], aSelectedAttributes);
	}
	
	this.fireAttributeSelected({attribute: oAttribute, allAttributes: aSelectedAttributes});
};


/**
 * Closes all open sub lists and clears the selection if this list is the top list.
 *
 * @private
 */
sap.ui.ux3.ExactList.prototype._closeAll = function() {
	if(!this._isTop()){
		return;
	}
	
	var that = this;
	
	var fCallback = function(){
		that._getAtt()._clearSelection();
		that._lb.clearSelection();
		that.fireAttributeSelected({attribute: undefined, allAttributes: []});
	};
	
	var aLists = this.getSubLists();
	
	if(aLists.length > 0){
		for(var i=0; i<aLists.length; i++){
			close(aLists[i], true, i == aLists.length-1 ? fCallback : null);
		}
	}else{
		fCallback();
	}
};


//********* LOCAL HELPERS *********


//Animates the width or height of the given jRef to the given target value
//Optional callbacks are possible which are called before and after the animation
var animate = function(jRef, bWidth, iValue, fDoBefore, fDoAfter){
	if(fDoBefore){
		var iVal = fDoBefore(jRef);
		if(iVal != undefined){
			iValue = iVal;
		}
	}
	var _fDoAfter = fDoAfter ? function(){fDoAfter(jRef);} : function(){};
	if(jQuery.fx.off){
		if(bWidth){
			jRef.width(iValue);
		}else{
			jRef.height(iValue);
		}
		_fDoAfter();
	}else{
		var oParam = bWidth ? {width: iValue} : {height: iValue};
		jRef.stop(true, true).animate(oParam, 200, 'linear', _fDoAfter);
	}
};


// Handles the StartSelect event during resizing
// @see sap.ui.ux3.ExactList.prototype.onmousedown
var onStartSelect = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};


//Handles the MouseMove event during resizing
//@see sap.ui.ux3.ExactList.prototype.onmousedown
var onMove = function(oEvent){
	var iCurrentX = oEvent.pageX;
	var iDiff = this._bRTL ? (this._iStartDragX - iCurrentX) : (iCurrentX - this._iStartDragX);
	setWidth(this, this._iStartWidth + iDiff);
};


//Handles the MouseUp event during resizing
//@see sap.ui.ux3.ExactList.prototype.onmousedown
var onRelease = function(oEvent){
	jQuery(document.body).unbind("selectstart", onStartSelect);
	jQuery.sap.byId(this.getId() + "-ghost").remove();
	jQuery.sap.byId(this.getId()+"-rsz").removeClass("sapUiUx3ExactLstRSzDrag");
	this._iStartWidth = undefined;
	this._iStartDragX = undefined;
};


//Checks whether the given width is in the allowed range. If not the width is adapted accordingly.
var checkWidth = function(iWidth){
	var iMinWidth = 100;
	var iMaxWidth = 500;
	if(iWidth < iMinWidth){
		return iMinWidth;
	}else if(iWidth > iMaxWidth){
		return iMaxWidth;
	}
	return iWidth;
};


//Sets the width of the list to the given width (maybe the width is adapted to the allowed range (@see checkWidth))
var setWidth = function(oList, iWidth){
	iWidth = checkWidth(iWidth);
	var sPos = oList._bRTL ? "right" : "left";
	var sId = oList.getId();
	oList._iCurrentWidth = iWidth;
	jQuery.sap.byId(sId+"-lst").css("width", iWidth+"px");
	jQuery.sap.byId(sId+"-rsz").css(sPos, (iWidth-4)+"px");
	if(oList._isTop()){
		jQuery.sap.byId(sId+"-head").css("width", iWidth+"px");
		jQuery.sap.byId(sId+"-cntnt").css(sPos, (iWidth+8)+"px");
		jQuery.sap.byId(sId+"-scroll").css(sPos, (iWidth+8)+"px");
	}else{
		jQuery.sap.byId(sId+"-cntnt").css("margin-"+sPos, iWidth+"px");
	}
	if(oList._isTop()){
		oList.fireWidthChanged({width: iWidth+"px"});
	}
};


//Refresh the header text of the list
var setHeaderText = function(oList){
	var oAtt = oList._getAtt();
	if(oAtt && !oList._isTop()){
		jQuery.sap.byId(oList.getId() + "-head-txt").html(jQuery.sap.encodeHTML(oAtt.getText())
				+"<span class=\"sapUiUx3ExactLstHeadInfo\">&nbsp;("+oList._lb.getSelectedIndices().length+"/"+oList._lb.getItems().length+")</span>");
	}
};


//Adapt the scrolling behavior when not all list items can be shown and return whether adaptation was done or not.
var adaptScollBehavior = function(oList){
	if(oList._lb){
		var jListRef = jQuery(oList._lb.getDomRef());
		jQuery.sap.byId(oList.getId() + "-lst").removeClass("sapUiUx3ExactLstScroll");
		if(jListRef.outerHeight() < jListRef[0].scrollHeight){
			jQuery.sap.byId(oList.getId() + "-lst").addClass("sapUiUx3ExactLstScroll");
			return true;
		}
	}
	return false;
};


//Toggles the horizontal Collapse State
var toggleHorizontalCollapseState = function(oList){
	if(oList._bCollapsed){
		//expand
		animate(jQuery(oList.getDomRef()), true, 0, function(jRef) {
			jRef.css("overflow", "hidden").css("width", "25px").removeClass("sapUiUx3ExactLstCollapsed");
			jQuery.sap.byId(oList.getId()+"-head-txt").width("auto");
			return jRef[0].scrollWidth;
		}, function(jRef) {
			jRef.css("overflow", "").css("width", "");
			jQuery.sap.byId(oList.getId()+"-hide").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(true, true));
			oList._bCollapsed = !oList._bCollapsed;
			oList.focus();
		});
	}else{
		//collapse
		animate(jQuery(oList.getDomRef()), true, 25, null, function(jRef) {
			jRef.addClass("sapUiUx3ExactLstCollapsed");
			jQuery.sap.byId(oList.getId()+"-head-txt").width(jQuery.sap.byId(oList.getId()+"-head").height() - jQuery.sap.byId(oList.getId()+"-head-action").height() - 20);
			jRef.css("overflow", "").css("width", "");
			jQuery.sap.byId(oList.getId()+"-hide").html(sap.ui.ux3.ExactListRenderer.getExpanderSymbol(false, true));
			oList._bCollapsed = !oList._bCollapsed;
			oList.focus();
		});
	}
};


//Toggles the vertical Collapse State
var toggleVerticalCollapseState = function(oList){
	var jListContRef = jQuery.sap.byId(oList.getId() + "-lst");
	if(jListContRef.hasClass("sapUiUx3ExactLstExpanded")){
		//collapse
		oList._oPopup.close();
	}else{
		//expand
		oList._oPopup.open(); 
	}
};


//Handles the close of the list
var close = function(oList, bSkipNotify, fCallback){
	animate(jQuery(oList.getDomRef()), true, 0, function(jRef) {
		jRef.css("overflow", "hidden");
	}, function(jRef) {
		if(!bSkipNotify){
			var oAttr = oList._getAtt();
			var iSelectedIndex = oAttr.getParent().indexOfAttribute(oAttr);
			clearAttribute(oList.getParent(), oAttr, iSelectedIndex, true);
			setHeaderText(oList.getParent());
			getTopList(oList)._selectionChanged(oAttr);
		}
		oList.destroy();
		if(fCallback){
			fCallback();
		}
	});
};


//Handles the select event of the used ListBox control
var onSelect = function(oList, oEvent){
	setHeaderText(oList);
	var sKey = oEvent.getParameter("selectedItem").getKey();
	var oAttr = sap.ui.getCore().byId(sKey);
	var iSelectedIndex = oEvent.getParameter("selectedIndex");
	if(oList._lb.isIndexSelected(iSelectedIndex)){
		//select
		oAttr.setProperty("selected", true, true);
		var oSubList = createExactListForAttribute(oList, oAttr);
		if(oSubList) {
			oList.addSubList(oSubList);
		}
	}else{
		//deselect
		clearAttribute(oList, oAttr, iSelectedIndex);
	}
	
	getTopList(oList)._selectionChanged(oAttr);
};


//Creates a new ExactList for the given attribute if the attribute is selected and does not have a corresponding list yet.
//If the attribute has a corresponding list already this list is returned.
var createExactListForAttribute = function(oList, oAttribute) {
	if(oAttribute.getSelected()){
		var aAttributes = oAttribute.getAttributesInternal(true);
		if(aAttributes.length > 0){
			var oSubList;
			if(oAttribute.getChangeListener()){
				oSubList = sap.ui.getCore().byId(oAttribute.getChangeListener().id);
			}else{
				oSubList = new sap.ui.ux3.ExactList();
			}
			
			oSubList.setData(oAttribute);
			return oSubList;
		}
	}
	
	return null;
};


//Sets the selection property of the given attribute and all its sub-attributes to false.
//Additionally the given index in the lists ListBox is unselected. ExactLists which corresponds
//to the cleared attributes are closed if bSkipNotify is not set.
var clearAttribute = function(oList, oAttribute, iSelectedIndex, bSkipNotify){
	oList._lb.removeSelectedIndex(iSelectedIndex);
	oAttribute._clearSelection();
	if(!bSkipNotify){
		var aSubLists = oList.getSubLists();
		for(var i=0; i<aSubLists.length; i++){
			if(aSubLists[i].getData() === oAttribute.getId()){
				close(aSubLists[i], true);
			}
		}
	}
};


//Removes the change listener which is attached to the lists attribute.
var clearChangeListener = function(oList) { 
	var oAttr = oList._getAtt();
	if(oAttr && oAttr.getChangeListener() && oAttr.getChangeListener().id === oList.getId()) {
		oAttr.setChangeListener(null);
	}
};


//Returns the top most list.
var getTopList = function(oList) { 
	if(oList._isTop()){
		return oList;
	}
	return getTopList(oList.getParent());
};


}());


//Override docu of the "internal" aggregation subLists.

/**
 * Getter for aggregation <code>subLists</code>.<br/>
 * The sub ExactLists of this list. This aggregation must not be maintained from outside. The control automatically takes care to fill this aggregation according to the given ExactAttribute.
 * 
 * @return {sap.ui.ux3.ExactList[]}
 * @protected
 */

/**
 * Inserts a subList into the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *          oSubList the subList to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subList should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subList is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subList is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */

/**
 * Adds some subList <code>oSubList</code> 
 * to the aggregation named <code>subLists</code>.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */

/**
 * Removes an subList from the aggregation named <code>subLists</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactList} vSubList the subList to remove or its index or id
 * @return {sap.ui.ux3.ExactList} the removed subList or null
 * @protected
 */

/**
 * Removes all the controls in the aggregation named <code>subLists</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactList[]} an array of the removed elements (might be empty)
 * @protected
 */

/**
 * Checks for the provided <code>sap.ui.ux3.ExactList</code> in the aggregation named <code>subLists</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactList}
 *            oSubList the subList whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @protected
 */

/**
 * Destroys all the subLists in the aggregation 
 * named <code>subLists</code>.
 * @return {sap.ui.ux3.ExactList} <code>this</code> to allow method chaining
 * @protected
 */
}; // end of sap.ui.ux3.ExactList
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Overlay') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Overlay.
jQuery.sap.declare("sap.ui.ux3.Overlay");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Overlay.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>openButtonVisible : boolean</li>
 * <li>closeButtonVisible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>close : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>openNew : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>open : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Overlay Control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.Overlay = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.Overlay.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.Overlay. 
 * Resulting metadata can be obtained via sap.ui.ux3.Overlay.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.Overlay", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getOpenButtonVisible", "setOpenButtonVisible", "getCloseButtonVisible", "setCloseButtonVisible", 
    // aggregations
    
    // associations
    
    // events
    "attachClose", "detachClose", "attachOpenNew", "detachOpenNew", "attachOpen", "detachOpen", 
    // methods
    "open", "close", "isOpen"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "openButtonVisible" : {name : "openButtonVisible", type : "boolean", group : "Misc", defaultValue : true},
    "closeButtonVisible" : {name : "closeButtonVisible", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "close" : "close", 
    "openNew" : "openNew", 
    "open" : "open"
  }

});	

sap.ui.ux3.Overlay.M_EVENTS = {'close':'close','openNew':'openNew','open':'open'};


/**
 * Getter for property <code>openButtonVisible</code>.
 * Defines whether the 'Open' button shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>openButtonVisible</code>
 * @public
 * 
 */
sap.ui.ux3.Overlay.prototype.getOpenButtonVisible = function() {
	return this.getProperty("openButtonVisible");
};

/**
 * Setter for property <code>openButtonVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bOpenButtonVisible  new value for property <code>openButtonVisible</code>
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.setOpenButtonVisible = function(bOpenButtonVisible) {
	this.setProperty("openButtonVisible", bOpenButtonVisible);
	return this;
};


/**
 * Getter for property <code>closeButtonVisible</code>.
 * Defines whether the 'Close' button shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>closeButtonVisible</code>
 * @public
 * 
 */
sap.ui.ux3.Overlay.prototype.getCloseButtonVisible = function() {
	return this.getProperty("closeButtonVisible");
};

/**
 * Setter for property <code>closeButtonVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCloseButtonVisible  new value for property <code>closeButtonVisible</code>
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.setCloseButtonVisible = function(bCloseButtonVisible) {
	this.setProperty("closeButtonVisible", bCloseButtonVisible);
	return this;
};


/**
 * Event is fired when the ThingInspector is closed 
 *
 * @name sap.ui.ux3.Overlay#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 * Event is fired when the ThingInspector is closed 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.attachClose = function(oData, fnFunction, oListener) {
	this.attachEvent("close", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.detachClose = function(fnFunction, oListener) {
	this.detachEvent("close", fnFunction, oListener);
	return this;	
};

/**
 * Fire event close to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Overlay.prototype.fireClose = function(mArguments) {
	this.fireEvent("close", mArguments);
	return this;
};


/**
 * Event is fired when the 'Open' button of the ThingInspector is clicked 
 *
 * @name sap.ui.ux3.Overlay#openNew
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'openNew' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 * Event is fired when the 'Open' button of the ThingInspector is clicked 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.attachOpenNew = function(oData, fnFunction, oListener) {
	this.attachEvent("openNew", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'openNew' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.detachOpenNew = function(fnFunction, oListener) {
	this.detachEvent("openNew", fnFunction, oListener);
	return this;	
};

/**
 * Fire event openNew to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Overlay.prototype.fireOpenNew = function(mArguments) {
	this.fireEvent("openNew", mArguments);
	return this;
};


/**
 * Event is fired when the ThingInspector is opened 
 *
 * @name sap.ui.ux3.Overlay#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The Id of the Thing which is inspected in this ThingInspector instance
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 * Event is fired when the ThingInspector is opened 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.attachOpen = function(oData, fnFunction, oListener) {
	this.attachEvent("open", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.ux3.Overlay</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Overlay.prototype.detachOpen = function(fnFunction, oListener) {
	this.detachEvent("open", fnFunction, oListener);
	return this;	
};

/**
 * Fire event open to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The Id of the Thing which is inspected in this ThingInspector instance</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Overlay} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Overlay.prototype.fireOpen = function(mArguments) {
	this.fireEvent("open", mArguments);
	return this;
};


/**
 * Opens Overlay as pop up
 *
 * @name sap.ui.ux3.Overlay.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Closes Overlay
 *
 * @name sap.ui.ux3.Overlay.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Checks whether Overlay is open
 *
 * @name sap.ui.ux3.Overlay.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


// Start of sap/ui/ux3/Overlay.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * This file defines behavior for the control,
 */
sap.ui.ux3.Overlay.prototype.init = function() {
	this._oPopup = new sap.ui.core.Popup(this, false, true);
	this._overridePopupEventing();
};

/**
 * Set size of TI after rendering: If running in Shell we sync with shell
 * canvas. The size will then be set by the shell.
 */
sap.ui.ux3.Overlay.prototype.onAfterRendering = function() {
	jQuery.sap.byId(this.getId()).css("position", "fixed");
	var oShell = jQuery(".sapUiUx3Shell").control();
	if (oShell.length) {
		oShell[0].syncWithCanvasSize(this.getDomRef());
	} else {
		jQuery.sap.byId(this.getId()).css("bottom", "0px").css("top", "0px").css("left", "0px").css("right", "0px");
	}
};
/**
 * Destroys this instance of Overlay, called by Element#destroy()
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype.exit = function() {
	this.close();
	this._oPopup.destroy();
	this._oPopup = null;
};

/**
 * Opens this instance of Overlay
 *
 * @public
 */
sap.ui.ux3.Overlay.prototype.open = function() {
	if (this._oPopup.isOpen()) {
		return;
	}
	this._oPopup.open(400);
	jQuery.sap.byId(this.getId()).css("position", "fixed");
	var oShell = jQuery(".sapUiUx3Shell").control();
	if (oShell.length) {
		oShell[0].syncWithCanvasSize(this.getDomRef());
	} else {
		jQuery.sap.byId(this.getId()).css("bottom", "0px").css("top", "0px").css("left", "0px").css("right", "0px");
	}
	//fire open event
	this.fireOpen({
		id : this.getId()
	});
}

/**
 * Closes this instance of Overlay
 *
 * @public
 */;
sap.ui.ux3.Overlay.prototype.close = function() {
	if (!this._oPopup.isOpen()) {
		return;
	}
	this._oPopup.close(400);
	var oShell = jQuery(".sapUiUx3Shell").control();
	if (oShell.length) {
		oShell[0].syncWithCanvasSize(null);
	}
}
/**
 * Handle the click event happening on the Overlay instance.
 *
 * @param {jQuery.EventObject}
 *            oEvent
 * @private
 */;
sap.ui.ux3.Overlay.prototype.onclick = function(oEvent) {
	this._handleButtonEvent(oEvent);
};
/**
 * Handle the sapselect pseudo event happening on the Overlay instance.
 *
 * @param {jQuery.EventObject}
 *            oEvent
 * @private
 */
sap.ui.ux3.Overlay.prototype.onsapselect = function(oEvent) {
	this._handleButtonEvent(oEvent);
};
/**
 * Eventhandling for Overlay Buttons
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._handleButtonEvent = function(oEvent) {
	var elementId = oEvent.target.id;
	if (elementId.indexOf("close") != -1) {
		this.close();
		this.fireClose({
			id : this.getId()
		});
	} else if (elementId.indexOf("open") != -1) {
		this.fireOpenNew({
			id : this.getId()
		});
	}
};
/**
 * Load language dependent texts.
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sText = undefined;
	if(rb) {
		sText = rb.getText(sKey);
	}
	if(sText && aArgs){
		for(var index=0; index<aArgs.length; index++){
			sText = sText.replace("{"+index+"}", aArgs[index]);
		}
	}
	return sText ? sText : sKey;
};
/**
 * Override Popup Events
 *
 * @private
 */
sap.ui.ux3.Overlay.prototype._overridePopupEventing = function() {
	var that = this;
	// don't bring Overlay to the front on mouse down. Existing
	// Toolpopups should allways be in front
	this._oPopup.onmousedown = function(oEvent) {
		return;
	}
};
/* Redefinition of generated API methods */

// Implementation of API method isOpen
sap.ui.ux3.Overlay.prototype.isOpen = function() {
	return this._oPopup.isOpen();
};
}; // end of sap.ui.ux3.Overlay
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactAttribute.
jQuery.sap.declare("sap.ui.ux3.ExactAttribute");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new ExactAttribute.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>selected : boolean</li>
 * <li>showSubAttributesIndicator : boolean</li>
 * <li>additionalData : object</li>
 * <li>supplyActive : boolean</li>
 * <li>autoActivateSupply : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>attributes : sap.ui.ux3.ExactAttribute</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>supplyAttributes : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * An element for defining attributes and sub-attributes used within the Exact pattern.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ExactAttribute = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ExactAttribute.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.ux3.ExactAttribute. 
 * Resulting metadata can be obtained via sap.ui.ux3.ExactAttribute.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ExactAttribute", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getSelected", "setSelected", "getShowSubAttributesIndicator", "setShowSubAttributesIndicator", "getAdditionalData", "setAdditionalData", "getSupplyActive", "setSupplyActive", "getAutoActivateSupply", "setAutoActivateSupply", 
    // aggregations
    "getAttributes", "insertAttribute", "addAttribute", "removeAttribute", "removeAllAttributes", "indexOfAttribute", "destroyAttributes", 
    // associations
    
    // events
    "attachSupplyAttributes", "detachSupplyAttributes", 
    // methods
    "getShowSubAttributesIndicator_Computed"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null},
    "selected" : {name : "selected", type : "boolean", group : "Misc", defaultValue : null},
    "showSubAttributesIndicator" : {name : "showSubAttributesIndicator", type : "boolean", group : "Misc", defaultValue : true},
    "additionalData" : {name : "additionalData", type : "object", group : "Misc", defaultValue : null},
    "supplyActive" : {name : "supplyActive", type : "boolean", group : "Misc", defaultValue : true},
    "autoActivateSupply" : {name : "autoActivateSupply", type : "boolean", group : "Misc", defaultValue : false}
  },
  defaultAggregation : "attributes",
  aggregations : {
    "attributes" : {name : "attributes", type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}
  },
  associations : {},
  events : {
    "supplyAttributes" : "supplyAttributes"
  }

});	

sap.ui.ux3.ExactAttribute.M_EVENTS = {'supplyAttributes':'supplyAttributes'};


/**
 * Getter for property <code>text</code>.
 * The attribute name
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>selected</code>.
 * Specifies whether the attribute shall be selected
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getSelected = function() {
	return this.getProperty("selected");
};

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setSelected = function(bSelected) {
	this.setProperty("selected", bSelected);
	return this;
};


/**
 * Getter for property <code>showSubAttributesIndicator</code>.
 * Specifies whether the attribute shall have sub values for visual purposes.
 * The indicator which is a little arrow beside an attribute in the list is computed automatically
 * (getShowSubAttributesIndicator_Computed() of sap.ui.ux3.ExactAttribute).
 * In the case that a supply function is attached, and the supplyActive attribute has value 'true',
 * then the Exact pattern needs a hint if sub attributes are available. The showSubAttributesIndicator attribute is
 * considered then and has to be maintained. If the back-end does not support count-calls, for example,
 * showSubAttributesIndicator should be set to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSubAttributesIndicator</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getShowSubAttributesIndicator = function() {
	return this.getProperty("showSubAttributesIndicator");
};

/**
 * Setter for property <code>showSubAttributesIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSubAttributesIndicator  new value for property <code>showSubAttributesIndicator</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setShowSubAttributesIndicator = function(bShowSubAttributesIndicator) {
	this.setProperty("showSubAttributesIndicator", bShowSubAttributesIndicator);
	return this;
};


/**
 * Getter for property <code>additionalData</code>.
 * An example for additional data are database keys
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>additionalData</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getAdditionalData = function() {
	return this.getProperty("additionalData");
};

/**
 * Setter for property <code>additionalData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} sAdditionalData  new value for property <code>additionalData</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setAdditionalData = function(sAdditionalData) {
	this.setProperty("additionalData", sAdditionalData);
	return this;
};


/**
 * Getter for property <code>supplyActive</code>.
 * The supplyAttributes event is only fired if supplyActive has value true which is the default. After firing the event, the attribute is automatically set to false.
 * The idea is that a supply function is called only once when the data is requested. To enable the event again it is possible to manually set the attribute back to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>supplyActive</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getSupplyActive = function() {
	return this.getProperty("supplyActive");
};

/**
 * Setter for property <code>supplyActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSupplyActive  new value for property <code>supplyActive</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setSupplyActive = function(bSupplyActive) {
	this.setProperty("supplyActive", bSupplyActive);
	return this;
};


/**
 * Getter for property <code>autoActivateSupply</code>.
 * If you want the supply function to be called on every select, you can set the autoActivateSupply attribute to true. In this case, supplyActive is automatically
 * set to true on every unselect.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoActivateSupply</code>
 * @public
 * 
 */
sap.ui.ux3.ExactAttribute.prototype.getAutoActivateSupply = function() {
	return this.getProperty("autoActivateSupply");
};

/**
 * Setter for property <code>autoActivateSupply</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoActivateSupply  new value for property <code>autoActivateSupply</code>
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setAutoActivateSupply = function(bAutoActivateSupply) {
	this.setProperty("autoActivateSupply", bAutoActivateSupply);
	return this;
};

	
/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * Values (sub attributes) of this attribute
 * 
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.getAttributes = function() {
	return this.getAggregation("attributes", []);
};


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.insertAttribute = function(oAttribute, iIndex) {
	this.insertAggregation("attributes", oAttribute, iIndex);
	return this;
};

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ExactAttribute.prototype.addAttribute = function(oAttribute) {
	this.addAggregation("attributes", oAttribute);
	return this;
};

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.removeAttribute = function(vAttribute) {
	return this.removeAggregation("attributes", vAttribute);
};

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.removeAllAttributes = function() {
	return this.removeAllAggregation("attributes");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.indexOfAttribute = function(oAttribute) {
	return this.indexOfAggregation("attributes", oAttribute);
};
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.destroyAttributes = function() {
	this.destroyAggregation("attributes");
	return this;
};


/**
 * A supply function is a handler which is attached to the supplyAttributes event. The event is fired when the corresponding ExactAttribute is selected, it was already selected when a handler is attached or function getAttributes() is called. 
 *
 * @name sap.ui.ux3.ExactAttribute#supplyAttributes
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The ExactAttribute
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'supplyAttributes' event of this <code>sap.ui.ux3.ExactAttribute</code>.<br/>
 * A supply function is a handler which is attached to the supplyAttributes event. The event is fired when the corresponding ExactAttribute is selected, it was already selected when a handler is attached or function getAttributes() is called. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.attachSupplyAttributes = function(oData, fnFunction, oListener) {
	this.attachEvent("supplyAttributes", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'supplyAttributes' event of this <code>sap.ui.ux3.ExactAttribute</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.detachSupplyAttributes = function(fnFunction, oListener) {
	this.detachEvent("supplyAttributes", fnFunction, oListener);
	return this;	
};

/**
 * Fire event supplyAttributes to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The ExactAttribute</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactAttribute} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ExactAttribute.prototype.fireSupplyAttributes = function(mArguments) {
	this.fireEvent("supplyAttributes", mArguments);
	return this;
};


/**
 * See attribute showSubAttributesIndicator
 *
 * @name sap.ui.ux3.ExactAttribute.prototype.getShowSubAttributesIndicator_Computed
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/ux3/ExactAttribute.js
(function() {

//*** Overridden API functions ***


sap.ui.ux3.ExactAttribute.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	this._handleChange(this, "text");
	return this;
};


/**
 * @see sap.ui.core.Element.prototype.setTooltip
 * @public
 */
sap.ui.ux3.ExactAttribute.prototype.setTooltip = function(oTooltip) {
	sap.ui.core.Element.prototype.setTooltip.apply(this, arguments);
	this._handleChange(this, "tooltip");
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setSelected = function(bSelected) {
	this.setProperty("selected", bSelected);
	
	if(!this.getSelected()){
		this._clearSelection();
	}
	
	this._handleChange(this, "selected");
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setSupplyActive = function(bSupplyActive) {
	this.setProperty("supplyActive", bSupplyActive, true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setAutoActivateSupply = function(bAutoActivateSupply) {
	this.setProperty("autoActivateSupply", bAutoActivateSupply, true);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.getAttributes = function() {
	if(this.hasListeners("supplyAttributes") && this.getSupplyActive()){
		this._bSuppressChange = true;
		this._bChangedHappenedDuringSuppress = false;
		this.fireSupplyAttributes({attribute: this});
		this.setSupplyActive(false);
		this._bSuppressChange = undefined;
		if(this._bChangedHappenedDuringSuppress){
			this._handleChange(this, "attributes");
		}
		this._bChangedHappenedDuringSuppress = undefined;
	}
	return this.getAggregation("attributes", []);
};


sap.ui.ux3.ExactAttribute.prototype.insertAttribute = function(oAttribute, iIndex) {
	this.insertAggregation("attributes", oAttribute, iIndex);
	this._handleChange(this, "attributes");
	this.setSupplyActive(false);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.addAttribute = function(oAttribute) {
	this.addAggregation("attributes", oAttribute);
	this._handleChange(this, "attributes");
	this.setSupplyActive(false);
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.removeAttribute = function(vElement) {
	var oAtt = this.removeAggregation("attributes", vElement);
	if(oAtt){
		oAtt.setChangeListener(null);
		this._handleChange(this, "attributes");
	}
	return oAtt;
};


sap.ui.ux3.ExactAttribute.prototype.removeAllAttributes = function() {
	var aAtts = this.getAttributesInternal();
	for(var idx=0; idx<aAtts.length; idx++){
		aAtts[idx].setChangeListener(null);
	}
	var aRes = this.removeAllAggregation("attributes");
	if(aAtts.length > 0) {
		this._handleChange(this, "attributes");
	}
	return aRes;
};


sap.ui.ux3.ExactAttribute.prototype.destroyAttributes = function() {
	var aAtts = this.getAttributesInternal();
	for(var idx=0; idx<aAtts.length; idx++){
		aAtts[idx].setChangeListener(null);
	}
	this.destroyAggregation("attributes");
	if(aAtts.length > 0) {
		this._handleChange(this, "attributes");
	}
	return this;
};


sap.ui.ux3.ExactAttribute.prototype.getShowSubAttributesIndicator_Computed = function() {
	return this.hasListeners("supplyAttributes") && this.getSupplyActive() ? this.getShowSubAttributesIndicator() : this.getAttributesInternal().length > 0;
};


sap.ui.ux3.ExactAttribute.prototype.attachSupplyAttributes = function(oData, fnFunction, oListener) {
	this.attachEvent("supplyAttributes", oData, fnFunction, oListener);
	if(this.getSelected()){
		this.getAttributesInternal(true); //force init of attributes (e.g. call supply function))
	}
	return this;
};


//*** Internal (may also used by Exact Control) functions ***


sap.ui.ux3.ExactAttribute.prototype._setProperty_Orig = sap.ui.ux3.ExactAttribute.prototype.setProperty;
/**
 * @see sap.ui.core.Element.prototype.setProperty
 * @protected
 */
sap.ui.ux3.ExactAttribute.prototype.setProperty = function(sPropertyName, oValue, bSuppressRerendering) {
	this._setProperty_Orig(sPropertyName, oValue, bSuppressRerendering);

	if(sPropertyName == "selected"){
		if(oValue){
			this.getAttributesInternal(true); //force init of attributes (e.g. call supply function)
		}else{
			if(this.getAutoActivateSupply()) {
				this.setSupplyActive(true);
			}
		}
	}

	return this;
};


sap.ui.ux3.ExactAttribute.prototype.setChangeListener = function(oChangeListener) {
	this._oChangeListener = oChangeListener;
};


sap.ui.ux3.ExactAttribute.prototype.getChangeListener = function(oChangeListener) {
	return this._oChangeListener;
};


sap.ui.ux3.ExactAttribute.prototype.getAttributesInternal = function(bForceInit) {
	return bForceInit ? this.getAttributes() : this.getAggregation("attributes", []);
};


sap.ui.ux3.ExactAttribute.prototype._handleChange = function(oSourceAttribute, sType) {
	if(this._bSuppressChange){
		this._bChangedHappenedDuringSuppress = true;
		return;
	}
	if(this.getChangeListener()){
		//Change is handled by the change listener
		this.getChangeListener()._notifyOnChange(sType, oSourceAttribute);
	}else if(this.getParent() && this.getParent()._handleChange){
		//Bubble Change to next change listener
		this.getParent()._handleChange(oSourceAttribute, sType);
	}
};


//Sets the selection property of the attribute and all its sub-attributes to false.
sap.ui.ux3.ExactAttribute.prototype._clearSelection = function(){
	this.setProperty("selected", false, true);
	var aVals = this.getAttributesInternal();
	for(var idx=0; idx<aVals.length; idx++){
		aVals[idx]._clearSelection();
	}
};

}());
}; // end of sap.ui.ux3.ExactAttribute
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactBrowser') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactBrowser.
jQuery.sap.declare("sap.ui.ux3.ExactBrowser");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ExactBrowser.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>headerTitle : string</li>
 * <li>visible : boolean</li>
 * <li>enableListClose : boolean</li>
 * <li>listHeight : int</li>
 * <li>showHeader : boolean</li>
 * <li>enableReset : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>attributes : sap.ui.ux3.ExactAttribute</li>
 * <li>optionsMenu : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>attributeSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Attribute browse area used within the Exact pattern. The main benefit of this control is the high flexibility when large data amounts shall be displayed
 * in the form of structured data sets with a high or low interdependency level. From lists - which can be nested according to the defined attributes - the user can choose
 * entries and thereby trigger the display of further information, depending on the chosen entry/entries (multiple selection supported).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ExactBrowser = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ExactBrowser.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.ExactBrowser. 
 * Resulting metadata can be obtained via sap.ui.ux3.ExactBrowser.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ExactBrowser", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getHeaderTitle", "setHeaderTitle", "getVisible", "setVisible", "getEnableListClose", "setEnableListClose", "getListHeight", "setListHeight", "getShowHeader", "setShowHeader", "getEnableReset", "setEnableReset", 
    // aggregations
    "getAttributes", "insertAttribute", "addAttribute", "removeAttribute", "removeAllAttributes", "indexOfAttribute", "destroyAttributes", "getOptionsMenu", "setOptionsMenu", "destroyOptionsMenu", 
    // associations
    
    // events
    "attachAttributeSelected", "detachAttributeSelected"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null},
    "headerTitle" : {name : "headerTitle", type : "string", group : "Misc", defaultValue : null},
    "visible" : {name : "visible", type : "boolean", group : "", defaultValue : true},
    "enableListClose" : {name : "enableListClose", type : "boolean", group : "Misc", defaultValue : false},
    "listHeight" : {name : "listHeight", type : "int", group : "Appearance", defaultValue : 290},
    "showHeader" : {name : "showHeader", type : "boolean", group : "Misc", defaultValue : false},
    "enableReset" : {name : "enableReset", type : "boolean", group : "Misc", defaultValue : true}
  },
  defaultAggregation : "attributes",
  aggregations : {
    "attributes" : {name : "attributes", type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}, 
    "optionsMenu" : {name : "optionsMenu", type : "sap.ui.commons.Menu", multiple : false}
  },
  associations : {},
  events : {
    "attributeSelected" : "attributeSelected"
  }

});	

sap.ui.ux3.ExactBrowser.M_EVENTS = {'attributeSelected':'attributeSelected'};


/**
 * Getter for property <code>title</code>.
 * Title text in the list area of the Exact Browser.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>headerTitle</code>.
 * Title text in the header of the Exact Browser.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerTitle</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getHeaderTitle = function() {
	return this.getProperty("headerTitle");
};

/**
 * Setter for property <code>headerTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderTitle  new value for property <code>headerTitle</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setHeaderTitle = function(sHeaderTitle) {
	this.setProperty("headerTitle", sHeaderTitle);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible ExactBrowsers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};


/**
 * Getter for property <code>enableListClose</code>.
 * Enables the close icons of the displayed lists.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableListClose</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getEnableListClose = function() {
	return this.getProperty("enableListClose");
};

/**
 * Setter for property <code>enableListClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableListClose  new value for property <code>enableListClose</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setEnableListClose = function(bEnableListClose) {
	this.setProperty("enableListClose", bEnableListClose);
	return this;
};


/**
 * Getter for property <code>listHeight</code>.
 * The height of the list area in px.
 *
 * Default value is <code>290</code>
 *
 * @return {int} the value of property <code>listHeight</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getListHeight = function() {
	return this.getProperty("listHeight");
};

/**
 * Setter for property <code>listHeight</code>.
 *
 * Default value is <code>290</code> 
 *
 * @param {int} iListHeight  new value for property <code>listHeight</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setListHeight = function(iListHeight) {
	this.setProperty("listHeight", iListHeight);
	return this;
};


/**
 * Getter for property <code>showHeader</code>.
 * Whether the header area of the ExactBrowser should be shown.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getShowHeader = function() {
	return this.getProperty("showHeader");
};

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setShowHeader = function(bShowHeader) {
	this.setProperty("showHeader", bShowHeader);
	return this;
};


/**
 * Getter for property <code>enableReset</code>.
 * Whether the reset functionality should be available in the header area.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableReset</code>
 * @public
 * 
 */
sap.ui.ux3.ExactBrowser.prototype.getEnableReset = function() {
	return this.getProperty("enableReset");
};

/**
 * Setter for property <code>enableReset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableReset  new value for property <code>enableReset</code>
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setEnableReset = function(bEnableReset) {
	this.setProperty("enableReset", bEnableReset);
	return this;
};

	
/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The attributes which shall be available
 * 
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.getAttributes = function() {
	return this.getAggregation("attributes", []);
};


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.insertAttribute = function(oAttribute, iIndex) {
	this.insertAggregation("attributes", oAttribute, iIndex);
	return this;
};

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ExactBrowser.prototype.addAttribute = function(oAttribute) {
	this.addAggregation("attributes", oAttribute);
	return this;
};

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.removeAttribute = function(vAttribute) {
	return this.removeAggregation("attributes", vAttribute);
};

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.removeAllAttributes = function() {
	return this.removeAllAggregation("attributes");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.indexOfAttribute = function(oAttribute) {
	return this.indexOfAggregation("attributes", oAttribute);
};
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.destroyAttributes = function() {
	this.destroyAggregation("attributes");
	return this;
};

	
/**
 * Getter for aggregation <code>optionsMenu</code>.<br/>
 * Menu with options
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.getOptionsMenu = function() {
	return this.getAggregation("optionsMenu", null);
};


/**
 * Setter for the aggregated <code>optionsMenu</code>.
 * @param oOptionsMenu {sap.ui.commons.Menu}
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.setOptionsMenu = function(oOptionsMenu) {
	this.setAggregation("optionsMenu", oOptionsMenu);
	return this;
};
	

/**
 * Destroys the optionsMenu in the aggregation 
 * named <code>optionsMenu</code>.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.destroyOptionsMenu = function() {
	this.destroyAggregation("optionsMenu");
	return this;
};


/**
 * Event is fired when an attribute is selected or unselected. 
 *
 * @name sap.ui.ux3.ExactBrowser#attributeSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.attribute The attribute which was selected or unselected recently
 * @param {object} oControlEvent.getParameters.allAttributes Array of all selected ExactAttributes
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'attributeSelected' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>
 * Event is fired when an attribute is selected or unselected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.attachAttributeSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("attributeSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'attributeSelected' event of this <code>sap.ui.ux3.ExactBrowser</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactBrowser.prototype.detachAttributeSelected = function(fnFunction, oListener) {
	this.detachEvent("attributeSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event attributeSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'attribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected or unselected recently</li>
 * <li>'allAttributes' of type <code>object</code> Array of all selected ExactAttributes</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ExactBrowser} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ExactBrowser.prototype.fireAttributeSelected = function(mArguments) {
	this.fireEvent("attributeSelected", mArguments);
	return this;
};


// Start of sap/ui/ux3/ExactBrowser.js


jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained


(function() {

	/**
	 * Does the setup when the ExactBrowser is created.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.init = function(){
		var that = this;
		
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		
		//Create a root node for the attributes tree
		this._attributeRoot = new sap.ui.ux3.ExactAttribute();
		this._attributeRoot.setParent(this);
		
		//Init the used subcontrols
		this._rootList = new sap.ui.ux3.ExactList(this.getId()+"-rootlist");
		this._rootList.setData(this._attributeRoot);
		this.addAggregation("controls", this._rootList);
		
		this._resetButton = new sap.ui.commons.Button(this.getId()+"-RstBtn", {text: this._rb.getText("EXACT_BRWSR_RESET"), lite: true});
		this._resetButton.addStyleClass("sapUiUx3ExactBrwsrReset");
		this.addAggregation("controls", this._resetButton);
		this._resetButton.attachPress(function(){
			that._rootList._closeAll();
		});
		
		this._saveButton = new sap.ui.commons.Button(this.getId()+"-SvBtn", {text: this._rb.getText("EXACT_BRWSR_SAVE"), lite: true});
		this._saveButton.addStyleClass("sapUiUx3ExactBrwsrSave");
		this.addAggregation("controls", this._saveButton);
		this._saveButton.attachPress(function(){
			openSaveDialog(that);
		});
		
		this._rootList.attachAttributeSelected(function(oEvent){
			that.fireAttributeSelected({attribute: oEvent.getParameter("attribute"), allAttributes: oEvent.getParameter("allAttributes")});
		});
		this._rootList.attachWidthChanged(function(oEvent){
			var oMenuButton = that._getMenuButton(false);
			if(oMenuButton){
				oMenuButton.setProperty("width", oEvent.getParameter("width"), true);
				jQuery(oMenuButton.getDomRef()).css("width", oEvent.getParameter("width"));
			}
		});
	};


	/**
	 * Does all the cleanup when the ExactBrowser is to be destroyed.
	 * Called from Element's destroy() method.
	 * @private
	 */
	sap.ui.ux3.ExactBrowser.prototype.exit = function(){
		this._rootList.destroy();
		var oMenuButton = this._getMenuButton(false);
		if(oMenuButton){
			oMenuButton.destroy();
			this._menuButton = null;
		}
		this._attributeRoot.destroy();
		this._rootList = null;
		this._attributeRoot = null;
		this._resetButton = null;
		this._saveButton = null;
		this._saveDialog = null;
		this._saveTextField = null;
		this._rb = null;
	};


	//*** Overridden API functions ***
	
	sap.ui.ux3.ExactBrowser.prototype.getEnableSave = function() {
		//TODO Make this feature prodictive: Create Property "enableSave" and provide "save" event
		return !!this.__enableSave;
	};

	
	sap.ui.ux3.ExactBrowser.prototype.getTitle = function() {
		return this._rootList.getTopTitle();
	};


	sap.ui.ux3.ExactBrowser.prototype.setTitle = function(sTitle) {
		this._rootList.setTopTitle(sTitle);
		var oMenuButton = this._getMenuButton(false);
		if(oMenuButton){
			oMenuButton.setText(this._rootList.getTopTitle());
		}
		return this;
	};
	
	
	sap.ui.ux3.ExactBrowser.prototype.getHeaderTitle = function() {
		var sTitle = this.getProperty("headerTitle");
		return sTitle ? sTitle : this._rb.getText("EXACT_BRWSR_TITLE");
	};
	
	
	sap.ui.ux3.ExactBrowser.prototype.getEnableListClose = function() {
		return this._rootList.getShowClose();
	};


	sap.ui.ux3.ExactBrowser.prototype.setEnableListClose = function(bEnableListClose) {
		this._rootList.setShowClose(bEnableListClose);
		return this;
	};
	
	
	sap.ui.ux3.ExactBrowser.prototype.getListHeight = function() {
		return this._rootList.getTopHeight();
	};


	sap.ui.ux3.ExactBrowser.prototype.setListHeight = function(iListHeight) {
		this._rootList.setTopHeight(iListHeight);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.getOptionsMenu = function() {
		var oMenuButton = this._getMenuButton(false);
		return oMenuButton ? oMenuButton.getMenu() : null;
	};


	sap.ui.ux3.ExactBrowser.prototype.setOptionsMenu = function(oOptionsMenu) {
		var oMenuButton = this._getMenuButton(true);
		oMenuButton.setMenu(oOptionsMenu);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.destroyOptionsMenu = function() {
		var oMenuButton = this._getMenuButton(false);
		if(oMenuButton){
			oMenuButton.destroyMenu();
		}
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.getAttributes = function() {
		return this._attributeRoot.getAttributesInternal();
	};


	sap.ui.ux3.ExactBrowser.prototype.insertAttribute = function(oAttribute, iIndex) {
		this._attributeRoot.insertAttribute(oAttribute, iIndex);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.addAttribute = function(oAttribute) {
		this._attributeRoot.addAttribute(oAttribute);
		return this;
	};


	sap.ui.ux3.ExactBrowser.prototype.removeAttribute = function(vElement) {
		return this._attributeRoot.removeAttribute(vElement);
	};


	sap.ui.ux3.ExactBrowser.prototype.removeAllAttributes = function() {
		return this._attributeRoot.removeAllAttributes();
	};


	sap.ui.ux3.ExactBrowser.prototype.indexOfAttribute = function(oAttribute) {
		return this._attributeRoot.indexOfAttribute(oAttribute);
	};


	sap.ui.ux3.ExactBrowser.prototype.destroyAttributes = function() {
		this._attributeRoot.destroyAttributes();
		return this;
	};


	//*** Private helper functions ***

	sap.ui.ux3.ExactBrowser.prototype._getMenuButton = function(bForceInit) {
		if(this._menuButton){
			return this._menuButton;
		}
		if(bForceInit){
			jQuery.sap.require("sap.ui.commons.MenuButton");
			this._menuButton = new sap.ui.commons.MenuButton(this.getId()+"-MnuBtn", {text: this.getTitle(), lite: true});
			this._menuButton.addStyleClass("sapUiUx3ExactBrwsrBtn");
			this.addAggregation("controls", this._menuButton);
			var that = this;
			this._menuButton.addDelegate({
				onAfterRendering: function(){
					var zIndex = that._menuButton.__zIndex ? that._menuButton.__zIndex : sap.ui.core.Popup.getNextZIndex();
					that._menuButton.__zIndex = zIndex;
					jQuery(that._menuButton.getDomRef()).css("z-index", zIndex);
				}
			});
			return this._menuButton;
		}
		return null;
	};
	
	
	//Closes the save dialog and triggers the save event
	function doSave(oExactBrowser, bSkip) {
		oExactBrowser._saveDialog.close();
		if(!bSkip){
			alert("Save: "+oExactBrowser._saveTextField.getValue());
		}
	};
	
	
	//Opens the save dialog
	function openSaveDialog(oExactBrowser) {
		if(!oExactBrowser._saveDialog){
			jQuery.sap.require("sap.ui.ux3.ToolPopup");
			jQuery.sap.require("sap.ui.commons.Textfield");
			jQuery.sap.require("sap.ui.commons.Label");
			oExactBrowser._saveTextField = new sap.ui.commons.TextField(oExactBrowser.getId()+"-SvDlgTf");
			var label = new sap.ui.commons.Label({text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_LABEL")}).setLabelFor(oExactBrowser._saveTextField);
			oExactBrowser._saveDialog = new sap.ui.ux3.ToolPopup(oExactBrowser.getId()+"-SvDlg", {
				content:[label, oExactBrowser._saveTextField],
				buttons: [
					new sap.ui.commons.Button(oExactBrowser.getId()+"-SvDlgSvBtn", {
						text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_SAVE"),
						press: function(){
							doSave(oExactBrowser);
						}
					}),
					new sap.ui.commons.Button(oExactBrowser.getId()+"-SvDlgCnclBtn", {
						text: oExactBrowser._rb.getText("EXACT_BRWSR_DLG_CANCEL"),
						press: function(){
							doSave(oExactBrowser, true);
						}
					})
				]
			});
			oExactBrowser._saveDialog.addStyleClass("sapUiUx3ExactBrwsrSaveDlg");
			oExactBrowser.addAggregation("controls", oExactBrowser._saveDialog);
		}
		oExactBrowser._saveDialog.setPosition(sap.ui.core.Popup.Dock.EndTop, sap.ui.core.Popup.Dock.EndBottom, oExactBrowser._saveButton.getDomRef(), "0 13", "none");
		oExactBrowser._saveDialog.open();
	};

}());
}; // end of sap.ui.ux3.ExactBrowser
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.NavigationItem.
jQuery.sap.declare("sap.ui.ux3.NavigationItem");

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained


/**
 * Constructor for a new NavigationItem.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>subItems : sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Item#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is the item to be used within the NavigationBar
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.NavigationItem = function (sId, mSettings) {
	sap.ui.core.Item.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.NavigationItem.prototype = jQuery.sap.newObject(sap.ui.core.Item.prototype);

/*
 * Describe the sap.ui.ux3.NavigationItem. 
 * Resulting metadata can be obtained via sap.ui.ux3.NavigationItem.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.NavigationItem", {

  // ---- object ----
  baseType : "sap.ui.core.Item",
  publicMethods : [
    // properties 
    
    // aggregations
    "getSubItems", "insertSubItem", "addSubItem", "removeSubItem", "removeAllSubItems", "indexOfSubItem", "destroySubItems"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {},
  defaultAggregation : "subItems",
  aggregations : {
    "subItems" : {name : "subItems", type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "subItem"}
  },
  associations : {},
  events : {}

});	

	
/**
 * Getter for aggregation <code>subItems</code>.<br/>
 * Any NavigationItems on the next hierarchy level connected to this NavigationItem
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.getSubItems = function() {
	return this.getAggregation("subItems", []);
};


/**
 * Inserts a subItem into the aggregation named <code>subItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oSubItem the subItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.insertSubItem = function(oSubItem, iIndex) {
	this.insertAggregation("subItems", oSubItem, iIndex);
	return this;
};

/**
 * Adds some subItem <code>oSubItem</code> 
 * to the aggregation named <code>subItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oSubItem the subItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.NavigationItem.prototype.addSubItem = function(oSubItem) {
	this.addAggregation("subItems", oSubItem);
	return this;
};

/**
 * Removes an subItem from the aggregation named <code>subItems</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vSubItem the subItem to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed subItem or null
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.removeSubItem = function(vSubItem) {
	return this.removeAggregation("subItems", vSubItem);
};

/**
 * Removes all the controls in the aggregation named <code>subItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.removeAllSubItems = function() {
	return this.removeAllAggregation("subItems");
};

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>subItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oSubItem the subItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.indexOfSubItem = function(oSubItem) {
	return this.indexOfAggregation("subItems", oSubItem);
};
	

/**
 * Destroys all the subItems in the aggregation 
 * named <code>subItems</code>.
 * @return {sap.ui.ux3.NavigationItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationItem.prototype.destroySubItems = function() {
	this.destroyAggregation("subItems");
	return this;
};


// Start of sap/ui/ux3/NavigationItem.js

}; // end of sap.ui.ux3.NavigationItem
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.BaseFeedEntryRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.feed.BaseFeedEntry
jQuery.sap.declare("sap.ui.ux3.feed.BaseFeedEntryRenderer");

/**
 * @class BaseFeedEntry renderer.
 * @static
 */
sap.ui.ux3.feed.BaseFeedEntryRenderer = {
};
}; // end of sap.ui.ux3.feed.BaseFeedEntryRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.FeedEntry') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.feed.FeedEntry.
jQuery.sap.declare("sap.ui.ux3.feed.FeedEntry");



/**
 * Constructor for a new feed/FeedEntry.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>numberOfSupport : int</li>
 * <li>rating : float</li>
 * <li>flagged : boolean</li>
 * <li>numberOfRatings : int</li>
 * <li>supported : boolean</li>
 * <li>ratingEnabled : boolean</li>
 * <li>supportEnabled : boolean</li>
 * <li>avatarSrc : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>comments : sap.ui.ux3.feed.CommentEntry</li>
 * <li>customActions : sap.ui.commons.MenuItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>commentAdded : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleSupported : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleFlag : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>rated : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.ux3.feed.BaseFeedEntry#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Feed Entry
 * @extends sap.ui.ux3.feed.BaseFeedEntry
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.1. 
 * new Feed control: sap.ui.ux3.FeedChunk
 */
sap.ui.ux3.feed.FeedEntry = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'feed/FeedEntry'.");
	sap.ui.ux3.feed.BaseFeedEntry.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.feed.FeedEntry.prototype = jQuery.sap.newObject(sap.ui.ux3.feed.BaseFeedEntry.prototype);

/*
 * Describe the sap.ui.ux3.feed.FeedEntry. 
 * Resulting metadata can be obtained via sap.ui.ux3.feed.FeedEntry.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.feed.FeedEntry", {

  // ---- object ----
  baseType : "sap.ui.ux3.feed.BaseFeedEntry",
  publicMethods : [
    // properties 
    "getNumberOfSupport", "setNumberOfSupport", "getRating", "setRating", "getFlagged", "setFlagged", "getNumberOfRatings", "setNumberOfRatings", "getSupported", "setSupported", "getRatingEnabled", "setRatingEnabled", "getSupportEnabled", "setSupportEnabled", "getAvatarSrc", "setAvatarSrc", 
    // aggregations
    "getComments", "insertComment", "addComment", "removeComment", "removeAllComments", "indexOfComment", "destroyComments", "getCustomActions", "insertCustomAction", "addCustomAction", "removeCustomAction", "removeAllCustomActions", "indexOfCustomAction", "destroyCustomActions", 
    // associations
    
    // events
    "attachCommentAdded", "detachCommentAdded", "attachToggleSupported", "detachToggleSupported", "attachToggleFlag", "detachToggleFlag", "attachRated", "detachRated"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "numberOfSupport" : {name : "numberOfSupport", type : "int", group : "Misc", defaultValue : null},
    "rating" : {name : "rating", type : "float", group : "Misc", defaultValue : null},
    "flagged" : {name : "flagged", type : "boolean", group : "Misc", defaultValue : false},
    "numberOfRatings" : {name : "numberOfRatings", type : "int", group : "Misc", defaultValue : null},
    "supported" : {name : "supported", type : "boolean", group : "Misc", defaultValue : false},
    "ratingEnabled" : {name : "ratingEnabled", type : "boolean", group : "Appearance", defaultValue : true},
    "supportEnabled" : {name : "supportEnabled", type : "boolean", group : "Appearance", defaultValue : true},
    "avatarSrc" : {name : "avatarSrc", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {
    "comments" : {name : "comments", type : "sap.ui.ux3.feed.CommentEntry", multiple : true, singularName : "comment"}, 
    "customActions" : {name : "customActions", type : "sap.ui.commons.MenuItem", multiple : true, singularName : "customAction"}
  },
  associations : {},
  events : {
    "commentAdded" : "commentAdded", 
    "toggleSupported" : "toggleSupported", 
    "toggleFlag" : "toggleFlag", 
    "rated" : "rated"
  }

});	

sap.ui.ux3.feed.FeedEntry.M_EVENTS = {'commentAdded':'commentAdded','toggleSupported':'toggleSupported','toggleFlag':'toggleFlag','rated':'rated'};


/**
 * Getter for property <code>numberOfSupport</code>.
 * Global number of support
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfSupport</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getNumberOfSupport = function() {
	return this.getProperty("numberOfSupport");
};

/**
 * Setter for property <code>numberOfSupport</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfSupport  new value for property <code>numberOfSupport</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setNumberOfSupport = function(iNumberOfSupport) {
	this.setProperty("numberOfSupport", iNumberOfSupport);
	return this;
};


/**
 * Getter for property <code>rating</code>.
 * Global Rating value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>rating</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getRating = function() {
	return this.getProperty("rating");
};

/**
 * Setter for property <code>rating</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fRating  new value for property <code>rating</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setRating = function(fRating) {
	this.setProperty("rating", fRating);
	return this;
};


/**
 * Getter for property <code>flagged</code>.
 * Is the entry flagged.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagged</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getFlagged = function() {
	return this.getProperty("flagged");
};

/**
 * Setter for property <code>flagged</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagged  new value for property <code>flagged</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setFlagged = function(bFlagged) {
	this.setProperty("flagged", bFlagged);
	return this;
};


/**
 * Getter for property <code>numberOfRatings</code>.
 * Global number of ratings
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfRatings</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getNumberOfRatings = function() {
	return this.getProperty("numberOfRatings");
};

/**
 * Setter for property <code>numberOfRatings</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfRatings  new value for property <code>numberOfRatings</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setNumberOfRatings = function(iNumberOfRatings) {
	this.setProperty("numberOfRatings", iNumberOfRatings);
	return this;
};


/**
 * Getter for property <code>supported</code>.
 * If set to true, the user supports this feed entry
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>supported</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getSupported = function() {
	return this.getProperty("supported");
};

/**
 * Setter for property <code>supported</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSupported  new value for property <code>supported</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setSupported = function(bSupported) {
	this.setProperty("supported", bSupported);
	return this;
};


/**
 * Getter for property <code>ratingEnabled</code>.
 * Flag if rating for feed entry is enabled or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>ratingEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getRatingEnabled = function() {
	return this.getProperty("ratingEnabled");
};

/**
 * Setter for property <code>ratingEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bRatingEnabled  new value for property <code>ratingEnabled</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setRatingEnabled = function(bRatingEnabled) {
	this.setProperty("ratingEnabled", bRatingEnabled);
	return this;
};


/**
 * Getter for property <code>supportEnabled</code>.
 * This flag rules if the support feature is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>supportEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getSupportEnabled = function() {
	return this.getProperty("supportEnabled");
};

/**
 * Setter for property <code>supportEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSupportEnabled  new value for property <code>supportEnabled</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setSupportEnabled = function(bSupportEnabled) {
	this.setProperty("supportEnabled", bSupportEnabled);
	return this;
};


/**
 * Getter for property <code>avatarSrc</code>.
 * URL to user image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>avatarSrc</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedEntry.prototype.getAvatarSrc = function() {
	return this.getProperty("avatarSrc");
};

/**
 * Setter for property <code>avatarSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAvatarSrc  new value for property <code>avatarSrc</code>
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.setAvatarSrc = function(sAvatarSrc) {
	this.setProperty("avatarSrc", sAvatarSrc);
	return this;
};

	
/**
 * Getter for aggregation <code>comments</code>.<br/>
 * Comments on the entry
 * 
 * @return {sap.ui.ux3.feed.CommentEntry[]}
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.getComments = function() {
	return this.getAggregation("comments", []);
};


/**
 * Inserts a comment into the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.feed.CommentEntry}
 *          oComment the comment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the comment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the comment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the comment is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.insertComment = function(oComment, iIndex) {
	this.insertAggregation("comments", oComment, iIndex);
	return this;
};

/**
 * Adds some comment <code>oComment</code> 
 * to the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.feed.CommentEntry}
 *            oComment the comment to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.feed.FeedEntry.prototype.addComment = function(oComment) {
	this.addAggregation("comments", oComment);
	return this;
};

/**
 * Removes an comment from the aggregation named <code>comments</code>.
 *
 * @param {int | string | sap.ui.ux3.feed.CommentEntry} vComment the comment to remove or its index or id
 * @return {sap.ui.ux3.feed.CommentEntry} the removed comment or null
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.removeComment = function(vComment) {
	return this.removeAggregation("comments", vComment);
};

/**
 * Removes all the controls in the aggregation named <code>comments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.feed.CommentEntry[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.removeAllComments = function() {
	return this.removeAllAggregation("comments");
};

/**
 * Checks for the provided <code>sap.ui.ux3.feed.CommentEntry</code> in the aggregation named <code>comments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.feed.CommentEntry}
 *            oComment the comment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.indexOfComment = function(oComment) {
	return this.indexOfAggregation("comments", oComment);
};
	

/**
 * Destroys all the comments in the aggregation 
 * named <code>comments</code>.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.destroyComments = function() {
	this.destroyAggregation("comments");
	return this;
};

	
/**
 * Getter for aggregation <code>customActions</code>.<br/>
 * Custom actions to add to Action Menu
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.getCustomActions = function() {
	return this.getAggregation("customActions", []);
};


/**
 * Inserts a customAction into the aggregation named <code>customActions</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oCustomAction the customAction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the customAction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the customAction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the customAction is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.insertCustomAction = function(oCustomAction, iIndex) {
	this.insertAggregation("customActions", oCustomAction, iIndex);
	return this;
};

/**
 * Adds some customAction <code>oCustomAction</code> 
 * to the aggregation named <code>customActions</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oCustomAction the customAction to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.feed.FeedEntry.prototype.addCustomAction = function(oCustomAction) {
	this.addAggregation("customActions", oCustomAction);
	return this;
};

/**
 * Removes an customAction from the aggregation named <code>customActions</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vCustomAction the customAction to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed customAction or null
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.removeCustomAction = function(vCustomAction) {
	return this.removeAggregation("customActions", vCustomAction);
};

/**
 * Removes all the controls in the aggregation named <code>customActions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.removeAllCustomActions = function() {
	return this.removeAllAggregation("customActions");
};

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>customActions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oCustomAction the customAction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.indexOfCustomAction = function(oCustomAction) {
	return this.indexOfAggregation("customActions", oCustomAction);
};
	

/**
 * Destroys all the customActions in the aggregation 
 * named <code>customActions</code>.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.destroyCustomActions = function() {
	this.destroyAggregation("customActions");
	return this;
};


/**
 * Raised when a comment is added to the entry 
 *
 * @name sap.ui.ux3.feed.FeedEntry#commentAdded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'commentAdded' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 * Raised when a comment is added to the entry 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.attachCommentAdded = function(oData, fnFunction, oListener) {
	this.attachEvent("commentAdded", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'commentAdded' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.detachCommentAdded = function(fnFunction, oListener) {
	this.detachEvent("commentAdded", fnFunction, oListener);
	return this;	
};

/**
 * Fire event commentAdded to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedEntry.prototype.fireCommentAdded = function(mArguments) {
	this.fireEvent("commentAdded", mArguments);
	return this;
};


/**
 * Raised when user click to support the entry 
 *
 * @name sap.ui.ux3.feed.FeedEntry#toggleSupported
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.supported is supported
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleSupported' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 * Raised when user click to support the entry 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.attachToggleSupported = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleSupported", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleSupported' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.detachToggleSupported = function(fnFunction, oListener) {
	this.detachEvent("toggleSupported", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleSupported to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'supported' of type <code>boolean</code> is supported</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedEntry.prototype.fireToggleSupported = function(mArguments) {
	this.fireEvent("toggleSupported", mArguments);
	return this;
};


/**
 * Raised when user click to flag the entry. 
 *
 * @name sap.ui.ux3.feed.FeedEntry#toggleFlag
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.flagged flagged
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleFlag' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 * Raised when user click to flag the entry. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.attachToggleFlag = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleFlag", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleFlag' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.detachToggleFlag = function(fnFunction, oListener) {
	this.detachEvent("toggleFlag", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleFlag to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'flagged' of type <code>boolean</code> flagged</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedEntry.prototype.fireToggleFlag = function(mArguments) {
	this.fireEvent("toggleFlag", mArguments);
	return this;
};


/**
 * raised when user rates the entry. 
 *
 * @name sap.ui.ux3.feed.FeedEntry#rated
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.ratingValue rating value
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'rated' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 * raised when user rates the entry. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.attachRated = function(oData, fnFunction, oListener) {
	this.attachEvent("rated", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'rated' event of this <code>sap.ui.ux3.feed.FeedEntry</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedEntry.prototype.detachRated = function(fnFunction, oListener) {
	this.detachEvent("rated", fnFunction, oListener);
	return this;	
};

/**
 * Fire event rated to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'ratingValue' of type <code>int</code> rating value</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedEntry} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedEntry.prototype.fireRated = function(mArguments) {
	this.fireEvent("rated", mArguments);
	return this;
};


// Start of sap/ui/ux3/feed/FeedEntry.js
///**
// * This file defines behavior for the control,
// */

sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY = 2;

/**
 * initialize FeedEntry
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.init = function(){

	var sPrefixIcon = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/feed/";

	var sIconSelected =  	sPrefixIcon + "relevantSelected.png";
	var sIconUnselected = 	sPrefixIcon + "relevantUnselected.png";
	var sIconHovered = 		sPrefixIcon + "relevantHovered.png";

	//Rating indicator used for Relevant rating
	if(this.getRatingEnabled()){
		this.oRatingIndicator = new sap.ui.commons.RatingIndicator( this.getId() + "_rating",
				{iconSelected:sIconSelected, iconUnselected:sIconUnselected, iconHovered:sIconHovered});
		this.oRatingIndicator.setValue(this.getRating());
		this.oRatingIndicator.attachChange(this.addRating, this);
		this.oRatingIndicator.setParent(this);
	}

	//Feeder used to enter new comments
	this.oFeederComment = new sap.ui.ux3.feed.Feeder(this.getId() + "-feederComment",{mode:sap.ui.ux3.feed.FeederMode.FeederComment});
	this.oFeederComment.attachSubmitPress(this.addNewComment, this);
	this.oFeederComment.setParent(this);

	this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	if(this.getSupportEnabled()){
		this.oSupportLabel = new sap.ui.commons.Label(this.getId()+"_supportLabel");
	}

	//RowRepeater used to diplay comments
	this.oComments = new sap.ui.commons.RowRepeater(this.getId() + "_comments",{ design:sap.ui.commons.RowRepeaterDesign.BareShell, numberOfRows:sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY});
	this.oComments.setParent(this);

	//Are the comments expanded? (Expanded: see all comments, collapsed: see only sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY first comments)
	this.bCommentsExpanded = true;
};


/**
 * Changes the Comments title, based on the Expand status
 *
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.updateCommentsTitle = function(){

	var oFeedEntryExpand 	= jQuery.sap.byId(this.getId()+"-CommentExp");
	var oFeedEntryLabel 	= jQuery.sap.byId(this.getId()+"-CommentLabel");

	var iNbrComments = this.getComments().length;

	if(!oFeedEntryExpand || !oFeedEntryLabel){
		return;
	}

	if(iNbrComments==0){
		//No comments, no comment title
		oFeedEntryExpand.hide();
		oFeedEntryLabel.hide();
	}
	else if(this.bCommentsExpanded){
		//Comments are expanded
		oFeedEntryExpand.hide();
		var txtName = "FEEDENTRY_LABEL_EXP_COMMENT";
		if(iNbrComments>1){txtName += "S"}
		oFeedEntryLabel.text(this.oResourceBundle.getText(txtName).replace("{0}", iNbrComments));
		oFeedEntryLabel.show();
	}
	else{
		oFeedEntryExpand.text(this.oResourceBundle.getText("FEEDENTRY_LABEL_COL_COMMENTS").replace("{0}", iNbrComments));
		oFeedEntryExpand.show();
		oFeedEntryLabel.hide();
	}

};

sap.ui.ux3.feed.FeedEntry.prototype.onclick = function (oEvent) {
	 if (oEvent.target && oEvent.target.className){

		//Support this feed entry
		if ( jQuery(oEvent.target).hasClass("sapUiFeedSupport") ){
			this.doToggleSupported();
		}
		//Unsupport this feed entry
		else if ( jQuery(oEvent.target).hasClass("sapUiFeedUnsupport") ){
			this.doToggleSupported();
		}
		//(Un)Flag this feed entry
		else if ( jQuery(oEvent.target).hasClass("sapUiFeedFlag") ){
			this.doToggleFlag();
		}
		//Delete this entry from the row repeater aggregation
		else if (jQuery(oEvent.target).hasClass("sapUiEntryDeletable")){
			this.fireDeleted();
		}

		else if (jQuery(oEvent.target).hasClass("sapUiExpandComments")){

			if(!this.bCommentsExpanded){
				//Expand comments
				this.oComments.setNumberOfRows(null);
				this.bCommentsExpanded = true;
			}
			else{
				//Collapse comments
				this.oComments.setNumberOfRows(sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY);
				this.bCommentsExpanded = false;
			}

			//Comments title needs to be updated
			this.updateCommentsTitle();
		}

	}
}

/**
 * Adds a new comment to FeedEntry
 *
 * @param oEvent The event object
 *
 * @private
 */;
sap.ui.ux3.feed.FeedEntry.prototype.addNewComment = function (oEvent){
	//Get comment text
	var textInput = oEvent.getParameters().content;

	//Create the new feed entry
	var oCommentEntry = new sap.ui.ux3.feed.CommentEntry();
	//TODO: "You" should come from somewhere else ??
	oCommentEntry.setText("<thing id='id1' class='p12e_prep'>"+ this.oResourceBundle.getText("FEED_YOU") +"</thing>:" + textInput);

	oCommentEntry.setLogoSrc(this.getAvatarSrc());

	oCommentEntry.setLastChanged(sap.ui.ux3.feed.BaseFeedEntry.toISOString(new Date()));

	//Insert the entry at first index
	this.insertComment(oCommentEntry,0);
	this.fireCommentAdded();

	//Clear the feeder
	this.oFeederComment.setText("");
};

/**
 * toggle flag
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.doToggleFlag = function (){
	this.getFlagged()?this.setFlagged(false) : this.setFlagged(true);
	this.fireToggleFlag({flagged: this.getFlagged()});
};

/**
 * toggle Support
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.doToggleSupported = function (){

	this.setSupported(!this.getSupported());

	if ( this.getSupported() ){
		this.oSupportLabel.setText(this.oResourceBundle.getText("UNSUPPORT"));
		this.setNumberOfSupport(this.getNumberOfSupport() + 1);
	}else{
		this.oSupportLabel.setText(this.oResourceBundle.getText("SUPPORT"));
		this.setNumberOfSupport(this.getNumberOfSupport() - 1);
	}

	this.fireToggleSupported({supported: this.getSupported()});
};

/**
 * Handle change of RatingIndicator
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.addRating = function (oEvent){
	this.setNumberOfRatings(this.getNumberOfRatings()+1);
	this.fireRated({ratingValue: this.oRatingIndicator.getValue()});
};

/**************************************************************************
* Overwriting Comments aggregation functions to dispatch to rowRepeater
* @public
**************************************************************************/
sap.ui.ux3.feed.FeedEntry.prototype.getComments = function() {
	return this.oComments.getRows();
};

sap.ui.ux3.feed.FeedEntry.prototype.insertComment = function(oComment, iIndex) {
	this.oComments.insertRow(oComment, iIndex);
	oComment.attachEvent("deleted", this.handleCommentEntryDelete, this);

	var tmp1 = this.getComments().length;

	if(this.bCommentsExpanded && this.getComments().length > sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY){
		this.bCommentsExpanded = false;
	}

	this.updateCommentsTitle();
	return this;
};

sap.ui.ux3.feed.FeedEntry.prototype.addComment = function(oComment) {
	this.oComments.addRow(oComment);
	oComment.attachEvent("deleted", this.handleCommentEntryDelete, this);

	if(this.bCommentsExpanded && this.getComments().length > sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY){
		this.bCommentsExpanded = false;
	}

	this.updateCommentsTitle();

	return this;
};

sap.ui.ux3.feed.FeedEntry.prototype.removeComment = function(vElement) {
	var r = this.oComments.removeRow(vElement);

	if(this.getComments().length <= sap.ui.ux3.feed.FeedEntry.NUMBER_OF_COMMENTS_DISPLAY){
		this.bCommentsExpanded = true;
	}

	this.updateCommentsTitle();
	return r;
};

sap.ui.ux3.feed.FeedEntry.prototype.removeAllComments = function() {
	this.bCommentsExpanded = true;
	this.updateCommentsTitle();
	return this.oComments.removeAllRows();
};

sap.ui.ux3.feed.FeedEntry.prototype.indexOfComment = function(oComment) {
	return this.oComments.indexOfRow(oComment);
};

sap.ui.ux3.feed.FeedEntry.prototype.destroyComments = function() {
	this.bCommentsExpanded = true;
	this.updateCommentsTitle();
	this.oComments.destroyRows();
	return this;
};

/**
 * Event handler for deleting comment entries
 * @private
 */
sap.ui.ux3.feed.FeedEntry.prototype.handleCommentEntryDelete = function(oEvent) {
	this.oComments.removeRow(oEvent.oSource);
};

/**************************************************************************
* Overwriting RatingIndicator setter to forward value
* @public
**************************************************************************/
sap.ui.ux3.feed.FeedEntry.prototype.setRating = function(fRating) {
	this.setProperty("rating", fRating);
	this.oRatingIndicator.setValue(fRating);
	return this;
};
}; // end of sap.ui.ux3.feed.FeedEntry
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.Feeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.feed.Feeder.
jQuery.sap.declare("sap.ui.ux3.feed.Feeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new feed/Feeder.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>imageSrc : string</li>
 * <li>text : string</li>
 * <li>mode : sap.ui.ux3.feed.FeederMode</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>submitPress : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>pillClick : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Feeder control
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.1. 
 * new Feed control: sap.ui.ux3.Feeder
 */
sap.ui.ux3.feed.Feeder = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'feed/Feeder'.");
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.feed.Feeder.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.feed.Feeder. 
 * Resulting metadata can be obtained via sap.ui.ux3.feed.Feeder.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.feed.Feeder", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getImageSrc", "setImageSrc", "getText", "setText", "getMode", "setMode", 
    // aggregations
    
    // associations
    
    // events
    "attachSubmitPress", "detachSubmitPress", "attachPillClick", "detachPillClick"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "imageSrc" : {name : "imageSrc", type : "string", group : "Misc", defaultValue : null},
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null},
    "mode" : {name : "mode", type : "sap.ui.ux3.feed.FeederMode", group : "Misc", defaultValue : sap.ui.ux3.feed.FeederMode.FeederEntry}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "submitPress" : "submitPress", 
    "pillClick" : "pillClick"
  }

});	

sap.ui.ux3.feed.Feeder.M_EVENTS = {'submitPress':'submitPress','pillClick':'pillClick'};


/**
 * Getter for property <code>imageSrc</code>.
 * URL to user logo
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageSrc</code>
 * @public
 * 
 */
sap.ui.ux3.feed.Feeder.prototype.getImageSrc = function() {
	return this.getProperty("imageSrc");
};

/**
 * Setter for property <code>imageSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageSrc  new value for property <code>imageSrc</code>
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.setImageSrc = function(sImageSrc) {
	this.setProperty("imageSrc", sImageSrc);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * Feeder text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.feed.Feeder.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>mode</code>.
 * Display Mode. It can be either in a Feed entry Feeder, or Comment Feeder
 *
 * Default value is <code>sap.ui.ux3.feed.FeederMode.FeederEntry</code>
 *
 * @return {sap.ui.ux3.feed.FeederMode} the value of property <code>mode</code>
 * @public
 * 
 */
sap.ui.ux3.feed.Feeder.prototype.getMode = function() {
	return this.getProperty("mode");
};

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>sap.ui.ux3.feed.FeederMode.FeederEntry</code> 
 *
 * @param {sap.ui.ux3.feed.FeederMode} oMode  new value for property <code>mode</code>
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.setMode = function(oMode) {
	this.setProperty("mode", oMode);
	return this;
};


/**
 * Feeder content is submitted 
 *
 * @name sap.ui.ux3.feed.Feeder#submitPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.content Feed entry content
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'submitPress' event of this <code>sap.ui.ux3.feed.Feeder</code>.<br/>
 * Feeder content is submitted 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.attachSubmitPress = function(oData, fnFunction, oListener) {
	this.attachEvent("submitPress", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'submitPress' event of this <code>sap.ui.ux3.feed.Feeder</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.detachSubmitPress = function(fnFunction, oListener) {
	this.detachEvent("submitPress", fnFunction, oListener);
	return this;	
};

/**
 * Fire event submitPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'content' of type <code>string</code> Feed entry content</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.Feeder.prototype.fireSubmitPress = function(mArguments) {
	this.fireEvent("submitPress", mArguments);
	return this;
};


/**
 * An given pill is clicked 
 *
 * @name sap.ui.ux3.feed.Feeder#pillClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pillId Pill id
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'pillClick' event of this <code>sap.ui.ux3.feed.Feeder</code>.<br/>
 * An given pill is clicked 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.attachPillClick = function(oData, fnFunction, oListener) {
	this.attachEvent("pillClick", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'pillClick' event of this <code>sap.ui.ux3.feed.Feeder</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.Feeder.prototype.detachPillClick = function(fnFunction, oListener) {
	this.detachEvent("pillClick", fnFunction, oListener);
	return this;	
};

/**
 * Fire event pillClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pillId' of type <code>string</code> Pill id</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.Feeder.prototype.firePillClick = function(mArguments) {
	this.fireEvent("pillClick", mArguments);
	return this;
};


// Start of sap/ui/ux3/feed/Feeder.js
jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained


//Variable to keep the next pill id, to avoid having duplicate id.
sap.ui.ux3.feed.Feeder.iPillNextId = 1;

sap.ui.ux3.feed.Feeder.prototype.init = function(){
	this.oMenu = null;
	this._bSubmitEnabled = false;
	this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
};


/**
 * Displays menu with corresponding entities
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.displayKnownEntities = function(){

	if(!this.oMenu){
		this.oMenu = new sap.ui.commons.Menu(this.getId()+"Menu");

		//TODO: Corresponding entitities have to come from outside
		var item1 = new sap.ui.commons.MenuItem(this.oMenu.getId()+"1", {text: "Thing1"});
		item1.attachSelect(this.onEntitySelected, this);
		this.oMenu.addItem(item1);

		var item2 = new sap.ui.commons.MenuItem(this.oMenu.getId()+"2", {text: "Thing2"});
		item2.attachSelect(this.onEntitySelected, this);
		this.oMenu.addItem(item2);
	}

	var eDock = sap.ui.core.Popup.Dock;

	this.oMenu.open(false, this.oDomInput,eDock.BeginTop, eDock.BeginBottom,this.oDomInput);


};

/**
 * Handles when users selects an entity in the menu
 *
 * @param oEvent Event Object
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onEntitySelected = function(oEvent){
	this.addPill(oEvent.oSource.getText());
};

/**
 * Adds a pill at the current cursor index
 *
 * @param sText Text reprensenting the selected entities
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.addPill = function(sText){

	var id = "pill-" + sap.ui.ux3.feed.Feeder.iPillNextId++; // TODO: Build a real id
	var pillHtml = "<span id='"+ id +"'contenteditable='false' class='sapUiFeederOldPill'>@"+ sText +"</span>";

	var sInnerHTML = this.oDomInput.html();

	//Insert pill Html inside current input html
	sInnerHTML =
	sInnerHTML.substr(0,this.iCurrentCursorHTMLPos)
	+ pillHtml
	+ sInnerHTML.substr(this.iCurrentCursorHTMLPos);


	this.oDomInput.html(sInnerHTML);

	//Set cursor just after the new pill
	var oNewPill = jQuery.sap.byId(id);
	this.setCursorAfter(oNewPill[0]);

	//Updates state button, as the pill could be the first content
	this.updateButtonState();

	//Updates cursors position variable
	this.iCurrentCursorPos = this.getCursorPos();
	this.iCurrentCursorHTMLPos = this.getCursorHTMLPos();

};


/**
 * Helper function to set a character, at a given position, inside a string.
 *
 * @param str 	String to be updated
 * @param index index of the character to be updated
 * @param chr 	New character to insert
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.setCharAt = function(str,index,chr) {
	if(index > str.length-1) {
		return str;
	}
	return str.substr(0,index) + chr + str.substr(index+1);
}

/**
 * Overriding Setter for property <code>text</code> to set text inside input field and update button state.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.feed.Feeder} <code>this</code> to allow method chaining
 * @public
 */
;
sap.ui.ux3.feed.Feeder.prototype.setText = function(sText) {
	this.setProperty("text", sText, true);

	if(this.oDomInput){
		this.oDomInput.html(sText);
		this.updateButtonState();
	}

};

/**
 * Returns current position (index) of cursor, based on text content of the input field
 *
 * @return The position.
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.getCursorPos = function() {

	var pos = 0;

	if(document.getSelection){
		var sel = window.getSelection().getRangeAt(0);
		 pos = sel.startOffset;
	 } else {
		 var range = document.selection.createRange();
		 var rangeCopy = range.duplicate();
		 rangeCopy.moveToElementText(this.oDomInput[0]);
		 rangeCopy.setEndPoint( 'EndToEnd', range );
		 pos = rangeCopy.text.length - range.text.length;
	}
	 jQuery.sap.log.warning("Pos: " + pos);
	 return pos;

};

/**
 * Returns current position (index) of cursor, based on html content of the input field
 *
 * @return The position.
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.getCursorHTMLPos = function(){

	var pos = 0;

	if(document.getSelection){

		var sel = window.getSelection().getRangeAt(0);
		var sInnerHTML = this.oDomInput.html();

		var text1 = "";
		var text2 = "";
		//Replace nbsp space with regular space to avoid differences between strings
		text1 = sInnerHTML.replace(/(\s|&nbsp;|&\#160;)+/gi, " ");

		if(sel.startContainer.wholeText){
			text2 = sel.startContainer.wholeText.replace(/(\s|&nbsp;|&\#160;)+/gi, " ");
		}

		var offset = text1.indexOf(text2);


		if(offset == -1){
			//Should not happen!
			jQuery.sap.log.warning("OFFSET NOT FOUND!!!!!!");
			offset = 0
		}

		pos = offset + sel.startOffset;


	 } else {
		 var range = document.selection.createRange();
		 var rangeCopy = range.duplicate();
		 rangeCopy.moveToElementText(this.oDomInput[0]);
		 rangeCopy.setEndPoint( 'EndToEnd', range );
		 pos = rangeCopy.htmlText.length - range.htmlText.length;
	}
	jQuery.sap.log.warning("HTML Pos: " + pos);
	return pos;
}

/**
 * Set the cursor after a given DOM Object
 *
 * @param oDomNode	The given DOM object
 *
 * @private
 */;
sap.ui.ux3.feed.Feeder.prototype.setCursorAfter = function(oDomNode) {
	if(document.getSelection){
		var sel = window.getSelection().getRangeAt(0);
		sel.setStartAfter(oDomNode);
		sel.setEndAfter(oDomNode);

	 } else {
		 //TODO: Implementation missing the getSelection function is unavailable (Needed for one of our supported browser ?)
	}
} ;

/**
 * Returns the current Feeder content. It converts pills from HTML
 * format to Feed format
 *
 * @param oStep The step to add. If empty, nothing is inserted.
 * @return oStep The step to add. If empty, nothing is inserted.
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.getContentFromHTML = function(sHTML) {
	var sContent = sHTML;
	//TODO: remove @
	sContent = sContent.replace(/<span/g, "<thing");
	sContent = sContent.replace(/<\/span>/g, "</thing>");
	sContent = sContent.replace(/sapUiFeederOldPill/g, "p12e");
	sContent = sContent.replace(/contenteditable=\'false\'/g, "");
	sContent = sContent.replace(/&nbsp;/g, " ");

	//Firefox is adding br everywhere, we need to remove them
	if(jQuery.browser.mozilla){
		sContent = sContent.replace(/<br _moz_dirty=''>/g, "");
	}

	return sContent;
};

/**
 * After rendering, keep the input field jQuery object as attribute
 * for reuse
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onAfterRendering = function () {
	if(!this.oDomInput){
		this.oDomInput = jQuery.sap.byId(this.getId()+"_input");
		this.updateButtonState();
	}
};

/**
 * Enables/Disable the Submit button depending if the input field is empty or not
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.updateButtonState = function () {
	var oDomButton = jQuery.sap.byId(this.getId()+"_btn");
	this._bSubmitEnabled = jQuery.trim(this.oDomInput.text()).length > 0;
	if(this.getMode() == sap.ui.ux3.feed.FeederMode.FeederComment && this.oDomInput.text()==this.oResourceBundle.getText("FEEDER_COMMENT_INPLACE")){
		this._bSubmitEnabled = false;
	}
	oDomButton.toggleClass("sapUiFeederOldBtnDsbl", !this._bSubmitEnabled).attr("tabindex", this._bSubmitEnabled?0:1);
};

/*********************************************************************************************/
/** Events handlers 																		**/
/*********************************************************************************************/

/**
 * Onclick handler
 *
 * @param oEvent Event Object
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onclick = function(oEvent) {

	var oDomClicked = oEvent.srcElement ?  oEvent.srcElement : oEvent.target;

	if(jQuery(oDomClicked).is(".sapUiFeederOldBtn") && this._bSubmitEnabled){
		this.fireSubmitPress({content:this.getContentFromHTML(this.oDomInput.html())});
		this.updateButtonState();
	}else if(jQuery(oDomClicked).is(".sapUiFeederOldPill")){
		this.firePillClick({pillId:oDomClicked.id});
	}
} ;



/**
 * Handles focus in event. It removes in "Place holder" (Write a comment..)
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onfocusin = function () {
	if(this.getMode() == sap.ui.ux3.feed.FeederMode.FeederComment){
		this.oDomInput.find(".sapUiFeederOldCommentPlaceHolder").remove();
	}
};

/**
 * Handles focus out event. It adds the "Place holder" back if the field is empty
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onfocusout = function () {
	//Remove invisible Br added by Firefox
	if(jQuery.browser.mozilla){
		this.oDomInput.find("br[_moz_dirty]").remove();
	}

	if(this.getMode() == sap.ui.ux3.feed.FeederMode.FeederComment && this.oDomInput.text() == ""){
		this.oDomInput.append(sap.ui.ux3.feed.FeederRenderer.getCommentPlaceHolderHTML(this));
	}


};

/**
 * Handles keyUp event. Updates the state of the submit button and clean the Input
 *
 * @param oEvent Event Object
 *
 * @private
 */
sap.ui.ux3.feed.Feeder.prototype.onkeyup = function(oEvent){

	if(this._bSubmitEnabled != jQuery.trim(this.oDomInput.text()).length > 0){

		this.updateButtonState();
	}

	//Clean input so we avoid having invisible DOM content
	if(!this.oDomInput.text()){
		this.oDomInput.empty();
	}
}

/**
 * Handles keyPress event to triggers pill.
 *
 * @param oEvent Event Object
 *
 * @private
 */;
sap.ui.ux3.feed.Feeder.prototype.onkeypress = function(oEvent){

	 this.iCurrentCursorPos = this.getCursorPos();
	 this.iCurrentCursorHTMLPos = this.getCursorHTMLPos();

	//If typing "@", display menu with corresponding entities
	if (oEvent.charCode == 64 || oEvent.keyCode == 64){
		 cancel = true; //Cancel so the "@" won't be outputed (It's included inside the pill)

		 //Keeps a trace of where is the cursor in the input field
		 this.iCurrentCursorPos = this.getCursorPos();
		 this.iCurrentCursorHTMLPos = this.getCursorHTMLPos();

		 //Display menu with corresponding entities
		 this.displayKnownEntities();
	}

	//Following logic is a workaround to avoid the pill to be screwed up when used press DEL or BACKSPACE
	if ( jQuery.browser.mozilla &&
		(oEvent.charCode == 8 || oEvent.keyCode == 8 || //Backspace button
		oEvent.charCode == 46 || oEvent.keyCode == 46)){ //Delete button

		var cancel = false;
		var index = this.iCurrentCursorHTMLPos;
		var sHtml = this.oDomInput.html();

		if((oEvent.charCode == 8 || oEvent.keyCode == 8) && sHtml[index-1] == ">"){ //Backspace button
			cancel = true;
		}

		if((oEvent.charCode == 46 || oEvent.keyCode == 46) && sHtml[index] == "<"){ //Delete button
			cancel = true;
		}

	}
	if(cancel){
	 // Stop the event
	 oEvent.preventDefault();
	 return false;
	}


};
}; // end of sap.ui.ux3.feed.Feeder
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.FeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.feed.Feeder
jQuery.sap.declare("sap.ui.ux3.feed.FeederRenderer");

/**
 * @class Feeder renderer.
 * @static
 */
sap.ui.ux3.feed.FeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.feed.FeederRenderer.render = function(oRenderManager, oControl){

	//convenience variable
	var rm = oRenderManager;
	rm.write("<div");
	rm.writeControlData(oControl);

	rm.addClass("sapUiFeederOld");

	if(oControl.getMode() == sap.ui.ux3.feed.FeederMode.FeederEntry){
		rm.addClass("sapUiFeederOldEntry");
	}
	else if(oControl.getMode() == sap.ui.ux3.feed.FeederMode.FeederComment){
		rm.addClass("sapUiFeederOldComment");
	}
	rm.writeClasses();
	rm.write(">");

	if(oControl.getMode() == sap.ui.ux3.feed.FeederMode.FeederEntry){
		rm.write("<img ");
		rm.writeAttributeEscaped("src", oControl.getImageSrc());
		rm.write("class=\"sapUiFeederOldImg\" />");
	}


	rm.write("<div class=\"sapUiFeederOldContainer\">");
	rm.write("<div ");
	rm.writeAttribute("id", oControl.getId() + "_input");
	rm.write(" contenteditable=\"true\" class=\"sapUiFeederOldInput\">");
	rm.writeEscaped(oControl.getText());

	if( oControl.getMode() == sap.ui.ux3.feed.FeederMode.FeederComment){
		rm.write(sap.ui.ux3.feed.FeederRenderer.getCommentPlaceHolderHTML(oControl));
	}

	rm.write("</div>"); // close input
	rm.write("<button ");
	rm.writeAttribute("id", oControl.getId() + "_btn");
	rm.addClass("sapUiFeederOldBtn");
	if(!oControl._bSubmitEnabled) {
		rm.addClass("sapUiFeederOldBtnDsbl");
		rm.writeAttribute("tabindex", "-1");
	} else {
		rm.writeAttribute("tabindex", "0");
	}
	rm.writeClasses();
	rm.write("></button>");
	rm.write("</div>"); // close inner
	rm.write("</div>"); // close outer
};

sap.ui.ux3.feed.FeederRenderer.getCommentPlaceHolderHTML = function( oControl){

	return "<span class='sapUiFeederOldCommentPlaceHolder'>" + oControl.oResourceBundle.getText("FEEDER_COMMENT_INPLACE")+ "</span>";

};
}; // end of sap.ui.ux3.feed.FeederRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.FeedComponentRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.feed.FeedComponent
jQuery.sap.declare("sap.ui.ux3.feed.FeedComponentRenderer");

/**
 * @class FeedComponent renderer.
 * @static
 */
sap.ui.ux3.feed.FeedComponentRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.feed.FeedComponentRenderer.render = function(oRenderManager, oControl){
	// convenience variables
	var rm  = oRenderManager;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();
	var end = (rtl) ? "left" : "right";

	// Opening the DIV container:
	rm.write('<div class="sapUiFeedC"');
	rm.writeControlData(oControl);
	var sWidth = oControl.getWidth();
	if (!!sWidth) {
		var sStyle = 'width: '+ sWidth+';';
		rm.writeAttribute('style', sStyle);
		rm.writeStyles();
	}
	rm.write('>');

		// Including the top Feeder component:
	rm.renderControl(oControl.oFeeder);

		// Including the middle IntervalController and ActionMenu components:
	rm.write('<table class="sapUiFeedCTb1" style="width:100%;"><td align="' + end + '">');
	rm.renderControl(oControl.oIntervals);
	rm.renderControl(oControl.oAction);
	rm.write('</td></table>');

		// Including the middle Filter and Search components:
	rm.write('<table class="sapUiFeedCTb2" style="width:100%;"><td>');
	rm.renderControl(oControl.oFilter);
	rm.write('</td><td align="' + end + '">');
	rm.renderControl(oControl.oSearch);
	rm.write('</td></table>');

		// Including the bottom RowRepeater (hosting the Feed Entries) component:
	rm.renderControl(oControl.oFeed);

	// Closing the DIV container:
	rm.write('</div>');
};
}; // end of sap.ui.ux3.feed.FeedComponentRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.CommentEntryRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.feed.CommentEntry
jQuery.sap.declare("sap.ui.ux3.feed.CommentEntryRenderer");

/**
 * @class CommentEntry renderer.
 * @static
 */
sap.ui.ux3.feed.CommentEntryRenderer = {
};

sap.ui.ux3.feed.CommentEntryRenderer.defaultIcon = "/img/feed/person.png";


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.feed.CommentEntryRenderer.render = function(oRenderManager, oControl){
	// convenience variable
  var rm = oRenderManager;
  var sIcon;

  rm.write("<div");
  rm.writeControlData(oControl);
  rm.addClass("sapUiComment");

  rm.writeClasses();

  rm.write(">");

  if(oControl.getDeletionAllowed()){
	rm.write('<div class="sapUiCommentDeletable">X</div>');
  }

  if(oControl.getLogoSrc()){
	sIcon = oControl.getLogoSrc();
  } else {
	sIcon = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.ux3.feed.CommentEntryRenderer.defaultIcon;
  }

  rm.write("<img");
  rm.writeAttribute("class","sapUiCommentIcon");
  rm.writeAttributeEscaped("src", sIcon);
  rm.write(">");

  rm.write("<span");
  rm.writeAttribute("class","sapUiCommentText");
  rm.write(">");
  rm.write(oControl.buildText());
  rm.write("</span>");

  rm.write("<span");
  rm.writeAttribute("class","sapUiCommentDate");
  rm.write(">");
  rm.write(oControl.buildTime());
  rm.write("</span>");

  rm.write("</div>");
};
}; // end of sap.ui.ux3.feed.CommentEntryRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.CommentEntry') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.feed.CommentEntry.
jQuery.sap.declare("sap.ui.ux3.feed.CommentEntry");



/**
 * Constructor for a new feed/CommentEntry.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.ux3.feed.BaseFeedEntry#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Comment Entry
 * @extends sap.ui.ux3.feed.BaseFeedEntry
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.1. 
 * new Feed control: sap.ui.ux3.FeedChunk
 */
sap.ui.ux3.feed.CommentEntry = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'feed/CommentEntry'.");
	sap.ui.ux3.feed.BaseFeedEntry.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.feed.CommentEntry.prototype = jQuery.sap.newObject(sap.ui.ux3.feed.BaseFeedEntry.prototype);

/*
 * Describe the sap.ui.ux3.feed.CommentEntry. 
 * Resulting metadata can be obtained via sap.ui.ux3.feed.CommentEntry.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.feed.CommentEntry", {

  // ---- object ----
  baseType : "sap.ui.ux3.feed.BaseFeedEntry",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/ux3/feed/CommentEntry.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.feed.CommentEntry.prototype.init = function(){
//};

sap.ui.ux3.feed.CommentEntry.prototype.onclick = function (oEvent) {
	 if (oEvent.target && oEvent.target.className){

		//Delete this entry from the row repeater aggregation
		if (jQuery(oEvent.target).hasClass("sapUiCommentDeletable")){
			this.fireDeleted();
		}
	}
};
}; // end of sap.ui.ux3.feed.CommentEntry
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.FeedComponent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.feed.FeedComponent.
jQuery.sap.declare("sap.ui.ux3.feed.FeedComponent");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new feed/FeedComponent.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>refreshIntervals : int[]</li>
 * <li>filterValue : string</li>
 * <li>refreshIntervalValue : int</li>
 * <li>searchValue : string</li>
 * <li>maxVisibleFeeds : int</li>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>avatarSrc : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>feedEntries : sap.ui.ux3.feed.FeedEntry</li>
 * <li>customActions : sap.ui.commons.MenuItem</li>
 * <li>customFilters : sap.ui.core.Item</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>feed : sap.ui.commons.RowRepeater</li>
 * <li>feeder : sap.ui.ux3.feed.Feeder</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>searchTrigger : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>filter : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>refreshIntervalChange : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>action : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Feed and FeedEntries Container.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.1.1. 
 * new Feed control: sap.ui.ux3.Feed
 */
sap.ui.ux3.feed.FeedComponent = function (sId, mSettings) {
	jQuery.sap.log.warning("Using deprecated control 'feed/FeedComponent'.");
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.feed.FeedComponent.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.feed.FeedComponent. 
 * Resulting metadata can be obtained via sap.ui.ux3.feed.FeedComponent.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.feed.FeedComponent", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getRefreshIntervals", "setRefreshIntervals", "getFilterValue", "setFilterValue", "getRefreshIntervalValue", "setRefreshIntervalValue", "getSearchValue", "setSearchValue", "getMaxVisibleFeeds", "setMaxVisibleFeeds", "getWidth", "setWidth", "getAvatarSrc", "setAvatarSrc", 
    // aggregations
    "getFeedEntries", "insertFeedEntry", "addFeedEntry", "removeFeedEntry", "removeAllFeedEntries", "indexOfFeedEntry", "destroyFeedEntries", "bindFeedEntries", "unbindFeedEntries", "getCustomActions", "insertCustomAction", "addCustomAction", "removeCustomAction", "removeAllCustomActions", "indexOfCustomAction", "destroyCustomActions", "getCustomFilters", "insertCustomFilter", "addCustomFilter", "removeCustomFilter", "removeAllCustomFilters", "indexOfCustomFilter", "destroyCustomFilters", 
    // associations
    "getFeed", "setFeed", "getFeeder", "setFeeder", 
    // events
    "attachSearchTrigger", "detachSearchTrigger", "attachFilter", "detachFilter", "attachRefreshIntervalChange", "detachRefreshIntervalChange", "attachAction", "detachAction"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "refreshIntervals" : {name : "refreshIntervals", type : "int[]", group : "Misc", defaultValue : null},
    "filterValue" : {name : "filterValue", type : "string", group : "Misc", defaultValue : null},
    "refreshIntervalValue" : {name : "refreshIntervalValue", type : "int", group : "Misc", defaultValue : 0},
    "searchValue" : {name : "searchValue", type : "string", group : "Misc", defaultValue : null},
    "maxVisibleFeeds" : {name : "maxVisibleFeeds", type : "int", group : "Misc", defaultValue : 3},
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
    "avatarSrc" : {name : "avatarSrc", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {
    "feedEntries" : {name : "feedEntries", type : "sap.ui.ux3.feed.FeedEntry", multiple : true, singularName : "feedEntry"}, 
    "customActions" : {name : "customActions", type : "sap.ui.commons.MenuItem", multiple : true, singularName : "customAction"}, 
    "customFilters" : {name : "customFilters", type : "sap.ui.core.Item", multiple : true, singularName : "customFilter"}
  },
  associations : {
    "feed" : {name : "feed", type : "sap.ui.commons.RowRepeater", multiple : false}, 
    "feeder" : {name : "feeder", type : "sap.ui.ux3.feed.Feeder", multiple : false}
  },
  events : {
    "searchTrigger" : "searchTrigger", 
    "filter" : "filter", 
    "refreshIntervalChange" : "refreshIntervalChange", 
    "action" : "action"
  }

});	

sap.ui.ux3.feed.FeedComponent.M_EVENTS = {'searchTrigger':'searchTrigger','filter':'filter','refreshIntervalChange':'refreshIntervalChange','action':'action'};


/**
 * Getter for property <code>refreshIntervals</code>.
 * Custom intervals, in seconds, not including:
 * - "0" as "Live"
 * - "-1" as "Pause"
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int[]} the value of property <code>refreshIntervals</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getRefreshIntervals = function() {
	return this.getProperty("refreshIntervals");
};

/**
 * Setter for property <code>refreshIntervals</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int[]} aRefreshIntervals  new value for property <code>refreshIntervals</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setRefreshIntervals = function(aRefreshIntervals) {
	this.setProperty("refreshIntervals", aRefreshIntervals);
	return this;
};


/**
 * Getter for property <code>filterValue</code>.
 * Active filter string.
 * Defaults to "All", i.e. to not filtering.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>filterValue</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getFilterValue = function() {
	return this.getProperty("filterValue");
};

/**
 * Setter for property <code>filterValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFilterValue  new value for property <code>filterValue</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setFilterValue = function(sFilterValue) {
	this.setProperty("filterValue", sFilterValue);
	return this;
};


/**
 * Getter for property <code>refreshIntervalValue</code>.
 * Selected refresh interval (in seconds).
 * "0" stands for "Live" feed.
 * "-1" stands for a "Pause" in the feed.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>refreshIntervalValue</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getRefreshIntervalValue = function() {
	return this.getProperty("refreshIntervalValue");
};

/**
 * Setter for property <code>refreshIntervalValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iRefreshIntervalValue  new value for property <code>refreshIntervalValue</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setRefreshIntervalValue = function(iRefreshIntervalValue) {
	this.setProperty("refreshIntervalValue", iRefreshIntervalValue);
	return this;
};


/**
 * Getter for property <code>searchValue</code>.
 * The search string.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchValue</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getSearchValue = function() {
	return this.getProperty("searchValue");
};

/**
 * Setter for property <code>searchValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchValue  new value for property <code>searchValue</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setSearchValue = function(sSearchValue) {
	this.setProperty("searchValue", sSearchValue);
	return this;
};


/**
 * Getter for property <code>maxVisibleFeeds</code>.
 * Maximum number of Feeds to be displayed at once.
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>maxVisibleFeeds</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getMaxVisibleFeeds = function() {
	return this.getProperty("maxVisibleFeeds");
};

/**
 * Setter for property <code>maxVisibleFeeds</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iMaxVisibleFeeds  new value for property <code>maxVisibleFeeds</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setMaxVisibleFeeds = function(iMaxVisibleFeeds) {
	this.setProperty("maxVisibleFeeds", iMaxVisibleFeeds);
	return this;
};


/**
 * Getter for property <code>width</code>.
 * Control's width.
 * Typically:
 * - 100% to fit container
 * - <n>px to be of a fix width.
 * Defaults to "auto".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>avatarSrc</code>.
 * URL to user image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>avatarSrc</code>
 * @public
 * 
 */
sap.ui.ux3.feed.FeedComponent.prototype.getAvatarSrc = function() {
	return this.getProperty("avatarSrc");
};

/**
 * Setter for property <code>avatarSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAvatarSrc  new value for property <code>avatarSrc</code>
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setAvatarSrc = function(sAvatarSrc) {
	this.setProperty("avatarSrc", sAvatarSrc);
	return this;
};

	
/**
 * Getter for aggregation <code>feedEntries</code>.<br/>
 * Entries.
 * 
 * @return {sap.ui.ux3.feed.FeedEntry[]}
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.getFeedEntries = function() {
	return this.getAggregation("feedEntries", []);
};


/**
 * Inserts a feedEntry into the aggregation named <code>feedEntries</code>.
 *
 * @param {sap.ui.ux3.feed.FeedEntry}
 *          oFeedEntry the feedEntry to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the feedEntry should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the feedEntry is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the feedEntry is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.insertFeedEntry = function(oFeedEntry, iIndex) {
	this.insertAggregation("feedEntries", oFeedEntry, iIndex);
	return this;
};

/**
 * Adds some feedEntry <code>oFeedEntry</code> 
 * to the aggregation named <code>feedEntries</code>.
 *
 * @param {sap.ui.ux3.feed.FeedEntry}
 *            oFeedEntry the feedEntry to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.feed.FeedComponent.prototype.addFeedEntry = function(oFeedEntry) {
	this.addAggregation("feedEntries", oFeedEntry);
	return this;
};

/**
 * Removes an feedEntry from the aggregation named <code>feedEntries</code>.
 *
 * @param {int | string | sap.ui.ux3.feed.FeedEntry} vFeedEntry the feedEntry to remove or its index or id
 * @return {sap.ui.ux3.feed.FeedEntry} the removed feedEntry or null
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeFeedEntry = function(vFeedEntry) {
	return this.removeAggregation("feedEntries", vFeedEntry);
};

/**
 * Removes all the controls in the aggregation named <code>feedEntries</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.feed.FeedEntry[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeAllFeedEntries = function() {
	return this.removeAllAggregation("feedEntries");
};

/**
 * Checks for the provided <code>sap.ui.ux3.feed.FeedEntry</code> in the aggregation named <code>feedEntries</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.feed.FeedEntry}
 *            oFeedEntry the feedEntry whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.indexOfFeedEntry = function(oFeedEntry) {
	return this.indexOfAggregation("feedEntries", oFeedEntry);
};
	

/**
 * Destroys all the feedEntries in the aggregation 
 * named <code>feedEntries</code>.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.destroyFeedEntries = function() {
	this.destroyAggregation("feedEntries");
	return this;
};


/**
 * Binder for aggregation <code>feedEntries</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.bindFeedEntries = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("feedEntries", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>feedEntries</code>.
 *
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.unbindFeedEntries = function() {
	this.unbindAggregation("feedEntries");
	return this;
};

	
/**
 * Getter for aggregation <code>customActions</code>.<br/>
 * Custom actions to add to Action Menu.
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.getCustomActions = function() {
	return this.getAggregation("customActions", []);
};


/**
 * Inserts a customAction into the aggregation named <code>customActions</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oCustomAction the customAction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the customAction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the customAction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the customAction is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.insertCustomAction = function(oCustomAction, iIndex) {
	this.insertAggregation("customActions", oCustomAction, iIndex);
	return this;
};

/**
 * Adds some customAction <code>oCustomAction</code> 
 * to the aggregation named <code>customActions</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oCustomAction the customAction to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.feed.FeedComponent.prototype.addCustomAction = function(oCustomAction) {
	this.addAggregation("customActions", oCustomAction);
	return this;
};

/**
 * Removes an customAction from the aggregation named <code>customActions</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vCustomAction the customAction to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed customAction or null
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeCustomAction = function(vCustomAction) {
	return this.removeAggregation("customActions", vCustomAction);
};

/**
 * Removes all the controls in the aggregation named <code>customActions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeAllCustomActions = function() {
	return this.removeAllAggregation("customActions");
};

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>customActions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oCustomAction the customAction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.indexOfCustomAction = function(oCustomAction) {
	return this.indexOfAggregation("customActions", oCustomAction);
};
	

/**
 * Destroys all the customActions in the aggregation 
 * named <code>customActions</code>.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.destroyCustomActions = function() {
	this.destroyAggregation("customActions");
	return this;
};

	
/**
 * Getter for aggregation <code>customFilters</code>.<br/>
 * Custom filter entries.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.getCustomFilters = function() {
	return this.getAggregation("customFilters", []);
};


/**
 * Inserts a customFilter into the aggregation named <code>customFilters</code>.
 *
 * @param {sap.ui.core.Item}
 *          oCustomFilter the customFilter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the customFilter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the customFilter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the customFilter is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.insertCustomFilter = function(oCustomFilter, iIndex) {
	this.insertAggregation("customFilters", oCustomFilter, iIndex);
	return this;
};

/**
 * Adds some customFilter <code>oCustomFilter</code> 
 * to the aggregation named <code>customFilters</code>.
 *
 * @param {sap.ui.core.Item}
 *            oCustomFilter the customFilter to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.feed.FeedComponent.prototype.addCustomFilter = function(oCustomFilter) {
	this.addAggregation("customFilters", oCustomFilter);
	return this;
};

/**
 * Removes an customFilter from the aggregation named <code>customFilters</code>.
 *
 * @param {int | string | sap.ui.core.Item} vCustomFilter the customFilter to remove or its index or id
 * @return {sap.ui.core.Item} the removed customFilter or null
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeCustomFilter = function(vCustomFilter) {
	return this.removeAggregation("customFilters", vCustomFilter);
};

/**
 * Removes all the controls in the aggregation named <code>customFilters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.removeAllCustomFilters = function() {
	return this.removeAllAggregation("customFilters");
};

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>customFilters</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oCustomFilter the customFilter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.indexOfCustomFilter = function(oCustomFilter) {
	return this.indexOfAggregation("customFilters", oCustomFilter);
};
	

/**
 * Destroys all the customFilters in the aggregation 
 * named <code>customFilters</code>.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.destroyCustomFilters = function() {
	this.destroyAggregation("customFilters");
	return this;
};


/**
 * The RowRepeater wrapping the Feed entries.
 *
 * @return {string} Id of the element which is the current target of the <code>feed</code> association, or null
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.getFeed = function() {
	return this.getAssociation("feed", null);
};

/**
 * The RowRepeater wrapping the Feed entries.
 *
 * @param {string | sap.ui.commons.RowRepeater} vFeed 
 *    Id of an element which becomes the new target of this <code>feed</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setFeed = function(vFeed) {
	this.setAssociation("feed", vFeed);
	return this;
};


	
/**
 * TheFeeder to allow to create feed entries.
 *
 * @return {string} Id of the element which is the current target of the <code>feeder</code> association, or null
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.getFeeder = function() {
	return this.getAssociation("feeder", null);
};

/**
 * TheFeeder to allow to create feed entries.
 *
 * @param {string | sap.ui.ux3.feed.Feeder} vFeeder 
 *    Id of an element which becomes the new target of this <code>feeder</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setFeeder = function(vFeeder) {
	this.setAssociation("feeder", vFeeder);
	return this;
};


	
/**
 * Raised when user triggers a search. 
 *
 * @name sap.ui.ux3.feed.FeedComponent#searchTrigger
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.searchString The search pattern.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'searchTrigger' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 * Raised when user triggers a search. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.attachSearchTrigger = function(oData, fnFunction, oListener) {
	this.attachEvent("searchTrigger", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'searchTrigger' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.detachSearchTrigger = function(fnFunction, oListener) {
	this.detachEvent("searchTrigger", fnFunction, oListener);
	return this;	
};

/**
 * Fire event searchTrigger to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'searchString' of type <code>string</code> The search pattern.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedComponent.prototype.fireSearchTrigger = function(mArguments) {
	this.fireEvent("searchTrigger", mArguments);
	return this;
};


/**
 * Raised when user changes the filter value. 
 *
 * @name sap.ui.ux3.feed.FeedComponent#filter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filterValue The newly selected filter string.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 * Raised when user changes the filter value. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.attachFilter = function(oData, fnFunction, oListener) {
	this.attachEvent("filter", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("filter", fnFunction, oListener);
	return this;	
};

/**
 * Fire event filter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filterValue' of type <code>string</code> The newly selected filter string.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedComponent.prototype.fireFilter = function(mArguments) {
	this.fireEvent("filter", mArguments);
	return this;
};


/**
 * Raised when user changes the refresh interval. 
 *
 * @name sap.ui.ux3.feed.FeedComponent#refreshIntervalChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.newInterval The newly selected interval value (in seconds).
"0" stands for "Live".
"-1" stands for "Pause".
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'refreshIntervalChange' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 * Raised when user changes the refresh interval. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.attachRefreshIntervalChange = function(oData, fnFunction, oListener) {
	this.attachEvent("refreshIntervalChange", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'refreshIntervalChange' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.detachRefreshIntervalChange = function(fnFunction, oListener) {
	this.detachEvent("refreshIntervalChange", fnFunction, oListener);
	return this;	
};

/**
 * Fire event refreshIntervalChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newInterval' of type <code>int</code> The newly selected interval value (in seconds).
"0" stands for "Live".
"-1" stands for "Pause".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedComponent.prototype.fireRefreshIntervalChange = function(mArguments) {
	this.fireEvent("refreshIntervalChange", mArguments);
	return this;
};


/**
 * Raised when user selects an action from the menu. 
 *
 * @name sap.ui.ux3.feed.FeedComponent#action
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.actionName The selected action name.
"Sources" and "Feed settings" are the two possible default actions.
More actions can be configured via the "customActions" aggregation.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'action' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 * Raised when user selects an action from the menu. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.attachAction = function(oData, fnFunction, oListener) {
	this.attachEvent("action", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'action' event of this <code>sap.ui.ux3.feed.FeedComponent</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.detachAction = function(fnFunction, oListener) {
	this.detachEvent("action", fnFunction, oListener);
	return this;	
};

/**
 * Fire event action to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'actionName' of type <code>string</code> The selected action name.
"Sources" and "Feed settings" are the two possible default actions.
More actions can be configured via the "customActions" aggregation.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.feed.FeedComponent} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.feed.FeedComponent.prototype.fireAction = function(mArguments) {
	this.fireEvent("action", mArguments);
	return this;
};


// Start of sap/ui/ux3/feed/FeedComponent.js

jQuery.sap.require('sap.ui.commons.ComboBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.RowRepeater'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained


/***************************************************
* CONSTANTS DECLARATION - CLASS ATTRIBUTES
****************************************************/
sap.ui.ux3.feed.FeedComponent.INTER_EVENT_TIMEOUT = 500; // 1 event max every "n" msec

/***************************************************
* STATIC ATTRIBUTES DECLARATION - CLASS ATTRIBUTES
****************************************************/
sap.ui.ux3.feed.FeedComponent.iNewEntryIndex = 0;

/**
 * This utility builds an "empty" FeedComponent.
 * Public attributes can be set onAfterRendering, for getters to stay synchronized.
 */
sap.ui.ux3.feed.FeedComponent.prototype.init = function(){
	// convenience variables
	var self = this;
	var id = this.getId();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sIconPrefix = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/feed/";

	// Feeder component:
	//this.oFeeder = new sap.ui.ux3.feed.Feeder("feeder",{submitPress : sap.ui.ux3.feed.FeedComponent.submitFeedEntry});
	this.oFeeder = new sap.ui.ux3.feed.Feeder(this.getId() + "-feeder");
	this.oFeeder.attachSubmitPress(null, sap.ui.ux3.feed.FeedComponent.submitFeedEntry, this);
	this.oFeeder.setParent(this);
	this.setFeeder(this.oFeeder.getId()); // For "this.getFeeder()" to return the Feeder ID.

	// IntervalControl component:
	this.oIntervals = new sap.ui.commons.ComboBox(
					 {change : sap.ui.ux3.feed.FeedComponent.forwardRefreshIntervalChangeEvent
					 });
	this.oIntervals.setParent(this);

	// ActionMenu component:
	var sActionIcon = sIconPrefix + "more_normal.png";
	this.oAction = new sap.ui.commons.MenuButton(
					   {icon         : sActionIcon
					   ,itemSelected : sap.ui.ux3.feed.FeedComponent.forwardActionEvent
					   });
	this.oAction.setParent(this);

	// Filter component:
	var defaultFilterValue = rb.getText("FEED_FILTER_ALL");
	this.oFilter = new sap.ui.commons.ComboBox(
					 {value  : defaultFilterValue
					 ,change : sap.ui.ux3.feed.FeedComponent.forwardFilterEvent
					 });
	this.oFilter.setParent(this);

	// SearchText component:
	this.oSearch = new sap.ui.commons.TextField();
	this.oSearch.setParent(this);
	// The whole idea behind the following searchHandler() is to limit the number of
	// "searchTrigger" events generated by this component.
	// This searchHandler() is bound onAfterRendering against onKeyUp oSearch events.
	this.lastSearch = new Date();
	this.lastSearchValue = "";
	this.searchTimer = null;
	this.searchHandler = function() {
		var d = new Date();
		if (d - self.lastSearch < sap.ui.ux3.feed.FeedComponent.INTER_EVENT_TIMEOUT) {
			// Handler recalled too soon within the throttle interval.
			// Our Search Event needs to be delayed.
			if (self.searchTimer) {
				window.clearTimeout(self.searchTimer);
			}
			self.searchTimer = window.setTimeout(self.searchHandler, sap.ui.ux3.feed.FeedComponent.INTER_EVENT_TIMEOUT);
			return false;
		}
		// It is timely OK to send a new Search Event:
		self.lastSearch = d;
		var oSearch = jQuery.sap.domById(self.oSearch.getId());
	  var newValue = oSearch.value;
	  if (newValue != self.lastSearchValue) {
		self.fireSearchTrigger({searchString:newValue});
		self.lastSearchValue = newValue;
	  }
	};

	// RowRepeater component:
	this.oFeed = new sap.ui.commons.RowRepeater(this.getId() + "-feedRepeater",{currentPage:1,design:sap.ui.commons.RowRepeaterDesign.Standard});
	this.oFeed.setParent(this);
	this.oFeed.setNumberOfRows(3);
	this.setFeed(this.oFeed.getId()); // For "this.getFeed()" to return the RowR ID.
};


/**
 * Setting public attributes, for getters to stay synchronized
 */
sap.ui.ux3.feed.FeedComponent.prototype.onAfterRendering = function(){
	// convenience variables
	var id = this.getId();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	// Feeder component:

	// IntervalControl component:
  var intervals = this.getRefreshIntervals();
  if (!intervals) {
	// No intervals provided. Using some default ones.
		var defaultIntervals = [0, 5, 15, 30, 60, 300, -1];
		this.setRefreshIntervals(defaultIntervals);
  }
  var selectedInterval = this.getRefreshIntervalValue();
  if (!selectedInterval) {
	// No selection provided. Defaulting to the first entry.
	intervals = this.getRefreshIntervals();
	if (intervals.length >= 1) {
	  this.setRefreshIntervalValue(intervals[0]);
	}
  }

	// ActionMenu component(create only once):
  if( !this.oAction.getMenu() ){
	  // 1) Creating the Action Menu:
	  var oActionMenu	= new sap.ui.commons.Menu();
	  // 2) Adding the default "Sources" and "Feed settings" Action Items:
	  var defaultSourcesAction      = rb.getText("FEED_ACTION_SOURCES");
	  var defaultFeedSettingsAction = rb.getText("FEED_ACTION_FEED_SETTINGS");
	  var oSourcesItem	  = new sap.ui.commons.MenuItem(id+"__Sources", {text:defaultSourcesAction});
	  var oFeedSettingsItem = new sap.ui.commons.MenuItem(id+"__FeedSettings", {text:defaultFeedSettingsAction});
	  oActionMenu.addItem(oSourcesItem);
	  oActionMenu.addItem(oFeedSettingsItem);
	  // 3) Adding any application-supplied (aggregated) Action Items:
	  var oCustomItems = this.getCustomActions();
	  for (var i=0,len=oCustomItems.length; i<len; i++) {
		  oActionMenu.addItem(oCustomItems[i]);
	  }
	  // 4) Adding that Menu to the Action MenuButton:
	  this.oAction.setMenu(oActionMenu);
  }
	
	// Filter component:
	// 1) Creating the Filter ListBox:
  if(!this.oFilter.getListBox()){
	  var oFilterListBox	= new sap.ui.commons.ListBox();
	  // 2) Adding the default "All" Filter Item:
	  var defaultFilterValue = rb.getText("FEED_FILTER_ALL");
	  var oDefaultItem		   = new sap.ui.core.ListItem({key:"All", text:defaultFilterValue});
	  oFilterListBox.addItem(oDefaultItem);
	  // 3) Adding any application-supplied (aggregated) Action Items:
	  var oCustomItems = this.getCustomActions();
	  for (var i=0,len=oCustomItems.length; i<len; i++) {
		  oFilterListBox.addItem(oCustomItems[i]);
	  }
	  // 4) Adding that ListBox to the Action ComboBox:
	  this.oFilter.setListBox(oFilterListBox);
  }

	// SearchText component:
  var searchValue = this.getSearchValue();
  if (!searchValue) {
	// No Search String provided. Inserting our invite.
	  if (this.oSearch.getEditable() && this.oSearch.getEnabled()) {
		var defaultSearchValue = rb.getText("FEED_SEARCH_STRING");
		this.oSearch.setValue(defaultSearchValue);
		this.oSearch.addStyleClass("sapUiFeedCInvite");
	  }
  }
  this.oSearch.attachBrowserEvent("keyup", this.searchHandler);

	// RowRepeater component:
};

/**
 * Event handler called when control is receiving the focus
 */
sap.ui.ux3.feed.FeedComponent.prototype.onfocusin = function(oEvent) {
	// Handling focus on a sub-component basis:
	switch(oEvent.srcControl.sId){
//  case this.oFeeder.getId():
//		break;
//  case this.oIntervals.getId():
//		break;
//  case this.oAction.getId():
//		break;
//  case this.oFilter.getId():
//		break;
	case this.oSearch.getId():
	  // Removing the blurred "Search String" if needed:
	  if (this.oSearch.getEditable() && this.oSearch.getEnabled()) {
		  var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		  var defaultSearchValue = rb.getText("FEED_SEARCH_STRING");
		  if (this.oSearch.getValue() == defaultSearchValue) {
			this.oSearch.setValue("");
			this.oSearch.removeStyleClass("sapUiFeedCInvite");
		  }
	  }
	  break;
//  case this.oFeed.getId():
//		break;
	default:
	  return;
	} // end-switch
};

/**
 * Event handler called when control is losing the focus
 */
sap.ui.ux3.feed.FeedComponent.prototype.onfocusout = function(oEvent) {
	// Handling blur on a sub-component basis:
	switch(oEvent.srcControl.sId){
//  case this.oFeeder.getId():
//		break;
//  case this.oIntervals.getId():
//		break;
//  case this.oAction.getId():
//		break;
//  case this.oFilter.getId():
//		break;
	case this.oSearch.getId():
	  // Adding the blurred "Search String" if needed:
	  if (this.oSearch.getEditable() && this.oSearch.getEnabled()) {
		  if (this.oSearch.getValue() == "") {
			var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
			var defaultSearchValue = rb.getText("FEED_SEARCH_STRING");
			this.oSearch.setValue(defaultSearchValue);
			this.oSearch.addStyleClass("sapUiFeedCInvite");
		  }
	  }
	  break;
//  case this.oFeed.getId():
//		break;
	default:
	  return;
	} // end-switch
};


/********************** ATTRIBUTE "avatarSrc" **********************
 * API override
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setAvatarSrc = function(sAvatarSrc) {
	this.setProperty("avatarSrc", sAvatarSrc);
	// Forwarding the new image to the inner Feeder:
	this.oFeeder.setImageSrc(sAvatarSrc);
	return this;
};

/********************** ATTRIBUTE "filterValue" **********************
 * API override
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setFilterValue = function(sFilterValue) {
	this.setProperty("filterValue", sFilterValue);
	// Forwarding the new value to the inner Filter:
	this.oFilter.setValue(sFilterValue);
	return this;
};

/********************** ATTRIBUTE "maxVisibleFeeds" **********************
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setMaxVisibleFeeds = function(iMaxVisibleFeeds) {
	this.setProperty("maxVisibleFeeds", iMaxVisibleFeeds);
	// Forwarding the new value to the inner RowRepeater:
	this.oFeed.setNumberOfRows(iMaxVisibleFeeds);
	return this;
};

/********************** ATTRIBUTE "refreshIntervalValue" **********************
 * API override
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setRefreshIntervalValue = function(iRefreshIntervalValue) {
	this.setProperty("refreshIntervalValue", iRefreshIntervalValue);
	// Forwarding the new selection to the inner Intervals ComboBox:
  var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
  if (iRefreshIntervalValue == 0) {
	this.oIntervals.setValue( rb.getText("FEED_INTERVAL_LIVE") );
  } else if (iRefreshIntervalValue == -1) {
	this.oIntervals.setValue( rb.getText("FEED_INTERVAL_PAUSE") );
  } else {
	this.oIntervals.setValue( iRefreshIntervalValue + " " + rb.getText("FEED_INTERVAL_SECONDS") );
  }
	return this;
};

/********************** ATTRIBUTE "refreshIntervals" **********************
 * API override
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setRefreshIntervals = function(aRefreshIntervals) {
	this.setProperty("refreshIntervals", aRefreshIntervals);
	// Forwarding the new array to the inner Intervals ComboBox:
  this.oIntervals.removeAllItems();
  var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var liveInterval  = rb.getText("FEED_INTERVAL_LIVE");
	var pauseInterval = rb.getText("FEED_INTERVAL_PAUSE");
	var seconds       = rb.getText("FEED_INTERVAL_SECONDS");
	var intervalItems = [];
	for (var i=0, len=aRefreshIntervals.length; i<len; i++) {
	  if (aRefreshIntervals[i] == 0) {
		this.oIntervals.addItem( new sap.ui.core.ListItem({key:0, text:liveInterval}) );
	  } else if (aRefreshIntervals[i] == -1) {
		this.oIntervals.addItem( new sap.ui.core.ListItem({key:-1, text:pauseInterval}) );
	  } else {
		this.oIntervals.addItem( new sap.ui.core.ListItem({key:aRefreshIntervals[i], text:(aRefreshIntervals[i] + " " + seconds)}) );
	  }
	}
	return this;
};


/********************** ATTRIBUTE "searchValue" **********************
 * API override
 * @public
 */
sap.ui.ux3.feed.FeedComponent.prototype.setSearchValue = function(sSearchValue) {
	this.setProperty("searchValue", sSearchValue);
	// Forwarding the new value to the inner Search component:
	this.oSearch.setValue(sSearchValue);
	return this;
};

/********************** ATTRIBUTE "width" **********************/
// Nothing to do.


/********************** EVENT "action" **********************
 * @private
 */
sap.ui.ux3.feed.FeedComponent.forwardActionEvent = function(oControlEvent) {
	var oControl = oControlEvent.oSource.getParent();
	// Fire own event for applications to react:
	// A MenuItem returns its "itemId", but we need to return its textual "action"
	// as provided by the application.
	var itemId = oControlEvent.mParameters.itemId;
	var newValue = sap.ui.getCore().getControl(itemId).getText();
	// ... but "Sources" or "Feed settings" for the default actions (language-independent).
  var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	if (newValue==rb.getText("FEED_ACTION_SOURCES")) {
		newValue = "Sources";
	} else if (newValue==rb.getText("FEED_ACTION_FEED_SETTINGS")) {
		newValue = "Feed settings";
	}
	oControl.fireAction({actionName:newValue});
};

/********************** EVENT "filter" **********************
 * @private
 */
/* Own handler definition */
sap.ui.ux3.feed.FeedComponent.forwardFilterEvent = function(oControlEvent) {
	var oControl = oControlEvent.oSource.getParent();
	// Fire own event for applications to react:
	var newValue = oControlEvent.mParameters.selectedItem.mProperties.key;
	oControl.fireFilter({filterValue:newValue});
};

/********************** EVENT "refreshIntervalChange" **********************
 * @private
 */
/* Own handler definition */
sap.ui.ux3.feed.FeedComponent.forwardRefreshIntervalChangeEvent = function(oControlEvent) {
	var oControl = oControlEvent.oSource.getParent();
	// Fire own event for applications to react:
	var newValue = oControlEvent.mParameters.selectedItem.mProperties.key;
	oControl.fireRefreshIntervalChange({newInterval:newValue});
};

/********************** EVENT "searchTrigger" **********************/
/* No MenuButton Event to forward. */
/* Using own onKeyUp handler instead, for a more interactive Search. */

/**************************************************************************
* Overwriting feedEntries aggregation functions to dispatch to rowRepeater
* @public
**************************************************************************/
sap.ui.ux3.feed.FeedComponent.prototype.getFeedEntries = function() {
	return this.oFeed.getRows();
};

sap.ui.ux3.feed.FeedComponent.prototype.insertFeedEntry = function(oFeedEntry, iIndex) {
	this.oFeed.insertRow(oFeedEntry, iIndex);
	oFeedEntry.attachEvent("deleted", this.handleFeedEntryDelete, this);
	oFeedEntry.setAvatarSrc(this.getAvatarSrc());
	return this;
};

sap.ui.ux3.feed.FeedComponent.prototype.addFeedEntry = function(oFeedEntry) {
	this.oFeed.addRow(oFeedEntry);
	oFeedEntry.attachEvent("deleted", this.handleFeedEntryDelete, this);
	oFeedEntry.setAvatarSrc(this.getAvatarSrc());
	return this;
};

sap.ui.ux3.feed.FeedComponent.prototype.removeFeedEntry = function(vElement) {
	return this.oFeed.removeRow(vElement);
};

sap.ui.ux3.feed.FeedComponent.prototype.removeAllFeedEntries = function() {
	return this.oFeed.removeAllRows();
};

sap.ui.ux3.feed.FeedComponent.prototype.indexOfFeedEntry = function(oFeedEntry) {
	return this.oFeed.indexOfRow(oFeedEntry);
};

sap.ui.ux3.feed.FeedComponent.prototype.destroyFeedEntries = function() {
	this.oFeed.destroyRows();
	return this;
};

sap.ui.ux3.feed.FeedComponent.submitFeedEntry = function(oEvent){

	var textInput = oEvent.getParameters().content;
	//Create the new feed entry
	var oFeedEntry = new sap.ui.ux3.feed.FeedEntry("newEntry-" + sap.ui.ux3.feed.FeedComponent.iNewEntryIndex++);
	//TODO: You should come from somewhere else ??
	oFeedEntry.setText("<thing id='id1' class='p12e_prep'>"+ sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3").getText("FEED_YOU") +"</thing>:" + textInput);
	oFeedEntry.setLogoSrc(oEvent.oSource.getImageSrc());
	oFeedEntry.setLastChanged(sap.ui.ux3.feed.BaseFeedEntry.toISOString(new Date()));

	//Insert the entry at first index
	this.insertFeedEntry(oFeedEntry,0);

	//Clear the feeder
	this.oFeeder.setText("");

};

/**
 * Event handler for deleting feed entries
 * @private
 */
sap.ui.ux3.feed.FeedComponent.prototype.handleFeedEntryDelete = function(oEvent) {
	this.oFeed.removeRow(oEvent.oSource);
};
}; // end of sap.ui.ux3.feed.FeedComponent
if ( !jQuery.sap.isDeclared('sap.ui.ux3.feed.FeedEntryRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.feed.FeedEntry
jQuery.sap.declare("sap.ui.ux3.feed.FeedEntryRenderer");

/**
 * @class FeedEntry renderer.
 * @static
 */
sap.ui.ux3.feed.FeedEntryRenderer = {
};

sap.ui.ux3.feed.FeedEntryRenderer.defaultIcon = "/img/feed/person.png";

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.feed.FeedEntryRenderer.render = function(oRenderManager, oControl){

	// convenience variable
	var rm = oRenderManager;

	var sIcon;

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.write(">");

	rm.write("<div id='"+ oControl.getId() +"-content'");
	rm.addClass("sapUiEntry");
	rm.writeClasses();
	rm.write(">");

	if(oControl.getDeletionAllowed()){
		rm.write('<div class="sapUiEntryDeletable">X</div>');
	}

	if(oControl.getLogoSrc()){
	  sIcon = oControl.getLogoSrc();
	} else {
	  sIcon = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.ux3.feed.FeedEntryRenderer.defaultIcon;
	}

	rm.write("<img");
	rm.writeAttribute("class","sapUiEntryIcon");
	rm.writeAttributeEscaped("src", sIcon);
	rm.write(">");


	rm.write("<div");
	rm.writeAttribute("class","sapUiEntryText");
	rm.write(">");
	rm.write(oControl.buildText());
	rm.write("</div>");


	rm.write("<span");
	rm.writeAttribute("class","sapUiEntryDate");
	rm.write(">");
	rm.write(oControl.buildTime());
	rm.write("</span>");

	this.renderFooter(rm, oControl);
	rm.write("</div>"); // .sapUiEntry

	// Adding the arrow next to the .sapUiEntry DIV it modifies:
	rm.write('<div class="sapUiEntryArrow"></div>');


	var iNbrComments = oControl.getComments().length;
	rm.write("<div id='"+ oControl.getId() +"-CommentExp' class='sapUiExpandComments'");
	if(oControl.bCommentsExpanded){
		rm.write(" style='display:none'");
	}
	var txt1 = oControl.oResourceBundle.getText("FEEDENTRY_LABEL_COL_COMMENTS");
	txt1 = txt1.replace("{0}", iNbrComments);
	rm.write(">"+ txt1 +"</div>");


	rm.write("<div id='"+ oControl.getId() +"-CommentLabel' class='sapUiExpandCommentsLabel'");
	if(iNbrComments == 0 || !oControl.bCommentsExpanded){
		rm.write(" style='display:none'");
	}
	var txtName = "FEEDENTRY_LABEL_EXP_COMMENT";
	if(iNbrComments>1){
		txtName += "S";
	}
	var txt2 = oControl.oResourceBundle.getText(txtName);
	txt2 = txt2.replace("{0}", iNbrComments);
	rm.write("> " + txt2 + "</div>");

	//Render the comments only if there is any
	rm.write("<div class='sapUiComments'>");
	rm.renderControl(oControl.oComments);
	rm.write("</div>");

	rm.write("<div class='sapUiCommentFeeder'>");
	rm.renderControl(oControl.oFeederComment);
	rm.write("</div>");

	rm.write("</div>");
};


sap.ui.ux3.feed.FeedEntryRenderer.renderFooter = function(oRenderManager, oControl){

	// convenience variable
	var rm = oRenderManager;

	rm.write("<div id=" + oControl.getId() + "-entryFooter ");
	rm.writeAttribute("class","sapUiEntryFooter");
	rm.write(">");

	if(oControl.getSupportEnabled()){
		var iNbrSupport = 0;
		if(oControl.getNumberOfSupport()){
			iNbrSupport = oControl.getNumberOfSupport();
		}

		rm.write("<span class='sapUiFeedEntryFooterItem'>");
		rm.write(iNbrSupport + " people support this");
		rm.write("</span>");

		//support
		if (oControl.getSupported()){
			rm.write("<span class='sapUiFeedEntryFooterItem sapUiFeedUnsupport'>");
			oControl.oSupportLabel.setText(oControl.oResourceBundle.getText("UNSUPPORT"));
		}
		else {
			rm.write("<span class='sapUiFeedEntryFooterItem sapUiFeedSupport'>");
			oControl.oSupportLabel.setText(oControl.oResourceBundle.getText("SUPPORT"));
		}
		rm.renderControl(oControl.oSupportLabel);
		rm.write("</span>");
	}

	//Flag
	rm.write("<span class='sapUiFeedEntryFooterItem sapUiFeedFlag'>");
	if (oControl.getFlagged()){
		rm.write(oControl.oResourceBundle.getText("REMOVE"));
	}
	else{
		rm.write(oControl.oResourceBundle.getText("FLAG"));
	}
	rm.write("</span>");

	//Rating
	if(oControl.getRatingEnabled()){
		rm.write("<span class='sapUiFeedEntryFooterItem sapUiFeedRelevance'>");
		rm.write(oControl.oResourceBundle.getText("RELEVANCE"));
		rm.renderControl(oControl.oRatingIndicator);
		rm.write("(" + oControl.getNumberOfRatings() + " ratings)");
		rm.write("</span>");
	}
	rm.write("</div>");
}
}; // end of sap.ui.ux3.feed.FeedEntryRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ExactArea.
jQuery.sap.declare("sap.ui.ux3.ExactArea");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ExactArea.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>toolbarVisible : boolean</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li>
 * <li>toolbarItems : sap.ui.commons.ToolbarItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Consists of two sections: A tool bar and a content area where arbitrary controls can be added.
 * The ExactArea is intended to be used for the Exact design approach but alternatively also in a stand alone version.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ExactArea = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ExactArea.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.ExactArea. 
 * Resulting metadata can be obtained via sap.ui.ux3.ExactArea.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ExactArea", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getToolbarVisible", "setToolbarVisible", "getVisible", "setVisible", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", "getToolbarItems", "insertToolbarItem", "addToolbarItem", "removeToolbarItem", "removeAllToolbarItems", "indexOfToolbarItem", "destroyToolbarItems"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "toolbarVisible" : {name : "toolbarVisible", type : "boolean", group : "Appearance", defaultValue : true},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    "toolbarItems" : {name : "toolbarItems", type : "sap.ui.commons.ToolbarItem", multiple : true, singularName : "toolbarItem"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>toolbarVisible</code>.
 * Specifies whether the tool bar shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>toolbarVisible</code>
 * @public
 * 
 */
sap.ui.ux3.ExactArea.prototype.getToolbarVisible = function() {
	return this.getProperty("toolbarVisible");
};

/**
 * Setter for property <code>toolbarVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bToolbarVisible  new value for property <code>toolbarVisible</code>
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.setToolbarVisible = function(bToolbarVisible) {
	this.setProperty("toolbarVisible", bToolbarVisible);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Specifies whether the control shall be visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.ux3.ExactArea.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Arbitrary child controls of the content area
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.ExactArea.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ExactArea.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.ux3.ExactArea.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ExactArea.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ExactArea.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};

	
/**
 * Getter for aggregation <code>toolbarItems</code>.<br/>
 * Tool bar items which shall be shown in the tool bar.
 * 
 * @return {sap.ui.commons.ToolbarItem[]}
 * @public
 */
sap.ui.ux3.ExactArea.prototype.getToolbarItems = function() {
	return this.getAggregation("toolbarItems", []);
};


/**
 * Inserts a toolbarItem into the aggregation named <code>toolbarItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *          oToolbarItem the toolbarItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolbarItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolbarItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolbarItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.insertToolbarItem = function(oToolbarItem, iIndex) {
	this.insertAggregation("toolbarItems", oToolbarItem, iIndex);
	return this;
};

/**
 * Adds some toolbarItem <code>oToolbarItem</code> 
 * to the aggregation named <code>toolbarItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oToolbarItem the toolbarItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ExactArea.prototype.addToolbarItem = function(oToolbarItem) {
	this.addAggregation("toolbarItems", oToolbarItem);
	return this;
};

/**
 * Removes an toolbarItem from the aggregation named <code>toolbarItems</code>.
 *
 * @param {int | string | sap.ui.commons.ToolbarItem} vToolbarItem the toolbarItem to remove or its index or id
 * @return {sap.ui.commons.ToolbarItem} the removed toolbarItem or null
 * @public
 */
sap.ui.ux3.ExactArea.prototype.removeToolbarItem = function(vToolbarItem) {
	return this.removeAggregation("toolbarItems", vToolbarItem);
};

/**
 * Removes all the controls in the aggregation named <code>toolbarItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ToolbarItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ExactArea.prototype.removeAllToolbarItems = function() {
	return this.removeAllAggregation("toolbarItems");
};

/**
 * Checks for the provided <code>sap.ui.commons.ToolbarItem</code> in the aggregation named <code>toolbarItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oToolbarItem the toolbarItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ExactArea.prototype.indexOfToolbarItem = function(oToolbarItem) {
	return this.indexOfAggregation("toolbarItems", oToolbarItem);
};
	

/**
 * Destroys all the toolbarItems in the aggregation 
 * named <code>toolbarItems</code>.
 * @return {sap.ui.ux3.ExactArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ExactArea.prototype.destroyToolbarItems = function() {
	this.destroyAggregation("toolbarItems");
	return this;
};


// Start of sap/ui/ux3/ExactArea.js
jQuery.sap.require('sap.ui.commons.Toolbar'); // unlisted dependency retained


(function() {

//*************************************************************
//Define a private element to enable titles tin the toolbar
//*************************************************************

sap.ui.ux3.ExactAreaToolbarTitle = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

sap.ui.ux3.ExactAreaToolbarTitle.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

sap.ui.core.Element.defineClass("sap.ui.ux3.ExactAreaToolbarTitle", {
  baseType : "sap.ui.core.Element",
  interfaces : ["sap.ui.commons.ToolbarItem"],
  publicMethods : ["getText", "setText"],
  library : "sap.ui.ux3",
  properties : {
	text : {name : "text", type : "string", group : "Appearance", defaultValue : ''}
  },
  aggregations : {},
  associations : {},
  events : {}
});

sap.ui.ux3.ExactAreaToolbarTitle.prototype.getText = function() {
	return this.getProperty("text");
};

sap.ui.ux3.ExactAreaToolbarTitle.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};

//*************************************************************

}());
}; // end of sap.ui.ux3.ExactArea
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ToolPopup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ToolPopup.
jQuery.sap.declare("sap.ui.ux3.ToolPopup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ToolPopup.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>icon : string</li>
 * <li>iconHover : string</li>
 * <li>iconSelected : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>buttons : sap.ui.core.Control</li>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>open : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>close : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>enter : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>iconChanged : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A pop up which the user can open from the Shell's tool pane. Generally, the starting point would be an icon.
 * For this pop up, buttons can be defined with any text; therefore, it has the same purpose and similar look like any common dialog box.
 * A ToolPopup can have any content. Depending on the application type and design, the structure of the texts and input fields can be for
 * example form-like.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ToolPopup = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ToolPopup.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.ToolPopup. 
 * Resulting metadata can be obtained via sap.ui.ux3.ToolPopup.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ToolPopup", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getIcon", "setIcon", "getIconHover", "setIconHover", "getIconSelected", "setIconSelected", 
    // aggregations
    "getButtons", "insertButton", "addButton", "removeButton", "removeAllButtons", "indexOfButton", "destroyButtons", "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    
    // events
    "attachOpen", "detachOpen", "attachClose", "detachClose", "attachEnter", "detachEnter", "attachIconChanged", "detachIconChanged", 
    // methods
    "isOpen", "open", "close", "setPosition"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null},
    "icon" : {name : "icon", type : "string", group : "Misc", defaultValue : null},
    "iconHover" : {name : "iconHover", type : "string", group : "Misc", defaultValue : null},
    "iconSelected" : {name : "iconSelected", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "content",
  aggregations : {
    "buttons" : {name : "buttons", type : "sap.ui.core.Control", multiple : true, singularName : "button"}, 
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {
    "open" : "open", 
    "close" : "close", 
    "enter" : "enter", 
    "iconChanged" : "iconChanged"
  }

});	

sap.ui.ux3.ToolPopup.M_EVENTS = {'open':'open','close':'close','enter':'enter','iconChanged':'iconChanged'};


/**
 * Getter for property <code>title</code>.
 * The title displayed in the pop up window (optional property)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.ux3.ToolPopup.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * The URL to the icon displayed in the tool area which is used to open the ToolPopup.
 * The recommended size is 32x32px, including some transparent border. Therefore, the content will cover about 20x20px.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.ux3.ToolPopup.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>iconHover</code>.
 * The URL to the icon in hover state, displayed in the tool area which is used to open the pop up.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconHover</code>
 * @public
 * 
 */
sap.ui.ux3.ToolPopup.prototype.getIconHover = function() {
	return this.getProperty("iconHover");
};

/**
 * Setter for property <code>iconHover</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconHover  new value for property <code>iconHover</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.setIconHover = function(sIconHover) {
	this.setProperty("iconHover", sIconHover);
	return this;
};


/**
 * Getter for property <code>iconSelected</code>.
 * The URL to the icon in selected state displayed in the tool area which is used to open the pop up.
 * If no selected icon is given, the hover icon is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconSelected</code>
 * @public
 * 
 */
sap.ui.ux3.ToolPopup.prototype.getIconSelected = function() {
	return this.getProperty("iconSelected");
};

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.setIconSelected = function(sIconSelected) {
	this.setProperty("iconSelected", sIconSelected);
	return this;
};

	
/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * The buttons to appear in the pop up
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.getButtons = function() {
	return this.getAggregation("buttons", []);
};


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.insertButton = function(oButton, iIndex) {
	this.insertAggregation("buttons", oButton, iIndex);
	return this;
};

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ToolPopup.prototype.addButton = function(oButton) {
	this.addAggregation("buttons", oButton);
	return this;
};

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.core.Control} vButton the button to remove or its index or id
 * @return {sap.ui.core.Control} the removed button or null
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.removeButton = function(vButton) {
	return this.removeAggregation("buttons", vButton);
};

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.removeAllButtons = function() {
	return this.removeAllAggregation("buttons");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.indexOfButton = function(oButton) {
	return this.indexOfAggregation("buttons", oButton);
};
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.destroyButtons = function() {
	this.destroyAggregation("buttons");
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the pop up
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ToolPopup.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * Event is fired when the pop up opens 
 *
 * @name sap.ui.ux3.ToolPopup#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 * Event is fired when the pop up opens 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.attachOpen = function(oData, fnFunction, oListener) {
	this.attachEvent("open", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.detachOpen = function(fnFunction, oListener) {
	this.detachEvent("open", fnFunction, oListener);
	return this;	
};

/**
 * Fire event open to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ToolPopup.prototype.fireOpen = function(mArguments) {
	this.fireEvent("open", mArguments);
	return this;
};


/**
 * Event is fired when the pop up closes 
 *
 * @name sap.ui.ux3.ToolPopup#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 * Event is fired when the pop up closes 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.attachClose = function(oData, fnFunction, oListener) {
	this.attachEvent("close", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.detachClose = function(fnFunction, oListener) {
	this.detachEvent("close", fnFunction, oListener);
	return this;	
};

/**
 * Fire event close to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ToolPopup.prototype.fireClose = function(mArguments) {
	this.fireEvent("close", mArguments);
	return this;
};


/**
 * Event is fired whenever the user clicks the Enter or the Return key inside the pop up 
 *
 * @name sap.ui.ux3.ToolPopup#enter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {object} oControlEvent.getParameters.originalEvent The onsapenter event, received by the pop up
 * @param {sap.ui.core.Control} oControlEvent.getParameters.originalSrcControl The control that was focused when the user pressed the Enter key (may be null)
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'enter' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 * Event is fired whenever the user clicks the Enter or the Return key inside the pop up 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.attachEnter = function(oData, fnFunction, oListener) {
	this.attachEvent("enter", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'enter' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.detachEnter = function(fnFunction, oListener) {
	this.detachEvent("enter", fnFunction, oListener);
	return this;	
};

/**
 * Fire event enter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'originalEvent' of type <code>object</code> The onsapenter event, received by the pop up</li>
 * <li>'originalSrcControl' of type <code>sap.ui.core.Control</code> The control that was focused when the user pressed the Enter key (may be null)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ToolPopup.prototype.fireEnter = function(mArguments) {
	this.fireEvent("enter", mArguments);
	return this;
};


/**
 * Event is fired when one of the icon properties is modified (Note: The icon is not rendered by the ToolPopup).
 * To be used by other controls which want to update the icon in their UI. 
 *
 * @name sap.ui.ux3.ToolPopup#iconChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'iconChanged' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 * Event is fired when one of the icon properties is modified (Note: The icon is not rendered by the ToolPopup).
 * To be used by other controls which want to update the icon in their UI. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.attachIconChanged = function(oData, fnFunction, oListener) {
	this.attachEvent("iconChanged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'iconChanged' event of this <code>sap.ui.ux3.ToolPopup</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ToolPopup.prototype.detachIconChanged = function(fnFunction, oListener) {
	this.detachEvent("iconChanged", fnFunction, oListener);
	return this;	
};

/**
 * Fire event iconChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ToolPopup} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ToolPopup.prototype.fireIconChanged = function(mArguments) {
	this.fireEvent("iconChanged", mArguments);
	return this;
};


/**
 * Returns whether the pop up is currently open
 *
 * @name sap.ui.ux3.ToolPopup.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


/**
 * Opens the pop up. The method is called by the Shell.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Closes the pop up. Can be called by the Shell when the pop up's button is clicked again; or by the application
 * when the interaction in the pop up has been completed or canceled.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Sets the position of the pop up, the same parameters as for sap.ui.core.Popup can be used.
 *
 * @name sap.ui.ux3.ToolPopup.prototype.setPosition
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/ux3/ToolPopup.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.ui.ux3.ToolPopup.prototype.init = function() {
	this.oPopup = null;
	this._bPositionSet = false;
};

sap.ui.ux3.ToolPopup.prototype.isOpen = function() {
	if (this.oPopup && this.oPopup.isOpen()) {
		return true;
	}
	return false;
};

sap.ui.ux3.ToolPopup.prototype.willBeClosed = function() {
	var eState = this.oPopup && this.oPopup.getOpenState();
	return eState !== sap.ui.core.OpenState.OPENING && eState !== sap.ui.core.OpenState.OPEN;
};

sap.ui.ux3.ToolPopup.prototype.open = function() {

	// if the popup position has not been (re-)initialized since the last time this was opened, try to apply the default position
	if (!this._bPositionSet) {
		var oParent = this.getParent();
		if (oParent && oParent instanceof sap.ui.ux3.Shell) {
			var oOpener = jQuery.sap.domById(oParent.getId() + "-tool-" + this.getId());
			if (oOpener) {
				this.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.EndTop, oOpener, "13 -6", "none");
			}
		}
	}
	this._bPositionSet = false;

	// create popup if required
	this._ensurePopup();

	// open popup
	this.fireOpen();
	this.oPopup.open(400);

	// position the arrow correctly
	jQuery.sap.byId(this.getId() + "-arrow").attr("class", "sapUiUx3TPArrow sapUiUx3TPArrow" + this._getArrowPosition());

	return this;
};

/**
 * Calculates the desired arrow position from the docking. This only works when "my" and "at" both use the jQuery-based docking
 * which means they are strings like "begin top".
 * The current implementation only recognizes few possible combinations and could be extended.
 *
 * @private
 */
sap.ui.ux3.ToolPopup.prototype._getArrowPosition = function() {
	var pos = "BeginTop";
	// calculate the position of the arrow from the docking of the popup
	var dock = this.oPopup._oLastPosition;
	if (dock && typeof(dock.my) === "string" && typeof(dock.at) === "string") {
		if (dock.my == "begin bottom" && dock.at == "begin top") { // TODO: find algorithm and cover all cases
			pos = "BottomBegin";
		}
	}
	return pos;
};

sap.ui.ux3.ToolPopup.prototype.close = function() {
	if (this.oPopup && this.oPopup.isOpen()) {
		this.oPopup.close(400);
		this.fireClose();
	}
	return this;
};

sap.ui.ux3.ToolPopup.prototype.onsapenter = function(oEvent) {
	this.fireEnter({originalEvent:oEvent,originalSrcControl:oEvent.srcControl});
};

sap.ui.ux3.ToolPopup.prototype._ensurePopup = function() {
	if (!this.oPopup) {
		this.oPopup = new sap.ui.core.Popup(this, false, true, false);
	}
	return this.oPopup;
};

sap.ui.ux3.ToolPopup.prototype.setPosition = function() {
	this._ensurePopup();
	this.oPopup.setPosition.apply(this.oPopup, arguments);
	this._bPositionSet = true;
	return this;
};


sap.ui.ux3.ToolPopup.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
sap.ui.ux3.ToolPopup.prototype.setIconHover = function(sIconHover) {
	this.setProperty("iconHover", sIconHover, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
sap.ui.ux3.ToolPopup.prototype.setIconSelected = function(sIconSelected) {
	this.setProperty("iconSelected", sIconSelected, true); // rerendering makes no sense, as this icon is not rendered by the ToolPopup
	this.fireIconChanged(); // tell other interested parties to update the icon
	return this;
};
}; // end of sap.ui.ux3.ToolPopup
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.NavigationBar
jQuery.sap.declare("sap.ui.ux3.NavigationBarRenderer");

/**
 * @class NavigationBar renderer.
 * @static
 */
sap.ui.ux3.NavigationBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.NavigationBarRenderer.render = function(oRenderManager, oControl) {

	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	// convenience variable
	var rm = oRenderManager;
	var sId = oControl.getId();

	// write the HTML into the render manager
	rm.addClass("sapUiUx3NavBar" + (oControl.getToplevelVariant() ? " sapUiUx3NavBarToplevel" : ""));
	rm.write("<nav");
	rm.writeControlData(oControl);
	rm.writeClasses();
	rm.write(" role='navigation'><ul id='" + sId + "-list' role='menubar' class='sapUiUx3NavBarList'>");
	rm.write(sap.ui.ux3.NavigationBarRenderer.getItemsHtml(oControl));
	rm.write("</ul>");
	rm.write("<a id='" + sId + "-ofb' tabindex='-1' role='presentation' class='sapUiUx3NavBarBack' href='javascript:void(0)'>&lt;&lt;</a>");
	rm.write("<a id='" + sId + "-off' tabindex='-1' role='presentation' class='sapUiUx3NavBarForward' href='javascript:void(0)'>&gt;&gt;</a>");
	rm.write("</nav>");
};



sap.ui.ux3.NavigationBarRenderer.getItemsHtml = function(oControl) {
	var html = [];
	var aItems = oControl.getItems();
	var bNeedToGetInstances = false;
	if (!aItems || aItems.length == 0) { // use the association instead, if the aggregation is empty
		aItems = oControl.getAssociatedItems();
		bNeedToGetInstances = true; // avoid type checks in the loop
	}

	// dummy item to avoid jumping while animating
	html.push("<li><a id='" + oControl.getId() + "-dummyItem' class='sapUiUx3NavBarDummyItem sapUiUx3NavBarItem'>&nbsp;</a></li>");

	for (var i = 0; i < aItems.length; i++) {
		var item = bNeedToGetInstances ? sap.ui.getCore().byId(aItems[i]) : aItems[i];
		var itemId = item.getId();
		var selId = oControl.getSelectedItem();

		html.push("<li><a href='javascript:void(0);' id='" + itemId + "' role='menuitemradio' class='sapUiUx3NavBarItem");
		if (itemId == selId) {
			html.push(" sapUiUx3NavBarItemSel' tabindex='0'>");
		} else {
			html.push("'>");
		}
		html.push(jQuery.sap.escapeHTML(item.getText()));
		html.push("</a></li>");
	}

	var arrow = jQuery.sap.domById(oControl.getId() + "-arrow");
	var arrowPos = arrow ? arrow.offsetLeft : oControl._iLastArrowPos;
	html.push("<span id='" + oControl.getId() + "-arrow' style='left:" + arrowPos + "px;");
	if ((aItems.length == 1) && !oControl.getToplevelVariant() && jQuery.browser.msie && (jQuery.browser.version == 8 || jQuery.browser.version == 7)) { // IE8 workaround; other browsers understand nth-child, see Base-CSS
		html.push("display:none;"); // hide arrow when there is only one item
	}
	html.push("' class='sapUiUx3NavBarArrow'></span>");

	return html.join("");
};

}; // end of sap.ui.ux3.NavigationBarRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Exact') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Exact.
jQuery.sap.declare("sap.ui.ux3.Exact");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Exact.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>resultText : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>settingsMenu : sap.ui.commons.Menu</li>
 * <li>attributes : sap.ui.ux3.ExactAttribute</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>search : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>refineSearch : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A comprehensive UI design approach with graphical and functional elements for searching data, exploring data, and acting on the data
 * ("Explore and Act (Exact) Pattern").
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.Exact = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.Exact.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.Exact. 
 * Resulting metadata can be obtained via sap.ui.ux3.Exact.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.Exact", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getResultText", "setResultText", 
    // aggregations
    "getSettingsMenu", "setSettingsMenu", "destroySettingsMenu", "getAttributes", "insertAttribute", "addAttribute", "removeAttribute", "removeAllAttributes", "indexOfAttribute", "destroyAttributes", 
    // associations
    
    // events
    "attachSearch", "detachSearch", "attachRefineSearch", "detachRefineSearch", 
    // methods
    "getResultArea", "getSearchField"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "resultText" : {name : "resultText", type : "string", group : "Misc", defaultValue : null}
  },
  defaultAggregation : "attributes",
  aggregations : {
    "settingsMenu" : {name : "settingsMenu", type : "sap.ui.commons.Menu", multiple : false}, 
    "attributes" : {name : "attributes", type : "sap.ui.ux3.ExactAttribute", multiple : true, singularName : "attribute"}
  },
  associations : {},
  events : {
    "search" : "search", 
    "refineSearch" : "refineSearch"
  }

});	

sap.ui.ux3.Exact.M_EVENTS = {'search':'search','refineSearch':'refineSearch'};


/**
 * Getter for property <code>resultText</code>.
 * A title text which is displayed above the result section
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>resultText</code>
 * @public
 * 
 */
sap.ui.ux3.Exact.prototype.getResultText = function() {
	return this.getProperty("resultText");
};

/**
 * Setter for property <code>resultText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sResultText  new value for property <code>resultText</code>
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.setResultText = function(sResultText) {
	this.setProperty("resultText", sResultText);
	return this;
};

	
/**
 * Getter for aggregation <code>settingsMenu</code>.<br/>
 * Defines the 'Settings' button in the browse section tool bar
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 */
sap.ui.ux3.Exact.prototype.getSettingsMenu = function() {
	return this.getAggregation("settingsMenu", null);
};


/**
 * Setter for the aggregated <code>settingsMenu</code>.
 * @param oSettingsMenu {sap.ui.commons.Menu}
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.setSettingsMenu = function(oSettingsMenu) {
	this.setAggregation("settingsMenu", oSettingsMenu);
	return this;
};
	

/**
 * Destroys the settingsMenu in the aggregation 
 * named <code>settingsMenu</code>.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.destroySettingsMenu = function() {
	this.destroyAggregation("settingsMenu");
	return this;
};

	
/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The attributes which shall be available to refine the search
 * 
 * @return {sap.ui.ux3.ExactAttribute[]}
 * @public
 */
sap.ui.ux3.Exact.prototype.getAttributes = function() {
	return this.getAggregation("attributes", []);
};


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.insertAttribute = function(oAttribute, iIndex) {
	this.insertAggregation("attributes", oAttribute, iIndex);
	return this;
};

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Exact.prototype.addAttribute = function(oAttribute) {
	this.addAggregation("attributes", oAttribute);
	return this;
};

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.ux3.ExactAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.ux3.ExactAttribute} the removed attribute or null
 * @public
 */
sap.ui.ux3.Exact.prototype.removeAttribute = function(vAttribute) {
	return this.removeAggregation("attributes", vAttribute);
};

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ExactAttribute[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Exact.prototype.removeAllAttributes = function() {
	return this.removeAllAggregation("attributes");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ExactAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ExactAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Exact.prototype.indexOfAttribute = function(oAttribute) {
	return this.indexOfAggregation("attributes", oAttribute);
};
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.destroyAttributes = function() {
	this.destroyAggregation("attributes");
	return this;
};


/**
 * Event is fired when the search button is clicked 
 *
 * @name sap.ui.ux3.Exact#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The query string which was entered in the search field.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 * Event is fired when the search button is clicked 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.attachSearch = function(oData, fnFunction, oListener) {
	this.attachEvent("search", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.detachSearch = function(fnFunction, oListener) {
	this.detachEvent("search", fnFunction, oListener);
	return this;	
};

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The query string which was entered in the search field.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Exact.prototype.fireSearch = function(mArguments) {
	this.fireEvent("search", mArguments);
	return this;
};


/**
 * Event which is fired when an attribute is selected or unselected. 
 *
 * @name sap.ui.ux3.Exact#refineSearch
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The query string which was entered in the search field
 * @param {sap.ui.ux3.ExactAttribute} oControlEvent.getParameters.changedAttribute The attribute which was selected or unselected recently
 * @param {object} oControlEvent.getParameters.allSelectedAttributes Array of all selected ExcatAttribute.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'refineSearch' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 * Event which is fired when an attribute is selected or unselected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.attachRefineSearch = function(oData, fnFunction, oListener) {
	this.attachEvent("refineSearch", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'refineSearch' event of this <code>sap.ui.ux3.Exact</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Exact.prototype.detachRefineSearch = function(fnFunction, oListener) {
	this.detachEvent("refineSearch", fnFunction, oListener);
	return this;	
};

/**
 * Fire event refineSearch to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The query string which was entered in the search field</li>
 * <li>'changedAttribute' of type <code>sap.ui.ux3.ExactAttribute</code> The attribute which was selected or unselected recently</li>
 * <li>'allSelectedAttributes' of type <code>object</code> Array of all selected ExcatAttribute.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Exact} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Exact.prototype.fireRefineSearch = function(mArguments) {
	this.fireEvent("refineSearch", mArguments);
	return this;
};


/**
 * Returns the ExactArea representing the result section. Arbitrary content can be added here.
 *
 * @name sap.ui.ux3.Exact.prototype.getResultArea
 * @function

 * @type sap.ui.ux3.ExactArea
 * @public
 */


/**
 * Returns the SearchField control which is used by the Exact control.
 *
 * @name sap.ui.ux3.Exact.prototype.getSearchField
 * @function

 * @type sap.ui.commons.SearchField
 * @public
 */


// Start of sap/ui/ux3/Exact.js



jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Menu'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained



(function() {

/**
 * Does the setup when the Exact is created.
 * @private
 */
sap.ui.ux3.Exact.prototype.init = function(){
	var that = this;

	//Init the used subcontrols
	//Init Search Area
	this._searchArea = new sap.ui.ux3.ExactArea(this.getId()+"-searchArea", {toolbarVisible: false});
	this._searchArea.addStyleClass("sapUiUx3ExactSearchArea");
	this.addAggregation("controls", this._searchArea);

	this._search_input = new sap.ui.commons.SearchField(this.getId()+"-searchTF", {enableListSuggest: false});
	this._search_input.attachSearch(function(oEvent){
		_handleSearch(that, oEvent);
	});
	this._search_input.addStyleClass("sapUiUx3ExactSearchText");
	this._searchArea.addContent(this._search_input);

	//Init Browse Area
	this._browser = new sap.ui.ux3.ExactBrowser(this.getId()+"-browser", {title: "Attributes"}); //TODO: I18n
	this._browser.addStyleClass("sapUiUx3ExactBrowseArea");
	this.addAggregation("controls", this._browser);
	this._browser.attachAttributeSelected(function(oEvent){
		_handleAttributeSelected(that, oEvent);
	});

	//Init Result Area
	this._resultArea = new sap.ui.ux3.ExactArea(this.getId()+"-resultArea");
	this.addAggregation("controls", this._resultArea);

	this._resultText = new sap.ui.commons.TextView(this.getId()+"-resultAreaTitle", {design: sap.ui.commons.TextViewDesign.Bold});
	this._resultText.addStyleClass("sapUiUx3ExactViewTitle");
	this.addAggregation("controls", this._resultText);

	this._bDetailsVisible = false;
};


//*** Overridden API functions ***


sap.ui.ux3.Exact.prototype.getSettingsMenu = function() {
	return this._browser.getOptionsMenu();
};


sap.ui.ux3.Exact.prototype.setSettingsMenu = function(oSettingsMenu) {
	this._browser.setOptionsMenu(oSettingsMenu);
	return this;
};


sap.ui.ux3.Exact.prototype.destroySettingsMenu = function() {
	this._browser.destroyOptionsMenu();
	return this;
};


sap.ui.ux3.Exact.prototype.getResultText = function() {
	return this._resultText.getText();
};


sap.ui.ux3.Exact.prototype.setResultText = function(sResultText) {
	this._resultText.setText(sResultText);
	return this;
};


sap.ui.ux3.Exact.prototype.getAttributes = function() {
	return this._browser.getAttributes();
};


sap.ui.ux3.Exact.prototype.insertAttribute = function(oAttribute, iIndex) {
	this._browser.insertAttribute(oAttribute, iIndex);
	return this;
};


sap.ui.ux3.Exact.prototype.addAttribute = function(oAttribute) {
	this._browser.addAttribute(oAttribute);
	return this;
};


sap.ui.ux3.Exact.prototype.removeAttribute = function(vElement) {
	return this._browser.removeAttribute(vElement);
};


sap.ui.ux3.Exact.prototype.removeAllAttributes = function() {
	return this._browser.removeAllAttributes();
};


sap.ui.ux3.Exact.prototype.indexOfAttribute = function(oAttribute) {
	return this._browser.indexOfAttribute(oAttribute);
};


sap.ui.ux3.Exact.prototype.destroyAttributes = function() {
	this._browser.destroyAttributes();
	return this;
};


sap.ui.ux3.Exact.prototype.getResultArea = function() {
	return this._resultArea;
};

sap.ui.ux3.Exact.prototype.getSearchField = function() {
	return this._search_input;
};


//*** Behavior functions ***





//*** Private helper functions ***


//Handles the search event
var _handleSearch = function(oThis, oEvent){
	oThis._sSearchQuery = oEvent.getParameter("query"); //Store the value until next Search
	oThis.fireSearch({query: oThis._sSearchQuery});
	oThis._bDetailsVisible = true;
	oThis.invalidate();
};


//Handles attribute selections
var _handleAttributeSelected = function(oThis, oEvent){
	oThis.fireRefineSearch({
		query: oThis._sSearchQuery,
		changedAttribute: oEvent.getParameter("attribute"),
		allSelectedAttributes: oEvent.getParameter("allAttributes")
	});
};


}());
}; // end of sap.ui.ux3.Exact
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.ux3.FeedRenderer");

/**
 * @class Feed renderer. 
 * @static
 */
sap.ui.ux3.FeedRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeedRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	var oFeed = oControl;
	var sMyId = oFeed.getId();
	
	
	oFeed.initChildControls();
	
	// write the HTML into the render manager  
    rm.write('<DIV');
    rm.writeControlData(oFeed);
	rm.addClass('sapUiFeed');
	rm.writeClasses();
    rm.write('>'); 
    
    //feeder
	rm.renderControl(oFeed.oFeeder);						
    
    rm.write('<HEADER class=sapUiFeedTitle ><H1>');
    //titlebar
	rm.write(oFeed.rb.getText('FEED_TITLE'));
    //live-button
	rm.renderControl(oFeed.oToolsButton);						
	rm.renderControl(oFeed.oLiveButton);						
    rm.write('</H1>');
 
    //toolbar
    rm.write('<DIV class="sapUiFeedToolbar" >');
	rm.renderControl(oFeed.oFilter);						
	rm.renderControl(oFeed.oSearchField);						
    
    rm.write('</DIV>');
    rm.write('</HEADER>');

    //Chunks
    rm.write('<SECTION>');
    for ( var i = 0; i < oFeed.getChunks().length; i++) {
    	var oChunk = oFeed.getChunks()[i];
    	if (!oChunk.getFeederThumbnailSrc()) {
			oChunk.setFeederThumbnailSrc(oFeed.getFeederThumbnailSrc());
		}
    	if (!oChunk.getFeederSender()) {
			oChunk.setFeederSender(oFeed.getFeederSender());
		}
		rm.renderControl(oChunk);
	}
    
    rm.write('</SECTION>');
    
    rm.write('</DIV>');
    
};

}; // end of sap.ui.ux3.FeedRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Feeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Feeder.
jQuery.sap.declare("sap.ui.ux3.Feeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Feeder.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>thumbnailSrc : string</li>
 * <li>text : string</li>
 * <li>type : sap.ui.ux3.FeederType</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>submit : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Add your documentation for the new Feeder2
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.Feeder = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.Feeder.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.Feeder. 
 * Resulting metadata can be obtained via sap.ui.ux3.Feeder.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.Feeder", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getThumbnailSrc", "setThumbnailSrc", "getText", "setText", "getType", "setType", 
    // aggregations
    
    // associations
    
    // events
    "attachSubmit", "detachSubmit"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "thumbnailSrc" : {name : "thumbnailSrc", type : "string", group : "Data", defaultValue : null},
    "text" : {name : "text", type : "string", group : "Data", defaultValue : null},
    "type" : {name : "type", type : "sap.ui.ux3.FeederType", group : "Appearance", defaultValue : sap.ui.ux3.FeederType.Large}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "submit" : "submit"
  }

});	

sap.ui.ux3.Feeder.M_EVENTS = {'submit':'submit'};


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the tumbnail image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>thumbnailSrc</code>
 * @public
 * 
 */
sap.ui.ux3.Feeder.prototype.getThumbnailSrc = function() {
	return this.getProperty("thumbnailSrc");
};

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feeder.prototype.setThumbnailSrc = function(sThumbnailSrc) {
	this.setProperty("thumbnailSrc", sThumbnailSrc);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * Text of the Feeder. "@References" are supported.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.Feeder.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feeder.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>type</code>.
 * Type (size) of feeder
 *
 * Default value is <code>sap.ui.ux3.FeederType.Large</code>
 *
 * @return {sap.ui.ux3.FeederType} the value of property <code>type</code>
 * @public
 * 
 */
sap.ui.ux3.Feeder.prototype.getType = function() {
	return this.getProperty("type");
};

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>sap.ui.ux3.FeederType.Large</code> 
 *
 * @param {sap.ui.ux3.FeederType} oType  new value for property <code>type</code>
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feeder.prototype.setType = function(oType) {
	this.setProperty("type", oType);
	return this;
};


/**
 * The entered text is submitted 
 *
 * @name sap.ui.ux3.Feeder#submit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Text that is submitted
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'submit' event of this <code>sap.ui.ux3.Feeder</code>.<br/>
 * The entered text is submitted 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feeder.prototype.attachSubmit = function(oData, fnFunction, oListener) {
	this.attachEvent("submit", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'submit' event of this <code>sap.ui.ux3.Feeder</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feeder.prototype.detachSubmit = function(fnFunction, oListener) {
	this.detachEvent("submit", fnFunction, oListener);
	return this;	
};

/**
 * Fire event submit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Text that is submitted</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feeder} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feeder.prototype.fireSubmit = function(mArguments) {
	this.fireEvent("submit", mArguments);
	return this;
};


// Start of sap/ui/ux3/Feeder.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


///**
// * This file defines behavior for the control, 
// */

sap.ui.ux3.Feeder.prototype.init = function(){
	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	this.oSendButton = new sap.ui.commons.Button( this.getId() + "-send", {
			style: sap.ui.commons.ButtonStyle.Emph
		}).setParent(this);
	this.oSendButton.attachEvent('press', this.handleSendButtonPress, this); // attach event this way to have the right this-reference in handler

};

/*
 * as onBeforeRendering only runs while re-rendering this module is called in renderer
 */
sap.ui.ux3.Feeder.prototype.initSendButton = function(){
	if (this.getText() == "") {
		this.oSendButton.setEnabled(false);
	}
	
	var sArrow = "";
	
	switch (this.getType()){ 
	case( sap.ui.ux3.FeederType.Medium):
		sArrow = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feeder:sapUiFeederArrowMediumUrl');
	break;
	case( sap.ui.ux3.FeederType.Comment):
		sArrow = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feeder:sapUiFeederArrowSmallUrl');
	break;
	default: // large feeder is default
		sArrow = sap.ui.core.theming.Parameters.get('sap.ui.ux3.Feeder:sapUiFeederArrowLargeUrl');
	break;
	}

	if (!sArrow || sArrow == "") {
		// no arrow image
		this.oSendButton.setText('-->');
	} else {
		this.oSendButton.setIcon(jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sArrow);
	}
	
};

sap.ui.ux3.Feeder.prototype.exit = function(){
	this.rb.destroy();
	this.oInput = undefined;
	this.oSendButton.destroy();
};

/**
 * After rendering, keep the input field jQuery object as attribute
 * for reuse
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.onAfterRendering = function () {
	this.oInput = jQuery.sap.byId(this.getId()+"-input");
};

/**
 * handler for click event 
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.onclick = function(oEvent){

	var sTargetId = oEvent.target.getAttribute( 'ID' );

	switch ( sTargetId ){
	case ( this.getId() + '-send' ):
		// Click on send button (should be handled in button)
	break;
	case ( this.getId() + '-input'):
		// Click on input field

	break;
	default:

	break;
	}

};

/**
 * handler for focusIn
 * 
 * If the Feeder is empty the default text must be cleared
 * @private
 */
sap.ui.ux3.Feeder.prototype.onfocusin = function(oEvent){

	this.oInput.find(".sapUiFeederEmptyText").remove();

};

/**
 * handler for focusOut
 * 
 * If the Feeder is empty the default text written
 * @private
 */
sap.ui.ux3.Feeder.prototype.onfocusout = function(oEvent){

	var sText = this.oInput.text();
	if(sText == ""){
		this.oInput.append(sap.ui.ux3.FeederRenderer.getEmptyTextInfo(this));
	}

	this.setProperty( 'text', sText, true ); // no rerendering!

};

/**
 * handler for keyUp
 * 
 * if text is entered the button must be enables, if empty it must be disabled
 * @private
 */
sap.ui.ux3.Feeder.prototype.onkeyup = function(oEvent){

	if(this.oInput.text() == ""){
		this.oSendButton.setEnabled(false);
	}else{
		this.oSendButton.setEnabled(true);
	}

	//Clean input so we avoid having invisible DOM content
//	if(!this.oInput.text()){
//		this.oInput.empty();
//	}

};

/**
 * Handler for send-button press
 *
 * @private
 */
sap.ui.ux3.Feeder.prototype.handleSendButtonPress = function(oEvent){

	var sText = this.oInput.text();
	this.setProperty( 'text', sText, true ); // no rerendering!
	this.fireSubmit({text: sText});
	this.setText(''); // clear text after submit

};


}; // end of sap.ui.ux3.Feeder
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.ExactListRenderer
jQuery.sap.declare("sap.ui.ux3.ExactListRenderer");

/**
 * @class ExactList renderer. 
 * @static
 */
sap.ui.ux3.ExactListRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactListRenderer.render = function(oRenderManager, oControl){ 

	//If not already done compute the scrollbar size and remember
	if(!sap.ui.ux3.ExactList.__oScollbarSize){
		var getScrollbarSize = function() {
			var jDummy = jQuery("<div style=\"visibility:visible;position:absolute;height:100px;width:100px;overflow:scroll;opacity:0;\"></div>");
			jQuery(sap.ui.getCore().getStaticAreaRef()).append(jDummy);
		
			var iSchrollbarWidth = jDummy.get(0).offsetWidth - jDummy.get(0).scrollWidth;
			var iSchrollbarHeight = jDummy.get(0).offsetHeight - jDummy.get(0).scrollHeight;
		
			jDummy.remove();

			return ({width: iSchrollbarWidth, height: iSchrollbarHeight});
		};
		sap.ui.ux3.ExactList.__oScollbarSize = getScrollbarSize();
	}
	
	var rm = oRenderManager;
	var aSubLists = oControl.getSubLists();
	var oAttribute = oControl._getAtt();
	
	// render the root tag
    rm.write("<div tabindex=\""+(oControl._isTop() ? "0" : "-1")+"\"");
    rm.writeControlData(oControl);
    rm.addClass("sapUiUx3ExactLst");
    if(oControl._isTop()){
    	rm.addClass("sapUiUx3ExactLstTop");
    	rm.addStyle("height", oControl.getTopHeight()+"px");
    }
    if(oControl._bCollapsed){
    	rm.addClass("sapUiUx3ExactLstCollapsed");
    }
    rm.writeClasses();
    rm.writeStyles();
    rm.write(">");
    
    if(!oControl._bPopupOpened){
	    // render the list area with the used listbox
	    rm.write("<div id=\"" + oControl.getId() + "-lst\" class=\"sapUiUx3ExactLstLst\">");
	    rm.renderControl(oControl._lb);
	    rm.write("<a id=\"" + oControl.getId() + "-exp\" class=\"sapUiUx3ExactLstExp\">"+this.getExpanderSymbol(false, false)+"</a>");
	    rm.write("</div>");
    }
    
    // render the content area with the sub lists
    rm.write("<div id=\"" + oControl.getId() + "-cntnt\" class=\"sapUiUx3ExactLstCntnt");
    if(aSubLists.length == 0){
    	rm.write(" sapUiUx3ExactLstCntntEmpty");
    }
    rm.write("\">");
    for(var i=0; i<aSubLists.length; i++){
    	rm.renderControl(aSubLists[i]);
    }
    rm.write("</div>");
    
    // render the header
    rm.write("<header id=\"" + oControl.getId() + "-head\" class=\"sapUiUx3ExactLstHead\"  tabindex=\"-1\">");
    if(oControl._isTop()){
    	// render the header content for top list
    	rm.write("<h2 id=\"" + oControl.getId() + "-head-txt\" class=\"sapUiUx3ExactLstHeadTopTxt\"><span>");
    	if(oControl.getTopTitle()){
			rm.writeEscaped(oControl.getTopTitle());
		}
		rm.write("</span></h2>");
    }else{
    	// render the header content for non-top list
	    rm.write("<h2 id=\"" + oControl.getId() + "-head-txt\" class=\"sapUiUx3ExactLstHeadTxt\"");
	    if (oAttribute && oAttribute.getTooltip_AsString()) {
			rm.writeAttributeEscaped("title", oAttribute.getTooltip_AsString());
		}else if (oAttribute && oAttribute.getText()) {
			rm.writeAttributeEscaped("title", oAttribute.getText());
		}
		rm.write(">");
		if(oAttribute){
			rm.writeEscaped(oAttribute.getText());
		}
		rm.write("</h2>");
		
		// render header actions
		rm.write("<div id=\"" + oControl.getId() + "-head-action\" class=\"sapUiUx3ExactLstHeadAct"+(oControl.getShowClose() ? "" : " sapUiUx3ExactLstHeadActNoClose")+"\">");
		rm.write("<a id=\"" + oControl.getId() + "-hide\" class=\"sapUiUx3ExactLstHide\">"+this.getExpanderSymbol(!oControl._bCollapsed, true)+"</a>");
		rm.write("<a id=\"" + oControl.getId() + "-close\" class=\"sapUiUx3ExactLstClose\">X</a>");
		rm.write("</div>");
    }
    rm.write("</header>");
    
    // render resize bar
    rm.write("<div id=\"" + oControl.getId() + "-rsz\" class=\"sapUiUx3ExactLstRSz\"></div>");
    
	// close the root tag
    rm.write("</div>");
};


/**
 * Returns the symbol for the vertical or horizontal expander depending on the given expand state.
 * @private
 */
sap.ui.ux3.ExactListRenderer.getExpanderSymbol = function(bExpanded, bHorizontal){ 
	if(bHorizontal){
		if(sap.ui.getCore().getConfiguration().getRTL()){
			return bExpanded ? "&#9654;" : "&#9664;";
		}else{
			return bExpanded ? "&#9664;" : "&#9654;";
		}
	}else{
		return bExpanded ? "&#9650;" : "&#9660;";
	}
};

}; // end of sap.ui.ux3.ExactListRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.Feeder
jQuery.sap.declare("sap.ui.ux3.FeederRenderer");

/**
 * @class Feeder renderer. 
 * @static
 */
sap.ui.ux3.FeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeederRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	var oFeeder = oControl;
	
	// write the HTML into the render manager  
    rm.write('<DIV');
    rm.writeControlData(oFeeder);
	rm.addClass('sapUiFeeder');
	
	switch (oFeeder.getType()){ 
	case( sap.ui.ux3.FeederType.Medium):
		rm.addClass('sapUiFeederMedium');
	break;
	case( sap.ui.ux3.FeederType.Comment):
		rm.addClass('sapUiFeederComment');
	break;
	default: // large feeder is default
		rm.addClass('sapUiFeederLarge');
	break;
	}
	
	rm.writeClasses();
    rm.write('>'); 

    // thumbnail
	rm.write('<img id=' + oFeeder.getId() + '-thumb');
	var sThumbnail = oFeeder.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.core.theming.Parameters.get('sap.ui.ux3:sapUiFeedPersonPlaceholder');
	}
	rm.writeAttributeEscaped('src', sThumbnail);

//	rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');
	
	// input area as editable DIV because of dynamic content
    rm.write('<DIV id=' + oFeeder.getId() + '-input contenteditable="true" class="sapUiFeederInput" >');

    // text
    if(oFeeder.getText() == ''){
    	rm.write(this.getEmptyTextInfo( oFeeder ));
    }else{
		rm.write(jQuery.sap.escapeHTML(oFeeder.getText()).replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />"));
    }
	
    rm.write('</DIV>');
    
    //send button
    oFeeder.initSendButton();
    rm.renderControl(oFeeder.oSendButton);								
    
    rm.write('</DIV>');
};

sap.ui.ux3.FeederRenderer.getEmptyTextInfo = function( oFeeder ){

	return "<span class='sapUiFeederEmptyText'>" + oFeeder.rb.getText("FEED_EMPTY_FEEDER")+ "</span>";

};

}; // end of sap.ui.ux3.FeederRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactBrowserRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.ExactBrowser
jQuery.sap.declare("sap.ui.ux3.ExactBrowserRenderer");

/**
 * @class ExactBrowser renderer.
 * @static
 */
sap.ui.ux3.ExactBrowserRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactBrowserRenderer.render = function(oRenderManager, oControl){
	if(!oControl.getVisible()) {
		return;
	}
	
	var oMenuButton = oControl._getMenuButton(false);
	var bHasMenu = oMenuButton && oMenuButton.getMenu();

	var rm = oRenderManager;
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3ExactBrwsr");
	if(bHasMenu){
		rm.addClass("sapUiUx3ExactBrwsrMnu");
	}
	rm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if(sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	
	if(oControl.getShowHeader()){
		rm.write("<div class=\"sapUiUx3ExactBrwsrHd\"><h2>");
		rm.write(jQuery.sap.escapeHTML(oControl.getHeaderTitle()));
		rm.write("</h2><div class=\"sapUiUx3ExactBrwsrHdTool\">");
		if(oControl.getEnableSave()){
			rm.renderControl(oControl._saveButton);
		}
		if(oControl.getEnableReset()){
			rm.renderControl(oControl._resetButton);
		}										
		rm.write("</div></div>");
	}
	if(bHasMenu){
		rm.renderControl(oMenuButton);
	}
	rm.renderControl(oControl._rootList);
	rm.write("</div>");
};
}; // end of sap.ui.ux3.ExactBrowserRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSet.
jQuery.sap.declare("sap.ui.ux3.DataSet");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new DataSet.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>selectedView : int</li>
 * <li>filterValue : string</li>
 * <li>enableSorting : boolean</li>
 * <li>enableFiltering : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.ux3.DataSetItem</li>
 * <li>views : sap.ui.ux3.DataSetView</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>selectionChanged : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>filter : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>sort : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * DataSet
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.DataSet = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.DataSet.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.DataSet. 
 * Resulting metadata can be obtained via sap.ui.ux3.DataSet.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.DataSet", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getSelectedView", "setSelectedView", "getFilterValue", "setFilterValue", "getEnableSorting", "setEnableSorting", "getEnableFiltering", "setEnableFiltering", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", "bindItems", "unbindItems", "getViews", "insertView", "addView", "removeView", "removeAllViews", "indexOfView", "destroyViews", 
    // associations
    
    // events
    "attachSelectionChanged", "detachSelectionChanged", "attachFilter", "detachFilter", "attachSort", "detachSort", 
    // methods
    "setLeadSelection", "getLeadSelection"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "selectedView" : {name : "selectedView", type : "int", group : "Misc", defaultValue : 0},
    "filterValue" : {name : "filterValue", type : "string", group : "Misc", defaultValue : null},
    "enableSorting" : {name : "enableSorting", type : "boolean", group : "Misc", defaultValue : true},
    "enableFiltering" : {name : "enableFiltering", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {
    "items" : {name : "items", type : "sap.ui.ux3.DataSetItem", multiple : true, singularName : "item"}, 
    "views" : {name : "views", type : "sap.ui.ux3.DataSetView", multiple : true, singularName : "view"}
  },
  associations : {},
  events : {
    "selectionChanged" : "selectionChanged", 
    "filter" : "filter", 
    "sort" : "sort"
  }

});	

sap.ui.ux3.DataSet.M_EVENTS = {'selectionChanged':'selectionChanged','filter':'filter','sort':'sort'};


/**
 * Getter for property <code>selectedView</code>.
 * Index of the selected view
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>selectedView</code>
 * @public
 * 
 */
sap.ui.ux3.DataSet.prototype.getSelectedView = function() {
	return this.getProperty("selectedView");
};

/**
 * Setter for property <code>selectedView</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iSelectedView  new value for property <code>selectedView</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.setSelectedView = function(iSelectedView) {
	this.setProperty("selectedView", iSelectedView);
	return this;
};


/**
 * Getter for property <code>filterValue</code>.
 * Filter Value for the DataSet
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>filterValue</code>
 * @public
 * 
 */
sap.ui.ux3.DataSet.prototype.getFilterValue = function() {
	return this.getProperty("filterValue");
};

/**
 * Setter for property <code>filterValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFilterValue  new value for property <code>filterValue</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.setFilterValue = function(sFilterValue) {
	this.setProperty("filterValue", sFilterValue);
	return this;
};


/**
 * Getter for property <code>enableSorting</code>.
 * Enable sorting
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableSorting</code>
 * @public
 * 
 */
sap.ui.ux3.DataSet.prototype.getEnableSorting = function() {
	return this.getProperty("enableSorting");
};

/**
 * Setter for property <code>enableSorting</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableSorting  new value for property <code>enableSorting</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.setEnableSorting = function(bEnableSorting) {
	this.setProperty("enableSorting", bEnableSorting);
	return this;
};


/**
 * Getter for property <code>enableFiltering</code>.
 * Enable filtering
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableFiltering</code>
 * @public
 * 
 */
sap.ui.ux3.DataSet.prototype.getEnableFiltering = function() {
	return this.getProperty("enableFiltering");
};

/**
 * Setter for property <code>enableFiltering</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableFiltering  new value for property <code>enableFiltering</code>
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.setEnableFiltering = function(bEnableFiltering) {
	this.setProperty("enableFiltering", bEnableFiltering);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of DataSetItems
 * 
 * @return {sap.ui.ux3.DataSetItem[]}
 * @public
 */
sap.ui.ux3.DataSet.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.DataSet.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.ux3.DataSetItem} vItem the item to remove or its index or id
 * @return {sap.ui.ux3.DataSetItem} the removed item or null
 * @public
 */
sap.ui.ux3.DataSet.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.DataSetItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.DataSet.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.ux3.DataSetItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.DataSetItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.DataSet.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.bindItems = function(sPath, oTemplate, oSorter, aFilters) {
	this.bindAggregation("items", sPath, oTemplate, oSorter, aFilters);
	return this;
};

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.unbindItems = function() {
	this.unbindAggregation("items");
	return this;
};

	
/**
 * Getter for aggregation <code>views</code>.<br/>
 * views
 * 
 * @return {sap.ui.ux3.DataSetView[]}
 * @public
 */
sap.ui.ux3.DataSet.prototype.getViews = function() {
	return this.getAggregation("views", []);
};


/**
 * Inserts a view into the aggregation named <code>views</code>.
 *
 * @param {sap.ui.ux3.DataSetView}
 *          oView the view to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the view should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the view is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.insertView = function(oView, iIndex) {
	this.insertAggregation("views", oView, iIndex);
	return this;
};

/**
 * Adds some view <code>oView</code> 
 * to the aggregation named <code>views</code>.
 *
 * @param {sap.ui.ux3.DataSetView}
 *            oView the view to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.DataSet.prototype.addView = function(oView) {
	this.addAggregation("views", oView);
	return this;
};

/**
 * Removes an view from the aggregation named <code>views</code>.
 *
 * @param {int | string | sap.ui.ux3.DataSetView} vView the view to remove or its index or id
 * @return {sap.ui.ux3.DataSetView} the removed view or null
 * @public
 */
sap.ui.ux3.DataSet.prototype.removeView = function(vView) {
	return this.removeAggregation("views", vView);
};

/**
 * Removes all the controls in the aggregation named <code>views</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.DataSetView[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.DataSet.prototype.removeAllViews = function() {
	return this.removeAllAggregation("views");
};

/**
 * Checks for the provided <code>sap.ui.ux3.DataSetView</code> in the aggregation named <code>views</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.DataSetView}
 *            oView the view whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.DataSet.prototype.indexOfView = function(oView) {
	return this.indexOfAggregation("views", oView);
};
	

/**
 * Destroys all the views in the aggregation 
 * named <code>views</code>.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.destroyViews = function() {
	this.destroyAggregation("views");
	return this;
};


/**
 * selection Changed 
 *
 * @name sap.ui.ux3.DataSet#selectionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.oldLeadSelectedIndex Old lead selected index
 * @param {int} oControlEvent.getParameters.newLeadSelectedIndex New lead selected index
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 * selection Changed 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.attachSelectionChanged = function(oData, fnFunction, oListener) {
	this.attachEvent("selectionChanged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.detachSelectionChanged = function(fnFunction, oListener) {
	this.detachEvent("selectionChanged", fnFunction, oListener);
	return this;	
};

/**
 * Fire event selectionChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldLeadSelectedIndex' of type <code>int</code> Old lead selected index</li>
 * <li>'newLeadSelectedIndex' of type <code>int</code> New lead selected index</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.DataSet.prototype.fireSelectionChanged = function(mArguments) {
	this.fireEvent("selectionChanged", mArguments);
	return this;
};


/**
 * Event fired when filtering is triggered. 
 *
 * @name sap.ui.ux3.DataSet#filter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filterValue Filter string 
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 * Event fired when filtering is triggered. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.attachFilter = function(oData, fnFunction, oListener) {
	this.attachEvent("filter", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("filter", fnFunction, oListener);
	return this;	
};

/**
 * Fire event filter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filterValue' of type <code>string</code> Filter string </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.DataSet.prototype.fireFilter = function(mArguments) {
	this.fireEvent("filter", mArguments);
	return this;
};


/**
 * Event fired when sorting is triggered. 
 *
 * @name sap.ui.ux3.DataSet#sort
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 * Event fired when sorting is triggered. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.attachSort = function(oData, fnFunction, oListener) {
	this.attachEvent("sort", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.ux3.DataSet</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSet.prototype.detachSort = function(fnFunction, oListener) {
	this.detachEvent("sort", fnFunction, oListener);
	return this;	
};

/**
 * Fire event sort to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSet} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.DataSet.prototype.fireSort = function(mArguments) {
	this.fireEvent("sort", mArguments);
	return this;
};


/**
 * Set LeadSelection index
 *
 * @name sap.ui.ux3.DataSet.prototype.setLeadSelection
 * @function
 * @param {int} 
 *         iIIndex
 *         

 * @type void
 * @public
 */


/**
 * Get LeadSelection index
 *
 * @name sap.ui.ux3.DataSet.prototype.getLeadSelection
 * @function

 * @type int
 * @public
 */


// Start of sap/ui/ux3/DataSet.js
///**
//* This file defines behavior for the DataSet control, 
//*/

sap.ui.ux3.DataSet.prototype.init = function() {
	//each DS needs a selectionModel for its items
	jQuery.sap.require("sap.ui.model.SelectionModel");
	this.selectionModel = new sap.ui.model.SelectionModel(sap.ui.model.SelectionModel.SINGLE_SELECTION);
	this.prepareToolbar();
};

sap.ui.ux3.DataSet.prototype.exit = function() {
	this._oFilterButton.destroy();
	this._oFilterString.destroy();
	this._oSortButton.destroy();
}

sap.ui.ux3.DataSet.prototype.prepareToolbar = function() {
	// create some filter button + some sort button for testing
	var that = this;
	this._oFilterButton = new sap.ui.commons.Button({
		id : this.getId()+"-filter",
		text : "filter"
	});
	this._oSortButton = new sap.ui.commons.Button({
		id : this.getId()+"-sort",
		text : "sort"
	});
	this._oFilterButton.attachPress(this.filter, this);
	this._oSortButton.attachPress(this.sort, this);
	this._oFilterString = new sap.ui.commons.TextField({id : this.getId()+"-filterValue"});
	this._oFilterString.attachChange(function(oEvent)
			{
		that.setFilterValue(oEvent.getParameters().newValue);
			});
}

/**
 * Press handler for the view selection buttons
 * 
 * @param {sap.ui.base.Event} oEvent Press event 	
 * @private
*/
sap.ui.ux3.DataSet.prototype.press = function(oEvent,iSelectedViewIndex) {
	var but = oEvent.oSource,
		viewIndex = but._viewIndex;
	this._oldRendering = this.getViews()[this.getSelectedView()];
	this._oldRendering.exitView();
	this.setSelectedView(viewIndex);
}

/**
 * Fire filter event
 *  	
 * @private
*/
sap.ui.ux3.DataSet.prototype.filter = function() {
	this.fireFilter({
					filterValue : this.getFilterValue()
				});
}
/**
 * Fire sort event
 *  	
 * @private
*/
sap.ui.ux3.DataSet.prototype.sort = function() {
	this.fireSort();
}

/**
 * Selection handler for the DataSetItem selection event.
 * 
 * @param {string} sItemId Id of the selected DataSetItem  	
 * @private
*/
sap.ui.ux3.DataSet.prototype.selectItem = function(oEvent) {
	var sItemId = oEvent.getParameters().itemId;
	var oItem = sap.ui.getCore().byId(sItemId);
	var oldSelectedIndex = this.selectionModel.getLeadSelectedIndex();
	if (oldSelectedIndex == oItem._index) {
		this.selectionModel.setLeadSelectedIndex(-1);
	} else {
		this.selectionModel.setLeadSelectedIndex(oItem._index);
	}
	var newSelectedIndex = this.selectionModel.getLeadSelectedIndex();
	this.fireSelectionChanged({
				oldLeadSelectedIndex: oldSelectedIndex,
				newLeadSelectedIndex: newSelectedIndex});
}

/**
 * Prepare rendering: Calls init end exit hooks on the selected view instance. Necessary to keep the view   
 * consistent to the DataSet state.
 *
 * @param {string} sItemId Id of the selected DataSetItem  	
 * @private
*/
sap.ui.ux3.DataSet.prototype.prepareRendering = function() {
	if (this.getViews().length == 0) {
		return;
	}
	if (this.getViews()[this.getSelectedView()].exitView) {
		this.getViews()[this.getSelectedView()].exitView();
	}  
	if (this.getViews()[this.getSelectedView()].initView) {
		this.getViews()[this.getSelectedView()].initView(this.getItems());
	} 
}

/*** Selection Model methods ***/

/**
 * Returns the LeadSelection index
 *
 * @param {string} sItemId Id of the selected DataSetItem  	
 * @return {int} selected index
 * @protected
*/
sap.ui.ux3.DataSet.prototype.getLeadSelection = function() {
	return this.selectionModel.getLeadSelectedIndex();
}
 
/**
 * Set the LeadSelection index
 *
 * @param {int} iIndex set LeadSelection index   	
 * @protected
*/
sap.ui.ux3.DataSet.prototype.setLeadSelection = function(iIndex) {
	this.selectionModel.setLeadSelectedIndex(iIndex);
}

/**
 * Returns true if iIndex is selected
 *
 * @param {int} iIndex index of selection  	
 * @return {boolean} index selected true/false
 * @protected
*/
sap.ui.ux3.DataSet.prototype.isSelectedIndex = function(iIndex) {
	return (this.selectionModel.getLeadSelectedIndex() == iIndex);
};

/**
 * Returns id of selected Item from given index
 *
 * @param {int} iIndex index of selection  	
 * @return {string} id of selected item
 * @protected
*/
sap.ui.ux3.DataSet.prototype.getSelectedItemId = function(iIndex) {
	 return this.getItems()[iIndex].getId();
}

/**
 * Creates a view switch button
 *
 * @param {object} oView View
 * @param {int} iIndex Index of view
 * @return {object} viewSwitch instance
 * @protected
*/
sap.ui.ux3.DataSet.prototype.createViewSwitch = function(oView, iIndex) {
	 var that = this, oViewSwitch;
	 
	 if (oView.getIcon()) {
		 oViewSwitch = new sap.ui.commons.Image({
			 id : this.getId()+"-view"+oView.getId(),
			 src:oView.getIcon()
		 });
	 } else if (oView.getName()) {
		 oViewSwitch = new sap.ui.commons.Button({
			 id : this.getId()+"-view"+oView.getId(),
			 text : oView.getName()
		 });
	 } else {
		 oViewSwitch = new sap.ui.commons.Button({
			 id : this.getId()+"-view"+oView.getId(),
			 text : oView.getId()
		 });
	 }
	 oViewSwitch._viewIndex = iIndex;
	 oViewSwitch.attachPress(function(oEvent){that.press(oEvent,iIndex);}, that);
	 return oViewSwitch;
}

/**
 * Rerendering of the Toolbar
 *
 * @protected
*/
sap.ui.ux3.DataSet.prototype._rerenderToolbar = function() {
	var $content = jQuery.sap.byId(this.getId() + "-toolbar");
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.DataSetRenderer.renderToolbar(rm, this);
		rm.flush($content[0]);
		rm.destroy();
	}
};

/*** override API methods ***/

sap.ui.ux3.DataSet.prototype.removeItem = function(oItem) {
	var result = this.removeAggregation("items", oItem);
	oItem.detachSelected(this.selectItem,this);
	return result;
}

sap.ui.ux3.DataSet.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	oItem.attachSelected(this.selectItem,this);
	oItem._index = this.getItems().length - 1;
	return this;
}

sap.ui.ux3.DataSet.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	oItem.attachSelected(this.selectItem,this);
	oItem._index = iIndex;
	return this;
}

sap.ui.ux3.DataSet.prototype.setFilterValue = function(sFilterValue) {
	this.setProperty("filterValue",sFilterValue, true);
	return this;
}

sap.ui.ux3.DataSet.prototype.getFilterValue = function() {
	return this.getProperty("filterValue");
}

sap.ui.ux3.DataSet.prototype.insertView = function(oView, iIndex) {
	var oViewSwitch = this.createViewSwitch(oView,iIndex);
	this.insertAggregation("views", oView, iIndex);
	this.insertAggregation("_viewSwitches", oViewSwitch, iIndex, true);
	return this;
};

sap.ui.ux3.DataSet.prototype.addView = function(oView) {
	var iIndex = this.getViews().length, 
		oViewSwitch = this.createViewSwitch(oView,iIndex);
	this.addAggregation("views", oView);
	this.addAggregation("_viewSwitches", oViewSwitch, true);
	return this;
};

sap.ui.ux3.DataSet.prototype.removeView = function(vView) {
	var oViewId; 
	if (typeof(vView) == "string") { // ID of the element is given
		oViewId = this.getId()+"-view"+vView;
		this.removeAggregation("_viewSwitches", oViewId, true).destroy();
	}
	else if (typeof(vView) == "object") { // the element itself is given or has just been retrieved
		oViewId = this.getId()+"-view"+vView.getId();
		this.removeAggregation("_viewSwitches", oViewId, true).destroy();
	}
	else if (typeof(vView) == "number") { // "vElement" is the index now
		this.removeAggregation("_viewSwitches", vView, true).destroy();
	}
	return this.removeAggregation("views", vView);
};

sap.ui.ux3.DataSet.prototype.destroyViews = function() {
	this.destroyAggregation("_viewSwitches");
	this.destroyAggregation("views");
	return this;
};

sap.ui.ux3.DataSet.prototype.removeAllViews = function() {
	this.removeAllAggregation("_viewSwitches");
	return this.removeAllAggregation("views");
};

sap.ui.ux3.DataSet.prototype.setEnableSorting = function(bEnableSorting) {
	//suppress rerendering ofDataSet. Rerender only the toolbar.
	this.setProperty("enableSorting", bEnableSorting, true);
	this._rerenderToolbar();
	return this;
};

sap.ui.ux3.DataSet.prototype.setEnableFiltering = function(bEnableFiltering) {
	//suppress rerendering ofDataSet. Rerender only the toolbar.
	this.setProperty("enableFiltering", bEnableFiltering, true);
	this._rerenderToolbar();
	return this;
};
}; // end of sap.ui.ux3.DataSet
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.DataSet
jQuery.sap.declare("sap.ui.ux3.DataSetRenderer");

/**
 * @class DataSet renderer. 
 * @static
 */
sap.ui.ux3.DataSetRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.ux3.DataSetRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager, 
		oView = null,
		oSwitch, aViewSwitches;
	
	oControl.prepareRendering();
	
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.writeAttribute("class", "sapUiUx3DS");
	rm.write(">");
	rm.write("<div id='" + oControl.getId() + "-toolbar'>");
	this.renderToolbar(rm,oControl);
	rm.write("</div>");
	rm.write("<div id='" + oControl.getId() + "-items'>");
	oView = oControl.getViews()[oControl.getSelectedView()];
	rm.renderControl(oView);
	rm.write("</div>");
	rm.write("</div>");
};

/**
 * Renders the HTML for the DataSet Toolbar
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager The RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl An object representation of the control that should be
 *            rendered
 */
sap.ui.ux3.DataSetRenderer.renderToolbar = function(oRenderManager,oControl) {
	var rm = oRenderManager,
		aViewSwitches;
	
	if (oControl.getViews().length > 1) {
		aViewSwitches = oControl.getAggregation("_viewSwitches");
		for ( var i = 0; i < aViewSwitches.length; i++) {
			rm.renderControl(aViewSwitches[i]);
		}
	}
	if (oControl.getEnableFiltering()){
		rm.renderControl(oControl._oFilterString);
		rm.renderControl(oControl._oFilterButton);
	}
	if (oControl.getEnableSorting()){
		rm.renderControl(oControl._oSortButton);
	}
};

}; // end of sap.ui.ux3.DataSetRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingAction') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingAction.
jQuery.sap.declare("sap.ui.ux3.ThingAction");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new ThingAction.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>enabled : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Thing Action for Swatch, QuickView, Thinginspector
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ThingAction = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ThingAction.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.ux3.ThingAction. 
 * Resulting metadata can be obtained via sap.ui.ux3.ThingAction.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ThingAction", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getEnabled", "setEnabled", 
    // aggregations
    
    // associations
    
    // events
    "attachSelect", "detachSelect"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : null},
    "enabled" : {name : "enabled", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "select" : "select"
  }

});	

sap.ui.ux3.ThingAction.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>text</code>.
 * text of action
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.ThingAction.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingAction.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * action enabled (true/false)
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.ux3.ThingAction.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingAction.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Event will be fired when the action was triggered. 
 *
 * @name sap.ui.ux3.ThingAction#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected action
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected Thing Action
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.ux3.ThingAction</code>.<br/>
 * Event will be fired when the action was triggered. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingAction.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.ux3.ThingAction</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingAction.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected action</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected Thing Action</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingAction} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ThingAction.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


// Start of sap/ui/ux3/ThingAction.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.ThingAction.prototype.init = function(){
//   // do something for initialization...
//};
sap.ui.ux3.ThingAction.prototype.onclick = function(oEvent) {
	this.fireSelect({
		id : this.getId(),
		action: this
	});
};
sap.ui.ux3.ThingAction.prototype.onsapselect = function(oEvent) {
	this.fireSelect({
		id : this.getId(),
		action: this
	});
};

sap.ui.ux3.ThingAction.prototype.setTooltip = function(oTooltip) {

	var oOldTooltip = this.getTooltip();
	// if the old tooltip was a Tooltip object, remove it as a delegate
	if (oOldTooltip instanceof sap.ui.core.TooltipBase){
		this.removeDelegate(oOldTooltip);
	}
	// if the new tooltip is a Tooltip object, add it as a delegate
	if (oTooltip instanceof sap.ui.core.TooltipBase){
		oTooltip._currentControl = this;
		this.addDelegate(oTooltip);
	}
	this.setAggregation("tooltip", oTooltip, true);

	return this;
};
}; // end of sap.ui.ux3.ThingAction
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.Exact
jQuery.sap.declare("sap.ui.ux3.ExactRenderer");

/**
 * @class Exact renderer.
 * @static
 */
sap.ui.ux3.ExactRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3Exact");
	rm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if(sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	rm.renderControl(oControl._searchArea);
	if(oControl._bDetailsVisible){
		rm.renderControl(oControl._browser);
		rm.renderControl(oControl._resultText);
		rm.renderControl(oControl._resultArea);
	}
	rm.write("</div>");
};
}; // end of sap.ui.ux3.ExactRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellPersonalization') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the class sap.ui.ux3.ShellPersonalization
jQuery.sap.declare("sap.ui.ux3.ShellPersonalization");
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained




/**
 * Experimental implementation of visual Ux3 Shell personalization / branding.
 * 
 * DO NOT USE PRODUCTIVELY!!!
 * 
 *
 * Being completely non-generic as of now, this is supposed to facilitate discussions with Ux
 * about the personalization capabilities. Once that concept is more final, we can go for a cleaner implementation,
 * considering the number of configurable properties etc.
 *
 * @param oShell
 * @public
 */
sap.ui.ux3.ShellPersonalization = function(oShell) {
	sap.ui.base.EventProvider.apply(this);
	this.shell = oShell;

	this.oSettings = {}; // TODO: read user config from somewhere/server/app
};

sap.ui.ux3.ShellPersonalization.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);



/**
 * Makes the personalization use the given settings.
 *
 * @param oSettings
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.initializeSettings = function(oSettings) {
	this.oSettings = jQuery.extend({}, oSettings);
	if (this.shell.getDomRef()) {
		this.applySettings(oSettings);
	}
};



/*  EVENT HANDLING */

sap.ui.ux3.ShellPersonalization.M_EVENTS = {personalizationChange: "personalizationChange"};

sap.ui.ux3.ShellPersonalization.prototype.attachPersonalizationChange = function(fFunction, oListener) {
	this.attachEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, fFunction, oListener);
};

sap.ui.ux3.ShellPersonalization.prototype.detachPersonalizationChange = function(fFunction, oListener) {
	this.detachEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, fFunction, oListener);
};

sap.ui.ux3.ShellPersonalization.prototype.firePersonalizationChange = function(mParameters) {
	this.fireEvent(sap.ui.ux3.ShellPersonalization.M_EVENTS.personalizationChange, mParameters);
};



/**
 * The default settings
 */
sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS = {
		bByDStyle: false,

		sBgColor: "rgb(17,17,17)",
		sBgCssImg: null, // updated later
		sBgImgSrc: null,
		sBgImgPos: "tile",
		fBgImgOpacity: 1,

		fSidebarOpacity: 1,
		sLineColor:"rgb(239,170,0)",

		sLogoImageSrc: null,
		sLogoAlign: "left",
		bUseLogoSize: false
};

sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1 = sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif');

sap.ui.ux3.ShellPersonalization.IMAGE_FOLDER_PATH = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/shell/";

if (jQuery.browser.mozilla) {
	sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-moz-linear-gradient(top center, #606366, #2C2C2C)";
} else if (jQuery.browser.msie) {
	if (jQuery.browser.version == "7.0" || jQuery.browser.version == "8.0" || jQuery.browser.version == "9.0") {
	sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "url("
		+ sap.ui.ux3.ShellPersonalization.IMAGE_FOLDER_PATH
		+ "Workset_bg.png)";
	} else { // IE10+
		sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-ms-linear-gradient(#606366, #2C2C2C)";
	}
} else if (jQuery.browser.webkit) {
	sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.sBgCssImg = "-webkit-gradient(linear, left top, left bottom, from(#606366), to(#2C2C2C))";
}





/**
 * Returns whether there are any personalization changes
 *
 * @returns {Boolean}
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.hasChanges = function() {
	var iSettings = 0;
	for (var key in this.oSettings) {
		iSettings++;
	}
	return (iSettings > 0);
};


/**
 * Applies the given personalization settings to the DOM.
 *
 * @param oSettings
 */
sap.ui.ux3.ShellPersonalization.prototype.applySettings = function(oSettings) {
	// copy fallback settings and mix in the given settings
	var oActualSettings = jQuery.extend({}, sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS);
	oActualSettings = jQuery.extend(oActualSettings, oSettings);

	// apply the settings
	this.applyByDStyle(oActualSettings.bByDStyle);

	this.applyBgColor(oActualSettings.sBgColor);
	this.applyBgImage(oActualSettings.sBgCssImg, oActualSettings.sBgImgSrc);


	// TODO: bgImgPos
	this.applyBgImageOpacity(oActualSettings.fBgImgOpacity);

	if (oActualSettings.sHeaderImageSrc) {
		this.applyHeaderImage(oActualSettings.sHeaderImageSrc);
	} else {
		jQuery.sap.domById(this.shell.getId() + "-hdr").style.backgroundImage = "";
	}
	this.applySidebarOpacity(oActualSettings.fSidebarOpacity);

	this.applyBgColor(oActualSettings.sBgColor);
	this.applyLineColor(oActualSettings.sLineColor);

	this.applyLogoImage(oActualSettings.sLogoImageSrc);
	this.applyLogoAlign(oActualSettings.sLogoAlign);
	this.applyUseLogoSize(oActualSettings.bUseLogoSize);
};


/**
 * Opens the personalization Dialog. This can be called from wherever the application wants to offer branding changes.
 *
 * @public
 */
sap.ui.ux3.ShellPersonalization.prototype.openDialog = function() {
	if (this.oDialog && this._getDialog().isOpen()) {
		return;
	} // first check is important because if !this.oDialog, the getter builds the Dialog and relies on the existence of this.oSettings!
															// but on the other hand, this.oSettings must not be initialized when the Dialog is already open
	this.oTransientSettings = jQuery.extend({}, this.oSettings);

	this._getDialog().open();

	// drag&drop for images with local file API
	this._bindDragAndDrop("bg");
	this._bindDragAndDrop("hdr");
	this._bindDragAndDrop("logo");
};


sap.ui.ux3.ShellPersonalization.prototype.getTransientSettingsWithDefaults = function() {
	return jQuery.extend(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS), this.oTransientSettings);
};


sap.ui.ux3.ShellPersonalization.prototype._bindDragAndDrop = function(sPrefix) {
	if (window.FileReader) {
		var sId = this.shell.getId() + "-p13n_";
		jQuery.sap.byId(sId + sPrefix + "ImageImg")
			.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
		jQuery.sap.byId(sId + sPrefix + "ImageHolder")
			.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
	}
};
sap.ui.ux3.ShellPersonalization.prototype._unbindDragAndDrop = function(sPrefix) {
	if (window.FileReader) {
		var sId = this.shell.getId() + "-p13n_";
		jQuery.sap.byId(sId + "hdrImageImg")
			.unbind('dragover', this._handleDragover)
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
		jQuery.sap.byId(sId + "hdrImageHolder")
			.unbind('dragover', this._handleDragover)
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
	}
};


/**
 * Returns and - if necessary - constructs the Dialog
 *
 * @returns {sap.ui.commons.Dialog}
 */
sap.ui.ux3.ShellPersonalization.prototype._getDialog = function() {
	if (!this.oDialog) {
		jQuery.sap.require("sap.ui.ux3.ShellColorPicker");

		var sId = this.shell.getId() + "-p13n_";
		var oSettingsWithDefaults = jQuery.extend(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS), this.oSettings);
		var c = sap.ui.commons;
		var that = this;


		/* build the Dialog */

		var d = new c.Dialog({title:"Shell Personalization",width:"544px",height:"560px",showCloseButton:false,resizable:false,closed:[function(){
			// drag&drop for images with local file API
			this._unbindDragAndDrop("bg");
			this._unbindDragAndDrop("hdr");
			this._unbindDragAndDrop("logo");
			this.oTransientSettings = null;
		},this]}).addStyleClass("sapUiUx3ShellP13n");


		/* build the tabstrip */

		var tabs = new c.TabStrip({width:"100%",height:"100%",select:jQuery.proxy(function(oParams){
			var oControl = sap.ui.getCore().byId(oParams.getParameter("id"));
			if (oControl) {
				var index = oParams.getParameter("index");
				oControl.setSelectedIndex(index);
				var that = this;
				if (index == 0) {
					// apply the current settings to the plain HTML parts
					window.setTimeout(function(){jQuery.sap.byId(that.shell.getId() + "-bgColor").css("background-color", that.getTransientSettingsWithDefaults().sBgColor);},1);

					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("bg");
					}, this), 0);

				} else if (index == 1) {
					// apply the current settings to the plain HTML parts
					window.setTimeout(function(){jQuery.sap.byId(that.shell.getId() + "-lineColor").css("background-color", that.getTransientSettingsWithDefaults().sLineColor);},1);

					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("hdr");
					}, this), 0);

				} else if (index == 2) {
					// bind the drop event handlers
					window.setTimeout(jQuery.proxy(function(){
						this._bindDragAndDrop("logo");
					}, this), 0);
				}
			}
		}, this)});


		/* build the first tab */

		this.oBgImgHtml = new sap.ui.core.HTML(sId + "bgImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "bgImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "bgImageImg' src='"
			+ (this.oTransientSettings.sBackgroundImageSrc ? this.oTransientSettings.sBackgroundImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);

		this.oBgImgOpacitySlider = new c.Slider({
			value:(this.oTransientSettings.fBgImgOpacity !== undefined ? 100 - this.oTransientSettings.fBgImgOpacity * 100 : 100 -sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.fBgImgOpacity * 100),
			liveChange:jQuery.proxy(this._handleBgImageOpacitySliderChange,this)
		});
		this.oSidebarOpacitySlider = new c.Slider({
			value:(this.oTransientSettings.fSidebarOpacity !== undefined ? 100 - this.oTransientSettings.fSidebarOpacity * 100 : 100 - sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS.fSidebarOpacity * 100),
			liveChange:jQuery.proxy(this._handleSidebarOpacitySliderChange,this)
		});

		this.oBgColorPicker = new sap.ui.ux3.ShellColorPicker(sId + "bgColorPicker");
		this.oBgColorPicker.attachLiveChange(function(oEvent){
			that._handleBgColorChange(oEvent);
		});
		var oBgColorBtn = new c.Button({text:"Change..."});
		var that = this;
		oBgColorBtn.attachPress(function(){
			if (!that.oBgColorPicker.isOpen()) {
				that.oBgColorPicker.open(sap.ui.ux3.ShellColorPicker.parseCssRgbString(that.getTransientSettingsWithDefaults().sBgColor), sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, jQuery.sap.domById(that.shell.getId() + "-bgColor"));
			}
		});
		this.oBgPreviewHtml = new sap.ui.core.HTML({preferDom:true,content:"<div id='" + this.shell.getId() + "-bgColor' style='background-color:" + oSettingsWithDefaults.sBgColor + "' class='sapUiUx3ShellColorPickerPreview'></div>"});

		var oBgTab = new sap.ui.commons.Tab().setText("Background").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			.createRow(new c.Label({text:"Background Image:"}), this.oBgImgHtml)
			.createRow(new c.Label({text:"Image Transparency:"}), this.oBgImgOpacitySlider)
			.createRow(new c.Label({text:"Background Color:"}), new c.layout.MatrixLayoutCell().addContent(this.oBgPreviewHtml).addContent(oBgColorBtn))
			.createRow(null)
			.createRow(new c.Label({text:"Sidebar Transparency:"}), this.oSidebarOpacitySlider)
		);
		tabs.addTab(oBgTab);


		/* build the second tab */

		this.oByDStyleCb = new c.CheckBox({text:"ByDesign-style Header Bar",checked:this.oTransientSettings.bByDStyle,change:jQuery.proxy(this._handleByDStyleChange,this)});
		this.oHdrImgHtml = new sap.ui.core.HTML(sId + "hdrImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "hdrImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "hdrImageImg' src='"
			+ (this.oTransientSettings.sHeaderImageSrc ? this.oTransientSettings.sHeaderImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);

		this.oLineColorPicker = new sap.ui.ux3.ShellColorPicker(sId + "lineColorPicker");
		this.oLineColorPicker.attachLiveChange(function(oEvent){
			that._handleLineColorChange(oEvent);
		});
		var oLineColorBtn = new c.Button({text:"Change..."});
		var that = this;
		oLineColorBtn.attachPress(function(){
			if (!that.oLineColorPicker.isOpen()) {
				that.oLineColorPicker.open(sap.ui.ux3.ShellColorPicker.parseCssRgbString(that.getTransientSettingsWithDefaults().sLineColor), sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, jQuery.sap.domById(that.shell.getId() + "-lineColor"));
			}
		});
		this.oLinePreviewHtml = new sap.ui.core.HTML({preferDom:true,content:"<div id='" + this.shell.getId() + "-lineColor' style='background-color:" + oSettingsWithDefaults.sLineColor + "' class='sapUiUx3ShellColorPickerPreview'></div>"});

		var oHdrTab = new sap.ui.commons.Tab().setText("Header Bar").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			//.createRow(this.oByDStyleCb)
			.createRow(new c.Label({text:"Line Color (ByD-style only):"}), new c.layout.MatrixLayoutCell().addContent(this.oLinePreviewHtml).addContent(oLineColorBtn))
			.createRow(null)
			.createRow(new c.Label({text:"Header Image:"}),	this.oHdrImgHtml)
		);
		tabs.addTab(oHdrTab);


		/* build the third tab */

		this.oLogoImgHtml = new sap.ui.core.HTML(sId + "logoImageHolder", {
			preferDOM:true,
			content:"<div id='" + sId + "logoImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "logoImageImg' src='"
			+ (this.oTransientSettings.sLogoImageSrc ? this.oTransientSettings.sLogoImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>"}
		);
		this.oLogoRbg = new c.RadioButtonGroup()
			.addItem(new sap.ui.core.Item({text:"Left",key:"left"}))
			.addItem(new sap.ui.core.Item({text:"Center",key:"center"}))
			.attachSelect(this._handleLogoAlignChange, this);
		this.oUseLogoSizeCb = new c.CheckBox({text:"Use original image size",checked:this.oTransientSettings.bUseLogoSize,change:jQuery.proxy(this._handleUseLogoSizeChange,this)});
		var oLogoTab = new sap.ui.commons.Tab().setText("Logo").addContent(new c.layout.MatrixLayout({layoutFixed:false})
			.createRow(new c.Label({text:"Logo Image:"}), this.oLogoImgHtml)
			.createRow(new c.Label({text:"Position:"}), this.oLogoRbg)
			.createRow(this.oUseLogoSizeCb)
		);
		tabs.addTab(oLogoTab);
		d.addContent(tabs);


		/* finish building the Dialog */

		var that = this;
		d.addButton(new c.Button({text:"Reset All",press:function(){
			that.applySettings(jQuery.extend({}, sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS));
			that.oSettings = {};
			that.oTransientSettings = {};
			that.updateDialog();
			that._bindDragAndDrop("bg");
			that._bindDragAndDrop("hdr");
			that._bindDragAndDrop("logo");
			that.firePersonalizationChange({settings:{}});
		}}));
		d.addButton(new c.Button({text:"OK",press:function(){
			that.oSettings = jQuery.extend({}, that.oTransientSettings); // settings are already applied
			that.firePersonalizationChange({settings:that.oSettings});
			d.close();
		}}));
		d.addButton(new c.Button({text:"Cancel",press:function(){
			that.applySettings(that.oSettings);
			that.updateDialog();
			d.close();
		}}));
		this.oDialog = d;
	}
	return this.oDialog;
};


sap.ui.ux3.ShellPersonalization.prototype.updateDialog = function() {
	var oActualSettings = jQuery.extend({}, sap.ui.ux3.ShellPersonalization.ORIGINAL_SETTINGS);
	oActualSettings = jQuery.extend(oActualSettings, this.oSettings);
	var sId = this.shell.getId() + "-p13n_";

	this.oBgImgHtml.setContent("<div id='" + sId + "bgImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "bgImageImg' src='"
			+ (oActualSettings.sBackgroundImageSrc ? oActualSettings.sBackgroundImageSrc :sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");
	this.oBgImgOpacitySlider.setValue(100 - oActualSettings.fBgImgOpacity * 100);
	this.oSidebarOpacitySlider.setValue(100 - oActualSettings.fSidebarOpacity * 100);

	this.oByDStyleCb.setChecked(oActualSettings.bByDStyle);
	this.oHdrImgHtml.setContent("<div id='" + sId + "hdrImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "hdrImageImg' src='"
			+ (oActualSettings.sHeaderImageSrc ? oActualSettings.sHeaderImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");

	this.oLogoRbg.setSelectedIndex((oActualSettings.sLogoAlign == "center") ? 1 : 0);
	this.oUseLogoSizeCb.setChecked(oActualSettings.bUseLogoSize);
	this.oLogoImgHtml.setContent("<div id='" + sId + "logoImageHolder' class='sapUiUx3ShellP13nImgHolder'><img id='" + sId + "logoImageImg' src='"
			+ (oActualSettings.sLogoImageSrc ? oActualSettings.sLogoImageSrc : sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif')) + "'/></div>");
};




/* property change handlers and code to apply each setting to the UI */


sap.ui.ux3.ShellPersonalization.prototype._handleByDStyleChange = function(oEvent) {
	var bChecked = oEvent.getParameter("checked");
	this.oTransientSettings.bByDStyle = bChecked;
	this.applyByDStyle(bChecked);
};
sap.ui.ux3.ShellPersonalization.prototype.applyByDStyle = function(bByDStyle) {
	this.shell.$().toggleClass("sapUiUx3ShellByD", bByDStyle);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBgColorChange = function(oEvent) {
	var cssColor = oEvent.getParameter("cssColor");
	this.oTransientSettings.sBgColor = cssColor;
	this.applyBgColor(cssColor);
};
sap.ui.ux3.ShellPersonalization.prototype.applyBgColor = function(sCssColor) {
	jQuery.sap.byId(this.shell.getId() + "-bg").css("background-color", sCssColor);
	jQuery.sap.byId(this.shell.getId() + "-bgColor").css("background-color", sCssColor);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBackgroundImageChange = function(url, bPersistImmediately) {
	var tile = true; // TODO
	if (bPersistImmediately) {
		if (tile) {
			this.oSettings.sBgCssImg = "url(" + url + ")";
			this.oSettings.sBgImgSrc = null;
		} else {
			this.oSettings.sBgCssImg = null;
			this.oSettings.sBgImgSrc = url;
		}
		this.applyBgImage(this.oSettings.sBgCssImg, this.oSettings.sBgImgSrc);
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		if (tile) {
			this.oTransientSettings.sBgCssImg = "url(" + url + ")";
			this.oTransientSettings.sBgImgSrc = null;
		} else {
			this.oTransientSettings.sBgCssImg = null;
			this.oTransientSettings.sBgImgSrc = url;
		}
		this.applyBgImage(this.oTransientSettings.sBgCssImg, this.oTransientSettings.sBgImgSrc);
	}
};

sap.ui.ux3.ShellPersonalization.prototype.applyBgImage = function(sBgCssImg, sBgImgSrc) {
	var sForcedImgSrc = sBgImgSrc ? sBgImgSrc : sBgCssImg.substring(4, sBgCssImg.length-1);
	sBgCssImg = sBgCssImg ? sBgCssImg : "";
	sBgImgSrc = sBgImgSrc ? sBgImgSrc : sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1;

	var oBgImgRef = jQuery.sap.domById(this.shell.getId() + "-bgImg");
	var oBgImgPreviewRef = jQuery.sap.domById(this.shell.getId() + "-p13n_bgImageImg");

	oBgImgRef.style.backgroundImage = sBgCssImg;
	oBgImgRef.src = sBgImgSrc;

	if (oBgImgPreviewRef) {
		oBgImgPreviewRef.src = sForcedImgSrc;
	}
};

sap.ui.ux3.ShellPersonalization.prototype._handleHeaderImageChange = function(dataUrl, bPersistImmediately) {
	if (bPersistImmediately) {
		this.oSettings.sHeaderImageSrc = dataUrl;
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		this.oTransientSettings.sHeaderImageSrc = dataUrl;
	}
	this.applyHeaderImage(dataUrl);
};
sap.ui.ux3.ShellPersonalization.prototype.applyHeaderImage = function(dataUrl) {
	jQuery.sap.byId(this.shell.getId() + "-hdr").css("background-image", "url(" + dataUrl + ")");
	if (this.oDialog && this.oDialog.isOpen()) {
		jQuery.sap.byId(this.shell.getId() + "-p13n_hdrImageImg").attr("src", dataUrl);
	}
};

sap.ui.ux3.ShellPersonalization.prototype._handleLineColorChange = function(oEvent) {
	var cssColor = oEvent.getParameter("cssColor");
	this.oTransientSettings.sLineColor = cssColor;
	this.applyLineColor(cssColor);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLineColor = function(sCssColor) {
	jQuery.sap.byId(this.shell.getId() + "-hdr").find("hr").css("background-color", sCssColor);
	jQuery.sap.byId(this.shell.getId() + "-lineColor").css("background-color", sCssColor);
};

sap.ui.ux3.ShellPersonalization.prototype._handleBgImageOpacitySliderChange = function(oEvent) {
	var value = (100 - oEvent.getParameter("value"))/100;
	this.oTransientSettings.fBgImgOpacity = value;
	this.applyBgImageOpacity(value);
};
sap.ui.ux3.ShellPersonalization.prototype.applyBgImageOpacity = function(fValue) {
	jQuery.sap.byId(this.shell.getId() + "-bgImg").css("opacity", fValue);
};

sap.ui.ux3.ShellPersonalization.prototype._handleSidebarOpacitySliderChange = function(oEvent) {
	var value = (100 - oEvent.getParameter("value"))/100;
	this.oTransientSettings.fSidebarOpacity = value;
	this.applySidebarOpacity(value);
};
sap.ui.ux3.ShellPersonalization.prototype.applySidebarOpacity = function(fValue) {
	jQuery.sap.byId(this.shell.getId() + "-tp").css("opacity", fValue);
	jQuery.sap.byId(this.shell.getId() + "-paneBar").children(":nth-child(2)").css("opacity", fValue);
};

sap.ui.ux3.ShellPersonalization.prototype._handleLogoImageChange = function(url, bPersistImmediately) {
	if (bPersistImmediately) {
		this.oSettings.sLogoImageSrc = url;
		this.firePersonalizationChange({settings:this.oSettings});
	} else {
		this.oTransientSettings.sLogoImageSrc = url;
	}
	this.applyLogoImage(url);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLogoImage = function(url) {
	if (!url) {
		url = this.shell.getAppIcon();
		if (!url) {
			url = sap.ui.ux3.ShellPersonalization.TRANSPARENT_1x1;
		}
	}
	jQuery.sap.byId(this.shell.getId() + "-logoImg").attr("src", url);
	jQuery.sap.byId(this.shell.getId() + "-p13n_logoImageImg").attr("src", url); // just in case the dialog is displaying it
};

sap.ui.ux3.ShellPersonalization.prototype._handleLogoAlignChange = function(oEvent) {
	var iIndex = oEvent.getParameter("selectedIndex");
	var sAlign = ["left","center"][iIndex];
	this.oTransientSettings.sLogoAlign = sAlign;
	this.applyLogoAlign(sAlign);
};
sap.ui.ux3.ShellPersonalization.prototype.applyLogoAlign = function(sLogoAlign) {
	var sRealAlign = sLogoAlign;
	if (sap.ui.getCore().getConfiguration().getRTL() && (sRealAlign == "right")) {
		sRealAlign = "left"; // need to use left/right, as "begin" is not supported by IE8
	}
	jQuery.sap.byId(this.shell.getId() + "-hdr").css("text-align", sRealAlign);
};

sap.ui.ux3.ShellPersonalization.prototype._handleUseLogoSizeChange = function(oEvent) {
	var bUse = oEvent.getParameter("checked");
	this.oTransientSettings.bUseLogoSize = bUse;
	this.applyUseLogoSize(bUse);
};
sap.ui.ux3.ShellPersonalization.prototype.applyUseLogoSize = function(bUseLogoSize) {
	jQuery.sap.byId(this.shell.getId() + "-hdr").toggleClass("sapUiUx3ShellHeaderFlex", bUseLogoSize);
	jQuery.sap.byId(this.shell.getId() + "-hdrImg").toggleClass("sapUiUx3ShellHeaderImgFlex", bUseLogoSize);
};



/* drag & drop code */


sap.ui.ux3.ShellPersonalization.prototype._handleDragover = function(evt) {
	var id = evt.target.id;
	if (!this._dragOverBlinking) {
		var $bg = jQuery.sap.byId(id);
		$bg.css("opacity", "0.5");
		this._dragOverBlinking = true;
		var that = this;
		window.setTimeout(function(){
			$bg.css("opacity", "1");
			window.setTimeout(function(){
				that._dragOverBlinking = null;
			}, 250);
		}, 250);
	}
  return false;
};
sap.ui.ux3.ShellPersonalization.prototype._handleDragend = function(evt) {
	return false;
};
sap.ui.ux3.ShellPersonalization.prototype._handleDrop = function(evt) {
	var id = evt.target.id;
	evt.preventDefault();
	var e = evt.originalEvent;
	var file = e.dataTransfer.files[0];
	if (file) {
		// read file content
		var reader = new window.FileReader();
		reader.onload = jQuery.proxy(function(event) {
			var dataUrl = event.target.result;
			if ((id == this.shell.getId() + "-p13n_bgImageImg")
					|| (id == this.shell.getId() + "-p13n_bgImageHolder")) {
				this._handleBackgroundImageChange(dataUrl);
			} else if ((id == this.shell.getId() + "-p13n_hdrImageImg")
					|| (id == this.shell.getId() + "-p13n_hdrImageHolder")) {
				this._handleHeaderImageChange(dataUrl);
			} else if ((id == this.shell.getId() + "-p13n_logoImageImg")
					|| (id == this.shell.getId() + "-p13n_logoImageHolder")) {
				this._handleLogoImageChange(dataUrl);
			}
			reader = null;
		}, this);
		reader.readAsDataURL(file);
	}
};
}; // end of sap.ui.ux3.ShellPersonalization
if ( !jQuery.sap.isDeclared('sap.ui.ux3.NavigationBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.NavigationBar.
jQuery.sap.declare("sap.ui.ux3.NavigationBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NavigationBar.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>toplevelVariant : boolean</li>
 * <li>visible : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>items : sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>selectedItem : sap.ui.ux3.NavigationItem</li>
 * <li>associatedItems : sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>select : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Provides enhanced navigation capabilities and is the parent control of NavigationItem. It is displayed in the form of a horizontal line
 * with switching markers depending on the currently selected item. The size of an item which is currently chosen by the user is enlarged. In the case
 * that a large number of items is defined for the bar, this is made transparent to the user by showing symbols for scrolling options (forwards and backwards)
 * to see the next or previous items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.NavigationBar = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.NavigationBar.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.NavigationBar. 
 * Resulting metadata can be obtained via sap.ui.ux3.NavigationBar.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.NavigationBar", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getToplevelVariant", "setToplevelVariant", "getVisible", "setVisible", 
    // aggregations
    "getItems", "insertItem", "addItem", "removeItem", "removeAllItems", "indexOfItem", "destroyItems", 
    // associations
    "getSelectedItem", "setSelectedItem", "getAssociatedItems", "addAssociatedItem", "removeAssociatedItem", "removeAllAssociatedItems", 
    // events
    "attachSelect", "detachSelect", 
    // methods
    "setAssociatedItems", "isSelectedItemValid"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "toplevelVariant" : {name : "toplevelVariant", type : "boolean", group : "Misc", defaultValue : false},
    "visible" : {name : "visible", type : "boolean", group : "Appearance", defaultValue : true}
  },
  defaultAggregation : "items",
  aggregations : {
    "items" : {name : "items", type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "item"}
  },
  associations : {
    "selectedItem" : {name : "selectedItem", type : "sap.ui.ux3.NavigationItem", multiple : false}, 
    "associatedItems" : {name : "associatedItems", type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "associatedItem"}
  },
  events : {
    "select" : "select"
  }

});	

sap.ui.ux3.NavigationBar.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>toplevelVariant</code>.
 * Defines whether the navigation bar shall have top-level appearance
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>toplevelVariant</code>
 * @public
 * 
 */
sap.ui.ux3.NavigationBar.prototype.getToplevelVariant = function() {
	return this.getProperty("toplevelVariant");
};

/**
 * Setter for property <code>toplevelVariant</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bToplevelVariant  new value for property <code>toplevelVariant</code>
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.setToplevelVariant = function(bToplevelVariant) {
	this.setProperty("toplevelVariant", bToplevelVariant);
	return this;
};


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * 
 */
sap.ui.ux3.NavigationBar.prototype.getVisible = function() {
	return this.getProperty("visible");
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);
	return this;
};

	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * If the navigation items need to have a different parent than the NavigationBar, alternatively the associatedItems association can be used.
 * The NavigationBar follows the approach to use the items aggregation. If this aggregation is empty, associatedItems is used.
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.getItems = function() {
	return this.getAggregation("items", []);
};


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);
	return this;
};

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.NavigationBar.prototype.addItem = function(oItem) {
	this.addAggregation("items", oItem);
	return this;
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vItem the item to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed item or null
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.removeItem = function(vItem) {
	return this.removeAggregation("items", vItem);
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.removeAllItems = function() {
	return this.removeAllAggregation("items");
};

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.indexOfItem = function(oItem) {
	return this.indexOfAggregation("items", oItem);
};
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.destroyItems = function() {
	this.destroyAggregation("items");
	return this;
};


/**
 * The selected NavigationItem.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.getSelectedItem = function() {
	return this.getAssociation("selectedItem", null);
};

/**
 * The selected NavigationItem.
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.setSelectedItem = function(vSelectedItem) {
	this.setAssociation("selectedItem", vSelectedItem);
	return this;
};


	
/**
 * This association is ignored as long as the items aggregation is used; and supposed to be used alternatively when the items should be aggregated by other
 * entities.
 * 
 * @return {string[]}
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.getAssociatedItems = function() {
	return this.getAssociation("associatedItems", []);
};
	
/**
 *
 * @param {string | sap.ui.ux3.NavigationItem} vAssociatedItem
 *    Id of a associatedItem which becomes an additional target of this <code>associatedItems</code> association.
 *    Alternatively, a associatedItem instance may be given. 
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.addAssociatedItem = function(vAssociatedItem) {
	this.addAssociation("associatedItems", vAssociatedItem);
	return this;
};

/**
 * @param {int | string | sap.ui.ux3.NavigationItem} vAssociatedItem the associatedItem to remove or its index or id
 * @return {string} the id of the removed associatedItem or null
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.removeAssociatedItem = function(vAssociatedItem) {
	return this.removeAssociation("associatedItems", vAssociatedItem);
};

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.removeAllAssociatedItems = function() {
	return this.removeAllAssociation("associatedItems");
};

	
/**
 * Event is fired when an item is selected by the user 
 *
 * @name sap.ui.ux3.NavigationBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The ID of the newly selected NavigationItem.
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The newly selected NavigationItem.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.ux3.NavigationBar</code>.<br/>
 * Event is fired when an item is selected by the user 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.attachSelect = function(oData, fnFunction, oListener) {
	this.attachEvent("select", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.ux3.NavigationBar</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.NavigationBar.prototype.detachSelect = function(fnFunction, oListener) {
	this.detachEvent("select", fnFunction, oListener);
	return this;	
};

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The ID of the newly selected NavigationItem.</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The newly selected NavigationItem.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.NavigationBar} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.NavigationBar.prototype.fireSelect = function(mArguments) {
	this.fireEvent("select", mArguments);
	return this;
};


/**
 * Replaces the currently associated items with the ones in the given array
 *
 * @name sap.ui.ux3.NavigationBar.prototype.setAssociatedItems
 * @function
 * @param {sap.ui.ux3.NavigationItem[]} 
 *         aItems
 *         The items to associate

 * @type sap.ui.ux3.NavigationBar
 * @public
 */


/**
 * Returns whether there is a selectedItem set which is actually present in the items aggregation; or, if the aggregation is empty, in the associatedItems association.
 *
 * @name sap.ui.ux3.NavigationBar.prototype.isSelectedItemValid
 * @function

 * @type boolean
 * @public
 */


// Start of sap/ui/ux3/NavigationBar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.ui.ux3.NavigationBar.SCROLL_STEP = 250; // how many pixels to scroll with every overflow arrow click

sap.ui.ux3.NavigationBar.prototype.init = function() {
	this._bPreviousScrollForward = false; // remember the item overflow state
	this._bPreviousScrollBack = false;
	this._iLastArrowPos = -100; // this property is always read and applied as offsetLeft (without calculation/modification), so browser differences in RTL mode are no problem
	this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

	this.allowTextSelection(false);


	this.startScrollX = 0;
	this.startTouchX = 0;
	var that = this;
	
	// Initialize the ItemNavigation
	this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
	this.addDelegate(this._oItemNavigation);

	if (jQuery.sap.touchEventMode != "OFF") {
		var fnTouchStart = function(evt) {
			evt.preventDefault();
			
			// stop any inertia scrolling 
			if (that._iInertiaIntervalId) {
				window.clearInterval(that._iInertiaIntervalId);
			}

			that.startScrollX = jQuery.sap.domById(that.getId() + "-list").scrollLeft;
			that.startTouchX = evt.touches[0].pageX;
			that._bTouchNotMoved = true;
			that._lastMoveTime = new Date().getTime();
		};

		var fnTouchMove = function(evt) {
			var dx = evt.touches[0].pageX - that.startTouchX;

			var oListRef = jQuery.sap.domById(that.getId() + "-list");
			var oldScrollLeft = oListRef.scrollLeft;
			var newScrollLeft = that.startScrollX - dx;
			oListRef.scrollLeft = newScrollLeft;
			that._bTouchNotMoved = false;

			// inertia scrolling: prepare continuation even after touchend by calculating the current velocity
			var dt = new Date().getTime() - that._lastMoveTime;
			that._lastMoveTime = new Date().getTime();
			if (dt > 0) {
				that._velocity = (newScrollLeft - oldScrollLeft) / dt;
			}

			evt.preventDefault();
		};

		var fnTouchEnd = function(evt) {
			if (that._bTouchNotMoved === false) { // swiping ends now
				evt.preventDefault();

				// add some inertia... continue scrolling with decreasing velocity
				var oListRef = jQuery.sap.domById(that.getId() + "-list");
				var dt = 50;
				var endVelocity = Math.abs(that._velocity / 10); // continue scrolling until the speed has decreased to a fraction (v/10 means 11 iterations with slowing-down factor 0.8)
				that._iInertiaIntervalId = window.setInterval(function(){
					that._velocity = that._velocity * 0.80;
					var dx = that._velocity * dt;
					oListRef.scrollLeft = oListRef.scrollLeft + dx;
					if (Math.abs(that._velocity) < endVelocity) {
						window.clearInterval(that._iInertiaIntervalId);
						that._iInertiaIntervalId = undefined;
					}
				}, dt);

			} else if (that._bTouchNotMoved === true) { //touchstart and touchend without move is a click; trigger it directly to avoid the usual delay
				that.onclick(evt);
				evt.preventDefault();
			} else {
				// touchend without corresponding start
				// do nothing special
			}
			that._bTouchNotMoved = undefined;
			that._lastMoveTime = undefined;
		};
		
		this.ontouchstart = fnTouchStart;
		this.ontouchend = fnTouchEnd;
		this.ontouchmove = fnTouchMove;
	}

};

sap.ui.ux3.NavigationBar.prototype.exit = function () {
	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
	}

	// no super.exit() to call
};


sap.ui.ux3.NavigationBar.prototype.onBeforeRendering = function() {
	// stop the periodic overflow checker
	if (this._checkOverflowIntervalId) {
		jQuery.sap.clearIntervalCall(this._checkOverflowIntervalId);
		this._checkOverflowIntervalId = null;
	}

	if (jQuery.browser.mozilla) { // TODO: feature detection... not used yet because of performance implications (may involve creating elements)
		this.$().unbind("DOMMouseScroll", this._handleScroll);
	} else {
		this.$().unbind("mousewheel", this._handleScroll);
	}

	var arrow = jQuery.sap.domById(this.getId() + "-arrow");
	this._iLastArrowPos = arrow ? arrow.offsetLeft : -100;
};




sap.ui.ux3.NavigationBar.prototype.onAfterRendering = function() {
	var sId = this.getId();
	var oDomRef = jQuery.sap.domById(sId);

	// start the periodic checking for overflow of the item area
	var oListDomRef = oDomRef.firstChild;
	var of_back = jQuery.sap.domById(sId + "-ofb");
	var of_fw = jQuery.sap.domById(sId + "-off");
	this._checkOverflowIntervalId = jQuery.sap.intervalCall(350, this, "_checkOverflow", [oListDomRef,of_back,of_fw]);

	// bind a scroll handler to the workset item area
	if (jQuery.browser.mozilla) { // TODO: feature detection... not used yet because of performance implications (may involve creating elements)
		jQuery(oDomRef).bind("DOMMouseScroll", jQuery.proxy(this._handleScroll, this));
	} else {
		jQuery(oDomRef).bind("mousewheel", jQuery.proxy(this._handleScroll, this));
	}

	// re-initialize display of scroll arrows
	this._bPreviousScrollForward = false;
	this._bPreviousScrollBack = false;
	this._checkOverflow(this.getDomRef().firstChild, jQuery.sap.domById(sId + "-ofb"), jQuery.sap.domById(sId + "-off"));

	// paint selection arrow in the right place
	var selItem = sap.ui.getCore().byId(this.getSelectedItem());
	if (selItem) {
		this._checkOverflow(oListDomRef, of_back, of_fw);
		var $Arrow = jQuery.sap.byId(this.getId() + "-arrow");
		var arrowWidth = $Arrow.outerWidth();
		var targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(selItem.getId(), arrowWidth, this._bRtl);
		if (!this._bRtl) {
			$Arrow[0].style.left = targetPos+"px";
		} else {
			$Arrow[0].style.right = targetPos+"px";
		}
	}

	this._updateItemNavigation();
};


sap.ui.ux3.NavigationBar.prototype._updateItemNavigation = function() {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		// reinitialize the ItemNavigation after rendering
		var iSelectedDomIndex = -1;
		var sSelectedId = this.getSelectedItem();
		
		var $ItemRefs = jQuery(oDomRef).children().children("li").children().not(".sapUiUx3NavBarDummyItem");
		$ItemRefs.each(function(index, element) {
			if (element.id == sSelectedId) {
				iSelectedDomIndex = index;
			}
		});

		this._oItemNavigation.setRootDomRef(oDomRef);
		this._oItemNavigation.setItemDomRefs($ItemRefs.toArray());
		this._oItemNavigation.setSelectedIndex(iSelectedDomIndex);
	}
};


sap.ui.ux3.NavigationBar.prototype.onsapspace = function(oEvent) {
	this._handleActivation(oEvent);
};

sap.ui.ux3.NavigationBar.prototype.onclick = function(oEvent) {
	this._handleActivation(oEvent);
};

sap.ui.ux3.NavigationBar.prototype._handleActivation = function(oEvent) {
	var sTargetId = oEvent.target.id;

	if (sTargetId) {
		var sId = this.getId();

		if (sTargetId == sId + "-ofb") {
			// scroll back/left button
			this._scroll(-sap.ui.ux3.NavigationBar.SCROLL_STEP, 500);

		} else if (sTargetId == sId + "-off") {
			// scroll forward/right button
			this._scroll(sap.ui.ux3.NavigationBar.SCROLL_STEP, 500);

		} else {
			// should be one of the items - select it
			var item = sap.ui.getCore().byId(sTargetId);
			if (item
					&& (sTargetId != this.getSelectedItem())
					&& (sap.ui.getCore().byId(sTargetId) instanceof sap.ui.ux3.NavigationItem)) {
				// select the item and fire the event
				this.setAssociation("selectedItem", item, true); // avoid rerendering, animate
				this.fireSelect({item:item,itemId:sTargetId});
				this._updateSelection(sTargetId);
			}
		}
	}
};


/**
 * Visually adapts the NavigationBar to the new selection, using animations instead of re-rendering.
 *
 * @param sItemId may be null, which means all selection is removed
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._updateSelection = function(sItemId) {
	// update the css classes to make the selected item larger etc.
	var $newSel = jQuery.sap.byId(sItemId);
	$newSel.addClass("sapUiUx3NavBarItemSel").attr("tabindex", "0");
	$newSel.parent().parent().children().each(function(){
		var a = this.firstChild;
		if (a && (a.id != sItemId) && (a.className.indexOf("Dummy") == -1)) {
			jQuery(a).removeClass("sapUiUx3NavBarItemSel").attr("tabindex", "-1"); // includes arrow and dummy, but does not hurt TODO?
		}
	});
	
	// let the ItemNavigation know about the new selection
	var iSelectedDomIndex = $newSel.parent().index();
	if (iSelectedDomIndex > 0) {
		iSelectedDomIndex--; // if a selected element is found, its index in the ItemNavigation is the DOM index minus the dummy element, which is the first sibling
	}
	this._oItemNavigation.setSelectedIndex(iSelectedDomIndex);

	// make the arrow slide to the selected item
	var $Arrow = jQuery.sap.byId(this.getId() + "-arrow");
	var arrowWidth = $Arrow.outerWidth();
	var targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(sItemId, arrowWidth, this._bRtl);
	$Arrow.stop(); // stop any ongoing animation
	var animation_1 = this._bRtl ? {right:targetPos+"px"} : {left:targetPos+"px"};
	$Arrow.animate(animation_1, 500, "linear");
	var that = this;
	window.setTimeout(function(){ // because the items resize (for 300ms), interrupt and adjust the animation in the middle
		targetPos = sap.ui.ux3.NavigationBar._getArrowTargetPos(sItemId, arrowWidth, that._bRtl);
		$Arrow.stop();
		var animation_2 = that._bRtl ? {right:targetPos+"px"} : {left:targetPos+"px"};
		$Arrow.animate(animation_2, 200, "linear", function(){
			var item = jQuery.sap.domById(sItemId);
			that._scrollItemIntoView(item);
		});
	}, 300);
};

sap.ui.ux3.NavigationBar.prototype._scrollItemIntoView = function(item) {
	if (item) {
		var li = jQuery(item.parentNode);
		var ul = li.parent();
		var targetPos = undefined; 
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		
		// special handling for first and last item to not only scroll them into view but to scroll to the very start/end
		var index = li.index() - 1; // -1 because of leading dummy item
		if (index == 0) {
			targetPos = bRtl ? jQuery.sap.denormalizeScrollLeftRTL(ul[0].scrollWidth - ul.innerWidth() + 20) : 0; // +20 to account for margins etc.
			
		} else if (index == li.siblings().length - 2) { // siblings() excludes the item itself, but (apart from the already subtracted dummy) also the arrow => -2
			targetPos = bRtl ? jQuery.sap.denormalizeScrollLeftRTL(0) : (ul[0].scrollWidth - ul.innerWidth() + 20); // +20 to account for margins etc.
			
		} else {
			var liLeft = li.position().left;
			var ulScrollLeft = ul.scrollLeft();
	
			if (!bRtl) { // normal LTR mode
				if (liLeft < 0) {
					// item cut at the left => scroll right to make it left-aligned
					targetPos = ulScrollLeft + liLeft;
				} else {
					var rightDistance = ulScrollLeft + ul.innerWidth() - (liLeft + li.outerWidth(true));  // the distance from the right item edge to the end of the ul; negative if the item is cut
					if (rightDistance < 0) {
						targetPos = ulScrollLeft - rightDistance; // rightDistance is negative, add its amount to the current scroll amount
						// but now it might be that we scroll so far to the left that the left part of the item is hidden, which may not happen!
						targetPos = Math.min(targetPos, ulScrollLeft + liLeft);
					} 
				}

			} else { // RTL
				var rightDistance = ulScrollLeft + ul.innerWidth() - (liLeft + li.outerWidth(true));  // the distance from the right item edge to the end of the ul; negative if the item is cut
				if (rightDistance < 0) { // if cut at the right, scroll left
					targetPos = ulScrollLeft - rightDistance; // rightDistance is negative, add its amount to the current scroll amount
				}  else if (liLeft < 0) {
					// cut at the left, so we should scroll right
					targetPos = ulScrollLeft + liLeft;
					// but now it might be that we scroll so far to the right that the right part of the item is hidden, which may not happen in RTL!
					targetPos = Math.max(targetPos, ulScrollLeft + liLeft);
				}
				targetPos = jQuery.sap.denormalizeScrollLeftRTL(targetPos); // fix browser differences
			}
		}

		if (targetPos !== undefined) {
			ul.animate({scrollLeft: targetPos}); // should be a string like "-50px"
		}
	}
};

/**
 * Calculates the required position of the selection arrow to highlight the item with the given ID.
 * If null is given, the position will be outside the visible area.
 *
 * If bRight is set, the distance to the *right* border will be returned (instead of the normal position from left),
 * this can be used for RTL mode.
 *
 * @static
 * @private
 */
sap.ui.ux3.NavigationBar._getArrowTargetPos = function(sTargetItemId, arrowWidth, bRight) {
	var $Item = jQuery.sap.byId(sTargetItemId);
	if ($Item.length > 0) {
		var width = $Item.outerWidth();
		var leftDistance = Math.round($Item[0].offsetLeft + (width/2) - (arrowWidth/2));
		if (!bRight) {
			return leftDistance;
		} else {
			return $Item.parent().parent().innerWidth() - leftDistance - arrowWidth;
		}
	} else {
		return -100;
	}
};


/**
 * Handles a mouse scroll event, scrolling the items if possible.
 *
 * @param oEvent
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._handleScroll = function(oEvent) {
	if (oEvent.type == "DOMMouseScroll") { // Firefox
		var scrollAmount = oEvent.originalEvent.detail * 40; // in FF you get 3 ticks at once, *40 gives reasonable speed
		this._scroll(scrollAmount, 50);          // scroll fast to avoid temporal overlap
	} else { // other browsers
		var scrollAmount = -oEvent.originalEvent.wheelDelta; // in IE you get 120 as basic amount, direction is inverted
		this._scroll(scrollAmount, 50);          // scroll fast to avoid temporal overlap
	}
	oEvent.preventDefault(); // do not scroll the window (?)
};


/**
 * Scrolls the items if possible, using an animation.
 *
 * @param iDelta how far to scroll
 * @param iDuration how long to scroll (ms)
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._scroll = function(iDelta, iDuration) {
	var oDomRef = this.$()[0].firstChild;
	var iScrollLeft = oDomRef.scrollLeft;
	if (!jQuery.browser.msie && this._bRtl) {
		iDelta = -iDelta;
	} // RTL lives in the negative space
	var iScrollTarget = iScrollLeft+iDelta;
	jQuery(oDomRef).animate({scrollLeft: iScrollTarget}, iDuration);
};



/**
 * Changes the state of the scroll arrows depending on whether they are required due to overflow.
 *
 * @param oListDomRef the ul tag containing the items
 * @param of_back the backward scroll arrow
 * @param of_fw the forward scroll arrow
 * @private
 */
sap.ui.ux3.NavigationBar.prototype._checkOverflow = function(oListDomRef, of_back, of_fw) {
	if (oListDomRef) {
		var iScrollLeft = oListDomRef.scrollLeft;

		// check whether scrolling to the left is possible
		var bScrollBack = false;
		var bScrollForward = false;
		
		var realWidth = oListDomRef.scrollWidth;
		var availableWidth = oListDomRef.clientWidth;
		
		if (!this._bRtl) {   // normal LTR mode
			if (iScrollLeft > 0) {
				bScrollBack = true;
			}
			if ((realWidth > availableWidth) && (iScrollLeft + availableWidth < realWidth)) {
				bScrollForward = true;
			}
			
		} else {  // RTL mode
			var $List = jQuery(oListDomRef);
			if ($List.scrollLeftRTL() > 0) {
				bScrollForward = true;
			}
			if ($List.scrollRightRTL() > 0) {
				bScrollBack = true;
			}
		}

		// only do DOM changes if the state changed to avoid periodic application of identical values
		if ((bScrollForward != this._bPreviousScrollForward) || (bScrollBack != this._bPreviousScrollBack)) {
			this._bPreviousScrollForward = bScrollForward;
			this._bPreviousScrollBack = bScrollBack;
			this.$().toggleClass("sapUiUx3NavBarScrollBack", bScrollBack)
					.toggleClass("sapUiUx3NavBarScrollForward", bScrollForward);
		}
	}
};




/* API methods */

/* overwritten association methods */

sap.ui.ux3.NavigationBar.prototype.setSelectedItem = function(item) {
	this.setAssociation("selectedItem", item, true); // avoid rerendering
	if (this.getDomRef()) {
		this._updateSelection((!item || (typeof(item) == "string")) ? item : item.getId()); // animate selection
	}
};


/* API method implementations */

sap.ui.ux3.NavigationBar.prototype.setAssociatedItems = function(aItems) {
	jQuery.sap.assert(jQuery.isArray(aItems), "aItems must be an array");

	var oListDomRef = jQuery.sap.domById(this.getId() + "-list");

	// remove old items
	var aOldItems = this.removeAllAssociation("associatedItems", true);
	
	// check whether items up to the selected one are still the same ones as previously (which means there is no need to update the selection and move the arrow)
	var bSelectionChange = undefined;
	var sSelectedItem = this.getSelectedItem();
	if (aItems && aOldItems && sSelectedItem) {
		var toCheck = Math.min(aItems.length, aOldItems.length);
		
		for (var j = 0; j < toCheck; j++) {
			if (aItems[j].getId() != aOldItems[j]) {
				bSelectionChange = true; 
				break;
			}
			if (aOldItems[j] == sSelectedItem) {
				bSelectionChange = false;
				break;
			}
		}
	}

	// add new items
	for (var i = 0; i < aItems.length; i++) {
		this.addAssociation("associatedItems", aItems[i], true);
	}

	// if already rendered, update the UI
	if (oListDomRef) {
		var $FocusRef = jQuery(oListDomRef).find(":focus");
		var focusId = ($FocusRef.length > 0) ? $FocusRef.attr("id") : null;
		
		oListDomRef.innerHTML = sap.ui.ux3.NavigationBarRenderer.getItemsHtml(this);
		
		// restore focus
		var oNewFocusRef;
		if (focusId && (oNewFocusRef = jQuery.sap.domById(focusId))) {
			jQuery.sap.focus(oNewFocusRef);
		}
		
		if (bSelectionChange !== false) {
			this._updateSelection(this.getSelectedItem());
		}
	}
	
	// update the item navigation, as the item HTML has changed
	this._updateItemNavigation();
	
	return this;
};


sap.ui.ux3.NavigationBar.prototype.isSelectedItemValid = function() {
	var selId = this.getSelectedItem();
	if (!selId) {
		return false;
	} // no selection means no selected item out of those which are present

	var items = this.getItems();
	if (!items || items.length == 0) {
		items = this.getAssociatedItems();
		for (var i = 0; i < items.length; i++) {
			if (items[i] == selId) {
				return true;
			}
		}
	} else {
		for (var i = 0; i < items.length; i++) {
			if (items[i].getId() == selId) {
				return true;
			}
		}
	}
	return false;
};

}; // end of sap.ui.ux3.NavigationBar
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetSimpleViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
 // Provides default renderer for the sap.ui.ux3.DataSetSimpleView
jQuery.sap.declare("sap.ui.ux3.DataSetSimpleViewRenderer");

/**
 * @class DataSetSimpleView renderer. 
 * @static
 */
sap.ui.ux3.DataSetSimpleViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.DataSetSimpleViewRenderer.render = function(oRenderManager, oControl){ 
     // convenience variable
	var rm = oRenderManager;
	// write the HTML into the render manager  
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.writeAttribute("class","sapUiUx3DSSV"); 
	rm.renderControl
	rm.write(">"); // SPAN element
	if( oControl.items) {
		for(var i = 0; i < oControl.items.length; i++) {
			rm.write("<div");
			rm.addClass("sapUiUx3DSSVItem");
			if(oControl.getFloating()) {
				rm.addClass("sapUiUx3DSSVFlow");
			}
			if (oControl.isItemSelected(oControl.items[i])) {
				rm.addClass("sapUiUx3DSSVSelected");
			}
			rm.writeClasses();
			rm.writeControlData(oControl.items[i]);
			rm.write(">");
			rm.renderControl(oControl.items[i].getTemplate());
			rm.write("</div>");
		}
	}
	rm.write("</div>");
};

}; // end of sap.ui.ux3.DataSetSimpleViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingGroup.
jQuery.sap.declare("sap.ui.ux3.ThingGroup");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new ThingGroup.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>title : string</li>
 * <li>colspan : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li>
 * <li>actions : sap.ui.ux3.ThingGroup</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Thing Group Area
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ThingGroup = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ThingGroup.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.ux3.ThingGroup. 
 * Resulting metadata can be obtained via sap.ui.ux3.ThingGroup.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ThingGroup", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getTitle", "setTitle", "getColspan", "setColspan", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", "getActions", "insertAction", "addAction", "removeAction", "removeAllActions", "indexOfAction", "destroyActions"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : null},
    "colspan" : {name : "colspan", type : "boolean", group : "Misc", defaultValue : false}
  },
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    "actions" : {name : "actions", type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "action"}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>title</code>.
 * Title of Group
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.ux3.ThingGroup.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>colspan</code>.
 * If Group is used in a column layout the groups spans the all columns if set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>colspan</code>
 * @public
 * 
 */
sap.ui.ux3.ThingGroup.prototype.getColspan = function() {
	return this.getProperty("colspan");
};

/**
 * Setter for property <code>colspan</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bColspan  new value for property <code>colspan</code>
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.setColspan = function(bColspan) {
	this.setProperty("colspan", bColspan);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content of Group
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingGroup.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};

	
/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions of the groups content
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.getActions = function() {
	return this.getAggregation("actions", []);
};


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.insertAction = function(oAction, iIndex) {
	this.insertAggregation("actions", oAction, iIndex);
	return this;
};

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingGroup.prototype.addAction = function(oAction) {
	this.addAggregation("actions", oAction);
	return this;
};

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vAction the action to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed action or null
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.removeAction = function(vAction) {
	return this.removeAggregation("actions", vAction);
};

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.removeAllActions = function() {
	return this.removeAllAggregation("actions");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.indexOfAction = function(oAction) {
	return this.indexOfAggregation("actions", oAction);
};
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.ui.ux3.ThingGroup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingGroup.prototype.destroyActions = function() {
	this.destroyAggregation("actions");
	return this;
};


// Start of sap/ui/ux3/ThingGroup.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.ThingContent.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap.ui.ux3.ThingGroup
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ToolPopupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.ToolPopup
jQuery.sap.declare("sap.ui.ux3.ToolPopupRenderer");

/**
 * @class ToolPopup renderer.
 * @static
 */
sap.ui.ux3.ToolPopupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ToolPopupRenderer.render = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3TP");
	rm.writeClasses();
	rm.write(" aria-labelledby='" + oControl.getId() + "-title'");
	rm.write(" role='dialog'>"); // div element

	rm.write("<div id='" + oControl.getId() + "-arrow' class='sapUiUx3TPArrow sapUiUx3TPArrow" + oControl._getArrowPosition() + "'></div>");

	// title
	var sTitle = oControl.getTitle();
	if (sTitle && (sTitle.length > 0)) {
		rm.write("<h1 id='" + oControl.getId() + "-title'>" + sTitle + "</h1>");
		rm.write("<hr/>");
	} else { // for accessibility reasons use tooltip as hidden label 
		var sTooltip = oControl.getTooltip_AsString();
		if (sTooltip) {
			rm.write("<h1 id='" + oControl.getId() + "-title' style='display:none;'>" + sTooltip + "</h1>");
		}
	}

	// content
	var aChildren = oControl.getContent();
	for (var i = 0; i < aChildren.length; i++) {
		rm.renderControl(aChildren[i]);
	}

	// button row
	aChildren = oControl.getButtons();
	if (aChildren.length > 0) {
		rm.write("<hr/><div class='sapUiUx3TPBtnRow'>");
		for (var i = 0; i < aChildren.length; i++) {
			rm.renderControl(aChildren[i].addStyleClass("sapUiUx3TPBtn"));
		}
		rm.write("</div>");
	}

	rm.write("</div>");
};
}; // end of sap.ui.ux3.ToolPopupRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingInspector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.ThingInspector.
jQuery.sap.declare("sap.ui.ux3.ThingInspector");



/**
 * Constructor for a new ThingInspector.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>firstTitle : string</li>
 * <li>type : string</li>
 * <li>icon : string</li>
 * <li>secondTitle : string</li>
 * <li>followState : sap.ui.ux3.FollowActionState</li>
 * <li>flagState : boolean</li>
 * <li>favoriteState : boolean</li>
 * <li>favoriteActionEnabled : boolean</li>
 * <li>updateActionEnabled : boolean</li>
 * <li>followActionEnabled : boolean</li>
 * <li>flagActionEnabled : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>actions : sap.ui.ux3.ThingAction</li>
 * <li>headerContent : sap.ui.ux3.ThingGroup</li>
 * <li>facets : sap.ui.ux3.NavigationItem</li>
 * <li>facetContent : sap.ui.ux3.ThingGroup</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>selectedFacet : sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>actionSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>facetSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>feedSubmit : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.ux3.Overlay#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Thing Inspector
 * @extends sap.ui.ux3.Overlay
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.ThingInspector = function (sId, mSettings) {
	sap.ui.ux3.Overlay.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.ThingInspector.prototype = jQuery.sap.newObject(sap.ui.ux3.Overlay.prototype);

/*
 * Describe the sap.ui.ux3.ThingInspector. 
 * Resulting metadata can be obtained via sap.ui.ux3.ThingInspector.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.ThingInspector", {

  // ---- object ----
  baseType : "sap.ui.ux3.Overlay",
  publicMethods : [
    // properties 
    "getFirstTitle", "setFirstTitle", "getType", "setType", "getIcon", "setIcon", "getSecondTitle", "setSecondTitle", "getFollowState", "setFollowState", "getFlagState", "setFlagState", "getFavoriteState", "setFavoriteState", "getFavoriteActionEnabled", "setFavoriteActionEnabled", "getUpdateActionEnabled", "setUpdateActionEnabled", "getFollowActionEnabled", "setFollowActionEnabled", "getFlagActionEnabled", "setFlagActionEnabled", 
    // aggregations
    "getActions", "insertAction", "addAction", "removeAction", "removeAllActions", "indexOfAction", "destroyActions", "getHeaderContent", "insertHeaderContent", "addHeaderContent", "removeHeaderContent", "removeAllHeaderContent", "indexOfHeaderContent", "destroyHeaderContent", "getFacets", "insertFacet", "addFacet", "removeFacet", "removeAllFacets", "indexOfFacet", "destroyFacets", "getFacetContent", "insertFacetContent", "addFacetContent", "removeFacetContent", "removeAllFacetContent", "indexOfFacetContent", "destroyFacetContent", 
    // associations
    "getSelectedFacet", "setSelectedFacet", 
    // events
    "attachActionSelected", "detachActionSelected", "attachFacetSelected", "detachFacetSelected", "attachFeedSubmit", "detachFeedSubmit"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "firstTitle" : {name : "firstTitle", type : "string", group : "Misc", defaultValue : null},
    "type" : {name : "type", type : "string", group : "Misc", defaultValue : null},
    "icon" : {name : "icon", type : "string", group : "Misc", defaultValue : null},
    "secondTitle" : {name : "secondTitle", type : "string", group : "Misc", defaultValue : null},
    "followState" : {name : "followState", type : "sap.ui.ux3.FollowActionState", group : "Misc", defaultValue : sap.ui.ux3.FollowActionState.Default},
    "flagState" : {name : "flagState", type : "boolean", group : "Misc", defaultValue : false},
    "favoriteState" : {name : "favoriteState", type : "boolean", group : "Misc", defaultValue : false},
    "favoriteActionEnabled" : {name : "favoriteActionEnabled", type : "boolean", group : "Misc", defaultValue : true},
    "updateActionEnabled" : {name : "updateActionEnabled", type : "boolean", group : "Misc", defaultValue : true},
    "followActionEnabled" : {name : "followActionEnabled", type : "boolean", group : "Misc", defaultValue : true},
    "flagActionEnabled" : {name : "flagActionEnabled", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {
    "actions" : {name : "actions", type : "sap.ui.ux3.ThingAction", multiple : true, singularName : "action"}, 
    "headerContent" : {name : "headerContent", type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "headerContent"}, 
    "facets" : {name : "facets", type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "facet"}, 
    "facetContent" : {name : "facetContent", type : "sap.ui.ux3.ThingGroup", multiple : true, singularName : "facetContent"}
  },
  associations : {
    "selectedFacet" : {name : "selectedFacet", type : "sap.ui.ux3.NavigationItem", multiple : false}
  },
  events : {
    "actionSelected" : "actionSelected", 
    "facetSelected" : "facetSelected", 
    "feedSubmit" : "feedSubmit"
  }

});	

sap.ui.ux3.ThingInspector.M_EVENTS = {'actionSelected':'actionSelected','facetSelected':'facetSelected','feedSubmit':'feedSubmit'};


/**
 * Getter for property <code>firstTitle</code>.
 * First Line of the Thing Inspector Title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstTitle</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFirstTitle = function() {
	return this.getProperty("firstTitle");
};

/**
 * Setter for property <code>firstTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstTitle  new value for property <code>firstTitle</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFirstTitle = function(sFirstTitle) {
	this.setProperty("firstTitle", sFirstTitle);
	return this;
};


/**
 * Getter for property <code>type</code>.
 * Thing type
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getType = function() {
	return this.getProperty("type");
};

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setType = function(sType) {
	this.setProperty("type", sType);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * Thing Icon Url
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>secondTitle</code>.
 * Second Line of the Thing Inspector Title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>secondTitle</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getSecondTitle = function() {
	return this.getProperty("secondTitle");
};

/**
 * Setter for property <code>secondTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSecondTitle  new value for property <code>secondTitle</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setSecondTitle = function(sSecondTitle) {
	this.setProperty("secondTitle", sSecondTitle);
	return this;
};


/**
 * Getter for property <code>followState</code>.
 * Follow State of a Thing
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.ux3.FollowActionState} the value of property <code>followState</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFollowState = function() {
	return this.getProperty("followState");
};

/**
 * Setter for property <code>followState</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.ux3.FollowActionState} oFollowState  new value for property <code>followState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFollowState = function(oFollowState) {
	this.setProperty("followState", oFollowState);
	return this;
};


/**
 * Getter for property <code>flagState</code>.
 * State of Flag Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagState</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFlagState = function() {
	return this.getProperty("flagState");
};

/**
 * Setter for property <code>flagState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagState  new value for property <code>flagState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFlagState = function(bFlagState) {
	this.setProperty("flagState", bFlagState);
	return this;
};


/**
 * Getter for property <code>favoriteState</code>.
 * State Of favorite Action
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>favoriteState</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFavoriteState = function() {
	return this.getProperty("favoriteState");
};

/**
 * Setter for property <code>favoriteState</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFavoriteState  new value for property <code>favoriteState</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFavoriteState = function(bFavoriteState) {
	this.setProperty("favoriteState", bFavoriteState);
	return this;
};


/**
 * Getter for property <code>favoriteActionEnabled</code>.
 * Favorite action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>favoriteActionEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFavoriteActionEnabled = function() {
	return this.getProperty("favoriteActionEnabled");
};

/**
 * Setter for property <code>favoriteActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFavoriteActionEnabled  new value for property <code>favoriteActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFavoriteActionEnabled = function(bFavoriteActionEnabled) {
	this.setProperty("favoriteActionEnabled", bFavoriteActionEnabled);
	return this;
};


/**
 * Getter for property <code>updateActionEnabled</code>.
 * Update action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>updateActionEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getUpdateActionEnabled = function() {
	return this.getProperty("updateActionEnabled");
};

/**
 * Setter for property <code>updateActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bUpdateActionEnabled  new value for property <code>updateActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setUpdateActionEnabled = function(bUpdateActionEnabled) {
	this.setProperty("updateActionEnabled", bUpdateActionEnabled);
	return this;
};


/**
 * Getter for property <code>followActionEnabled</code>.
 * Follow action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>followActionEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFollowActionEnabled = function() {
	return this.getProperty("followActionEnabled");
};

/**
 * Setter for property <code>followActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFollowActionEnabled  new value for property <code>followActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFollowActionEnabled = function(bFollowActionEnabled) {
	this.setProperty("followActionEnabled", bFollowActionEnabled);
	return this;
};


/**
 * Getter for property <code>flagActionEnabled</code>.
 * Flag action enabled/disabled. If disabled the action will be invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>flagActionEnabled</code>
 * @public
 * 
 */
sap.ui.ux3.ThingInspector.prototype.getFlagActionEnabled = function() {
	return this.getProperty("flagActionEnabled");
};

/**
 * Setter for property <code>flagActionEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFlagActionEnabled  new value for property <code>flagActionEnabled</code>
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setFlagActionEnabled = function(bFlagActionEnabled) {
	this.setProperty("flagActionEnabled", bFlagActionEnabled);
	return this;
};

	
/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions of a Thing
 * 
 * @return {sap.ui.ux3.ThingAction[]}
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.getActions = function() {
	return this.getAggregation("actions", []);
};


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.insertAction = function(oAction, iIndex) {
	this.insertAggregation("actions", oAction, iIndex);
	return this;
};

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingInspector.prototype.addAction = function(oAction) {
	this.addAggregation("actions", oAction);
	return this;
};

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingAction} vAction the action to remove or its index or id
 * @return {sap.ui.ux3.ThingAction} the removed action or null
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeAction = function(vAction) {
	return this.removeAggregation("actions", vAction);
};

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingAction[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeAllActions = function() {
	return this.removeAllAggregation("actions");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ThingAction</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingAction}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.indexOfAction = function(oAction) {
	return this.indexOfAggregation("actions", oAction);
};
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.destroyActions = function() {
	this.destroyAggregation("actions");
	return this;
};

	
/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * ThingGroups for the header content
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.getHeaderContent = function() {
	return this.getAggregation("headerContent", []);
};


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.insertHeaderContent = function(oHeaderContent, iIndex) {
	this.insertAggregation("headerContent", oHeaderContent, iIndex);
	return this;
};

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingInspector.prototype.addHeaderContent = function(oHeaderContent) {
	this.addAggregation("headerContent", oHeaderContent);
	return this;
};

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed headerContent or null
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeHeaderContent = function(vHeaderContent) {
	return this.removeAggregation("headerContent", vHeaderContent);
};

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeAllHeaderContent = function() {
	return this.removeAllAggregation("headerContent");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.indexOfHeaderContent = function(oHeaderContent) {
	return this.indexOfAggregation("headerContent", oHeaderContent);
};
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.destroyHeaderContent = function() {
	this.destroyAggregation("headerContent");
	return this;
};

	
/**
 * Getter for aggregation <code>facets</code>.<br/>
 * Thing Inspector facets
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.getFacets = function() {
	return this.getAggregation("facets", []);
};


/**
 * Inserts a facet into the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oFacet the facet to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facet should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facet is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facet is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.insertFacet = function(oFacet, iIndex) {
	this.insertAggregation("facets", oFacet, iIndex);
	return this;
};

/**
 * Adds some facet <code>oFacet</code> 
 * to the aggregation named <code>facets</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingInspector.prototype.addFacet = function(oFacet) {
	this.addAggregation("facets", oFacet);
	return this;
};

/**
 * Removes an facet from the aggregation named <code>facets</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vFacet the facet to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed facet or null
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeFacet = function(vFacet) {
	return this.removeAggregation("facets", vFacet);
};

/**
 * Removes all the controls in the aggregation named <code>facets</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeAllFacets = function() {
	return this.removeAllAggregation("facets");
};

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>facets</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oFacet the facet whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.indexOfFacet = function(oFacet) {
	return this.indexOfAggregation("facets", oFacet);
};
	

/**
 * Destroys all the facets in the aggregation 
 * named <code>facets</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.destroyFacets = function() {
	this.destroyAggregation("facets");
	return this;
};

	
/**
 * Getter for aggregation <code>facetContent</code>.<br/>
 * ThingGroups for content of the selected facet
 * 
 * @return {sap.ui.ux3.ThingGroup[]}
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.getFacetContent = function() {
	return this.getAggregation("facetContent", []);
};


/**
 * Inserts a facetContent into the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *          oFacetContent the facetContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the facetContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the facetContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the facetContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.insertFacetContent = function(oFacetContent, iIndex) {
	this.insertAggregation("facetContent", oFacetContent, iIndex);
	return this;
};

/**
 * Adds some facetContent <code>oFacetContent</code> 
 * to the aggregation named <code>facetContent</code>.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.ThingInspector.prototype.addFacetContent = function(oFacetContent) {
	this.addAggregation("facetContent", oFacetContent);
	return this;
};

/**
 * Removes an facetContent from the aggregation named <code>facetContent</code>.
 *
 * @param {int | string | sap.ui.ux3.ThingGroup} vFacetContent the facetContent to remove or its index or id
 * @return {sap.ui.ux3.ThingGroup} the removed facetContent or null
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeFacetContent = function(vFacetContent) {
	return this.removeAggregation("facetContent", vFacetContent);
};

/**
 * Removes all the controls in the aggregation named <code>facetContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ThingGroup[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.removeAllFacetContent = function() {
	return this.removeAllAggregation("facetContent");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ThingGroup</code> in the aggregation named <code>facetContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ThingGroup}
 *            oFacetContent the facetContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.indexOfFacetContent = function(oFacetContent) {
	return this.indexOfAggregation("facetContent", oFacetContent);
};
	

/**
 * Destroys all the facetContent in the aggregation 
 * named <code>facetContent</code>.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.destroyFacetContent = function() {
	this.destroyAggregation("facetContent");
	return this;
};


/**
 * The Facet that is currently selected.
 * 
 *
 * @return {string} Id of the element which is the current target of the <code>selectedFacet</code> association, or null
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.getSelectedFacet = function() {
	return this.getAssociation("selectedFacet", null);
};

/**
 * The Facet that is currently selected.
 * 
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedFacet 
 *    Id of an element which becomes the new target of this <code>selectedFacet</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.setSelectedFacet = function(vSelectedFacet) {
	this.setAssociation("selectedFacet", vSelectedFacet);
	return this;
};


	
/**
 * Further thing related Action selected 
 *
 * @name sap.ui.ux3.ThingInspector#actionSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected ThingAction
 * @param {sap.ui.ux3.ThingAction} oControlEvent.getParameters.action Selected ThingAction
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'actionSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 * Further thing related Action selected 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.attachActionSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("actionSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'actionSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.detachActionSelected = function(fnFunction, oListener) {
	this.detachEvent("actionSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event actionSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected ThingAction</li>
 * <li>'action' of type <code>sap.ui.ux3.ThingAction</code> Selected ThingAction</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ThingInspector.prototype.fireActionSelected = function(mArguments) {
	this.fireEvent("actionSelected", mArguments);
	return this;
};


/**
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @name sap.ui.ux3.ThingInspector#facetSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id Id of selected NavigationItem
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The selected NavigationItem
 * @param {string} oControlEvent.getParameters.key Key of selected NavigationItem
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'facetSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 * Event for facet selection. The application is responsible for displaying the correct content for the selected one. The ThingInspector will currently always mark the first facet as selected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.attachFacetSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("facetSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'facetSelected' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.detachFacetSelected = function(fnFunction, oListener) {
	this.detachEvent("facetSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event facetSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> Id of selected NavigationItem</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The selected NavigationItem</li>
 * <li>'key' of type <code>string</code> Key of selected NavigationItem</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ThingInspector.prototype.fireFacetSelected = function(mArguments) {
	this.fireEvent("facetSelected", mArguments);
	return this;
};


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.ThingInspector#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Feed text
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.attachFeedSubmit = function(oData, fnFunction, oListener) {
	this.attachEvent("feedSubmit", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.ThingInspector</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.detachFeedSubmit = function(fnFunction, oListener) {
	this.detachEvent("feedSubmit", fnFunction, oListener);
	return this;	
};

/**
 * Fire event feedSubmit to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Feed text</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.ThingInspector} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.ThingInspector.prototype.fireFeedSubmit = function(mArguments) {
	this.fireEvent("feedSubmit", mArguments);
	return this;
};


// Start of sap/ui/ux3/ThingInspector.js

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
 
/**
 * Initialization hook for the Thinginspector. It creates the instance of the
 * Popup helper service and does some basic configuration for it.
 * 
 * @private
 */
 
sap.ui.ux3.ThingInspector.prototype.init = function() {
	sap.ui.ux3.Overlay.prototype.init.apply(this);
	this._oNavBar = new sap.ui.ux3.NavigationBar();
	// attach NavBar selection
	var that = this;
	this._oNavBar.attachSelect(function(oControlEvent) {
		var item = oControlEvent.getParameters().item;
		that.setSelectedFacet(item);
		that.fireFacetSelected({
			id : item.getId(),
			key : item.getKey(),
			item : item
		});
	});
	// Initialize the ItemNavigation if required
	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this._oItemNavigation);
	}
	this._prepareGenericActions();
	this._prepareActionMenus();
	this._prepareUpdateActionPopup();
	this._CollectionVisible = false;
};

/*
 * Set size of TI after rendering: If running in Shell we sync with shell
 * canvas. The size will then be set by the shell.
 */
sap.ui.ux3.ThingInspector.prototype.onAfterRendering = function() {
	var oShell = jQuery(".sapUiUx3Shell").control();
	if (oShell.length) {
		oShell[0].syncWithCanvasSize(this.getDomRef());
	} else {
		// set to fullscreen
		jQuery.sap.byId(this.getId()).css("bottom", "0px").css("top", "0px").css("left", "0px").css("right", "0px");
		// hide border and open/close button
		jQuery(".sapUiUx3TIContent").css("bottom", "0px").css("top", "0px").css("left", "0px").css("right", "0px");
		this.setOpenButtonVisible(false);
		this.setCloseButtonVisible(false);
	}
	jQuery.sap.byId(this.getId()).css("position", "fixed");
	// this._resize = false;

	this._setItemNavigation();
	// this._equalColumns();
	// register resize handler
	this._resize = false;
	this._resizeListenerId = sap.ui.core.ResizeHandler.register(jQuery(".sapUiUx3TIFacetContent")[0], jQuery.proxy(this.onresize, this));
	// initial resize handling
	this.onresize();
};

/**
 * Resize handler listening to the facet content area. If the area will be
 * resized and the blocks will be rearranged to one column the width will be set
 * to 100%. After resize to a width greater than two times the minimum width of
 * a single block the size will be set back to 50%
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype.onresize = function(oEvent) {
	/*
	 * if (!this._triggerValue) { return; }
	 */

	var width;
	if (oEvent) {
		width = jQuery(oEvent.target).width();
	}
	if (!width) {
		width = jQuery(jQuery(".sapUiUx3TIFacetContent")[0]).width();
	}
	if (width < this._triggerValue && this._resize == false) {
		var facetGroups = jQuery(".sapUiUx3TIFacetThingGroup");
		for ( var i = 0; i < facetGroups.length; i++) {
			jQuery(facetGroups[i]).animate({
				width : "100%"
			}, "fast");
		}
		this._resize = true;
	} else if (width > this._triggerValue && this._resize == true) {
		var facetGroups = jQuery(".sapUiUx3TIFacetThingGroup");
		for ( var i = 0; i < facetGroups.length; i++) {
			jQuery(facetGroups[i]).animate({
				width : "50%"
			}, "fast");
		}
		this._resize = false;
	}
	/*var scrollContainer = jQuery(".sapUiUx3TIContentScrollContainer");
	var headerColumn = jQuery(".sapUiUx3TIHeader");
	var facetsColumn = jQuery(".sapUiUx3TIFacets");
	if (this._hasScrollbar(scrollContainer)) {
		facetsColumn.height(scrollContainer.get(0).scrollHeight);
		headerColumn.height(scrollContainer.get(0).scrollHeight);
	} else {
		headerColumn.css("bottom", "0px");
		facetsColumn.css("bottom", "0px");
		facetsColumn.height("auto");
		headerColumn.height("auto");
	}*/
};

sap.ui.ux3.ThingInspector.prototype.onclick = function(oEvent) {
	if (oEvent.target.id === this.getId() + '-toggle-collection') {
		if (!this._CollectionVisible) {
			var TIContent = jQuery(".sapUiUx3TIContent");
			jQuery(TIContent[0]).animate({
				left : "229px"
			}, "200");
			jQuery.sap.byId(this.getId() + '-toggle-collection').text('>>');
			this._CollectionVisible = true;
		} else {
			var TIContent = jQuery(".sapUiUx3TIContent");
			jQuery(TIContent[0]).animate({
				left : "29px"
			}, "200");
			jQuery.sap.byId(this.getId() + '-toggle-collection').text('<<');
			this._CollectionVisible = false;
		}
	} else {
		sap.ui.ux3.Overlay.prototype.onclick.apply(this,arguments);
	}
};

sap.ui.ux3.ThingInspector.prototype._hasScrollbar = function(oElem) {
	return (oElem.get(0).scrollHeight > oElem.height());
};

/**
 * Override Popup Events
 * 
 * @private
 */
/*
 * sap.ui.ux3.ThingInspector.prototype._overridePopupEventing = function() { var
 * that = this; // don't bring Thing Inspector to the front on mouse down.
 * Existing // Toolpopups should allways be in front this._oPopup.onmousedown =
 * function(oEvent) { return; } }
 */
/**
 * Destroys this instance of ThingInspector, called by Element#destroy()
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype.exit = function() {
	this.close();
	this.destroyAggregation("_genericActions");
	this._oNavBar.destroy();
	this._oNavBar = null;
	this._oUpdatePopup.destroy();
	this._oUpdatePopup = null;
	this._oMenu.destroy();
	this._oMenu = null;
};

/**
 * Opens this instance of ThingIspector
 * 
 * @public
 */
sap.ui.ux3.ThingInspector.prototype.open = function() {
	if (this.getDomRef()) {
		this.rerender();
	}
	sap.ui.ux3.Overlay.prototype.open.apply(this);
	this._selectDefault();
};

/**
 * get button aggregation for the actions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._getActionButtons = function() {
	return this.getAggregation("_actionButtons", []);
};

/**
 * get Navigation Bar control
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._getNavBar = function() {
	return this._oNavBar;
};

/**
 * attach to select event of the aggregated thing actions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._attachThingAction = function(oAction) {
	var that = this;
	var action = oAction;
	oAction.attachSelect(function(oControlEvent) {
		that._genericActionSelected(oControlEvent, action);
	});
};

/**
 * Handle selection of generic actions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._genericActionSelected = function(oEvent, oAction) {
	var sId = oAction.getId();
	sId = sId.substr(sId.indexOf("-") + 1);

	if (oAction.getId() == this.getId() + "-follow") {
		if (this.getFollowState() == sap.ui.ux3.FollowActionState.Default) {
			this.setFollowState(sap.ui.ux3.FollowActionState.Follow);
			this._prepareActionMenus();
			this.fireActionSelected({
				id : sId,
				action : oAction
			});
		} else {
			var eDock = sap.ui.core.Popup.Dock;
			this._oMenu.open(false, oAction.getFocusDomRef(), eDock.BeginTop, eDock.BeginBottom, oAction.getDomRef());
		}
	} else if (oAction.getId() == this.getId() + "-favorite") {
		this._favoriteActionSelected(oEvent, sId);
	} else if (oAction.getId() == this.getId() + "-flag") {
		this._flagActionSelected(oEvent, sId);
	} else if (oAction.getId() == this.getId() + "-update") {
		this._updateActionSelected(oEvent, sId);
	} else {
		this.fireActionSelected({
			id : sId,
			action : oAction
		});
	}

};

/**
 * setDefault NavBar selection and fire SelectedItem Event
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._selectDefault = function() {
	var navBarItems = this._oNavBar.getItems();
	if (navBarItems.length && !this._oNavBar.getSelectedItem()) {
		if (!this.getSelectedFacet()) {
			this.setSelectedFacet(navBarItems[0])
		}
		;
		var itemID = this._oNavBar.getSelectedItem();
		var item = sap.ui.getCore().byId(itemID);
		this.fireFacetSelected({
			id : item.getId(),
			key : item.getKey(),
			item : item
		});
	}
};

/**
 * create Generic Actions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._prepareGenericActions = function() {
	/*
	 * instantiate generic actions and add them to an aggregation, for the
	 * action eventing
	 */
	this._oUpdateAction = new sap.ui.ux3.ThingAction({
		id : this.getId() + "-update"
	});
	this._oUpdateAction.setTooltip(this._getText("TI_UPDATE_ACTION_TOOLTIP"));
	this.addAggregation("_genericActions", this._oUpdateAction);
	this._attachThingAction(this._oUpdateAction);

	this._oFollowAction = new sap.ui.ux3.ThingAction({
		id : this.getId() + "-follow"
	});
	this._oFollowAction.setTooltip(this._getText("TI_FOLLOW_ACTION_TOOLTIP_FOLLOW"));
	this.addAggregation("_genericActions", this._oFollowAction);
	this._attachThingAction(this._oFollowAction);

	this._oFavoriteAction = new sap.ui.ux3.ThingAction({
		id : this.getId() + "-favorite"
	});
	this._oFavoriteAction.setTooltip(this._getText("TI_FAVORITE_ACTION_TOOLTIP"));
	this.addAggregation("_genericActions", this._oFavoriteAction);
	this._attachThingAction(this._oFavoriteAction);

	this._oFlagAction = new sap.ui.ux3.ThingAction({
		id : this.getId() + "-flag"
	});
	this._oFlagAction.setTooltip(this._getText("TI_FLAG_ACTION_TOOLTIP"));
	this.addAggregation("_genericActions", this._oFlagAction);
	this._attachThingAction(this._oFlagAction);
};

/**
 * prepare Menus for Follow action
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._prepareActionMenus = function() {
	var imagePath = sap.ui.resource("sap.ui.ux3", "themes/" + sap.ui.getCore().getConfiguration().getTheme());

	if (!this._oUnFollowItem) {
		this._oUnFollowItem = new sap.ui.commons.MenuItem({
			id : this.getId() + "-unfollowState",
			text : this._getText("TI_FOLLOW_ACTION_MENU_TXT_UNFOLLOW"),
			icon : imagePath + "/img/menu_unlisten.png"
		});
	}
	if (!this._oHoldItem) {
		this._oHoldItem = new sap.ui.commons.MenuItem({
			id : this.getId() + "-holdState",
			text : this._getText("TI_FOLLOW_ACTION_MENU_TXT_HOLD"),
			icon : imagePath + "/img/menu_hold.png"
		});
	}
	if (!this._oUnHoldItem) {
		this._oUnHoldItem = new sap.ui.commons.MenuItem({
			id : this.getId() + "-unholdState",
			text : this._getText("TI_FOLLOW_ACTION_MENU_TXT_UNHOLD"),
			icon : imagePath + "/img/menu_hold.png"
		});
	}
	if (!this._oMenu) {
		this._oMenu = new sap.ui.commons.Menu({
			id : this.getId() + "-followActionMenu"
		});
		var that = this;
		this._oMenu.attachItemSelect(function(oControlEvent) {
			that._followMenuSelected(oControlEvent);
		});
		this._oMenu.addItem(this._oHoldItem);
		this._oMenu.addItem(this._oUnHoldItem);
		this._oMenu.addItem(this._oUnFollowItem);
	}
	if (this.getFollowState() == sap.ui.ux3.FollowActionState.Default) {
		this._oFollowAction.setTooltip(this._getText("TI_FOLLOW_ACTION_TOOLTIP_FOLLOW"));
		this._oHoldItem.setVisible(false);
		this._oUnFollowItem.setVisible(false);
		this._oUnHoldItem.setVisible(false);
	} else if (this.getFollowState() == sap.ui.ux3.FollowActionState.Follow) {
		this._oFollowAction.setTooltip(this._getText("TI_FOLLOW_ACTION_TOOLTIP_STOPPAUSE_FOLLOW"));
		this._oHoldItem.setVisible(true);
		this._oUnFollowItem.setVisible(true);
		this._oUnHoldItem.setVisible(false);
	} else if (this.getFollowState() == sap.ui.ux3.FollowActionState.Hold) {
		this._oFollowAction.setTooltip(this._getText("TI_FOLLOW_ACTION_TOOLTIP_STOPCONTINUE_FOLLOW"));
		this._oHoldItem.setVisible(false);
		this._oUnFollowItem.setVisible(true);
		this._oUnHoldItem.setVisible(true);
	}
	this._rerenderGenericThingActions();
};

/**
 * equal Columns
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._equalColumns = function() {
	var headerColumn = jQuery(".sapUiUx3TIHeader");
	var facetsColumn = jQuery(".sapUiUx3TIFacets");
	var scrollContainer = jQuery(".sapUiUx3TIContentScrollContainer");
	// if (headerColumn.height() > facetsColumn.height()) {
	facetsColumn.height(scrollContainer.get(0).scrollHeight);
	// } else {
	headerColumn.height(scrollContainer.get(0).scrollHeight);
	// }
};

/**
 * Get Menu for generic Follow Action
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._getFollowActionMenu = function() {
	return this._oMenu;
};

/**
 * Follow Action Menu Eventhandler
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._followMenuSelected = function(oEvent) {
	if (oEvent.getParameters().item.getId() == this.getId() + "-followState") {
		this.setFollowState(sap.ui.ux3.FollowActionState.Follow);
	} else if (oEvent.getParameters().item.getId() == this.getId() + "-unfollowState") {
		this.setFollowState(sap.ui.ux3.FollowActionState.Default);
	} else if (oEvent.getParameters().item.getId() == this.getId() + "-holdState") {
		this.setFollowState(sap.ui.ux3.FollowActionState.Hold);
	} else if (oEvent.getParameters().item.getId() == this.getId() + "-unholdState") {
		this.setFollowState(sap.ui.ux3.FollowActionState.Follow);
	}
	this._prepareActionMenus();
	var sId = this._oFollowAction.getId();
	sId = sId.substr(sId.indexOf("-") + 1);
	this.fireActionSelected({
		id : sId,
		action : this._oFollowAction
	});
};

/**
 * Handle Flag Action selection
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._flagActionSelected = function(oEvent, sId) {
	if (this.getFlagState() == true) {
		this.setFlagState(false);
	} else {
		this.setFlagState(true);
	}
	this.fireActionSelected({
		id : sId,
		action : this._oFlagAction
	});
};

/**
 * Handle Favorite Action selection
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._favoriteActionSelected = function(oEvent, sId) {
	if (this.getFavoriteState() == true) {
		this.setFavoriteState(false);
	} else {
		this.setFavoriteState(true);
	}
	this.fireActionSelected({
		id : sId,
		action : this._oFavoriteAction
	});
};

/**
 * Handle Update Action selection
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._updateActionSelected = function(oEvent) {
	if (this._oUpdatePopup.isOpen()) {
		this._oUpdatePopup.close()
	} else {
		this._oUpdatePopup.setPosition(sap.ui.core.Popup.Dock.BeginBottom, sap.ui.core.Popup.Dock.BeginTop, oEvent.getSource().getDomRef(), "-8 -13", "none");
		this._oUpdatePopup.open();
	}
};

/**
 * Handle Update Action selection
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._prepareUpdateActionPopup = function(oEvent) {
	this._oUpdatePopup = new sap.ui.ux3.ToolPopup({
		id : this.getId() + "-UpdateActionPopup"
	}).addStyleClass("sapUiUx3TIUpdatePopup");
	var that = this;
	var f = new sap.ui.ux3.feed.Feeder({
		mode : sap.ui.ux3.feed.FeederMode.FeederComment,
		submitPress : function(oEvent) {
			var text = oEvent.getParameter("content");
			that.fireFeedSubmit({
				text : text
			});
			f.setText("");
			that._oUpdatePopup.close();
		}
	});
	/*
	 * this._oCommentPopup.attachOpen(function() { // TODO: does not work...
	 * window.setTimeout(function(){f.focus();},100); });
	 * this._oCommentPopup.attachClose(function() { // maybe the text should
	 * stay when closing f.setText(""); });
	 */
	this._icon = new sap.ui.commons.Image({
		id : this.getId() + "-updateIcon",
		src : this.getId(),
		height : "48px",
		width : "48px"
	});
	this._oUpdatePopup.addContent(this._icon).addContent(f);
};

/**
 * Rerender Header Content
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._rerenderHeaderContent = function() {
	var $content = jQuery.sap.byId(this.getId() + "-headerContent");
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ThingInspectorRenderer.renderHeaderContent(rm, this);
		rm.flush($content[0]);
		rm.destroy();
	}
};

/**
 * Rerender ThingActions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._rerenderGenericThingActions = function() {
	var content = jQuery.sap.byId(this.getId() + "-genericThingActions");
	if (content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ThingInspectorRenderer.renderGenericActions(rm, this);
		rm.flush(content[0]);
		rm.destroy();
	}
};

/**
 * Rerender Facet Content
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._rerenderFacetContent = function() {
	var $content = jQuery.sap.byId(this.getId() + "-facetContent");
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ThingInspectorRenderer.renderFacetContent(rm, this);
		rm.flush($content[0]);
		rm.destroy();
		// get triggerValue for facet content resize handler
		var facetGroups = jQuery(".sapUiUx3TIFacetThingGroup");
		var minWidth = jQuery(facetGroups[0]).css("min-width");
		this._triggerValue = parseInt(minWidth, 10) * 2;
	}
};

/**
 * Update ThingAction Button
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._updateThingActionButton = function(oThingAction) {
	var aButtons = this.getAggregation("_actionButtons");
	if (!aButtons) {
		return;
	}
	for (var i = 0; i < aButtons.length ; i++) {
		if (aButtons[i].getId() == (this.getId() + "-" + oThingAction.getId() + "Button")) {
			aButtons[i].setText(oThingAction.getText());
			aButtons[i].setEnabled(oThingAction.getEnabled());
			break;
		}
	}
};

/**
 * Rerender Thing Actions
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._rerenderThingActions = function() {
	var content = jQuery.sap.byId(this.getId() + "-thingActions");
	if (content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ThingInspectorRenderer.renderThingActions(rm, this);
		rm.flush(content[0]);
		rm.destroy();
	}
};

/**
 * Add Thing Actions ti ItemNavigation
 * 
 * @private
 */
sap.ui.ux3.ThingInspector.prototype._setItemNavigation = function() {

	if (this.getDomRef()) {
		this._oItemNavigation.setRootDomRef(jQuery(this.getDomRef()).find(".sapUiUx3TIToolbar").get(0));
		// only if already rendered, otherwise not DOM elements exists
		var aItemDomRefs = [];
		var oActions = this.getAggregation("_genericActions", []);
		for ( var i = 0; i < oActions.length; i++) {
			aItemDomRefs.push(oActions[i].getDomRef());
		}
		oActions = this.getAggregation("_actionButtons", []);
		for ( var i = 0; i < oActions.length; i++) {
			aItemDomRefs.push(oActions[i].getDomRef());
		}
		this._oItemNavigation.setItemDomRefs(aItemDomRefs);
	}
};

/* Redefinition of generated API methods */

// Implementation of API method insertAction
sap.ui.ux3.ThingInspector.prototype.insertAction = function(oAction, iIndex) {

	this.insertAggregation("actions", oAction, iIndex, true);
	var oButton = new sap.ui.commons.Button({
		id : this.getId() + "-" + oAction.getId() + "Button",
		text : oAction.getText(),
		enabled : oAction.getEnabled()
	});
	var that = this;
	var action = oAction;
	oButton.attachPress(function(oControlEvent) {
		var itemId = oControlEvent.getSource().getId();
		var actionId = itemId.substr((itemId.indexOf("-") + 1));
		that.fireActionSelected({
			id : actionId,
			action : oAction
		});
	});
	this.addAggregation("_actionButtons", oButton, iIndex, true);
	this._rerenderThingActions();
	this._setItemNavigation();
	return this;
};

// Implementation of API method addAction
sap.ui.ux3.ThingInspector.prototype.addAction = function(oAction) {

	this.addAggregation("actions", oAction, true);

	var oButton = new sap.ui.commons.Button({
		id : this.getId() + "-" + oAction.getId() + "Button",
		text : oAction.getText(),
		enabled : oAction.getEnabled()
	});
	var that = this;
	var action = oAction;
	oButton.attachPress(function(oControlEvent) {
		var itemId = oControlEvent.getSource().getId();
		var actionId = itemId.substr((itemId.indexOf("-") + 1));
		actionId = actionId.substr(0, actionId.indexOf("Button"));
		that.fireActionSelected({
			id : actionId,
			action : oAction
		});
	});
	this.addAggregation("_actionButtons", oButton, true);
	this._rerenderThingActions();
	this._setItemNavigation();
	return this;
};

// Implementation of API method removeAction
sap.ui.ux3.ThingInspector.prototype.removeAction = function(vElement) {
	this.removeAggregation("_actionButtons", vElement, true);
	var result = this.removeAggregation("actions", vElement, true);
	this._rerenderThingActions();
	this._setItemNavigation();
	return result;
};

// Implementation of API method removeAllActions
sap.ui.ux3.ThingInspector.prototype.removeAllActions = function() {
	this.destroyAggregation("_actionButtons", true);
	var result = this.removeAllAggregation("actions", true);
	this._rerenderThingActions();
	this._setItemNavigation();
	return result;
};

// Implementation of API method destroyActions
sap.ui.ux3.ThingInspector.prototype.destroyActions = function() {
	this.destroyAggregation("_actionButtons", true);
	this.destroyAggregation("actions", true);
	this._rerenderThingActions();
	this._setItemNavigation();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.getFacets = function() {
	return this._oNavBar.getItems();
};

// Implementation of API method insertFacet
sap.ui.ux3.ThingInspector.prototype.insertFacet = function(oFacet, iIndex) {
	this._oNavBar.insertItem(oFacet, iIndex);
	return this;
};

// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.addFacet = function(oFacet) {
	this._oNavBar.addItem(oFacet);
	return this;
};

// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeFacet = function(vElement) {
	return this._oNavBar.removeItem(vElement);
};

// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeAllFacets = function() {
	return this._oNavBar.removeAllItems();
};

// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.destroyFacets = function() {
	this._oNavBar.destroyItems();
	return this;
};

// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.setFollowState = function(oFollowState) {
	// set icon according to state
	var folloActionElem = jQuery.sap.byId(this.getId() + "-follow");
	folloActionElem.removeClass(this.getFollowState()).addClass(oFollowState);
	if (oFollowState == sap.ui.ux3.FollowActionState.Default) {
		folloActionElem.attr("aria-haspopup", "false");
	} else {
		folloActionElem.attr("aria-haspopup", "true");
	}
	// supress rerendering of TI
	this.setProperty("followState", oFollowState, true);
	this._prepareActionMenus();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.setFlagState = function(oFlagState) {
	// set icon according to state
	jQuery.sap.byId(this.getId() + "-flag").toggleClass("Selected", oFlagState);
	// supress rerendering of TI
	this.setProperty("flagState", oFlagState, true);
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.setFavoriteState = function(oFavoriteState) {
	// set icon according to state
	jQuery.sap.byId(this.getId() + "-favorite").toggleClass("Selected", oFavoriteState);
	// supress rerendering of TI
	this.setProperty("favoriteState", oFavoriteState, true);
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.setIcon = function(oIcon) {
	this.setProperty("icon", oIcon);
	this._icon.setSrc(oIcon);
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.insertFacetContent = function(oFacetContent, iIndex) {
	this.insertAggregation("facetContent", oFacetContent, iIndex, true);
	this._Content();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.addFacetContent = function(oFacetContent) {
	this.addAggregation("facetContent", oFacetContent, true);
	this._rerenderFacetContent();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeFacetContent = function(vFacetContent) {
	var result = this.removeAggregation("facetContent", vFacetContent, true);
	this._rerenderFacetContent();
	return result;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeAllFacetContent = function() {
	var result = this.removeAllAggregation("facetContent", true);
	this._rerenderFacetContent();
	return result;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.destroyFacetContent = function() {
	this.destroyAggregation("facetContent", true);
	this._rerenderFacetContent();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.insertHeaderContent = function(oHeaderContent, iIndex) {
	this.insertAggregation("headerContent", oHeaderContent, iIndex, true);
	this._rerenderHeaderContent();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.addHeaderContent = function(oHeaderContent) {
	this.addAggregation("headerContent", oHeaderContent, true);
	this._rerenderHeaderContent();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeHeaderContent = function(vHeaderContent) {
	var result = this.removeAggregation("headerContent", vHeaderContent, true);
	this._rerenderHeaderContent();
	return result;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.removeAllHeaderContent = function() {
	var result = this.removeAllAggregation("headerContent", true);
	this._rerenderHeaderContent();
	return result;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.destroyHeaderContent = function() {
	this.destroyAggregation("headerContent", true);
	this._rerenderHeaderContent();
	return this;
};
// Implementation of API method
sap.ui.ux3.ThingInspector.prototype.setSelectedFacet = function(selectedFacet) {
	var oldSelectedFacet = this.getSelectedFacet();
	this.setAssociation("selectedFacet", selectedFacet, true);
	var newSelectedFacet = this.getSelectedFacet();

	if (oldSelectedFacet != newSelectedFacet) {
		this._oNavBar.setSelectedItem(newSelectedFacet);
	}
};
sap.ui.ux3.ThingInspector.prototype.invalidate = function(oOrigin) {
	if (oOrigin instanceof sap.ui.ux3.ThingAction) {
		this._updateThingActionButton(oOrigin);
		this._rerenderGenericThingActions();
	} else {
		sap.ui.core.Control.prototype.invalidate.apply(this,arguments);
	}
};

}; // end of sap.ui.ux3.ThingInspector
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedChunk') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.FeedChunk.
jQuery.sap.declare("sap.ui.ux3.FeedChunk");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new FeedChunk.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>thumbnailSrc : string</li>
 * <li>text : string</li>
 * <li>sender : string</li>
 * <li>timestamp : string</li>
 * <li>deletionAllowed : boolean</li>
 * <li>commentChunk : boolean</li>
 * <li>feederThumbnailSrc : string</li>
 * <li>feederSender : string</li>
 * <li>flagged : boolean</li>
 * <li>favorite : boolean</li>
 * <li>shared : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>comments : sap.ui.ux3.FeedChunk</li>
 * <li>actionMenuItems : sap.ui.commons.MenuItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>deleted : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>commentAdded : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleFlagged : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>senderClicked : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>referenceClicked : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleFavorite : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>inspect : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleShared : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>actionItemSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Add your documentation for the new FeedChunk
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.FeedChunk = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.FeedChunk.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.FeedChunk. 
 * Resulting metadata can be obtained via sap.ui.ux3.FeedChunk.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.FeedChunk", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getThumbnailSrc", "setThumbnailSrc", "getText", "setText", "getSender", "setSender", "getTimestamp", "setTimestamp", "getDeletionAllowed", "setDeletionAllowed", "getCommentChunk", "setCommentChunk", "getFeederThumbnailSrc", "setFeederThumbnailSrc", "getFeederSender", "setFeederSender", "getFlagged", "setFlagged", "getFavorite", "setFavorite", "getShared", "setShared", 
    // aggregations
    "getComments", "insertComment", "addComment", "removeComment", "removeAllComments", "indexOfComment", "destroyComments", "getActionMenuItems", "insertActionMenuItem", "addActionMenuItem", "removeActionMenuItem", "removeAllActionMenuItems", "indexOfActionMenuItem", "destroyActionMenuItems", 
    // associations
    
    // events
    "attachDeleted", "detachDeleted", "attachCommentAdded", "detachCommentAdded", "attachToggleFlagged", "detachToggleFlagged", "attachSenderClicked", "detachSenderClicked", "attachReferenceClicked", "detachReferenceClicked", "attachToggleFavorite", "detachToggleFavorite", "attachInspect", "detachInspect", "attachToggleShared", "detachToggleShared", "attachActionItemSelected", "detachActionItemSelected"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "thumbnailSrc" : {name : "thumbnailSrc", type : "string", group : "Data", defaultValue : null},
    "text" : {name : "text", type : "string", group : "Data", defaultValue : null},
    "sender" : {name : "sender", type : "string", group : "Data", defaultValue : null},
    "timestamp" : {name : "timestamp", type : "string", group : "Data", defaultValue : null},
    "deletionAllowed" : {name : "deletionAllowed", type : "boolean", group : "Behavior", defaultValue : false},
    "commentChunk" : {name : "commentChunk", type : "boolean", group : "Appearance", defaultValue : false},
    "feederThumbnailSrc" : {name : "feederThumbnailSrc", type : "string", group : "Data", defaultValue : null},
    "feederSender" : {name : "feederSender", type : "string", group : "Data", defaultValue : null},
    "flagged" : {name : "flagged", type : "boolean", group : "Data", defaultValue : false},
    "favorite" : {name : "favorite", type : "boolean", group : "Data", defaultValue : null},
    "shared" : {name : "shared", type : "boolean", group : "Data", defaultValue : false}
  },
  
  aggregations : {
    "comments" : {name : "comments", type : "sap.ui.ux3.FeedChunk", multiple : true, singularName : "comment"}, 
    "actionMenuItems" : {name : "actionMenuItems", type : "sap.ui.commons.MenuItem", multiple : true, singularName : "actionMenuItem"}
  },
  associations : {},
  events : {
    "deleted" : "deleted", 
    "commentAdded" : "commentAdded", 
    "toggleFlagged" : "toggleFlagged", 
    "senderClicked" : "senderClicked", 
    "referenceClicked" : "referenceClicked", 
    "toggleFavorite" : "toggleFavorite", 
    "inspect" : "inspect", 
    "toggleShared" : "toggleShared", 
    "actionItemSelected" : "actionItemSelected"
  }

});	

sap.ui.ux3.FeedChunk.M_EVENTS = {'deleted':'deleted','commentAdded':'commentAdded','toggleFlagged':'toggleFlagged','senderClicked':'senderClicked','referenceClicked':'referenceClicked','toggleFavorite':'toggleFavorite','inspect':'inspect','toggleShared':'toggleShared','actionItemSelected':'actionItemSelected'};


/**
 * Getter for property <code>thumbnailSrc</code>.
 * URL to the tumbnail image.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>thumbnailSrc</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getThumbnailSrc = function() {
	return this.getProperty("thumbnailSrc");
};

/**
 * Setter for property <code>thumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sThumbnailSrc  new value for property <code>thumbnailSrc</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setThumbnailSrc = function(sThumbnailSrc) {
	this.setProperty("thumbnailSrc", sThumbnailSrc);
	return this;
};


/**
 * Getter for property <code>text</code>.
 * Text of the feedChunk. "@References" are supported.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>sender</code>.
 * Sender of the Chunk.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getSender = function() {
	return this.getProperty("sender");
};

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setSender = function(sSender) {
	this.setProperty("sender", sSender);
	return this;
};


/**
 * Getter for property <code>timestamp</code>.
 * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC Timezone
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getTimestamp = function() {
	return this.getProperty("timestamp");
};

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setTimestamp = function(sTimestamp) {
	this.setProperty("timestamp", sTimestamp);
	return this;
};


/**
 * Getter for property <code>deletionAllowed</code>.
 * Flag if deletion of chunk is allowed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>deletionAllowed</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getDeletionAllowed = function() {
	return this.getProperty("deletionAllowed");
};

/**
 * Setter for property <code>deletionAllowed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDeletionAllowed  new value for property <code>deletionAllowed</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setDeletionAllowed = function(bDeletionAllowed) {
	this.setProperty("deletionAllowed", bDeletionAllowed);
	return this;
};


/**
 * Getter for property <code>commentChunk</code>.
 * If this flag is set, the FeedChunk is ca Comment Chunk. In this case it can not have own Comments and must be assigned to a FeedChunk.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>commentChunk</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getCommentChunk = function() {
	return this.getProperty("commentChunk");
};

/**
 * Setter for property <code>commentChunk</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCommentChunk  new value for property <code>commentChunk</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setCommentChunk = function(bCommentChunk) {
	this.setProperty("commentChunk", bCommentChunk);
	return this;
};


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * URL to the tumbnail image for thecomment feeder.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederThumbnailSrc</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getFeederThumbnailSrc = function() {
	return this.getProperty("feederThumbnailSrc");
};

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setFeederThumbnailSrc = function(sFeederThumbnailSrc) {
	this.setProperty("feederThumbnailSrc", sFeederThumbnailSrc);
	return this;
};


/**
 * Getter for property <code>feederSender</code>.
 * Sender for the commentFeeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getFeederSender = function() {
	return this.getProperty("feederSender");
};

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setFeederSender = function(sFeederSender) {
	this.setProperty("feederSender", sFeederSender);
	return this;
};


/**
 * Getter for property <code>flagged</code>.
 * Is the entry flagged.
 * This property is not supported for comment chunks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>flagged</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getFlagged = function() {
	return this.getProperty("flagged");
};

/**
 * Setter for property <code>flagged</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFlagged  new value for property <code>flagged</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setFlagged = function(bFlagged) {
	this.setProperty("flagged", bFlagged);
	return this;
};


/**
 * Getter for property <code>favorite</code>.
 * Is the entry flagged.
 * This property is not supported for comment chunks.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>favorite</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getFavorite = function() {
	return this.getProperty("favorite");
};

/**
 * Setter for property <code>favorite</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bFavorite  new value for property <code>favorite</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setFavorite = function(bFavorite) {
	this.setProperty("favorite", bFavorite);
	return this;
};


/**
 * Getter for property <code>shared</code>.
 * Is the entry shared.
 * This property is not supported for comment chunks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>shared</code>
 * @public
 * 
 */
sap.ui.ux3.FeedChunk.prototype.getShared = function() {
	return this.getProperty("shared");
};

/**
 * Setter for property <code>shared</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShared  new value for property <code>shared</code>
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.setShared = function(bShared) {
	this.setProperty("shared", bShared);
	return this;
};

	
/**
 * Getter for aggregation <code>comments</code>.<br/>
 * Comments on this chunk
 * 
 * @return {sap.ui.ux3.FeedChunk[]}
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.getComments = function() {
	return this.getAggregation("comments", []);
};


/**
 * Inserts a comment into the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *          oComment the comment to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the comment should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the comment is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the comment is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.insertComment = function(oComment, iIndex) {
	this.insertAggregation("comments", oComment, iIndex);
	return this;
};

/**
 * Adds some comment <code>oComment</code> 
 * to the aggregation named <code>comments</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oComment the comment to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.FeedChunk.prototype.addComment = function(oComment) {
	this.addAggregation("comments", oComment);
	return this;
};

/**
 * Removes an comment from the aggregation named <code>comments</code>.
 *
 * @param {int | string | sap.ui.ux3.FeedChunk} vComment the comment to remove or its index or id
 * @return {sap.ui.ux3.FeedChunk} the removed comment or null
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.removeComment = function(vComment) {
	return this.removeAggregation("comments", vComment);
};

/**
 * Removes all the controls in the aggregation named <code>comments</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.FeedChunk[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.removeAllComments = function() {
	return this.removeAllAggregation("comments");
};

/**
 * Checks for the provided <code>sap.ui.ux3.FeedChunk</code> in the aggregation named <code>comments</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oComment the comment whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.indexOfComment = function(oComment) {
	return this.indexOfAggregation("comments", oComment);
};
	

/**
 * Destroys all the comments in the aggregation 
 * named <code>comments</code>.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.destroyComments = function() {
	this.destroyAggregation("comments");
	return this;
};

	
/**
 * Getter for aggregation <code>actionMenuItems</code>.<br/>
 * MenuItems to open when click on the action menu button
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.getActionMenuItems = function() {
	return this.getAggregation("actionMenuItems", []);
};


/**
 * Inserts a actionMenuItem into the aggregation named <code>actionMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oActionMenuItem the actionMenuItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the actionMenuItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the actionMenuItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the actionMenuItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.insertActionMenuItem = function(oActionMenuItem, iIndex) {
	this.insertAggregation("actionMenuItems", oActionMenuItem, iIndex);
	return this;
};

/**
 * Adds some actionMenuItem <code>oActionMenuItem</code> 
 * to the aggregation named <code>actionMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oActionMenuItem the actionMenuItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.FeedChunk.prototype.addActionMenuItem = function(oActionMenuItem) {
	this.addAggregation("actionMenuItems", oActionMenuItem);
	return this;
};

/**
 * Removes an actionMenuItem from the aggregation named <code>actionMenuItems</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vActionMenuItem the actionMenuItem to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed actionMenuItem or null
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.removeActionMenuItem = function(vActionMenuItem) {
	return this.removeAggregation("actionMenuItems", vActionMenuItem);
};

/**
 * Removes all the controls in the aggregation named <code>actionMenuItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.removeAllActionMenuItems = function() {
	return this.removeAllAggregation("actionMenuItems");
};

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>actionMenuItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oActionMenuItem the actionMenuItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.indexOfActionMenuItem = function(oActionMenuItem) {
	return this.indexOfAggregation("actionMenuItems", oActionMenuItem);
};
	

/**
 * Destroys all the actionMenuItems in the aggregation 
 * named <code>actionMenuItems</code>.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.destroyActionMenuItems = function() {
	this.destroyAggregation("actionMenuItems");
	return this;
};


/**
 * This event is fired if the deletion button is pressed. 
 *
 * @name sap.ui.ux3.FeedChunk#deleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'deleted' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * This event is fired if the deletion button is pressed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachDeleted = function(oData, fnFunction, oListener) {
	this.attachEvent("deleted", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'deleted' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachDeleted = function(fnFunction, oListener) {
	this.detachEvent("deleted", fnFunction, oListener);
	return this;	
};

/**
 * Fire event deleted to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireDeleted = function(mArguments) {
	this.fireEvent("deleted", mArguments);
	return this;
};


/**
 * Raised when a comment is added to the entry.
 * This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#commentAdded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.FeedChunk} oControlEvent.getParameters.comment new comment chunk
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'commentAdded' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Raised when a comment is added to the entry.
 * This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachCommentAdded = function(oData, fnFunction, oListener) {
	this.attachEvent("commentAdded", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'commentAdded' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachCommentAdded = function(fnFunction, oListener) {
	this.detachEvent("commentAdded", fnFunction, oListener);
	return this;	
};

/**
 * Fire event commentAdded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'comment' of type <code>sap.ui.ux3.FeedChunk</code> new comment chunk</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireCommentAdded = function(mArguments) {
	this.fireEvent("commentAdded", mArguments);
	return this;
};


/**
 * Raised when user click to flag the entry.
 * This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleFlagged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.flagged current flagged state
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleFlagged' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Raised when user click to flag the entry.
 * This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachToggleFlagged = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleFlagged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleFlagged' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachToggleFlagged = function(fnFunction, oListener) {
	this.detachEvent("toggleFlagged", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleFlagged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'flagged' of type <code>boolean</code> current flagged state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireToggleFlagged = function(mArguments) {
	this.fireEvent("toggleFlagged", mArguments);
	return this;
};


/**
 * The thumbnail or the name of the sender is clicked. 
 *
 * @name sap.ui.ux3.FeedChunk#senderClicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'senderClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * The thumbnail or the name of the sender is clicked. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachSenderClicked = function(oData, fnFunction, oListener) {
	this.attachEvent("senderClicked", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'senderClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachSenderClicked = function(fnFunction, oListener) {
	this.detachEvent("senderClicked", fnFunction, oListener);
	return this;	
};

/**
 * Fire event senderClicked to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireSenderClicked = function(mArguments) {
	this.fireEvent("senderClicked", mArguments);
	return this;
};


/**
 * Click on a @-reference 
 *
 * @name sap.ui.ux3.FeedChunk#referenceClicked
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.text Text of the @-reference
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'referenceClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Click on a @-reference 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachReferenceClicked = function(oData, fnFunction, oListener) {
	this.attachEvent("referenceClicked", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'referenceClicked' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachReferenceClicked = function(fnFunction, oListener) {
	this.detachEvent("referenceClicked", fnFunction, oListener);
	return this;	
};

/**
 * Fire event referenceClicked to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'text' of type <code>string</code> Text of the @-reference</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireReferenceClicked = function(mArguments) {
	this.fireEvent("referenceClicked", mArguments);
	return this;
};


/**
 * Raised when user click to set the entry as favorite.
 * This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleFavorite
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.favorite current favorite state
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleFavorite' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Raised when user click to set the entry as favorite.
 * This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachToggleFavorite = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleFavorite", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleFavorite' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachToggleFavorite = function(fnFunction, oListener) {
	this.detachEvent("toggleFavorite", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleFavorite to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'favorite' of type <code>boolean</code> current favorite state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireToggleFavorite = function(mArguments) {
	this.fireEvent("toggleFavorite", mArguments);
	return this;
};


/**
 * The inspect button was pressed 
 *
 * @name sap.ui.ux3.FeedChunk#inspect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'inspect' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * The inspect button was pressed 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachInspect = function(oData, fnFunction, oListener) {
	this.attachEvent("inspect", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'inspect' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachInspect = function(fnFunction, oListener) {
	this.detachEvent("inspect", fnFunction, oListener);
	return this;	
};

/**
 * Fire event inspect to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireInspect = function(mArguments) {
	this.fireEvent("inspect", mArguments);
	return this;
};


/**
 * Raised when user click to share the entry.
 * This event is not supported for comment chunks. 
 *
 * @name sap.ui.ux3.FeedChunk#toggleShared
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.shareed current shared state
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleShared' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Raised when user click to share the entry.
 * This event is not supported for comment chunks. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachToggleShared = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleShared", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleShared' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachToggleShared = function(fnFunction, oListener) {
	this.detachEvent("toggleShared", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleShared to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'shareed' of type <code>boolean</code> current shared state</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireToggleShared = function(mArguments) {
	this.fireEvent("toggleShared", mArguments);
	return this;
};


/**
 * Fired when an item from the action MenuButton was selected. 
 *
 * @name sap.ui.ux3.FeedChunk#actionItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'actionItemSelected' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 * Fired when an item from the action MenuButton was selected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.attachActionItemSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("actionItemSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'actionItemSelected' event of this <code>sap.ui.ux3.FeedChunk</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.FeedChunk.prototype.detachActionItemSelected = function(fnFunction, oListener) {
	this.detachEvent("actionItemSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event actionItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The id of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.FeedChunk} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.FeedChunk.prototype.fireActionItemSelected = function(mArguments) {
	this.fireEvent("actionItemSelected", mArguments);
	return this;
};


// Start of sap/ui/ux3/FeedChunk.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


///**
// * This file defines behavior for the control, 
// */

sap.ui.ux3.FeedChunk.prototype.init = function(){
   this.maxComments = 2; // max. number of comments displayed initially
   this.allComments = false; // initially render only maxComments
   this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
   this.expanded = false;	
};

/*
 * as onBeforeRendering only runs while re-rendering this module is called in renderer
 */
sap.ui.ux3.FeedChunk.prototype.initChildControls = function(){

	// create comment feeder if needed
	if ((this.getComments().length > 0 || this.showCommentFeeder )&& !this.oCommentFeeder) {
		this.oCommentFeeder = new sap.ui.ux3.Feeder( this.getId()+'-CommentFeeder', {
			type: sap.ui.ux3.FeederType.Comment,
			thumbnailSrc: this.getFeederThumbnailSrc()
		}).setParent(this);
		this.oCommentFeeder.attachEvent('submit', this.handleCommentFeederSubmit, this); // attach event this way to have the right this-reference in handler
		this.showCommentFeeder = true;
	}

	// create action menu button if needed
	if (!this.oToolsButton && ( this.getDeletionAllowed() || this.getActionMenuItems().length > 0)) {
		this.oToolsButton = new sap.ui.commons.MenuButton( this.getId()+'-toolsButton', {
			tooltip: this.rb.getText('FEED_TOOLS'),
			lite: true,
			menu: new sap.ui.commons.Menu(this.getId()+'-toolsMenu',{
					items: this.getActionMenuItems()
						})
		}).setParent(this);
		if(this.getDeletionAllowed()){
			this.oToolsButton.getMenu().insertItem(new sap.ui.commons.MenuItem(this.getId() + '-actDelete',{text: this.rb.getText('FEED_DELETE')}), 0);
		}
		this.oToolsButton.attachEvent('itemSelected', this.handleLtoolsButtonSelected, this); // attach event this way to have the right this-reference in handler
	}

};

sap.ui.ux3.FeedChunk.prototype.exit = function(){
   
	if (this.oCommentFeeder) {
		this.oCommentFeeder.destroy();
	}
	if (this.oToolsButton) {
		this.oToolsButton.destroy();
	}
	this.rb = undefined;
	this.showCommentFeeder = undefined;
	this.expanded = undefined;
	this.oText = undefined;
	
};

sap.ui.ux3.FeedChunk.prototype.onAfterRendering = function(){

	// if text is cut show expand button
	this.oText = jQuery.sap.byId(this.getId()).children(".sapUiFeedChunkText").get(0);
	if (this.oText.clientHeight < this.oText.scrollHeight) {
//		jQuery.sap.byId(this.getId()).append(sap.ui.ux3.FeedChunkRenderer.renderExpander(this));		
//		jQuery(this.oText).after(sap.ui.ux3.FeedChunkRenderer.renderExpander(this));
		// if tags are rendered put button in tag-DIV
		var oFather = jQuery.sap.byId(this.getId()).children(".sapUiFeedChunkByline").get(0);
		jQuery(oFather).append(sap.ui.ux3.FeedChunkRenderer.renderExpander(this));

		if (this.expanded) {
			// expanded
			jQuery(this.oText).css('height', 'auto');
		}
	}
	

};

/**
 * handler for click event 
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.onclick = function(oEvent){

	var sTargetId = oEvent.target.getAttribute( 'ID' );

	if(sTargetId){
		switch ( sTargetId ){
		case ( this.getId() + '-delete' ):
			// Click on delete button
			this.fireDeleted();
		break;
		case ( this.getId() + '-sender'):
			// Click on sender
			this.fireSenderClicked();
		break;
		case ( this.getId() + '-thumb' ):
			// Click on sender
			this.fireSenderClicked();
		break;
		case ( this.getId() + '-exp' ):
			// Click on expand/collapse button
			var sNewTitle = '';
			if (this.expanded) {
				// collapse
				jQuery(this.oText).css('height', '');
				sNewTitle = this.rb.getText("FEED_EXPAND");
				this.expanded = false;	
			} else {
				// expand
				jQuery(this.oText).css('height', 'auto');
				sNewTitle = this.rb.getText("FEED_COLLAPSE");			
				this.expanded = true;	
			}
			jQuery.sap.byId(sTargetId).attr('title',sNewTitle).toggleClass('sapUiFeedChunkExpand sapUiFeedChunkCollapse');
		break;
		case ( this.getId() + '-all' ):
			// Click on sender
			this.showAllComments();
		break;
		case ( this.getId() + '-ActComment' ):
			// Click Add comment button
			if(!this.showCommentFeeder){
				this.showCommentFeeder = true;
				this.rerender();
			}
		break;
		case ( this.getId() + '-ActFlag' ):
			// Click flag button
			this.setFlagged(!this.getFlagged());
			this.fireToggleFlagged({flagged: this.getFlagged()});
		break;
		case ( this.getId() + '-ActFavorite' ):
			// Click favorite button
			this.setFavorite(!this.getFavorite());
			this.fireToggleFavorite({favorite: this.getFavorite()});
		break;
		case ( this.getId() + '-ActInspect' ):
			// Click inspect button
			this.fireInspect();
		break;
		case ( this.getId() + '-ActShare' ):
			// Click favorite button
			this.setShared(!this.getShared());
			this.fireToggleShared({shared: this.getShared()});
		break;
		default:
			//Reference
			if(sTargetId.search(this.getId() + '-Ref') != -1){
				this.fireReferenceClicked({text: jQuery(oEvent.target).text()});
			}

		break;
		}
	}
	
	oEvent.stopPropagation(); //to prevent comment chunks to propagate event to parentChunk
	
};

/**
 * show all comments
 * rerender comment section 
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.showAllComments = function(){
	
	this.allComments = true;
	
	var $commentSection = jQuery.sap.byId(this.getId() + " > section"); // use sap function instead of jQuery child selector because of escaping ID
	if ($commentSection.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderComments(rm, this);
		rm.flush($commentSection[0]);
		rm.destroy();
	}
	
	
};

/**
 * Handler for Comment feeder submit event
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.handleCommentFeederSubmit = function(oEvent){

	var oDate = new Date();
//	var sDate = String(oDate.getFullYear()) + String(oDate.getMonth()) + String(oDate.getDate()) + String(oDate.getHours()) + String(oDate.getMinutes()) + String(oDate.getSeconds());
	var sDate = String(oDate);

	var oNewComment = new sap.ui.ux3.FeedChunk(this.getId()+'-new-'+this.getComments().length, {
		text: oEvent.getParameter('text'),
		commentChunk: true,
	    deletionAllowed: true, 
		timestamp: sDate,
		sender: this.getFeederSender(),
		thumbnailSrc: this.getFeederThumbnailSrc()
	}); 
	
//	this.oCommentFeeder.setText('');
	this.insertComment(oNewComment, 0);
	this.fireCommentAdded({comment: oNewComment});

};

/**
 * Handler for tools menu button item selection
 *
 * @private
 */
sap.ui.ux3.FeedChunk.prototype.handleLtoolsButtonSelected = function(oEvent){

	if(oEvent.getParameter('itemId') == this.getId() + '-actDelete'){
		this.fireDeleted();	
	}else{
		// just forward event
		this.fireActionItemSelected(oEvent.mParameters);
	}

};

}; // end of sap.ui.ux3.FeedChunk
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Shell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Shell.
jQuery.sap.declare("sap.ui.ux3.Shell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Shell.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>appTitle : string</li>
 * <li>appIcon : string</li>
 * <li>appIconTooltip : string</li>
 * <li>showLogoutButton : boolean</li>
 * <li>showSearchTool : boolean</li>
 * <li>showInspectorTool : boolean</li>
 * <li>showFeederTool : boolean</li>
 * <li>paneWidth : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>worksetItems : sap.ui.ux3.NavigationItem</li>
 * <li>paneBarItems : sap.ui.core.Item</li>
 * <li>paneContent : sap.ui.core.Control</li>
 * <li>content : sap.ui.core.Control</li>
 * <li>toolPopups : sap.ui.ux3.ToolPopup</li>
 * <li>headerItems : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>selectedWorksetItem : sap.ui.ux3.NavigationItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>worksetItemSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>paneBarItemSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>logout : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>search : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>feedSubmit : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * The Ux3 GoldReflection Shell, which is an application frame with navigation capabilities.
 * It is supposed to be added to a direct child of the BODY tag of a page and there should be no other parts of the page consuming space outside the Shell.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.Shell = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.Shell.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.Shell. 
 * Resulting metadata can be obtained via sap.ui.ux3.Shell.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.Shell", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getAppTitle", "setAppTitle", "getAppIcon", "setAppIcon", "getAppIconTooltip", "setAppIconTooltip", "getShowLogoutButton", "setShowLogoutButton", "getShowSearchTool", "setShowSearchTool", "getShowInspectorTool", "setShowInspectorTool", "getShowFeederTool", "setShowFeederTool", "getPaneWidth", "setPaneWidth", 
    // aggregations
    "getWorksetItems", "insertWorksetItem", "addWorksetItem", "removeWorksetItem", "removeAllWorksetItems", "indexOfWorksetItem", "destroyWorksetItems", "getPaneBarItems", "insertPaneBarItem", "addPaneBarItem", "removePaneBarItem", "removeAllPaneBarItems", "indexOfPaneBarItem", "destroyPaneBarItems", "getPaneContent", "insertPaneContent", "addPaneContent", "removePaneContent", "removeAllPaneContent", "indexOfPaneContent", "destroyPaneContent", "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", "getToolPopups", "insertToolPopup", "addToolPopup", "removeToolPopup", "removeAllToolPopups", "indexOfToolPopup", "destroyToolPopups", "getHeaderItems", "insertHeaderItem", "addHeaderItem", "removeHeaderItem", "removeAllHeaderItems", "indexOfHeaderItem", "destroyHeaderItems", 
    // associations
    "getSelectedWorksetItem", "setSelectedWorksetItem", 
    // events
    "attachWorksetItemSelected", "detachWorksetItemSelected", "attachPaneBarItemSelected", "detachPaneBarItemSelected", "attachLogout", "detachLogout", "attachSearch", "detachSearch", "attachFeedSubmit", "detachFeedSubmit", 
    // methods
    "setContent", "setPaneContent", "openPersonalizationDialog", "initializePersonalization", "getSearchField"
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "appTitle" : {name : "appTitle", type : "string", group : "Misc", defaultValue : null},
    "appIcon" : {name : "appIcon", type : "string", group : "Misc", defaultValue : null},
    "appIconTooltip" : {name : "appIconTooltip", type : "string", group : "Misc", defaultValue : null},
    "showLogoutButton" : {name : "showLogoutButton", type : "boolean", group : "Misc", defaultValue : true},
    "showSearchTool" : {name : "showSearchTool", type : "boolean", group : "Misc", defaultValue : true},
    "showInspectorTool" : {name : "showInspectorTool", type : "boolean", group : "Misc", defaultValue : true},
    "showFeederTool" : {name : "showFeederTool", type : "boolean", group : "Misc", defaultValue : true},
    "paneWidth" : {name : "paneWidth", type : "int", group : "Misc", defaultValue : 250}
  },
  defaultAggregation : "content",
  aggregations : {
    "worksetItems" : {name : "worksetItems", type : "sap.ui.ux3.NavigationItem", multiple : true, singularName : "worksetItem"}, 
    "paneBarItems" : {name : "paneBarItems", type : "sap.ui.core.Item", multiple : true, singularName : "paneBarItem"}, 
    "paneContent" : {name : "paneContent", type : "sap.ui.core.Control", multiple : true, singularName : "paneContent"}, 
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    "toolPopups" : {name : "toolPopups", type : "sap.ui.ux3.ToolPopup", multiple : true, singularName : "toolPopup"}, 
    "headerItems" : {name : "headerItems", type : "sap.ui.core.Control", multiple : true, singularName : "headerItem"}
  },
  associations : {
    "selectedWorksetItem" : {name : "selectedWorksetItem", type : "sap.ui.ux3.NavigationItem", multiple : false}
  },
  events : {
    "worksetItemSelected" : "worksetItemSelected", 
    "paneBarItemSelected" : "paneBarItemSelected", 
    "logout" : "logout", 
    "search" : "search", 
    "feedSubmit" : "feedSubmit"
  }

});	

sap.ui.ux3.Shell.M_EVENTS = {'worksetItemSelected':'worksetItemSelected','paneBarItemSelected':'paneBarItemSelected','logout':'logout','search':'search','feedSubmit':'feedSubmit'};


/**
 * Getter for property <code>appTitle</code>.
 * The application title to appear in the left part of the header, usually a company and/or product name. appIcon and appTitle are both optional and can both be set; in this case the icon appears first.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>appTitle</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getAppTitle = function() {
	return this.getProperty("appTitle");
};

/**
 * Setter for property <code>appTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAppTitle  new value for property <code>appTitle</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setAppTitle = function(sAppTitle) {
	this.setProperty("appTitle", sAppTitle);
	return this;
};


/**
 * Getter for property <code>appIcon</code>.
 * The URL of the image to appear in the left part of the header, usually a branding image containing a logo and/or product name. appIcon and appTitle are both optional and can both be set; in this case the icon appears first.
 * If the appIcon is set, for accessibility reasons the appIconTooltip must also be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>appIcon</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getAppIcon = function() {
	return this.getProperty("appIcon");
};

/**
 * Setter for property <code>appIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAppIcon  new value for property <code>appIcon</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setAppIcon = function(sAppIcon) {
	this.setProperty("appIcon", sAppIcon);
	return this;
};


/**
 * Getter for property <code>appIconTooltip</code>.
 * The tooltip of the application icon in the header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>appIconTooltip</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getAppIconTooltip = function() {
	return this.getProperty("appIconTooltip");
};

/**
 * Setter for property <code>appIconTooltip</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAppIconTooltip  new value for property <code>appIconTooltip</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setAppIconTooltip = function(sAppIconTooltip) {
	this.setProperty("appIconTooltip", sAppIconTooltip);
	return this;
};


/**
 * Getter for property <code>showLogoutButton</code>.
 * Whether the Logoff button in the header should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLogoutButton</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getShowLogoutButton = function() {
	return this.getProperty("showLogoutButton");
};

/**
 * Setter for property <code>showLogoutButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLogoutButton  new value for property <code>showLogoutButton</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setShowLogoutButton = function(bShowLogoutButton) {
	this.setProperty("showLogoutButton", bShowLogoutButton);
	return this;
};


/**
 * Getter for property <code>showSearchTool</code>.
 * Whether the "Global Search" tool should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSearchTool</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getShowSearchTool = function() {
	return this.getProperty("showSearchTool");
};

/**
 * Setter for property <code>showSearchTool</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSearchTool  new value for property <code>showSearchTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setShowSearchTool = function(bShowSearchTool) {
	this.setProperty("showSearchTool", bShowSearchTool);
	return this;
};


/**
 * Getter for property <code>showInspectorTool</code>.
 * Whether the "Inspector" tool should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showInspectorTool</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getShowInspectorTool = function() {
	return this.getProperty("showInspectorTool");
};

/**
 * Setter for property <code>showInspectorTool</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowInspectorTool  new value for property <code>showInspectorTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setShowInspectorTool = function(bShowInspectorTool) {
	this.setProperty("showInspectorTool", bShowInspectorTool);
	return this;
};


/**
 * Getter for property <code>showFeederTool</code>.
 * Whether the "Feeder" tool should be displayed or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showFeederTool</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getShowFeederTool = function() {
	return this.getProperty("showFeederTool");
};

/**
 * Setter for property <code>showFeederTool</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowFeederTool  new value for property <code>showFeederTool</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setShowFeederTool = function(bShowFeederTool) {
	this.setProperty("showFeederTool", bShowFeederTool);
	return this;
};


/**
 * Getter for property <code>paneWidth</code>.
 * The width of the right-hand side pane in pixels. The value must be a non-negative integer. The Shell reserves the right to define a minimum width (currently 50px).
 *
 * Default value is <code>250</code>
 *
 * @return {int} the value of property <code>paneWidth</code>
 * @public
 * 
 */
sap.ui.ux3.Shell.prototype.getPaneWidth = function() {
	return this.getProperty("paneWidth");
};

/**
 * Setter for property <code>paneWidth</code>.
 *
 * Default value is <code>250</code> 
 *
 * @param {int} iPaneWidth  new value for property <code>paneWidth</code>
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setPaneWidth = function(iPaneWidth) {
	this.setProperty("paneWidth", iPaneWidth);
	return this;
};

	
/**
 * Getter for aggregation <code>worksetItems</code>.<br/>
 * The workset items.
 * 
 * @return {sap.ui.ux3.NavigationItem[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getWorksetItems = function() {
	return this.getAggregation("worksetItems", []);
};


/**
 * Inserts a worksetItem into the aggregation named <code>worksetItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *          oWorksetItem the worksetItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the worksetItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the worksetItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the worksetItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertWorksetItem = function(oWorksetItem, iIndex) {
	this.insertAggregation("worksetItems", oWorksetItem, iIndex);
	return this;
};

/**
 * Adds some worksetItem <code>oWorksetItem</code> 
 * to the aggregation named <code>worksetItems</code>.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oWorksetItem the worksetItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addWorksetItem = function(oWorksetItem) {
	this.addAggregation("worksetItems", oWorksetItem);
	return this;
};

/**
 * Removes an worksetItem from the aggregation named <code>worksetItems</code>.
 *
 * @param {int | string | sap.ui.ux3.NavigationItem} vWorksetItem the worksetItem to remove or its index or id
 * @return {sap.ui.ux3.NavigationItem} the removed worksetItem or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removeWorksetItem = function(vWorksetItem) {
	return this.removeAggregation("worksetItems", vWorksetItem);
};

/**
 * Removes all the controls in the aggregation named <code>worksetItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.NavigationItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllWorksetItems = function() {
	return this.removeAllAggregation("worksetItems");
};

/**
 * Checks for the provided <code>sap.ui.ux3.NavigationItem</code> in the aggregation named <code>worksetItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.NavigationItem}
 *            oWorksetItem the worksetItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfWorksetItem = function(oWorksetItem) {
	return this.indexOfAggregation("worksetItems", oWorksetItem);
};
	

/**
 * Destroys all the worksetItems in the aggregation 
 * named <code>worksetItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyWorksetItems = function() {
	this.destroyAggregation("worksetItems");
	return this;
};

	
/**
 * Getter for aggregation <code>paneBarItems</code>.<br/>
 * The items to appear in the PaneBar.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getPaneBarItems = function() {
	return this.getAggregation("paneBarItems", []);
};


/**
 * Inserts a paneBarItem into the aggregation named <code>paneBarItems</code>.
 *
 * @param {sap.ui.core.Item}
 *          oPaneBarItem the paneBarItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the paneBarItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the paneBarItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the paneBarItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertPaneBarItem = function(oPaneBarItem, iIndex) {
	this.insertAggregation("paneBarItems", oPaneBarItem, iIndex);
	return this;
};

/**
 * Adds some paneBarItem <code>oPaneBarItem</code> 
 * to the aggregation named <code>paneBarItems</code>.
 *
 * @param {sap.ui.core.Item}
 *            oPaneBarItem the paneBarItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addPaneBarItem = function(oPaneBarItem) {
	this.addAggregation("paneBarItems", oPaneBarItem);
	return this;
};

/**
 * Removes an paneBarItem from the aggregation named <code>paneBarItems</code>.
 *
 * @param {int | string | sap.ui.core.Item} vPaneBarItem the paneBarItem to remove or its index or id
 * @return {sap.ui.core.Item} the removed paneBarItem or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removePaneBarItem = function(vPaneBarItem) {
	return this.removeAggregation("paneBarItems", vPaneBarItem);
};

/**
 * Removes all the controls in the aggregation named <code>paneBarItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllPaneBarItems = function() {
	return this.removeAllAggregation("paneBarItems");
};

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>paneBarItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oPaneBarItem the paneBarItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfPaneBarItem = function(oPaneBarItem) {
	return this.indexOfAggregation("paneBarItems", oPaneBarItem);
};
	

/**
 * Destroys all the paneBarItems in the aggregation 
 * named <code>paneBarItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyPaneBarItems = function() {
	this.destroyAggregation("paneBarItems");
	return this;
};

	
/**
 * Getter for aggregation <code>paneContent</code>.<br/>
 * The content to appear in the pane area.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getPaneContent = function() {
	return this.getAggregation("paneContent", []);
};


/**
 * Inserts a paneContent into the aggregation named <code>paneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPaneContent the paneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the paneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the paneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the paneContent is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertPaneContent = function(oPaneContent, iIndex) {
	this.insertAggregation("paneContent", oPaneContent, iIndex);
	return this;
};

/**
 * Adds some paneContent <code>oPaneContent</code> 
 * to the aggregation named <code>paneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPaneContent the paneContent to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addPaneContent = function(oPaneContent) {
	this.addAggregation("paneContent", oPaneContent);
	return this;
};

/**
 * Removes an paneContent from the aggregation named <code>paneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPaneContent the paneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed paneContent or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removePaneContent = function(vPaneContent) {
	return this.removeAggregation("paneContent", vPaneContent);
};

/**
 * Removes all the controls in the aggregation named <code>paneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllPaneContent = function() {
	return this.removeAllAggregation("paneContent");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>paneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPaneContent the paneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfPaneContent = function(oPaneContent) {
	return this.indexOfAggregation("paneContent", oPaneContent);
};
	

/**
 * Destroys all the paneContent in the aggregation 
 * named <code>paneContent</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyPaneContent = function() {
	this.destroyAggregation("paneContent");
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content to appear in the main canvas. Each modification of this aggregation leads to a re-rendering of the content area - but not to a re-rendering of the complete Shell.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};

	
/**
 * Getter for aggregation <code>toolPopups</code>.<br/>
 * The items which appear in the ToolPalette and are opened as popup when clicked.
 * 
 * @return {sap.ui.ux3.ToolPopup[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getToolPopups = function() {
	return this.getAggregation("toolPopups", []);
};


/**
 * Inserts a toolPopup into the aggregation named <code>toolPopups</code>.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *          oToolPopup the toolPopup to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolPopup should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolPopup is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolPopup is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertToolPopup = function(oToolPopup, iIndex) {
	this.insertAggregation("toolPopups", oToolPopup, iIndex);
	return this;
};

/**
 * Adds some toolPopup <code>oToolPopup</code> 
 * to the aggregation named <code>toolPopups</code>.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *            oToolPopup the toolPopup to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addToolPopup = function(oToolPopup) {
	this.addAggregation("toolPopups", oToolPopup);
	return this;
};

/**
 * Removes an toolPopup from the aggregation named <code>toolPopups</code>.
 *
 * @param {int | string | sap.ui.ux3.ToolPopup} vToolPopup the toolPopup to remove or its index or id
 * @return {sap.ui.ux3.ToolPopup} the removed toolPopup or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removeToolPopup = function(vToolPopup) {
	return this.removeAggregation("toolPopups", vToolPopup);
};

/**
 * Removes all the controls in the aggregation named <code>toolPopups</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.ToolPopup[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllToolPopups = function() {
	return this.removeAllAggregation("toolPopups");
};

/**
 * Checks for the provided <code>sap.ui.ux3.ToolPopup</code> in the aggregation named <code>toolPopups</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.ToolPopup}
 *            oToolPopup the toolPopup whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfToolPopup = function(oToolPopup) {
	return this.indexOfAggregation("toolPopups", oToolPopup);
};
	

/**
 * Destroys all the toolPopups in the aggregation 
 * named <code>toolPopups</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyToolPopups = function() {
	this.destroyAggregation("toolPopups");
	return this;
};

	
/**
 * Getter for aggregation <code>headerItems</code>.<br/>
 * Controls to appear in the header next to the logout button. It is recommended to only use controls of type Button, MenuButton and TextView.
 * The respective UI guidelines need to be enforced on a higher level.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.Shell.prototype.getHeaderItems = function() {
	return this.getAggregation("headerItems", []);
};


/**
 * Inserts a headerItem into the aggregation named <code>headerItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderItem the headerItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.insertHeaderItem = function(oHeaderItem, iIndex) {
	this.insertAggregation("headerItems", oHeaderItem, iIndex);
	return this;
};

/**
 * Adds some headerItem <code>oHeaderItem</code> 
 * to the aggregation named <code>headerItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderItem the headerItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Shell.prototype.addHeaderItem = function(oHeaderItem) {
	this.addAggregation("headerItems", oHeaderItem);
	return this;
};

/**
 * Removes an headerItem from the aggregation named <code>headerItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderItem the headerItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerItem or null
 * @public
 */
sap.ui.ux3.Shell.prototype.removeHeaderItem = function(vHeaderItem) {
	return this.removeAggregation("headerItems", vHeaderItem);
};

/**
 * Removes all the controls in the aggregation named <code>headerItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Shell.prototype.removeAllHeaderItems = function() {
	return this.removeAllAggregation("headerItems");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderItem the headerItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Shell.prototype.indexOfHeaderItem = function(oHeaderItem) {
	return this.indexOfAggregation("headerItems", oHeaderItem);
};
	

/**
 * Destroys all the headerItems in the aggregation 
 * named <code>headerItems</code>.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.destroyHeaderItems = function() {
	this.destroyAggregation("headerItems");
	return this;
};


/**
 * The ID of the Item that is currently selected.
 * When setting, the NavigationItem itself can be given instead of its ID. There will not be a worksetItemSelected event, the application is responsible to show the proper content according to the newly selected WorksetItem. If the set WorksetItem does not exist in this Shell, the first item (and first sub-item) will be selected after the call.
 * When getting, always the ID is returned, by which the NavigationItem instance can be retrieved.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedWorksetItem</code> association, or null
 * @public
 */
sap.ui.ux3.Shell.prototype.getSelectedWorksetItem = function() {
	return this.getAssociation("selectedWorksetItem", null);
};

/**
 * The ID of the Item that is currently selected.
 * When setting, the NavigationItem itself can be given instead of its ID. There will not be a worksetItemSelected event, the application is responsible to show the proper content according to the newly selected WorksetItem. If the set WorksetItem does not exist in this Shell, the first item (and first sub-item) will be selected after the call.
 * When getting, always the ID is returned, by which the NavigationItem instance can be retrieved.
 *
 * @param {string | sap.ui.ux3.NavigationItem} vSelectedWorksetItem 
 *    Id of an element which becomes the new target of this <code>selectedWorksetItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.setSelectedWorksetItem = function(vSelectedWorksetItem) {
	this.setAssociation("selectedWorksetItem", vSelectedWorksetItem);
	return this;
};


	
/**
 * Fired when a workset item was selected by the user. The application may populate the sub-items of the given workset item in the event handler, but this must happen synchronously. If this is done, the application is responsible for displaying the correct content for the selected one of the newly created sub-items. The Shell will currently always mark the first sub-item as selected. 
 *
 * @name sap.ui.ux3.Shell#worksetItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The id of the workset item that has been newly selected by the user. If a top-level item has been clicked which has sub-items, the ID of the currently active sub-item (/leaf) is given.
 * @param {sap.ui.ux3.NavigationItem} oControlEvent.getParameters.item The selected NavigationItem
 * @param {string} oControlEvent.getParameters.key The key of the selected NavigationItem (or null if there is no key)
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'worksetItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 * Fired when a workset item was selected by the user. The application may populate the sub-items of the given workset item in the event handler, but this must happen synchronously. If this is done, the application is responsible for displaying the correct content for the selected one of the newly created sub-items. The Shell will currently always mark the first sub-item as selected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.attachWorksetItemSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("worksetItemSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'worksetItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.detachWorksetItemSelected = function(fnFunction, oListener) {
	this.detachEvent("worksetItemSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event worksetItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The id of the workset item that has been newly selected by the user. If a top-level item has been clicked which has sub-items, the ID of the currently active sub-item (/leaf) is given.</li>
 * <li>'item' of type <code>sap.ui.ux3.NavigationItem</code> The selected NavigationItem</li>
 * <li>'key' of type <code>string</code> The key of the selected NavigationItem (or null if there is no key)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Shell.prototype.fireWorksetItemSelected = function(mArguments) {
	this.fireEvent("worksetItemSelected", mArguments);
	return this;
};


/**
 * An item in the right-hand-side pane bar has been selected, the pane is now visible and can be filled with UI elements. 
 *
 * @name sap.ui.ux3.Shell#paneBarItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id The ID of the selected PaneBarItem.
 * @param {sap.ui.core.Item} oControlEvent.getParameters.item The selected Item
 * @param {string} oControlEvent.getParameters.key The key of the selected Item (or null if there is no key)
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'paneBarItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 * An item in the right-hand-side pane bar has been selected, the pane is now visible and can be filled with UI elements. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.attachPaneBarItemSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("paneBarItemSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'paneBarItemSelected' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.detachPaneBarItemSelected = function(fnFunction, oListener) {
	this.detachEvent("paneBarItemSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event paneBarItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> The ID of the selected PaneBarItem.</li>
 * <li>'item' of type <code>sap.ui.core.Item</code> The selected Item</li>
 * <li>'key' of type <code>string</code> The key of the selected Item (or null if there is no key)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Shell.prototype.firePaneBarItemSelected = function(mArguments) {
	this.fireEvent("paneBarItemSelected", mArguments);
	return this;
};


/**
 * Fired when the user clicks the "Log-off" button 
 *
 * @name sap.ui.ux3.Shell#logout
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'logout' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 * Fired when the user clicks the "Log-off" button 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.attachLogout = function(oData, fnFunction, oListener) {
	this.attachEvent("logout", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'logout' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.detachLogout = function(fnFunction, oListener) {
	this.detachEvent("logout", fnFunction, oListener);
	return this;	
};

/**
 * Fire event logout to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Shell.prototype.fireLogout = function(mArguments) {
	this.fireEvent("logout", mArguments);
	return this;
};


/**
 * Fired when search has been triggered. 
 *
 * @name sap.ui.ux3.Shell#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 * Fired when search has been triggered. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.attachSearch = function(oData, fnFunction, oListener) {
	this.attachEvent("search", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.detachSearch = function(fnFunction, oListener) {
	this.detachEvent("search", fnFunction, oListener);
	return this;	
};

/**
 * Fire event search to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Shell.prototype.fireSearch = function(mArguments) {
	this.fireEvent("search", mArguments);
	return this;
};


/**
 * Fired when a new feed entry is submitted. 
 *
 * @name sap.ui.ux3.Shell#feedSubmit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'feedSubmit' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 * Fired when a new feed entry is submitted. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.attachFeedSubmit = function(oData, fnFunction, oListener) {
	this.attachEvent("feedSubmit", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'feedSubmit' event of this <code>sap.ui.ux3.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Shell.prototype.detachFeedSubmit = function(fnFunction, oListener) {
	this.detachEvent("feedSubmit", fnFunction, oListener);
	return this;	
};

/**
 * Fire event feedSubmit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Shell} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Shell.prototype.fireFeedSubmit = function(mArguments) {
	this.fireEvent("feedSubmit", mArguments);
	return this;
};


/**
 * Replaces the existing Shell content with the given Control(-Tree). Only leads to a re-rendering of the content area (not the complete Shell).
 * This method may be more convenient than a series of calls to "removeContent" and "addContent", which each lead to a re-rendering of the content area (but again not of the complete Shell).
 * 
 * By default the old content is not destroyed and is returned by this method in an array for further usage. To avoid memory leaks, the old content should be destroyed (if not needed later), by setting the "destroyOldContent" flag or by destroying it manually later on. If "destroyOldContent" is set, an empty array is returned.
 *
 * @name sap.ui.ux3.Shell.prototype.setContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The new Content. In this method it must be exactly one control (-tree). Use addContent() to add more control (-trees) to the main content area of the Shell.
 * @param {boolean} 
 *         bDestroyOldContent
 *         If set, the controls previously contained in the Shell will be destroyed, to avoid memory leaks.

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Replaces the existing side pane content with the given Control(-Tree). This method is optimized to only re-render the pane content (and not the shell) which is faster and smoother than any other way of changing the "paneContent" aggregation.
 * 
 * By default, the old pane content is not destroyed and is returned by this method in an array for further usage. To avoid memory leaks, the old content should be destroyed (if not needed later), by setting the "destroyOldContent" flag or by destroying it manually later on. If "destroyOldContent" is set, an empty array is returned.
 *
 * @name sap.ui.ux3.Shell.prototype.setPaneContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The new Pane content. In this method it must be exactly one control (-tree). This could likely be a layout or a specific ux3 Pane control. Use addPaneContent() to add more control (-trees) to the Pane.
 * @param {boolean} 
 *         bDestroyOldContent
 *         If set, the controls previously contained in the pane will be destroyed, to avoid memory leaks.

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Experimental method! Do not use!
 *
 * @name sap.ui.ux3.Shell.prototype.openPersonalizationDialog
 * @function

 * @type void
 * @public
 */


/**
 * Experimental method! Do not use!
 * 
 * Makes Shell personalization available and injects the given personalization settings. This should be called before the user can do any adaptations per drag&drop or using the personalization dialog. Otherwise it may override the user's new settings.
 *
 * @name sap.ui.ux3.Shell.prototype.initializePersonalization
 * @function
 * @param {object} 
 *         sSettings
 *         Personalization settings object

 * @type void
 * @public
 */


/**
 * Returns the SearchField control which is used in the Search Tool.
 *
 * @name sap.ui.ux3.Shell.prototype.getSearchField
 * @function

 * @type sap.ui.commons.SearchField
 * @public
 */


// Start of sap/ui/ux3/Shell.js
sap.ui.ux3.Shell.WSI_MENU_DELAY = 200;
sap.ui.ux3.Shell.WSI_OVERFLOW_SCROLL_STEP = 250; // how many pixels to scroll with every overflow arrow click
sap.ui.ux3.Shell.TOOL_PREFIX = "-tool-";
sap.ui.ux3.Shell.FIRST_RENDERING = true; // used for detecting the single very first rendering of any Shell on the page

sap.ui.ux3.Shell.prototype.init = function() {
   this._iOpenPaneIndex = -1;
   this._sOpenWsiId = null;

   this._bPreviousScrollRight = false; // remember the workset item overflow state
   this._bPreviousScrollLeft = false;

   this._sSelectedWorksetId = null;
   this._sSelectedFacetId= null;
   this._oWorksetBar = new sap.ui.ux3.NavigationBar(this.getId() + "-wsBar", {toplevelVariant:true,select:[this._handleWorksetBarSelect,this]}).setParent(this);
   this._oFacetBar = new sap.ui.ux3.NavigationBar(this.getId() + "-facetBar", {select:[this._handleFacetBarSelect,this]}).setParent(this);
};

sap.ui.ux3.Shell.prototype.exit = function() {
	if (this._oWorksetBar) {
		this._oWorksetBar.destroy();
	}
	if (this._oFacetBar) {
		this._oFacetBar.destroy();
	}
	this._oSearchField = null;
};

sap.ui.ux3.Shell.prototype.onBeforeRendering = function() {
	var sId = this.getId();

	// unbind the tool palette mouse (hover effect) handlers
	this._beforeRenderingToolPalette();
	
	// drag&drop for images with local file API
	if (window.FileReader) {
		var $hdr = jQuery.sap.byId(sId + "-hdr");
		$hdr.unbind('dragover', this._handleDragover)
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
		var $bg = jQuery.sap.byId(sId + "-bgImg");
		$bg.unbind('dragover', jQuery.proxy(this._handleDragover))
			.unbind('dragend', this._handleDragend)
			.unbind('drop', this._handleDrop);
	}
};

sap.ui.ux3.Shell.prototype.onAfterRendering = function() {
	var sId = this.getId();

	// register hover effect handlers for application-provided tool icons
	this._afterRenderingToolPalette();
	
	// drag&drop for images with local file API
	if (window.FileReader) {
		var $hdr = jQuery.sap.byId(sId + "-hdr");
		$hdr.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
		var $bg = jQuery.sap.byId(sId + "-bgImg");
		$bg.bind('dragover', jQuery.proxy(this._handleDragover, this))
			.bind('dragend',jQuery.proxy(this._handleDragend, this))
			.bind('drop', jQuery.proxy(this._handleDrop, this));
	}

	// hide or show the facet bar depending on whether the current workset item has sub-items
	var bShowFacetBar = (this._oFacetBar.getAssociatedItems().length > 0);
	jQuery.sap.byId(this.getId() + "-facetBar").css("display", (bShowFacetBar ? "block" : "none"));

	// remember RTL mode to avoid repeated checks
	this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

	if (this._getPersonalization().hasChanges()) {
		this._getPersonalization().applySettings(this._getPersonalization().oSettings);
	}
	
	// ItemNavigation for PaneBar items
	if (!this._oPaneItemNavigation) {
		this._oPaneItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
		this.addDelegate(this._oPaneItemNavigation);
	}
	var $PaneListRef = jQuery.sap.byId(this.getId() + "-paneBar").find(".sapUiUx3ShellPaneEntries");
	this._updatePaneBarItemNavigation($PaneListRef);

	sap.ui.ux3.Shell.FIRST_RENDERING = false;
};

/**
 * Updates the ItemNavigation for the PaneBarItems after the HTML has changed due to re-rendering
 * 
 * @param $PaneListRef
 */
sap.ui.ux3.Shell.prototype._updatePaneBarItemNavigation = function($PaneListRef) {
	this._oPaneItemNavigation.setRootDomRef($PaneListRef[0]);
	var aPaneItems = $PaneListRef.children().toArray();
	this._oPaneItemNavigation.setItemDomRefs(aPaneItems);
	
	if (this._oPaneItemNavigation.getFocusedIndex() > aPaneItems.length) { // if items have been removed
		this._oPaneItemNavigation.setFocusedIndex(-1);
	}
};


/**
 *
 * @private
 * @static
 */
sap.ui.ux3.Shell._hoverTool = function(oDomRef, bMouseover) {
	if (oDomRef && oDomRef.firstChild) {
		var toolId = oDomRef.id.substr(oDomRef.id.indexOf(sap.ui.ux3.Shell.TOOL_PREFIX) + 6);
		var tool = sap.ui.getCore().byId(toolId);
		if (tool && tool.willBeClosed()) {
			oDomRef.firstChild.src = (bMouseover ? tool.getIconHover() : tool.getIcon());
		}
	}
};


sap.ui.ux3.Shell.prototype.onclick = function(oEvent) {
	this.onUserActivation(oEvent);
};
sap.ui.ux3.Shell.prototype.onsapspace = function(oEvent) {
	this.onUserActivation(oEvent);
};
sap.ui.ux3.Shell.prototype.onsapenter = function(oEvent) {
	this.onUserActivation(oEvent);
};

sap.ui.ux3.Shell.prototype.onUserActivation = function(oEvent) {
	var sTargetId = oEvent.target.id;
	var iIdLength = this.getId().length;
	var parent = oEvent.target.parentNode;

	if (oEvent.target.className && oEvent.target.className.indexOf("sapUiUx3ShellHeader-logout") > -1) { // logout button clicked
		this.fireLogout();

	} else if (parent && parent.parentNode 
				&& parent.parentNode.className 
				&& parent.parentNode.className.indexOf("sapUiUx3ShellToolPaletteArea") > -1) {  // tool item clicked
			this._handleToolItemClick(sTargetId);

	} else if (parent && parent.parentNode
				&& parent.parentNode.parentNode
				&& parent.parentNode.parentNode.className
				&& parent.parentNode.parentNode.className.indexOf("sapUiUx3ShellToolPaletteArea") > -1) {  // image in tool item clicked
			this._handleToolItemClick(parent.id);

	} else if (sTargetId) {
		if (jQuery.sap.startsWith(sTargetId, this.getId() + "-pb_")) {  // paneBar item clicked
			var paneId = sTargetId.substr(iIdLength+4);
			this._handlePaneBarItemClick(paneId);
		}
	}
};




/******** WORKSET ITEMS *********/


sap.ui.ux3.Shell.prototype._handleWorksetBarSelect = function(oEvent) {
	this._handleWorksetItemClick(oEvent.getParameter("item"));
};

sap.ui.ux3.Shell.prototype._handleFacetBarSelect = function(oEvent) {
	this._handleWorksetItemClick(oEvent.getParameter("item"));
};


sap.ui.ux3.Shell.prototype._handleWorksetItemClick = function(oElement) {
	var parent = oElement.getParent();
	var id = oElement.getId();

	if (parent instanceof sap.ui.ux3.Shell) { // 1st-level
		if (id != this._sSelectedWorksetId) {   // it's actually a change
			this._sSelectedWorksetId = id;
			var aSubItems = oElement.getSubItems();
			if (aSubItems.length > 0) {
				this._sSelectedFacetId = aSubItems[0].getId();
				id = this._sSelectedFacetId; // the user clicked first-level, but if the first-level has children there must be one of them selected
			} else {
				this._sSelectedFacetId = null;
			}

			// tell the application what the user has done and give the chance to supply new/more/changed subitems
			this._fireWorksetItemSelected(id);

			// if the application modifies/sets the selected subId, this should work, as long as this._sSelectedFacetId is updated

			// application has received the event and potentially modified the subitems
			var aSubItems = oElement.getSubItems();
			this._oFacetBar.setAssociatedItems(aSubItems); // exchange the items in the second-level navigation

			// hide/show the second-level navigation
			if (aSubItems.length > 0) {
				if (!this._oFacetBar.isSelectedItemValid()) {
					this._oFacetBar.setSelectedItem(aSubItems[0]);
					this._sSelectedFacetId = aSubItems[0].getId();
				}
				jQuery.sap.byId(this.getId() + "-facetBar").slideDown();
			} else {
				this._oFacetBar.setSelectedItem(null);
				jQuery.sap.byId(this.getId() + "-facetBar").slideUp();
			}
		}

	} else {                                	 // 2nd-level - it is a sub-item
		if (id != this._sSelectedFacetId) { // it's actually a change
			this._sSelectedFacetId = id;

			this._fireWorksetItemSelected(id);
		}
	}
};


sap.ui.ux3.Shell.prototype._fireWorksetItemSelected = function(sId) {
	var item = sap.ui.getCore().byId(sId);
	var key = (item ? item.getKey() : null);
	this.setAssociation("selectedWorksetItem", sId, true); // update the internal and publicly available knowledge about which item is selected
	this.fireWorksetItemSelected({id:sId,item:item,key:key});
};





/******** TOOL PALETTE *********/



sap.ui.ux3.Shell.prototype._handleToolItemClick = function(sId) {

	// close any previously open tool
	var sAlreadyOpenId = undefined;
	if (this._oOpenToolPopup) {
		sAlreadyOpenId = this._oOpenToolPopup.getId(); // remember ID of open tool, so it does not get opened again below
		jQuery.sap.byId(this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX + this._oOpenToolPopup.getId()).removeClass("sapUiUx3ShellToolSelected").attr("aria-pressed", "false");
		this._oOpenToolPopup.close();
		this._oOpenToolPopup = null;
	}

	// identify new tool
	var tool;
	var toolId = sId.substr(sId.indexOf(sap.ui.ux3.Shell.TOOL_PREFIX) + 6);
	if (toolId == (this.getId() + "-searchTool")) {
		tool = this._getSearchTool();
	} else if (toolId == (this.getId() + "-inspectorTool")) {
		tool = this._getInspectorTool();
	} else if (toolId == (this.getId() + "-feederTool")) {
		tool = this._getFeederTool();
	} else  {
		// application tool clicked
		tool = sap.ui.getCore().byId(toolId);
	}

	// open the new tool
	if (tool && (tool.getId() != sAlreadyOpenId)) {
		sap.ui.ux3.Shell._hoverTool(jQuery.sap.domById(this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX + sAlreadyOpenId), false); // unset hover state on other, closed tool icon
		this._oOpenToolPopup = tool;
		tool.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.EndTop, jQuery.sap.domById(sId), "13 -6", "none");
		tool.open();

		// mark icon as "tool opened"
		jQuery.sap.byId(sId).addClass("sapUiUx3ShellToolSelected").attr("aria-pressed", "true");
		// need to reset the icon also when the tool is closed by the application
		var that = this;
		tool.attachClose(function(oEvt){
			jQuery.sap.byId(sId).removeClass("sapUiUx3ShellToolSelected");
			that._oOpenToolPopup = null;
			sap.ui.ux3.Shell._hoverTool(jQuery.sap.domById(sId), false); // unset hover state in case it was closed by app
		});
		
	} else if (tool.getId() == sAlreadyOpenId) {
		sap.ui.ux3.Shell._hoverTool(jQuery.sap.domById(this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX + sAlreadyOpenId), true); // set hover state, as the mouse is still there
	}
};

sap.ui.ux3.Shell.prototype._getSearchTool = function() {
	if (!this._oSearchPopup) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		this._oSearchPopup = new sap.ui.ux3.ToolPopup(this.getId() + "-searchTool", {tooltip:rb.getText("SHELL_SEARCH")}).addStyleClass("sapUiUx3TP-search");
		var that = this;
		var sf = new sap.ui.commons.SearchField(this.getId() + "-searchField", {
			enableListSuggest: false,
			search: function(oEvent) {
				that.fireSearch({text:oEvent.getParameter("query")});
				sf.setValue("");
			}
		});
		var label = new sap.ui.commons.Label({text:"Search:"}).setLabelFor(sf);
		this._oSearchPopup.addContent(label).addContent(sf);
		this._oSearchPopup.attachOpen(function(){
			window.setTimeout(function(){sf.focus();},100);
		});
		this._oSearchPopup.attachClose(function(){
			sf.setValue("");
		});
		this._oSearchField = sf;
	}
	return this._oSearchPopup;
};

sap.ui.ux3.Shell.prototype.getSearchField = function() {
	if(!this._oSearchField){
		this._getSearchTool();
	}
	return this._oSearchField;
};

sap.ui.ux3.Shell.prototype._getInspectorTool = function() {
	if (!this._oInspectorPopup) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		this._oInspectorPopup = new sap.ui.ux3.ToolPopup(this.getId() + "-inspectorTool", {tooltip:rb.getText("SHELL_TI")}).addStyleClass("sapUiUx3TP-inspector");
		var label = new sap.ui.commons.Label({text:"[Once finished, the ThingInspector will open here.]"});
		this._oInspectorPopup.addContent(label);
	}
	return this._oInspectorPopup;
};

sap.ui.ux3.Shell.prototype._getFeederTool = function() {
	if (!this._oFeederPopup) {
		var that = this;
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
		this._oFeederPopup = new sap.ui.ux3.ToolPopup(this.getId() + "-feederTool", {tooltip:rb.getText("SHELL_FEEDER")}).addStyleClass("sapUiUx3TP-feeder");
		var f = new sap.ui.ux3.feed.Feeder({mode:sap.ui.ux3.feed.FeederMode.FeederComment,submitPress:function(oEvent){
			var text = oEvent.getParameter("content");
			that.fireFeedSubmit({text:text});
			f.setText("");
			that._oFeederPopup.close();
		}});
		this._oFeederPopup.attachOpen(function(){
			// TODO: does not work... window.setTimeout(function(){f.focus();},100);
		});
		this._oFeederPopup.attachClose(function(){
			// maybe the text should stay when closing f.setText("");
		});
		var label = new sap.ui.commons.Label({text:"New Feed:"});
		label.setLabelFor(f);
		this._oFeederPopup.addContent(label).addContent(f);
	}
	return this._oFeederPopup;
};




/******** PANE BAR *********/




sap.ui.ux3.Shell.prototype._handlePaneBarItemClick = function(sPaneId) {
	if (sPaneId == this._sOpenPaneId) { // close currently opened pane area
		this._closePane(sPaneId);
		jQuery.sap.byId(this.getId() + "-pb_" + sPaneId).removeClass("sapUiUx3ShellPaneEntrySelected");//.attr("tabindex", "-1");
		this._sOpenPaneId = null;

	} else { // a pane needs to be displayed
		var item = sap.ui.getCore().byId(sPaneId);
		var key = (item ? (item.getKey() == "" ? null : item.getKey()) : null);
		this.firePaneBarItemSelected({"id":sPaneId,"item":item,"key":key});

		jQuery.sap.byId(this.getId() + "-pb_" + sPaneId).addClass("sapUiUx3ShellPaneEntrySelected");//.attr("tabindex", "0");
		if (!this._sOpenPaneId) {
			// pane area not open yet, open it
		  this._openPane();
		} else {
			// pane area already open for a different pane bar item - unselect that one
			jQuery.sap.byId(this.getId() + "-pb_" + this._sOpenPaneId).removeClass("sapUiUx3ShellPaneEntrySelected");//.attr("tabindex", "-1");
		}

		this._sOpenPaneId = sPaneId;
	}
};


(function() {

	var PANE_OUTER_DISTANCE = 42; // make this private, using the closure
	


	sap.ui.ux3.Shell.prototype._closePane = function() {

		var id = this.getId();
		if (this._bRtl) {
			jQuery.sap.byId(id+"-canvas").animate({left: PANE_OUTER_DISTANCE + "px"});
			jQuery(this._aSizeSyncRef).animate({left: PANE_OUTER_DISTANCE + "px"});
			jQuery.sap.byId(id+"-wBar").animate({marginLeft: (PANE_OUTER_DISTANCE + 14) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundOpen").addClass("sapUiUx3ShellCanvasBackgroundClosed");
			jQuery.sap.byId(id+"-canvasBackground").animate({left: PANE_OUTER_DISTANCE + "px"}, function() {
				jQuery.sap.byId(id+"-paneBar").removeClass("sapUiUx3ShellPaneBarOpen");
			});
		} else {
			jQuery.sap.byId(id+"-canvas").animate({right: PANE_OUTER_DISTANCE + "px"});
			jQuery(this._aSizeSyncRef).animate({right: PANE_OUTER_DISTANCE + "px"});
			jQuery.sap.byId(id+"-wBar").animate({marginRight: (PANE_OUTER_DISTANCE + 14) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundOpen").addClass("sapUiUx3ShellCanvasBackgroundClosed");
			jQuery.sap.byId(id+"-canvasBackground").animate({right: PANE_OUTER_DISTANCE + "px"}, function() {
				jQuery.sap.byId(id+"-paneBar").removeClass("sapUiUx3ShellPaneBarOpen");
			});
		}

	};

	sap.ui.ux3.Shell.prototype._openPane = function() {
		var PANE_WIDTH = this.getPaneWidth();
	
		var id = this.getId();
		if (this._bRtl) {
			jQuery.sap.byId(id+"-paneBar").addClass("sapUiUx3ShellPaneBarOpen");
			jQuery.sap.byId(id+"-wBar").animate({marginLeft: (PANE_WIDTH + PANE_OUTER_DISTANCE + 22) + "px"});
			jQuery.sap.byId(id+"-canvas").animate({left: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"});
			jQuery(this._aSizeSyncRef).animate({left: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").animate({left: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"}, function() {
				jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundClosed").addClass("sapUiUx3ShellCanvasBackgroundOpen");
			});
		} else {
			jQuery.sap.byId(id+"-paneBar").addClass("sapUiUx3ShellPaneBarOpen");
			jQuery.sap.byId(id+"-wBar").animate({marginRight: (PANE_WIDTH + PANE_OUTER_DISTANCE + 22) + "px"});
			jQuery.sap.byId(id+"-canvas").animate({right: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"});
			jQuery(this._aSizeSyncRef).animate({right: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"});
			jQuery.sap.byId(id+"-canvasBackground").animate({right: (PANE_WIDTH + PANE_OUTER_DISTANCE) + "px"}, function() {
				jQuery.sap.byId(id+"-canvasBackground").removeClass("sapUiUx3ShellCanvasBackgroundClosed").addClass("sapUiUx3ShellCanvasBackgroundOpen");
			});
		}
	};

	sap.ui.ux3.Shell.prototype.setPaneWidth = function (iWidth) {
		if (typeof iWidth == "number" && (iWidth > 0)) {
			iWidth = Math.max(iWidth, 50);

			// apply width
			if (this.getDomRef()) {
				var id = this.getId();
				jQuery.sap.byId(id + "-paneContent").css("width", iWidth + "px");

				if (!!this._sOpenPaneId) { // pane area is open
					if (this._bRtl) {
						jQuery.sap.byId(id+"-wBar").css("marginLeft", (iWidth + PANE_OUTER_DISTANCE + 22) + "px");
						jQuery.sap.byId(id+"-canvas").css("left", (iWidth + PANE_OUTER_DISTANCE) + "px");
						jQuery(this._aSizeSyncRef).css("left", (iWidth + PANE_OUTER_DISTANCE) + "px");
						jQuery.sap.byId(id+"-canvasBackground").css("left", (iWidth + PANE_OUTER_DISTANCE) + "px");
					} else {
						jQuery.sap.byId(id+"-wBar").css("marginRight", (iWidth + PANE_OUTER_DISTANCE + 22) + "px");
						jQuery.sap.byId(id+"-canvas").css("right", (iWidth + PANE_OUTER_DISTANCE) + "px");
						jQuery(this._aSizeSyncRef).css("right", (iWidth + PANE_OUTER_DISTANCE) + "px");
						jQuery.sap.byId(id+"-canvasBackground").css("right", (iWidth + PANE_OUTER_DISTANCE) + "px");
					}
				}
			}

			this.setProperty("paneWidth", iWidth, true);
		}
		
		return this;
	};

}());


/**
 * Used to hand a DomRef to the Shell which should always cover the canvas area and also be animated with PaneBar opening/closing.
 * When nothing is given or the next DomRef is given or the DomRef is not found when the Shell tries to adapt it,
 * the Shell stops syncing this DomRef's size.
 *
 * Only to be used internally (by the ThingInspector)! Marking as "private", but actually is "package" visibility.
 * @private
 */
sap.ui.ux3.Shell.prototype.syncWithCanvasSize = function(oDomRef) {
	this._aSizeSyncRef = oDomRef;

	// set the initial size correctly
	if (oDomRef) {
		var oCanvas = jQuery.sap.domById(this.getId() + "-canvas");
		oDomRef.style.left = oCanvas.offsetLeft + "px";
		oDomRef.style.right = (jQuery(document).width() - oCanvas.offsetLeft - oCanvas.offsetWidth) + "px";
		oDomRef.style.top = jQuery.sap.domById(this.getId() + "-hdrLine").offsetHeight + "px";
		oDomRef.style.bottom = "0";
	}
};


// invalidation avoiding code

sap.ui.ux3.Shell.prototype.setAppTitle = function(sAppTitle) {
	this.setProperty("appTitle", sAppTitle, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.setAppIcon = function(sAppIcon) {
	this.setProperty("appIcon", sAppIcon, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.setShowLogoutButton = function(bShowLogoutButton) {
	this.setProperty("showLogoutButton", bShowLogoutButton, true);
	this._rerenderHeader();
	return this;
};

sap.ui.ux3.Shell.prototype.insertHeaderItem = function(oHeaderItem, iIndex) {
	if (sap.ui.commons && sap.ui.commons.Button && (oHeaderItem instanceof sap.ui.commons.Button)) {
		oHeaderItem.setStyled(false);
	}
	this.insertAggregation("headerItems", oHeaderItem, iIndex, true);
	this._rerenderHeader();
	return this;
};
sap.ui.ux3.Shell.prototype.addHeaderItem = function(oHeaderItem) {
	if (sap.ui.commons && sap.ui.commons.Button && (oHeaderItem instanceof sap.ui.commons.Button)) {
		oHeaderItem.setStyled(false);
	}
	this.addAggregation("headerItems", oHeaderItem, true);
	this._rerenderHeader();
	return this;
};
sap.ui.ux3.Shell.prototype.removeHeaderItem = function(vIndex) {
	var result = this.removeAggregation("headerItems", vIndex, true);
	this._rerenderHeader();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllHeaderItems = function() {
	var result = this.removeAllAggregation("headerItems", true);
	this._rerenderHeader();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyHeaderItems = function() {
	this.destroyAggregation("headerItems", true);
	this._rerenderHeader();
	return this;
};


sap.ui.ux3.Shell.prototype.setShowSearchTool = function(bShowSearchTool) {
	this.setProperty("showSearchTool", bShowSearchTool, true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.setShowInspectorTool = function(bShowInspectorTool) {
	this.setProperty("showInspectorTool", bShowInspectorTool, true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.setShowFeederTool = function(bShowFeederTool) {
	this.setProperty("showFeederTool", bShowFeederTool, true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.insertToolPopup = function(oToolPopup, iIndex) {
	this.insertAggregation("toolPopups", oToolPopup, iIndex, true);
	oToolPopup.attachIconChanged(this._rerenderToolPalette, this);
	this._rerenderToolPalette();
	return this;
};
sap.ui.ux3.Shell.prototype.addToolPopup = function(oToolPopup) {
	this.addAggregation("toolPopups", oToolPopup, true);
	oToolPopup.attachIconChanged(this._rerenderToolPalette, this);
	this._rerenderToolPalette();
	return this;
};
sap.ui.ux3.Shell.prototype.removeToolPopup = function(vIndex) {
	var result = this.removeAggregation("toolPopups", vIndex, true);
	this._rerenderToolPalette();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllToolPopups = function() {
	var result = this.removeAllAggregation("toolPopups", true);
	this._rerenderToolPalette();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyToolPopups = function() {
	this.destroyAggregation("toolPopups", true);
	this._rerenderToolPalette();
	return this;
};

sap.ui.ux3.Shell.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex, true);
	this._rerenderContent();
	return this;
};
sap.ui.ux3.Shell.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent, true);
	this._rerenderContent();
	return this;
};
sap.ui.ux3.Shell.prototype.removeContent = function(vIndex) {
	var result = this.removeAggregation("content", vIndex, true);
	this._rerenderContent();
	return result;
};
sap.ui.ux3.Shell.prototype.removeAllContent = function() {
	var result = this.removeAllAggregation("content", true);
	this._rerenderContent();
	return result;
};
sap.ui.ux3.Shell.prototype.destroyContent = function() {
	this.destroyAggregation("content", true);
	this._rerenderContent();
	return this;
};

sap.ui.ux3.Shell.prototype.addPaneBarItem = function(oPaneBarItem) {
	this.addAggregation("paneBarItems", oPaneBarItem, true);
	this._rerenderPaneBarItems();
	return this;
}; 
sap.ui.ux3.Shell.prototype.insertPaneBarItem = function(oPaneBarItem, iIndex) {
	this.insertAggregation("paneBarItems", oPaneBarItem, iIndex, true);
	this._rerenderPaneBarItems();
	return this;
}; 
sap.ui.ux3.Shell.prototype.removePaneBarItem = function(vPaneBarItem) {
	var result = this.removeAggregation("paneBarItems", vPaneBarItem, true);
	this._rerenderPaneBarItems();
	return result;
}; 
sap.ui.ux3.Shell.prototype.removeAllPaneBarItems = function() {
	var result = this.removeAllAggregation("paneBarItems", true);
	this._rerenderPaneBarItems();
	return result;
}; 
sap.ui.ux3.Shell.prototype.destroyPaneBarItems = function() {
	this.destroyAggregation("paneBarItems", true);
	this._rerenderPaneBarItems();
	return this;
};


sap.ui.ux3.Shell.prototype._rerenderHeader = function() {
	var $hdr = jQuery.sap.byId(this.getId() + "-hdr");
	if ($hdr.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ShellRenderer.renderHeader(rm, this);
		rm.flush($hdr[0], true);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderToolPalette = function() {
	var $tp = jQuery.sap.byId(this.getId() + "-tp");
	if ($tp.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this._beforeRenderingToolPalette();
		sap.ui.ux3.ShellRenderer.renderToolPalette(rm, this);
		rm.flush($tp[0], true);
		this._afterRenderingToolPalette();
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._beforeRenderingToolPalette = function() {
	// unbind the tool palette mouse (hover effect) handlers
	jQuery.sap.byId(this.getId() + "-toolPalette").children(".sapUiUx3ShellTool").unbind("mouseenter mouseleave");
};

sap.ui.ux3.Shell.prototype._afterRenderingToolPalette = function() {
	// register hover effect handlers for application-provided tool icons
	var sIdPrefix = this.getId() + sap.ui.ux3.Shell.TOOL_PREFIX;
	var aToolItems = this.getToolPopups();
	for (var i = 0; i < aToolItems.length; i++) {
		var oToolItem = aToolItems[i];
		if (oToolItem instanceof sap.ui.ux3.ToolPopup) { 	// regular item
			jQuery.sap.byId(sIdPrefix + oToolItem.getId()).hover(
				function() {
					sap.ui.ux3.Shell._hoverTool(this, true);
				},
				function() {
					sap.ui.ux3.Shell._hoverTool(this, false);
				}
			);
		}
	}
};

sap.ui.ux3.Shell.prototype._rerenderContent = function(bPreventPreserve) {
	var $content = jQuery.sap.byId(this.getId() + "-content");
	if ($content.length > 0) {
		var aContent = this.getContent(),
		rm = sap.ui.getCore().createRenderManager();
		for (var i = 0; i < aContent.length; i++) {
			rm.renderControl(aContent[i]);
		}
		rm.flush($content[0], bPreventPreserve);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderPane = function(bPreventPreserve) {
	var $paneContent = jQuery.sap.byId(this.getId() + "-paneContent");
	if ($paneContent.length > 0) {
		var aPaneContent = this.getPaneContent(),
		rm = sap.ui.getCore().createRenderManager();
		for (var i = 0; i < aPaneContent.length; i++) {
			rm.renderControl(aPaneContent[i]);
		}
		rm.flush($paneContent[0], bPreventPreserve);
		rm.destroy();
	}
};

sap.ui.ux3.Shell.prototype._rerenderPaneBarItems = function() {
	var $PaneListRef = jQuery.sap.byId(this.getId() + "-paneBar").find(".sapUiUx3ShellPaneEntries");

	if ($PaneListRef.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.ux3.ShellRenderer.renderPaneBarItems(rm, this);
		rm.flush($PaneListRef[0]);
		rm.destroy();
		
		this._updatePaneBarItemNavigation($PaneListRef);
	}
};




/* DEBUG code for tracking invalidation */

/**
 * Forces invalidation and rerendering (.invalidate() is disabled)
 * @private
 */
sap.ui.ux3.Shell.prototype.forceInvalidation = sap.ui.core.Control.prototype.invalidate;

/**
 * Hack that prevents Shell invalidation by default.
 * Later, invalidation should return to normal, but be prevented in all typical cases by bSuppressRerendering with explicit change handling.
 *
 * @private
 */
sap.ui.ux3.Shell.prototype.invalidate = function(oSource) {

	if (oSource == this) {
		// does not happen because the source is only given when propagating to a parent

	} else if (!oSource) {
		// direct invalidation of the Shell; this means a property has been modified
		this.forceInvalidation(); // let invalidation occur

	} else if (oSource instanceof sap.ui.ux3.NavigationItem) {
		// a workset item was changed/renamed or, more likely, subitems were added/exchanged
		// TODO let the app change workset items at any time!  this._bWorksetItemsInvalidated = true;
		this._oWorksetBar.setAssociatedItems(this.getWorksetItems());
		var wsi = this.getSelectedWorksetItem();
		if (wsi) {
			var sel = sap.ui.getCore().byId(wsi);
			if (sel && sel.getParent() instanceof sap.ui.ux3.NavigationItem) {
				this._oFacetBar.setAssociatedItems(sel.getParent().getSubItems());
			}
		}
		
	} else if ((oSource instanceof sap.ui.core.Item) && (oSource.getParent() == this)) {
		// a PaneBarItem was changed/added/removed
		this.forceInvalidation();

	} else if (oSource instanceof sap.ui.ux3.ToolPopup) {
		// do nothing: icon is rendered by listener to iconChanged event

	} else if (this.indexOfHeaderItem(oSource) >= 0) {
		// a header item was invalidated - rerender the header
		this._rerenderHeader();

	} else {
		// a child was invalidated - TODO: check what kind of child and either handle directly or re-render
	}
};


sap.ui.ux3.Shell.prototype._setParent = sap.ui.core.Control.prototype.setParent;
sap.ui.ux3.Shell.prototype.setParent = function(oParent, sAggregationName, bSuppressRerendering) {
	this._setParent(oParent, sAggregationName, bSuppressRerendering);
	this.forceInvalidation(); // TODO: temporary hack to force invalidation when the Shell is added to a UiArea
};


/*  METHODS  */

sap.ui.ux3.Shell.prototype.setContent = function(vContent, bDestruct) {
	jQuery.sap.assert(vContent === null 
			|| (vContent instanceof sap.ui.core.Control) 
			|| ((jQuery.isArray(vContent) && ((vContent.length > 0) ? (vContent[0] instanceof sap.ui.core.Control) : true))), 
			"vContent must be a control or array of controls or null"); // only the first array element is checked
	jQuery.sap.assert((bDestruct === undefined || bDestruct === true || bDestruct === false), "bDestruct must be true, false, or undefined");
	
	var oldContent = [];
	var $content = jQuery.sap.byId(this.getId() + "-content");
	var bPreventPreserve = false;

	if (!bDestruct) {
		oldContent = this.removeAllAggregation("content", true);

		if ($content.length > 0) {
			sap.ui.core.RenderManager.preserveContent($content[0]);
			bPreventPreserve = true;
			$content.empty();
		}
	} else {
		this.destroyAggregation("content", true);
	}

	// add new control(s) to aggregation
	if (vContent instanceof sap.ui.core.Control) { // one single control
		this.addAggregation("content", vContent, true);
	} else if (vContent && typeof(vContent) == "object" && vContent.length) { // an array of (hopefully) controls
		for (var i = 0; i < vContent.length; i++) {
			this.addAggregation("content", vContent[i], true);
		}
	}

	// if Shell is already rendered, update the UI
	this._rerenderContent(bPreventPreserve);

	return oldContent;
};


sap.ui.ux3.Shell.prototype.setPaneContent = function(vContent, bDestruct) {
	jQuery.sap.assert((vContent instanceof sap.ui.core.Control) 
			|| ((jQuery.isArray(vContent) && ((vContent.length > 0) ? (vContent[0] instanceof sap.ui.core.Control) : true))), 
			"vContent must be a control or array of controls"); // only the first array element is checked
	jQuery.sap.assert((bDestruct === undefined || bDestruct === true || bDestruct === false), "bDestruct must be true, false, or undefined");
	
	var oldContent = [];
	var $paneContent = jQuery.sap.byId(this.getId() + "-paneContent");
	var bPreventPreserve = false;

	if (!bDestruct) {
		oldContent = this.removeAllAggregation("paneContent", true);

		if ($paneContent.length > 0) {
			sap.ui.core.RenderManager.preserveContent($paneContent[0]);
			bPreventPreserve = true; // HTML content is already preserved; do not do it again in the RenderManager
			$paneContent.empty();
		}
	} else {
		this.destroyAggregation("paneContent", true);
	}

	// add new control(s) to aggregation
	if (vContent instanceof sap.ui.core.Control) { // one single control
		this.addAggregation("paneContent", vContent, true);
	} else if (vContent && typeof(vContent) == "object" && vContent.length) { // an array of (hopefully) controls
		for (var i = 0; i < vContent.length; i++) {
			this.addAggregation("paneContent", vContent[i], true);
		}
	}

	// if Shell is already rendered, update the UI
	this._rerenderPane(bPreventPreserve);

	return oldContent;
};



sap.ui.ux3.Shell.prototype.getSelectedWorksetItem = function() {
	/* Initially, this is null
	 * There is a value as soon as:
	 * 1. The application sets a value
	 * 2. The Shell is rendered without a value (the first toplevel item will be used then (respectively its first child, if present))
	 */
	return this.getAssociation("selectedWorksetItem");
};

sap.ui.ux3.Shell.prototype.setSelectedWorksetItem = function(selectedWorksetItem) {
	var oldSelectedId = this.getSelectedWorksetItem();
	this.setAssociation("selectedWorksetItem", selectedWorksetItem, true);
	var newSelectedId = this.getSelectedWorksetItem();

	if (oldSelectedId != newSelectedId) { // only do something if selected item really changed
		var newSelectedItem = sap.ui.getCore().byId(newSelectedId);
		
		if (newSelectedItem) {

			this._sSelectedWorksetId = newSelectedId;
			this._sSelectedFacetId = null;

			var sub = newSelectedItem.getSubItems();
			if (sub.length > 0) { // app set a parent item that has children, so select automatically the first child
				newSelectedItem = sub[0];
			}

			if (newSelectedItem && (newSelectedItem.getParent() instanceof sap.ui.ux3.NavigationItem)) { // if selected item is sub-item
				var newParentItem = newSelectedItem.getParent();
				this._sSelectedWorksetId = newParentItem.getId();
				this._sSelectedFacetId = newSelectedId;

				this._oWorksetBar.setSelectedItem(newParentItem);
				this._oFacetBar.setAssociatedItems(newParentItem.getSubItems());
				this._oFacetBar.setSelectedItem(newSelectedItem);

				if (this.getDomRef()) {
					jQuery.sap.byId(this.getId() + "-facetBar").slideDown();
				}

			} else if (newSelectedItem) {
				this._oWorksetBar.setSelectedItem(newSelectedItem);
				this._oFacetBar.setAssociatedItems([]);
				this._oFacetBar.setSelectedItem(null);

				if (this.getDomRef()) {
					jQuery.sap.byId(this.getId() + "-facetBar").slideUp();
				}

			} else {
				// newSelectedItem == null  after selecting the child
			}
		} else {
			// newSelectedItem == null
			throw new Error("WorksetItem with ID " + newSelectedId + " cannot be found.");
		}
	}

	return this;
};




/* Drag&Drop personalization */

sap.ui.ux3.Shell.prototype._handleDragover = function(evt) {
	var id = evt.target.id;
	if (!this._dragOverBlinking) {
		var $bg = jQuery.sap.byId(id);
		$bg.css("opacity", "0.5");
		this._dragOverBlinking = true;
		var that = this;
		window.setTimeout(function(){
			$bg.css("opacity", "1");
			window.setTimeout(function(){
				that._dragOverBlinking = null;
			}, 300);
		}, 300);
	}
  return false;
};
sap.ui.ux3.Shell.prototype._handleDragend = function(evt) {
	return false;
};
sap.ui.ux3.Shell.prototype._handleDrop = function(evt) {
	var id = evt.target.id;
	evt.preventDefault();
	var e = evt.originalEvent;
	var file = e.dataTransfer.files[0];
	if(file) {
		// read file content
		var reader = new window.FileReader();
		reader.onload = jQuery.proxy(function(event) {
			var dataUrl = event.target.result;
			if (id == this.getId() + "-bgImg") {
				this._getPersonalization()._handleBackgroundImageChange(dataUrl, true);
			} else if (id == this.getId() + "-hdr") {
				this._getPersonalization()._handleHeaderImageChange(dataUrl, true);
			} else if (id == this.getId() + "-logoImg") {
				this._getPersonalization()._handleLogoImageChange(dataUrl, true);
			}
			reader = null;
		}, this);
		reader.readAsDataURL(file);
	}
};



sap.ui.ux3.Shell.prototype._getPersonalization = function() {
	if (!this.oPersonalization) {
		jQuery.sap.require("sap.ui.ux3.ShellPersonalization");
		this.oPersonalization = new sap.ui.ux3.ShellPersonalization(this);
	}
	return this.oPersonalization;
};

sap.ui.ux3.Shell.prototype.openPersonalizationDialog = function() {
	this._getPersonalization().openDialog();
};

sap.ui.ux3.Shell.prototype.initializePersonalization = function(oSettings) {
	this._getPersonalization().initializeSettings(oSettings);
};
}; // end of sap.ui.ux3.Shell
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.Overlay
jQuery.sap.declare("sap.ui.ux3.OverlayRenderer");

/**
 * @class Overlay renderer.
 * @static
 */
sap.ui.ux3.OverlayRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.OverlayRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3Overlay");

	if (this.addRootClasses) {
		this.addRootClasses(rm, oControl);
	}

	rm.writeClasses();
	rm.write(">");

	rm.write("<div role='presentation'");
	rm.addClass("sapUiUx3OverlayOverlay");

	if (this.addOverlayClasses) {
		this.addOverlayClasses(rm, oControl);
	}

	rm.writeClasses();
	rm.write(">");
	rm.write("</div>");

	//render open & close button
	if (oControl.getOpenButtonVisible()) {
	rm.write("<a role=\"button\" aria-disabled=\"false\" class='sapUiUx3OverlayOpenButton' id='" + oControl.getId()
			+ "-openNew' tabindex=\"0\" title=\""+oControl._getText("OVERLAY_OPEN_BUTTON_TOOLTIP") +"\">"+oControl._getText("OVERLAY_OPEN_BUTTON_TEXT")+"</a>");
			}
	if (oControl.getCloseButtonVisible()) {
	rm.write("<a role=\"button\" aria-disabled=\"false\" class='sapUiUx3OverlayCloseButton' id='" + oControl.getId()
			+ "-close' tabindex=\"0\" title=\""+oControl._getText("OVERLAY_CLOSE_BUTTON_TOOLTIP") +"\"></a>");
	}
	if (this.renderContent) {
		this.renderContent(rm, oControl);
	}

	rm.write("</div>");

};
}; // end of sap.ui.ux3.OverlayRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.OverlayContainer.
jQuery.sap.declare("sap.ui.ux3.OverlayContainer");



/**
 * Constructor for a new OverlayContainer.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.ux3.Overlay#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Is to be embedded into the Overlay control as content container
 * @extends sap.ui.ux3.Overlay
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.OverlayContainer = function (sId, mSettings) {
	sap.ui.ux3.Overlay.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.OverlayContainer.prototype = jQuery.sap.newObject(sap.ui.ux3.Overlay.prototype);

/*
 * Describe the sap.ui.ux3.OverlayContainer. 
 * Resulting metadata can be obtained via sap.ui.ux3.OverlayContainer.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.OverlayContainer", {

  // ---- object ----
  baseType : "sap.ui.ux3.Overlay",
  publicMethods : [
    // properties 
    
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {},
  defaultAggregation : "content",
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {}

});	

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregation for content
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.OverlayContainer.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.ux3.OverlayContainer} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.OverlayContainer.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


// Start of sap/ui/ux3/OverlayContainer.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.ux3.OverlayContainer.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap.ui.ux3.OverlayContainer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.FeedChunkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.FeedChunk
jQuery.sap.declare("sap.ui.ux3.FeedChunkRenderer");

/**
 * @class FeedChunk renderer. 
 * @static
 */
sap.ui.ux3.FeedChunkRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.FeedChunkRenderer.render = function(oRenderManager, oControl){ 
	// convenience variable
	var rm = oRenderManager;
	var oChunk = oControl;
	var bComment = oChunk.getCommentChunk();
	var sMyId = oChunk.getId();

	oChunk.initChildControls();

	rm.write('<ARTICLE');
    rm.writeControlData(oChunk);
	rm.addClass('sapUiFeedChunk');
	if (bComment) {
		rm.addClass('sapUiFeedChunkComment');		
	}

	rm.writeClasses();
    rm.write('>'); 
    
    // thumbnail
	rm.write('<img id=' + sMyId + '-thumb');
//	rm.addClass('sapUiFeedChunkThumb');		
	var sThumbnail = oChunk.getThumbnailSrc();
	if(!sThumbnail){
		sThumbnail = jQuery.sap.getModulePath("sap.ui.ux3", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sap.ui.core.theming.Parameters.get('sap.ui.ux3:sapUiFeedPersonPlaceholder');
	}
	rm.writeAttributeEscaped('src', sThumbnail);
	rm.writeAttributeEscaped('alt', oChunk.getSender());
	rm.writeClasses();
	rm.write('>');
    
    // text (starting with sender)
    rm.write('<DIV class= "sapUiFeedChunkText" >');
	rm.write('<a id=' + sMyId + '-sender ');
	rm.writeAttribute('href', 'javascript:void(0);');
	rm.write('>');
	rm.writeEscaped(oChunk.getSender());
	rm.write('</a> ');

	this.renderText(rm, oChunk);
//	rm.write(jQuery.sap.escapeHTML(oChunk.getText()).replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />"));
	rm.write('</DIV>');

	// status icons
	if(!bComment){
		rm.write('<UL class= "sapUiFeedChunkStatusIcons" >');
		if (oChunk.getFlagged()) {
			rm.write('<LI class= "sapUiFeedChunkFlagged" title="' + oChunk.rb.getText('FEED_FLAGGED') + '" >&#9873</LI>');
		}
		if (oChunk.getFavorite()) {
			rm.write('<LI class= "sapUiFeedChunkFavorite" title="' + oChunk.rb.getText('FEED_FAVORITE') + '" >&#9733</LI>');
		}
		if (oChunk.getShared()) {
			rm.write('<LI class= "sapUiFeedChunkShared" title="' + oChunk.rb.getText('FEED_SHARED') + '" >&#8635</LI>');
		}
		rm.write('</UL>');
	}
	
	// date
    rm.write('<SPAN class= "sapUiFeedChunkByline" >');
	rm.writeEscaped(oChunk.getTimestamp());
	rm.write('</SPAN>');

	if(!bComment){
		// action buttons (only if exists)
		if(oChunk.oToolsButton){
			rm.renderControl(oChunk.oToolsButton);
		}								
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-ActShare class= "sapUiFeedChunkAct sapUiFeedChunkActShare" title="' + oChunk.rb.getText('FEED_ACT_SHARE') + '" >&#8635</BUTTON>');
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-ActInspect class= "sapUiFeedChunkAct sapUiFeedChunkActInspect" title="' + oChunk.rb.getText('FEED_ACT_INSPECT') + '" >i</BUTTON>');
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-ActFavorite class= "sapUiFeedChunkAct sapUiFeedChunkActFavorite" title="' + oChunk.rb.getText('FEED_ACT_FAVORITE') + '" >&#9733</BUTTON>');
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-ActFlag class= "sapUiFeedChunkAct sapUiFeedChunkActFlag" title="' + oChunk.rb.getText('FEED_ACT_FAVORITE') + '" >&#9873</BUTTON>');
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-ActComment class= "sapUiFeedChunkAct sapUiFeedChunkActComment" title="' + oChunk.rb.getText('FEED_ACT_COMMENT') + '" >C</BUTTON>');
	}

    // delete button
    if(oChunk.getDeletionAllowed() && bComment){
    	rm.write('<BUTTON type = "button" id='+ sMyId + '-delete class= "sapUiFeedChunkDel" title="' + oChunk.rb.getText('FEED_DELETE') + '" >X</BUTTON>');
    }
    
    // comments
    if(oChunk.getComments().length > 0 || oChunk.showCommentFeeder){   	
    	rm.write("<SECTION>");
    	this.renderComments(rm, oChunk);
    	rm.write("</SECTION>");
    }
    
    rm.write('</ARTICLE>');
};

/*
 *	Render text with @References
 */
sap.ui.ux3.FeedChunkRenderer.renderText = function(rm, oChunk){ 

	var sText = oChunk.getText();
	var i = 0;

	do{
		var iPos = sText.search(/\s@/);

		if(iPos < 0){
			rm.write(jQuery.sap.escapeHTML(sText).replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />"));
		}else{
			rm.write(jQuery.sap.escapeHTML(sText.slice(0, iPos + 1)).replace(/(\r\n)|(\n\r)|\r|\n/g,"<br />"));
			sText = sText.slice(iPos + 1);
			iPos = sText.search(/\s/);
			if (iPos < 0) {
				//Text ends with @-reference
				iPos = sText.length;
			}
			rm.write('<a id=' + oChunk.getId() + '-Ref' + i);
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
			rm.writeEscaped(sText.slice(0, iPos));
			rm.write('</a> ');
			i++;
			sText = sText.slice(iPos);
		}
	}while(iPos >= 0);

};

/*
 *	Render comment section content
 */
sap.ui.ux3.FeedChunkRenderer.renderComments = function(rm, oChunk){ 

    	// number of comments
    	rm.write('<HEADER class= "sapUiFeedChunkComments" >');
    	if(oChunk.rb) {
    		rm.write(oChunk.rb.getText('FEED_NO_COMMENTS', [oChunk.getComments().length]));

    		if(!oChunk.allComments && oChunk.getComments().length > oChunk.maxComments){
    			rm.write('<a id=' + oChunk.getId() + '-all ');
    			rm.writeAttribute('href', 'javascript:void(0);');
    			rm.write('>' + oChunk.rb.getText('FEED_ALL_COMMENTS') + '</a>');
    		}
    	}
    	rm.write("</HEADER>");

    	for ( var i = 0; i < oChunk.getComments().length; i++) {
			rm.renderControl(oChunk.getComments()[i]);			
			
			if (i == oChunk.maxComments - 1 && !oChunk.allComments) {
				// only render max. comments
				break;
			}
		}
		
		// comment feeder
		if (oChunk.oCommentFeeder) {
			rm.renderControl(oChunk.oCommentFeeder);						
		}

};

/*
 *	Render expand button
 */
sap.ui.ux3.FeedChunkRenderer.renderExpander = function(oChunk){ 

	if (oChunk.expanded) {
		return "<button id= '" + oChunk.getId() + "-exp' class='sapUiFeedChunkCollapse' title='" + oChunk.rb.getText("FEED_COLLAPS") + "'>&#9660</button>";
	} else {
		return "<button id= '" + oChunk.getId() + "-exp' class='sapUiFeedChunkExpand' title='" + oChunk.rb.getText("FEED_EXPAND") + "'>&#9660</button>";
	}

};


}; // end of sap.ui.ux3.FeedChunkRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

//Provides default renderer for the sap.ui.ux3.Shell
jQuery.sap.declare("sap.ui.ux3.ShellRenderer");

/**
 * @class GoldReflectionPageLayout renderer.
 * @static
 */
sap.ui.ux3.ShellRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ShellRenderer.render = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager;

	if (sap.ui.ux3.Shell.FIRST_RENDERING) {
		document.body.style.margin = "0"; // does not seem to work in initial onBeforeRendering
	}

	// write the root HTML element  TODO: this should use the existing <body>! But where is the staticarea, then?
	rm.write("<div class='sapUiUx3Shell'");
	rm.writeControlData(oControl);
	rm.write(">");

	var sId = oControl.getId(); // TODO: escape


	// write header
	rm.write("<img id='" + oControl.getId() + "-hdrImg' class='sapUiUx3ShellHeaderImg' src='");
	rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	rm.write("' />");
	rm.write("<header id='" + oControl.getId() + "-hdr' class='sapUiUx3ShellHeader' role='banner'>");
	sap.ui.ux3.ShellRenderer.renderHeader(rm, oControl);
	rm.write("</header>   <!-- end of sapUiUx3ShellHeader -->");



	// write page background
	rm.write("<div id='", oControl.getId(), "-bg' class='sapUiUx3ShellBg'></div>");
	rm.write("<img id='", oControl.getId(), "-bgImg' class='sapUiUx3ShellBgImg' src='" + sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif') + "'/>");


	// write workset items
	rm.write("<div id='", oControl.getId(), "-wBar' class='sapUiUx3ShellWorksetBar'>");
	var aItems = oControl.getWorksetItems();
	oControl._oWorksetBar.setAssociatedItems(aItems);
	if (!oControl._oWorksetBar.isSelectedItemValid() && (aItems.length > 0)) {
		oControl.setAssociation("selectedWorksetItem", aItems[0], true); // set the first item as being selected if there is no item selected
		oControl._oWorksetBar.setSelectedItem(aItems[0]); // set the first item as being selected if there is no item selected
	}
	rm.renderControl(oControl._oWorksetBar);
	rm.write("</div>   <!--  end of worksetBar -->");



	// write tool palette area
	rm.write("<section id='" + oControl.getId() + "-tp' class='sapUiUx3ShellToolPaletteArea' role='complementary'>");
	sap.ui.ux3.ShellRenderer.renderToolPalette(rm, oControl);
	rm.write("</section> <!-- end of toolPaletteArea -->");



	// write page canvas and content
	rm.write("<div class='sapUiUx3ShellCanvas' id='" + sId + "-canvas'>");

	var oSelectedWsi = sap.ui.getCore().byId(oControl.getSelectedWorksetItem()); // by now it is guaranteed that the association is properly initialized
	if (oSelectedWsi) {

		// if parent is also a NavigationItem, the selected one is a second-level item and we need to go up one level
		var parent = oSelectedWsi.getParent();
		if (parent && parent instanceof sap.ui.ux3.NavigationItem) {
			oSelectedWsi = parent;
		}

		var aSubItems = oSelectedWsi.getSubItems();
		oControl._oFacetBar.setAssociatedItems(aSubItems);
		if (!oControl._oFacetBar.isSelectedItemValid() && (aSubItems.length > 0)) {
			oControl._oFacetBar.setSelectedItem(aSubItems[0]); // set the first item as being selected if there is no item selected
		}

		rm.renderControl(oControl._oFacetBar);
	}

	rm.write("<article class='sapUiUx3ShellContent' id='" + sId + "-content' role='main'>");
	var aContent = oControl.getContent();
	for (var i = 0; i < aContent.length; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write("</article></div>");
	
	
	
	// write pane bar
	rm.write("<aside id='" + sId + "-paneBar' class='sapUiUx3ShellPaneBar' role='complementary'>");
	rm.write("<section id='" + sId + "-paneContent' style='width:" + oControl.getPaneWidth() + "px;' class='sapUiUx3ShellPaneBarContent' role='tabpanel'>");
	var aPaneContent = oControl.getPaneContent();
	for (var i = 0; i < aPaneContent.length; i++) {
		rm.renderControl(aPaneContent[i]);
	}
	rm.write("</section>");

	rm.write("<div class='sapUiUx3ShellPaneBarRight'><ul class='sapUiUx3ShellPaneEntries' role='tablist'>");
	sap.ui.ux3.ShellRenderer.renderPaneBarItems(rm, oControl);
	rm.write("</ul></div></aside>   <!-- end of paneBar -->");
	
	
	
	// write the purely visual background
	rm.write("<div class='sapUiUx3ShellCanvasBackground sapUiUx3ShellCanvasBackgroundClosed' id='" + sId + "-canvasBackground'>");
	rm.write("<div class='sapUiUx3ShellCanvasBackgroundRight'></div>");
	rm.write("</div>");


	// render closing tag for root element
	rm.write("</div>");
};



sap.ui.ux3.ShellRenderer.renderHeader = function(rm, oControl) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");

	var appIcon = oControl.getAppIcon();
	rm.write("<hr id='" + oControl.getId() + "-hdrLine'/><img id='" + oControl.getId() + "-logoImg' src='");
	if (appIcon) {
		rm.writeEscaped(oControl.getAppIcon());
	} else {
		rm.write(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
	}
	rm.write("'");
	
	var iconTooltip = oControl.getAppIconTooltip() || rb.getText("SHELL_LOGO");
	rm.writeAttribute("alt", iconTooltip);
	rm.writeAttribute("title", iconTooltip);

	rm.write("><h1>");

	rm.writeEscaped(oControl.getAppTitle());

	rm.write("</h1><span class='sapUiUx3ShellHeaderTitleRight'>");

	// header-right-items
	var aHeaderItems = oControl.getHeaderItems();
	for (var i = 0; i < aHeaderItems.length; i++) {
		// ensure correct styling of the menu if there is a MenuButton
		if (aHeaderItems[i] instanceof sap.ui.commons.MenuButton) { // TODO: improve this
			if (aHeaderItems[i].getMenu()) {
				aHeaderItems[i].getMenu().addStyleClass("sapUiMnuTop", true); // multiple calls are ignored, so there is no check whether the class is already there
			}
		}

		// render the header item
		rm.renderControl(aHeaderItems[i]);

		if ((i < (aHeaderItems.length-1)) || (oControl.getShowLogoutButton())) {
			rm.write("<span class='sapUiUx3ShellHeaderSep'></span>");
		}
	}

	// logout button
	if (oControl.getShowLogoutButton()) {
		rm.write("<a id='" + oControl.getId() + "-logout' title='" + rb.getText("SHELL_LOGOUT") + "' tabindex='0' role='button' class='sapUiUx3ShellHeaderButton sapUiUx3ShellHeader-logout'></a>");
	}
	rm.write("</span>");
};




/**
 * Renders the inner HTML of the left-side tool palette.
 *
 * @param oControl the Shell control
 * @private
 */
sap.ui.ux3.ShellRenderer.renderToolPalette = function(rm, oControl) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
	var sId = oControl.getId();

	// write standard tools
	var sAccDescr = rb.getText("SHELL_TOOLPANE_GENERIC"),
		bStandardToolPresent = false,
		bFirstTool = true,
		sStandardToolsHtml = "";
	if (oControl.getShowSearchTool()) {
		bStandardToolPresent = true;
		sStandardToolsHtml += "<a id='" + sId + sap.ui.ux3.Shell.TOOL_PREFIX + sId + "-searchTool' title='" + rb.getText("SHELL_SEARCH") + "' class='sapUiUx3ShellTool sapUiUx3ShellTool-search' tabindex='0' role='button' aria-pressed='false'></a>";
		if (bFirstTool) {
			bFirstTool = false;
		} else {
			sAccDescr += ",";
		}
		sAccDescr += " " + rb.getText("SHELL_SEARCH");
	}
	if (oControl.getShowInspectorTool()) {
		bStandardToolPresent = true;
		sStandardToolsHtml += "<a id='" + sId + sap.ui.ux3.Shell.TOOL_PREFIX + sId + "-inspectorTool' title='" + rb.getText("SHELL_TI") + "' class='sapUiUx3ShellTool sapUiUx3ShellTool-inspector' tabindex='0' role='button' aria-pressed='false'></a>";
		if (bFirstTool) {
			bFirstTool = false;
		} else {
			sAccDescr += ",";
		}
		sAccDescr += " " + rb.getText("SHELL_TI");
	}
	if (oControl.getShowFeederTool()) {
		bStandardToolPresent = true;
		sStandardToolsHtml += "<a id='" + sId + sap.ui.ux3.Shell.TOOL_PREFIX + sId + "-feederTool' title='" + rb.getText("SHELL_FEEDER") + "' class='sapUiUx3ShellTool sapUiUx3ShellTool-feeder' tabindex='0' role='button' aria-pressed='false'></a>";
		if (bFirstTool) {
			bFirstTool = false;
		} else {
			sAccDescr += ",";
		}
		sAccDescr += " " + rb.getText("SHELL_FEEDER");
	}
	
	if (bStandardToolPresent) {
		rm.write("<div role='toolbar'aria-describedby='" + sId + "-genericToolsDescr'>");
		rm.write("<span id='" + sId + "-genericToolsDescr' style='display:none;'>" + sAccDescr + "</span>");
		rm.write(sStandardToolsHtml + "</div>");
	}
	
	var aToolItems = oControl.getToolPopups();

	// write separator between standard tools and app tools, if required
	if (bStandardToolPresent && (aToolItems.length > 0)) {
		rm.write("<hr class='sapUiUx3ShellToolSep'></hr>");
	}

	// write app tools
	if (aToolItems.length > 0) {
		rm.write("<div role='toolbar' aria-describedby='" + sId + "-appToolsDescr'>");
		rm.write("<span id='" + sId + "-appToolsDescr' style='display:none;'>" + rb.getText("SHELL_TOOLPANE_APP") + "</span>");
		for (var i = 0; i < aToolItems.length; i++) {
			var oToolItem = aToolItems[i];
			if (oToolItem instanceof sap.ui.core.SeparatorItem) { // TODO: not possible
				rm.write("<hr class='sapUiUx3ShellToolSep'></hr>");
			} else {
				// regular item
				rm.write("<a id='" + sId + "-tool-" + oToolItem.getId() + "' class='sapUiUx3ShellTool'");
				var sTooltip = oToolItem.getTooltip_AsString();
				if (!sTooltip) {
					sTooltip = oToolItem.getTitle();
				}
				if (sTooltip) {
					rm.write(" title='");
					rm.writeEscaped(sTooltip);
					rm.write("' ");
				}
				rm.write(" tabindex='0' role='button' aria-pressed='false'><img src='");
				rm.writeEscaped(oToolItem.getIcon());
				rm.write("' alt='' role='presentation'/></a>");
			}
		}
		rm.write("</div>");
	}
};

sap.ui.ux3.ShellRenderer.renderPaneBarItems = function(rm, oControl) {
	var sId = oControl.getId();
	var aPaneBarItems = oControl.getPaneBarItems();
	for (var i = 0; i < aPaneBarItems.length; i++) {
		var itemId = aPaneBarItems[i].getId();
		rm.write("<li id='" + oControl.getId() + "-pb_" + itemId + "' role='tab' aria-controls='" + sId + "-paneContent' tabindex='-1' class='sapUiUx3ShellPaneEntry");
		if (oControl._sOpenPaneId === itemId) { // mark pane item if opened
			rm.write(" sapUiUx3ShellPaneEntrySelected");
		}
		rm.write("'>");
		rm.writeEscaped(aPaneBarItems[i].getText().toUpperCase());
		rm.write("</li>");
	}
};

}; // end of sap.ui.ux3.ShellRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ExactAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.ExactArea
jQuery.sap.declare("sap.ui.ux3.ExactAreaRenderer");

/**
 * @class ExactArea renderer.
 * @static
 */
sap.ui.ux3.ExactAreaRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.ux3.ExactAreaRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;

	if(!oControl.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiUx3ExactArea");
	rm.writeClasses();
	rm.write(">");
	if(oControl.getToolbarVisible()){
		rm.write("<div id=\""+oControl.getId()+"-tb\" class=\"sapUiTb sapUiTbDesignFlat sapUiTbStandalone\" role=\"toolbar\">");
		rm.write("<div class=\"sapUiTbCont\"><div class=\"sapUiTbInner\">");
		var aToolbarItems = oControl.getToolbarItems();
		for(var idx=0; idx<aToolbarItems.length; idx++){
			var oToolbarItem = aToolbarItems[idx];
			if (oToolbarItem instanceof sap.ui.commons.ToolbarSeparator) {
				sap.ui.commons.ToolbarRenderer.renderSeparator(rm, oToolbarItem);
			} else if (oToolbarItem instanceof sap.ui.ux3.ExactAreaToolbarTitle) {
				rm.write("<div class=\"sapUiUx3ExactAreaTbTitle\">"+jQuery.sap.escapeHTML(oToolbarItem.getText())+"</div>");
			} else {
				rm.renderControl(oToolbarItem);
			}
		}
		rm.write("</div></div></div>");
	}
	rm.write("<div id=\""+oControl.getId()+"-ct\" class=\"sapUiUx3ExactAreaCont\">");
	var aChildren = oControl.getContent();
	for(var idx=0; idx<aChildren.length; idx++){
		rm.renderControl(aChildren[idx]);
	}
	rm.write("</div>");
	rm.write("</div>");
};
}; // end of sap.ui.ux3.ExactAreaRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.Feed') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.Feed.
jQuery.sap.declare("sap.ui.ux3.Feed");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Feed.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>feederThumbnailSrc : string</li>
 * <li>feederSender : string</li>
 * <li>live : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>filterItems : sap.ui.core.ListItem</li>
 * <li>chunks : sap.ui.ux3.FeedChunk</li>
 * <li>toolsMenuItems : sap.ui.commons.MenuItem</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>filterChange : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>search : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>chunkAdded : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toolsItemSelected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>toggleLive : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * This a a full feed page including feeder and updates.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.Feed = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.Feed.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.Feed. 
 * Resulting metadata can be obtained via sap.ui.ux3.Feed.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.Feed", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getFeederThumbnailSrc", "setFeederThumbnailSrc", "getFeederSender", "setFeederSender", "getLive", "setLive", 
    // aggregations
    "getFilterItems", "insertFilterItem", "addFilterItem", "removeFilterItem", "removeAllFilterItems", "indexOfFilterItem", "destroyFilterItems", "getChunks", "insertChunk", "addChunk", "removeChunk", "removeAllChunks", "indexOfChunk", "destroyChunks", "getToolsMenuItems", "insertToolsMenuItem", "addToolsMenuItem", "removeToolsMenuItem", "removeAllToolsMenuItems", "indexOfToolsMenuItem", "destroyToolsMenuItems", 
    // associations
    
    // events
    "attachFilterChange", "detachFilterChange", "attachSearch", "detachSearch", "attachChunkAdded", "detachChunkAdded", "attachToolsItemSelected", "detachToolsItemSelected", "attachToggleLive", "detachToggleLive"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "feederThumbnailSrc" : {name : "feederThumbnailSrc", type : "string", group : "Data", defaultValue : null},
    "feederSender" : {name : "feederSender", type : "string", group : "Data", defaultValue : null},
    "live" : {name : "live", type : "boolean", group : "Behavior", defaultValue : true}
  },
  
  aggregations : {
    "filterItems" : {name : "filterItems", type : "sap.ui.core.ListItem", multiple : true, singularName : "filterItem"}, 
    "chunks" : {name : "chunks", type : "sap.ui.ux3.FeedChunk", multiple : true, singularName : "chunk"}, 
    "toolsMenuItems" : {name : "toolsMenuItems", type : "sap.ui.commons.MenuItem", multiple : true, singularName : "toolsMenuItem"}
  },
  associations : {},
  events : {
    "filterChange" : "filterChange", 
    "search" : "search", 
    "chunkAdded" : "chunkAdded", 
    "toolsItemSelected" : "toolsItemSelected", 
    "toggleLive" : "toggleLive"
  }

});	

sap.ui.ux3.Feed.M_EVENTS = {'filterChange':'filterChange','search':'search','chunkAdded':'chunkAdded','toolsItemSelected':'toolsItemSelected','toggleLive':'toggleLive'};


/**
 * Getter for property <code>feederThumbnailSrc</code>.
 * URL to the tumbnail image for the feeder.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederThumbnailSrc</code>
 * @public
 * 
 */
sap.ui.ux3.Feed.prototype.getFeederThumbnailSrc = function() {
	return this.getProperty("feederThumbnailSrc");
};

/**
 * Setter for property <code>feederThumbnailSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederThumbnailSrc  new value for property <code>feederThumbnailSrc</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.setFeederThumbnailSrc = function(sFeederThumbnailSrc) {
	this.setProperty("feederThumbnailSrc", sFeederThumbnailSrc);
	return this;
};


/**
 * Getter for property <code>feederSender</code>.
 * Sender for the Feeder
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feederSender</code>
 * @public
 * 
 */
sap.ui.ux3.Feed.prototype.getFeederSender = function() {
	return this.getProperty("feederSender");
};

/**
 * Setter for property <code>feederSender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeederSender  new value for property <code>feederSender</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.setFeederSender = function(sFeederSender) {
	this.setProperty("feederSender", sFeederSender);
	return this;
};


/**
 * Getter for property <code>live</code>.
 * Indicator if feed is in live mode or not
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>live</code>
 * @public
 * 
 */
sap.ui.ux3.Feed.prototype.getLive = function() {
	return this.getProperty("live");
};

/**
 * Setter for property <code>live</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLive  new value for property <code>live</code>
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.setLive = function(bLive) {
	this.setProperty("live", bLive);
	return this;
};

	
/**
 * Getter for aggregation <code>filterItems</code>.<br/>
 * Items of the filter.
 * 
 * @return {sap.ui.core.ListItem[]}
 * @public
 */
sap.ui.ux3.Feed.prototype.getFilterItems = function() {
	return this.getAggregation("filterItems", []);
};


/**
 * Inserts a filterItem into the aggregation named <code>filterItems</code>.
 *
 * @param {sap.ui.core.ListItem}
 *          oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filterItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filterItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.insertFilterItem = function(oFilterItem, iIndex) {
	this.insertAggregation("filterItems", oFilterItem, iIndex);
	return this;
};

/**
 * Adds some filterItem <code>oFilterItem</code> 
 * to the aggregation named <code>filterItems</code>.
 *
 * @param {sap.ui.core.ListItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Feed.prototype.addFilterItem = function(oFilterItem) {
	this.addAggregation("filterItems", oFilterItem);
	return this;
};

/**
 * Removes an filterItem from the aggregation named <code>filterItems</code>.
 *
 * @param {int | string | sap.ui.core.ListItem} vFilterItem the filterItem to remove or its index or id
 * @return {sap.ui.core.ListItem} the removed filterItem or null
 * @public
 */
sap.ui.ux3.Feed.prototype.removeFilterItem = function(vFilterItem) {
	return this.removeAggregation("filterItems", vFilterItem);
};

/**
 * Removes all the controls in the aggregation named <code>filterItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.ListItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Feed.prototype.removeAllFilterItems = function() {
	return this.removeAllAggregation("filterItems");
};

/**
 * Checks for the provided <code>sap.ui.core.ListItem</code> in the aggregation named <code>filterItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.ListItem}
 *            oFilterItem the filterItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Feed.prototype.indexOfFilterItem = function(oFilterItem) {
	return this.indexOfAggregation("filterItems", oFilterItem);
};
	

/**
 * Destroys all the filterItems in the aggregation 
 * named <code>filterItems</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.destroyFilterItems = function() {
	this.destroyAggregation("filterItems");
	return this;
};

	
/**
 * Getter for aggregation <code>chunks</code>.<br/>
 * Chunks
 * 
 * @return {sap.ui.ux3.FeedChunk[]}
 * @public
 */
sap.ui.ux3.Feed.prototype.getChunks = function() {
	return this.getAggregation("chunks", []);
};


/**
 * Inserts a chunk into the aggregation named <code>chunks</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *          oChunk the chunk to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the chunk should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the chunk is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the chunk is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.insertChunk = function(oChunk, iIndex) {
	this.insertAggregation("chunks", oChunk, iIndex);
	return this;
};

/**
 * Adds some chunk <code>oChunk</code> 
 * to the aggregation named <code>chunks</code>.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oChunk the chunk to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Feed.prototype.addChunk = function(oChunk) {
	this.addAggregation("chunks", oChunk);
	return this;
};

/**
 * Removes an chunk from the aggregation named <code>chunks</code>.
 *
 * @param {int | string | sap.ui.ux3.FeedChunk} vChunk the chunk to remove or its index or id
 * @return {sap.ui.ux3.FeedChunk} the removed chunk or null
 * @public
 */
sap.ui.ux3.Feed.prototype.removeChunk = function(vChunk) {
	return this.removeAggregation("chunks", vChunk);
};

/**
 * Removes all the controls in the aggregation named <code>chunks</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.ux3.FeedChunk[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Feed.prototype.removeAllChunks = function() {
	return this.removeAllAggregation("chunks");
};

/**
 * Checks for the provided <code>sap.ui.ux3.FeedChunk</code> in the aggregation named <code>chunks</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.ux3.FeedChunk}
 *            oChunk the chunk whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Feed.prototype.indexOfChunk = function(oChunk) {
	return this.indexOfAggregation("chunks", oChunk);
};
	

/**
 * Destroys all the chunks in the aggregation 
 * named <code>chunks</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.destroyChunks = function() {
	this.destroyAggregation("chunks");
	return this;
};

	
/**
 * Getter for aggregation <code>toolsMenuItems</code>.<br/>
 * MenuItems to open when click on the tool button
 * 
 * @return {sap.ui.commons.MenuItem[]}
 * @public
 */
sap.ui.ux3.Feed.prototype.getToolsMenuItems = function() {
	return this.getAggregation("toolsMenuItems", []);
};


/**
 * Inserts a toolsMenuItem into the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *          oToolsMenuItem the toolsMenuItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the toolsMenuItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the toolsMenuItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the toolsMenuItem is inserted at 
 *             the last position        
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.insertToolsMenuItem = function(oToolsMenuItem, iIndex) {
	this.insertAggregation("toolsMenuItems", oToolsMenuItem, iIndex);
	return this;
};

/**
 * Adds some toolsMenuItem <code>oToolsMenuItem</code> 
 * to the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oToolsMenuItem the toolsMenuItem to add; if empty, nothing is inserted
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.ux3.Feed.prototype.addToolsMenuItem = function(oToolsMenuItem) {
	this.addAggregation("toolsMenuItems", oToolsMenuItem);
	return this;
};

/**
 * Removes an toolsMenuItem from the aggregation named <code>toolsMenuItems</code>.
 *
 * @param {int | string | sap.ui.commons.MenuItem} vToolsMenuItem the toolsMenuItem to remove or its index or id
 * @return {sap.ui.commons.MenuItem} the removed toolsMenuItem or null
 * @public
 */
sap.ui.ux3.Feed.prototype.removeToolsMenuItem = function(vToolsMenuItem) {
	return this.removeAggregation("toolsMenuItems", vToolsMenuItem);
};

/**
 * Removes all the controls in the aggregation named <code>toolsMenuItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.ux3.Feed.prototype.removeAllToolsMenuItems = function() {
	return this.removeAllAggregation("toolsMenuItems");
};

/**
 * Checks for the provided <code>sap.ui.commons.MenuItem</code> in the aggregation named <code>toolsMenuItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.MenuItem}
 *            oToolsMenuItem the toolsMenuItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.ux3.Feed.prototype.indexOfToolsMenuItem = function(oToolsMenuItem) {
	return this.indexOfAggregation("toolsMenuItems", oToolsMenuItem);
};
	

/**
 * Destroys all the toolsMenuItems in the aggregation 
 * named <code>toolsMenuItems</code>.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.destroyToolsMenuItems = function() {
	this.destroyAggregation("toolsMenuItems");
	return this;
};


/**
 * This event is fired if the filter is changed. 
 *
 * @name sap.ui.ux3.Feed#filterChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the filter.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'filterChange' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 * This event is fired if the filter is changed. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.attachFilterChange = function(oData, fnFunction, oListener) {
	this.attachEvent("filterChange", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'filterChange' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.detachFilterChange = function(fnFunction, oListener) {
	this.detachEvent("filterChange", fnFunction, oListener);
	return this;	
};

/**
 * Fire event filterChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the filter.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feed.prototype.fireFilterChange = function(mArguments) {
	this.fireEvent("filterChange", mArguments);
	return this;
};


/**
 * Search function on SearchField triggered. 
 *
 * @name sap.ui.ux3.Feed#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query search query
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 * Search function on SearchField triggered. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.attachSearch = function(oData, fnFunction, oListener) {
	this.attachEvent("search", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.detachSearch = function(fnFunction, oListener) {
	this.detachEvent("search", fnFunction, oListener);
	return this;	
};

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> search query</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feed.prototype.fireSearch = function(mArguments) {
	this.fireEvent("search", mArguments);
	return this;
};


/**
 * Raised when a new chunk is added. 
 *
 * @name sap.ui.ux3.Feed#chunkAdded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.ux3.FeedChunk} oControlEvent.getParameters.chunk new chunk
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'chunkAdded' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 * Raised when a new chunk is added. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.attachChunkAdded = function(oData, fnFunction, oListener) {
	this.attachEvent("chunkAdded", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'chunkAdded' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.detachChunkAdded = function(fnFunction, oListener) {
	this.detachEvent("chunkAdded", fnFunction, oListener);
	return this;	
};

/**
 * Fire event chunkAdded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'chunk' of type <code>sap.ui.ux3.FeedChunk</code> new chunk</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feed.prototype.fireChunkAdded = function(mArguments) {
	this.fireEvent("chunkAdded", mArguments);
	return this;
};


/**
 * Fired when an item from the tools MenuButton was selected. 
 *
 * @name sap.ui.ux3.Feed#toolsItemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toolsItemSelected' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 * Fired when an item from the tools MenuButton was selected. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.attachToolsItemSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("toolsItemSelected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toolsItemSelected' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.detachToolsItemSelected = function(fnFunction, oListener) {
	this.detachEvent("toolsItemSelected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toolsItemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The id of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feed.prototype.fireToolsItemSelected = function(mArguments) {
	this.fireEvent("toolsItemSelected", mArguments);
	return this;
};


/**
 * Event is fired if the live mode changed 
 *
 * @name sap.ui.ux3.Feed#toggleLive
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.live current live indicator
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'toggleLive' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 * Event is fired if the live mode changed 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.attachToggleLive = function(oData, fnFunction, oListener) {
	this.attachEvent("toggleLive", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'toggleLive' event of this <code>sap.ui.ux3.Feed</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.Feed.prototype.detachToggleLive = function(fnFunction, oListener) {
	this.detachEvent("toggleLive", fnFunction, oListener);
	return this;	
};

/**
 * Fire event toggleLive to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'live' of type <code>boolean</code> current live indicator</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.Feed} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.Feed.prototype.fireToggleLive = function(mArguments) {
	this.fireEvent("toggleLive", mArguments);
	return this;
};


// Start of sap/ui/ux3/Feed.js
///**
// * This file defines behavior for the control, 
// */

sap.ui.ux3.Feed.prototype.init = function(){
	this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.ux3");
};

/*
 * as onBeforeRendering only runs while re-rendering this module is called in renderer
 */
sap.ui.ux3.Feed.prototype.initChildControls = function(){
	// create feeder if needed
	if (!this.oFeeder) {
		this.oFeeder = new sap.ui.ux3.Feeder( this.getId()+'-Feeder', {
			type: sap.ui.ux3.FeederType.Medium,
			thumbnailSrc: this.getFeederThumbnailSrc()
		}).setParent(this);
		this.oFeeder.attachEvent('submit', this.handleFeederSubmit, this); // attach event this way to have the right this-reference in handler
	}

	// create live button if needed
	if (!this.oLiveButton) {
		this.oLiveButton = new sap.ui.commons.Button( this.getId()+'-liveButton', {
			text: this.rb.getText('FEED_LIVE'),
			lite: true
		}).setParent(this);
		this.oLiveButton.attachEvent('press', this.handleLiveButtonPress, this); // attach event this way to have the right this-reference in handler
	}

	// create tools menu button if needed
	if (!this.oToolsButton && this.getToolsMenuItems().length > 0) {
		this.oToolsButton = new sap.ui.commons.MenuButton( this.getId()+'-toolsButton', {
			tooltip: this.rb.getText('FEED_TOOLS'),
			lite: true,
			menu: new sap.ui.commons.Menu(this.getId()+'-toolsMenu',{
					items: this.getToolsMenuItems()
						})	
		}).setParent(this);
		this.oToolsButton.attachEvent('itemSelected', this.handleLtoolsButtonSelected, this); // attach event this way to have the right this-reference in handler
	}

	// create filter if needed
	if (!this.oFilter) {
		this.oFilter = new sap.ui.commons.DropdownBox( this.getId()+'-filter', {
			items: this.getFilterItems()
		}).setParent(this);
		this.oFilter.attachEvent('change', this.handleFilterChange, this); // attach event this way to have the right this-reference in handler
	}

	// create search field if needed
	if (!this.oSearchField) {
		this.oSearchField = new sap.ui.commons.SearchField( this.getId()+'-search', {
			enableListSuggest: false
		}).setParent(this);
		this.oSearchField.attachEvent('search', this.handleSearchFieldSearch, this); // attach event this way to have the right this-reference in handler
	}

};

sap.ui.ux3.Feed.prototype.exit = function(){
   
	if (this.oFeeder) {
		this.oFeeder.destroy();
	}
	if (this.oLiveButton) {
		this.oLiveButton.destroy();
	}
	if (this.oToolsButton) {
		this.oToolsButton.destroy();
	}
	if (this.oFilter) {
		this.oFilter.destroy();
	}
	if (this.oSearchField) {
		this.oSearchField.destroy();
	}
	this.rb = undefined;
	
};

/**
 * Handler for feeder submit event
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleFeederSubmit = function(oEvent){

	var oDate = new Date();
//	var sDate = String(oDate.getFullYear()) + String(oDate.getMonth()) + String(oDate.getDate()) + String(oDate.getHours()) + String(oDate.getMinutes()) + String(oDate.getSeconds());
	var sDate = String(oDate);

	var oNewChunk = new sap.ui.ux3.FeedChunk(this.getId()+'-new-'+this.getChunks().length, {
		text: oEvent.getParameter('text'),
		commentChunk: false,
	    deletionAllowed: true, 
		timestamp: sDate,
		sender: this.getFeederSender(),
		thumbnailSrc: this.getFeederThumbnailSrc()
	}); 
	
	this.insertChunk(oNewChunk, 0);
	this.fireChunkAdded({chunk: oNewChunk});

};

/**
 * Handler for live-button press
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleLiveButtonPress = function(oEvent){

	this.setLive(!this.getLive());
	this.fireToggleLive({live: this.getLive()});

};

/**
 * Handler for tools menu button item selection
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleLtoolsButtonSelected = function(oEvent){

	// just forward event
	this.fireToolsItemSelected(oEvent.mParameters);

};

/**
 * Handler for filter change
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleFilterChange = function(oEvent){

	// just forward event
	this.fireFilterChange(oEvent.mParameters);
	
};

/**
 * Handler for lsearch field
 *
 * @private
 */
sap.ui.ux3.Feed.prototype.handleSearchFieldSearch = function(oEvent){

	// just forward event
	this.fireSearch(oEvent.mParameters);

};


}; // end of sap.ui.ux3.Feed
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetSimpleView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSetSimpleView.
jQuery.sap.declare("sap.ui.ux3.DataSetSimpleView");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new DataSetSimpleView.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>floating : boolean</li>
 * <li>name : string</li>
 * <li>icon : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>template : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Add your documentation for the new DataSetSimpleView
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.DataSetSimpleView = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.DataSetSimpleView.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.ux3.DataSetSimpleView. 
 * Resulting metadata can be obtained via sap.ui.ux3.DataSetSimpleView.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.DataSetSimpleView", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  interfaces : ["sap.ui.ux3.DataSetView"],
  publicMethods : [
    // properties 
    "getFloating", "setFloating", "getName", "setName", "getIcon", "setIcon", 
    // aggregations
    "getTemplate", "insertTemplate", "addTemplate", "removeTemplate", "removeAllTemplate", "indexOfTemplate", "destroyTemplate"
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "floating" : {name : "floating", type : "boolean", group : "Misc", defaultValue : true},
    "name" : {name : "name", type : "string", group : "Misc", defaultValue : "Name of this View"},
    "icon" : {name : "icon", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {
    "template" : {name : "template", type : "sap.ui.core.Control", multiple : false}
  },
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>floating</code>.
 * When true the DatSet items are floating containers. When set to false The Items are rendered in a 1 column Layout.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>floating</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetSimpleView.prototype.getFloating = function() {
	return this.getProperty("floating");
};

/**
 * Setter for property <code>floating</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bFloating  new value for property <code>floating</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.setFloating = function(bFloating) {
	this.setProperty("floating", bFloating);
	return this;
};


/**
 * Getter for property <code>name</code>.
 * Name of the View
 *
 * Default value is <code>"Name of this View"</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetSimpleView.prototype.getName = function() {
	return this.getProperty("name");
};

/**
 * Setter for property <code>name</code>.
 *
 * Default value is <code>"Name of this View"</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.setName = function(sName) {
	this.setProperty("name", sName);
	return this;
};


/**
 * Getter for property <code>icon</code>.
 * Icon source for this view
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetSimpleView.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};

	
/**
 * Getter for aggregation <code>template</code>.<br/>
 * template
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.getTemplate = function() {
	return this.getAggregation("template", null);
};


/**
 * Setter for the aggregated <code>template</code>.
 * @param oTemplate {sap.ui.core.Control}
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.setTemplate = function(oTemplate) {
	this.setAggregation("template", oTemplate);
	return this;
};
	

/**
 * Destroys  in the aggregation 
 * named <code>template</code>.
 * @return {sap.ui.ux3.DataSetSimpleView} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetSimpleView.prototype.destroyTemplate = function() {
	this.destroyAggregation("template");
	return this;
};


// Start of sap/ui/ux3/DataSetSimpleView.js
///**
// * This file defines behavior for the control, 
// */

/**
 * Initialization of DataSetSimpleView
 *  	
 * @private
*/
sap.ui.ux3.DataSetSimpleView.prototype.init = function(){
   this._oDataSet = this.getParent();
};

/**
 * Eventhandler for the selection of an Item
 *  	
 * @param {event} oEvent SelectionChanged event
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.handleSelection = function(oEvent) {
	var oldIndex = oEvent.getParameters().oldLeadSelectedIndex, 
		newIndex = oEvent.getParameters().newLeadSelectedIndex;
	if (oldIndex != -1) {
		jQuery.sap.byId(this.getParent().getSelectedItemId(oldIndex)).removeClass("sapUiUx3DSSVSelected");
	}
	if (newIndex != -1){
		jQuery.sap.byId(this.getParent().getSelectedItemId(newIndex)).addClass("sapUiUx3DSSVSelected");
	}
	
}

/**
 * Check if Item <code>oItem</code> is selected
 *  	
 * @param {DataSetItem} oItem DataSetItem instance
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.isItemSelected = function(oItem) {
	return this.getParent().isSelectedIndex(oItem._index);
}

/*** Intervace methods ***/ 

/**
 * View Initialization: Called when selecting the view
 *  	
 * @param {array} aItems Array of DataSetItems added to the parent DataSet
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.initView = function(aItems) {
	this.getParent().attachSelectionChanged(this.handleSelection, this);
	this.items = aItems;
	for (var i = 0; i < aItems.length; i++) {
    	var template = this.getTemplate().clone();
    	aItems[i].setTemplate(template);
    }
}

/**
 * View finalization: Called when leaving the view
 *  	
 * @protected
 */
sap.ui.ux3.DataSetSimpleView.prototype.exitView = function() {
	this.getParent().detachSelectionChanged(this.handleSelection, this);
}
}; // end of sap.ui.ux3.DataSetSimpleView
if ( !jQuery.sap.isDeclared('sap.ui.ux3.OverlayContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.OverlayContainer
jQuery.sap.declare("sap.ui.ux3.OverlayContainerRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

/**
 * @class OverlayContainer renderer.
 * @static
 */
sap.ui.ux3.OverlayContainerRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.OverlayRenderer)

/**
 * Renders the Overlay content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.OverlayContainerRenderer.renderContent = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.write("<div role='Main' class='sapUiUx3OCContent'>");
	var content = oControl.getContent();
	for (var i = 0; i < content.length; i++) {
		var control = content[i];
		rm.renderControl(control);
	}
	rm.write("</div>");
}
/**
 * Add root class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.OverlayContainerRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3OC");
}
/**
 * Add class to Overlay
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.OverlayContainerRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3OCOverlay");
}
}; // end of sap.ui.ux3.OverlayContainerRenderer
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ShellColorPicker') ) {
/**
 * EXPERIMENTAL!  DO NOT USE!
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the class sap.ui.ux3.ShellColorPicker
jQuery.sap.declare("sap.ui.ux3.ShellColorPicker");
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained




sap.ui.ux3.ShellColorPicker = function(id) {
	sap.ui.base.EventProvider.apply(this);
	this.id = id;
};

sap.ui.ux3.ShellColorPicker.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);


/*  EVENT HANDLING */

sap.ui.ux3.ShellColorPicker.M_EVENTS = {liveChange: "liveChange"};

sap.ui.ux3.ShellColorPicker.prototype.attachLiveChange = function(fFunction, oListener) {
	this.attachEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, fFunction, oListener);
};

sap.ui.ux3.ShellColorPicker.prototype.detachLiveChange = function(fFunction, oListener) {
	this.detachEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, fFunction, oListener);
};

sap.ui.ux3.ShellColorPicker.prototype.fireLiveChange = function(oColor) {
	var mParameters = {cssColor:sap.ui.ux3.ShellColorPicker.hslToCss(oColor)};
	this.fireEvent(sap.ui.ux3.ShellColorPicker.M_EVENTS.liveChange, mParameters);
};



/* API METHODS */

/**
 * @public
 */
sap.ui.ux3.ShellColorPicker.prototype.isOpen = function() {
	return (this.oPopup && this.oPopup.isOpen());
};


/**
 *
 * @param oColor a hsl-based color object, as returned by parseCssRgbString()
 *
 * @public
 */
sap.ui.ux3.ShellColorPicker.prototype.open = function(oColor, iDuration, my, at, of, offset, collision) {
	if (this.oPopup && this.oPopup.isOpen()) {
		return;
	}

	this.oSlider = new sap.ui.commons.Slider({width: "225px",liveChange:[this.handleSlider, this]});
	this.oOkBtn = new sap.ui.commons.Button({text:"OK",press:[this.handleOk, this]});
	this.oCancelBtn = new sap.ui.commons.Button({text:"Cancel",press:[this.handleCancel, this]});

	this.oInitialColor = oColor;
	this.oCurrentColor = jQuery.extend({}, this.oInitialColor);

	this.oSlider.setValue(this.oCurrentColor.l);
	var rm = sap.ui.getCore().createRenderManager();
	var dummyDiv = document.createElement("div");
	var statArea = sap.ui.getCore().getStaticAreaRef();
	statArea.appendChild(dummyDiv);
	this.renderHtml(rm);
	rm.flush(dummyDiv);
	rm.destroy;
	this.oPopup = new sap.ui.core.Popup(dummyDiv.firstChild, false, true, true).attachClosed(this.handleClose, this);
	this.oPopup.setAutoCloseAreas([dummyDiv.firstChild]);
	this.oPopup.open(iDuration, my, at, of, offset, collision);
	statArea.removeChild(dummyDiv);
	dummyDiv = null;

	jQuery.sap.byId(this.id).bind("mousedown", jQuery.proxy(this.handleGeneralMouseDown, this));
	jQuery.sap.byId(this.id + "-img").bind("mousedown", jQuery.proxy(this.handleMouseDown, this));
	jQuery.sap.byId(this.id + "-marker").bind("mousedown", jQuery.proxy(this.handleMouseDown, this));
	this._imgOffset = jQuery.sap.byId(this.id + "-img").offset();

	this.adaptSliderBar(this.oCurrentColor);
	this.markColorOnImage(this.oCurrentColor);
	this.adaptPreview(this.oCurrentColor);
};


/**
 * Returns the oColor object (hsl-based) for the given CSS string that is built like this: "rgb(127,0,1)"
 * @param sRgbString
 */
sap.ui.ux3.ShellColorPicker.parseCssRgbString = function(sRgbString) {
	sRgbString = jQuery.trim(sRgbString.replace(/rgb\(/, "").replace(/\)/, ""));
	var aRgb = sRgbString.split(",");
	var oRgbColor = {r:parseInt(aRgb[0], 10), g:parseInt(aRgb[1], 10), b:parseInt(aRgb[2], 10)};
	return sap.ui.ux3.ShellColorPicker.rgbToHsl(oRgbColor);
};

/* INTERNALS */

sap.ui.ux3.ShellColorPicker.prototype.renderHtml = function(rm) {
	rm.write("<div id='" + this.id + "' class='sapUiUx3ShellColorPicker'>");
	rm.write("<img id='" + this.id + "-img' src='" + sap.ui.resource('sap.ui.ux3', 'img/colors-h.png') + "' />");
	rm.renderControl(this.oSlider);
	rm.write("<div id='" + this.id + "-grad' class='sapUiUx3ShellColorPickerGradient'></div>");
	rm.write("<div id='" + this.id + "-marker' class='sapUiUx3ShellColorPickerMarker'></div>");
	rm.write("<div id='" + this.id + "-preview' class='sapUiUx3ShellColorPickerPreview'></div>");
	rm.renderControl(this.oOkBtn);
	rm.renderControl(this.oCancelBtn);
	rm.write("</div>");
};// TODO: remove HTML on close

sap.ui.ux3.ShellColorPicker.prototype.markColorOnImage = function(oColor) {
	var x = oColor.h * 225;
	var y = (1-oColor.s) * 75;
	jQuery.sap.byId(this.id + "-marker").css("left", x + 10).css("top", y + 10);
};

sap.ui.ux3.ShellColorPicker.prototype.markColorOnSlider = function(oColor) {
	this.oSlider.setValue(oColor.l);
};

sap.ui.ux3.ShellColorPicker.prototype.adaptSliderBar = function(oColor) {
	var gradient = "";
	var oMediumColor = jQuery.extend({},oColor);
	oMediumColor.l = 50;
	var color = sap.ui.ux3.ShellColorPicker.hslToCss(oMediumColor);
	if (jQuery.browser.mozilla) {
		gradient = "-moz-linear-gradient(left, black, " + color + ", white)";
	} else if (jQuery.browser.webkit) {
		gradient = "-webkit-gradient(linear, left center, right center, from(#000), color-stop(0.5, " + color + "), to(#FFF))";
	}
	jQuery.sap.byId(this.id + "-grad").css("background-image", gradient);
};

sap.ui.ux3.ShellColorPicker.prototype.adaptPreview = function(oColor) {
	jQuery.sap.byId(this.id + "-preview").css("background-color", sap.ui.ux3.ShellColorPicker.hslToCss(oColor));
};



sap.ui.ux3.ShellColorPicker.prototype.handleSlider = function(e) {
	var l = e.getParameter("value");
	this.oCurrentColor.l = l;
	this.adaptPreview(this.oCurrentColor);
	this.fireLiveChange(this.oCurrentColor);
};

sap.ui.ux3.ShellColorPicker.prototype.handleGeneralMouseDown = function(e) {
	e.preventDefault(); // no autoclose!
};

sap.ui.ux3.ShellColorPicker.prototype.handleMouseDown = function(e) {
	this.handleMousePos(e);
	e.preventDefault(); // no drag&drop of the color image!
	jQuery(document)
		.bind("mousemove", jQuery.proxy(this.handleMousePos, this))
		.bind("mouseup", jQuery.proxy(this.handleMouseUp, this));
};

sap.ui.ux3.ShellColorPicker.prototype.handleMouseUp = function(e) {
	this.handleMousePos(e);
	jQuery(document)
		.unbind("mousemove", this.handleMousePos)
		.unbind("mouseup", this.handleMouseUp);
};

sap.ui.ux3.ShellColorPicker.prototype.handleMousePos = function(e) {
	var x = e.pageX - this._imgOffset.left;
	var y = e.pageY - this._imgOffset.top;
	x = Math.min(Math.max(x, 0), 225);
	y = Math.min(Math.max(y, 0), 75);
	var hue = x/225; // TODO: hardcoded!
	var sat = 1 - y/75; // TODO: hardcoded!
	this.oCurrentColor.h = hue;
	this.oCurrentColor.s = sat;
	this.adaptSliderBar(this.oCurrentColor);
	this.markColorOnImage(this.oCurrentColor);
	this.adaptPreview(this.oCurrentColor);
	this.fireLiveChange(this.oCurrentColor);
};

sap.ui.ux3.ShellColorPicker.prototype.handleOk = function() {
	this.fireLiveChange(this.oCurrentColor);
	this.oPopup.close();
};

sap.ui.ux3.ShellColorPicker.prototype.handleCancel = function() {
	this.fireLiveChange(this.oInitialColor);
	this.oPopup.close();
};


sap.ui.ux3.ShellColorPicker.prototype.handleClose = function() {
	// clean up event handlers, DOM, child controls and popup
	jQuery.sap.byId(this.id + "-img")
		.unbind("mousedown", this.handleMouseDown);
	jQuery.sap.byId(this.id + "-marker")
		.unbind("mousedown", this.handleMouseDown);
	jQuery(document)
		.unbind("mousemove", this.handleMousePos)
		.unbind("mouseup", this.handleMouseUp);
	jQuery.sap.byId(this.id)
		.unbind("mousedown", this.handleGeneralMouseDown);

	this.oSlider.destroy();
	this.oSlider = null;
	this.oOkBtn.destroy();
	this.oOkBtn = null;
	this.oCancelBtn.destroy();
	this.oCancelBtn = null;

	var domRef = jQuery.sap.domById(this.id);
	domRef.parentNode.removeChild(domRef);

	this.oPopup.destroy();
	this.oPopup = null;
};


/**
 * rgb values are 0..255
 */
sap.ui.ux3.ShellColorPicker.rgbToHsl = function(oColor) {
	var r = oColor.r/255,
			g = oColor.g/255,
			b = oColor.b/255;
	var max = Math.max(r, g, b);
	var min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max == min) {
		h = s = 0; // all colors equally strong -> no saturation
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch(max){
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}
	return {h:h,s:s,l:l*100};
};

/**
 * hs values are 0..1, l is 0..100
 */
sap.ui.ux3.ShellColorPicker.hslToRgb = function(oColor) {
	var r, g, b;
	var l = oColor.l/100;

	if (oColor.s == 0) {
		r = g = b = l; // all colors equally strong -> all equal to lightness
	} else {
		var q = l < 0.5 ? l * (1 + oColor.s) : l + oColor.s - l * oColor.s;
		var p = 2 * l - q;
		r = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h + 1/3);
		g = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h);
		b = sap.ui.ux3.ShellColorPicker.hueToRgb(p, q, oColor.h - 1/3);
	}

	return [r * 255, g * 255, b * 255];
};

sap.ui.ux3.ShellColorPicker.hueToRgb = function(p, q, t) {
  if(t < 0) {
	t += 1;
  }
  if(t > 1) {
	t -= 1;
  }
  if(t < 1/6) {
	return p + (q - p) * 6 * t;
  }
  if(t < 1/2) {
	return q;
  }
  if(t < 2/3) {
	return p + (q - p) * (2/3 - t) * 6;
  }
  return p;
};

sap.ui.ux3.ShellColorPicker.hslToCss = function(oColor) {
	var rgbColor = sap.ui.ux3.ShellColorPicker.hslToRgb(oColor);
	return "rgb(" + Math.round(rgbColor[0]) + "," + Math.round(rgbColor[1]) + "," + Math.round(rgbColor[2]) + ")";
};
}; // end of sap.ui.ux3.ShellColorPicker
if ( !jQuery.sap.isDeclared('sap.ui.ux3.DataSetItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.ux3.DataSetItem.
jQuery.sap.declare("sap.ui.ux3.DataSetItem");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new DataSetItem.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>iconSrc : string</li>
 * <li>title : string</li>
 * <li>checkable : boolean</li>
 * <li>subtitle : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>template : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>selected : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * DataSet Item
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.ux3.DataSetItem = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.ux3.DataSetItem.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.ux3.DataSetItem. 
 * Resulting metadata can be obtained via sap.ui.ux3.DataSetItem.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.ux3.DataSetItem", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getIconSrc", "setIconSrc", "getTitle", "setTitle", "getCheckable", "setCheckable", "getSubtitle", "setSubtitle", 
    // aggregations
    "getTemplate", "insertTemplate", "addTemplate", "removeTemplate", "removeAllTemplate", "indexOfTemplate", "destroyTemplate", 
    // associations
    
    // events
    "attachSelected", "detachSelected"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.ux3",
  properties : {
    "iconSrc" : {name : "iconSrc", type : "string", group : "Misc", defaultValue : null},
    "title" : {name : "title", type : "string", group : "Misc", defaultValue : 'Title'},
    "checkable" : {name : "checkable", type : "boolean", group : "Misc", defaultValue : true},
    "subtitle" : {name : "subtitle", type : "string", group : "Misc", defaultValue : 'Subtitle'}
  },
  
  aggregations : {
    "template" : {name : "template", type : "sap.ui.core.Control", multiple : false}
  },
  associations : {},
  events : {
    "selected" : "selected"
  }

});	

sap.ui.ux3.DataSetItem.M_EVENTS = {'selected':'selected'};


/**
 * Getter for property <code>iconSrc</code>.
 * image
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>iconSrc</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetItem.prototype.getIconSrc = function() {
	return this.getProperty("iconSrc");
};

/**
 * Setter for property <code>iconSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIconSrc  new value for property <code>iconSrc</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.setIconSrc = function(sIconSrc) {
	this.setProperty("iconSrc", sIconSrc);
	return this;
};


/**
 * Getter for property <code>title</code>.
 * title
 *
 * Default value is <code>Title</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetItem.prototype.getTitle = function() {
	return this.getProperty("title");
};

/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>Title</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.setTitle = function(sTitle) {
	this.setProperty("title", sTitle);
	return this;
};


/**
 * Getter for property <code>checkable</code>.
 * checkable
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>checkable</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetItem.prototype.getCheckable = function() {
	return this.getProperty("checkable");
};

/**
 * Setter for property <code>checkable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCheckable  new value for property <code>checkable</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.setCheckable = function(bCheckable) {
	this.setProperty("checkable", bCheckable);
	return this;
};


/**
 * Getter for property <code>subtitle</code>.
 * subtitle
 *
 * Default value is <code>Subtitle</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * 
 */
sap.ui.ux3.DataSetItem.prototype.getSubtitle = function() {
	return this.getProperty("subtitle");
};

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is <code>Subtitle</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.setSubtitle = function(sSubtitle) {
	this.setProperty("subtitle", sSubtitle);
	return this;
};

	
/**
 * Getter for aggregation <code>template</code>.<br/>
 * template for item rendering
 * 
 * @return {sap.ui.core.Control}
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.getTemplate = function() {
	return this.getAggregation("template", null);
};


/**
 * Setter for the aggregated <code>template</code>.
 * @param oTemplate {sap.ui.core.Control}
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.setTemplate = function(oTemplate) {
	this.setAggregation("template", oTemplate);
	return this;
};
	

/**
 * Destroys  in the aggregation 
 * named <code>template</code>.
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.destroyTemplate = function() {
	this.destroyAggregation("template");
	return this;
};


/**
 * Event Fired when Datset item is selected.
 *  
 *
 * @name sap.ui.ux3.DataSetItem#selected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId Id of the selected Datset item
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'selected' event of this <code>sap.ui.ux3.DataSetItem</code>.<br/>
 * Event Fired when Datset item is selected.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.attachSelected = function(oData, fnFunction, oListener) {
	this.attachEvent("selected", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'selected' event of this <code>sap.ui.ux3.DataSetItem</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.ux3.DataSetItem.prototype.detachSelected = function(fnFunction, oListener) {
	this.detachEvent("selected", fnFunction, oListener);
	return this;	
};

/**
 * Fire event selected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> Id of the selected Datset item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.ux3.DataSetItem} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.ux3.DataSetItem.prototype.fireSelected = function(mArguments) {
	this.fireEvent("selected", mArguments);
	return this;
};


// Start of sap/ui/ux3/DataSetItem.js
///**
// * This file defines behavior for the control, 
// */
//sap.ui.ux3.DataSetItem.prototype.init = function(){
//   // do something for initialization...
//};

/** 
 * Handle onclick event. Fires selected Event.
 * @param {sap.ui.base.Event} oEvent click event 	
 * @private
 */
sap.ui.ux3.DataSetItem.prototype.onclick = function(oEvent) {
	oEvent.stopPropagation();
	this.fireSelected({
		itemId: this.getId()
	});
}
}; // end of sap.ui.ux3.DataSetItem
if ( !jQuery.sap.isDeclared('sap.ui.ux3.ThingInspectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.ui.ux3.ThingInspector
jQuery.sap.declare("sap.ui.ux3.ThingInspectorRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ThingInspector renderer.
 * @static
 */
sap.ui.ux3.ThingInspectorRenderer = sap.ui.core.Renderer.extend(sap.ui.ux3.OverlayRenderer);

/**
 * Renders the ThingInspector content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered 
 */
sap.ui.ux3.ThingInspectorRenderer.renderContent = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager;
	
/*	rm.write("<div class='sapUiUx3TICollection'>");
	rm.write("<div class='sapUiUx3TICollectionHeader'>Collection <a id='"+oControl.getId()+"-toggle-collection' role=\"button\" class='sapUiUx3TICollectionHeaderNavIcon'>&lt;&lt;</a>");
	rm.write("</div>");
	rm.write("<div class='sapUiUx3TICollectionContent'>");
	rm.write("</div>");
	rm.write("<div class='sapUiUx3TICollectionFooter'>");
	rm.write("<div class='sapUiUx3TICollectionThingAction'>Collection");
	rm.write("</div>");
	rm.write("</div>")
	rm.write("</div>");*/
	
	rm.write("<div role='Main' class='sapUiUx3TIContent'>");
	//rm.write("<div class='sapUiUx3TIContentScrollContainer'>");
	//render Header
	rm.write("<div class='sapUiUx3TIHeader'>");
	rm.write("<div class='sapUiUx3TIHeaderContainerIdentifier'>");
	rm.write("<span role='heading' aria-level='1' class='sapUiUx3TIIdentifier'");
	rm.writeAttributeEscaped("title", oControl.getType());
	rm.write(">");
	rm.writeEscaped(oControl.getType());
	rm.write("</span>");
	rm.write("</div>");

	rm.write("<div class='sapUiUx3TIHeaderGroupScrollContainer'>"); 
	rm.write("<div class='sapUiUx3TIHeaderContainer'>");
	rm.write("<div class='sapUiUx3TIIconBar'>");
	rm.write("<div class='sapUiUx3TIIcon'><img alt='' role='presentation' src='");
	rm.writeEscaped(oControl.getIcon());
	rm.write("' id='" + oControl.getId() + "-swatch'></div>");
	rm.write("<div class='sapUiUx3TITitle'>");
	rm.write("<span role='heading' aria-level='2' class='sapUiUx3TITitleFirst'");
	rm.writeAttributeEscaped("title", oControl.getFirstTitle());
	rm.write(">");
	rm.writeEscaped(oControl.getFirstTitle());
	rm.write("</span><br/>");
	rm.write("<span role='heading' aria-level='3' class='sapUiUx3TITitleSecond'");
	rm.writeAttributeEscaped("title", oControl.getSecondTitle());
	rm.write(">");
	rm.writeEscaped(oControl.getSecondTitle());
	rm.write("</span>");
	rm.write("</div>");
	rm.write("</div>");
	rm.write("</div>");

	// render Header Content
	rm.write("<div id='" + oControl.getId() + "-headerContent'>");
	this.renderHeaderContent(rm, oControl);
	rm.write("</div>");

	rm.write("</div>");
	rm.write("</div>");

	// render Facets
	rm.write("<div class='sapUiUx3TIFacets'>");
	rm.write("<div role='Navigation' class='sapUiUx3TIFacetBar'>");
	rm.renderControl(oControl._getNavBar());
	rm.write("</div>");
	rm.write("<div id='" + oControl.getId() + "-facetContent' class='sapUiUx3TIFacetContent'>");

	// render Facet Content
	this.renderFacetContent(rm, oControl);

	rm.write("</div>");
	rm.write("</div>");
	//rm.write("</div>");
	// render Toolbar
	this.renderToolbar(rm, oControl);
	rm.write("</div>");
}
/**
 * Add root class to ThingInspector
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.addRootClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TI");
}
/**
 * Add class to ThingInspector
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.addOverlayClasses = function(oRenderManager, oControl) {
	var rm = oRenderManager;
	rm.addClass("sapUiUx3TIOverlay");
}
/**
 * Renders the HTML for ThingInspector Toolbar
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.renderToolbar = function(rm, oControl) {
	// render Toolbar
	rm.write("<div class='sapUiUx3TIToolbar' role='toolbar'>");
	// render list for generic actions
    rm.write("<ul id='" + oControl.getId() + "-genericThingActions' class='sapUiUx3TIGenericActions'>");
    this.renderGenericActions(rm, oControl);
	rm.write("</ul>");
	// render list for thing actions
	rm.write("<ul  id='" + oControl.getId() + "-thingActions' class='sapUiUx3TIThingActions'>");
	this.renderThingActions(rm, oControl);
	rm.write("</ul>");
	// closing Tag for Toolbar
	rm.write("</div>");
}
/**
 * Renders the HTML for ThingInspector Toolbar: Generic actions
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
 sap.ui.ux3.ThingInspectorRenderer.renderGenericActions = function(rm, oControl) {
 
 	if (oControl.getUpdateActionEnabled()){
	    // update
		rm.write("<li ");
		rm.addClass("sapUiUx3TIItem");
		rm.writeClasses();
		rm.write("><a role=\"button\" aria-disabled=\"false\"");
		rm.writeControlData(oControl._oUpdateAction);
		rm.addClass("sapUiUx3TIUpdateAction");
		rm.addClass("sapUiUx3TIAction");
		rm.writeClasses();
		rm.writeAttribute("tabindex", "0");
		if (oControl._oUpdateAction.getTooltip()) {
			rm.writeAttributeEscaped("title", oControl._oUpdateAction.getTooltip());
		}
		rm.write("></a></li>");
	} 
	if (oControl.getFollowActionEnabled()) {
		// follow
		rm.write("<li");
		rm.addClass("sapUiUx3TIItem");
		rm.writeClasses();
		rm.write("><a role=\"button\" aria-disabled=\"false\" aria-haspopup=\"false\"");
		rm.writeControlData(oControl._oFollowAction);
		rm.addClass("sapUiUx3TIFollowAction");
		rm.addClass(oControl.getFollowState());
		rm.addClass("sapUiUx3TIAction");
		rm.writeClasses();
		rm.writeAttribute("tabindex", "0");
		if (oControl._oFollowAction.getTooltip()) {
			rm.writeAttributeEscaped("title", oControl._oFollowAction.getTooltip());
		}
		rm.write("></a></li>");
	} 
	if (oControl.getFavoriteActionEnabled()) { 
	    // favorite
		rm.write("<li");
		rm.addClass("sapUiUx3TIItem");
		rm.writeClasses();
		rm.write("><a role=\"button\" aria-disabled=\"false\"");
		rm.writeControlData(oControl._oFavoriteAction);
		rm.addClass("sapUiUx3TIFavoriteAction");
		if(oControl.getFavoriteState()) {
			rm.addClass("Selected");
		}
		rm.addClass("sapUiUx3TIAction");
		rm.writeClasses();
		rm.writeAttribute("tabindex", "0");
		if (oControl._oFavoriteAction.getTooltip()) {
			rm.writeAttributeEscaped("title", oControl._oFavoriteAction.getTooltip());
		}
		rm.write("></a></li>");
	} 
	if (oControl.getFlagActionEnabled()) {
	    // flag
		rm.write("<li ");
		rm.addClass("sapUiUx3TIItem");
		rm.writeClasses();
		rm.write("><a  role=\"button\" aria-disabled=\"false\"");
		rm.writeControlData(oControl._oFlagAction);
		rm.addClass("sapUiUx3TIFlagAction");
		if(oControl.getFlagState()) {
			rm.addClass("Selected");
		}
		rm.addClass("sapUiUx3TIAction");
		rm.writeClasses();
		rm.writeAttribute("tabindex", "0");
		if (oControl._oFlagAction.getTooltip()) {
			rm.writeAttributeEscaped("title", oControl._oFlagAction.getTooltip());
		}
		rm.write("></a></li>");
	}
 }
/**
 * Renders the HTML for Thing actions
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.renderThingActions = function(rm, oControl) {
	// render list for thing actions

	var actionButtons = oControl._getActionButtons();
	for ( var i = 0; i < actionButtons.length; i++) {
		var oButton = actionButtons[i];
		rm.write("<li");
		rm.addClass("sapUiUx3TIItemRight");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oButton);
		rm.write("</li>");
	}
}

/**
 * Renders the HTML for ThingInspector Header content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.renderHeaderContent = function(rm, oControl) {
	var headerContentList = oControl.getHeaderContent();
	for ( var i = 0; i < headerContentList.length; i++) {
		var headerContent = headerContentList[i];
		rm.write("<hr class='sapUiUx3TIHRWhite'>");
		rm.write("<div class='sapUiUx3TIHeaderContainer' role='group'>");
		rm.write("<div class='sapUiUx3TIHeaderGroupTitle'");
		rm.writeAttributeEscaped("title", headerContent.getTitle());
		rm.write("><span>");
		rm.writeEscaped(headerContent.getTitle());
		rm.write("</span></div>");
		rm.write("<div class='sapUiUx3TIHeaderGroupContent'>");
		var childContent = headerContent.getContent();
		for ( var j = 0; j < childContent.length; j++) {
			var childControl = childContent[j];
			rm.renderControl(childControl);
		}
		rm.write("</div>");
		rm.write("</div>");
	}
}
/**
 * Renders the HTML for ThingInspector Facet content
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */;
sap.ui.ux3.ThingInspectorRenderer.renderFacetContent = function(rm, oControl) {
	var facetContent = oControl.getFacetContent();
	var bTitle = true; 
	
	if (facetContent.length == 1 )  {
		bTitle = false;
	}
	
	for ( var i = 0; i < facetContent.length; i++) {
		var group = facetContent[i];
		if (group.getColspan()) {
			rm.write("<div class='sapUiUx3TIFacetThingGroupSpan' role='group'>");
		} else {
			rm.write("<div class='sapUiUx3TIFacetThingGroup' role='group'>");
		}
		if (bTitle) {
			rm.write("<div class='sapUiUx3TIFacetThingGroupContentTitle'");
			rm.writeAttributeEscaped("title", group.getTitle());
			rm.write("><span>");
			rm.writeEscaped(group.getTitle());
			rm.write("</span></div>");
		}
		rm.write("<div class='sapUiUx3TIFacetThingGroupContent'>");
		var groupContent = group.getContent();
		for ( var j = 0; j < groupContent.length; j++) {
			rm.renderControl(groupContent[j]);
		}
		rm.write("</div></div>");
	}
}
}; // end of sap.ui.ux3.ThingInspectorRenderer
