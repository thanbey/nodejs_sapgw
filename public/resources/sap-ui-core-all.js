// This file has been generated by the Phoenix 'AllInOne' Builder
/*!
 * jQuery JavaScript Library v1.4.4
 * http://jquery.com/
 *
 * Copyright 2010, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2010, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Nov 11 19:04:53 2010 -0500
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// (both of which we optimize for)
	quickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,

	// Is it a simple selector
	isSimple = /^.[^:#\[\.,]*$/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,
	rwhite = /\s/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Check for non-word characters
	rnonword = /\W/,

	// Check for digits
	rdigit = /\d/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,
	
	// Has the ready events already been bound?
	readyBound = false,
	
	// The functions to execute on DOM ready
	readyList = [],

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,
	
	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	init: function( selector, context ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}
		
		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = "body";
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			match = quickExpr.exec( selector );

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					doc = (context ? context.ownerDocument || context : document);

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes;
					}
					
					return jQuery.merge( this, selector );
					
				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $("TAG")
			} else if ( !context && !rnonword.test( selector ) ) {
				this.selector = selector;
				this.context = document;
				selector = document.getElementsByTagName( selector );
				return jQuery.merge( this, selector );

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return (context || rootjQuery).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return jQuery( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if (selector.selector !== undefined) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.4.4",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this.slice(num)[ 0 ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = jQuery();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );
		
		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + (this.selector ? " " : "") + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},
	
	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// If the DOM is already ready
		if ( jQuery.isReady ) {
			// Execute the function immediately
			fn.call( document, jQuery );

		// Otherwise, remember the function for later
		} else if ( readyList ) {
			// Add the function to the wait list
			readyList.push( fn );
		}

		return this;
	},
	
	eq: function( i ) {
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, +i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},
	
	end: function() {
		return this.prevObject || jQuery(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	 var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		window.$ = _$;

		if ( deep ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},
	
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,
	
	// Handle when the DOM is ready
	ready: function( wait ) {
		// A third-party is pushing the ready event forwards
		if ( wait === true ) {
			jQuery.readyWait--;
		}

		// Make sure that the DOM is not already loaded
		if ( !jQuery.readyWait || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			if ( readyList ) {
				// Execute all of them
				var fn,
					i = 0,
					ready = readyList;

				// Reset the list of functions
				readyList = null;

				while ( (fn = ready[ i++ ]) ) {
					fn.call( document, jQuery );
				}

				// Trigger any bound ready events
				if ( jQuery.fn.trigger ) {
					jQuery( document ).trigger( "ready" ).unbind( "ready" );
				}
			}
		}
	},
	
	bindReady: function() {
		if ( readyBound ) {
			return;
		}

		readyBound = true;

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			
			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent("onreadystatechange", DOMContentLoaded);
			
			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	// A crude way of determining if an object is a window
	isWindow: function( obj ) {
		return obj && typeof obj === "object" && "setInterval" in obj;
	},

	isNaN: function( obj ) {
		return obj == null || !rdigit.test( obj ) || isNaN( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}
		
		// Not own constructor property must be Object
		if ( obj.constructor &&
			!hasOwn.call(obj, "constructor") &&
			!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
			return false;
		}
		
		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
	
		var key;
		for ( key in obj ) {}
		
		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},
	
	error: function( msg ) {
		throw msg;
	},
	
	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );
		
		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test(data.replace(rvalidescape, "@")
			.replace(rvalidtokens, "]")
			.replace(rvalidbraces, "")) ) {

			// Try to use the native JSON parser first
			return window.JSON && window.JSON.parse ?
				window.JSON.parse( data ) :
				(new Function("return " + data))();

		} else {
			jQuery.error( "Invalid JSON: " + data );
		}
	},

	noop: function() {},

	// Evalulates a script in a global context
	globalEval: function( data ) {
		if ( data && rnotwhite.test(data) ) {
			// Inspired by code by Andrea Giammarchi
			// http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html
			var head = document.getElementsByTagName("head")[0] || document.documentElement,
				script = document.createElement("script");

			script.type = "text/javascript";

			if ( jQuery.support.scriptEval ) {
				script.appendChild( document.createTextNode( data ) );
			} else {
				script.text = data;
			}

			// Use insertBefore instead of appendChild to circumvent an IE6 bug.
			// This arises when a base node is used (#2709).
			head.insertBefore( script, head.firstChild );
			head.removeChild( script );
		}
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction(object);

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( var value = object[0];
					i < length && callback.call( value, i, value ) !== false; value = object[++i] ) {}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// The extra typeof function check is to prevent crashes
			// in Safari 2 (See: #3039)
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type(array);

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array ) {
		if ( array.indexOf ) {
			return array.indexOf( elem );
		}

		for ( var i = 0, length = array.length; i < length; i++ ) {
			if ( array[ i ] === elem ) {
				return i;
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var ret = [], value;

		// Go through the array, translating each of the items to their
		// new value (or values).
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			value = callback( elems[ i ], i, arg );

			if ( value != null ) {
				ret[ ret.length ] = value;
			}
		}

		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	proxy: function( fn, proxy, thisObject ) {
		if ( arguments.length === 2 ) {
			if ( typeof proxy === "string" ) {
				thisObject = fn;
				fn = thisObject[ proxy ];
				proxy = undefined;

			} else if ( proxy && !jQuery.isFunction( proxy ) ) {
				thisObject = proxy;
				proxy = undefined;
			}
		}

		if ( !proxy && fn ) {
			proxy = function() {
				return fn.apply( thisObject || this, arguments );
			};
		}

		// Set the guid of unique handler to the same of original handler, so it can be removed
		if ( fn ) {
			proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
		}

		// So proxy can be declared as an argument
		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can be optionally by executed if its a function
	access: function( elems, key, value, exec, fn, pass ) {
		var length = elems.length;
	
		// Setting many attributes
		if ( typeof key === "object" ) {
			for ( var k in key ) {
				jQuery.access( elems, k, key[k], exec, fn, value );
			}
			return elems;
		}
	
		// Setting one attribute
		if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = !pass && exec && jQuery.isFunction(value);
		
			for ( var i = 0; i < length; i++ ) {
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
			}
		
			return elems;
		}
	
		// Getting an attribute
		return length ? fn( elems[0], key ) : undefined;
	},

	now: function() {
		return (new Date()).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

if ( indexOf ) {
	jQuery.inArray = function( elem, array ) {
		return indexOf.call( array, elem );
	};
}

// Verify that \s matches non-breaking spaces
// (IE fails on this test)
if ( !rwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

// Expose jQuery to the global object
return (window.jQuery = window.$ = jQuery);

})();


(function() {

	jQuery.support = {};

	var root = document.documentElement,
		script = document.createElement("script"),
		div = document.createElement("div"),
		id = "script" + jQuery.now();

	div.style.display = "none";
	div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	var all = div.getElementsByTagName("*"),
		a = div.getElementsByTagName("a")[0],
		select = document.createElement("select"),
		opt = select.appendChild( document.createElement("option") );

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return;
	}

	jQuery.support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText insted)
		style: /red/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55$/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: div.getElementsByTagName("input")[0].value === "on",

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Will be defined later
		deleteExpando: true,
		optDisabled: false,
		checkClone: false,
		scriptEval: false,
		noCloneEvent: true,
		boxModel: null,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableHiddenOffsets: true
	};

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as diabled)
	select.disabled = true;
	jQuery.support.optDisabled = !opt.disabled;

	script.type = "text/javascript";
	try {
		script.appendChild( document.createTextNode( "window." + id + "=1;" ) );
	} catch(e) {}

	root.insertBefore( script, root.firstChild );

	// Make sure that the execution of code works by injecting a script
	// tag with appendChild/createTextNode
	// (IE doesn't support this, fails, and uses .text instead)
	if ( window[ id ] ) {
		jQuery.support.scriptEval = true;
		// ### TODO/EDIT: ADDED TRY CATCH TO AVOID JS ERRORS IN EMBEDDED IE ###
		try {
			delete window[ id ];
		} catch (ex) {
			// somehow this line does not work in the IE9 Web Browser control
			//alert(e); // => throws a TypeError: Object doesn't support this property or method!
		}
	}

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete script.test;

	} catch(e) {
		jQuery.support.deleteExpando = false;
	}

	root.removeChild( script );

	if ( div.attachEvent && div.fireEvent ) {
		div.attachEvent("onclick", function click() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			jQuery.support.noCloneEvent = false;
			div.detachEvent("onclick", click);
		});
		div.cloneNode(true).fireEvent("onclick");
	}

	div = document.createElement("div");
	div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";

	var fragment = document.createDocumentFragment();
	fragment.appendChild( div.firstChild );

	// WebKit doesn't clone checked state correctly in fragments
	jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;

	// Figure out if the W3C box model works as expected
	// document.body must exist before we can do this
	jQuery(function() {
		var div = document.createElement("div");
		div.style.width = div.style.paddingLeft = "1px";

		document.body.appendChild( div );
		jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;

		if ( "zoom" in div.style ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.style.display = "inline";
			div.style.zoom = 1;
			jQuery.support.inlineBlockNeedsLayout = div.offsetWidth === 2;

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "";
			div.innerHTML = "<div style='width:4px;'></div>";
			jQuery.support.shrinkWrapBlocks = div.offsetWidth !== 2;
		}

		div.innerHTML = "<table><tr><td style='padding:0;display:none'></td><td>t</td></tr></table>";
		var tds = div.getElementsByTagName("td");

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		jQuery.support.reliableHiddenOffsets = tds[0].offsetHeight === 0;

		tds[0].style.display = "";
		tds[1].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE < 8 fail this test)
		jQuery.support.reliableHiddenOffsets = jQuery.support.reliableHiddenOffsets && tds[0].offsetHeight === 0;
		div.innerHTML = "";

		document.body.removeChild( div ).style.display = "none";
		div = tds = null;
	});

	// Technique from Juriy Zaytsev
	// http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/
	var eventSupported = function( eventName ) {
		var el = document.createElement("div");
		eventName = "on" + eventName;

		var isSupported = (eventName in el);
		if ( !isSupported ) {
			el.setAttribute(eventName, "return;");
			isSupported = typeof el[eventName] === "function";
		}
		el = null;

		return isSupported;
	};

	jQuery.support.submitBubbles = eventSupported("submit");
	jQuery.support.changeBubbles = eventSupported("change");

	// release memory in IE
	root = script = div = all = a = null;
})();



var windowData = {},
	rbrace = /^(?:\{.*\}|\[.*\])$/;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page	
	expando: "jQuery" + jQuery.now(),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	data: function( elem, name, data ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		elem = elem == window ?
			windowData :
			elem;

		var isNode = elem.nodeType,
			id = isNode ? elem[ jQuery.expando ] : null,
			cache = jQuery.cache, thisCache;

		if ( isNode && !id && typeof name === "string" && data === undefined ) {
			return;
		}

		// Get the data from the object directly
		if ( !isNode ) {
			cache = elem;

		// Compute a unique ID for the element
		} else if ( !id ) {
			elem[ jQuery.expando ] = id = ++jQuery.uuid;
		}

		// Avoid generating a new cache unless none exists and we
		// want to manipulate it.
		if ( typeof name === "object" ) {
			if ( isNode ) {
				cache[ id ] = jQuery.extend(cache[ id ], name);

			} else {
				jQuery.extend( cache, name );
			}

		} else if ( isNode && !cache[ id ] ) {
			cache[ id ] = {};
		}

		thisCache = isNode ? cache[ id ] : cache;

		// Prevent overriding the named cache with undefined values
		if ( data !== undefined ) {
			thisCache[ name ] = data;
		}

		return typeof name === "string" ? thisCache[ name ] : thisCache;
	},

	removeData: function( elem, name ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		elem = elem == window ?
			windowData :
			elem;

		var isNode = elem.nodeType,
			id = isNode ? elem[ jQuery.expando ] : elem,
			cache = jQuery.cache,
			thisCache = isNode ? cache[ id ] : id;

		// If we want to remove a specific section of the element's data
		if ( name ) {
			if ( thisCache ) {
				// Remove the section of cache data
				delete thisCache[ name ];

				// If we've removed all the data, remove the element's cache
				if ( isNode && jQuery.isEmptyObject(thisCache) ) {
					jQuery.removeData( elem );
				}
			}

		// Otherwise, we want to remove all of the element's data
		} else {
			if ( isNode && jQuery.support.deleteExpando ) {
				delete elem[ jQuery.expando ];

			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( jQuery.expando );

			// Completely remove the data cache
			} else if ( isNode ) {
				delete cache[ id ];

			// Remove all fields from the object
			} else {
				for ( var n in elem ) {
					delete elem[ n ];
				}
			}
		}
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var data = null;

		if ( typeof key === "undefined" ) {
			if ( this.length ) {
				var attr = this[0].attributes, name;
				data = jQuery.data( this[0] );

				for ( var i = 0, l = attr.length; i < l; i++ ) {
					name = attr[i].name;

					if ( name.indexOf( "data-" ) === 0 ) {
						name = name.substr( 5 );
						dataAttr( this[0], name, data[ name ] );
					}
				}
			}

			return data;

		} else if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		var parts = key.split(".");
		parts[1] = parts[1] ? "." + parts[1] : "";

		if ( value === undefined ) {
			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

			// Try to fetch any internally stored data first
			if ( data === undefined && this.length ) {
				data = jQuery.data( this[0], key );
				data = dataAttr( this[0], key, data );
			}

			return data === undefined && parts[1] ?
				this.data( parts[0] ) :
				data;

		} else {
			return this.each(function() {
				var $this = jQuery( this ),
					args = [ parts[0], value ];

				$this.triggerHandler( "setData" + parts[1] + "!", args );
				jQuery.data( this, key, value );
				$this.triggerHandler( "changeData" + parts[1] + "!", args );
			});
		}
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		data = elem.getAttribute( "data-" + key );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				!jQuery.isNaN( data ) ? parseFloat( data ) :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}




jQuery.extend({
	queue: function( elem, type, data ) {
		if ( !elem ) {
			return;
		}

		type = (type || "fx") + "queue";
		var q = jQuery.data( elem, type );

		// Speed up dequeue by getting out quickly if this is just a lookup
		if ( !data ) {
			return q || [];
		}

		if ( !q || jQuery.isArray(data) ) {
			q = jQuery.data( elem, type, jQuery.makeArray(data) );

		} else {
			q.push( data );
		}

		return q;
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift();

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift("inprogress");
			}

			fn.call(elem, function() {
				jQuery.dequeue(elem, type);
			});
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
		}

		if ( data === undefined ) {
			return jQuery.queue( this[0], type );
		}
		return this.each(function( i ) {
			var queue = jQuery.queue( this, type, data );

			if ( type === "fx" && queue[0] !== "inprogress" ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},

	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue( type, function() {
			var elem = this;
			setTimeout(function() {
				jQuery.dequeue( elem, type );
			}, time );
		});
	},

	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	}
});




var rclass = /[\n\t]/g,
	rspaces = /\s+/,
	rreturn = /\r/g,
	rspecialurl = /^(?:href|src|style)$/,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rradiocheck = /^(?:radio|checkbox)$/i;

jQuery.props = {
	"for": "htmlFor",
	"class": "className",
	readonly: "readOnly",
	maxlength: "maxLength",
	cellspacing: "cellSpacing",
	rowspan: "rowSpan",
	colspan: "colSpan",
	tabindex: "tabIndex",
	usemap: "useMap",
	frameborder: "frameBorder"
};

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.attr );
	},

	removeAttr: function( name, fn ) {
		return this.each(function(){
			jQuery.attr( this, name, "" );
			if ( this.nodeType === 1 ) {
				this.removeAttribute( name );
			}
		});
	},

	addClass: function( value ) {
		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				self.addClass( value.call(this, i, self.attr("class")) );
			});
		}

		if ( value && typeof value === "string" ) {
			var classNames = (value || "").split( rspaces );

			for ( var i = 0, l = this.length; i < l; i++ ) {
				var elem = this[i];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className ) {
						elem.className = value;

					} else {
						var className = " " + elem.className + " ",
							setClass = elem.className;

						for ( var c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( className.indexOf( " " + classNames[c] + " " ) < 0 ) {
								setClass += " " + classNames[c];
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				self.removeClass( value.call(this, i, self.attr("class")) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			var classNames = (value || "").split( rspaces );

			for ( var i = 0, l = this.length; i < l; i++ ) {
				var elem = this[i];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						var className = (" " + elem.className + " ").replace(rclass, " ");
						for ( var c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[c] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				self.toggleClass( value.call(this, i, self.attr("class"), stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspaces );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery.data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery.data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ";
		for ( var i = 0, l = this.length; i < l; i++ ) {
			if ( (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		if ( !arguments.length ) {
			var elem = this[0];

			if ( elem ) {
				if ( jQuery.nodeName( elem, "option" ) ) {
					// attributes.value is undefined in Blackberry 4.7 but
					// uses .value. See #6932
					var val = elem.attributes.value;
					return !val || val.specified ? elem.value : elem.text;
				}

				// We need to handle select boxes special
				if ( jQuery.nodeName( elem, "select" ) ) {
					var index = elem.selectedIndex,
						values = [],
						options = elem.options,
						one = elem.type === "select-one";

					// Nothing was selected
					if ( index < 0 ) {
						return null;
					}

					// Loop through all the selected options
					for ( var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++ ) {
						var option = options[ i ];

						// Don't return options that are disabled or in a disabled optgroup
						if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && 
								(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				}

				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				if ( rradiocheck.test( elem.type ) && !jQuery.support.checkOn ) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				}
				

				// Everything else, we just grab the value
				return (elem.value || "").replace(rreturn, "");

			}

			return undefined;
		}

		var isFunction = jQuery.isFunction(value);

		return this.each(function(i) {
			var self = jQuery(this), val = value;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call(this, i, self.val());
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray(val) ) {
				val = jQuery.map(val, function (value) {
					return value == null ? "" : value + "";
				});
			}

			if ( jQuery.isArray(val) && rradiocheck.test( this.type ) ) {
				this.checked = jQuery.inArray( self.val(), val ) >= 0;

			} else if ( jQuery.nodeName( this, "select" ) ) {
				var values = jQuery.makeArray(val);

				jQuery( "option", this ).each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					this.selectedIndex = -1;
				}

			} else {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},
		
	attr: function( elem, name, value, pass ) {
		// don't set attributes on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {
			return undefined;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery(elem)[name](value);
		}

		var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc( elem ),
			// Whether we are setting (or getting)
			set = value !== undefined;

		// Try to normalize/fix the name
		name = notxml && jQuery.props[ name ] || name;

		// These attributes require special treatment
		var special = rspecialurl.test( name );

		// Safari mis-reports the default selected property of an option
		// Accessing the parent's selectedIndex property fixes it
		if ( name === "selected" && !jQuery.support.optSelected ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}

		// If applicable, access the attribute via the DOM 0 way
		// 'in' checks fail in Blackberry 4.7 #6931
		if ( (name in elem || elem[ name ] !== undefined) && notxml && !special ) {
			if ( set ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( name === "type" && rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				}

				if ( value === null ) {
					if ( elem.nodeType === 1 ) {
						elem.removeAttribute( name );
					}

				} else {
					elem[ name ] = value;
				}
			}

			// browsers index elements by id/name on forms, give priority to attributes.
			if ( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) ) {
				return elem.getAttributeNode( name ).nodeValue;
			}

			// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
			// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
			if ( name === "tabIndex" ) {
				var attributeNode = elem.getAttributeNode( "tabIndex" );

				return attributeNode && attributeNode.specified ?
					attributeNode.value :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}

			return elem[ name ];
		}

		if ( !jQuery.support.style && notxml && name === "style" ) {
			if ( set ) {
				elem.style.cssText = "" + value;
			}

			return elem.style.cssText;
		}

		if ( set ) {
			// convert the value to a string (all browsers do this but IE) see #1070
			elem.setAttribute( name, "" + value );
		}

		// Ensure that missing attributes return undefined
		// Blackberry 4.7 returns "" from getAttribute #6938
		if ( !elem.attributes[ name ] && (elem.hasAttribute && !elem.hasAttribute( name )) ) {
			return undefined;
		}

		var attr = !jQuery.support.hrefNormalized && notxml && special ?
				// Some attributes require a special call on IE
				elem.getAttribute( name, 2 ) :
				elem.getAttribute( name );

		// Non-existent attributes return null, we normalize to undefined
		return attr === null ? undefined : attr;
	}
});




var rnamespaces = /\.(.*)$/,
	rformElems = /^(?:textarea|input|select)$/i,
	rperiod = /\./g,
	rspace = / /g,
	rescape = /[^\w\s.|`]/g,
	fcleanup = function( nm ) {
		return nm.replace(rescape, "\\$&");
	},
	focusCounts = { focusin: 0, focusout: 0 };

/*
 * A number of helper functions used for managing events.
 * Many of the ideas behind this code originated from
 * Dean Edwards' addEvent library.
 */
jQuery.event = {

	// Bind an event to an element
	// Original by Dean Edwards
	add: function( elem, types, handler, data ) {
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// For whatever reason, IE has trouble passing the window object
		// around, causing it to be cloned in the process
		if ( jQuery.isWindow( elem ) && ( elem !== window && !elem.frameElement ) ) {
			elem = window;
		}

		if ( handler === false ) {
			handler = returnFalse;
		} else if ( !handler ) {
			// Fixes bug #7229. Fix recommended by jdalton
		  return;
		}

		var handleObjIn, handleObj;

		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
		}

		// Make sure that the function being executed has a unique ID
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure
		var elemData = jQuery.data( elem );

		// If no elemData is found then we must be trying to bind to one of the
		// banned noData elements
		if ( !elemData ) {
			return;
		}

		// Use a key less likely to result in collisions for plain JS objects.
		// Fixes bug #7150.
		var eventKey = elem.nodeType ? "events" : "__events__",
			events = elemData[ eventKey ],
			eventHandle = elemData.handle;
			
		if ( typeof events === "function" ) {
			// On plain objects events is a fn that holds the the data
			// which prevents this data from being JSON serialized
			// the function does not need to be called, it just contains the data
			eventHandle = events.handle;
			events = events.events;

		} else if ( !events ) {
			if ( !elem.nodeType ) {
				// On plain objects, create a fn that acts as the holder
				// of the values to avoid JSON serialization of event data
				elemData[ eventKey ] = elemData = function(){};
			}

			elemData.events = events = {};
		}

		if ( !eventHandle ) {
			elemData.handle = eventHandle = function() {
				// Handle the second event of a trigger and when
				// an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && !jQuery.event.triggered ?
					jQuery.event.handle.apply( eventHandle.elem, arguments ) :
					undefined;
			};
		}

		// Add elem as a property of the handle function
		// This is to prevent a memory leak with non-native events in IE.
		eventHandle.elem = elem;

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = types.split(" ");

		var type, i = 0, namespaces;

		while ( (type = types[ i++ ]) ) {
			handleObj = handleObjIn ?
				jQuery.extend({}, handleObjIn) :
				{ handler: handler, data: data };

			// Namespaced event handlers
			if ( type.indexOf(".") > -1 ) {
				namespaces = type.split(".");
				type = namespaces.shift();
				handleObj.namespace = namespaces.slice(0).sort().join(".");

			} else {
				namespaces = [];
				handleObj.namespace = "";
			}

			handleObj.type = type;
			if ( !handleObj.guid ) {
				handleObj.guid = handler.guid;
			}

			// Get the current list of functions bound to this event
			var handlers = events[ type ],
				special = jQuery.event.special[ type ] || {};

			// Init the event handler queue
			if ( !handlers ) {
				handlers = events[ type ] = [];

				// Check for a special event handler
				// Only use addEventListener/attachEvent if the special
				// events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}
			
			if ( special.add ) { 
				special.add.call( elem, handleObj ); 

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add the function to the element's handler list
			handlers.push( handleObj );

			// Keep track of which events have been used, for global triggering
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, pos ) {
		// don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		if ( handler === false ) {
			handler = returnFalse;
		}

		var ret, type, fn, j, i = 0, all, namespaces, namespace, special, eventType, handleObj, origType,
			eventKey = elem.nodeType ? "events" : "__events__",
			elemData = jQuery.data( elem ),
			events = elemData && elemData[ eventKey ];

		if ( !elemData || !events ) {
			return;
		}
		
		if ( typeof events === "function" ) {
			elemData = events;
			events = events.events;
		}

		// types is actually an event object here
		if ( types && types.type ) {
			handler = types.handler;
			types = types.type;
		}

		// Unbind all events for the element
		if ( !types || typeof types === "string" && types.charAt(0) === "." ) {
			types = types || "";

			for ( type in events ) {
				jQuery.event.remove( elem, type + types );
			}

			return;
		}

		// Handle multiple events separated by a space
		// jQuery(...).unbind("mouseover mouseout", fn);
		types = types.split(" ");

		while ( (type = types[ i++ ]) ) {
			origType = type;
			handleObj = null;
			all = type.indexOf(".") < 0;
			namespaces = [];

			if ( !all ) {
				// Namespaced event handlers
				namespaces = type.split(".");
				type = namespaces.shift();

				namespace = new RegExp("(^|\\.)" + 
					jQuery.map( namespaces.slice(0).sort(), fcleanup ).join("\\.(?:.*\\.)?") + "(\\.|$)");
			}

			eventType = events[ type ];

			if ( !eventType ) {
				continue;
			}

			if ( !handler ) {
				for ( j = 0; j < eventType.length; j++ ) {
					handleObj = eventType[ j ];

					if ( all || namespace.test( handleObj.namespace ) ) {
						jQuery.event.remove( elem, origType, handleObj.handler, j );
						eventType.splice( j--, 1 );
					}
				}

				continue;
			}

			special = jQuery.event.special[ type ] || {};

			for ( j = pos || 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( handler.guid === handleObj.guid ) {
					// remove the given handler for the given type
					if ( all || namespace.test( handleObj.namespace ) ) {
						if ( pos == null ) {
							eventType.splice( j--, 1 );
						}

						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}

					if ( pos != null ) {
						break;
					}
				}
			}

			// remove generic event handler if no more handlers exist
			if ( eventType.length === 0 || pos != null && eventType.length === 1 ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				ret = null;
				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			var handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			delete elemData.events;
			delete elemData.handle;

			if ( typeof elemData === "function" ) {
				jQuery.removeData( elem, eventKey );

			} else if ( jQuery.isEmptyObject( elemData ) ) {
				jQuery.removeData( elem );
			}
		}
	},

	// bubbling is internal
	trigger: function( event, data, elem /*, bubbling */ ) {
		// Event object or event type
		var type = event.type || event,
			bubbling = arguments[3];

		if ( !bubbling ) {
			event = typeof event === "object" ?
				// jQuery.Event object
				event[ jQuery.expando ] ? event :
				// Object literal
				jQuery.extend( jQuery.Event(type), event ) :
				// Just the event type (string)
				jQuery.Event(type);

			if ( type.indexOf("!") >= 0 ) {
				event.type = type = type.slice(0, -1);
				event.exclusive = true;
			}

			// Handle a global trigger
			if ( !elem ) {
				// Don't bubble custom events when global (to avoid too much overhead)
				event.stopPropagation();

				// Only trigger if we've ever bound an event for it
				if ( jQuery.event.global[ type ] ) {
					jQuery.each( jQuery.cache, function() {
						if ( this.events && this.events[type] ) {
							jQuery.event.trigger( event, data, this.handle.elem );
						}
					});
				}
			}

			// Handle triggering a single element

			// don't do events on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {
				return undefined;
			}

			// Clean up in case it is reused
			event.result = undefined;
			event.target = elem;

			// Clone the incoming data, if any
			data = jQuery.makeArray( data );
			data.unshift( event );
		}

		event.currentTarget = elem;

		// Trigger the event, it is assumed that "handle" is a function
		var handle = elem.nodeType ?
			jQuery.data( elem, "handle" ) :
			(jQuery.data( elem, "__events__" ) || {}).handle;

		if ( handle ) {
			handle.apply( elem, data );
		}

		var parent = elem.parentNode || elem.ownerDocument;

		// Trigger an inline bound script
		try {
			if ( !(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) ) {
				if ( elem[ "on" + type ] && elem[ "on" + type ].apply( elem, data ) === false ) {
					event.result = false;
					event.preventDefault();
				}
			}

		// prevent IE from throwing an error for some elements with some event types, see #3533
		} catch (inlineError) {}

		if ( !event.isPropagationStopped() && parent ) {
			jQuery.event.trigger( event, data, parent, true );

		} else if ( !event.isDefaultPrevented() ) {
			var old,
				target = event.target,
				targetType = type.replace( rnamespaces, "" ),
				isClick = jQuery.nodeName( target, "a" ) && targetType === "click",
				special = jQuery.event.special[ targetType ] || {};

			if ( (!special._default || special._default.call( elem, event ) === false) && 
				!isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()]) ) {

				try {
					if ( target[ targetType ] ) {
						// Make sure that we don't accidentally re-trigger the onFOO events
						old = target[ "on" + targetType ];

						if ( old ) {
							target[ "on" + targetType ] = null;
						}

						jQuery.event.triggered = true;
						target[ targetType ]();
					}

				// prevent IE from throwing an error for some elements with some event types, see #3533
				} catch (triggerError) {}

				if ( old ) {
					target[ "on" + targetType ] = old;
				}

				jQuery.event.triggered = false;
			}
		}
	},

	handle: function( event ) {
		var all, handlers, namespaces, namespace_re, events,
			namespace_sort = [],
			args = jQuery.makeArray( arguments );

		event = args[0] = jQuery.event.fix( event || window.event );
		event.currentTarget = this;

		// Namespaced event handlers
		all = event.type.indexOf(".") < 0 && !event.exclusive;

		if ( !all ) {
			namespaces = event.type.split(".");
			event.type = namespaces.shift();
			namespace_sort = namespaces.slice(0).sort();
			namespace_re = new RegExp("(^|\\.)" + namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)");
		}

		event.namespace = event.namespace || namespace_sort.join(".");

		events = jQuery.data(this, this.nodeType ? "events" : "__events__");

		if ( typeof events === "function" ) {
			events = events.events;
		}

		handlers = (events || {})[ event.type ];

		if ( events && handlers ) {
			// Clone the handlers to prevent manipulation
			handlers = handlers.slice(0);

			for ( var j = 0, l = handlers.length; j < l; j++ ) {
				var handleObj = handlers[ j ];

				// Filter the functions by class
				if ( all || namespace_re.test( handleObj.namespace ) ) {
					// Pass in a reference to the handler function itself
					// So that we can later remove it
					event.handler = handleObj.handler;
					event.data = handleObj.data;
					event.handleObj = handleObj;
	
					var ret = handleObj.handler.apply( this, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}

					if ( event.isImmediatePropagationStopped() ) {
						break;
					}
				}
			}
		}

		return event.result;
	},

	props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// store a copy of the original event object
		// and "clone" to set read-only properties
		var originalEvent = event;
		event = jQuery.Event( originalEvent );

		for ( var i = this.props.length, prop; i; ) {
			prop = this.props[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary
		if ( !event.target ) {
			// Fixes #1925 where srcElement might not be defined either
			event.target = event.srcElement || document;
		}

		// check if target is a textnode (safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Add relatedTarget, if necessary
		if ( !event.relatedTarget && event.fromElement ) {
			event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
		}

		// Calculate pageX/Y if missing and clientX/Y available
		if ( event.pageX == null && event.clientX != null ) {
			var doc = document.documentElement,
				body = document.body;

			event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
			event.pageY = event.clientY + (doc && doc.scrollTop  || body && body.scrollTop  || 0) - (doc && doc.clientTop  || body && body.clientTop  || 0);
		}

		// Add which for key events
		if ( event.which == null && (event.charCode != null || event.keyCode != null) ) {
			event.which = event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add metaKey to non-Mac browsers (use ctrl for PC's and Meta for Macs)
		if ( !event.metaKey && event.ctrlKey ) {
			event.metaKey = event.ctrlKey;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		// Note: button is not normalized, so don't use it
		if ( !event.which && event.button !== undefined ) {
			event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));
		}

		return event;
	},

	// Deprecated, use jQuery.guid instead
	guid: 1E8,

	// Deprecated, use jQuery.proxy instead
	proxy: jQuery.proxy,

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady,
			teardown: jQuery.noop
		},

		live: {
			add: function( handleObj ) {
				jQuery.event.add( this,
					liveConvert( handleObj.origType, handleObj.selector ),
					jQuery.extend({}, handleObj, {handler: liveHandler, guid: handleObj.handler.guid}) ); 
			},

			remove: function( handleObj ) {
				jQuery.event.remove( this, liveConvert( handleObj.origType, handleObj.selector ), handleObj );
			}
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} : 
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src ) {
	// Allow instantiation without the 'new' keyword
	if ( !this.preventDefault ) {
		return new jQuery.Event( src );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;
	// Event type
	} else {
		this.type = src;
	}

	// timeStamp is buggy for some events on Firefox(#3843)
	// So we won't rely on the native value
	this.timeStamp = jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		
		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Checks if an event happened on an element within another element
// Used in jQuery.event.special.mouseenter and mouseleave handlers
var withinElement = function( event ) {
	// Check if mouse(over|out) are still within the same parent element
	var parent = event.relatedTarget;

	// Firefox sometimes assigns relatedTarget a XUL element
	// which we cannot access the parentNode property of
	try {
		// Traverse up the tree
		while ( parent && parent !== this ) {
			parent = parent.parentNode;
		}

		if ( parent !== this ) {
			// set the correct event type
			event.type = event.data;

			// handle event if we actually just moused on to a non sub-element
			jQuery.event.handle.apply( this, arguments );
		}

	// assuming we've left the element since we most likely mousedover a xul element
	} catch(e) { }
},

// In case of event delegation, we only need to rename the event.type,
// liveHandler will take care of the rest.
delegate = function( event ) {
	event.type = event.data;
	jQuery.event.handle.apply( this, arguments );
};

// Create mouseenter and mouseleave events
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		setup: function( data ) {
			jQuery.event.add( this, fix, data && data.selector ? delegate : withinElement, orig );
		},
		teardown: function( data ) {
			jQuery.event.remove( this, fix, data && data.selector ? delegate : withinElement );
		}
	};
});

// submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function( data, namespaces ) {
			if ( this.nodeName.toLowerCase() !== "form" ) {
				jQuery.event.add(this, "click.specialSubmit", function( e ) {
					var elem = e.target,
						type = elem.type;

					if ( (type === "submit" || type === "image") && jQuery( elem ).closest("form").length ) {
						e.liveFired = undefined;
						return trigger( "submit", this, arguments );
					}
				});
	 
				jQuery.event.add(this, "keypress.specialSubmit", function( e ) {
					var elem = e.target,
						type = elem.type;

					if ( (type === "text" || type === "password") && jQuery( elem ).closest("form").length && e.keyCode === 13 ) {
						e.liveFired = undefined;
						return trigger( "submit", this, arguments );
					}
				});

			} else {
				return false;
			}
		},

		teardown: function( namespaces ) {
			jQuery.event.remove( this, ".specialSubmit" );
		}
	};

}

// change delegation, happens here so we have bind.
if ( !jQuery.support.changeBubbles ) {

	var changeFilters,

	getVal = function( elem ) {
		var type = elem.type, val = elem.value;

		if ( type === "radio" || type === "checkbox" ) {
			val = elem.checked;

		} else if ( type === "select-multiple" ) {
			val = elem.selectedIndex > -1 ?
				jQuery.map( elem.options, function( elem ) {
					return elem.selected;
				}).join("-") :
				"";

		} else if ( elem.nodeName.toLowerCase() === "select" ) {
			val = elem.selectedIndex;
		}

		return val;
	},

	testChange = function testChange( e ) {
		var elem = e.target, data, val;

		if ( !rformElems.test( elem.nodeName ) || elem.readOnly ) {
			return;
		}

		data = jQuery.data( elem, "_change_data" );
		val = getVal(elem);

		// the current data will be also retrieved by beforeactivate
		if ( e.type !== "focusout" || elem.type !== "radio" ) {
			jQuery.data( elem, "_change_data", val );
		}
		
		if ( data === undefined || val === data ) {
			return;
		}

		if ( data != null || val ) {
			e.type = "change";
			e.liveFired = undefined;
			return jQuery.event.trigger( e, arguments[1], elem );
		}
	};

	jQuery.event.special.change = {
		filters: {
			focusout: testChange, 

			beforedeactivate: testChange,

			click: function( e ) {
				var elem = e.target, type = elem.type;

				if ( type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select" ) {
					return testChange.call( this, e );
				}
			},

			// Change has to be called before submit
			// Keydown will be called before keypress, which is used in submit-event delegation
			keydown: function( e ) {
				var elem = e.target, type = elem.type;

				if ( (e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") ||
					(e.keyCode === 32 && (type === "checkbox" || type === "radio")) ||
					type === "select-multiple" ) {
					return testChange.call( this, e );
				}
			},

			// Beforeactivate happens also before the previous element is blurred
			// with this event you can't trigger a change event, but you can store
			// information
			beforeactivate: function( e ) {
				var elem = e.target;
				jQuery.data( elem, "_change_data", getVal(elem) );
			}
		},

		setup: function( data, namespaces ) {
			if ( this.type === "file" ) {
				return false;
			}

			for ( var type in changeFilters ) {
				jQuery.event.add( this, type + ".specialChange", changeFilters[type] );
			}

			return rformElems.test( this.nodeName );
		},

		teardown: function( namespaces ) {
			jQuery.event.remove( this, ".specialChange" );

			return rformElems.test( this.nodeName );
		}
	};

	changeFilters = jQuery.event.special.change.filters;

	// Handle when the input is .focus()'d
	changeFilters.focus = changeFilters.beforeactivate;
}

function trigger( type, elem, args ) {
	args[0].type = type;
	return jQuery.event.handle.apply( elem, args );
}

// Create "bubbling" focus and blur events
if ( document.addEventListener ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( focusCounts[fix]++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			}, 
			teardown: function() { 
				if ( --focusCounts[fix] === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};

		function handler( e ) { 
			e = jQuery.event.fix( e );
			e.type = fix;
			return jQuery.event.trigger( e, null, e.target );
		}
	});
}

jQuery.each(["bind", "one"], function( i, name ) {
	jQuery.fn[ name ] = function( type, data, fn ) {
		// Handle object literals
		if ( typeof type === "object" ) {
			for ( var key in type ) {
				this[ name ](key, data, type[key], fn);
			}
			return this;
		}
		
		if ( jQuery.isFunction( data ) || data === false ) {
			fn = data;
			data = undefined;
		}

		var handler = name === "one" ? jQuery.proxy( fn, function( event ) {
			jQuery( this ).unbind( event, handler );
			return fn.apply( this, arguments );
		}) : fn;

		if ( type === "unload" && name !== "one" ) {
			this.one( type, data, fn );

		} else {
			for ( var i = 0, l = this.length; i < l; i++ ) {
				jQuery.event.add( this[i], type, handler, data );
			}
		}

		return this;
	};
});

jQuery.fn.extend({
	unbind: function( type, fn ) {
		// Handle object literals
		if ( typeof type === "object" && !type.preventDefault ) {
			for ( var key in type ) {
				this.unbind(key, type[key]);
			}

		} else {
			for ( var i = 0, l = this.length; i < l; i++ ) {
				jQuery.event.remove( this[i], type, fn );
			}
		}

		return this;
	},
	
	delegate: function( selector, types, data, fn ) {
		return this.live( types, data, fn, selector );
	},
	
	undelegate: function( selector, types, fn ) {
		if ( arguments.length === 0 ) {
				return this.unbind( "live" );
		
		} else {
			return this.die( types, null, fn, selector );
		}
	},
	
	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},

	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			var event = jQuery.Event( type );
			event.preventDefault();
			event.stopPropagation();
			jQuery.event.trigger( event, data, this[0] );
			return event.result;
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			i = 1;

		// link all the functions, so any of them can unbind this click handler
		while ( i < args.length ) {
			jQuery.proxy( fn, args[ i++ ] );
		}

		return this.click( jQuery.proxy( fn, function( event ) {
			// Figure out which function to execute
			var lastToggle = ( jQuery.data( this, "lastToggle" + fn.guid ) || 0 ) % i;
			jQuery.data( this, "lastToggle" + fn.guid, lastToggle + 1 );

			// Make sure that clicks stop
			event.preventDefault();

			// and execute the function
			return args[ lastToggle ].apply( this, arguments ) || false;
		}));
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

var liveMap = {
	focus: "focusin",
	blur: "focusout",
	mouseenter: "mouseover",
	mouseleave: "mouseout"
};

jQuery.each(["live", "die"], function( i, name ) {
	jQuery.fn[ name ] = function( types, data, fn, origSelector /* Internal Use Only */ ) {
		var type, i = 0, match, namespaces, preType,
			selector = origSelector || this.selector,
			context = origSelector ? this : jQuery( this.context );
		
		if ( typeof types === "object" && !types.preventDefault ) {
			for ( var key in types ) {
				context[ name ]( key, data, types[key], selector );
			}
			
			return this;
		}

		if ( jQuery.isFunction( data ) ) {
			fn = data;
			data = undefined;
		}

		types = (types || "").split(" ");

		while ( (type = types[ i++ ]) != null ) {
			match = rnamespaces.exec( type );
			namespaces = "";

			if ( match )  {
				namespaces = match[0];
				type = type.replace( rnamespaces, "" );
			}

			if ( type === "hover" ) {
				types.push( "mouseenter" + namespaces, "mouseleave" + namespaces );
				continue;
			}

			preType = type;

			if ( type === "focus" || type === "blur" ) {
				types.push( liveMap[ type ] + namespaces );
				type = type + namespaces;

			} else {
				type = (liveMap[ type ] || type) + namespaces;
			}

			if ( name === "live" ) {
				// bind live handler
				for ( var j = 0, l = context.length; j < l; j++ ) {
					jQuery.event.add( context[j], "live." + liveConvert( type, selector ),
						{ data: data, selector: selector, handler: fn, origType: type, origHandler: fn, preType: preType } );
				}

			} else {
				// unbind live handler
				context.unbind( "live." + liveConvert( type, selector ), fn );
			}
		}
		
		return this;
	};
});

function liveHandler( event ) {
	var stop, maxLevel, related, match, handleObj, elem, j, i, l, data, close, namespace, ret,
		elems = [],
		selectors = [],
		events = jQuery.data( this, this.nodeType ? "events" : "__events__" );

	if ( typeof events === "function" ) {
		events = events.events;
	}

	// Make sure we avoid non-left-click bubbling in Firefox (#3861)
	if ( event.liveFired === this || !events || !events.live || event.button && event.type === "click" ) {
		return;
	}
	
	if ( event.namespace ) {
		namespace = new RegExp("(^|\\.)" + event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)");
	}

	event.liveFired = this;

	var live = events.live.slice(0);

	for ( j = 0; j < live.length; j++ ) {
		handleObj = live[j];

		if ( handleObj.origType.replace( rnamespaces, "" ) === event.type ) {
			selectors.push( handleObj.selector );

		} else {
			live.splice( j--, 1 );
		}
	}

	match = jQuery( event.target ).closest( selectors, event.currentTarget );

	for ( i = 0, l = match.length; i < l; i++ ) {
		close = match[i];

		for ( j = 0; j < live.length; j++ ) {
			handleObj = live[j];

			if ( close.selector === handleObj.selector && (!namespace || namespace.test( handleObj.namespace )) ) {
				elem = close.elem;
				related = null;

				// Those two events require additional checking
				if ( handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave" ) {
					event.type = handleObj.preType;
					related = jQuery( event.relatedTarget ).closest( handleObj.selector )[0];
				}

				if ( !related || related !== elem ) {
					elems.push({ elem: elem, handleObj: handleObj, level: close.level });
				}
			}
		}
	}

	for ( i = 0, l = elems.length; i < l; i++ ) {
		match = elems[i];

		if ( maxLevel && match.level > maxLevel ) {
			break;
		}

		event.currentTarget = match.elem;
		event.data = match.handleObj.data;
		event.handleObj = match.handleObj;

		ret = match.handleObj.origHandler.apply( match.elem, arguments );

		if ( ret === false || event.isPropagationStopped() ) {
			maxLevel = match.level;

			if ( ret === false ) {
				stop = false;
			}
			if ( event.isImmediatePropagationStopped() ) {
				break;
			}
		}
	}

	return stop;
}

function liveConvert( type, selector ) {
	return (type && type !== "*" ? type + "." : "") + selector.replace(rperiod, "`").replace(rspace, "&");
}

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.bind( name, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}
});

// Prevent memory leaks in IE
// Window isn't included so as not to unbind existing unload events
// More info:
//  - http://isaacschlueter.com/2006/10/msie-memory-leaks/
if ( window.attachEvent && !window.addEventListener ) {
	// ### TODO/EDIT: CHANGED BY SAP FOR PERFORMANCE MEASUREMENT ###
	if (false) { // actually this is not required in SAPUI5-supported browsers; disable for further central performance measurements   window.location.search && window.location.search.toLowerCase().indexOf("sap-ui-perf=true") == -1) {
		jQuery(window).bind("unload", function() {
			for ( var id in jQuery.cache ) {
				if ( jQuery.cache[ id ].handle ) {
					// Try/Catch is to handle iframes being unloaded, see #4280
					try {
						jQuery.event.remove( jQuery.cache[ id ].handle.elem );
					} catch(e) {}
				}
			}
		});
	}
}


/*!
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;
	
	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];
		
			parts.push( m[1] );
		
			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}
				
				set = posProcess( selector, set );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set;

	if ( !expr ) {
		return [];
	}

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var match,
			type = Expr.order[i];
		
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			var left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = context.getElementsByTagName( "*" );
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				var found, item,
					filter = Expr.filter[ type ],
					left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw "Syntax error, unrecognized expression: " + msg;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !/\W/.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			return context.getElementsByTagName( match[1] );
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace(/\\/g, "");
		},

		TAG: function( match, curLoop ) {
			return match[1].toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1].replace(/\\/g, "");
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},
	
	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},
		
		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			elem.parentNode.selectedIndex;
			
			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			return "text" === elem.type;
		},
		radio: function( elem ) {
			return "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return "checkbox" === elem.type;
		},

		file: function( elem ) {
			return "file" === elem.type;
		},
		password: function( elem ) {
			return "password" === elem.type;
		},

		submit: function( elem ) {
			return "submit" === elem.type;
		},

		image: function( elem ) {
			return "image" === elem.type;
		},

		reset: function( elem ) {
			return "reset" === elem.type;
		},

		button: function( elem ) {
			return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || Sizzle.getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( "Syntax error, unrecognized expression: " + name );
			}
		},

		CHILD: function( elem, match ) {
			var type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					if ( type === "first" ) { 
						return true; 
					}

					node = elem;

				case "last":
					while ( (node = node.nextSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					return true;

				case "nth":
					var first = match[2],
						last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}
					
					var doneName = match[0],
						parent = elem.parentNode;
	
					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 

						parent.sizcache = doneName;
					}
					
					var diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
		},
		
		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// If the nodes are siblings (or identical) we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Utility function for retreiving the text value of an array of DOM nodes
Sizzle.getText = function( elems ) {
	var ret = "", elem;

	for ( var i = 0; elems[i]; i++ ) {
		elem = elems[i];

		// Get the text from text nodes and CDATA nodes
		if ( elem.nodeType === 3 || elem.nodeType === 4 ) {
			ret += elem.nodeValue;

		// Traverse everything else, except comment nodes
		} else if ( elem.nodeType !== 8 ) {
			ret += Sizzle.getText( elem.childNodes );
		}
	}

	return ret;
};

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}
	
		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Make sure that attribute selectors are quoted
			query = query.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				if ( context.nodeType === 9 ) {
					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var old = context.getAttribute( "id" ),
						nid = old || id;

					if ( !old ) {
						context.setAttribute( "id", nid );
					}

					try {
						return makeArray( context.querySelectorAll( "#" + nid + " " + query ), extra );

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		
			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector,
		pseudoWorks = false;

	try {
		// This should fail with an exception
		// Gecko does not error, returns false instead
		matches.call( document.documentElement, "[test!='']:sizzle" );
	
	} catch( pseudoError ) {
		pseudoWorks = true;
	}

	if ( matches ) {
		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try { 
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						return matches.call( node, expr );
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}
	
	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;
			
			elem = elem[dir];

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833) 
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.POS;

jQuery.fn.extend({
	find: function( selector ) {
		var ret = this.pushStack( "", "find", selector ),
			length = 0;

		for ( var i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( var n = length; n < ret.length; n++ ) {
					for ( var r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},
	
	is: function( selector ) {
		return !!selector && jQuery.filter( selector, this ).length > 0;
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];

		if ( jQuery.isArray( selectors ) ) {
			var match, selector,
				matches = {},
				level = 1;

			if ( cur && selectors.length ) {
				for ( i = 0, l = selectors.length; i < l; i++ ) {
					selector = selectors[i];

					if ( !matches[selector] ) {
						matches[selector] = jQuery.expr.match.POS.test( selector ) ? 
							jQuery( selector, context || this.context ) :
							selector;
					}
				}

				while ( cur && cur.ownerDocument && cur !== context ) {
					for ( selector in matches ) {
						match = matches[selector];

						if ( match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match) ) {
							ret.push({ selector: selector, elem: cur, level: level });
						}
					}

					cur = cur.parentNode;
					level++;
				}
			}

			return ret;
		}

		var pos = POS.test( selectors ) ? 
			jQuery( selectors, context || this.context ) : null;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique(ret) : ret;
		
		return this.pushStack( ret, "closest", selectors );
	},
	
	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {
		if ( !elem || typeof elem === "string" ) {
			return jQuery.inArray( this[0],
				// If it receives a string, the selector is used
				// If it receives nothing, the siblings are used
				elem ? jQuery( elem ) : this.parent().children() );
		}
		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context || this.context ) :
				jQuery.makeArray( selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( elem.parentNode.firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );
		
		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call(arguments).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},
	
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return (elem === qualifier) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return (jQuery.inArray( elem, qualifier ) >= 0) === keep;
	});
}




var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnocache = /<(?:script|object|embed|option|style)/i,
	// checked="checked" or checked (html5)
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	raction = /\=([^="'>\s]+\/)>/g,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( text ) {
		if ( jQuery.isFunction(text) ) {
			return this.each(function(i) {
				var self = jQuery( this );

				self.text( text.call(this, i, self.text()) );
			});
		}

		if ( typeof text !== "object" && text !== undefined ) {
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
		}

		return jQuery.text( this );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append(this);
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		return this.each(function() {
			jQuery( this ).wrapAll( html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery(arguments[0]);
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery(arguments[0]).toArray() );
			return set;
		}
	},
	
	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					 elem.parentNode.removeChild( elem );
				}
			}
		}
		
		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}
		
		return this;
	},

	clone: function( events ) {
		// Do the clone
		var ret = this.map(function() {
			if ( !jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this) ) {
				// IE copies events bound via attachEvent when
				// using cloneNode. Calling detachEvent on the
				// clone will also remove the events from the orignal
				// In order to get around this, we use innerHTML.
				// Unfortunately, this means some modifications to
				// attributes in IE that are actually only stored
				// as properties will not be copied (such as the
				// the name attribute on an input).
				var html = this.outerHTML,
					ownerDocument = this.ownerDocument;

				if ( !html ) {
					var div = ownerDocument.createElement("div");
					div.appendChild( this.cloneNode(true) );
					html = div.innerHTML;
				}

				return jQuery.clean([html.replace(rinlinejQuery, "")
					// Handle the case in IE 8 where action=/test/> self-closes a tag
					.replace(raction, '="$1">')
					.replace(rleadingWhitespace, "")], ownerDocument)[0];
			} else {
				return this.cloneNode(true);
			}
		});

		// Copy the events from the original to the clone
		if ( events === true ) {
			cloneCopyEvent( this, ret );
			cloneCopyEvent( this.find("*"), ret.find("*") );
		}

		// Return the cloned set
		return ret;
	},

	html: function( value ) {
		if ( value === undefined ) {
			return this[0] && this[0].nodeType === 1 ?
				this[0].innerHTML.replace(rinlinejQuery, "") :
				null;

		// See if we can take a shortcut and just use innerHTML
		} else if ( typeof value === "string" && !rnocache.test( value ) &&
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {

			value = value.replace(rxhtmlTag, "<$1></$2>");

			try {
				for ( var i = 0, l = this.length; i < l; i++ ) {
					// Remove element nodes and prevent memory leaks
					if ( this[i].nodeType === 1 ) {
						jQuery.cleanData( this[i].getElementsByTagName("*") );
						this[i].innerHTML = value;
					}
				}

			// If using innerHTML throws an exception, use the fallback method
			} catch(e) {
				this.empty().append( value );
			}

		} else if ( jQuery.isFunction( value ) ) {
			this.each(function(i){
				var self = jQuery( this );

				self.html( value.call(this, i, self.html()) );
			});

		} else {
			this.empty().append( value );
		}

		return this;
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value );
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}
			
			fragment = results.fragment;
			
			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						i > 0 || results.cacheable || this.length > 1  ?
							fragment.cloneNode(true) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, evalScript );
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent(orig, ret) {
	var i = 0;

	ret.each(function() {
		if ( this.nodeName !== (orig[i] && orig[i].nodeName) ) {
			return;
		}

		var oldData = jQuery.data( orig[i++] ),
			curData = jQuery.data( this, oldData ),
			events = oldData && oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( var type in events ) {
				for ( var handler in events[ type ] ) {
					jQuery.event.add( this, type, events[ type ][ handler ], events[ type ][ handler ].data );
				}
			}
		}
	});
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults,
		doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);

	// Only cache "small" (1/2 KB) strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	if ( args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document &&
		!rnocache.test( args[0] ) && (jQuery.support.checkClone || !rchecked.test( args[0] )) ) {

		cacheable = true;
		cacheresults = jQuery.fragments[ args[0] ];
		if ( cacheresults ) {
			if ( cacheresults !== 1 ) {
				fragment = cacheresults;
			}
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ args[0] ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;
		
		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;
			
		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = (i > 0 ? this.clone(true) : this).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}
		
			return this.pushStack( ret, name, insert.selector );
		}
	};
});

jQuery.extend({
	clean: function( elems, context, fragment, scripts ) {
		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		var ret = [];

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" && !rhtml.test( elem ) ) {
				elem = context.createTextNode( elem );

			} else if ( typeof elem === "string" ) {
				// Fix "XHTML"-style tags in all browsers
				elem = elem.replace(rxhtmlTag, "<$1></$2>");

				// Trim whitespace, otherwise indexOf won't work as expected
				var tag = (rtagName.exec( elem ) || ["", ""])[1].toLowerCase(),
					wrap = wrapMap[ tag ] || wrapMap._default,
					depth = wrap[0],
					div = context.createElement("div");

				// Go to html and back, then peel off extra wrappers
				div.innerHTML = wrap[1] + elem + wrap[2];

				// Move to the right depth
				while ( depth-- ) {
					div = div.lastChild;
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !jQuery.support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					var hasBody = rtbody.test(elem),
						tbody = tag === "table" && !hasBody ?
							div.firstChild && div.firstChild.childNodes :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !hasBody ?
								div.childNodes :
								[];

					for ( var j = tbody.length - 1; j >= 0 ; --j ) {
						if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
							tbody[ j ].parentNode.removeChild( tbody[ j ] );
						}
					}

				}

				// IE completely kills leading whitespace when innerHTML is used
				if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
				}

				elem = div.childNodes;
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			for ( i = 0; ret[i]; i++ ) {
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );
				
				} else {
					if ( ret[i].nodeType === 1 ) {
						ret.splice.apply( ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))) );
					}
					fragment.appendChild( ret[i] );
				}
			}
		}

		return ret;
	},
	
	cleanData: function( elems ) {
		var data, id, cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;
		
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];
			
			if ( id ) {
				data = cache[ id ];
				
				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}
				}
				
				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}
				
				delete cache[ id ];
			}
		}
	}
});

function evalScript( i, elem ) {
	if ( elem.src ) {
		jQuery.ajax({
			url: elem.src,
			async: false,
			dataType: "script"
		});
	} else {
		jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || "" );
	}

	if ( elem.parentNode ) {
		elem.parentNode.removeChild( elem );
	}
}




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rdashAlpha = /-([a-z])/ig,
	rupper = /([A-Z])/g,
	rnumpx = /^-?\d+(?:px)?$/i,
	rnum = /^-?\d/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssWidth = [ "Left", "Right" ],
	cssHeight = [ "Top", "Bottom" ],
	curCSS,

	getComputedStyle,
	currentStyle,

	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn.css = function( name, value ) {
	// Setting 'undefined' is a no-op
	if ( arguments.length === 2 && value === undefined ) {
		return this;
	}

	return jQuery.access( this, name, value, true, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	});
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity", "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"zIndex": true,
		"fontWeight": true,
		"opacity": true,
		"zoom": true,
		"lineHeight": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			// Make sure that NaN and null values aren't set. See: #7116
			if ( typeof value === "number" && isNaN( value ) || value == null ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( typeof value === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		// Make sure that we're working with the right name
		var ret, origName = jQuery.camelCase( name ),
			hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name, origName );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {};

		// Remember the old values, and insert the new ones
		for ( var name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	},

	camelCase: function( string ) {
		return string.replace( rdashAlpha, fcamelCase );
	}
});

// DEPRECATED, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

jQuery.each(["height", "width"], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			var val;

			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					val = getWH( elem, name, extra );

				} else {
					jQuery.swap( elem, cssShow, function() {
						val = getWH( elem, name, extra );
					});
				}

				if ( val <= 0 ) {
					val = curCSS( elem, name, name );

					if ( val === "0px" && currentStyle ) {
						val = currentStyle( elem, name, name );
					}

					if ( val != null ) {
						// Should return "auto" instead of 0, use 0 for
						// temporary backwards-compat
						return val === "" || val === "auto" ? "0px" : val;
					}
				}

				if ( val < 0 || val == null ) {
					val = elem.style[ name ];

					// Should return "auto" instead of 0, use 0 for
					// temporary backwards-compat
					return val === "" || val === "auto" ? "0px" : val;
				}

				return typeof val === "string" ? val : val + "px";
			}
		},

		set: function( elem, value ) {
			if ( rnumpx.test( value ) ) {
				// ignore negative width and height values #1599
				value = parseFloat(value);

				if ( value >= 0 ) {
					return value + "px";
				}

			} else {
				return value;
			}
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
				(parseFloat(RegExp.$1) / 100) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style;

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// Set the alpha filter to set the opacity
			var opacity = jQuery.isNaN(value) ?
				"" :
				"alpha(opacity=" + value * 100 + ")",
				filter = style.filter || "";

			style.filter = ralpha.test(filter) ?
				filter.replace(ralpha, opacity) :
				style.filter + ' ' + opacity;
		}
	};
}

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, newName, name ) {
		var ret, defaultView, computedStyle;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( !(defaultView = elem.ownerDocument.defaultView) ) {
			return undefined;
		}

		if ( (computedStyle = defaultView.getComputedStyle( elem, null )) ) {
			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {
			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			elem.runtimeStyle.left = elem.currentStyle.left;
			style.left = name === "fontSize" ? "1em" : (ret || 0);
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			elem.runtimeStyle.left = rsLeft;
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWH( elem, name, extra ) {
	var which = name === "width" ? cssWidth : cssHeight,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight;

	if ( extra === "border" ) {
		return val;
	}

	jQuery.each( which, function() {
		if ( !extra ) {
			val -= parseFloat(jQuery.css( elem, "padding" + this )) || 0;
		}

		if ( extra === "margin" ) {
			val += parseFloat(jQuery.css( elem, "margin" + this )) || 0;

		} else {
			val -= parseFloat(jQuery.css( elem, "border" + this + "Width" )) || 0;
		}
	});

	return val;
}

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return (width === 0 && height === 0) || (!jQuery.support.reliableHiddenOffsets && (elem.style.display || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}




var jsc = jQuery.now(),
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rinput = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rnoContent = /^(?:GET|HEAD)$/,
	rbracket = /\[\]$/,
	jsre = /\=\?(&|$)/,
	rquery = /\?/,
	rts = /([?&])_=[^&]*/,
	rurl = /^(\w+:)?\/\/([^\/?#]+)/,
	r20 = /%20/g,
	rhash = /#.*$/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load;

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf(" ");
		if ( off >= 0 ) {
			var selector = url.slice(off, url.length);
			url = url.slice(0, off);
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = null;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			complete: function( res, status ) {
				// If successful, inject the HTML into all the matched elements
				if ( status === "success" || status === "notmodified" ) {
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(res.responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						res.responseText );
				}

				if ( callback ) {
					self.each( callback, [res.responseText, status, res] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param(this.serializeArray());
	},

	serializeArray: function() {
		return this.map(function() {
			return this.elements ? jQuery.makeArray(this.elements) : this;
		})
		.filter(function() {
			return this.name && !this.disabled &&
				(this.checked || rselectTextarea.test(this.nodeName) ||
					rinput.test(this.type));
		})
		.map(function( i, elem ) {
			var val = jQuery(this).val();

			return val == null ?
				null :
				jQuery.isArray(val) ?
					jQuery.map( val, function( val, i ) {
						return { name: elem.name, value: val };
					}) :
					{ name: elem.name, value: val };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function( i, o ) {
	jQuery.fn[o] = function( f ) {
		return this.bind(o, f);
	};
});

jQuery.extend({
	get: function( url, data, callback, type ) {
		// shift arguments if data argument was omited
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = null;
		}

		return jQuery.ajax({
			type: "GET",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},

	getScript: function( url, callback ) {
		return jQuery.get(url, null, callback, "script");
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get(url, data, callback, "json");
	},

	post: function( url, data, callback, type ) {
		// shift arguments if data argument was omited
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = {};
		}

		return jQuery.ajax({
			type: "POST",
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	},

	ajaxSetup: function( settings ) {
		jQuery.extend( jQuery.ajaxSettings, settings );
	},

	ajaxSettings: {
		url: location.href,
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		username: null,
		password: null,
		traditional: false,
		*/
		// This function can be overriden by calling jQuery.ajaxSetup
		xhr: function() {
			return new window.XMLHttpRequest();
		},
		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			script: "text/javascript, application/javascript",
			json: "application/json, text/javascript",
			text: "text/plain",
			_default: "*/*"
		}
	},

	ajax: function( origSettings ) {
		var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings),
			jsonp, status, data, type = s.type.toUpperCase(), noContent = rnoContent.test(type);

		s.url = s.url.replace( rhash, "" );

		// Use original (not extended) context object if it was provided
		s.context = origSettings && origSettings.context != null ? origSettings.context : s;

		// convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Handle JSONP Parameter Callbacks
		if ( s.dataType === "jsonp" ) {
			if ( type === "GET" ) {
				if ( !jsre.test( s.url ) ) {
					s.url += (rquery.test( s.url ) ? "&" : "?") + (s.jsonp || "callback") + "=?";
				}
			} else if ( !s.data || !jsre.test(s.data) ) {
				s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";
			}
			s.dataType = "json";
		}

		// Build temporary JSONP function
		if ( s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url)) ) {
			jsonp = s.jsonpCallback || ("jsonp" + jsc++);

			// Replace the =? sequence both in the query string and the data
			if ( s.data ) {
				s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");
			}

			s.url = s.url.replace(jsre, "=" + jsonp + "$1");

			// We need to make sure
			// that a JSONP style response is executed properly
			s.dataType = "script";

			// Handle JSONP-style loading
			var customJsonp = window[ jsonp ];

			window[ jsonp ] = function( tmp ) {
				if ( jQuery.isFunction( customJsonp ) ) {
					customJsonp( tmp );

				} else {
					// Garbage collect
					window[ jsonp ] = undefined;

					try {
						delete window[ jsonp ];
					} catch( jsonpError ) {}
				}

				data = tmp;
				jQuery.handleSuccess( s, xhr, status, data );
				jQuery.handleComplete( s, xhr, status, data );
				
				if ( head ) {
					head.removeChild( script );
				}
			};
		}

		if ( s.dataType === "script" && s.cache === null ) {
			s.cache = false;
		}

		if ( s.cache === false && noContent ) {
			var ts = jQuery.now();

			// try replacing _= if it is there
			var ret = s.url.replace(rts, "$1_=" + ts);

			// if nothing was replaced, add timestamp to the end
			s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
		}

		// If data is available, append data to url for GET/HEAD requests
		if ( s.data && noContent ) {
			s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
		}

		// Watch for a new set of requests
		if ( s.global && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Matches an absolute URL, and saves the domain
		var parts = rurl.exec( s.url ),
			remote = parts && (parts[1] && parts[1].toLowerCase() !== location.protocol || parts[2].toLowerCase() !== location.host);

		// If we're requesting a remote document
		// and trying to load JSON or Script with a GET
		if ( s.dataType === "script" && type === "GET" && remote ) {
			var head = document.getElementsByTagName("head")[0] || document.documentElement;
			var script = document.createElement("script");
			if ( s.scriptCharset ) {
				script.charset = s.scriptCharset;
			}
			script.src = s.url;

			// Handle Script loading
			if ( !jsonp ) {
				var done = false;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function() {
					if ( !done && (!this.readyState ||
							this.readyState === "loaded" || this.readyState === "complete") ) {
						done = true;
						jQuery.handleSuccess( s, xhr, status, data );
						jQuery.handleComplete( s, xhr, status, data );

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}
					}
				};
			}

			// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
			// This arises when a base node is used (#2709 and #4378).
			head.insertBefore( script, head.firstChild );

			// We handle everything using the script element injection
			return undefined;
		}

		var requestDone = false;

		// Create the request object
		var xhr = s.xhr();

		if ( !xhr ) {
			return;
		}

		// Open the socket
		// Passing null username, generates a login popup on Opera (#2865)
		if ( s.username ) {
			xhr.open(type, s.url, s.async, s.username, s.password);
		} else {
			xhr.open(type, s.url, s.async);
		}

		// Need an extra try/catch for cross domain requests in Firefox 3
		try {
			// Set content-type if data specified and content-body is valid for this type
			if ( (s.data != null && !noContent) || (origSettings && origSettings.contentType) ) {
				xhr.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[s.url] ) {
					xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url]);
				}

				if ( jQuery.etag[s.url] ) {
					xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url]);
				}
			}

			// Set header so the called script knows that it's an XMLHttpRequest
			// Only send the header if it's not a remote XHR
			if ( !remote ) {
				xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			}

			// Set the Accepts header for the server, depending on the dataType
			xhr.setRequestHeader("Accept", s.dataType && s.accepts[ s.dataType ] ?
				s.accepts[ s.dataType ] + ", */*; q=0.01" :
				s.accepts._default );
		} catch( headerError ) {}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false ) {
			// Handle the global AJAX counter
			if ( s.global && jQuery.active-- === 1 ) {
				jQuery.event.trigger( "ajaxStop" );
			}

			// close opended socket
			xhr.abort();
			return false;
		}

		if ( s.global ) {
			jQuery.triggerGlobal( s, "ajaxSend", [xhr, s] );
		}

		// Wait for a response to come back
		var onreadystatechange = xhr.onreadystatechange = function( isTimeout ) {
			// The request was aborted
			if ( !xhr || xhr.readyState === 0 || isTimeout === "abort" ) {
				// Opera doesn't call onreadystatechange before this point
				// so we simulate the call
				if ( !requestDone ) {
					jQuery.handleComplete( s, xhr, status, data );
				}

				requestDone = true;
				if ( xhr ) {
					xhr.onreadystatechange = jQuery.noop;
				}

			// The transfer is complete and the data is available, or the request timed out
			} else if ( !requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout") ) {
				requestDone = true;
				xhr.onreadystatechange = jQuery.noop;

				status = isTimeout === "timeout" ?
					"timeout" :
					!jQuery.httpSuccess( xhr ) ?
						"error" :
						s.ifModified && jQuery.httpNotModified( xhr, s.url ) ?
							"notmodified" :
							"success";

				var errMsg;

				if ( status === "success" ) {
					// Watch for, and catch, XML document parse errors
					try {
						// process the data (runs the xml through httpData regardless of callback)
						data = jQuery.httpData( xhr, s.dataType, s );
					} catch( parserError ) {
						status = "parsererror";
						errMsg = parserError;
					}
				}

				// Make sure that the request was successful or notmodified
				if ( status === "success" || status === "notmodified" ) {
					// JSONP handles its own success callback
					if ( !jsonp ) {
						jQuery.handleSuccess( s, xhr, status, data );
					}
				} else {
					jQuery.handleError( s, xhr, status, errMsg );
				}

				// Fire the complete handlers
				if ( !jsonp ) {
					jQuery.handleComplete( s, xhr, status, data );
				}

				if ( isTimeout === "timeout" ) {
					xhr.abort();
				}

				// Stop memory leaks
				if ( s.async ) {
					xhr = null;
				}
			}
		};

		// Override the abort handler, if we can (IE 6 doesn't allow it, but that's OK)
		// Opera doesn't fire onreadystatechange at all on abort
		try {
			var oldAbort = xhr.abort;
			xhr.abort = function() {
				if ( xhr ) {
					// oldAbort has no call property in IE7 so
					// just do it this way, which works in all
					// browsers
					Function.prototype.call.call( oldAbort, xhr );
				}

				onreadystatechange( "abort" );
			};
		} catch( abortError ) {}

		// Timeout checker
		if ( s.async && s.timeout > 0 ) {
			setTimeout(function() {
				// Check to see if the request is still happening
				if ( xhr && !requestDone ) {
					onreadystatechange( "timeout" );
				}
			}, s.timeout);
		}

		// Send the data
		try {
			xhr.send( noContent || s.data == null ? null : s.data );

		} catch( sendError ) {
			jQuery.handleError( s, xhr, null, sendError );

			// Fire the complete handlers
			jQuery.handleComplete( s, xhr, status, data );
		}

		// firefox 1.5 doesn't fire statechange for sync requests
		if ( !s.async ) {
			onreadystatechange();
		}

		// return XMLHttpRequest to allow aborting the request etc.
		return xhr;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction(value) ? value() : value;
				s[ s.length ] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
			};
		
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}
		
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray(a) || a.jquery ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});
			
		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[prefix], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join("&").replace(r20, "+");
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray(obj) && obj.length ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
			}
		});
			
	} else if ( !traditional && obj != null && typeof obj === "object" ) {
		if ( jQuery.isEmptyObject( obj ) ) {
			add( prefix, "" );

		// Serialize object item.
		} else {
			jQuery.each( obj, function( k, v ) {
				buildParams( prefix + "[" + k + "]", v, traditional, add );
			});
		}
					
	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	handleError: function( s, xhr, status, e ) {
		// If a local callback was specified, fire it
		if ( s.error ) {
			s.error.call( s.context, xhr, status, e );
		}

		// Fire the global callback
		if ( s.global ) {
			jQuery.triggerGlobal( s, "ajaxError", [xhr, s, e] );
		}
	},

	handleSuccess: function( s, xhr, status, data ) {
		// If a local callback was specified, fire it and pass it the data
		if ( s.success ) {
			s.success.call( s.context, data, status, xhr );
		}

		// Fire the global callback
		if ( s.global ) {
			jQuery.triggerGlobal( s, "ajaxSuccess", [xhr, s] );
		}
	},

	handleComplete: function( s, xhr, status ) {
		// Process result
		if ( s.complete ) {
			s.complete.call( s.context, xhr, status );
		}

		// The request was completed
		if ( s.global ) {
			jQuery.triggerGlobal( s, "ajaxComplete", [xhr, s] );
		}

		// Handle the global AJAX counter
		if ( s.global && jQuery.active-- === 1 ) {
			jQuery.event.trigger( "ajaxStop" );
		}
	},
		
	triggerGlobal: function( s, type, args ) {
		(s.context && s.context.url == null ? jQuery(s.context) : jQuery.event).trigger(type, args);
	},

	// Determines if an XMLHttpRequest was successful or not
	httpSuccess: function( xhr ) {
		try {
			// IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450
			return !xhr.status && location.protocol === "file:" ||
				xhr.status >= 200 && xhr.status < 300 ||
				xhr.status === 304 || xhr.status === 1223;
		} catch(e) {}

		return false;
	},

	// Determines if an XMLHttpRequest returns NotModified
	httpNotModified: function( xhr, url ) {
		var lastModified = xhr.getResponseHeader("Last-Modified"),
			etag = xhr.getResponseHeader("Etag");

		if ( lastModified ) {
			jQuery.lastModified[url] = lastModified;
		}

		if ( etag ) {
			jQuery.etag[url] = etag;
		}

		return xhr.status === 304;
	},

	httpData: function( xhr, type, s ) {
		var ct = xhr.getResponseHeader("content-type") || "",
			xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
			data = xml ? xhr.responseXML : xhr.responseText;

		if ( xml && data.documentElement.nodeName === "parsererror" ) {
			jQuery.error( "parsererror" );
		}

		// Allow a pre-filtering function to sanitize the response
		// s is checked to keep backwards compatibility
		if ( s && s.dataFilter ) {
			data = s.dataFilter( data, type );
		}

		// The filter can actually parse the response
		if ( typeof data === "string" ) {
			// Get the JavaScript object, if JSON is used.
			if ( type === "json" || !type && ct.indexOf("json") >= 0 ) {
				data = jQuery.parseJSON( data );

			// If the type is "script", eval it in global context
			} else if ( type === "script" || !type && ct.indexOf("javascript") >= 0 ) {
				jQuery.globalEval( data );
			}
		}

		return data;
	}

});

/*
 * Create the request object; Microsoft failed to properly
 * implement the XMLHttpRequest in IE7 (can't request local files),
 * so we use the ActiveXObject when it is available
 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
 * we need a fallback.
 */
if ( window.ActiveXObject ) {
	jQuery.ajaxSettings.xhr = function() {
		if ( window.location.protocol !== "file:" ) {
			try {
				return new window.XMLHttpRequest();
			} catch(xhrError) {}
		}

		try {
			return new window.ActiveXObject("Microsoft.XMLHTTP");
		} catch(activeError) {}
	};
}

// Does this browser support XHR requests?
jQuery.support.ajax = !!jQuery.ajaxSettings.xhr();




var elemdisplay = {},
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)(.*)$/,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	];

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback);

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[i];
				display = elem.style.display;

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !jQuery.data(elem, "olddisplay") && display === "none" ) {
					display = elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( display === "" && jQuery.css( elem, "display" ) === "none" ) {
					jQuery.data(elem, "olddisplay", defaultDisplay(elem.nodeName));
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[i];
				display = elem.style.display;

				if ( display === "" || display === "none" ) {
					elem.style.display = jQuery.data(elem, "olddisplay") || "";
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				var display = jQuery.css( this[i], "display" );

				if ( display !== "none" ) {
					jQuery.data( this[i], "olddisplay", display );
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				this[i].style.display = "none";
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed(speed, easing, callback);

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete );
		}

		return this[ optall.queue === false ? "each" : "queue" ](function() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			var opt = jQuery.extend({}, optall), p,
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				self = this;

			for ( p in prop ) {
				var name = jQuery.camelCase( p );

				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
					p = name;
				}

				if ( prop[p] === "hide" && hidden || prop[p] === "show" && !hidden ) {
					return opt.complete.call(this);
				}

				if ( isElement && ( p === "height" || p === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height
					// animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {
						if ( !jQuery.support.inlineBlockNeedsLayout ) {
							this.style.display = "inline-block";

						} else {
							var display = defaultDisplay(this.nodeName);

							// inline-level elements accept inline-block;
							// block-level elements need to be inline with layout
							if ( display === "inline" ) {
								this.style.display = "inline-block";

							} else {
								this.style.display = "inline";
								this.style.zoom = 1;
							}
						}
					}
				}

				if ( jQuery.isArray( prop[p] ) ) {
					// Create (if needed) and add to specialEasing
					(opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
					prop[p] = prop[p][0];
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			opt.curAnim = jQuery.extend({}, prop);

			jQuery.each( prop, function( name, val ) {
				var e = new jQuery.fx( self, opt, name );

				if ( rfxtypes.test(val) ) {
					e[ val === "toggle" ? hidden ? "show" : "hide" : val ]( prop );

				} else {
					var parts = rfxnum.exec(val),
						start = e.cur() || 0;

					if ( parts ) {
						var end = parseFloat( parts[2] ),
							unit = parts[3] || "px";

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( self, name, (end || 1) + unit);
							start = ((end || 1) / e.cur()) * start;
							jQuery.style( self, name, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ((parts[1] === "-=" ? -1 : 1) * end) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			});

			// For JS strict compliance
			return true;
		});
	},

	stop: function( clearQueue, gotoEnd ) {
		var timers = jQuery.timers;

		if ( clearQueue ) {
			this.queue([]);
		}

		this.each(function() {
			// go in reverse order so anything added to the queue during the loop is ignored
			for ( var i = timers.length - 1; i >= 0; i-- ) {
				if ( timers[i].elem === this ) {
					if (gotoEnd) {
						// force the next step to be the last
						timers[i](true);
					}

					timers.splice(i, 1);
				}
			}
		});

		// start the next in the queue if the last step wasn't forced
		if ( !gotoEnd ) {
			this.dequeue();
		}

		return this;
	}

});

function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice(0,num)), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show", 1),
	slideUp: genFx("hide", 1),
	slideToggle: genFx("toggle", 1),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

		// Queueing
		opt.old = opt.complete;
		opt.complete = function() {
			if ( opt.queue !== false ) {
				jQuery(this).dequeue();
			}
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p, n, firstNum, diff ) {
			return firstNum + diff * p;
		},
		swing: function( p, n, firstNum, diff ) {
			return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		if ( !options.orig ) {
			options.orig = {};
		}
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		(jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null) ) {
			return this.elem[ this.prop ];
		}

		var r = parseFloat( jQuery.css( this.elem, this.prop ) );
		return r && r > -10000 ? r : 0;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = jQuery.now();
		this.start = from;
		this.end = to;
		this.unit = unit || this.unit || "px";
		this.now = this.start;
		this.pos = this.state = 0;

		function t( gotoEnd ) {
			return self.step(gotoEnd);
		}

		t.elem = this.elem;

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval(fx.tick, fx.interval);
		}
	},

	// Simple 'show' function
	show: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any
		// flash of content
		this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom(this.cur(), 0);
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var t = jQuery.now(), done = true;

		if ( gotoEnd || t >= this.options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			this.options.curAnim[ this.prop ] = true;

			for ( var i in this.options.curAnim ) {
				if ( this.options.curAnim[i] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( this.options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {
					var elem = this.elem,
						options = this.options;

					jQuery.each( [ "", "X", "Y" ], function (index, value) {
						elem.style[ "overflow" + value ] = options.overflow[index];
					} );
				}

				// Hide the element if the "hide" operation was done
				if ( this.options.hide ) {
					jQuery(this.elem).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( this.options.hide || this.options.show ) {
					for ( var p in this.options.curAnim ) {
						jQuery.style( this.elem, p, this.options.orig[p] );
					}
				}

				// Execute the complete function
				this.options.complete.call( this.elem );
			}

			return false;

		} else {
			var n = t - this.startTime;
			this.state = n / this.options.duration;

			// Perform the easing function, defaults to swing
			var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
			var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
			this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
			this.now = this.start + ((this.end - this.start) * this.pos);

			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timers = jQuery.timers;

		for ( var i = 0; i < timers.length; i++ ) {
			if ( !timers[i]() ) {
				timers.splice(i--, 1);
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

function defaultDisplay( nodeName ) {
	if ( !elemdisplay[ nodeName ] ) {
		var elem = jQuery("<" + nodeName + ">").appendTo("body"),
			display = elem.css("display");

		elem.remove();

		if ( display === "none" || display === "" ) {
			display = "block";
		}

		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	jQuery.fn.offset = function( options ) {
		var elem = this[0], box;

		if ( options ) { 
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		var doc = elem.ownerDocument,
			docElem = doc.documentElement;

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box || { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow(doc),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = (win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop ),
			scrollLeft = (win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft),
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	jQuery.fn.offset = function( options ) {
		var elem = this[0];

		if ( options ) { 
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		jQuery.offset.initialize();

		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			doc = elem.ownerDocument,
			docElem = doc.documentElement,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.offset = {
	initialize: function() {
		var body = document.body, container = document.createElement("div"), innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat( jQuery.css(body, "marginTop") ) || 0,
			html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";

		jQuery.extend( container.style, { position: "absolute", top: 0, left: 0, margin: 0, border: 0, width: "1px", height: "1px", visibility: "hidden" } );

		container.innerHTML = html;
		body.insertBefore( container, body.firstChild );
		innerDiv = container.firstChild;
		checkDiv = innerDiv.firstChild;
		td = innerDiv.nextSibling.firstChild.firstChild;

		this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
		this.doesAddBorderForTableAndCells = (td.offsetTop === 5);

		checkDiv.style.position = "fixed";
		checkDiv.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
		checkDiv.style.position = checkDiv.style.top = "";

		innerDiv.style.overflow = "hidden";
		innerDiv.style.position = "relative";

		this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);

		this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);

		body.removeChild( container );
		body = container = innerDiv = checkDiv = table = td = null;
		jQuery.offset.initialize = jQuery.noop;
	},

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		jQuery.offset.initialize();

		if ( jQuery.offset.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},
	
	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = (position === "absolute" && jQuery.inArray('auto', [curCSSTop, curCSSLeft]) > -1),
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is absolute
		if ( calculatePosition ) {
			curPosition = curElem.position();
		}

		curTop  = calculatePosition ? curPosition.top  : parseInt( curCSSTop,  10 ) || 0;
		curLeft = calculatePosition ? curPosition.left : parseInt( curCSSLeft, 10 ) || 0;

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if (options.top != null) {
			props.top = (options.top - curOffset.top) + curTop;
		}
		if (options.left != null) {
			props.left = (options.left - curOffset.left) + curLeft;
		}
		
		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({
	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( ["Left", "Top"], function( i, name ) {
	var method = "scroll" + name;

	jQuery.fn[ method ] = function(val) {
		var elem = this[0], win;
		
		if ( !elem ) {
			return null;
		}

		if ( val !== undefined ) {
			// Set the scroll offset
			return this.each(function() {
				win = getWindow( this );

				if ( win ) {
					win.scrollTo(
						!i ? val : jQuery(win).scrollLeft(),
						 i ? val : jQuery(win).scrollTop()
					);

				} else {
					this[ method ] = val;
				}
			});
		} else {
			win = getWindow( elem );

			// Return the scroll offset
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
				jQuery.support.boxModel && win.document.documentElement[ method ] ||
					win.document.body[ method ] :
				elem[ method ];
		}
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each([ "Height", "Width" ], function( i, name ) {

	var type = name.toLowerCase();

	// innerHeight and innerWidth
	jQuery.fn["inner" + name] = function() {
		return this[0] ?
			parseFloat( jQuery.css( this[0], type, "padding" ) ) :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn["outer" + name] = function( margin ) {
		return this[0] ?
			parseFloat( jQuery.css( this[0], type, margin ? "margin" : "border" ) ) :
			null;
	};

	jQuery.fn[ type ] = function( size ) {
		// Get window width or height
		var elem = this[0];
		if ( !elem ) {
			return size == null ? null : this;
		}
		
		if ( jQuery.isFunction( size ) ) {
			return this.each(function( i ) {
				var self = jQuery( this );
				self[ type ]( size.call( this, i, self[ type ]() ) );
			});
		}

		if ( jQuery.isWindow( elem ) ) {
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			return elem.document.compatMode === "CSS1Compat" && elem.document.documentElement[ "client" + name ] ||
				elem.document.body[ "client" + name ];

		// Get document width or height
		} else if ( elem.nodeType === 9 ) {
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
			return Math.max(
				elem.documentElement["client" + name],
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
				elem.body["offset" + name], elem.documentElement["offset" + name]
			);

		// Get or set width or height on the element
		} else if ( size === undefined ) {
			var orig = jQuery.css( elem, type ),
				ret = parseFloat( orig );

			return jQuery.isNaN( ret ) ? orig : ret;

		// Set the width or height on the element (default to pixels if value is unitless)
		} else {
			return this.css( type, typeof size === "string" ? size : size + "px" );
		}
	};

});


})(window);

/*!
 * jQuery UI 1.8.7
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
	return;
}

$.extend( $.ui, {
	version: "1.8.7",

	keyCode: {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91, // COMMAND
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93, // COMMAND_RIGHT
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91 // COMMAND
	}
});

// plugins
$.fn.extend({
	_focus: $.fn.focus,
	focus: function( delay, fn ) {
		return typeof delay === "number" ?
			this.each(function() {
				var elem = this;
				setTimeout(function() {
					$( elem ).focus();
					if ( fn ) {
						fn.call( elem );
					}
				}, delay );
			}) :
			this._focus.apply( this, arguments );
	},

	scrollParent: function() {
		var scrollParent;
		if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) && (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		}

		return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

$.each( [ "Width", "Height" ], function( i, name ) {
	var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
		type = name.toLowerCase(),
		orig = {
			innerWidth: $.fn.innerWidth,
			innerHeight: $.fn.innerHeight,
			outerWidth: $.fn.outerWidth,
			outerHeight: $.fn.outerHeight
		};

	function reduce( elem, size, border, margin ) {
		$.each( side, function() {
			size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
			if ( border ) {
				size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
			}
			if ( margin ) {
				size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
			}
		});
		return size;
	}

	$.fn[ "inner" + name ] = function( size ) {
		if ( size === undefined ) {
			return orig[ "inner" + name ].call( this );
		}

		return this.each(function() {
			$( this ).css( type, reduce( this, size ) + "px" );
		});
	};

	$.fn[ "outer" + name] = function( size, margin ) {
		if ( typeof size !== "number" ) {
			return orig[ "outer" + name ].call( this, size );
		}

		return this.each(function() {
			$( this).css( type, reduce( this, size, true, margin ) + "px" );
		});
	};
});

// selectors
function visible( element ) {
	return !$( element ).parents().andSelf().filter(function() {
		return $.curCSS( this, "visibility" ) === "hidden" ||
			$.expr.filters.hidden( this );
	}).length;
}

$.extend( $.expr[ ":" ], {
	data: function( elem, i, match ) {
		return !!$.data( elem, match[ 3 ] );
	},

	focusable: function( element ) {
		var nodeName = element.nodeName.toLowerCase(),
			tabIndex = $.attr( element, "tabindex" );
		if ( "area" === nodeName ) {
			var map = element.parentNode,
				mapName = map.name,
				img;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName )
			? !element.disabled
			: "a" == nodeName
				? element.href || !isNaN( tabIndex )
				: !isNaN( tabIndex ))
			// the element and all of its ancestors must be visible
			&& visible( element );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" );
		return ( isNaN( tabIndex ) || tabIndex >= 0 ) && $( element ).is( ":focusable" );
	}
});

// support
$(function() {
	var body = document.body,
		div = body.appendChild( div = document.createElement( "div" ) );

	$.extend( div.style, {
		minHeight: "100px",
		height: "auto",
		padding: 0,
		borderWidth: 0
	});

	$.support.minHeight = div.offsetHeight === 100;
	$.support.selectstart = "onselectstart" in div;

	// set display to none to avoid a layout bug in IE
	// http://dev.jquery.com/ticket/4014
	body.removeChild( div ).style.display = "none";
});





// deprecated
$.extend( $.ui, {
	// $.ui.plugin is deprecated.  Use the proxy pattern instead.
	plugin: {
		add: function( module, option, set ) {
			var proto = $.ui[ module ].prototype;
			for ( var i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode ) {
				return;
			}
	
			for ( var i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	
	// will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
	contains: function( a, b ) {
		return document.compareDocumentPosition ?
			a.compareDocumentPosition( b ) & 16 :
			a !== b && a.contains( b );
	},
	
	// only used by resizable
	hasScroll: function( el, a ) {
	
		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}
	
		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;
	
		if ( el[ scroll ] > 0 ) {
			return true;
		}
	
		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},
	
	// these are odd functions, fix the API or move into individual plugins
	isOverAxis: function( x, reference, size ) {
		//Determines when x coordinate is over "b" element axis
		return ( x > reference ) && ( x < ( reference + size ) );
	},
	isOver: function( y, x, top, left, height, width ) {
		//Determines when x, y coordinates is over "b" element
		return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
	}
});

})( jQuery );

/*
 * jQuery UI Position 1.8.7
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Position
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var horizontalPositions = /left|center|right/,
	verticalPositions = /top|center|bottom/,
	center = "center",
	_position = $.fn.position,
	_offset = $.fn.offset;

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var target = $( options.of ),
		targetElem = target[0],
		collision = ( options.collision || "flip" ).split( " " ),
		offset = options.offset ? options.offset.split( " " ) : [ 0, 0 ],
		targetWidth,
		targetHeight,
		basePosition;

	if ( targetElem.nodeType === 9 ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: 0, left: 0 };
	// TODO: use $.isWindow() in 1.9
	} else if ( targetElem.setTimeout ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: target.scrollTop(), left: target.scrollLeft() };
	} else if ( targetElem.preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
		targetWidth = targetHeight = 0;
		basePosition = { top: options.of.pageY, left: options.of.pageX };
	} else {
		targetWidth = target.outerWidth();
		targetHeight = target.outerHeight();
		basePosition = target.offset();
	}

	// force my and at to have valid horizontal and veritcal positions
	// if a value is missing or invalid, it will be converted to center 
	$.each( [ "my", "at" ], function() {
		var pos = ( options[this] || "" ).split( " " );
		if ( pos.length === 1) {
			pos = horizontalPositions.test( pos[0] ) ?
				pos.concat( [center] ) :
				verticalPositions.test( pos[0] ) ?
					[ center ].concat( pos ) :
					[ center, center ];
		}
		pos[ 0 ] = horizontalPositions.test( pos[0] ) ? pos[ 0 ] : center;
		pos[ 1 ] = verticalPositions.test( pos[1] ) ? pos[ 1 ] : center;
		options[ this ] = pos;
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	// normalize offset option
	offset[ 0 ] = parseInt( offset[0], 10 ) || 0;
	if ( offset.length === 1 ) {
		offset[ 1 ] = offset[ 0 ];
	}
	offset[ 1 ] = parseInt( offset[1], 10 ) || 0;

	if ( options.at[0] === "right" ) {
		basePosition.left += targetWidth;
	} else if (options.at[0] === center ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[1] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[1] === center ) {
		basePosition.top += targetHeight / 2;
	}

	basePosition.left += offset[ 0 ];
	basePosition.top += offset[ 1 ];

	return this.each(function() {
		var elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseInt( $.curCSS( this, "marginLeft", true ) ) || 0,
			marginTop = parseInt( $.curCSS( this, "marginTop", true ) ) || 0,
			collisionWidth = elemWidth + marginLeft +
				parseInt( $.curCSS( this, "marginRight", true ) ) || 0,
			collisionHeight = elemHeight + marginTop +
				parseInt( $.curCSS( this, "marginBottom", true ) ) || 0,
			position = $.extend( {}, basePosition ),
			collisionPosition;

		if ( options.my[0] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[0] === center ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[1] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[1] === center ) {
			position.top -= elemHeight / 2;
		}

		// prevent fractions (see #5280)
		position.left = Math.round( position.left );
		position.top = Math.round( position.top );

		collisionPosition = {
			left: position.left - marginLeft,
			top: position.top - marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[i] ] ) {
				$.ui.position[ collision[i] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: offset,
					my: options.my,
					at: options.at
				});
			}
		});

		if ( $.fn.bgiframe ) {
			elem.bgiframe();
		}
		elem.offset( $.extend( position, { using: options.using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
			position.left = over > 0 ? position.left - over : Math.max( position.left - data.collisionPosition.left, position.left );
		},
		top: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
			position.top = over > 0 ? position.top - over : Math.max( position.top - data.collisionPosition.top, position.top );
		}
	},

	flip: {
		left: function( position, data ) {
			if ( data.at[0] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					-data.targetWidth,
				offset = -2 * data.offset[ 0 ];
			position.left += data.collisionPosition.left < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		},
		top: function( position, data ) {
			if ( data.at[1] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
				myOffset = data.my[ 1 ] === "top" ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					-data.targetHeight,
				offset = -2 * data.offset[ 1 ];
			position.top += data.collisionPosition.top < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		}
	}
};

// offset setter from jQuery 1.4
if ( !$.offset.setOffset ) {
	$.offset.setOffset = function( elem, options ) {
		// set position first, in-case top/left are set even on static elem
		if ( /static/.test( $.curCSS( elem, "position" ) ) ) {
			elem.style.position = "relative";
		}
		var curElem   = $( elem ),
			curOffset = curElem.offset(),
			curTop    = parseInt( $.curCSS( elem, "top",  true ), 10 ) || 0,
			curLeft   = parseInt( $.curCSS( elem, "left", true ), 10)  || 0,
			props     = {
				top:  (options.top  - curOffset.top)  + curTop,
				left: (options.left - curOffset.left) + curLeft
			};
		
		if ( 'using' in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	};

	$.fn.offset = function( options ) {
		var elem = this[ 0 ];
		if ( !elem || !elem.ownerDocument ) { return null; }
		if ( options ) { 
			return this.each(function() {
				$.offset.setOffset( this, options );
			});
		}
		return _offset.call( this );
	};
}

}( jQuery ));

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * @class Provides base functionality of the SAP jQuery plugin as extension of the jQuery framework.<br/>
 * See also <a href="http://api.jquery.com/jQuery/">jQuery</a> for details.<br/>
 * Although these functions appear as static ones, they are meant to be used on jQuery instances.<br/>
 * If not stated differently, the functions follow the fluent interface paradigm and return the jQuery instance for chaining of statements.
 *
 * Example for usage of an instance method:
 * <pre>
 *   var oRect = jQuery("#myDiv").rect();
 *   alert("Top Position: " + oRect.top);
 * </pre>
 *
 * @name jQuery
 * @static
 * @public
 */

(function() {
	//ensure not to initialize twice
	// one could also provide more specific tests but as global should come first this would be over-engineered
	//if(jQuery.sap && jQuery.sap.includeScript && jQuery.sap.includeStyleSheet) {
	if (jQuery.sap) {
		return;
	}
	
	
	// this block allows interrupting/debugging the bootstrap
	if (document.location.href.indexOf("sap-bootstrap-debug") > -1) {
		var fnReloadUi5 = function (sUrl) {
			var libs = "sap.ui.commons,sap.ui.ux3";
			var theme = "sap_platinum";
			// INFO: this will not work for XHTML pages
			document.write("<script src='" + sUrl
					+ "' data-sap-ui-libs='" + libs
					+ "' data-sap-ui-theme='" + theme
					+"'></" + "script>");
			var ori = document.getElementById("sap-ui-bootstrap");
			ori.parentNode.removeChild(ori);
			throw new Error("Aborting UI5 bootstrap and restarting from: " + sUrl);
		};
		
		var sReloadUrl = "http://localhost:8080/sapui5/resources/sap-ui-core.js";
		var bReloadUi5 = false;
		
		// now the reload switch can be turned on, the URL can be changed, or even the reload function can be replaced
		debugger;
		
		if (bReloadUi5) {
			fnReloadUi5(sReloadUrl);
		}
	}


	/**
	 * Window that the sap plugin has been initialized for.
	 * @private
	 */
	var _window = window;

	var _earlyErrors = [];

	var _sBootstrapUrl = undefined;

	/*
	 * Merged, raw (un-interpreted) configuration data from the following sources
	 * (last one wins)
	 * <ol>
	 * <li>global configuration object <code>window["sap-ui-config"]</code>
	 * <li><code>data-sap-ui-config</code> attribute of the bootstrap script tag
	 * <li>other <code>data-sap-ui-<i>xyz</i></code> attributes of the bootstrap tag
	 * </ol>
	 */
	var oCfgData = _window["sap-ui-config"] = (function() {

		function normalize(o) {
			jQuery.each(o, function(i, v) {
				var il=i.toLowerCase();
				if ( !o.hasOwnProperty(il) ) {
					o[il] = v;
					delete o[i];
				}
			});
			return o;
		}

		var oCfg = normalize(_window["sap-ui-config"] || {}),
			reConfigurator = /\/download\/configurator[\/\?]/,
			reBootScripts = /\/(sap-ui-(core|custom|boot)(-.*)?)\.js(\W|$)/,
			reResources = /^(.*\/)?resources\//,
			oScriptTag;

		oCfg.resourceroots = oCfg.resourceroots || {};

		// check all script tags that have a src attribute
		jQuery("script[src]").each(function() {
			var src = this.getAttribute("src"),m;
			if ( m = src.match(reConfigurator) ) {
				// guess 1: script tag src contains "/download/configurator[/?]" (for dynamically created bootstrap files)
				oScriptTag = this;
				oCfg.resourceroots[''] = oCfg.resourceroots[''] || src.substring(0, m.index) + "/resources/";
				_sBootstrapUrl = src;
				return false;
			} else if ( m = src.match(reBootScripts) ) {
				// guess 2: src contains one of the well known boot script names
				oScriptTag = this;
				oCfg.resourceroots[''] = oCfg.resourceroots[''] || src.substring(0, m.index) + "/";
				_sBootstrapUrl = src;
				return false;
			} else if ( this.id == 'sap-ui-bootstrap' && (m=src.match(reResources)) ) {
				// guess 2: script tag has well known id and src contains "resources/"
				oScriptTag = this;
				oCfg.resourceroots[''] = oCfg.resourceroots[''] || m[0];
				_sBootstrapUrl = src;
				return false;
			}
		});

		oCfg['xx-loadallmode'] = !!(_sBootstrapUrl && _sBootstrapUrl.match(/(^|\/)(sap-?ui5|[^\/]+-all).js$/));
		
		// if a script tag has been identified, collect its configuration info
		if ( oScriptTag ) {
			// evaluate the config attribute first - if present
			var sConfig = oScriptTag.getAttribute("data-sap-ui-config");
			if ( sConfig ) {
				try {
				  jQuery.extend(oCfg, normalize((new Function("return {" + sConfig + "};"))())); // TODO jQuery.parseJSON would be better but imposes unwanted restrictions on valid syntax
				} catch(e) {
				  // no log yet, how to report this error?
				  _earlyErrors.push("failed to parse data-sap-ui-config attribute: " + (e.message || e));
				}
			}

			// merge with any existing "data-sap-ui-" attributes
			jQuery.each(oScriptTag.attributes, function(i, attr) {
				var m = attr.name.match(/^data-sap-ui-(.*)$/);
				if ( m ) {
					// the following (deactivated) conversion would implements multi-word names like "resource-roots"
					m = m[1].toLowerCase(); // .replace(/\-([a-z])/g, function(s,w) { return w.toUpperCase(); })
					if ( m === 'resourceroots' ) {
						// merge map entries instead of overwriting map
						jQuery.extend(oCfg[m], jQuery.parseJSON(attr.value));
					} else if ( m !== 'config' ) {
						oCfg[m] = attr.value;
					}
				}
			});
		}

		return oCfg;
	}());

	// check whether noConflict must be used...
	if ( oCfgData.noconflict === true || oCfgData.noconflict === "true"  || oCfgData.noconflict === "x" ) {
		jQuery.noConflict();
	}

	/**
	 * Root Namespace for the jQuery plug-in provided by SAP AG.
	 *
	 * @version 1.2.0
	 * @namespace
	 * @public
	 * @static
	 */
	jQuery.sap = {};

	// -------------------------- Logging ------------------------------------- 

	(function() {

		var FATAL=0, ERROR=1, WARNING=2, INFO=3, DEBUG=4, TRACE=5;
		
		/**
		 * Unique prefix for this instance of the core in a multi-frame environment.
		 */
		var sWindowName = (window.top == window) ? "" : "[" + window.location.pathname.split('/').slice(-1)[0] + "] ";
		// Note: comparison must use type coercion (==, not ===), otherwise test fails in IE
	
		/**
		 * The array that holds the log entries that have been recorded so far
		 */
		var aLog = [];
	
		/**
		 * Maximum log level to be recorded (per component).
		 */
		var mMaxLevel = { '' : ERROR };
	
		/**
		 * Registered listener to be informed about new log entries.
		 */
		var oListener = null;
		
		function pad0(i,w) { return ("000" + String(i)).slice(-w); }

		function level(sComponent) {
			return (!sComponent || isNaN(mMaxLevel[sComponent])) ? mMaxLevel[''] : mMaxLevel[sComponent]; 
		}
		
		/**
		 * Creates a new log entry depending on its level and component.
		 * 
		 * If the given level is higher than the max level for the given component
		 * (or higher than the global level, if no component is given), 
		 * then no entry is created.
		 */
		function log(iLevel, sMessage, sDetails, sComponent) {
			if (iLevel <= level(sComponent) ) {
				var oNow = new Date(),
					oLogEntry = {
						date     : pad0(oNow.getHours(),2)+":"+pad0(oNow.getMinutes(),2)+":"+pad0(oNow.getSeconds(),2),
						time     : pad0(oNow.getFullYear(),4) + "-" + pad0(oNow.getMonth()+1,2) + "-" + pad0(oNow.getDate(),2),
						timestamp: oNow.getTime(),
						level    : iLevel,
						message  : sMessage || "",
						details  : sDetails || "",
						component: sComponent || ""
					};
				aLog.push( oLogEntry );
				if (oListener) {
					oListener.onLogEntry(oLogEntry);
				}
				
				/*
				 * Console Log, also tries to log to the window.console, if available. 
                 *
				 * Unfortunately, the support for window.console is quite different between the UI5 browsers. The most important differences are:
				 * - in IE (checked until IE9), the console object does not exist in a window, until the developer tools are opened for that window. 
				 *   After opening the dev tools, the console remains available even when the tools are closed again. Only using a new window (or tab)
				 *   restores the old state without console.
				 *   When the console is available, it provides most standard methods, but not debug and trace  
				 * - in FF3.6 the console is not available, until FireBug is opened. It disappears again, when fire bug is closed.
				 *   But when the settings for a web site are stored (convenience), the console remains open
				 *   When the console is available, it supports all relevant methods
				 * - in FF9.0, the console is always available, but method assert is only available when firebug is open
				 * - in Webkit browsers, the console object is always available and has all required methods   
				 */
				if (window.console) { // in IE and FF, console might not exist; in FF it might even disappear
					var logText = oLogEntry.date + " " + oLogEntry.time + " " + sWindowName + oLogEntry.message + " - " + oLogEntry.details + " " + oLogEntry.component;
					switch(iLevel) {
					case FATAL:  
					case ERROR: console.error(logText); break;
					case WARNING: console.warn(logText); break;
					case INFO: console.info(logText); break;
					case DEBUG: console.debug ? console.debug(logText) : console.log(logText); break; // debug not available in IE, fallback to log
					case TRACE: console.trace ? console.trace(logText) : console.log(logText); break; // trace not available in IE, fallback to log (no trace)
					}
				}				
				return oLogEntry;
			}
		}
		
		/**
		 * @class A Logger class  
		 * @param sDefaultComponent
		 * @name jQuery.sap.log.Logger
		 * @since 1.1.2
		 * @public
		 */
		function Logger(sDefaultComponent) {

			/**
			 * Creates a new fatal-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance for method chaining
			 * @name jQuery.sap.log.Logger#fatal
			 * @function
			 * @public
			 */
			this.fatal = function (sMessage, sDetails, sComponent) {
				log(FATAL, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			
			/**
			 * Creates a new error-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#error
			 * @function
			 * @public
			 */
			this.error = function error(sMessage, sDetails, sComponent) {
				log(ERROR, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			
			/**
			 * Creates a new warning-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#warning
			 * @function
			 * @public
			 */
			this.warning = function warning(sMessage, sDetails, sComponent) {
				log(WARNING, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new info-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#info
			 * @function
			 * @public
			 */
			this.info = function info(sMessage, sDetails, sComponent) {
				log(INFO, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new debug-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#debug
			 * @function
			 * @public
			 */
			this.debug = function debug(sMessage, sDetails, sComponent) {
				log(DEBUG, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new trace-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log-instance
			 * @name jQuery.sap.log.Logger#trace
			 * @function
			 * @public
			 */
			this.trace = function trace(sMessage, sDetails, sComponent) {
				log(TRACE, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};

			/**
			 * Defines the maximum jQuery.sap.log.Level of log entries that will be recorded. 
			 * Log entries with a higher (less important) log level will be omitted from the log.
			 * When a component name is given, the log level will be configured for that component 
			 * only, otherwise the log level for the default component of this logger is set. 
			 * For the global logger, the global default level is set.
			 * 
			 * <b>Note</b>: Setting a global default log level has no impact on already defined 
			 * component log levels. They always override the global default log level.
			 *  
			 * @param {jQuery.sap.log.Level} iLogLevel
			 * @param {string} [sComponent] The log component to set the log level for. 
			 * @return {jQuery.sap.log} The global logger to allow method chaining
			 * @name jQuery.sap.log.Logger#setLevel
			 * @function
			 * @public
			 */
			this.setLevel = function setLevel(iLogLevel, sComponent) {
				sComponent = sComponent || sDefaultComponent || '';
				mMaxLevel[sComponent] = iLogLevel;
				var mBackMapping = [];
				jQuery.each(jQuery.sap.log.LogLevel, function(idx, v){
					mBackMapping[v] = idx;
				});
				log(INFO, "Changing log level " + (sComponent ? "for '" + sComponent + "' " : "") + "to " + mBackMapping[iLogLevel], "", "jQuery.sap.log");
				return this;
			};
			
			/**
			 * Returns the log level currently effective for the given component. 
			 * If no component is given or when no level has been configured for a 
			 * given component, the log level for the default component of this logger is returned.
			 *  
			 * @param {string} [sComponent] Name of the component to retrieve the log level for
			 * @return {int} The log level for the given component or the default log level 
			 * @name jQuery.sap.log.Logger#getLevel
			 * @function
			 * @public
			 * @since 1.1.2
			 */
			this.getLevel = function getLevel(sComponent) {
				return level(sComponent || sDefaultComponent);
			};

		}
		
		/**
		 * A Logging API for JavaScript.
		 *
		 * Provides methods to manage a client-side log and to create entries in it. Each of the logging methods
		 * {@link jQuery.sap.log.#debug}, {@link jQuery.sap.log.#info}, {@link jQuery.sap.log.#warning}, 
		 * {@link jQuery.sap.log.#error} and {@link jQuery.sap.log.#fatal} creates and records a log entry, 
		 * containing a timestamp, a log level, a message with details and a component info. 
		 * The log level will be one of {@link jQuery.sap.log.Level} and equals the name of the concrete logging method.
		 *
		 * By using the {@link jQuery.sap.log#setLevel} method, consumers can determine the least important
		 * log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric 
		 * values represent less important levels). The initially set level depends on the mode that UI5 is running in. 
		 * When the optimized sources are executed, the default level will be {@link jQuery.sap.log.Level.ERROR}. 
		 * For normal (debug sources), the default level is {@link jQuery.sap.log.Level.DEBUG}.
		 *
		 * All logging methods allow to specify a <b>component</b>. These components are simple strings and
		 * don't have a special meaning to the UI5 framework. However they can be used to semantically group
		 * log entries that belong to the same software component (or feature). There are two APIs that help  
		 * to manage logging for such a component. With <code>{@link jQuery.sap.log.getLogger}(sComponent)</code>,
		 * one can retrieve a logger that automatically adds the given <code>sComponent</code> as component 
		 * parameter to each log entry, if no other component is specified. Typically, JavaScript code will  
		 * retrieve such a logger once during startup and reuse it for the rest of its lifecycle.
		 * Second, the {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level 
		 * for a specific component only. This allows a more fine granular control about the created logging entries.
		 * {@link jQuery.sap.log.Logger.getLevel} allows to retrieve the currently effective log level for a given 
		 * component.
		 * 
		 * {@link jQuery.sap.log#getLog} returns an array of the currently collected log entries.
		 *
		 * Furthermore, a listener can be registered to the log. It will be notified whenever a new entry
		 * is added to the log. The listener can be used for displaying log entries in a separate page area,
		 * or for sending it to some external target (server).
		 *
		 * @author SAP AG
		 * @since 0.9.0
		 * @namespace
		 * @public
		 * @borrows jQuery.sap.log.Logger#fatal as this.fatal
		 * @borrows jQuery.sap.log.Logger#error as this.error
		 * @borrows jQuery.sap.log.Logger#warning as this.warning
		 * @borrows jQuery.sap.log.Logger#info as this.info
		 * @borrows jQuery.sap.log.Logger#debug as this.debug
		 * @borrows jQuery.sap.log.Logger#trace as this.trace
		 * @borrows jQuery.sap.log.Logger#getLevel as this.getLevel
		 * @borrows jQuery.sap.log.Logger#setLevel as this.setLevel
		 */
		jQuery.sap.log = jQuery.extend(new Logger(), /** @lends jQuery.sap.log */ {
			
			/**
			 * Enumeration of the configurable log levels that a Logger should persist to the log.
			 *
			 * Only if the current LogLevel is higher than the level {@link jQuery.sap.log.Level} of the currently added log entry,
			 * then this very entry is permanently added to the log. Otherwise it is ignored.
			 * @see jQuery.sap.log.Logger#setLevel
			 * @namespace
			 * @public
			 */
			Level : {

				/**
				 * Do not log anything
				 * @public
				 */
				NONE : FATAL-1,
				
				/**
				 * Fatal level. Use this for logging unrecoverable situations
				 * @public
				 */
				FATAL : FATAL,
				
				/**
				 * Error level. Use this for logging of erroneous but still recoverable situations
				 * @public
				 */
				ERROR : ERROR,
				
				/**
				 * Warning level. Use this for logging unwanted but foreseen situations
				 * @public
				 */
				WARNING : WARNING,
				
				/**
				 * Info level. Use this for logging information of purely informative nature
				 * @public
				 */
				INFO : INFO,
				
				/**
				 * Debug level. Use this for logging information necessary for debugging
				 * @public
				 */
				DEBUG : DEBUG,
				
				/**
				 * Trace level. Use this for tracing the program flow.
				 * @public
				 */
				TRACE : TRACE, /* TODO Think about changing to 10 and thus to pull out of logging... -> Make tracing explicit */
			
				/**
				 * Trace level to log everything.
				 */
				ALL : (TRACE + 1) /* TODO if TRACE is changed to make sure this is 6 again. There would then be some special TRACE handling. */
			},

			/**
			 * Returns a {@link jQuery.sap.log.Logger} for the given component.
			 * 
			 * The method might or might not return the same logger object across multiple calls.
			 * While loggers are assumed to be light weight objects, consumers should try to 
			 * avoid redundant calls and instead keep references to already retrieved loggers.
			 * 
			 * @param {string} sComponent Component to create the logger for
			 * @return {jQuery.sap.log.Logger} A logger for the component. 
			 * @public
			 * @static
			 * @since 1.1.2
			 */
			getLogger : function(sComponent) {
				return new Logger(sComponent);
			},
			
			/**
			 * Returns the logged entries recorded so far as an array. 
			 * 
			 * Log entries are plain JavaScript objects with the following properties
			 * <ul>
			 * <li>timestamp {number} point in time when the entry was created
			 * <li>level {int} LogLevel level of the entry
			 * <li>message {string} message text of the entry
	         * </ul>
	         * 
			 * @return {object[]} an array containing the recorded log entries
			 * @public
			 * @static
			 * @since 1.1.2
			 */
			getLogEntries : function () {
				return aLog.slice();
			},

			/**
			 * Allows setting a new LogListener that will be notified for new log entries.
			 * The given object must provide method <code>onLogEntry</code> and can also be informed
			 * about <code>onDetachFromLog</code> and <code>onAttachToLog</code>
			 * @param {object} oNewListener The new listener object that should be informed
			 * @return {jQuery.sap.log} The global logger
			 * @public
			 * @static
			 */
			setLogListener : function setLogListener(oNewListener) {
				// detach current listener (if any)
				if ( oListener && oListener.onDetachFromLog ) {
					oListener.onDetachFromLog(this);
				};
				oListener = oNewListener;
				// callback to new listener
				if ( oListener && oListener.onAttachToLog ) {
					oListener.onAttachToLog(this);
				};
				return this;
			}
		});

		/**
		 * Deprecated duplicate of {@link jQuery.sap.log.Level}.
		 * @deprecated Since 1.1.2. To streamline the Logging API a bit, the separation between Level and LogLevel has been given up. 
		 * Use the (enriched) enumeration {@link jQuery.sap.log.Level} instead.   
		 * @namespace Enumeration of levels that can be used in a call to {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent).  
		 * @public
		 */
		jQuery.sap.log.LogLevel = jQuery.sap.log.Level;

		/**
		 * Retrieves the currently recorded log entries.
		 * @deprecated Since 1.1.2. To avoid confusion with getLogger, this method has been renamed to {@link jQuery.sap.log.getLogEntries}.   
		 * @function
		 * @public
		 * @static
		 */
		jQuery.sap.log.getLog = jQuery.sap.log.getLogEntries;

		/**
		 * A simple assertion mechanism that logs a message when a given condition is not met. 
		 *
		 * <b>Note:</b> Calls to this method might be removed when the JavaScript code
		 *              is optimized during build. Therefore, callers should not rely on any side effects
		 *              of this method.
		 *
		 * @public
		 * @static
		 */
		jQuery.sap.assert = function(bResult, sMessage) {
			if( !bResult ) {
				if ( window.console && console.assert ) { 
					console.assert(bResult, sWindowName + sMessage);
				} else {
					// console is not always available (IE, FF) and IE doesn't support console.assert
					jQuery.sap.log.debug("[Assertions] " + sMessage);
				}
				// debugger; // TODO introduce configuration for assertions
			}
		};

		// against all our rules: use side effect of assert to differentiate between optimized and productive code 
		jQuery.sap.assert( !!(mMaxLevel[''] = DEBUG), "will be removed in optimized version");
		if ( oCfgData.loglevel ) {
			jQuery.sap.log.setLevel(jQuery.sap.log.Level[oCfgData.loglevel.toUpperCase()] || parseInt(oCfgData.loglevel,10)); 
		}
		
		jQuery.sap.log.info("SAP Logger started.");
		// log early errors
		jQuery.each(_earlyErrors, function(i,e) { jQuery.sap.log.error(e); }); _earlyErrors = null;
	
		
	}());
	
	// ---------------------------------------------------------------------------------------------------
	
	/**
	 * Dummy implementation of a measure to be docked to a debug.js for implementation.
	 *
	 * <b>Note:</b> Calls to this method might be removed when the JavaScript code
	 *              is optimized during build.
	 * @public
	 * @static
	 */
	jQuery.sap.measure = function(iAction, sId, sText) {
		return this;
	};

	/**
	 * Returns a new constructor function that creates objects with
	 * the given prototype.
	 *
	 * @return {function} the newly created constructor function
	 * @public
	 * @static
	 */
	jQuery.sap.factory = function factory(oPrototype) {
		function Factory() {}
		Factory.prototype = oPrototype;
		return Factory;
	};

	/**
	 * Returns a new object which has the given oPrototype as its prototype.
	 *
	 * If several objects with the same prototype are to be created,
	 * {@link jQuery.sap.factory} should be used instead.
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.newObject = function newObject(oPrototype) {
		return new (jQuery.sap.factory(oPrototype))();
	};

	/**
	 * Returns a new function that returns the given <code>oValue</code> (using its closure).
	 *
	 * Avoids the need for a dedicated member for the value.
	 *
	 * As closures don't come for free, this function should only be used when polluting
	 * the enclosing object is an absolute "must-not" (as it is the case in public base classes).
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.getter = function getter(oValue) {
		return function() {
			return oValue;
		};
	};

	/**
	 * Returns a JavaScript object which is identified by a sequence of names.
	 *
	 * A call to <code>getObject("a.b.C")</code> has essentially the same effect
	 * as accessing <code>window.a.b.C</code> but with the difference that missing
	 * intermediate objects (a or b in the example above) don't lead to an exception.
	 *
	 * When the addressed object exists, it is simply returned. If it doesn't exists,
	 * the behavior depends on the value of the second, optional parameter
	 * <code>iNoCreates</code> (assuming 'n' to be the number of names in the name sequence):
	 * <ul>
	 * <li>NaN: if iNoCreates is not a number and the addressed object doesn't exist,
	 *          then <code>getObject()</code> returns <code>undefined</code>.
	 * <li>0 &lt; iNoCreates &lt; n: any non-existing intermediate object is created, except
	 *          the <i>last</i> <code>iNoCreates</code> ones.
	 * </ul>
	 *
	 * Example:
	 * <pre>
	 *   getObject()            -- returns the context object (either param or window)
	 *   getObject("a.b.C")     -- will only try to get a.b.C and return undefined if not found.
	 *   getObject("a.b.C", 0)  -- will create a, b, and C in that order if they don't exists
	 *   getObject("a.b.c", 1)  -- will create a and b, but not C.
	 * </pre>
	 *
	 * When a <code>oContext</code> is given, the search starts in that object.
	 * Otherwise it starts in the <code>window</code> object that this plugin
	 * has been created in.
	 *
	 * Note: Although this method internally uses <code>object["key"]</code> to address object
	 *       properties, it does not support all possible characters in a name.
	 *       Especially the dot ('.') is not supported in the individual name segments,
	 *       as it is always interpreted as a name separator.
	 *
	 * @param {string} sName  a dot separated sequence of names that identify the required object
	 * @param {int}    [iNoCreates=NaN] number of objects (from the right) that should not be created
	 * @param {object} [oContext=window] the context to execute the search in
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.getObject = function getObject(sName, iNoCreates, oContext) {
		var oObject = oContext || _window,
			aNames = (sName || "").split("."),
			l = aNames.length,
			iEndCreate = isNaN(iNoCreates) ? 0 : l - iNoCreates;

		for (var i=0; oObject && i<l; i++) {
			if (!oObject[aNames[i]] && i<iEndCreate ) {
				oObject[aNames[i]] = {};
			}
			oObject = oObject[aNames[i]];
		}
		return oObject;

	};

	// ---------------------- require/declare --------------------------------------------------------

	/**
	 * A map of URL prefixes keyed by the corresponding module name prefix.
	 * @see jQuery.sap.registerModulePath
	 *
	 * Note that the empty prefix ('') will always match and thus serves as a fallback.
	 */
	var mUrlPrefixes = { '' : 'resources/' };

	// take resource roots from configuration
	if ( oCfgData.resourceroots ) {
		jQuery.extend(true, mUrlPrefixes, oCfgData.resourceroots);
	}

	// dump the URL prefixes
	jQuery.sap.log.info("URL prefixes set to:");
	for(var n in mUrlPrefixes) {
		jQuery.sap.log.info("  " + (n ? "'" + n + "'" : "(default)") + " : " + mUrlPrefixes[n]);
	}

	// find prefix for module name
	var _getModulePath = function _getModulePath(sModuleName, sSuffix) {

		// split name into segments
		var aSegments = sModuleName.split(/\./);

		// search for a defined name prefix, starting with the full name and successively removing one segment
		for(var l=aSegments.length; l>=0; l--) {
			var sNamePrefix = aSegments.slice(0, l).join('.');
			if ( mUrlPrefixes[sNamePrefix] ) {
				var sResult = mUrlPrefixes[sNamePrefix];
				if ( l < aSegments.length ) {
					sResult += aSegments.slice(l).join("/");
				}
				if ( sResult.slice(-1) === '/' ) {
					sResult = sResult.slice(0, -1);
				}
				return sResult + (sSuffix || '');
			}
		}

		jQuery.sap.assert(false, "should never happen");
	};

	/* ==== Begin of HACK ==== */
	// this HACK wraps the _getModulePath function to implement some special handling
	// for the jquery.sap. modules, which contain a dot in their name
	var _HACK_orig_getModulePath = _getModulePath;
	var _getModulePath = function HACK_modified_getModulePath(sModuleName, sSuffix) {
		if ( sModuleName.indexOf("jquery.sap.") === 0 ) {
			sModuleName = sModuleName.replace(/\./gi, "%2E");
			var sPath = _HACK_orig_getModulePath(sModuleName, sSuffix);
			return sPath.replace(/%2E/gi, ".");
		}
		return _HACK_orig_getModulePath(sModuleName, sSuffix);
	};
	/* ==== End of HACK ==== */

	/**
	 * Constructs an URL to load the module with the given name and file type (suffix).
	 *
	 * Searches the longest prefix of the given module name for which a registration
	 * exists (see {@link jQuery.sap.registerModulePath}) and replaces that prefix
	 * by the registered URL prefix.
	 *
	 * The remainder of the module name is appended to the URL, replacing any dot with a slash.
	 *
	 * Finally, the given suffix (typically a file name extension) is added (unconverted).
	 *
	 * The returned name (without the suffix) doesn't end with a slash.
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.getModulePath = function(sModuleName, sSuffix) {
		return _getModulePath(sModuleName, sSuffix);
	};

	/**
	 * Registers an URL prefix for a module name prefix.
	 *
	 * Before a module is loaded, the longest registered prefix of its module name
	 * is searched for and the associated URL prefix is used as a prefix for the request URL.
	 * The remainder of the module name is attached to the request URL by replacing
	 * dots ('.') with slashes ('/').
	 *
	 * The registration and search operates on full name segments only. So when a prefix
	 *
	 *    'sap.com'  ->  'http://www.sap.com/ui5/resources/'
	 *
	 * is registered, then it will match the name
	 *
	 *    'sap.com.Button'
	 *
	 * but not
	 *
	 *    'sap.commons.Button'
	 *
	 * Note that the empty prefix ('') will always match and thus serves as a fallback for
	 * any search.
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.registerModulePath = function registerModulePath(sModuleName, sUrlPrefix) {
		// must not be empty
		sUrlPrefix = sUrlPrefix || '.';

		// ensure that the prefix ends with a '/'
		if ( sUrlPrefix.slice(-1) != '/' ) {
			sUrlPrefix += '/';
		}

		mUrlPrefixes[sModuleName] = sUrlPrefix;

		jQuery.sap.log.info("sap.registerModulePath ('" + sModuleName + "', '" + sUrlPrefix + "')");

	};


	/**
	 * Set of modules that have been loaded (required) so far
	 * @private
	 */
	var mModules = {};

	// make the module loading more verbose
	var _verbose = false; // not yet configurable as Url params are not available here... oCfgData.debug === true || oCfgData.debug === "true" || oCfgData.debug === "x";

	/**
	 * Stack of modules that are currently executed.
	 * Allows to identify the containing module in case of multi module files (e.g. sap-ui-core)
	 */
	var _execStack = [ ];
	var sLogPrefix = "";

	/**
	 * Check whether a given module has been loaded / declared already
	 * @param {string} sModuleName name of the module to be checked
	 * @return {boolean} whether the module has been declared already
	 * @public
	 * @static
	 */
	jQuery.sap.isDeclared = function isDeclared(sModuleName) {
		return !!mModules[sModuleName];
	};

	/**
	 * Declares a module as existing.
	 *
	 * By default, this function assumes that the module will create a JavaScript object
	 * with the same name as the module. As a convenience it ensures that the parent
	 * namespace for that object exists (by calling jQuery.sap.getObject).
	 * If such an object creation is not desired, <code>bCreateNamespace</code> must be set to false.
	 *
	 * @param {string || object} sModuleName name of the module to be declared
	 *                           or in case of an object {modName: "...", type: "..."}
	 *                           where modName is the name of the module and the type
	 *                           could be a specific dot separated extension e.g.
	 *                           <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
	 *                           loads <code>sap/ui/core/Dev.view.js</code> and
	 *                           registers as <code>sap.ui.core.Dev.view</code>
	 * @param {string} [bCreateNamespace=true] whether to create the parent namespace
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.declare = function declare(sModuleName, bCreateNamespace) {
		if ( _verbose ) {
			jQuery.sap.log.debug(sLogPrefix + "sap.declare '" + sModuleName + "'");
		}

		// check for an object as parameter for sModuleName
		// in case of this the object contains the module name and the type
		// which could be {modName: "sap.ui.core.Dev", type: "view"}
		var sType = "";
		if (typeof(sModuleName) === "object") {
			sType = sModuleName.type ? "." + sModuleName.type : "";
			sModuleName = sModuleName.modName + sType;
		}

		if ( !jQuery.sap.isDeclared(sModuleName) ) {
			if ( !mModules[sModuleName] ) {
				mModules[sModuleName] = { };
			}
			mModules[sModuleName].state = 'ready';
		}

		// identify the bootstrap module
		// Note: this is only a guess and fails e.g. when multiple modules are loaded via a script tag
		// to make it safe, we could convert 'declare' calls to e.g. 'subdeclare' calls at build time.
		if ( _execStack.length === 0 && sModuleName !== "jquery.sap.global" ) {
			_execStack.push(sModuleName);
			mModules[sModuleName].url = mModules[sModuleName].url || _sBootstrapUrl;
		}

		// remember parent module if any
		if ( !mModules[sModuleName].parent ) {
		  mModules[sModuleName].parent = _execStack[_execStack.length-1];
		}

		// ensure parent namespace even if module was declared already
		// (as declare might have been called by require)
		if (bCreateNamespace !== false) {
			// ensure parent namespace
			jQuery.sap.getObject(sModuleName, 1);
		}

		return this;
	};

	function requireModule(sModuleName) {

		// handle multiple imports
		if ( arguments.length > 1 ) {
			for(var i=0; i<arguments.length; i++) {
				jQuery.sap.require(arguments[i]);
			}
			return this;
		}

		// check for an object as parameter for sModuleName
		// in case of this the object contains the module name and the type
		// which could be {modName: "sap.ui.core.Dev", type: "view"}
		var sType = "";
		if (typeof(sModuleName) === "object") {
			sType = sModuleName.type ? "." + sModuleName.type : "";
			sModuleName = sModuleName.modName + sType;
		}

		if ( _verbose ) {
			jQuery.sap.log.debug(sLogPrefix + "require '" + sModuleName + "' of type '" + sType + "'");
		}

		// check if module has been loaded already
		if ( mModules[sModuleName] ) {
			if ( mModules[sModuleName].state === 'loaded' ) {
				execModule(sModuleName);
			}

			if ( mModules[sModuleName].state === 'ready' ) {
				if ( _verbose ) {
					jQuery.sap.log.debug("module '" + sModuleName + "' has already been loaded (skipped).");
				}
				return this;
			} else if ( mModules[sModuleName].state === 'failed' ) {
				throw new Error("found in negative cache: '" + sModuleName+  "' from " + mModules[sModuleName].url + ": " + mModules[sModuleName].error);
			} else {
				// currently loading
				return this;
			}
		}

		// set marker for loading modules (to break cycles)
		var mod = mModules[sModuleName] = { state: 'loading' };

		// determine URL for module (in case of having a type specified ignore
		// the type for the module path creation and add it as file extension)
		mod.url = jQuery.sap.getModulePath(sType ? sModuleName.substring(0, sModuleName.length - sType.length) : sModuleName, sType + '.js');
		if ( _verbose ) {
			jQuery.sap.log.debug("loading '" + sModuleName + "' from '" + mod.url + "'");
		}

		// try to load the module
		jQuery.ajax({
			url : mod.url,
			dataType : 'text',
			async : false,
			success : function(response, textStatus, xhr) {
				mod.state = 'loaded';
				mod.data = response;
			},
			error : function(xhr, textStatus, error) {
				mod.state = 'failed';
				mod.error = xhr ? xhr.status + " - " + xhr.statusText : textStatus;
			}
		});

		// execute module __after__ loading it, this reduces the required stack space!
		if ( mod.state === 'loaded' ) {
			execModule(sModuleName);
		}
		
		if ( mod.state !== 'ready' ) {
			throw new Error("failed to load '" + sModuleName+  "' from " + mod.url + ": " + mod.error);
		}

		return this;

	}

	function execModule(sModuleName) {
		
		var mod = mModules[sModuleName];
	
		if ( mod && mod.state === 'loaded' && typeof mod.data !== "undefined" ) {
			try {

				if ( _verbose ) {
					var oldPrefix = sLogPrefix;
					sLogPrefix = sLogPrefix + "  ";
					jQuery.sap.log.debug(sLogPrefix + "executing '" + sModuleName + "'");
				}

				// execute the script in the window context
				mod.state = 'executing';
				_execStack.push(sModuleName);
				if (_window.execScript) {
					try {
						mod.data && _window.execScript(mod.data); // execScript fails if data is empty
					} catch (e) {
						_execStack.pop();
						// eval again with different approach - should fail with a more informative exception
						jQuery.sap.globalEval(mod.data);
						throw e; // rethrow err in case globalEval succeeded unexpectedly
					}
				} else {
					_window.eval(mod.data + "\r\n//@ sourceURL=" + mod.url); // Firebug and Safari debugging help, seems to cost ZERO performance
				}
				_execStack.pop();
				mod.state = 'ready';
				mod.data = undefined;
				if ( _verbose ) {
					jQuery.sap.log.debug(sLogPrefix + "finished executing '" + sModuleName + "'");
					sLogPrefix = oldPrefix;
				}

			} catch (err) {
				mod.state = 'failed';
				mod.error = ((err.toString && err.toString()) || err.message) + (err.line ? "(line " + err.line + ")" : "" );
				mod.data = undefined;
			}
		}
	}
	
	/**
	 * Ensures that the given module is loaded and executed before execution of the
	 * current script continues.
	 *
	 * By issuing a call to this method, the caller declares a dependency to the listed modules.
	 *
	 * Any required and not yet loaded script will be loaded and execute synchronously.
	 * Already loaded modules will be skipped.
	 *
	 * @param {string... || object} sModuleName one or more names of modules to be loaded
	 *                              or in case of an object {modName: "...", type: "..."}
	 *                              where modName is the name of the module and the type
	 *                              could be a specific dot separated extension e.g.
	 *                              <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
	 *                              loads <code>sap/ui/core/Dev.view.js</code> and
	 *                              registers as <code>sap.ui.core.Dev.view</code>
	 *
	 * @public
	 * @static
	 * @function
	 */
	jQuery.sap.require = requireModule;

	
	jQuery.sap.registerPreloadedModules = function(oModules) {
		var sExecutingModule = _execStack.slice(-1),
			sURL = sExecutingModule && mModules[sExecutingModule] && mModules[sExecutingModule].url;

		if ( _verbose ) {
			jQuery.sap.log.debug(sLogPrefix + "adding preloaded modules from '" + sURL + "'");
		}
		
		jQuery.each(oModules, function(sModuleName,data) {
			if ( !mModules[sModuleName] ) {
				mModules[sModuleName] = { state : 'loaded', url : sURL + "#" + sModuleName, data : data };
			}
		});
	};
	
	// declare our own module
	jQuery.sap.declare("jquery.sap.global", false);

	// --------------------- script and stylesheet handling --------------------------------------------------
	
	/**
	 * Includes the script (via &lt;script&gt;-tag) into the head for the
	 * specified <code>sUrl</code> and optional <code>sId</code>.
	 *
	 * <b>Note:</b>This function cannot be used before the document is ready
	 * in order to add the SCRIPT tags to the head.
	 *
	 * @param {string} sUrl the URL of the script to load
	 * @param {string} [sId] id that should be used for the script include tag
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.includeScript = function includeScript(sUrl, sId){
		var oScript = window.document.createElement("script");
		oScript.src = sUrl;
		oScript.type = "text/javascript";
		if (sId) {
			oScript.id = sId;
		}
		// jQuery("head").append(oScript) doesn't work because they filter for the script
		// and execute them directly instead adding the SCRIPT tag to the head
		window.document.getElementsByTagName("head")[0].appendChild(oScript);
		return this;
	};

	/**
	 * Includes the specified stylesheet via a &lt;link&gt;-tag in the head of the current document.
	 * If there is call to <code>includeStylesheet</code> providing the sId of an already included stylesheet,
	 * the existing element will be replaced.
	 *
	 * <b>Note:</b>This function automatically avoids calls to <code>document.write</code> when they
	 * are no longer safe (e.g. document.body already has been created).
	 *
	 * @param {string} sUrl the URL of the script to load
	 * @param {string} [sId] id that should be used for the script include tag
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.includeStyleSheet = function includeStyleSheet(sUrl, sId){
		
		// appends a link object to the head
		function append(oLink) {
			if (jQuery.browser.msie && jQuery.browser.version <= 8) {
				// SPECIAL HANDLING FOR IE8
				//   ==> since jQuery.append works different than document.write
				// XHTML does not support "document.write"
				//   ==> in this casewe use the jQuery append!
				if (!window.document.body && window.document.write) {
					window.document.write(oLink.outerHTML);
				} else {
					jQuery(oLink).clone().appendTo("head");
				}
			} else {
				jQuery(oLink).appendTo("head");
			}
		}
		
		// create the new link element
		var oLink = document.createElement("link");
		oLink.type = "text/css";
		oLink.rel = "stylesheet";
		oLink.href = sUrl;
		if (sId) {
			oLink.id = sId;
		}

		// check for existence of the link
		var oOld, bReplace;
		if ((sId && (oOld = jQuery.sap.domById(sId)) && (bReplace = oOld.tagName === "LINK" && oOld.rel ==="stylesheet")) || window.document.body) {
			if (bReplace) {
				jQuery(oOld).replaceWith(oLink);
			} else {
				append(oLink);
			}
		} else {
			append(oLink);
		}

	};

	// TODO should be in core, but then the 'callback' could not be implemented
	if ( !(oCfgData.productive === true || oCfgData.productive === "true"  || oCfgData.productive === "x") ) {
		jQuery(function() {
			jQuery(document.body).keydown(function(e) {
				if ( e.keyCode == 80 && e.shiftKey && e.altKey && e.ctrlKey ) {
					try {
						jQuery.sap.require("sap.ui.debug.TechnicalInfo");
					} catch (e) {
						// alert("Sorry, failed to activate 'P'-mode!");
						return;
					}
					sap.ui.debug.TechnicalInfo.open(function() {
						return { modules : mModules, prefixes : mUrlPrefixes, config: oCfgData };
					});
				}
			});
		});
	}

	// *********** feature detection, enriching jQuery.support *************
	// this might go into its own file once there is more stuff added

	if (!jQuery.support) {
		jQuery.support = {};
	}

	/**
	 * jQuery.support.flexBoxLayout is true if the current browser supports the CSS3 Flexible Box Layout directly or via vendor prefixes
	 */
	if (jQuery.support.flexBoxLayout === undefined) {
		jQuery.support.flexBoxLayout =
			((document.documentElement.style.MozBoxFlex !== undefined) ||
				(document.documentElement.style.WebkitBoxFlex !== undefined) ||
				(document.documentElement.style.MsBoxFlex !== undefined) ||
				(document.documentElement.style.BoxFlex !== undefined));
	}

	// *********** fixes for (pending) jQuery bugs **********
	if (!jQuery.support.opacity) {
		(function() {
			// jQuery cssHook for setOpacity[IE8] doesn't properly cleanup the CSS filter property
			var oldSet = jQuery.cssHooks.opacity.set;
			jQuery.cssHooks.opacity.set = function( elem, value ) {
				oldSet.apply(this, arguments);
				if ( !jQuery.trim(elem.style.filter) ) {
					elem.style.removeAttribute("filter");
				}
			};
		}());
	}

}());

/**
 * Executes an 'eval' for its arguments in the global context (without closure variables).
 *
 * This is a synchronous replacement for <code>jQuery.globalEval</code> which in some
 * browsers (e.g. FireFox) behaves asynchronously.
 *
 * @type void
 * @public
 * @static
 */
jQuery.sap.globalEval = function() {
	eval(arguments[0]);
};

/*
 * jQuery UI Datepicker 1.8.7
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.8.7" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this.debug = false; // Change this to true to start debugging
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
	this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
	this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
	this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
	this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
	this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
	this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
	this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
	this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[''] = { // Default regional settings
		closeText: 'Done', // Display text for close link
		prevText: 'Prev', // Display text for previous month link
		nextText: 'Next', // Display text for next month link
		currentText: 'Today', // Display text for current month link
		monthNames: ['January','February','March','April','May','June',
			'July','August','September','October','November','December'], // Names of months for drop-down and formatting
		monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
		dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
		dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
		dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
		weekHeader: 'Wk', // Column header for week of the year
		dateFormat: 'mm/dd/yy', // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: '' // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: 'focus', // 'focus' for popup on focus,
			// 'button' for trigger button, or 'both' for either
		showAnim: 'fadeIn', // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: '', // Display text following the input box, e.g. showing the format
		buttonText: '...', // Text for trigger button
		buttonImage: '', // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: 'c-10:c+10', // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: '+10', // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with '+' for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: 'fast', // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: '', // Selector for an alternate field to store selected dates into
		altFormat: '', // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false // True to size the input for the date format, false to leave as is
	};
	$.extend(this._defaults, this.regional['']);
	this.dpDiv = $('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>');
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: 'hasDatepicker',

	/* Debug logging (if enabled). */
	log: function () {
		if (this.debug)
			console.log.apply('', arguments);
	},
	
	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	   @param  settings  object - the new settings to use as defaults (anonymous object)
	   @return the manager object */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span
	   @param  settings  object - the new settings to use for this date picker instance (anonymous) */
	_attachDatepicker: function(target, settings) {
		// check for settings on the control itself - in namespace 'date:'
		var inlineSettings = null;
		for (var attrName in this._defaults) {
			var attrValue = target.getAttribute('date:' + attrName);
			if (attrValue) {
				inlineSettings = inlineSettings || {};
				try {
					inlineSettings[attrName] = eval(attrValue);
				} catch (err) {
					inlineSettings[attrName] = attrValue;
				}
			}
		}
		var nodeName = target.nodeName.toLowerCase();
		var inline = (nodeName == 'div' || nodeName == 'span');
		if (!target.id) {
			this.uuid += 1;
			target.id = 'dp' + this.uuid;
		}
		var inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});
		if (nodeName == 'input') {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			$('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName))
			return;
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp).
			bind("setData.datepicker", function(event, key, value) {
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key) {
				return this._get(inst, key);
			});
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var appendText = this._get(inst, 'appendText');
		var isRTL = this._get(inst, 'isRTL');
		if (inst.append)
			inst.append.remove();
		if (appendText) {
			inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
			input[isRTL ? 'before' : 'after'](inst.append);
		}
		input.unbind('focus', this._showDatepicker);
		if (inst.trigger)
			inst.trigger.remove();
		var showOn = this._get(inst, 'showOn');
		if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
			var buttonText = this._get(inst, 'buttonText');
			var buttonImage = this._get(inst, 'buttonImage');
			inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
				$('<img/>').addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$('<button type="button"></button>').addClass(this._triggerClass).
					html(buttonImage == '' ? buttonText : $('<img/>').attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? 'before' : 'after'](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
					$.datepicker._hideDatepicker();
				else
					$.datepicker._showDatepicker(input[0]);
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, 'autoSize') && !inst.inline) {
			var date = new Date(2009, 12 - 1, 20); // Ensure double digits
			var dateFormat = this._get(inst, 'dateFormat');
			if (dateFormat.match(/[DM]/)) {
				var findMax = function(names) {
					var max = 0;
					var maxI = 0;
					for (var i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					'monthNames' : 'monthNamesShort'))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
			}
			inst.input.attr('size', this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName))
			return;
		divSpan.addClass(this.markerClassName).append(inst.dpDiv).
			bind("setData.datepicker", function(event, key, value){
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key){
				return this._get(inst, key);
			});
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		inst.dpDiv.show();
	},

	/* Pop-up the date picker in a "dialog" box.
	   @param  input     element - ignored
	   @param  date      string or Date - the initial date to display
	   @param  onSelect  function - the function to call when a date is selected
	   @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	   @param  pos       int[2] - coordinates for the dialog's position within the screen or
	                     event - with x/y coordinates or
	                     leave empty for default (screen centre)
	   @return the manager object */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var inst = this._dialogInst; // internal instance
		if (!inst) {
			this.uuid += 1;
			var id = 'dp' + this.uuid;
			this._dialogInput = $('<input type="text" id="' + id +
				'" style="position: absolute; top: -100px; width: 0px; z-index: -10;"/>');
			this._dialogInput.keydown(this._doKeyDown);
			$('body').append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			var browserWidth = document.documentElement.clientWidth;
			var browserHeight = document.documentElement.clientHeight;
			var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI)
			$.blockUI(this.dpDiv);
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	   @param  target    element - the target input field or division or span */
	_destroyDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName == 'input') {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind('focus', this._showDatepicker).
				unbind('keydown', this._doKeyDown).
				unbind('keypress', this._doKeyPress).
				unbind('keyup', this._doKeyUp);
		} else if (nodeName == 'div' || nodeName == 'span')
			$target.removeClass(this.markerClassName).empty();
	},

	/* Enable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_enableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = false;
			inst.trigger.filter('button').
				each(function() { this.disabled = false; }).end().
				filter('img').css({opacity: '1.0', cursor: ''});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().removeClass('ui-state-disabled');
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_disableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = true;
			inst.trigger.filter('button').
				each(function() { this.disabled = true; }).end().
				filter('img').css({opacity: '0.5', cursor: 'default'});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().addClass('ui-state-disabled');
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	   @param  target    element - the target input field or division or span
	   @return boolean - true if disabled, false if enabled */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] == target)
				return true;
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	   @param  target  element - the target input field or division or span
	   @return  object - the associated instance data
	   @throws  error if a jQuery problem getting data */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw 'Missing instance data for this datepicker';
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span
	   @param  name    object - the new settings to update or
	                   string - the name of the setting to change or retrieve,
	                   when retrieving also 'all' for all instance settings or
	                   'defaults' for all global defaults
	   @param  value   any - the new value for the setting
	                   (omit if above is an object or to retrieve a value) */
	_optionDatepicker: function(target, name, value) {
		var inst = this._getInst(target);
		if (arguments.length == 2 && typeof name == 'string') {
			return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name == 'all' ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}
		var settings = name || {};
		if (typeof name == 'string') {
			settings = {};
			settings[name] = value;
		}
		if (inst) {
			if (this._curInst == inst) {
				this._hideDatepicker();
			}
			var date = this._getDateDatepicker(target, true);
			extendRemove(inst.settings, settings);
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDateDatepicker(target, date);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	   @param  target   element - the target input field or division or span
	   @param  date     Date - the new date */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	   @param  target     element - the target input field or division or span
	   @param  noDefault  boolean - true if no default date is to be used
	   @return Date - the current date */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline)
			this._setDateFromField(inst, noDefault);
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var inst = $.datepicker._getInst(event.target);
		var handled = true;
		var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing)
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + 
									$.datepicker._currentClass + ')', inst.dpDiv);
						if (sel[0])
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
						else
							$.datepicker._hideDatepicker();
						return false; // don't submit the form
						break; // select the value on enter
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, 'stepBigMonths') :
							-$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, 'stepBigMonths') :
							+$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, 'stepBigMonths') :
									-$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, 'stepBigMonths') :
									+$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		else {
			handled = false;
		}
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if ($.datepicker._get(inst, 'constrainInput')) {
			var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
			var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if (inst.input.val() != inst.lastVal) {
			try {
				var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));
				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (event) {
				$.datepicker.log(event);
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
	   @param  input  element - the input field attached to the date picker or
	                  event - if triggered by focus */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
			input = $('input', input.parentNode)[0];
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
			return;
		var inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst != inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
		}
		var beforeShow = $.datepicker._get(inst, 'beforeShow');
		extendRemove(inst.settings, (beforeShow ? beforeShow.apply(input, [input, inst]) : {}));
		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);
		if ($.datepicker._inDialog) // hide cursor
			input.value = '';
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}
		var isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css('position') == 'fixed';
			return !isFixed;
		});
		if (isFixed && $.browser.opera) { // correction for Opera when fixed and scrolled
			$.datepicker._pos[0] -= document.documentElement.scrollLeft;
			$.datepicker._pos[1] -= document.documentElement.scrollTop;
		}
		var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
			left: offset.left + 'px', top: offset.top + 'px'});
		if (!inst.inline) {
			var showAnim = $.datepicker._get(inst, 'showAnim');
			var duration = $.datepicker._get(inst, 'duration');
			var postProcess = function() {
				$.datepicker._datepickerShowing = true;
				var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
				if( !! cover.length ){
					var borders = $.datepicker._getBorders(inst.dpDiv);
					cover.css({left: -borders[0], top: -borders[1],
						width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
				}
			};
			inst.dpDiv.zIndex($(input).zIndex()+1);
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
			if (!showAnim || !duration)
				postProcess();
			if (inst.input.is(':visible') && !inst.input.is(':disabled'))
				inst.input.focus();
			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		var self = this;
		var borders = $.datepicker._getBorders(inst.dpDiv);
		inst.dpDiv.empty().append(this._generateHTML(inst));
		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
		}
		inst.dpDiv.find('button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a')
				.bind('mouseout', function(){
					$(this).removeClass('ui-state-hover');
					if(this.className.indexOf('ui-datepicker-prev') != -1) $(this).removeClass('ui-datepicker-prev-hover');
					if(this.className.indexOf('ui-datepicker-next') != -1) $(this).removeClass('ui-datepicker-next-hover');
				})
				.bind('mouseover', function(){
					if (!self._isDisabledDatepicker( inst.inline ? inst.dpDiv.parent()[0] : inst.input[0])) {
						$(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
						$(this).addClass('ui-state-hover');
						if(this.className.indexOf('ui-datepicker-prev') != -1) $(this).addClass('ui-datepicker-prev-hover');
						if(this.className.indexOf('ui-datepicker-next') != -1) $(this).addClass('ui-datepicker-next-hover');
					}
				})
			.end()
			.find('.' + this._dayOverClass + ' a')
				.trigger('mouseover')
			.end();
		var numMonths = this._getNumberOfMonths(inst);
		var cols = numMonths[1];
		var width = 17;
		if (cols > 1)
			inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
		else
			inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
		inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
			'Class']('ui-datepicker-multi');
		inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
			'Class']('ui-datepicker-rtl');
		if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
				inst.input.is(':visible') && !inst.input.is(':disabled'))
			inst.input.focus();
		// deffered render of the years select (to avoid flashes on Firefox) 
		if( inst.yearshtml ){
			var origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml ){
					inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	/* Retrieve the size of left and top borders for an element.
	   @param  elem  (jQuery object) the element of interest
	   @return  (number[2]) the left and top borders */
	_getBorders: function(elem) {
		var convert = function(value) {
			return {thin: 1, medium: 2, thick: 3}[value] || value;
		};
		return [parseFloat(convert(elem.css('border-left-width'))),
			parseFloat(convert(elem.css('border-top-width')))];
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth();
		var dpHeight = inst.dpDiv.outerHeight();
		var inputWidth = inst.input ? inst.input.outerWidth() : 0;
		var inputHeight = inst.input ? inst.input.outerHeight() : 0;
		var viewWidth = document.documentElement.clientWidth + $(document).scrollLeft();
		var viewHeight = document.documentElement.clientHeight + $(document).scrollTop();

		offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var inst = this._getInst(obj);
		var isRTL = this._get(inst, 'isRTL');
        while (obj && (obj.type == 'hidden' || obj.nodeType != 1)) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
	    return [position.left, position.top];
	},

	/* Hide the date picker from view.
	   @param  input  element - the input field attached to the date picker */
	_hideDatepicker: function(input) {
		var inst = this._curInst;
		if (!inst || (input && inst != $.data(input, PROP_NAME)))
			return;
		if (this._datepickerShowing) {
			var showAnim = this._get(inst, 'showAnim');
			var duration = this._get(inst, 'duration');
			var postProcess = function() {
				$.datepicker._tidyDialog(inst);
				this._curInst = null;
			};
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
			if (!showAnim)
				postProcess();
			var onClose = this._get(inst, 'onClose');
			if (onClose)
				onClose.apply((inst.input ? inst.input[0] : null),
					[(inst.input ? inst.input.val() : ''), inst]);  // trigger custom callback
			this._datepickerShowing = false;
			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
				if ($.blockUI) {
					$.unblockUI();
					$('body').append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst)
			return;
		var $target = $(event.target);
		if ($target[0].id != $.datepicker._mainDivId &&
				$target.parents('#' + $.datepicker._mainDivId).length == 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.hasClass($.datepicker._triggerClass) &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))
			$.datepicker._hideDatepicker();
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		}
		else {
			var date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		inst._selectingMonthYear = false;
		inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
		inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
			parseInt(select.options[select.selectedIndex].value,10);
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Restore input focus after not changing month/year. */
	_clickMonthYear: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (inst.input && inst._selectingMonthYear) {
			setTimeout(function() {
				inst.input.focus();
			}, 0);
		}
		inst._selectingMonthYear = !inst._selectingMonthYear;
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var target = $(id);
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}
		var inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $('a', td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		this._selectDate(target, '');
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input)
			inst.input.val(dateStr);
		this._updateAlternate(inst);
		var onSelect = this._get(inst, 'onSelect');
		if (onSelect)
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		else if (inst.input)
			inst.input.trigger('change'); // fire the change event
		if (inst.inline)
			this._updateDatepicker(inst);
		else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) != 'object')
				inst.input.focus(); // restore focus
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altField = this._get(inst, 'altField');
		if (altField) { // update alternate field too
			var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
			var date = this._getDate(inst);
			var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	   @param  date  Date - the date to customise
	   @return [boolean, string] - is this date selectable?, what is its CSS class? */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ''];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	   @param  date  Date - the date to get the week for
	   @return  number - the number of the week within the year that contains this date */
	iso8601Week: function(date) {
		var checkDate = new Date(date.getTime());
		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
		var time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	   See formatDate below for the possible formats.

	   @param  format    string - the expected format of the date
	   @param  value     string - the date in the above format
	   @param  settings  Object - attributes include:
	                     shortYearCutoff  number - the cutoff year for determining the century (optional)
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  Date - the extracted date value or null if value is blank */
	parseDate: function (format, value, settings) {
		if (format == null || value == null)
			throw 'Invalid arguments';
		value = (typeof value == 'object' ? value.toString() : value + '');
		if (value == '')
			return null;
		var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		var year = -1;
		var month = -1;
		var day = -1;
		var doy = -1;
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Extract a number from the string value
		var getNumber = function(match) {
			var isDoubled = lookAhead(match);
			var size = (match == '@' ? 14 : (match == '!' ? 20 :
				(match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
			var digits = new RegExp('^\\d{1,' + size + '}');
			var num = value.substring(iValue).match(digits);
			if (!num)
				throw 'Missing number at position ' + iValue;
			iValue += num[0].length;
			return parseInt(num[0], 10);
		};
		// Extract a name from the string value and convert to an index
		var getName = function(match, shortNames, longNames) {
			var names = (lookAhead(match) ? longNames : shortNames);
			for (var i = 0; i < names.length; i++) {
				if (value.substr(iValue, names[i].length).toLowerCase() == names[i].toLowerCase()) {
					iValue += names[i].length;
					return i + 1;
				}
			}
			throw 'Unknown name at position ' + iValue;
		};
		// Confirm that a literal character matches the string value
		var checkLiteral = function() {
			if (value.charAt(iValue) != format.charAt(iFormat))
				throw 'Unexpected literal at position ' + iValue;
			iValue++;
		};
		var iValue = 0;
		for (var iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					checkLiteral();
			else
				switch (format.charAt(iFormat)) {
					case 'd':
						day = getNumber('d');
						break;
					case 'D':
						getName('D', dayNamesShort, dayNames);
						break;
					case 'o':
						doy = getNumber('o');
						break;
					case 'm':
						month = getNumber('m');
						break;
					case 'M':
						month = getName('M', monthNamesShort, monthNames);
						break;
					case 'y':
						year = getNumber('y');
						break;
					case '@':
						var date = new Date(getNumber('@'));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case '!':
						var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'"))
							checkLiteral();
						else
							literal = true;
						break;
					default:
						checkLiteral();
				}
		}
		if (year == -1)
			year = new Date().getFullYear();
		else if (year < 100)
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				var dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim)
					break;
				month++;
				day -= dim;
			} while (true);
		}
		var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
			throw 'Invalid date'; // E.g. 31/02/*
		return date;
	},

	/* Standard date formats. */
	ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
	COOKIE: 'D, dd M yy',
	ISO_8601: 'yy-mm-dd',
	RFC_822: 'D, d M y',
	RFC_850: 'DD, dd-M-y',
	RFC_1036: 'D, d M y',
	RFC_1123: 'D, d M yy',
	RFC_2822: 'D, d M yy',
	RSS: 'D, d M y', // RFC 822
	TICKS: '!',
	TIMESTAMP: '@',
	W3C: 'yy-mm-dd', // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	   The format can be combinations of the following:
	   d  - day of month (no leading zero)
	   dd - day of month (two digit)
	   o  - day of year (no leading zeros)
	   oo - day of year (three digit)
	   D  - day name short
	   DD - day name long
	   m  - month of year (no leading zero)
	   mm - month of year (two digit)
	   M  - month name short
	   MM - month name long
	   y  - year (two digit)
	   yy - year (four digit)
	   @ - Unix timestamp (ms since 01/01/1970)
	   ! - Windows ticks (100ns since 01/01/0001)
	   '...' - literal text
	   '' - single quote

	   @param  format    string - the desired format of the date
	   @param  date      Date - the date value to format
	   @param  settings  Object - attributes include:
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  string - the date in the above format */
	formatDate: function (format, date, settings) {
		if (!date)
			return '';
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Format a number, with leading zero if necessary
		var formatNumber = function(match, value, len) {
			var num = '' + value;
			if (lookAhead(match))
				while (num.length < len)
					num = '0' + num;
			return num;
		};
		// Format a name, short or long as requested
		var formatName = function(match, value, shortNames, longNames) {
			return (lookAhead(match) ? longNames[value] : shortNames[value]);
		};
		var output = '';
		var literal = false;
		if (date)
			for (var iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal)
					if (format.charAt(iFormat) == "'" && !lookAhead("'"))
						literal = false;
					else
						output += format.charAt(iFormat);
				else
					switch (format.charAt(iFormat)) {
						case 'd':
							output += formatNumber('d', date.getDate(), 2);
							break;
						case 'D':
							output += formatName('D', date.getDay(), dayNamesShort, dayNames);
							break;
						case 'o':
							output += formatNumber('o',
								(date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000, 3);
							break;
						case 'm':
							output += formatNumber('m', date.getMonth() + 1, 2);
							break;
						case 'M':
							output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
							break;
						case 'y':
							output += (lookAhead('y') ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
							break;
						case '@':
							output += date.getTime();
							break;
						case '!':
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'"))
								output += "'";
							else
								literal = true;
							break;
						default:
							output += format.charAt(iFormat);
					}
			}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var chars = '';
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		for (var iFormat = 0; iFormat < format.length; iFormat++)
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					chars += format.charAt(iFormat);
			else
				switch (format.charAt(iFormat)) {
					case 'd': case 'm': case 'y': case '@':
						chars += '0123456789';
						break;
					case 'D': case 'M':
						return null; // Accept anything
					case "'":
						if (lookAhead("'"))
							chars += "'";
						else
							literal = true;
						break;
					default:
						chars += format.charAt(iFormat);
				}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() == inst.lastVal) {
			return;
		}
		var dateFormat = this._get(inst, 'dateFormat');
		var dates = inst.lastVal = inst.input ? inst.input.val() : null;
		var date, defaultDate;
		date = defaultDate = this._getDefaultDate(inst);
		var settings = this._getFormatConfig(inst);
		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			this.log(event);
			dates = (noDefault ? '' : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
			var date = new Date();
			date.setDate(date.getDate() + offset);
			return date;
		};
		var offsetString = function(offset) {
			try {
				return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					offset, $.datepicker._getFormatConfig(inst));
			}
			catch (e) {
				// Ignore
			}
			var date = (offset.toLowerCase().match(/^c/) ?
				$.datepicker._getDate(inst) : null) || new Date();
			var year = date.getFullYear();
			var month = date.getMonth();
			var day = date.getDate();
			var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
			var matches = pattern.exec(offset);
			while (matches) {
				switch (matches[2] || 'd') {
					case 'd' : case 'D' :
						day += parseInt(matches[1],10); break;
					case 'w' : case 'W' :
						day += parseInt(matches[1],10) * 7; break;
					case 'm' : case 'M' :
						month += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
					case 'y': case 'Y' :
						year += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
				}
				matches = pattern.exec(offset);
			}
			return new Date(year, month, day);
		};
		var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
			(typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
		newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	   Hours may be non-zero on daylight saving cut-over:
	   > 12 when midnight changeover, but then cannot generate
	   midnight datetime, so jump to 1AM, otherwise reset.
	   @param  date  (Date) the date to check
	   @return  (Date) the corrected date */
	_daylightSavingAdjust: function(date) {
		if (!date) return null;
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date;
		var origMonth = inst.selectedMonth;
		var origYear = inst.selectedYear;
		var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
			this._notifyChange(inst);
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? '' : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var today = new Date();
		today = this._daylightSavingAdjust(
			new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
		var isRTL = this._get(inst, 'isRTL');
		var showButtonPanel = this._get(inst, 'showButtonPanel');
		var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
		var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
		var numMonths = this._getNumberOfMonths(inst);
		var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
		var stepMonths = this._get(inst, 'stepMonths');
		var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
		var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
			new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var drawMonth = inst.drawMonth - showCurrentAtPos;
		var drawYear = inst.drawYear;
		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;
		var prevText = this._get(inst, 'prevText');
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));
		var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._adjustDate(\'#' + inst.id + '\', -' + stepMonths + ', \'M\');"' +
			' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
		var nextText = this._get(inst, 'nextText');
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));
		var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._adjustDate(\'#' + inst.id + '\', +' + stepMonths + ', \'M\');"' +
			' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
		var currentText = this._get(inst, 'currentText');
		var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
		var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._hideDatepicker();">' + this._get(inst, 'closeText') + '</button>' : '');
		var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
			(this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_' + dpuuid +
			'.datepicker._gotoToday(\'#' + inst.id + '\');"' +
			'>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
		var firstDay = parseInt(this._get(inst, 'firstDay'),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);
		var showWeek = this._get(inst, 'showWeek');
		var dayNames = this._get(inst, 'dayNames');
		var dayNamesShort = this._get(inst, 'dayNamesShort');
		var dayNamesMin = this._get(inst, 'dayNamesMin');
		var monthNames = this._get(inst, 'monthNames');
		var monthNamesShort = this._get(inst, 'monthNamesShort');
		var beforeShowDay = this._get(inst, 'beforeShowDay');
		var showOtherMonths = this._get(inst, 'showOtherMonths');
		var selectOtherMonths = this._get(inst, 'selectOtherMonths');
		var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
		var defaultDate = this._getDefaultDate(inst);
		var html = '';
		for (var row = 0; row < numMonths[0]; row++) {
			var group = '';
			for (var col = 0; col < numMonths[1]; col++) {
				var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				var cornerClass = ' ui-corner-all';
				var calender = '';
				if (isMultiMonth) {
					calender += '<div class="ui-datepicker-group';
					if (numMonths[1] > 1)
						switch (col) {
							case 0: calender += ' ui-datepicker-group-first';
								cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
							case numMonths[1]-1: calender += ' ui-datepicker-group-last';
								cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
							default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
						}
					calender += '">';
				}
				calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
					(/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
					(/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					'</div><table class="ui-datepicker-calendar"><thead>' +
					'<tr>';
				var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
				for (var dow = 0; dow < 7; dow++) { // days of the week
					var day = (dow + firstDay) % 7;
					thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
						'<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
				}
				calender += thead + '</tr></thead><tbody>';
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				var numRows = (isMultiMonth ? 6 : Math.ceil((leadDays + daysInMonth) / 7)); // calculate the number of rows to generate
				var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += '<tr>';
					var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
						this._get(inst, 'calculateWeek')(printDate) + '</td>');
					for (var dow = 0; dow < 7; dow++) { // create date picker days
						var daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
						var otherMonth = (printDate.getMonth() != drawMonth);
						var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += '<td class="' +
							((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
							(otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
							((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							' ' + this._dayOverClass : '') + // highlight selected day
							(unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
							(printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
							(printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
							(unselectable ? '' : ' onclick="DP_jQuery_' + dpuuid + '.datepicker._selectDay(\'#' +
							inst.id + '\',' + printDate.getMonth() + ',' + printDate.getFullYear() + ', this);return false;"') + '>' + // actions
							(otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
							(unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
							(printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
							(printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
							(otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
							'" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + '</tr>';
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += '</tbody></table>' + (isMultiMonth ? '</div>' + 
							((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
				group += calender;
			}
			html += group;
		}
		html += buttonPanel + ($.browser.msie && parseInt($.browser.version,10) < 7 && !inst.inline ?
			'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {
		var changeMonth = this._get(inst, 'changeMonth');
		var changeYear = this._get(inst, 'changeYear');
		var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
		var html = '<div class="ui-datepicker-title">';
		var monthHtml = '';
		// month selection
		if (secondary || !changeMonth)
			monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
		else {
			var inMinYear = (minDate && minDate.getFullYear() == drawYear);
			var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
			monthHtml += '<select class="ui-datepicker-month" ' +
				'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'M\');" ' +
				'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' +
			 	'>';
			for (var month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) &&
						(!inMaxYear || month <= maxDate.getMonth()))
					monthHtml += '<option value="' + month + '"' +
						(month == drawMonth ? ' selected="selected"' : '') +
						'>' + monthNamesShort[month] + '</option>';
			}
			monthHtml += '</select>';
		}
		if (!showMonthAfterYear)
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
		// year selection
		inst.yearshtml = '';
		if (secondary || !changeYear)
			html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
		else {
			// determine range of years to display
			var years = this._get(inst, 'yearRange').split(':');
			var thisYear = new Date().getFullYear();
			var determineYear = function(value) {
				var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
					(value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
					parseInt(value, 10)));
				return (isNaN(year) ? thisYear : year);
			};
			var year = determineYear(years[0]);
			var endYear = Math.max(year, determineYear(years[1] || ''));
			year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
			endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
			inst.yearshtml += '<select class="ui-datepicker-year" ' +
				'onchange="DP_jQuery_' + dpuuid + '.datepicker._selectMonthYear(\'#' + inst.id + '\', this, \'Y\');" ' +
				'onclick="DP_jQuery_' + dpuuid + '.datepicker._clickMonthYear(\'#' + inst.id + '\');"' +
				'>';
			for (; year <= endYear; year++) {
				inst.yearshtml += '<option value="' + year + '"' +
					(year == drawYear ? ' selected="selected"' : '') +
					'>' + year + '</option>';
			}
			inst.yearshtml += '</select>';
			//when showing there is no need for later update
			if( ! $.browser.mozilla ){
				html += inst.yearshtml;
				inst.yearshtml = null;
			} else {
				// will be replaced later with inst.yearshtml
				html += '<select class="ui-datepicker-year"><option value="' + drawYear + '" selected="selected">' + drawYear + '</option></select>';
			}
		}
		html += this._get(inst, 'yearSuffix');
		if (showMonthAfterYear)
			html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
		html += '</div>'; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period == 'Y' ? offset : 0);
		var month = inst.drawMonth + (period == 'M' ? offset : 0);
		var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
			(period == 'D' ? offset : 0);
		var date = this._restrictMinMax(inst,
			this._daylightSavingAdjust(new Date(year, month, day)));
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period == 'M' || period == 'Y')
			this._notifyChange(inst);
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var newDate = (minDate && date < minDate ? minDate : date);
		newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
		return newDate;
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, 'onChangeMonthYear');
		if (onChange)
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, 'numberOfMonths');
		return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - new Date(year, month, 32).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst);
		var date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
		if (offset < 0)
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, 'shortYearCutoff');
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
			monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day == 'object' ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
	}
});

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props)
		if (props[name] == null || props[name] == undefined)
			target[name] = props[name];
	return target;
};

/* Determine whether an object is an array. */
function isArray(a) {
	return (a && (($.browser.safari && typeof a == 'object' && a.length) ||
		(a.constructor && a.constructor.toString().match(/\Array\(\)/))));
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){

	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick).
			find('body').append($.datepicker.dpDiv);
		$.datepicker.initialized = true;
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	return this.each(function() {
		typeof options == 'string' ?
			$.datepicker['_' + options + 'Datepicker'].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.8.7";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);

jQuery.sap.declare('sap-ui-core-all');
jQuery.sap.declare('jquery-1.4.4'); // raw module, declared by Phoenix 'AllInOne' Builder
jQuery.sap.declare('jquery-ui-core'); // raw module, declared by Phoenix 'AllInOne' Builder
jQuery.sap.declare('jquery-ui-position'); // raw module, declared by Phoenix 'AllInOne' Builder
jQuery.sap.declare('jquery.sap.global'); // raw module, declared by Phoenix 'AllInOne' Builder
jQuery.sap.declare('jquery-ui-datepicker'); // raw module, declared by Phoenix 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('jquery.sap.sjax') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/*
 * Provides convenience functions for synchronous communication, based on the jQuery.ajax() function.
 */
jQuery.sap.declare("jquery.sap.sjax", false);

(function() {

	jQuery.sap.sjaxSettings = {
		/**
		 * Whether to return an object consisting of data and status and error codes or only the simple data
		 */
		complexResult: true,

		/**
		 * fallback value when complexResult is set to false and an error occurred. Then fallback will be returned.
		 */
		fallback: undefined
	};

	/**
	 * Convenience wrapper around <code>jQuery.ajax()</code> that avoids the need for callback functions when
	 * synchronous calls are made. If the setting <code>complexResult</code> is true (default), then the return value
	 * is an object with the following properties
	 * <ul>
	 * <li><code>success</code> boolean whether the call succeeded or not
	 * <li><code>data</code> any the data returned by the call. For dataType 'text' this is a string,
	 *                       for JSON it is an object, for XML it is a document. When the call failed, then data is not defined
	 * <li><code>status</code> string a textual status ('success,', 'error', 'timeout',...)
	 * <li><code>statusCode</code> string the HTTP status code of the request
	 * <li><code>error</code> Error an error object (exception) in case an error occurred
	 * </ul>
	 *
	 * When <code>complexResult</code> is false, then in the case of success, only 'data' is returned, in case of an error the
	 * 'fallback' setting is returned (defaults to undefined).
	 *
	 * Note that async=false is always enforced by this method.
	 *
	 * @param {String} oOrigSettings the ajax() settings
	 * @return result, see above
	 *
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.sjax = function sjax(oOrigSettings) {

		var s = jQuery.extend(true, {}, jQuery.sap.sjaxSettings, oOrigSettings,

			// the following settings are enforced as this is the rightmost object in the extend call
			{
				async: false,
				success : function(data, textStatus, xhr) {
//					oResult = { success : true, data : data, status : textStatus, statusCode : xhr.status };
					oResult = { success : true, data : data, status : textStatus, statusCode : xhr&&xhr.status };
				},
				error : function(xhr, textStatus, error) {
					oResult = { success : false, data : undefined, status : textStatus, error : error, statusCode : xhr.status };
				}
			});

		var oResult = undefined;

		jQuery.ajax(s);

		if (!s.complexResult) {
			return oResult.success ? oResult.data : s.fallback;
		}

		return oResult;
	};

	/**
	 * Convenience wrapper that checks whether a given web resource could be accessed.
	 */
	jQuery.sap.syncHead = function(sUrl) {
		return jQuery.sap.sjax({type:'HEAD', url: sUrl}).success;
	};
	
	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforeces the Http method GET and defaults the
	 * data type of the result to 'text'.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [sDataType='text'] the type of data expected from the server, default is "text"
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.syncGet = function syncGet(sUrl, data, sDataType) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'GET',
			dataType: sDataType || 'text'
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method POST and defaults the
	 * data type of the result to 'text'.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [sDataType='text'] the type of data expected from the server, default is "text"
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.syncPost = function syncPost(sUrl, data, sDataType) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'POST',
			dataType: sDataType || 'text'
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'text'.
	 * If a fallback value is given, the function simply returns the response as a text or - if some error occurred -
	 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
	 *
	 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
	 * or they can omit the fallback value (providing only two parameters to syncGetText()).
	 * They then receive the same complex result object as for the sjax() call.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
	 * @return  result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.syncGetText = function syncGetText(sUrl, data, fallback) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'GET',
			dataType: 'text',
			fallback: fallback,
			complexResult : (arguments.length < 3)
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'json'.
	 * If a fallback value is given, the function simply returns the response as an object or - if some error occurred -
	 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
	 *
	 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
	 * or they can omit the fallback value (providing only two parameters to syncGetJSON()).
	 * They then receive the same complex result object as for the sjax() call.
	 *
	 * Note that providing "undefined" or "null" as a fallback is different from omitting the fallback (complex result).
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {object} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.syncGetJSON = function syncGetJSON(sUrl, data, fallback) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data || null,
			type: 'GET',
			dataType: 'json',
			fallback: fallback,
			complexResult : (arguments.length < 3)
		});
	};

}());
}; // end of jquery.sap.sjax
if ( !jQuery.sap.isDeclared('jquery.sap.script') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides miscellaneous utility functions that might be useful for any script
jQuery.sap.declare("jquery.sap.script", false);

(function() {

	/**
	 * Some private variable used for creation of (pseudo-)unique ids.
	 * @type integer
	 * @private
	 */
	var iIdCounter = 0;

	/**
	 * Creates and returns a pseudo-unique id.
	 *
	 * No means for detection of overlap with already present or future UIDs.
	 *
	 * @return {string} A pseudo-unique id.
	 * @public
	 */
	jQuery.sap.uid = function uid() {
		return "id-" + new Date().valueOf() + "-" + iIdCounter++;
	};

	/**
	 * Calls a method after a given delay and returns an id for this timer
	 *
	 * @param {int} iDelay Delay time in milliseconds
	 * @param {object} oObject Object from which the method should be called
	 * @param {string|object} Method function pointer or name of the method
	 * @param {array} [aParameters] Method parameters
	 * @return {string} Id which can be used to cancel the timer with clearDelayedCall
	 * @public
	 */
	jQuery.sap.delayedCall = function delayedCall(iDelay, oObject, method, aParameters) {
		return setTimeout(function(){
			if (jQuery.type(method) == "string") {
				method = oObject[method];
			}
			method.apply(oObject, aParameters ||[]);
		}, iDelay);
	};

	/**
	 * Stops the delayed call.
	 *
	 * The function given when calling delayedCall is not called anymore.
	 *
	 * @param {string} sDelayedCallId The id returned, when calling delayedCall
	 * @public
	 */
	jQuery.sap.clearDelayedCall = function clearDelayedCall(sDelayedCallId) {
		clearTimeout(sDelayedCallId);
		return this;
	};

	/**
	 * Calls a method after a given interval and returns an id for this interval.
	 *
	 * @param {int} iInterval Interval time in milliseconds
	 * @param {object} oObject Object from which the method should be called
	 * @param {string|object} Method function pointer or name of the method
	 * @param {array} [aParameters] Method parameters
	 * @return {string} Id which can be used to cancel the interval with clearIntervalCall
	 * @public
	 */
	jQuery.sap.intervalCall = function intervalCall(iInterval, oObject, method, aParameters) {
		return setInterval(function(){
			if (jQuery.type(method) == "string") {
				method = oObject[method];
			}
			method.apply(oObject, aParameters ||[]);
		}, iInterval);
	};

	/**
	 * Stops the interval call.
	 *
	 * The function given when calling intervalCall is not called anymore.
	 *
	 * @param {string} sIntervalCallId The id returned, when calling intervalCall
	 * @public
	 */
	jQuery.sap.clearIntervalCall = function clearIntervalCall(sIntervalCallId) {
		clearInterval(sIntervalCallId);
		return this;
	};

	// Javadoc for private inner class "UriParams" - this list of comments is intentional!
	/**
	 * @interface  Encapsulates all URI parameters of the current windows location (URL).
	 *
	 * Use {@link jQuery.sap.getUriParameters} to create an instance of jQuery.sap.util.UriParameters.
	 *
	 * @author SAP AG
	 * @version 1.2.0
	 * @since 0.9.0
	 * @name jQuery.sap.util.UriParameters
	 * @public
	 */
	/**
	 * Returns the value(s) of the URI parameter with the given name sName.
	 *
	 * If the boolean parameter bAll is <code>true</code>, an array of string values of all
	 * occurrences of the URI parameter with the given name is returned. This array is empty
	 * if the URI parameter is not contained in the windows URL.
	 *
	 * If the boolean parameter bAll is <code>false</code> or is not specified, the value of the first
	 * occurrence of the URI parameter with the given name is returned. Might be <code>null</code>
	 * if the URI parameter is not contained in the windows URL.
	 *
	 * @param {string} sName The name of the URI parameter.
	 * @param {boolean} [bAll=false] Optional, specifies whether all or only the first parameter value should be returned.
	 * @return {string|array} The value(s) of the URI parameter with the given name
	 *
	 * @function
	 * @name jQuery.sap.util.UriParameters.prototype.get
	 */

	/*
	 * Implements jQuery.sap.util.UriParameters
	 */
	var UriParams = function(sUri) {
		this.mParams = {};
		var sQueryString = sUri || window.document.location.href;
		if ( sQueryString.indexOf('#') >= 0 ) {
			sQueryString = sQueryString.slice(0, sQueryString.indexOf('#'));
		}
		if(sQueryString.indexOf("?") >= 0){
			sQueryString = sQueryString.slice(sQueryString.indexOf("?") + 1);
			var aParameters = sQueryString.split("&"),
				mParameters = {},
				aParameter,
				sName,
				sValue;
			for(var i=0; i<aParameters.length; i++){
				aParameter = aParameters[i].split("=");
				sName = decodeURIComponent(aParameter[0]);
				sValue = aParameter.length > 1 ? decodeURIComponent(aParameter[1].replace(/\+/g,' ')) : "";
				if(sName){
					if(!Object.prototype.hasOwnProperty.call(mParameters, sName)){
						mParameters[sName] = [];
					}
					mParameters[sName].push(sValue);
				}
			}
			this.mParams = mParameters;
		}
	};

	UriParams.prototype = {};

	/*
	 * Implements jQuery.sap.util.UriParameters.prototype.get
	 */
	UriParams.prototype.get = function(sName, bAll) {
		var aValues = Object.prototype.hasOwnProperty.call(this.mParams, sName) ? this.mParams[sName] : [];
		return bAll === true ? aValues : (aValues[0] || null);
	};

	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.UriParameters}.
	 *
	 * Example for reading a single URI parameter (or the value of the first
	 * occurrence of the URI parameter):
	 * <pre>
	 *  var sValue = jQuery.sap.getUriParameters().get("myUriParam");
	 * </pre>
	 *
	 * Example for reading the values of the first of the URI parameter
	 * (with multiple occurrences):
	 * <pre>
	 *  var aValues = jQuery.sap.getUriParameters().get("myUriParam", true);
	 *  for(i in aValues){
	 *    var sValue = aValues[i];
	 *  }
	 * </pre>
	 *
	 * @public
	 * @return {jQuery.sap.util.UriParameters} A new URI parameters instance
	 */
	jQuery.sap.getUriParameters = function getUriParameters(sUri) {
		return new UriParams(sUri);
	};

	/**
	 * Sorts the given array in-place and removes any duplicates (identified by "===").
	 *
	 * Use <code>jQuery.unique()</code> for arrays of DOMElements.
	 *
	 * @param [Array} An Array of any type
	 * @return {Array} Same array as given (for chaining)
	 * @public
	 */
	jQuery.sap.unique = function(a) {
		jQuery.sap.assert(a instanceof Array, "unique: a must be an array");
		var l=a.length;
		if ( l > 1 ) {
			a.sort();
			for(var i=1,j=0; i<l; i++) {
				// invariant: i is the entry to check, j is the last unique entry known so far
				if ( a[i] !== a[j] ) {
					a[++j] = a[i];
				}
			}
			// cut off the rest - if any
			if ( ++j < l ) {
				a.splice(j, l-j);
			}
		}
		return a;
	};

}());

}; // end of jquery.sap.script
if ( !jQuery.sap.isDeclared('jquery.sap.keycodes') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/*
 * Provides constants for key codes. Useful in the implementation of keypress/keydown event handlers.
 */
jQuery.sap.declare("jquery.sap.keycodes", false);

/**
 * Enumeration of key codes.
 *
 * @namespace
 * @public
 * @since 0.9.0
 */
jQuery.sap.KeyCodes = {
	/**
	 * @type number
	 * @public
	 */
	BACKSPACE : 8,
	/**
	 * @type number
	 * @public
	 */
	TAB : 9,
	/**
	 * @type number
	 * @public
	 */
	ENTER : 13,
	/**
	 * @type number
	 * @public
	 */
	SHIFT : 16,
	/**
	 * @type number
	 * @public
	 */
	CONTROL : 17,
	/**
	 * @type number
	 * @public
	 */
	ALT : 18,
	/**
	 * @type number
	 * @public
	 */
	BREAK : 19,
	/**
	 * @type number
	 * @public
	 */
	CAPS_LOCK : 20,
	/**
	 * @type number
	 * @public
	 */
	ESCAPE : 27,
	/**
	 * @type number
	 * @public
	 */
	SPACE : 32,
	/**
	 * @type number
	 * @public
	 */
	PAGE_UP : 33,
	/**
	 * @type number
	 * @public
	 */
	PAGE_DOWN : 34,
	/**
	 * @type number
	 * @public
	 */
	END : 35,
	/**
	 * @type number
	 * @public
	 */
	HOME : 36,
	/**
	 * @type number
	 * @public
	 */
	ARROW_LEFT : 37,
	/**
	 * @type number
	 * @public
	 */
	ARROW_UP : 38,
	/**
	 * @type number
	 * @public
	 */
	ARROW_RIGHT : 39,
	/**
	 * @type number
	 * @public
	 */
	ARROW_DOWN : 40,
	/**
	 * @type number
	 * @public
	 */
	PRINT : 44,
	/**
	 * @type number
	 * @public
	 */
	INSERT : 45,
	/**
	 * @type number
	 * @public
	 */
	DELETE : 46,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_0 : 48,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_1 : 49,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_2 : 50,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_3 : 51,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_4 : 52,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_5 : 53,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_6 : 54,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_7 : 55,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_8 : 56,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_9 : 57,
	/**
	 * @type number
	 * @public
	 */
	A : 65,
	/**
	 * @type number
	 * @public
	 */
	B : 66,
	/**
	 * @type number
	 * @public
	 */
	C : 67,
	/**
	 * @type number
	 * @public
	 */
	D : 68,
	/**
	 * @type number
	 * @public
	 */
	E : 69,
	/**
	 * @type number
	 * @public
	 */
	F : 70,
	/**
	 * @type number
	 * @public
	 */
	G : 71,
	/**
	 * @type number
	 * @public
	 */
	H : 72,
	/**
	 * @type number
	 * @public
	 */
	I : 73,
	/**
	 * @type number
	 * @public
	 */
	J : 74,
	/**
	 * @type number
	 * @public
	 */
	K : 75,
	/**
	 * @type number
	 * @public
	 */
	L : 76,
	/**
	 * @type number
	 * @public
	 */
	M : 77,
	/**
	 * @type number
	 * @public
	 */
	N : 78,
	/**
	 * @type number
	 * @public
	 */
	O : 79,
	/**
	 * @type number
	 * @public
	 */
	P : 80,
	/**
	 * @type number
	 * @public
	 */
	Q : 81,
	/**
	 * @type number
	 * @public
	 */
	R : 82,
	/**
	 * @type number
	 * @public
	 */
	S : 83,
	/**
	 * @type number
	 * @public
	 */
	T : 84,
	/**
	 * @type number
	 * @public
	 */
	U : 85,
	/**
	 * @type number
	 * @public
	 */
	V : 86,
	/**
	 * @type number
	 * @public
	 */
	W : 87,
	/**
	 * @type number
	 * @public
	 */
	X : 88,
	/**
	 * @type number
	 * @public
	 */
	Y : 89,
	/**
	 * @type number
	 * @public
	 */
	Z : 90,
	/**
	 * @type number
	 * @public
	 */
	WINDOWS : 91,
	/**
	 * @type number
	 * @public
	 */
	CONTEXT_MENU : 93,
	/**
	 * @type number
	 * @public
	 */
	TURN_OFF : 94,
	/**
	 * @type number
	 * @public
	 */
	SLEEP : 95,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_0 : 96,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_1 : 97,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_2 : 98,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_3 : 99,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_4 : 100,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_5 : 101,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_6 : 102,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_7 : 103,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_8 : 104,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_9 : 105,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_ASTERISK : 106,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_PLUS : 107,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_MINUS : 109,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_COMMA : 110,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_SLASH : 111,
	/**
	 * @type number
	 * @public
	 */
	F1 : 112,
	/**
	 * @type number
	 * @public
	 */
	F2 : 113,
	/**
	 * @type number
	 * @public
	 */
	F3 : 114,
	/**
	 * @type number
	 * @public
	 */
	F4 : 115,
	/**
	 * @type number
	 * @public
	 */
	F5 : 116,
	/**
	 * @type number
	 * @public
	 */
	F6 : 117,
	/**
	 * @type number
	 * @public
	 */
	F7 : 118,
	/**
	 * @type number
	 * @public
	 */
	F8 : 119,
	/**
	 * @type number
	 * @public
	 */
	F9 : 120,
	/**
	 * @type number
	 * @public
	 */
	F10 : 121,
	/**
	 * @type number
	 * @public
	 */
	F11 : 122,
	/**
	 * @type number
	 * @public
	 */
	F12 : 123,
	/**
	 * @type number
	 * @public
	 */
	NUM_LOCK : 144,
	/**
	 * @type number
	 * @public
	 */
	SCROLL_LOCK : 145,
	/**
	 * @type number
	 * @public
	 */
	OPEN_BRACKET : 186,
	/**
	 * @type number
	 * @public
	 */
	PLUS : 187,
	/**
	 * @type number
	 * @public
	 */
	COMMA : 188,
	/**
	 * @type number
	 * @public
	 */
	SLASH : 189,
	/**
	 * @type number
	 * @public
	 */
	DOT : 190,
	/**
	 * @type number
	 * @public
	 */
	PIPE : 191,
	/**
	 * @type number
	 * @public
	 */
	SEMICOLON : 192,
	/**
	 * @type number
	 * @public
	 */
	MINUS : 219,
	/**
	 * @type number
	 * @public
	 */
	GREAT_ACCENT : 220,
	/**
	 * @type number
	 * @public
	 */
	EQUALS : 221,
	/**
	 * @type number
	 * @public
	 */
	SINGLE_QUOTE : 222,
	/**
	 * @type number
	 * @public
	 */
	BACKSLASH : 226
};
}; // end of jquery.sap.keycodes
if ( !jQuery.sap.isDeclared('sap.ui.base.Object') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * SAPUI5 base classes
 *
 * @namespace
 * @name sap.ui.base
 * @public
 */

// Provides class sap.ui.base.Object
jQuery.sap.declare("sap.ui.base.Object");
if ( !jQuery.sap.isDeclared('sap.ui.base.Interface') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.Interface
jQuery.sap.declare("sap.ui.base.Interface");

/**
 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
 *
 * @class A class that creates an Interface for an existing class. If a class returns the interface in its constructor,
 *        only the defined functions will be visible, no internals of the class can be accessed.
 *
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.2.0
 * @param {sap.ui.base.Object}
 *            oObject the instance that needs an interface created
 * @param {string[]}
 *            aMethods the names of the methods, that should be available on this interface
 * @constructor
 * @public
 */
sap.ui.base.Interface = function(oObject, aMethods) {

	// if object is null or undefined, return itself
	if (!oObject) {
		return oObject;
	}

	// this function is inline to not appear as a method on the interface

	function fCreateDelegator(oObject, sMethodName) {
		return function() {
//				return oObject[sMethodName].apply(oObject, arguments);
				var tmp = oObject[sMethodName].apply(oObject, arguments);
				return (!(tmp instanceof sap.ui.core.Element)&&(tmp instanceof sap.ui.base.Object))?tmp.getInterface():tmp;
			};
	}

	// if there are no methods return
	if (!aMethods) {
		return {};
	}

	var sMethodName;

	// create functions for all delegated methods
	// PERFOPT: 'cache' length of aMethods to reduce # of resolutions
	for (var i = 0, ml = aMethods.length; i < ml; i++) {
		sMethodName = aMethods[i];
		this[sMethodName] = fCreateDelegator(oObject, sMethodName);
	}

};
}; // end of sap.ui.base.Interface

if ( !jQuery.sap.isDeclared('sap.ui.base.Metadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.Metadata
jQuery.sap.declare("sap.ui.base.Metadata");


/**
 * Creates a new metadata object from the given static infos.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @class Metadata for a class.
 * @author Frank Weigel
 * @version 1.2.0
 * @since 0.8.6
 * @public
 */
sap.ui.base.Metadata = function(sClassName, oStaticInfo) {

	jQuery.sap.assert(typeof sClassName === "string" && sClassName, "Metadata: sClassName must be a non-empty string");
	jQuery.sap.assert(!oStaticInfo || typeof oStaticInfo === "object", "Metadata: oStaticInfo must be empty or an object");

	// retrieve class by its name. Using a lookup costs time but avoids the need for redundant arguments to this function
	var oClass = jQuery.sap.getObject(sClassName);
	if ( typeof oClass !== "function" ) {
		jQuery.sap.log.fatal("constructor for class " + sClassName + " must have been declared before calling defineClass");
	}

	this._sClassName = sClassName;
	this._oClass = oClass;

	oStaticInfo = oStaticInfo || {};
	if ( oStaticInfo.baseType ) {
		// lookup base class by its name - same reasoning as above
		var oParentClass = jQuery.sap.getObject(oStaticInfo.baseType);
		if ( typeof oParentClass !== "function" ) {
			jQuery.sap.log.fatal("base class '" + oStaticInfo.baseType + "' does not exist");
		}
		// link metadata with base metadata
		if ( oParentClass.getMetadata ) {
			this._oParent = oParentClass.getMetadata();
			jQuery.sap.assert(oParentClass === oParentClass.getMetadata().getClass(), "Metadata: oParentClass must match the class in the parent metadata");
		} else {
			// fallback, if base class has no metadata
			this._oParent = new sap.ui.base.Metadata(oStaticInfo.baseType, {});
		}
	} else {
		this._oParent = undefined;
	}

	// handle interfaces
	this._aInterfaces = jQuery.sap.unique(oStaticInfo.interfaces || []);

	// take over metadata from static info
	this._aPublicMethods = jQuery.sap.unique(oStaticInfo.publicMethods || []);

	// create the flattened "all" view
	if ( this._oParent ) {
		//this._aAllInterfaces = jQuery.sap.unique(this._oParent._aAllInterfaces.concat(this._aInterfaces));
		this._aAllPublicMethods = jQuery.sap.unique(this._oParent._aAllPublicMethods.concat(this._aPublicMethods));
	} else {
		//this._aAllInterfaces = this._aInterfaces;
		this._aAllPublicMethods = this._aPublicMethods;
	}
};

/**
 * Returns the fully qualified name of the class that is described by this metadata object
 * @return {string} name of the described class
 * @public
 */
sap.ui.base.Metadata.prototype.getName = function() {
	return this._sClassName;
};

/**
 * Returns the (constructor of the) class described by this metadata object.
 * @return {function} class described by this metadata
 * @public
 */
sap.ui.base.Metadata.prototype.getClass = function() {
	return this._oClass;
};

/**
 * Returns the metadata object of the base class of the class described by this metadata object
 * or null if the class has no (documented) base class.
 *
 * @return {sap.ui.base.Metadata} metadata of the base class
 * @public
 */
sap.ui.base.Metadata.prototype.getParent = function() {
	return this._oParent;
};

/**
 * Returns an array with the names of the public methods declared by this class.
 *
 * @return {string[]} array with names of public methods declared by this class
 * @public
 */
sap.ui.base.Metadata.prototype.getPublicMethods = function() {
	return this._aPublicMethods;
};

/**
 * Returns an array with the names of all public methods declared by this class
 * and its ancestors.
 *
 * @return {string[]} array with names of all public methods provided by this class and its ancestors
 * @public
 */
sap.ui.base.Metadata.prototype.getAllPublicMethods = function() {
	return this._aAllPublicMethods;
};

/**
 * Returns the names of interfaces implemented by this class.
 * As the representation of interfaces is not clear yet, this method is still private.
 *
 * @return {string} array of names of implemented interfaces
 * @private
 */
sap.ui.base.Metadata.prototype.getInterfaces = function() {
	return this._aInterfaces;
};

/**
 * Checks whether the class described by this object or one of its ancestors
 * implements the given interface.
 *
 * @param {string} sInterface name of the interface to test for (in dot notation)
 * @return {boolean} whether this class implements the interface
 * @public
 */
sap.ui.base.Metadata.prototype.isInstanceOf = function(sInterface) {
	if ( this._oParent ) {
		if ( this._oParent.isInstanceOf(sInterface) ) {
			return true;
		}
	};

	var a=this._aInterfaces;
	for(var i=0,l=a.length; i<l; i++) {
		// FIXME doesn't handle interface inheritance (requires object representation for interfaces)
		if ( a[i] === sInterface ) {
			return true;
		}
	}

	return false;
};

/**
 * Adds one or more new methods to the list of API methods.
 *
 * Can be used by contributer classes (like the EnabledPropagator) to enrich the declared set of methods.
 * The method can either be called with multiple names (strings) or with one array of strings.
 *
 * <b>Note</b>: the newly added method(s) will only be visible in {@link sap.ui.base.Interface interface}
 * objects that are created <i>after</i> this method has been called.
 *
 * @param {string||string[]} sMethod name(s) of the new method(s)
 */
sap.ui.base.Metadata.prototype.addPublicMethods = function(sMethod /* ... */) {
	var aNames = (sMethod instanceof Array) ? sMethod : arguments;
	function upush(a,v) {
		Array.prototype.push.apply(a, v); // appends "inplace"
		jQuery.sap.unique(a);
	}
	upush(this._aPublicMethods, aNames);
	upush(this._aAllPublicMethods, aNames);
};
}; // end of sap.ui.base.Metadata


/**
 * Constructor for a sap.ui.base.Object.
 *
 * @class Base class for all SAPUI5 Objects
 * @abstract
 * @author Malte Wedel
 * @version 1.2.0
 * @public
 */
sap.ui.base.Object = function() {
	if ( !(this instanceof sap.ui.base.Object) ) {
		throw Error("Cannot instantiate object: \"new\" is missing!");
	}
};

/**
 * Creates metadata for a given class and attaches it to the constructor and prototype of that class.
 *
 * After creation, metadata can be retrieved with getMetadata().
 *
 * The static info can at least contain the following entries:
 * <ul>
 * <li>baseType: {string} fully qualified name of a base class or empty
 * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}
 * </ul>
 *
 * @param {string} sClassName name of an (already declared) constructor function
 * @param {object} oStaticInfo static info used to create the metadata object
 * @param {string} oStaticInfo.baseType qualified name of a base class
 * @param {string[]} oStaticInfo.publicMethods array of names of public methods
 * @param {function} [xMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 *
 * @return {sap.ui.base.Metadata} the created metadata object
 * @public
 * @static
 */
sap.ui.base.Object.defineClass = function(sClassName, oStaticInfo, xMetaImpl) {

	// create Metadata object
	var oMetadata = new (xMetaImpl || sap.ui.base.Metadata)(sClassName, oStaticInfo);

	// attach the metadata to the class (ctor) and to its prototype
	var oClass = oMetadata.getClass();
	oClass.getMetadata = oClass.prototype.getMetadata = jQuery.sap.getter(oMetadata);

	jQuery.sap.log.debug("defined class '" + sClassName + "'" + (oMetadata.getParent() ? " as subclass of " + oMetadata.getParent().getName() : "") );

	return oMetadata;
};

sap.ui.base.Object.defineClass("sap.ui.base.Object");


/**
 * Destructor method for objects
 * @public
 */
sap.ui.base.Object.prototype.destroy = function() {
	// this.oInterface = null;
};

/**
 * Returns the public interface of the object.
 *
 * @return {sap.ui.base.Interface} the public interface of the object
 * @public
 */
sap.ui.base.Object.prototype.getInterface = function() {
	// New implementation that avoids the overhead of a dedicated member for the interface
	// initially, an Object instance has no associated Interface and the getInterface
	// method is defined only in the prototype. So the code here will be executed.
	// It creates an interface (basically the same code as in the old implementation)
	var oInterface = new sap.ui.base.Interface(this, this.getMetadata().getAllPublicMethods());
	// Now this Object instance gets a new, private implementation of getInterface
	// that returns the newly created oInterface. Future calls of getInterface on the
	// same Object therefore will return the already created interface
	this.getInterface = jQuery.sap.getter(oInterface);
	// as the first caller doesn't benefit from the new method implementation we have to
	// return the created interface as well.
	return oInterface;
	/**
	if (!this.oInterface) {
		this.oInterface = new sap.ui.base.Interface(this, this.getMetadata().getAllPublicMethods());
	}
	return this.oInterface;
	*/
};

/**
 * Returns the metadata for the class that this object belongs to.
 * This method is only defined when metadata has been declared by using {@link #defineClass}.
 *
 * @name sap.ui.base.Object.prototype#getMetadata
 * @function
 * @abstract
 * @public
 */
}; // end of sap.ui.base.Object
if ( !jQuery.sap.isDeclared('sap.ui.base.DataType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.DataType
jQuery.sap.declare("sap.ui.base.DataType");

/**
 * @class Describes the metadata of a data type and provides methods for validation.
 * @author Frank Weigel
 * @since 0.9.0
 */
sap.ui.base.DataType = function() {
	// Avoid construction of a DataType.
	// DataType is only a function to support the "instanceof" operator.
	throw new Error();
};

/**
 * The qualified name of the data type.
 * Note that this name usually equals the design time name of the type.
 * Only for primitive types it differs, namely it omits the package 'sap.ui.core'.
 * @return {string} name of the data type
 * @public
 */
sap.ui.base.DataType.prototype.getName = function() {
	return undefined;
};

/**
 * The base type of this type or undefined if this is a primitive type.
 * @return {sap.ui.base.DataType} base type or undefined
 * @public
 */
sap.ui.base.DataType.prototype.getBaseType = function() {
	return undefined;
};

/**
 * The component type of this type or undefined if this is not an array.
 * @return {sap.ui.base.DataType} component type or undefined
 * @public
 */
sap.ui.base.DataType.prototype.getComponentType = function() {
	return undefined;
};

/**
 * The default value for this type. Each type must define a default value.
 * @return {any} default value of the data type. The type of the returned value
 *    must match the JavaScript type of the data type (a string for string types etc.)
 * @public
 */
sap.ui.base.DataType.prototype.getDefaultValue = function() {
	return undefined;
};

/**
 * Parses the given string value and converts it into the specific data type.
 * @param {string} sValue string representation for a value of this type
 * @return the value in the correct internal format
 * @public
 */
sap.ui.base.DataType.prototype.parseValue = function(sValue) {
	// currently this function considers to handle primitive values
	// - in future may be other values might be also relevant.
	var sType = this.getName();
	if (sType == "string") {
		return sValue;
	} else if (sType == "boolean") {
		return sValue == "true";
	} else if (sType == "int") {
		return parseInt(sValue, 10);
	} else if (sType == "float") {
		return parseFloat(sValue);
	} else {
		// support for other types like e.g.
		// sap.ui.core.CSSSize (just apply)
		return sValue;
	}
};

/**
 * A validation check. To be implemented by concrete types.
 * @param {any} vValue the value to be checked
 * @return {boolean} whether the given value is valid for this data type (without conversion)
 * @public
 */
sap.ui.base.DataType.prototype.isValid = undefined;

(function() {

	function createType(name, s, base) {

		jQuery.sap.assert(typeof name === "string" && !!name, "DataType.<createType>: type name must be a string");
		jQuery.sap.assert(!base || base instanceof sap.ui.base.DataType, "DataType.<createType>: base type must be empty or a DataType");
		s = s || {};
		base = base || sap.ui.base.DataType.prototype;

		// create a new type object with the base type as prototype
		var type = jQuery.sap.newObject(base);

		// getter for the name
		type.getName = function() { return name; };

		// if a default value is specified, create a getter for it
		if ( s.hasOwnProperty("defaultValue") ) {
			var vDefault = s.defaultValue;
			type.getDefaultValue = function() { return vDefault; };
		}

		// if a validator is specified either chain it with the base type validator
		// or set it if no base validator exists
		if ( s.hasOwnProperty("isValid") ) {
			var fnIsValid = s.isValid;
			type.isValid = base.isValid ? function(vValue) {
				if ( !base.isValid(vValue) ) {
					return false;
				}
				return fnIsValid(vValue);
			} : fnIsValid;
		};

		return type;
	}
	
	function createArrayType(componentType) {
		jQuery.sap.assert(componentType instanceof sap.ui.base.DataType, "DataType.<createArrayType>: compoinentType must be a DataType");

		// create a new type object with the base type as prototype
		var type = jQuery.sap.newObject(sap.ui.base.DataType.prototype);

		// getter for the name
		type.getName = function() { return componentType.getName() + "[]"; };

		// getter for component type
		type.getComponentType = function() { return componentType; };
		
		// array validator
		type.isValid = function(aValues) {
			if (aValues === null) {
				return true;
			}
			if (jQuery.isArray(aValues)) {
				for (var i = 0; i < aValues.length; i++) {
					if (!componentType.isValid(aValues[i])) {
						return false;
					}
				}
				return true;
			}
			return false;
		};
		
		// array parser
		type.parseValue = function(sValue) {
			var aValues = sValue.split(",");
			for (var i = 0; i < aValues.length; i++) {
				aValues[i] = componentType.parseValue(aValues[i]);
			}
			return aValues;
		};

		return type;
	}

	var PREDEFINED_TYPES = {

		"boolean" :
			createType("boolean", {
				defaultValue : false,
				isValid : function(vValue) {
					return typeof vValue === "boolean";
				}
			}),

		"int" :
			createType("int", {
				defaultValue : 0,
				isValid : function(vValue) {
					return typeof vValue === "number" && Math.floor(vValue) == vValue;
				}
			}),

		"float" :
			createType("float", {
				defaultValue : 0.0,
				isValid : function(vValue) {
					return typeof vValue === "number";
				}
			}),

		"string" :
			createType("string", {
				defaultValue : "",
				isValid : function(vValue) {
					return typeof vValue === "string";
				}
			}),
		"object" :
			createType("object", {
				defaultValue : null,
				isValid : function(vValue) {
					return typeof vValue === "object" || typeof vValue === "function";
				}
			})
	};

	/**
	 * Returns the type object for the type with the given name.
	 * @return the type object or undefined when no such type object exists.
	 * @public
	 */
	sap.ui.base.DataType.getType = function(sTypeName) {
		if (sTypeName.indexOf("[]") > 0) {
			var sComponentTypeName = sTypeName.substr(0, sTypeName.length - 2),
				oComponentType = this.getType(sComponentTypeName);
			return oComponentType && createArrayType(oComponentType);
		} else {
			return PREDEFINED_TYPES[sTypeName] || jQuery.sap.getObject(sTypeName);
		}
	};

	/**
	 * Creates a new type as a subtype of a given type.
	 * @param {string} sName the unique name of the new type
	 * @param {object} [mSettings settings] for the new type
	 * @param {any} [mSettings.defaultValue] the default value for the new type
	 * @param {function} [mSettings.isValid] a validator function for values of the new type
	 * @param {sap.ui.base.DataType} [base] the base type for the new type
	 * @public
	 */
	sap.ui.base.DataType.createType = createType;

}());
}; // end of sap.ui.base.DataType
if ( !jQuery.sap.isDeclared('sap.ui.base.ObjectPool') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.ObjectPool
jQuery.sap.declare("sap.ui.base.ObjectPool");


/**
 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
 * In order to be maintained by the ObjectPool, oObjectClass must implement
 * methods described in the class description.
 *
 * @param {function} oObjectClass constructor for the class of objects that this pool should manage
 *
 * @class Manages a pool of objects all of the same type;
 * the type has to be specified at pool construction time.
 *
 * Maintains a list of free objects of the given type.
 * If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object
 * is taken from the pool and the <code>init</code> method is called on this
 * object.
 *
 * When no longer needed, any borrowed object should be returned to
 * the pool by calling {@link #returnObject}. At that point in time,
 * the reset method is called on the object and the object is added to the
 * list of free objects.
 *
 * See {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.
 *
 * Example:
 * <pre>
 *   this.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);
 *   var oEvent = this.oEventPool.borrowObject(iEventId, mParameters);
 * </pre>
 *
 * @extends sap.ui.base.Object
 * @author Malte Wedel
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.base.ObjectPool = function(oObjectClass) {

	sap.ui.base.Object.apply(this);

	this.oObjectClass = oObjectClass;

	this.aFreeObjects = [];
//	this.aUsedObjects = []; //PERFOPT: Holding those is currently senseless.

};

sap.ui.base.ObjectPool.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Borrows a free object from the pool. Any arguments to this method
 * are forwarded to the init method of the borrowed object.
 *
 * @param {any} [any] optional initialization parameters for the borrowed object
 * @return {object} the borrowed object of the same type that has been specified for this pool
 * @public
 */
sap.ui.base.ObjectPool.prototype.borrowObject = function() {

	// PERFOPT: Reduced callstack
	var oObject = this.aFreeObjects.length == 0 ?
			new this.oObjectClass() :
				this.aFreeObjects.pop();
	oObject.init.apply(oObject, arguments);
//	this.aUsedObjects.push(oObject); //PERFOPT: Holding those is currently senseless.

	return oObject;
};

/**
 * Returns an object to the pool. The object must have been borrowed from this
 * pool beforehand. The reset method is called on the object before it is added
 * to the set of free objects.
 *
 * @param {object} the object to return to the pool
 * @public
 */
sap.ui.base.ObjectPool.prototype.returnObject = function(oObject) {

	oObject.reset();
	// If the next line is ever activated again, ensure not simply the topmost object is poped but the one returned!!
//	this.aUsedObjects.pop(); //PERFOPT: Holding those is currently senseless.
	this.aFreeObjects.push(oObject);

};


/**
 * Poolable objects must provide a no-arg constructor which is used by the pool
 * to construct new, unused objects.
 *
 * To be more convenient to use, poolable objects should implement their constructor
 * in a way that it either can be called with no arguments (used by the pool) or
 * with the same signature as their {@link #init} method (to be used by applications).
 *
 * @name sap.ui.base.Poolable
 * @interface Contract for objects that can be pooled by ObjectPool
 * @constructor
 * @public
 */

/**
 * Called by the object pool when this instance will be actived for a caller.
 * The same method will be called after a new instance has been created by an otherwise
 * exhausted pool.
 *
 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
 * all arguments will be propagated to this method.
 *
 * @name sap.ui.base.Poolable.prototype.init
 * @function
 * @public
 */

/**
 * Called by the object pool when an instance is returned to the pool.
 * While no specific implementation is required, poolable objects in general
 * should clean all caller specific state (set to null) in this method to
 * avoid memory leaks and to enforce garbage collection of the caller state.
 *
 * @name sap.ui.base.Poolable.prototype.reset
 * @function
 * @public
 */
}; // end of sap.ui.base.ObjectPool
if ( !jQuery.sap.isDeclared('sap.ui.base.Event') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.Event
jQuery.sap.declare("sap.ui.base.Event");


/**
 * Creates an event with the given sId, linked to the provided oSource and enriched with the mParameters.
 *
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {Object} mParameters A map of parameters for this event
 *
 * @class An Event object consisting of an id, a source and a map of parameters
 * @extends sap.ui.base.Object
 * @implements sap.ui.base.Poolable
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.2.0
 * @public
 */
// TODO Previous documentation stated that sId is numerical, but this seems not to be true
sap.ui.base.Event = function(sId, oSource, mParameters) {

	sap.ui.base.Object.apply(this);

	if (arguments.length > 0) {
		this.init(sId, oSource, mParameters);
	}

};
sap.ui.base.Event.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Init this event with its data.
 *
 * The <code>init</code> method is called by an object pool when the
 * object is (re-)activated for a new caller.
 *
 * When no <code>mParameters</code> are given, an empty object is used instead.
 *
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {Object} [mParameters] the event parameters
 *
 * @see sap.ui.base.Poolable.prototype#init
 */
sap.ui.base.Event.prototype.init = function(sId, oSource, mParameters) {
	jQuery.sap.assert(typeof sId === "string", "Event.init: sId must be a string");
	jQuery.sap.assert(oSource instanceof sap.ui.base.EventProvider, "Event.init: oSource must be an EventProvider");

	this.sId = sId;
	this.oSource = oSource;
	this.mParameters = mParameters || {};
	this.bCancelBubble = false;
	this.bPreventDefault = false;
};

/**
 * Reset event data, needed for pooling
 * @see sap.ui.base.Poolable.prototype#reset
 */
sap.ui.base.Event.prototype.reset = function() {
	this.sId = "";
	this.oSource = null;
	this.mParameters = null;
	this.bCancelBubble = false;
	this.bPreventDefault = false;
};

/**
 * Returns the id of the event
 * @return {string} The id of the event
 * @public
 */
sap.ui.base.Event.prototype.getId = function() {

	return this.sId;

};

/**
 * Returns the source of the event
 * @return {sap.ui.base.EventProvider} The source of the event
 * @public
 */
sap.ui.base.Event.prototype.getSource = function() {

	return this.oSource;

};

/**
 * Returns all parameter values of the event keyed by their names.
 * @return {map} All parameters of the event keyed by name
 * @public
 */
sap.ui.base.Event.prototype.getParameters = function() {

	return this.mParameters;

};

/**
 * Returns the value of the parameter with the given sName.
 *
 * @param {string} sName the name of the parameter to return
 * @return {any} the value for the named parameter
 * @public
 */
sap.ui.base.Event.prototype.getParameter = function(sName) {

	jQuery.sap.assert(typeof sName === "string" && sName, "Event.getParameter: sName must be a non-empty string");

	return this.mParameters[sName];

};

/**
 * Cancel bubbling of the event.
 * @public
 */
sap.ui.base.Event.prototype.cancelBubble = function() {
	
	this.bCancelBubble = true;
	
};

/**
 * Prevent the default action of this event.
 * @public
 */
sap.ui.base.Event.prototype.preventDefault = function() {
	
	this.bPreventDefault = true;
	
};


}; // end of sap.ui.base.Event
if ( !jQuery.sap.isDeclared('sap.ui.base.EventProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.base.EventProvider
jQuery.sap.declare("sap.ui.base.EventProvider");




/**
 * Creates an instance of EventProvider.
 * @class Provides internal eventing facilities for objects, so other objects can attach
 * and detach events, and are notified, when events are fired
 *
 * @abstract
 * @extends sap.ui.base.Object
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.base.EventProvider = function() {

	sap.ui.base.Object.apply(this);

	/**
	 * A map of arrays of event registrations keyed by the event names
	 * @private
	 */
	this.mEventRegistry = {};
	
};

sap.ui.base.EventProvider.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

sap.ui.base.Object.defineClass("sap.ui.base.EventProvider", {
	baseType: "sap.ui.base.Object"
});

/**
 * Map of event names and ids, that are provided by this class
 * @private
 * @static
 */
sap.ui.base.EventProvider.M_EVENTS = {EventHandlerChange:"EventHandlerChange"};

/**
 * Pool is defined on the prototype to be shared among all EventProviders
 * @private
 */
sap.ui.base.EventProvider.prototype.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);

/**
 * Adds an event registration for the given object and given event name
 *
 * @param {String}
 *            sEventId The identifier of the event to listen for
 * @param {Object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {Function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event provider-instance
 * @param {Object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.EventProvider.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventProvider.attachEvent: sEventId must be a non-empty string");
	if(typeof(oData) === "function") {
	//one could also increase the check in the line above
	//if(typeof(oData) === "function" && oListener === undefined) {
		oListener = fnFunction;
		fnFunction = oData;
		oData = undefined;
	}
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventProvider.attachEvent: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventProvider.attachEvent: oListener must be empty or an object");

	if (!this.mEventRegistry[sEventId]) {
		this.mEventRegistry[sEventId] = [];
	}
	this.mEventRegistry[sEventId].push({oListener:oListener, fFunction:fnFunction, oData: oData});

	// Inform interested parties about changed EventHandlers
	this.fireEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, {EventId: sEventId, type: 'listenerAttached'});

	return this;
};

/**
 * Removes an event registration for the given object and given event name.
 *
 * The passed parameters must match those used for registration with {@link #attachEvent } beforehand!
 *
 * @param {String}
 *            sEventId The identifier of the event to detach from
 * @param {Function}
 *            fFunction The function to call, when the event occurs.
 * @param {Object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.EventProvider.prototype.detachEvent = function(sEventId, fnFunction, oListener) {

	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventProvider.detachEvent: sEventId must be a non-empty string" );
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventProvider.detachEvent: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventProvider.detachEvent: oListener must be empty or an object");

	var aEventListeners = this.mEventRegistry[sEventId];
	if (!aEventListeners) {
		return this;
	}
	//PERFOPT use array. remember length to not re-calculate over and over again
	for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
		//PERFOPT check for identity instead of equality... avoid type conversion
		if (aEventListeners[i].fFunction === fnFunction && aEventListeners[i].oListener === oListener) {
			//delete aEventListeners[i];
			aEventListeners.splice(i,1);
			break;
		}
	}
	// If we just deleted the last registered EventHandler, remove the whole entry from our map.
	if(aEventListeners.length == 0) {
		delete this.mEventRegistry[sEventId];
	}

	// Inform interested parties about changed EventHandlers
	this.fireEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, {EventId: sEventId, type: 'listenerDetached' });

	return this;
};

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 *
 * @param {String} sEventId the event id
 * @param {Object} [mParameters] the parameter map
 * @param {boolean} [bAllowPreventDefault] whether prevent default is allowed
 * @param {boolean} [bEnableEventBubbling] whether event bubbling is enabled
 * @return {sap.ui.base.EventProvider|boolean} Returns <code>this</code> to allow method chaining or 
 * 		   whether the default action should be executed, when bAllowPreventDefault has been set to true
 * @protected
 */
sap.ui.base.EventProvider.prototype.fireEvent = function(sEventId, mParameters, bAllowPreventDefault, bEnableEventBubbling) {

	// at least in BrowserEventManager when firing events of its E_EVENTS enumeration, the type will be an integer... thus avoid this check
//	jQuery.sap.assert(typeof (sEventId) == "string");

	// get optional parameters right
	if (typeof mParameters == "boolean") {
		bEnableEventBubbling = bAllowPreventDefault;
		bAllowPreventDefault = mParameters;
	}
	
	var aEventListeners = this.mEventRegistry[sEventId],
		bPreventDefault = false,
		oEvent, oParent, oInfo;
	
	if (aEventListeners && jQuery.isArray(aEventListeners)) {

		// this ensures no 'concurrent modification exception' occurs (e.g. an event listener deregisters itself).
		aEventListeners = aEventListeners.slice();
		
		oEvent = this.oEventPool.borrowObject(sEventId, this, mParameters);
		
		//PERFOPT use array. remember length to not re-calculate over and over again
		for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
			oInfo = aEventListeners[i];
			oInfo.fFunction.call(oInfo.oListener || this, oEvent, oInfo.oData);
		}
		
		// In case this is a bubbling event and object has a getParent method, also fire on parents
		if (bEnableEventBubbling) {
			oParent = this.getEventingParent();
			while (oParent && !oEvent.bCancelBubble) {
				aEventListeners = oParent.mEventRegistry[sEventId];
				if (aEventListeners && aEventListeners instanceof Array) {
					aEventListeners = aEventListeners.slice();
					for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
						oInfo = aEventListeners[i];
						oInfo.fFunction.call(oInfo.oListener || oParent, oEvent, oInfo.oData);
					}
				}
				oParent = oParent.getEventingParent();
			}
		}
		
		// Store prevent default state, before returning event to the pool
		bPreventDefault = oEvent.bPreventDefault;
			
		this.oEventPool.returnObject(oEvent);
	}
	
	// Only return prevent default result in case it has been enabled, for compatibility
	if (bAllowPreventDefault) {
		return !bPreventDefault;
	}
	else {
		return this;
	}
};

/**
 * Returns whether there are any listeners for the given event ID.
 *
 * @param {String} sEventId the ID of the event
 * @return {boolean} whether there are any listeners
 * @private
 */
sap.ui.base.EventProvider.prototype.hasListeners = function(sEventId) {
	return !!this.mEventRegistry[sEventId];
};

/**
 * Returns the list of events currently having listeners attached.
 *
 * Introduced for lightspeed support to ensure that only relevant events are attached to the LS-world.
 *
 * This is a static method to avoid the pollution of the Element/Control namespace.
 * As the callers are limited and known and for performance reasons the internal event registry
 * is returned. It contains more information than necessary, but needs no expensive conversion.
 *
 * @return {object} the list of events currently having listeners attached
 * @private
 * @static
 */
sap.ui.base.EventProvider.getEventList = function(oEventProvider) {
	return oEventProvider.mEventRegistry;
};

/**
 * Returns the parent in the eventing hierarchy of this object.
 *
 * Per default this returns null, but if eventing is used in objects, which are hierarchically 
 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
 * enables the use of event bubbling within this object hierarchy.
 *
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 */
sap.ui.base.EventProvider.prototype.getEventingParent = function() {
	return null;
};

/**
 * Returns a string representation of this object.
 *
 * In case there is no class or id information, a simple static string is returned.
 * Subclasses should override this method.
 *
 * @return {string} a string description of this eventProvider
 * @public
 */
sap.ui.base.EventProvider.prototype.toString = function() {
	if ( this.getMetadata ) {
		return "EventProvider " + this.getMetadata().getName();
	}
	else {
		return "EventProvider";
	}
};

///**
// * Destroy this instance of the EventProvider.
// * @protected
// */
//sap.ui.base.EventProvider.prototype.exit = function() {
//	this.mEventRegistry = null;
//};
}; // end of sap.ui.base.EventProvider
if ( !jQuery.sap.isDeclared('sap.ui.base.Exception') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.base.Exception");

/**
 * Exception class
 * 
 * This is the base exception class. In contrary to the Error an Exception
 * should be thrown in cases, where the exception can, and should, be handled
 * within the framework, instead of causing the application to exit.
 * 
 * The try/catch statement in JavaScript can not catch specific exceptions, so 
 * when catching internal exceptions you should make sure to rethrow other errors:
 * 
 * try {
 *     ...
 * }
 * catch (oException) {
 *     if (oException instanceof sap.ui.base.Exception) {
 *         ... handle exception ...
 *     }
 *     else {
 *     	   throw oException;
 *     }
 * }
 * 
 */
sap.ui.base.Exception = function(message) {
	this.name = "Exception";
	this.message = message;
};

}; // end of sap.ui.base.Exception
if ( !jQuery.sap.isDeclared('sap.ui.Global') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * @overview Initialization for the SAP UI Library
 *
 * This module creates the main SAP namespaces {@link sap} and automatically
 * registers it to the OpenAjax hub if that exists.
 *
 * This class provides method {@link #namespace} to register namespaces to the
 * SAP UI Library.
 *
 * @sample
 * Ensures a control can be used afterwards but does not load immediately
 * sap.ui.lazyRequire("sap.ui.core/Control");
 * sap.ui.lazyRequire("sap.ui.commons/Button");
 *
 * @version 1.2.0
 * @author  Martin Schaus, Daniel Brinkmann
 * @public
 */

/*global OpenAjax */// declare unusual global vars for JSLint/SAPUI5 validation

// Register to the OpenAjax Hub if it exists
if (window.OpenAjax && window.OpenAjax.hub) {
	OpenAjax.hub.registerLibrary("sap", "http://www.sap.com/", "0.1", {});
}

jQuery.sap.declare("sap.ui.Global");
if ( !jQuery.sap.isDeclared('jquery.sap.dom') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides functionality related to DOM analysis and manipulation which is not provided by jQuery itself.
jQuery.sap.declare("jquery.sap.dom", false);

(function() {

	/**
	 * Shortcut for document.getElementById(...) with additionally an IE6/7 bug fixed.
	 * Used to replace the jQuery.sap.domById when running in IE < v8.
	 * 
	 * @param {String} sId the id of the DOM element to return
	 * @param {window} oWindow the window (optional)
	 * @return {DOMNode} the DOMNode identified by the given sId
	 * @private
	 */
	var domByIdInternal = function(sId, oWindow) {

		if (!oWindow) {
			oWindow = window;
		}
		if (!sId || sId=="") {
			return null;
		}

		var oDomRef = oWindow.document.getElementById(sId);
		
		// IE also returns the element with the name or id whatever is first
		// => the following line makes sure that this was the id
		if (oDomRef && oDomRef.id == sId) {
			return oDomRef;
		}

		// otherwise try to lookup the name
		var oRefs = oWindow.document.getElementsByName(sId);
		for (var i=0;i<oRefs.length;i++) {
			oDomRef = oRefs[i];
			if (oDomRef && oDomRef.id == sId) {
				return oDomRef;
			}
		}

		return null;

	};
	
	/**
	 * Shortcut for document.getElementById(...) with additionally an IE bug fixed.
	 *
	 * @param {String} sId The id of the DOM element to return
	 * @param {window} oWindow The window (optional)
	 * @return {DOMNode} The DOMNode identified by the given sId
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.domById = jQuery.browser.msie && jQuery.browser.version < 8 ? domByIdInternal : function domById(sId, oWindow) {
		return sId ? (oWindow || window).document.getElementById(sId) : null;
	};


	/**
	 * Shortcut for jQuery("#" + id) with additionally the id being escaped properly.
	 * I.e.: returns the jQuery object for the DOM element with the given id
	 *
	 * Use this method instead of jQuery(...) if you know the argument is exactly one id and
	 * the id is not known in advance because it is in a variable (as opposed to a string
	 * constant with known content).
	 *
	 * @param {String} sId The id to search for and construct the jQuery object
	 * @param {DomNode} oContext The context DomNode
	 * @return {Object} The jQuery object for the DOM element identified by the given sId
	 * @public
	 * @since 0.9.1
	 */
	jQuery.sap.byId = function byId(sId, oContext) {
		var escapedId = "";
		if (sId) {
			escapedId = "#" + sId.replace(/(:|\.)/g,'\\$1');
		}
		return jQuery(escapedId, oContext);
	};
	
	
	/**
	 * Calls focus() on the given DOM element, but catches and ignores any errors that occur when doing so.
	 * (i.e. IE8 throws an error when the DOM element is invisible or disabled)
	 *  
	 * @param {DomNode} oDomRef The DOM element to focus (or null - in this case the method does nothing)
	 * @return {boolean} Whether the focus() command was executed without an error
	 * @public
	 * @since 1.1.2
	 */
	jQuery.sap.focus = function focus(oDomRef) {
		if (!oDomRef) return;
		try {
			oDomRef.focus();
		} catch (e) {
			var id = (oDomRef && oDomRef.id) ? " (ID: '" + oDomRef.id + "')" : "";
			jQuery.sap.log.warning("Error when trying to focus a DOM element" + id + ": " + e.message);
			return false;
		}
		return true;
	};


	/**
	 * Sets or gets the position of the cursor in an element that supports cursor positioning
	 *
	 * @param {int} iPos The cursor position to set (or no parameter to retrieve the cursor position)
	 * @return {int | jQuery} The cursor position (or the jQuery collection if the position has been set)
	 * @public
	 * @methodOf jQuery.prototype
	 * @name cursorPos
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.cursorPos = function cursorPos(iPos) {
		var len = arguments.length,
			oTextRange,iLength,
			sTagName,
			sType;
			
		// in jQuery > 1.6 attr() don't gives results for some property, instead there is a prop() method
		if (this.prop) {
			sTagName = this.prop("tagName");
			sType = this.prop("type");
		}else{
			sTagName = this.attr("tagName");
			sType = this.attr("type");
		}
	
		if( this.length === 1 && ((sTagName == "INPUT" && (sType == "text" || sType == "password"))
				|| sTagName == "TEXTAREA" )) {

			var oDomRef = this.get(0);

			if (len > 0) { // SET

				if (oDomRef.createTextRange) { // IE method
					oTextRange = oDomRef.createTextRange();
					var iMaxLength = oDomRef.value.length;

					if(iPos < 0 || iPos > iMaxLength) {
						iPos = iMaxLength;
					}
					if(oTextRange) {
						oTextRange.collapse();
						oTextRange.moveEnd("character",iPos);
						oTextRange.moveStart("character",iPos);
						oTextRange.select();
					}
				} else if (typeof(oDomRef.selectionStart) == "number") { // FF method
					oDomRef.focus();
					oDomRef.selectionStart = iPos;
					oDomRef.selectionEnd = iPos;
				}

				return this;
				// end of SET

			} else { // GET

				if (oDomRef.createTextRange) { //IE
					oTextRange = window.document.selection.createRange();
					var oCopiedTextRange = oTextRange.duplicate();
					// Logic in TEXTAREA and INPUT is different in IE -> check for element type
					if(oDomRef.tagName == "TEXTAREA"){
						oCopiedTextRange.moveToElementText(oDomRef);
						var oCheckTextRange = oCopiedTextRange.duplicate();
						iLength = oCopiedTextRange.text.length;

						// first check if cursor on last position
						oCheckTextRange.moveStart("character", iLength);
						if(oCheckTextRange.inRange(oTextRange)){
							iStart = iLength;
						}else{
							// find out cursor position using a bisection algorithm
							var iCheckLength = iLength;
							var iStart = 0;
							while(iLength > 1){
								iCheckLength = Math.round(iLength / 2);
								iStart = iStart + iCheckLength;

								oCheckTextRange = oCopiedTextRange.duplicate();
								oCheckTextRange.moveStart("character", iStart);
								if(oCheckTextRange.inRange(oTextRange)){
									//cursor is after or on iStart -> Length = not checked Length
									iLength = iLength - iCheckLength;

								}else{
									//cursor is before iStart  -> Length = checked Length
									iStart = iStart - iCheckLength;
									iLength = iCheckLength;
								}
							}
						}
						return iStart;
					} else if (oCopiedTextRange.parentElement() === oDomRef) {
						// ensure there is only the cursor and not the range (as this would create erroneous position)!
						oCopiedTextRange.collapse();
						// now, move the selection range to the beginning of the inputField and simply get the selected range's length
						var iLength = oDomRef.value.length;
						oCopiedTextRange.moveStart('character', -iLength);
						return oCopiedTextRange.text.length;
					}
				} else if (typeof(oDomRef.selectionStart) == "number") { // Firefox etc.
					return oDomRef.selectionStart;
				}

				return -1;
			} // end of GET
		} else {
			// shouldn't really happen, but to be safe...
			return this;
		}
	};

	/**
	 * Sets the text selection in the first element of the collection
	 *
	 * @param {int} iStart Start position of the selection (inclusive)
	 * @param {int} iEnd End position of the selection (exclusive)
	 * @return {jQuery} The jQuery collection
	 * @public
	 * @methodOf jQuery.prototype
	 * @name selectText
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.selectText = function selectText(iStart, iEnd) {
		var oDomRef = this.get(0);

		if (oDomRef) {
			if(oDomRef.createTextRange) { // Firefox
				var oTextEditRange = oDomRef.createTextRange();
				oTextEditRange.collapse();
				oTextEditRange.moveStart('character', iStart);
				oTextEditRange.moveEnd('character', iEnd - iStart);
				oTextEditRange.select();
			} else if(typeof(oDomRef.selectionStart) == "number") { // Firefox
				oDomRef.selectionStart = iStart; // TODO: maybe need to decouple via setTimeout?
				oDomRef.selectionEnd = iEnd;
			}
		}

		return this;
	};


	/**
	 * Returns the outer HTML of the given HTML element
	 *
	 * @return {String} outer HTML
	 * @public
	 * @methodOf jQuery.prototype
	 * @name outerHTML
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.outerHTML = function outerHTML() {
		var oDomRef = this.get(0);

		if (oDomRef && oDomRef.outerHTML) {
			return jQuery.trim(oDomRef.outerHTML);
		} else {
			var doc = this[0] ? this[0].ownerDocument : document;

			var oDummy = doc.createElement("div");
			oDummy.appendChild(oDomRef.cloneNode(true));
			return oDummy.innerHTML;
		}
	};


	/**
	 * Returns whether oDomRefChild is oDomRefContainer or is contained in oDomRefContainer.
	 *
	 * This is a browser-independent version of the .contains method of Internet Explorer.
	 * For compatibility reasons it returns true if oDomRefContainer and oDomRefChild are equal.
	 *
	 * This method intentionally does not operate on the jQuery object, as the original jQuery.contains() 
	 * method also does not do so.
	 *
	 * @param {DOMNode} oDomRefContainer The container element
	 * @param {DOMNode} oDomRefChild The child element (must not be a text node, must be an element)
	 * @return {boolean} 'true' if oDomRefChild is contained in oDomRefContainer or oDomRefChild is oDomRefContainer
	 * @public
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.sap.containsOrEquals = function containsOrEquals(oDomRefContainer, oDomRefChild) {
		if (oDomRefChild && oDomRefContainer && oDomRefChild != document && oDomRefChild != window) {
			return (oDomRefContainer === oDomRefChild) || jQuery.contains(oDomRefContainer, oDomRefChild);
		}
		return false;
	};


	/**
	 * Returns a rectangle describing the current visual positioning of the first DOM object in the collection
	 * (or null if no element was given)
	 *
	 * @return {object} An object with left, top, width and height
	 * @public
	 * @methodOf jQuery.prototype
	 * @name rect
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.rect = function rect() {
		var oDomRef = this.get(0);

		if (oDomRef) {
			// this should be available in all 'modern browsers'
			if (oDomRef.getBoundingClientRect) {
				var oClientRect = oDomRef.getBoundingClientRect();
				var oRect = { top : oClientRect.top,
						left : oClientRect.left,
						width : oClientRect.right - oClientRect.left,
						height : oClientRect.bottom - oClientRect.top };

				var oWnd = jQuery.sap.ownerWindow(oDomRef);
				oRect.left += jQuery(oWnd).scrollLeft();
				oRect.top += jQuery(oWnd).scrollTop();

				return oRect;
			} else {
				// IE6 and older; avoid crashing and give some hardcoded size
				return { top : 10, left : 10, width : oDomRef.offsetWidth, height : oDomRef.offsetWidth };
			}
		}
		return null;
	};


	/**
	 * Returns whether a point described by X and Y is inside this Rectangle's boundaries
	 *
	 * @param {int} iPosX
	 * @param {int} iPosY
	 * @return Whether X and Y are inside this Rectangle's boundaries
	 * @public
	 * @methodOf jQuery.prototype
	 * @name rectContains
	 * @author SAP AG
	 * @since 0.18.0
	 */
	jQuery.fn.rectContains = function rectContains(iPosX, iPosY) {
		jQuery.sap.assert(!isNaN(iPosX), "iPosX must be a number");
		jQuery.sap.assert(!isNaN(iPosY), "iPosY must be a number");

		var oRect = this.rect();

		if (oRect) {
			
			return iPosX >= oRect.left
				&& iPosX <= oRect.left + oRect.width
				&& iPosY >= oRect.top
				&& iPosY <= oRect.top + oRect.height;

		}
		return false;
	};


	/**
	 * Returns true if the first element has a set tabindex
	 *
	 * @return {boolean} If the first element has a set tabindex
	 * @public
	 * @methodOf jQuery.prototype
	 * @name hasTabIndex
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.hasTabIndex = function hasTabIndex() {
		var oDomRef = this.get(0);
		var iTabIndex = jQuery(oDomRef).attr("tabIndex");
		return !isNaN(iTabIndex) && iTabIndex >= 0;
	};


	/**
	 * Returns the first focusable domRef in a given container (the first element of the collection)
	 *
	 * @return {DOMNode} The domRef
	 * @public
	 * @methodOf jQuery.prototype
	 * @name firstFocusableDomRef
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.firstFocusableDomRef = function firstFocusableDomRef() {
		var oContainerDomRef = this.get(0);
		var visibilityHiddenFilter = function (idx){return jQuery(this).css("visibility") == "hidden";};
		if (!oContainerDomRef || jQuery(oContainerDomRef).is(':hidden') ||
				jQuery(oContainerDomRef).filter(visibilityHiddenFilter).length == 1) {
			return null;
		}

		var oCurrDomRef = oContainerDomRef.firstChild,
			oDomRefFound = null;

		while (oCurrDomRef) {
			if(oCurrDomRef.nodeType == 1 && jQuery(oCurrDomRef).is(':visible')) {
				if (jQuery(oCurrDomRef).hasTabIndex()) {
					return oCurrDomRef;
				}

				if(oCurrDomRef.childNodes) {
					oDomRefFound = jQuery(oCurrDomRef).firstFocusableDomRef();
					if(oDomRefFound) {
						return oDomRefFound;
					}
				}
			}
			oCurrDomRef = oCurrDomRef.nextSibling;
		}

		return null;
	};


	/**
	 * Returns the last focusable domRef in a given container
	 *
	 * @return {DOMNode} The last domRef
	 * @public
	 * @methodOf jQuery.prototype
	 * @name lastFocusableDomRef
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.lastFocusableDomRef = function lastFocusableDomRef() {
		var oContainerDomRef = this.get(0);
		var visibilityHiddenFilter = function (idx){return jQuery(this).css("visibility") == "hidden";};
		if (!oContainerDomRef || jQuery(oContainerDomRef).is(':hidden') ||
				jQuery(oContainerDomRef).filter(visibilityHiddenFilter).length == 1) {
			return null;
		}

		var oCurrDomRef = oContainerDomRef.lastChild,
			oDomRefFound = null;

		while (oCurrDomRef) {
			if(oCurrDomRef.nodeType == 1 && jQuery(oCurrDomRef).is(':visible')) {
				if(oCurrDomRef.childNodes) {
					oDomRefFound = jQuery(oCurrDomRef).lastFocusableDomRef();
					if(oDomRefFound) {
						return oDomRefFound;
					}
				}

				if (jQuery(oCurrDomRef).hasTabIndex()) {
					return oCurrDomRef;
				}
			}
			oCurrDomRef = oCurrDomRef.previousSibling;
		}

		return null;
	};
	
	
	/**
	 * Sets or returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
	 * Precondition: The element is rendered in RTL mode.
	 * 
	 * Reason for this method is that the major browsers use three different values for the same scroll position when in RTL mode.
	 * This method hides those differences and returns/applies the same value that would be returned in LTR mode: The distance in px 
	 * how far the given container is scrolled away from the leftmost scroll position.
	 * 
	 * Returns "undefined" if no element and no iPos is given.
	 * 
	 * @return {jQuery | int} The jQuery collection if iPos is given, otherwise the scroll position, counted from the leftmost position
	 * @public
	 * @methodOf jQuery.prototype
	 * @name scrollLeftRTL
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.fn.scrollLeftRTL = function scrollLeftRTL(iPos) {
		var oDomRef = this.get(0);
		if (oDomRef) {
			
			if (iPos === undefined) { // GETTER code
				if (jQuery.browser.msie) {
					return oDomRef.scrollWidth - oDomRef.scrollLeft - oDomRef.clientWidth;
					
				} else if (jQuery.browser.webkit) {
					return oDomRef.scrollLeft;
	
				} else if (jQuery.browser.mozilla) {
					return oDomRef.scrollWidth + oDomRef.scrollLeft - oDomRef.clientWidth;
	
				} else {
					// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
					return oDomRef.scrollLeft;
				}
			
			} else { // SETTER code
				oDomRef.scrollLeft = jQuery.sap.denormalizeScrollLeftRTL(iPos);
				return this;
			}
		}
	};
	
	/**
	 * Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
	 * Precondition: The element is rendered in RTL mode.
	 * 
	 * Reason for this method is that the major browsers return three different values for the same scroll position when in RTL mode.
	 * This method hides those differences and returns the value that would be returned in LTR mode if the UI would be mirrored horizontally:
	 * The distance in px how far the given container is scrolled away from the rightmost scroll position.
	 * 
	 * Returns "undefined" if no element is given.
	 * 
	 * @return {int} The scroll position, counted from the rightmost position
	 * @public
	 * @methodOf jQuery.prototype
	 * @name scrollRightRTL
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.fn.scrollRightRTL = function scrollRightRTL() {
		var oDomRef = this.get(0);
		if (oDomRef) {
			
			if (jQuery.browser.msie) {
				return oDomRef.scrollLeft;
				
			} else if (jQuery.browser.webkit) {
				return oDomRef.scrollWidth - oDomRef.scrollLeft - oDomRef.clientWidth;

			} else if (jQuery.browser.mozilla) {
				return (-oDomRef.scrollLeft);

			} else {
				// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
				return oDomRef.scrollLeft;
			}
		}
	};
	
	
	/**
	 * For the given scrollLeft value this method returns the scrollLeft value as understood by the current browser in RTL mode.
	 * This value is specific to the given DOM element, as the computation may involve its dimensions.
	 * 
	 * So when oDomRef should be scrolled 2px from the leftmost position, the number "2" must be given as iNormalizedScrollLeft
	 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
	 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
	 * 
	 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
	 * 
	 * @param {int} iNormalizedScrollLeft The distance from the leftmost position to which the element should be scrolled
	 * @param {DOMNode} oDomRef The DOM element to which scrollLeft will be applied
	 * @return {int} The scroll position that must be set for the DOM element
	 * @public
	 * @name denormalizeScrollLeftRTL
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.sap.denormalizeScrollLeftRTL = function byId(iNormalizedScrollLeft, oDomRef) {

		if (oDomRef) {
			if (jQuery.browser.msie) {
				return oDomRef.scrollWidth - oDomRef.clientWidth - iNormalizedScrollLeft;

			} else if (jQuery.browser.webkit) {
				return iNormalizedScrollLeft;

			} else if (jQuery.browser.mozilla) {
				return oDomRef.clientWidth + iNormalizedScrollLeft - oDomRef.scrollWidth;

			} else {
				// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
				return iNormalizedScrollLeft;
			}
		}
	};




	/*!
	 * The following function is taken from jQuery UI 1.8.5
	 *
	 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 *
	 * http://docs.jquery.com/UI
	 */
	function visible( element ) {
		return !jQuery( element ).parents().andSelf().filter(function() {
			return jQuery.curCSS( this, "visibility" ) === "hidden" ||
			jQuery.expr.filters.hidden( this );
		}).length;
	}


	if (!jQuery.expr[":"].focusable) {
		/*!
		 * The following function is taken from jQuery UI 1.8.5
		 *
		 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
		 * Dual licensed under the MIT or GPL Version 2 licenses.
		 * http://jquery.org/license
		 *
		 * http://docs.jquery.com/UI
		 */
		jQuery.extend( jQuery.expr[ ":" ], {
			/**
			 * This defines the jQuery ":focusable" selector; it is also defined in jQuery UI. If already present, nothing is
			 * done here, so we will not overwrite any previous implementation.
			 * If jQuery UI is loaded later on, this implementation here will be overwritten by that one, which is fine,
			 * as it is semantically the same thing and intended to do exactly the same.
			 */
			focusable: function( element ) {
				var nodeName = element.nodeName.toLowerCase(),
					tabIndex = jQuery.attr( element, "tabindex" );
				if ( "area" === nodeName ) {
					var map = element.parentNode,
						mapName = map.name,
						img;
					if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
						return false;
					}
					img = jQuery( "img[usemap=#" + mapName + "]" )[0];
					return !!img && visible( img );
				}
				return ( /input|select|textarea|button|object/.test( nodeName )
					? !element.disabled
					: "a" == nodeName
						? element.href || !isNaN( tabIndex )
						: !isNaN( tabIndex ))
					// the element and all of its ancestors must be visible
					&& visible( element );
			}
		});
	}

	/**
	 * Gets the next parent DOM element with a given attribute and attribute value starting above the first given element
	 *
	 * @param {String} sAttibute Name of the attribute
	 * @param {String} sValue Value of the attribute (optional)
	 * @return {DOMNode} null or the DOM reference
	 * @public
	 * @methodOf jQuery.prototype
	 * @name parentByAttribute
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.parentByAttribute = function parentByAttribute(sAttribute, sValue) {
		if (this.length>0) {
			if (sValue) {
				return this.first().parents("["+sAttribute+"='"+sValue+"']").get(0);
			} else {
				return this.first().parents("["+sAttribute+"]").get(0);
			}
		}
	};


	/**
	 * Returns the window reference for a DomRef
	 *
	 * @param {DOMNode} oDomRef The DOM reference
	 * @return {window} Window reference
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.ownerWindow = function ownerWindow(oDomRef){
		if (oDomRef.ownerDocument.parentWindow) {
			return oDomRef.ownerDocument.parentWindow;
		}
		return oDomRef.ownerDocument.defaultView;
	};

}());

}; // end of jquery.sap.dom


/**
 * Root namespace for JavaScript functionality provided by SAP AG.
 *
 * The <code>sap</code> namespace is automatically registered with the
 * OpenAjax hub if it exists.
 *
 * @version 1.2.0
 * @namespace
 * @public
 * @name sap
 */
if ( typeof window.sap !== "object" && typeof window.sap !== "function"  ) {
  window.sap = {};
}

/**
 * The <code>sap.ui</code> namespace is the central OpenAjax compliant entry
 * point for UI related JavaScript functionality provided by SAP.
 *
 * @version 1.2.0
 * @namespace
 * @name sap.ui
 * @public
 */
if ( typeof window.sap.ui !== "object") {
	window.sap.ui = {};
}
sap.ui = jQuery.extend(sap.ui, {
		/**
		 * @deprecated contained information was never used
		 */
		global: {
				resourceFolder: "js",
				debugMode: true,
				debugFolder: "dbg"
			},
		/**
		 * The version of the SAP UI Library
		 * @type string
		 */
		version: "1.2.0",
		buildinfo : { lastchange : "ac0573cb31439a02fc5c6a2a1c51f892b2664067 ", buildtime : "201201151748" }
	});

/**
 * Ensures that a given a namespace or hierarchy of nested namespaces exists in the
 * current <code>window</code>.
 *
 * @return {object} the innermost namespace of the hierarchy
 * @public
 * @static
 * @deprecated Use jQuery.sap.declare or jQuery.sap.getObject(...,0) instead
 */
sap.ui.namespace = function(sNamespace){

	jQuery.sap.assert(false, "sap.ui.namespace is long time deprecated and shouldn't be used");
	
	if (sNamespace === "sap.ui.global" || sNamespace.indexOf("sap.ui.global.") === 0) {
		jQuery.sap.log.fatal("Namespace 'sap.ui.global' is reserved and must not be used.");
	}

	return jQuery.sap.getObject(sNamespace, 0);
};

/**
 * Creates a lazy loading stub for a given class <code>sClassName</code>.
 *
 * If the class has been loaded already, nothing is done. Otherwise a stub object 
 * or constructor and - optionally - a set of stub methods are created.
 * All created stubs will load the corresponding module on execution 
 * and then delegate to their counterpart in the loaded module.   
 * 
 * When no methods are given or when the list of methods contains the special name
 * "new" (which is an operator can't be used as method name in JavaScript), then a 
 * stub <b>constructor</b> for class <code>sClassName</code> is created. 
 * Otherwise,  a plain object is created.
 * 
 * <b>Note</b>: Accessing any stub as a plain object without executing it (no matter 
 * whether it is a function or an object) won't load the module and therefore most like 
 * won't work as expected. This is a fundamental restriction of the lazy loader approach. 
 * It could only be fixed with JavaScript 1.5 features that are not available in all 
 * UI5 target browsers (e.g. not in IE8).
 *  
 * <b>Note</b>: As a side effect of this method, the namespace containing the given
 * class is created <b>immediately</b>.
 *
 * @param {string} sClassName Fully qualified name (dot notation) of the class that should be prepared
 * @param {string} [sMethods='new'] space separated list of additional (static) methods that should be created as stubs
 * @param {string} [sModuleName] name of the module to load, defaults to the class name
 * @public
 * @static
 */
sap.ui.lazyRequire = function(sClassName, sMethods, sModuleName) {

	jQuery.sap.assert(typeof sClassName === "string" && sClassName, "lazyRequire: sClassName must be a non-empty string");
	jQuery.sap.assert(!sMethods || typeof sMethods === "string", "lazyRequire: sMethods must be empty or a string");

	var sFullClass = sClassName.replace(/\//gi,"\."),
		iLastDotPos = sFullClass.lastIndexOf("."),
		sPackage = sFullClass.substr(0, iLastDotPos),
		sClass = sFullClass.substr(iLastDotPos + 1),
		oPackage = jQuery.sap.getObject(sPackage, 0),
		oClass = oPackage[sClass],
		aMethods = (sMethods || "new").split(" "),
		iConstructor = jQuery.inArray("new", aMethods);

	sModuleName = sModuleName || sFullClass;
	
	if (!oClass) {

		if ( iConstructor >= 0 ) {
	
			// Create dummy constructor which loads the class on demand
			oClass = function() {
				jQuery.sap.log.debug("lazy stub for '" + sFullClass + "' (constructor) called.");
				jQuery.sap.require(sModuleName);
				var oRealClass = oPackage[sClass];
				jQuery.sap.assert(typeof oRealClass === "function", "lazyRequire: oRealClass must be a function after loading");
				if ( oRealClass._sapUiLazyLoader ) {
					throw new Error("lazyRequire: stub '" + sFullClass + "'has not been replaced by module '" + sModuleName + "'");
				}

				// create a new instance and invoke the constructor
				var oInstance = jQuery.sap.newObject(oRealClass.prototype);
				var oResult = oRealClass.apply(oInstance, arguments);
				if (oResult && (typeof oResult === "function" || typeof oResult === "object")) {
					oInstance = oResult;
				}
				return oInstance;
			};
			// mark the stub as lazy loader 
			oClass._sapUiLazyLoader = true;
	
			aMethods.splice(iConstructor,1);
			
		} else {
	
			// Create dummy object
			oClass = {};
			
		}

		// remember the stub
		oPackage[sClass] = oClass;
		
	}
	

	// add stub methods to it
	jQuery.each(aMethods, function (i,sMethod) {
		// check whether method is already available
		if (!oClass[sMethod]) {
			oClass[sMethod] = function() {
				jQuery.sap.log.debug("lazy stub for '" + sFullClass + "." + sMethod + "' called.");
				jQuery.sap.require(sModuleName);
				var oRealClass = oPackage[sClass];
				jQuery.sap.assert(typeof oRealClass === "function" || typeof oRealClass === "object", "lazyRequire: oRealClass must be a function or object after loading");
				jQuery.sap.assert(typeof oRealClass[sMethod] === "function", "lazyRequire: method must be a function");
				if (oRealClass[sMethod]._sapUiLazyLoader ) {
					throw new Error("lazyRequire: stub '" + sFullClass + "." + sMethod + "' has not been replaced by loaded module '" + sModuleName + "'");
				}
				return oRealClass[sMethod].apply(oRealClass, arguments);
			};
			oClass[sMethod]._sapUiLazyLoader = true;
		}
	});
	
};

/**
 * @static
 * @public
 */
sap.ui.resource = function(sLibraryName, sResourcePath) {
	return jQuery.sap.getModulePath(sLibraryName, '/') + sResourcePath;
};

/**
 * Redirects access to resources that are part of the given namespace to a location
 * relative to the assumed <b>application root folder</b>.
 * 
 * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.)
 * whose resource name starts with <code>sNamespace</code>, will be loaded from an
 * equally named subfolder of the <b>application root folder</b>.
 * If the resource name consists of multiple segments (separated by a dot), each segment
 * is assumed to represent an individual folder. In other words: when a resource name is
 * converted to an URL, any dots ('.') are converted to slashes ('/').
 *
 * <b>Limitation:</b> For the time being, the <b>application root folder</b> is assumed to be
 * the same as the folder where the current page resides in.
 * 
 * Usage sample:
 * <pre>
 *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
 *   // should be loaded from the URL location "./com/mycompany/myapp"
 *   sap.ui.localResources("com.mycompany.myapp");
 *
 *   // The following call implicitly will use the mapping done by the previous line
 *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
 *   sap.ui.view({ view : "com.mycompany.myapp.views.Main", type : sap.ui.core.mvc.ViewType.XML});
 * </pre>
 *
 * When applications need a more flexible mapping between resource names and their location,
 * they can use {@link jQuery.sap.registerModulePath}.
 * 
 * It is intended to make this configuration obsolete in future releases, but for the time
 * being, applications must call this method when they want to store resources relative to
 * the assumed application root folder.
 * 
 * @param {String} sNamespace Namespace prefix for which to load resources relative to the application root folder
 * @public
 * @static
 * @see jQuery.sap.registerModulePath
 */
sap.ui.localResources = function(sNamespace) {
	jQuery.sap.assert(sNamespace, "sNamespace must not be empty");
	jQuery.sap.registerModulePath(sNamespace, "./" + sNamespace.replace(/\./g, "/"));
};

}; // end of sap.ui.Global
if ( !jQuery.sap.isDeclared('sap.ui.core.ResizeHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.ResizeHandler
jQuery.sap.declare("sap.ui.core.ResizeHandler");




(function(){

	var oCoreRef = null;

	/**
	 * Constructs an instance of a sap.ui.core.ResizeHandler.
	 * Handles the resize event on registered DOM elements.
	 *
	 * Resize events on arbitrary DOM elements are not supported on Firefox and Safari.
	 * This class provides firing of resize events on Firefox by checking width
	 * and height of registered DOM elements and firing events accordingly.
	 *
	 * @class sap.ui.core.ResizeHandler
	 * @param oCore the core
	 */
	sap.ui.core.ResizeHandler = function(oCore) {
		sap.ui.base.Object.apply(this);

		oCoreRef = oCore;

		this.aResizeListeners = [];
		this.sInterval = null;

		this.iIdCounter = 0;

		this.fDestroyHandler = jQuery.proxy(this.destroy, this);

		jQuery(window).bind("unload", this.fDestroyHandler);
	};

	sap.ui.core.ResizeHandler.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
	sap.ui.base.Object.defineClass("sap.ui.core.ResizeHandler", {
		baseType : "sap.ui.base.Object"
	});

	/**
	 * The interval which is used for checking the width/height of all attached elements.
	 * One check takes less than 1 MICROsecond (maybe even *much* less - the only confirmed fact is that 20000 checks
	 * summed up are still not measurable), so a 200 ms interval is perfectly fine.
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.I_INTERVAL = 200;

	/**
	 * Destroy method of the Resize Handler.
	 * It unregisters the event handlers.
	 *
	 * @param {jQuery.Event} oEvent the event that initiated the destruction of the ResizeHandler
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.destroy = function(oEvent) {
		jQuery(window).unbind("unload", this.fDestroyHandler);
		if(jQuery.browser.msie && (jQuery.browser.version == "7.0" || jQuery.browser.version == "8.0")){
			jQuery.each(this.aResizeListeners, function(index, oResizeListener){
				jQuery(oResizeListener.oDomRef).unbind("resize", oResizeListener.fHandler);
			});
		}
		oCoreRef = null;
		this.aResizeListeners = [];
		this.sInterval = null;
	};

	/**
	 * Attaches listener to resize event.
	 *
	 * @param {element} oDomRef the DOM reference
	 * @param {function} fHandler the event handler function
	 * @return {string} Registration-ID for later detaching.
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.attachListener = function(oDomRef, fHandler){
		var iWidth = oDomRef.offsetWidth,
		iHeight = oDomRef.offsetHeight,
		sId = "rs-" + new Date().valueOf() + "-" + this.iIdCounter++;

		this.aResizeListeners.push({sId: sId, oDomRef: oDomRef, fHandler: fHandler, iWidth: iWidth, iHeight: iHeight});

		if(jQuery.browser.msie && (jQuery.browser.version == "7.0" || jQuery.browser.version == "8.0")){
			jQuery(oDomRef).bind("resize", fHandler);
		}else{
			if(!this.sInterval){
				this.sInterval = jQuery.sap.delayedCall(this.I_INTERVAL, this, "checkSizes");
			}
		}
		return sId;
	};

	/**
	 * Detaches listener from resize event.
	 *
	 * @param {string} Registration-ID returned from attachListener
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.detachListener = function(sId){
		var that = this;
		jQuery.each(this.aResizeListeners, function(index, oResizeListener){
			if(oResizeListener.sId == sId){
				that.aResizeListeners.splice(index,1);
				if(jQuery.browser.msie && (jQuery.browser.version == "7.0" || jQuery.browser.version == "8.0")){
					jQuery(oResizeListener.oDomRef).unbind("resize", oResizeListener.fHandler);
				}
				return false; //break the loop
			};
		});

		// if list is empty now, stop interval
		if(this.aResizeListeners.length == 0){
			jQuery.sap.clearDelayedCall(this.sInterval);
			this.sInterval = null;
		}
	};

	/**
	 * Check sizes of resize elements
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.checkSizes = function() {
		jQuery.each(this.aResizeListeners, function(index, oResizeListener){
			if(oResizeListener){
				var oDomRef = oResizeListener.oDomRef;
				if (oDomRef.offsetWidth != oResizeListener.iWidth ||
						oDomRef.offsetHeight != oResizeListener.iHeight) {
					oResizeListener.iWidth = oDomRef.offsetWidth;
					oResizeListener.iHeight = oDomRef.offsetHeight;
					var oEvent = jQuery.Event("resize");
					oEvent.target = oResizeListener.oDomRef;
					oEvent.currentTarget = oResizeListener.oDomRef;
					oResizeListener.fHandler(oEvent);
				}
			}
		});
		this.sInterval = jQuery.sap.delayedCall(this.I_INTERVAL, this, "checkSizes");
	};

	/**
	 * Registers the given handler for resize events on the given
	 * DOM reference.
	 *
	 * @param {element} oDomRef the DOM reference for which the given handler should be registered (beside the window)
	 * @param {function} fHandler the handler which should be called on a resize event
	 * @return {string} Registration ID which can be used for deregistering
	 * @public
	 */
	sap.ui.core.ResizeHandler.register = function(oDomRef, fHandler) {
		if(!oCoreRef || !oCoreRef.oResizeHandler) {
			return null;
		}
		return oCoreRef.oResizeHandler.attachListener(oDomRef, fHandler);
	};

	/**
	 * Deregisters the registered handler for resize events with the given ID.
	 *
	 * @param {string} Registration ID
	 * @public
	 */
	sap.ui.core.ResizeHandler.deregister = function(sId) {
		if(!oCoreRef || !oCoreRef.oResizeHandler) {
			return;
		}
		oCoreRef.oResizeHandler.detachListener(sId);
	};

}());
}; // end of sap.ui.core.ResizeHandler
if ( !jQuery.sap.isDeclared('sap.ui.core.ElementMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.ElementMetadata
jQuery.sap.declare("sap.ui.core.ElementMetadata");



/**
 * Creates a new metadata object for a UIElement subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @class
 * @author Frank Weigel
 * @version 1.2.0
 * @since 0.8.6
 */
sap.ui.core.ElementMetadata = function(sClassName, oStaticInfo) {

	// call super constructor
	sap.ui.base.Metadata.apply(this, arguments);

	// init basic metadata from static infos and fallback to defaults
	this._mEvents = oStaticInfo.events || {};
	this._mProperties = oStaticInfo.properties || {};
	this._sDefaultAggregation = oStaticInfo.defaultAggregation || null;
	this._mAggregations = oStaticInfo.aggregations || {};
	this._mAssociations = oStaticInfo.associations || {};
	this._sLibraryName = oStaticInfo.library;
	this._bAbstract = oStaticInfo["abstract"];

	// convert events to info objects
	for(var s in this._mEvents) {
		if ( typeof this._mEvents[s] == "string" ) {
			this._mEvents[s] = { name : this._mEvents[s] };
		}
	}
	this._bEnriched = false;

	// if there is a parent class, produce the flattened "all" views for the element specific metadata
	// PERFOPT: this could be done lazily
	var oParent = this.getParent();
	if ( oParent && oParent instanceof sap.ui.core.ElementMetadata ) {
		this._mAllEvents = jQuery.extend({},oParent._mAllEvents, this._mEvents);
		this._mAllProperties = jQuery.extend({},oParent._mAllProperties, this._mProperties);
		this._mAllAggregations = jQuery.extend({},oParent._mAllAggregations, this._mAggregations);
		this._mAllAssociations = jQuery.extend({},oParent._mAllAssociations, this._mAssociations);
		this._sDefaultAggregation = this._sDefaultAggregation || oParent._sDefaultAggregation;
	} else {
		this._mAllEvents = this._mEvents;
		this._mAllProperties = this._mProperties;
		this._mAllAggregations = this._mAggregations;
		this._mAllAssociations = this._mAssociations;
	}

};

sap.ui.core.ElementMetadata.Kind = {
  PROPERTY :0, SINGLE_AGGREGATION : 1, MULTIPLE_AGGREGATION : 2, SINGLE_ASSOCIATION : 3, MULTIPLE_ASSOCIATION : 4, EVENT : 5
};

// chain the prototypes
sap.ui.core.ElementMetadata.prototype = jQuery.sap.newObject(sap.ui.base.Metadata.prototype);

/**
 * By default, the element name is equal to the class name
 * @return {string} the qualified name of the UIElement class
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getElementName = function() {
	return this._sClassName;
};

/**
 * Returns the name of the library that contains the described UIElement.
 * @return {string} the name of the library
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getLibraryName = function() {
	return this._sLibraryName;
};

/**
 * Returns whether the class/control is abstract
 * @return {boolean} whether the class/control is abstract
 * @public
 */
sap.ui.core.ElementMetadata.prototype.isAbstract = function() {
	return this._bAbstract;
};

/**
 * Declares an additional property for the UIElement class described by this metadata.
 *
 * Any property declaration via this method must happen before the described class
 * is subclassed, or the added property will not be visible in the subclass.
 *
 * Typically used to enrich UIElement classes in an aspect oriented manner.
 * @public
 * @see sap.ui.core.EnabledPropagator
 */
sap.ui.core.ElementMetadata.prototype.addProperty = function(sName, oInfo) {
	oInfo.name = sName;
	this._mProperties[sName] = oInfo;
	if(!this._mAllProperties[sName]) {// ensure extended AllProperties meta-data is also enriched
		this._mAllProperties[sName] = oInfo;
	}

	if ( this._bEnriched ) { // does not seem right! this is the 'drop out' condition for _enrichChildInfos() -> senseless
		this._enrichChildInfos();
	}
	// TODO notify listeners (subclasses) about change
};

/**
 * Returns infos about the properties declared by the UIElement class
 * described by this metadata object. Properties from ancestor classes
 * are not returned.
 *
 * The returned map contains property info objects keyed by the property name.
 *
 * @return {map} Map of property infos keyed by property names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getProperties = function() {
	return this._mProperties;
};

/**
 * Returns infos about all properties declared by the UIElement class
 * described by this metadata object as well as properties from base classes.
 *
 * The returned map contains property info objects keyed by the property name.
 *
 * @return {map} Map of property infos keyed by property names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAllProperties = function() {
	return this._mAllProperties;
};

/**
 * Returns infos about the aggregations declared by the UIElement class
 * described by this metadata object. Aggregations from ancestor classes
 * are not returned.
 *
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAggregations = function() {
	return this._mAggregations;
};

/**
 * Returns infos about all aggregations declared by the UIElement class
 * described by this metadata object as well as aggregations from base classes.
 *
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAllAggregations = function() {
	return this._mAllAggregations;
};

/**
 * Returns the name of the default aggregation of this control.
 * If the control itself does not define a default aggregation, then the
 * default aggregation of the parent is returned. If no control in the
 * hierarchy defines a default aggregation, null is returned.
 *
 * @return {string} Name of the default aggregation for this class
 */
sap.ui.core.ElementMetadata.prototype.getDefaultAggregationName = function() {
	return this._sDefaultAggregation;
};

/**
 * Returns the name of the default aggregation of this control.
 * If the control itself does not define a default aggregation, then the
 * default aggregation of the parent is returned.
 *
 * @return {string} Name of the default aggregation for this class
 */
sap.ui.core.ElementMetadata.prototype.getDefaultAggregation = function() {
	return this._sDefaultAggregation && this.getAllAggregations()[this._sDefaultAggregation];
};

/**
 * Returns infos about the associations declared by the UIElement class
 * described by this metadata object. Associations from ancestor classes
 * are not returned.
 *
 * The returned map contains association info objects keyed by the association name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of association infos keyed by association names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAssociations = function() {
	return this._mAssociations;
};

/**
 * Returns infos about all associations declared by the UIElement class
 * described by this metadata object as well as associations from base classes.
 *
 * The returned map contains association info objects keyed by the association name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of association infos keyed by association names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAllAssociations = function() {
	return this._mAllAssociations;
};

/**
 * Returns infos about the events declared by the UIElement class
 * described by this metadata object. Events from ancestor classes
 * are not returned.
 *
 * The returned map contains events info objects keyed by the events name.
 *
 * @return {map} Map of event infos keyed by event names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getEvents = function() {
	return this._mEvents;
};

/**
 * Returns infos about all events declared by the UIElement class
 * described by this metadata object as well as events from base classes.
 *
 * The returned map contains event info objects keyed by the event name.
 *
 * @return {map} Map of event infos keyed by event names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getAllEvents = function() {
	return this._mAllEvents;
};

/**
 * Returns a map of default values for all properties declared by the
 * described class and its ancestors, keyed by the property name.
 *
 * @return {map} Map of default values keyed by property names
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getPropertyDefaults = function() {

	var mDefaults = this._mDefaults,
		oType;
	if ( mDefaults ) {
		return mDefaults;
	}

	if ( this.getParent() instanceof sap.ui.core.ElementMetadata ) {
		mDefaults = jQuery.sap.newObject(this.getParent().getPropertyDefaults());
	} else {
		mDefaults = {};
	}

	for(var s in this._mProperties) {
		if ( this._mProperties[s].defaultValue !== null ) {
			mDefaults[s] = this._mProperties[s].defaultValue;
		} else {
			oType = sap.ui.base.DataType.getType(this._mProperties[s].type);
			if (oType instanceof sap.ui.base.DataType) {
				mDefaults[s] = oType.getDefaultValue();
			} else { // Enumeration
				for (var i in oType) {
					mDefaults[s] = oType[i];
					break;
				}
			}
		}
	}
	return (this._mDefaults = mDefaults);
};

sap.ui.core.ElementMetadata.prototype.createPropertyBag = function() {
	if ( !this._fnPropertyBagFactory ) {
		this._fnPropertyBagFactory = jQuery.sap.factory(this.getPropertyDefaults());
	}
	return new (this._fnPropertyBagFactory)();
};

/**
 * Helper method that enriches the (generated) information objects for children
 * (e.g. properties, aggregations, ...) of this Element.
 *
 * Also ensures that the parent metadata is enriched.
 *
 * @private
 */
sap.ui.core.ElementMetadata.prototype._enrichChildInfos = function() {

	if ( this._bEnriched ) {
		return;
	}

	if ( this.getParent() instanceof sap.ui.core.ElementMetadata ) {
		this.getParent()._enrichChildInfos();
	}

	var m,sName,oInfo;
	function method(sPrefix, sName) {
		return sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
	}

	// adapt properties
	m=this._mProperties;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = sName;
		oInfo._oParent = this;
		oInfo._iKind = sap.ui.core.ElementMetadata.Kind.PROPERTY;
		oInfo._sMutator = method("set", sName);
		oInfo._sGetter = method("get", sName);
	}

	// adapt aggregations
	m=this._mAggregations;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "aggregation:" + sName;
		oInfo._oParent = this;
		oInfo._sDestructor = method("destroy", sName);
		if ( oInfo.multiple ) {
			oInfo._iKind = sap.ui.core.ElementMetadata.Kind.MULTIPLE_AGGREGATION;
			oInfo._sMutator = method("add", oInfo.singularName);
			oInfo._sRemoveMutator = method("remove", oInfo.singularName);
		} else {
			oInfo._iKind = sap.ui.core.ElementMetadata.Kind.SINGLE_AGGREGATION;
			oInfo._sMutator = method("set", sName);
			oInfo._sGetter = method("get", sName);
		}
	}

	// adapt associations
	m=this._mAssociations;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "association:" + sName;
		oInfo._oParent = this;
		if ( oInfo.multiple ) {
			oInfo._iKind = sap.ui.core.ElementMetadata.Kind.MULTIPLE_ASSOCIATION;
			oInfo._sMutator = method("add", oInfo.singularName);
		} else {
			oInfo._iKind = sap.ui.core.ElementMetadata.Kind.SINGLE_ASSOCIATION;
			oInfo._sMutator = method("set", sName);
			oInfo._sGetter = method("get", sName);
		}
	}

	// adapt events
	m=this._mEvents;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "event:" + sName;
		oInfo._oParent = this;
		oInfo._iKind = sap.ui.core.ElementMetadata.Kind.EVENT;
		oInfo._sMutator = method("attach", sName);
	}

	this._bEnriched = true;
};

/**
 * Builds a "reflection like" map of setters/type infos keyed by the possible JSON names.
 * Mainly used for the {@link sap.ui.core.Element.applySettings} method.
 *
 * @see sap.ui.core.Element.prototype.applySettings
 * @private
 */
sap.ui.core.ElementMetadata.prototype.getJSONKeys = function() {

	if ( this._mJSONKeys ) {
		return this._mJSONKeys;
	}

	this._enrichChildInfos();

	var mJSONKeys = {};
	function addKeys(m) {
		var sName, oInfo;
		for(sName in m) {
			oInfo = m[sName];
			if ( !mJSONKeys[sName] || oInfo._iKind < mJSONKeys[sName]._iKind ) {
				mJSONKeys[sName] = oInfo;
			};
			mJSONKeys[oInfo._sUID] = oInfo;
		};
	}

	addKeys(this.getAllProperties());
	addKeys(this.getAllAggregations());
	addKeys(this.getAllAssociations());
	addKeys(this.getAllEvents());

	return (this._mJSONKeys = mJSONKeys);
};

(function() {

	/**
	 * Usage counters for the different UID tokens
	 */
	var mUIDCounts = {};

	function uid(sId) {
		jQuery.sap.assert(!/[0-9]+$/.exec(sId), "AutoId Prefixes must not end with numbers");
		
		sId = sap.ui.getCore().getConfiguration().getUIDPrefix() + sId;
		
		// initialize counter
		mUIDCounts[sId] = mUIDCounts[sId] || 0;
		
		// combine prefix + counter
		// concatenating sId and a counter is only safe because we don't allow trailing numbers in sId!
		return (sId + mUIDCounts[sId]++);
	}

	/**
	 * Calculates a new id based on a prefix.
	 *
	 * @return {string} A (hopefully unique) control id
	 * @public
	 * @function
	 */
	sap.ui.core.ElementMetadata.uid = uid;
	
	/**
	 * Calculates a new id for an instance of this class.
	 *
	 * Note that the calculated short name part is usually not unique across
	 * all classes, but doesn't have to be. It might even be empty when the
	 * class name consists of invalid characters only.
	 *
	 * @return {string} A (hopefully unique) control id
	 * @public
	 */
	sap.ui.core.ElementMetadata.prototype.uid = function() {
	
		var sId = this._sUIDToken;
		if ( typeof sId !== "string" ) {
			// start with qualified class name
			sId  = this.getName();
			// reduce to unqualified name
			sId = sId.slice(sId.lastIndexOf('.')+1);
			// reduce a camel case, multi word name to the last word
			sId = sId.replace(/([a-z])([A-Z])/g, "$1 $2").split(" ").slice(-1)[0];
			// remove unwanted chars (and no trailing digits!) and convert to lower case
			sId = this._sUIDToken = sId.replace(/([^A-Za-z0-9-_.:])|([0-9]$)/g,"").toLowerCase();
		}
	
		return uid(sId);
	};

}());

}; // end of sap.ui.core.ElementMetadata
if ( !jQuery.sap.isDeclared('sap.ui.core.CustomStyleClassSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.core.CustomStyleClassSupport");
if ( !jQuery.sap.isDeclared('sap.ui.core.Element') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base class for all controls and UI elements.
jQuery.sap.declare("sap.ui.core.Element");


if ( !jQuery.sap.isDeclared('jquery.sap.strings') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides useful string operations not available in pure JavaScript.
jQuery.sap.declare("jquery.sap.strings", false);

(function(){


	/**
	 * Checks whether a given sString ends with sEndString
	 * respecting the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sEndString The end string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.endsWithIgnoreCase
	 * @public
	 */
	jQuery.sap.endsWith = function endsWith(sString, sEndString) {
		if (typeof(sEndString)!="string" || sEndString=="") {
			return false;
		}
		var iPos = sString.lastIndexOf(sEndString);
		return iPos >= 0 && iPos == sString.length - sEndString.length;
	};

	/**
	 * Checks whether a given sString ends with sEndString
	 * ignoring the case of the strings.
	 *
	 * @param {string} sString the string to be checked
	 * @param {string} sEndString the end string to be searched
	 * @return true if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.endsWith
	 * @public
	 */
	jQuery.sap.endsWithIgnoreCase = function endsWithIgnoreCase(sString, sEndString) {
		if (typeof(sEndString)!="string" || sEndString=="") {
			return false;
		}
		sString = sString.toUpperCase();
		sEndString = sEndString.toUpperCase();
		return jQuery.sap.endsWith(sString,sEndString);
	};

	/**
	 * Checks whether a given sString starts with sStartString
	 * respecting the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sStartString The start string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.startsWithIgnoreCase
	 * @public
	 */
	jQuery.sap.startsWith = function startsWith(sString, sStartString) {
		if (typeof(sStartString)!="string" || sStartString=="") {
			return false;
		}
		if (sString == sStartString) {
			return true;
		}
		return sString.indexOf(sStartString) == 0;
	};

	/**
	 * Checks whether a given sString starts with sStartString
	 * ignoring the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sStartString The start string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.startsWith
	 * @public
	 */
	jQuery.sap.startsWithIgnoreCase = function startsWithIgnoreCase(sString, sStartString) {
		if (typeof(sStartString)!="string" || sStartString=="") {
			return false;
		}
		sString = sString.toUpperCase();
		sStartString = sStartString.toUpperCase();
		return jQuery.sap.startsWith(sString,sStartString);
	};

	/**
	 * Converts a character of the string to upper case.<br/>
	 * If no pos is defined as second parameter or pos is negative or greater than sString the first character will be
	 * converted into upper case. the first char position is 0.
	 *
	 * @param {string} sString The string to be checked
	 * @param {integer} iPos the position of the character that will be uppercase
	 * @return The string with the firstletter in upper case
	 * @type {string}
	 * @public
	 */
	jQuery.sap.charToUpperCase = function charToUpperCase(sString,iPos) {
		if (!sString) {
			return sString;
		}
		if (!iPos || isNaN(iPos) || iPos <= 0 || iPos >= sString.length) {
			iPos = 0;
		}
		var sChar = sString.charAt(iPos).toUpperCase();
		if (iPos>0) {
			return sString.substring(0,iPos) + sChar + sString.substring(iPos+1);
		}
		return sChar + sString.substring(iPos+1);
	};

	/**
	 * Pads a string on the left side until is has the given length.<br/>
	 *
	 * @param {string} sString The string to be padded
	 * @param {string} sPadChar The char to use for the padding
	 * @param {integer} iLength the target length of the string
	 * @return The padded string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.padLeft = function padLeft(sString, sPadChar, iLength) {
		if (!sString) {
			sString = "";
		}
		while (sString.length < iLength) {
			sString = sPadChar + sString;
		}
		return sString;
	};

	/**
	 * Pads a string on the right side until is has the given length.<br/>
	 *
	 * @param {string} sString The string to be padded
	 * @param {string} sPadChar The char to use for the padding
	 * @param {integer} iLength the target length of the string
	 * @return The padded string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.padRight = function padRight(sString, sPadChar, iLength) {
		if (!sString) {
			sString = "";
		}
		while (sString.length < iLength) {
			sString = sString + sPadChar;
		}
		return sString;
	};

	
	
}());
}; // end of jquery.sap.strings




if ( !jQuery.sap.isDeclared('sap.ui.model.Model') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.Model");

if ( !jQuery.sap.isDeclared('sap.ui.model.BindingMode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides enumeration sap.ui.model.FilterOperator
jQuery.sap.declare("sap.ui.model.BindingMode");

/**
* @class
* Binding type definitions.
*
* @static
* @public
*/
sap.ui.model.BindingMode = {
		
		/**
		 * BindingMode default means that the binding mode of the model is used
		 * @public
		 */
		Default: "Default",
		
		/**
		 * BindingMode one time means value is only read from the model once
		 * @public
		 */
		OneTime: "OneTime",

		/**
		 * BindingMode one way means from model to view
		 * @public
		 */
		OneWay: "OneWay",

		/**
		 * BindingMode two way means from model to view and vice versa
		 * @public
		 */
		TwoWay: "TwoWay"

};
}; // end of sap.ui.model.BindingMode


/**
 * The SAPUI5 Data Binding API
 * 
 * The default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model
 * are one way, two way and one time. The default binding mode can be changed by the application for each model instance.
 * A model implementation should specify its supported binding modes and set the default binding mode accordingly
 * (e.g. if the model supports only one way binding the default binding mode should also be set to one way).
 *
 * @namespace
 * @name sap.ui.model
 * @public
 */

/**
 * Constructor for a new Model. 
 *
 * @class
 * This is an abstract base class for model objects.
 * @abstract
 *
 * @extends sap.ui.base.Object
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @constructor
 * @public
 */
sap.ui.model.Model = function () {
	sap.ui.base.EventProvider.apply(this, arguments);

	this.oData = {};
	this.aBindings = [];
	this.sDefaultBindingMode = sap.ui.model.BindingMode.TwoWay;
	this.mSupportedBindingModes = {"OneWay": true, "TwoWay": true, "OneTime": true};
};

// chain the prototypes
sap.ui.model.Model.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

/*
 * Describe the sap.ui.model.Model.
 * Resulting metadata can be obtained via sap.ui.model.Model.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.Model", {

  // ---- object ----
  baseType : "sap.ui.base.Object",
  publicMethods : [
	// methods
	"bindProperty", "bindList", "bindTree", "createBindingContext", "destroyBindingContext", "getProperty",
	"getDefaultBindingMode", "setDefaultBindingMode", "isBindingModeSupported", "attachParseError", "detachParseError",
	"attachRequestCompleted", "detachRequestCompleted", "attachRequestFailed", "detachRequestFailed", "attachRequestSent",
	"detachRequestSent"
  ]

});

/**
 * Map of event names, that are provided by the model.
 */
sap.ui.model.Model.M_EVENTS = {
	/**
	 * Depending on the model implementation a ParseError should be fired if a parse error occurred.
	 * Contains the parameters:
	 * errorCode, url, reason, srcText, line, linepos, filepos
	 */
	ParseError : "parseError",

	/**
	 * Depending on the model implementation a RequestFailed should be fired if a request to a backend failed.
	 * Contains the parameters:
	 * message, statusCode, statusText and responseText
	 */
	RequestFailed : "requestFailed",
	
	/**
	 * Depending on the model implementation a RequestSent should be fired when a request to a backend is sent.
	 * Contains Parameters: url, type, async, info 
	 */
	RequestSent : "requestSent",
	
	/**
	 * Depending on the model implementation a RequestCompleted should be fired when a request to a backend is completed regardless if the request failed or succeeded.
	 * Contains Parameters: url, type, async, info
	 */
	RequestCompleted : "requestCompleted"
};

/**
 * The 'requestFailed' event is fired, when data retrieval from a backend failed.
 *
 * @name sap.ui.model.Model#requestFailed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.message A text that describes the failure.
 * @param {string} oControlEvent.getParameters.statusCode HTTP status code returned by the request (if available)
 * @param {string} oControlEvent.getParameters.statusText The status as a text, details not specified, intended only for diagnosis output
 * @param {string} oControlEvent.getParameters.responseText Response that has been received for the request ,as a text string
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestFailed = function(oData, fnFunction, oListener) {
	this.attachEvent("requestFailed", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestFailed = function(fnFunction, oListener) {
	this.detachEvent("requestFailed", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestFailed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'message' of type <code>string</code> A text that describes the failure.</li>
 * <li>'statusCode' of type <code>string</code> HTTP status code returned by the request (if available)</li>
 * <li>'statusText' of type <code>string</code> The status as a text, details not specified, intended only for diagnosis output</li>
 * <li>'responseText' of type <code>string</code> Response that has been received for the request ,as a text string</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestFailed = function(mArguments) {
	this.fireEvent("requestFailed", mArguments);
	return this;
};


/**
 * The 'parseError' event is fired when parsing of a model document (e.g. XML response) fails.
 *
 * @name sap.ui.model.Model#parseError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.errorCode
 * @param {string} oControlEvent.getParameters.url
 * @param {string} oControlEvent.getParameters.reason
 * @param {string} oControlEvent.getParameters.srcText
 * @param {int} oControlEvent.getParameters.line
 * @param {int} oControlEvent.getParameters.linepos
 * @param {int} oControlEvent.getParameters.filepos
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachParseError = function(oData, fnFunction, oListener) {
	this.attachEvent("parseError", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachParseError = function(fnFunction, oListener) {
	this.detachEvent("parseError", fnFunction, oListener);
	return this;
};

/**
 * Fire event parseError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'errorCode' of type <code>int</code> </li>
 * <li>'url' of type <code>string</code> </li>
 * <li>'reason' of type <code>string</code> </li>
 * <li>'srcText' of type <code>string</code> </li>
 * <li>'line' of type <code>int</code> </li>
 * <li>'linepos' of type <code>int</code> </li>
 * <li>'filepos' of type <code>int</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireParseError = function(mArguments) {
	this.fireEvent("parseError", mArguments);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestSent = function(oData, fnFunction, oListener) {
	this.attachEvent("requestSent", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestSent = function(fnFunction, oListener) {
	this.detachEvent("requestSent", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestSent to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'url' of type <code>string</code> The url which is sent to the backend.</li>
 * <li>'type' of type <code>string</code> The type of the request (if available)</li>
 * <li>'async' of type <code>boolean</code> If the request is synchronous or asynchronous (if available)</li>
 * <li>'info' of type <code>string</code> additional information for the request (if available)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestSent = function(mArguments) {
	this.fireEvent("requestSent", mArguments);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestCompleted = function(oData, fnFunction, oListener) {
	this.attachEvent("requestCompleted", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestCompleted = function(fnFunction, oListener) {
	this.detachEvent("requestCompleted", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestCompleted to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'url' of type <code>string</code> The url which was sent to the backend.</li>
 * <li>'type' of type <code>string</code> The type of the request (if available)</li>
 * <li>'async' of type <code>boolean</code> If the request was synchronous or asynchronous (if available)</li>
 * <li>'info' of type <code>string</code> additional information for the request (if available)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestCompleted = function(mArguments) {
	this.fireEvent("requestCompleted", mArguments);
	return this;
};


// the 'abstract methods' to be implemented by child classes

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindProperty
 * @function
 * @param {string}
 *         sPath the path pointing to the property that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @return {sap.ui.model.PropertyBinding}
 *
 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindList
 * @function
 * @param {string}
 *         sPath the path pointing to the list / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {sap.ui.model.Sorter}
 *         [oSorter=null] initial sort order (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @return {sap.ui.model.ListBinding}

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindTree
 * @function
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @return {sap.ui.model.TreeBinding}

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.createBindingContext
 * @function
 * @param {string}
 *         sPath the path to create the new context from
 * @param {object}
 * 		   [oContext=null] the context which should be used to create the new binding context
 * @param {function}
 *         fCallBack the function which should be called after the binding context has been created

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.destroyBindingContext
 * @function
 * @param {object}
 *         oContext to destroy

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.getProperty
 * @function
 * @param {string}
 *         sPath the path to where to read the attribute value
 * @param {object}
 * 		   [oContext=null] the context with which the path should be resolved
 * @public
 */

/**
 * Add a binding to this model
 *
 * @param {sap.ui.model.Binding} oBinding the binding to be added
 */
sap.ui.model.Model.prototype.addBinding = function(oBinding) {
	this.aBindings.push(oBinding);
};

/**
 * Remove a binding from the model
 *
 * @param {sap.ui.model.Binding} oBinding the binding to be removed
 */
sap.ui.model.Model.prototype.removeBinding = function(oBinding) {
	for (var i = 0; i < this.aBindings.length; i++) {
		if (this.aBindings[i] == oBinding) {
			this.aBindings.splice(i, 1);
			break;
		}
	}
};

/**
 * Get the default binding mode for the model
 *
 * @return {sap.ui.model.BindingMode} default binding mode of the model
 * 
 * @public
 */
sap.ui.model.Model.prototype.getDefaultBindingMode = function() {
	return this.sDefaultBindingMode;
};

/**
 * Set the default binding mode for the model. If the default binding mode should be changed, 
 * this method should be called directly after model instance creation and before any binding creation.
 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
 *
 * @param {sap.ui.model.BindingMode} sMode the default binding mode to set for the model
 * 
 * @public
 */
sap.ui.model.Model.prototype.setDefaultBindingMode = function(sMode) {
	if (this.isBindingModeSupported(sMode)) {
		this.sDefaultBindingMode = sMode;
	}
	else {
		throw new Error("Binding mode " + sMode + " is not supported by this model.");
	}
};

/**
 * Check if the specified binding mode is supported by the model.
 *
 * @param {sap.ui.model.BindingMode} sMode the binding mode to check
 * 
 * @public
 */
sap.ui.model.Model.prototype.isBindingModeSupported = function(sMode) {
	return (sMode in this.mSupportedBindingModes);
};


}; // end of sap.ui.model.Model

if ( !jQuery.sap.isDeclared('sap.ui.model.SimpleType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.SimpleType");
if ( !jQuery.sap.isDeclared('sap.ui.model.Type') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.Type");


/**
 * Constructor for a new Type.
 * 
 * @class
 * This is an abstract base class for type objects.
 * @abstract
 * 
 * @extends sap.ui.base.Object
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.Type = function () {
	sap.ui.base.Object.apply(this, arguments);
	this.sName = "Type";
};

// chain the prototypes
sap.ui.model.Type.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/*
 * Describe the sap.ui.model.Type. 
 * Resulting metadata can be obtained via sap.ui.model.Type.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.Type", {

  // ---- object ----
  baseType : "sap.ui.base.Object",
  publicMethods : [
    // methods
    "getName"
  ]

});	


/**
 * Returns the name of this type.
 *
 * @return {String} the name of this type
 * @public
 */
sap.ui.model.Type.prototype.getName = function() {
	return this.sName;
};
}; // end of sap.ui.model.Type

if ( !jQuery.sap.isDeclared('sap.ui.model.ParseException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.ParseException");


/**
 * ParseException class
 * 
 * This exception is thrown, when a parse error occurs while converting a
 * string value to a specific property type in the model.
 */
sap.ui.model.ParseException = function(message) {
	this.name = "ParseException";
	this.message = message;
};
sap.ui.model.ParseException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);
}; // end of sap.ui.model.ParseException

if ( !jQuery.sap.isDeclared('sap.ui.model.ValidateException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.ValidateException");


/**
 * ValidateException class
 * 
 * This exception is thrown, when a validation error occurs while checking the
 * defined constraints for a type.
 */
sap.ui.model.ValidateException = function(message, violatedConstraints) {
	this.name = "ValidateException";
	this.message = message;
	this.violatedConstraints = violatedConstraints;
};
sap.ui.model.ValidateException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);

}; // end of sap.ui.model.ValidateException

if ( !jQuery.sap.isDeclared('sap.ui.model.FormatException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.FormatException");


/**
 * FormatException class
 * 
 * This exception is thrown, when an error occurs while trying to convert a value of the model to
 * a specific property value in the UI.
 * 
 */
sap.ui.model.FormatException = function(message) {
	this.name = "FormatException";
	this.message = message;
};
sap.ui.model.FormatException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);
}; // end of sap.ui.model.FormatException



/**
 * Constructor for a new SimpleType.
 * 
 * @class
 * This is an abstract base class for simple types.
 * @abstract
 * 
 * @extends sap.ui.model.Type
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.SimpleType = function(oFormatOptions, oConstraints) {
	sap.ui.model.Type.apply(this, arguments);
	this.oFormatOptions = oFormatOptions;
	this.oConstraints = oConstraints;
	this.sName = "SimpleType";
};

// chain the prototypes
sap.ui.model.SimpleType.prototype = jQuery.sap.newObject(sap.ui.model.Type.prototype);

/*
 * Describe the sap.ui.model.SimpleType. 
 * Resulting metadata can be obtained via sap.ui.model.SimpleType.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.SimpleType", {

  // ---- object ----
  baseType : "sap.ui.model.Type",
  publicMethods : [
    // methods
    "setConstraints", "setFormatOptions", "formatValue", "parseValue", "validateValue"
  ]

});	

/**
 * Format the given value in model representation to an output value in the given
 * internal type. This happens according to the format options, if target type is 'string'.
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.formatValue
 * @param {any} oValue the value to be formatted
 * @param {string} sInternalType the target type 
 * @return {any} the formatted output value
 *
 * @public
 */

/**
 * Parse a value of an internal type to the expected value of the model type.
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.parseValue
 * @param {any} oValue the value to be parsed
 * @param {string} sInternalType the source type 
 * @return {any} the parse result
 *
 * @public
 */

/**
 * Validate whether a given value in model representation is valid and meets the 
 * defined constraints (if any).
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.validateValue
 * @param {any} oValue the value to be validated
 *
 * @public
 */

/**
 * Sets constraints for this type. This is meta information used when validating the
 * value, to ensure it meets certain criteria, e.g. maximum length, minimal amount
 * 
 * @param {object} oConstraints the constraints to set for this type
 */
sap.ui.model.SimpleType.prototype.setConstraints = function(oConstraints) {
	this.oConstraints = oConstraints;
};

/**
 * Set format options for this type. This is meta information used when formatting and
 * parsing values, such as patterns for number and date formatting or maximum length
 * 
 * @param {object} oFormatOptions the options to set for this type
 */
sap.ui.model.SimpleType.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
};
}; // end of sap.ui.model.SimpleType


/**
 * Constructs and initializes an UI Element with the given <code>sId</code> and settings.
 *
 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
 * that defines values for properties, aggregations, associations or events keyed by their name.
 *
 * <b>Valid Names:</b>
 *
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the control and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 *
 * If a key name is ambiguous for a specific control class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 *
 * Each subclass should document the set of supported names in its constructor documentation.
 *
 * <b>Valid Values:</b>
 *
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 *
 * @param {string} [sId] id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new element
 *
 * @class Base Class for Elements.
 * @extends sap.ui.base.EventProvider
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.2.0
 * @public
 */
sap.ui.core.Element = function(sId, mSettings) {

	sap.ui.base.EventProvider.apply(this); // no use to pass our arguments
	if (typeof(sId) != "string" && arguments.length>0) {
		// shift arguments in case sId was missing, but mSettings was given
		mSettings = sId;
		if (mSettings && mSettings.id) {
			sId = mSettings["id"];
		} else {
			sId = null;
		}
	}

	if (!sId) {
		sId = this.getMetadata().uid() || jQuery.sap.uid();
	} else {
		var preprocessor = sap.ui.core.Element._fnIdPreprocessor;
		sId = (preprocessor ? preprocessor.call(this, sId) : sId);
		var oType = sap.ui.base.DataType.getType("sap.ui.core.ID");
		if (!oType.isValid(sId)) {
			throw new Error("\"" + sId + "\" is not a valid ID.");
		}
	}
	this.sId = sId;

	// control interface
	// create an empty property bag that uses a map of defaultValues as its prototype
	this.mProperties = this.getMetadata().createPropertyBag();
	this.mAggregations = {};
	this.mAssociations = {};
	this.mMethods = {};

	// private properties
	this.oParent = null;
	this.bPrerendered = this.getDomRef() != null;
	this.aDelegates = [];
	this.aBeforeDelegates = [];
	this.iSuppressInvalidate = 0;

	// data binding
	this.oModels = {};
	this.mBindingInfos = {};

	// TODO: generic concept for init hooks?
	if ( this._initCompositeSupport ) {
		this._initCompositeSupport(mSettings);
	}

	// Call init method here instead of specific Controls constructor.
	if (this.init) {
		this.init();
	}

	// apply the settings
	this.applySettings(mSettings);

	// registers the element in the Core
	this.register();

};

// chain the prototypes
sap.ui.core.Element.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

/**
 * Creates metadata for an UI Element by extending the Object Metadata.
 *
 * In addition to the entries defined by {@link sap.ui.base.Object.defineClass}, the following
 * entries can be specified in the static info object:
 *
 * <ul>
 * <li>library: {string} name of the library that contains the element/control
 * <li>properties: a map of property info objects, mapped by the property name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the property (redundant to map key)
 *     <li>type {string} type of the property
 *     <li>[defaultValue] {any} default value of the property. Can be omitted
 *     </ul>
 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the aggregation, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the aggregated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n aggregations
 *     </ul>
 * <li>associations: a map of association info objects, mapped by the association name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the association, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the associated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n associations
 *     </ul>
 * <li>events: map from event names to event names
 * </ul>
 *
 * @see sap.ui.core.Object.defineClass
 *
 * @param {string} sClassName name of the class to build the metadata for
 * @param {object} oStaticInfo static information used to build the metadata
 * @param {function} [fnMetaImpl] constructor to be used for the metadata
 * @return {sap.ui.core.ElementMetadata} the created metadata
 * @static
 * @public
 */
sap.ui.core.Element.defineClass = function(sClassName, oStaticInfo, fnMetaImpl) {
	// create and attach metadata but with an Element specific implementation
	return sap.ui.base.Object.defineClass(sClassName, oStaticInfo, fnMetaImpl || sap.ui.core.ElementMetadata);
};

/*
 * Describe class Element.
 */
sap.ui.core.Element.defineClass("sap.ui.core.Element", {
  "abstract" : true,
  baseType : "sap.ui.base.EventProvider",
  publicMethods : [ "getId", "getMetadata", "getTooltip", "setTooltip", "getTooltip_AsString", "getTooltip_Text", "getModel", "setModel", "hasModel", "bindProperty", "unbindProperty", "bindAggregation", "unbindAggregation", "prop" ],
  library : "sap.ui.core",
  properties : {
	// TODO can't yet declare id as a property: would show up in ControlTree and applySettings would allow to modify id
	// id : {name : "id", type : "string", group : "Identification", defaultValue : '', readOnly : true}
  },
  aggregations : {
	tooltip : {name : "tooltip", type : "sap.ui.core.TooltipBase", altTypes : ["string"], multiple : false}
  },
  associations : {},
  events : {}
});

/**
 * Handles the given browser event.
 * @private
 */
sap.ui.core.Element.prototype._handleEvent = function (oEvent) {
	var sHandlerName = "on" + oEvent.type;
	this._callEventHandles(this.aBeforeDelegates, sHandlerName, oEvent);
	this._callEventHandles([this], sHandlerName, oEvent);
	this._callEventHandles(this.aDelegates, sHandlerName, oEvent);
};

/**
 * Calls event handler of the given event handles with the given browser event.
 * @private
 */
sap.ui.core.Element.prototype._callEventHandles = function (aHandles, sHandlerName, oEvent) {
	if (aHandles.length > 0) {
		for (var i = 0; i < aHandles.length; i++) {
			var oHandle = aHandles[i];
			if (oHandle[sHandlerName]) {
				oHandle[sHandlerName](oEvent);
			}
		}
	}
};


// Element is granted "friend" access by Core for (de-)registration
/**
 * Registers this instance of sap.ui.core.Element with the Core.
 *
 * The implementation of this method is provided with "friend" access by Core.
 * @see sap.ui.core.Core.constructor
 *
 * @function
 * @name sap.ui.core.Element.prototype.register
 * @private
 */
//sap.ui.core.Element.prototype.register = function() {...}

/**
 * Deregisters this instance of sap.ui.core.Element from the Core.
 *
 * The implementation of this method is provided with "friend" access by Core.
 * @see sap.ui.core.Core.constructor
 *
 * @function
 * @name sap.ui.core.Element.prototype.deregister
 * @private
 */
//sap.ui.core.Element.prototype.deregister = function() {...}

/**
 * Initializes the element instance after creation<br/>
 * override this hook as you please.
 *
 * @function
 * @name sap.ui.core.Element.prototype.init
 * @public
 */
//sap.ui.core.Element.prototype.init = function() {};

/**
 * Cleans up the element instance before destruction<br/>
 * override this hook as you please.
 *
 * @function
 * @name sap.ui.core.Element.prototype.exit
 * @public
 */
//sap.ui.core.Element.prototype.exit = function() {};

/**
 * Creates a new Element from the given data.
 *
 * If vData is an element already, that element is returned.
 * If vData is an object (literal), then a new element is created with vData as settings.
 * The type of the element is either determined by a "Type" entry in the vData or
 * by a type information in the oKeyInfo object
 * @param {sap.ui.core.Element|object} vData the data to create the element from
 * @param {object} oKeyInfo
 * @public
 * @static
 */
sap.ui.core.Element.create = function(vData, oKeyInfo) {
	if ( !vData || vData instanceof sap.ui.core.Element || typeof vData !== "object" ) {
		return vData;
	}

	// check for an explicit type specification.
	// Note that "Type" starts with an upper case "T" and therefore should not conflict with any UIElement property
	if ( typeof vData.Type === "function" ) {
		return new (vData.Type)(vData);
	} else if (typeof vData.Type === "string" ) {
		var fnClass = jQuery.sap.getObject(vData.Type);
		if ( typeof fnClass === "function" ) {
			return new fnClass(vData);
		}
	}

	// otherwise check if an aggregation info from the metadata is given and whether it specifies a type
	if ( oKeyInfo && typeof oKeyInfo.type === "string" ) {
		var fnClass = jQuery.sap.getObject(oKeyInfo.type);
		if ( typeof fnClass === "function" ) {
			return new fnClass(vData);
		}
	}

	// we don't know how to create the Element from vData, so fail
	// extension points could be integrated here
	var message = "Don't know how to create an Element from " + vData + " (" + (typeof vData) + ")";
	jQuery.sap.log.fatal(message);
	throw new Error(message);
};

/**
 * A global preprocessor for the ID of an Element (used internally).
 * If set, this function will be called before the ID is applied to any Element.
 * If the original ID was empty, the hook will not be called (to be discussed).
 *
 * The expected signature is <code>function(sId)</code>, and <code>this</code> will
 * be the current Element.
 *
 * @return new ID of the Element
 * @type function
 * @private
 */
sap.ui.core.Element._fnIdPreprocessor = null;

/**
 * A global preprocessor for the settings of an Element (used internally).
 * If set, this function will be called before the settings are applied to any Element.
 * If the original settings are empty, the hook will not be called (to be discussed).
 *
 * The expected signature is <code>function(mSettings)</code>, and <code>this</code> will
 * be the current Element.
 *
 * @type function
 * @private
 */
sap.ui.core.Element._fnSettingsPreprocessor = null;

/**
 * Sets all the properties, aggregations, associations and event handlers as given in
 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
 *
 * For properties and 0..1 aggregations/associations, any given setting overwrites
 * the current value. For 0..n aggregations, the given values are appended; event
 * listeners are registered in addition to existing ones.
 *
 * For the possible keys and values in <code>mSettings</code> see the general
 * documentation in {@link sap.ui.core.Element} or the specific documentation
 * of the constructor of the concrete UI element class.
 *
 * @param {object} mSettings the settings to apply to this element
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Element.prototype.applySettings = function(mSettings) {

	// PERFOPT: don't retrieve (expensive) JSONKeys if no settings are given
	if ( !mSettings || jQuery.isEmptyObject(mSettings) ) {
		return this;
	}

	var oMetadata = this.getMetadata(),
		mValidKeys = oMetadata.getJSONKeys(),
		makeControl = sap.ui.core.Element.create,
		preprocessor = sap.ui.core.Element._fnSettingsPreprocessor,
		sKey, oValue, oKeyInfo;

	// call the preprocessor if it has been defined
	preprocessor && preprocessor.call(this, mSettings); // TODO: decide whether to call for empty settings as well?

	// process all settings
	// process settings
	for(sKey in mSettings) {
		// get info object for the key
		if ( oKeyInfo = mValidKeys[sKey] ) {
			oValue = mSettings[sKey];
			switch(oKeyInfo._iKind) {
			case 0: // PROPERTY
				if (this.isBinding(oValue, oKeyInfo)) {
					var oBindingInfo = this.getBindingInfo(oValue);
					this.bindProperty(sKey, oBindingInfo.path, oBindingInfo.type || oBindingInfo.formatter);
				} else {
					this[oKeyInfo._sMutator](oValue);
				}
				break;
			case 1: // SINGLE_AGGREGATION
				if ( oKeyInfo.altTypes && this.isBinding(oValue, oKeyInfo) ) {
					var oBindingInfo = this.getBindingInfo(oValue);
					this.bindProperty(sKey, oBindingInfo.path, oBindingInfo.type || oBindingInfo.formatter);
				} else {
					this[oKeyInfo._sMutator](makeControl(oValue, oKeyInfo));
				}
				break;
			case 2: // MULTIPLE_AGGREGATION
				if (this.isBinding(oValue, oKeyInfo)) {
					var oBindingInfo = this.getBindingInfo(oValue);
					this.bindAggregation(sKey, oBindingInfo.path, oBindingInfo.template, oBindingInfo.sorter, oBindingInfo.filters);
				} else {
					if ( oValue && !jQuery.isArray(oValue) ) {
						oValue = [oValue];
					}
					if ( oValue ) {
						for(var i=0,l=oValue.length; i<l; i++) {
							this[oKeyInfo._sMutator](makeControl(oValue[i], oKeyInfo));
						}
					}
				}
				break;
			case 3: // SINGLE_ASSOCIATION
				this[oKeyInfo._sMutator](oValue);
				break;
			case 4: // MULTIPLE_ASSOCIATION
				if ( oValue && !jQuery.isArray(oValue) ) {
					oValue = [oValue];
				}
				if ( oValue ) {
					for(var i=0,l=oValue.length; i<l; i++) {
						this[oKeyInfo._sMutator](oValue[i]);
					}
				}
				break;
			case 5: // EVENT
				if ( typeof oValue == "function" ) {
					this[oKeyInfo._sMutator](oValue);
				}
				else {
					this[oKeyInfo._sMutator](oValue[0], oValue[1], oValue[2]);
				}
					//this[oKeyInfo._sMutator].apply(this, oValue); // could be replacement for line before
				break;
			default:
				break;
			}
		}
	}

	return this;
};

/**
 * Returns a simple string representation of this element.
 *
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string descripition of this element
 */
sap.ui.core.Element.prototype.toString = function() {
	if ( this.getMetadata ) {
		return "Element " + this.getMetadata().getName() + "#" + this.sId;
	}
	else {
		return "Element {unknown class}#" + this.sId;
	}
};

/**
 * Returns the element's Id.
 *
 * @return {string} the element's Id.
 * @public
 */
sap.ui.core.Element.prototype.getId = function() {
	return this.sId;
};

/**
 * Returns the best suitable DOM node that represents this Element.
 * By default the DOM node with the same ID as this Element is returned.
 * Subclasses should override this method if the lookup via id is not sufficient.
 *
 * Note that such a DOM node does not necessarily exist in all cases.
 * Some elements or controls might not have a DOM representation at all (e.g.
 * a naive FlowLayout) while others might not have one due to their current
 * state (e.g. an initial, not yet rendered control).
 *
 * @return {DOMNode} The element's DOM reference or null
 * @protected
 */
sap.ui.core.Element.prototype.getDomRef = function() {
	return jQuery.sap.domById(this.getId());
};

/**
 * Returns the best suitable DOM node that represents this Element wrapped as jQuery object.
 * I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
 *
 * @return {jQuery} The jQuery wrapped element's DOM reference
 * @protected
 */

sap.ui.core.Element.prototype.$ = function() {
	return jQuery(this.getDomRef());
};

/**
 * Checks whether this element has an active parent.
 *
 * @type boolean
 * @return true if this element has an active parent
 * @private
 */
sap.ui.core.Element.prototype.isActive = function() {
	var oParent = this.getParent();
	return this.oParent && this.oParent.isActive();
};

/**
 * This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name
 * depending if an <code>oValue</code> is provided or not.
 * 
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     [oValue] value to set the property to
 * @return {any|sap.ui.core.Element} Returns <code>this</code> to allow method chaining in case of setter and the property value in case of getter
 * @public
 */
sap.ui.core.Element.prototype.prop = function(sPropertyName, oValue) {

	var oPropertyInfo = this.getMetadata().getJSONKeys()[sPropertyName];
	if (oPropertyInfo) {
		if (arguments.length == 1) {
			// getter
			return this[oPropertyInfo._sGetter]();
		} else {
			// setter
			this[oPropertyInfo._sMutator](oValue);
			return this;
		}
	}
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> and marks
 * this UI element for redraw. If the given <code>oValue</code> equals the
 * current value, nothing happens.
 *
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     oValue value to set the property to
 * @param {boolean} [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * TODO better name bSuppressInvalidate positive, e.g. "bStayValid"
 * @protected
 */
sap.ui.core.Element.prototype.setProperty = function(sPropertyName, oValue, bSuppressInvalidate) {

	// check for a value change
	var oOldValue = this.mProperties[sPropertyName];
	if (oOldValue === oValue) {
		return this;
	} // no change

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	// value validation
	oValue = this.validateProperty(sPropertyName, oValue);

	// change the property (and invalidate if the rendering should be updated)
	this.mProperties[sPropertyName] = oValue;
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}
	
	// check whether property is bound and update model in case of two way binding
	this.updateModelProperty(sPropertyName, oValue, oOldValue);
	
	// prototype for generic property change events
	// TODO: THINK ABOUT CONFIGURATION TO ENABLE THIS
	sap.ui.base.EventProvider.prototype.fireEvent.apply(this, ["_change", {
		"id": this.getId(),
		"name": sPropertyName,
		"oldValue": oOldValue,
		"newValue": oValue
	}]);
	
	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return this;
};

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 *
 * @param {string} sPropertyName the name of the property
 * @type any
 * @return the value of the property
 * @protected
 */
sap.ui.core.Element.prototype.getProperty = function(sPropertyName) {
	return this.mProperties[sPropertyName];
};

/**
 * Checks whether the given value is of the proper type for the given property name. In case the null value is
 * passed return the default value for this property.
 *
 * @param {string} sPropertyName the name of the property
 * @param {any} oValue the value
 * @type boolean
 * @return true if the type of the value matches the type of the property
 * @protected
 */
sap.ui.core.Element.prototype.validateProperty = function(sPropertyName, oValue) {
	var oMetadata = this.getMetadata(),
		oProperty = oMetadata.getAllProperties()[sPropertyName],
		oType;

	if (!oProperty) {
		throw new Error("Property \"" + sPropertyName + "\" does not exist in " + oMetadata.getElementName() +
				" \"" + this.getId() + "\"");
	}

	oType = sap.ui.base.DataType.getType(oProperty.type);

	// In case null is passed as the value return the default value, either from the property or from the type
	if (oValue === null || oValue === undefined) {
		if (oProperty.defaultValue !== null) {
			return oProperty.defaultValue;
		} else {
			return oType.getDefaultValue();
		}
	}

	// Implicit casting for string only, other types are causing errors
	if (oType instanceof sap.ui.base.DataType) {
		if (oType.getName() == "string") {
			oValue = "" + oValue;
		} else if (oType.getName() == "string[]") {
			for (var i = 0; i < oValue.length; i++) {
				oValue[i] = "" + oValue[i];
			}
		} else if (!oType.isValid(oValue)) {
			throw new Error("\"" + oValue + "\" is of type " + typeof oValue + ", expected " +
					oType.getName() + " for property \"" + sPropertyName + "\" of " +
					oMetadata.getElementName() + " \"" + this.getId() + "\"");
		}
	} else if (!(oValue in oType)){ // Enumeration
		throw new Error("\"" + oValue + "\" is not a valid entry of the enumeration for property \"" + sPropertyName + "\" of " +
				oMetadata.getElementName() + " \"" + this.getId() + "\"");
	}

	return oValue;
};

// ######################################################################################################
// Associations
// ######################################################################################################

/**
 * Sets an association for the control
 *
 * @param {string}
 *            sAssociationName name of the association
 * @param {string | sap.ui.core.Element}
 *            sId the ID of the control that is set as an association, or the control itself
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.setAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
	if (sId != null && typeof(sId) != "string") {
		sId = sId.getId();
	} // oElement -> sId
	if (this.mAssociations[sAssociationName] == sId) {
		return this;
	} // no change

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	this.mAssociations[sAssociationName] = sId;
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return this;
};

/**
 * Returns an association of the control with a given sAssociationName
 *
 * @param {string} sAssociationName the name of the association
 * @param {sap.ui.core.Element | Array}
 *			  oDefaultForCreation the object that is used in case the current aggregation is empty
 * @type sap.ui.core.Element
 * @return {string | string[]} the ID of the associated control or an array of such IDs; may be null if the association has not been populated
 * @protected
 */
sap.ui.core.Element.prototype.getAssociation = function(sAssociationName, oDefaultForCreation) {
	var result = this.mAssociations[sAssociationName];

	if (!result) {
		result = this.mAssociations[sAssociationName] = oDefaultForCreation || null;
	} else {
		if (typeof result.length === 'number' && !(result.propertyIsEnumerable('length')) ) {
			// Return a copy of the array instead of the array itself as reference!!
			return result.slice();
		}
		// simple type or Element
		return result;
	}

	return result;
};

/**
 * Adds some entity with the ID <code>sId</code> to the association identified by <code>sAssociationName</code>.
 *
 * @param {string}
 *            sAssociationName the string identifying the association the element should be added to.
 * @param {string | sap.ui.core.Element}
 *            sId the ID of the element to add; if empty, nothing is added; if a <code>sap.ui.core.Element</code> is given, its ID is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element as well as the newly associated element is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.addAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
	if (!sId) {
		return this;
	}

	if (sId !== null && typeof(sId) != "string") {
		sId = sId.getId();
	} // oElement -> sId

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	var aIds = this.mAssociations[sAssociationName];
	if (!aIds) {
		aIds = this.mAssociations[sAssociationName] = [sId];
	} else {
		aIds.push(sId);
	}

	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return this;
};

/**
 * Removes an Element from the association named <code>sAssociationName</code>.
 *
 * @param {string}
 *            sAssociationName the string identifying the association the Element should be removed from.
 * @param {int | string | sap.ui.core.Element}
 *            vElement the position or ID of the Element to remove or the Element itself; if <code>vElement</code> is invalid input,
 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @return the ID of the removed Element or null
 * @protected
 */
sap.ui.core.Element.prototype.removeAssociation = function(sAssociationName, vElement, bSuppressInvalidate) {
	var aIds = this.mAssociations[sAssociationName];
	var sId = null;

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	if (typeof(vElement) == "object" && vElement.getId) { // element itself is given
		vElement = vElement.getId();
	}

	if (typeof(vElement) == "string") { // ID of the element is given or has just been retrieved
		for (var i = 0; i < aIds.length; i++) {
			if (aIds[i] == vElement) {
				vElement = i;
				break;
			}
		}
	}

	if (typeof(vElement) == "number") { // "element" is the index now
		if (vElement < 0 || vElement >= aIds.length) {
			jQuery.sap.log.warning("Element.removeAssociation called with invalid index: " + sAssociationName + ", " + vElement);
		} else {
			var sId = aIds[vElement];
			aIds.splice(vElement, 1);
			if (!this.isInvalidateSuppressed()) {
				this.invalidate();
			}
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return sId;
};

/**
 * Removes all the controls in the 0..n-association named <code>sAssociationName</code> (and returns them in an array).<br/>
 *
 * @param {string}
 *            sAssociationName the name of the association
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @type Array
 * @return an array with the IDs of the removed elements (might be empty)
 * @protected
 */
sap.ui.core.Element.prototype.removeAllAssociation = function(sAssociationName, bSuppressInvalidate){
	var aIds = this.mAssociations[sAssociationName];
	if (!aIds)	{
		return [];
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	delete this.mAssociations[sAssociationName];
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return aIds;
};

// ######################################################################################################
// End of Associations
// ######################################################################################################


// ######################################################################################################
// Aggregations
// ######################################################################################################
/**
 * Sets an aggregation for the control
 *
 * @param {string}
 *            sAggregationName name of the aggregation
 * @param {object}
 *            oElement the control that is set as an aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.setAggregation = function(sAggregationName, oElement, bSuppressInvalidate) {
	var oOldChild = this.mAggregations[sAggregationName];
	if (oOldChild === oElement) {
		return this;
	} // no change
	
	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	if (oOldChild instanceof sap.ui.core.Element) { // remove old child
		oOldChild.setParent(null);
	}
	this.mAggregations[sAggregationName] = oElement;
	if (oElement instanceof sap.ui.core.Element) { // adopt new child
		oElement.setParent(this, sAggregationName, bSuppressInvalidate);
	} else {
		if (!this.isInvalidateSuppressed()) {
			this.invalidate();
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Returns an aggregation of the control with a given sAggregationName
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.core.Element | Array}
 *			  oDefaultForCreation the object that is used in case the current aggregation is empty
 * @type sap.ui.core.Element|Array
 * @return the aggregation array in case of 0..n-aggregations or the control or null in case of 0..1-aggregations
 * @protected
 */
sap.ui.core.Element.prototype.getAggregation = function(sAggregationName, oDefaultForCreation) {
	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		aChildren = this.mAggregations[sAggregationName] = oDefaultForCreation || null;
	}
	if (aChildren) {
		if (typeof aChildren.length === 'number' && !(aChildren.propertyIsEnumerable('length')) ) {
			// Return a copy of the array instead of the array itself as reference!!
			return aChildren.slice();
		}
		// simple type or Element
		return aChildren;
	} else {
		return null;
	}
};

/**
 * Checks for the provided control <code>oElement</code> in the aggregation
 * named <code>sAggregationName</code> and returns its index if found, or -1
 * otherwise. Returns -2 if the given named aggregation is not a multiple one
 * (and does not contain the given child).
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.core.Element}
 *            oElement the Control whose index is looked for.
 * @return {int} the index of the provided control in the aggregation.
 * @protected
 */
sap.ui.core.Element.prototype.indexOfAggregation = function(sAggregationName, oElement) {
	var aChildren = this.mAggregations[sAggregationName];
	if (aChildren) {
		if (aChildren.length == undefined) {
			return -2;
		} // not a multiple aggregation

		for (var i = 0; i < aChildren.length; i++) {
			if (aChildren[i] == oElement) {
				return i;
			}
		}
	}
	return -1;
};

/**
 * Inserts control <code>oElement</code> to the aggregation named <code>sAggregationName</code> at
 * position <code>iIndex</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation the control <code>oElement</code>
 *            should be inserted into.
 * @param {sap.ui.core.Element}
 *            oElement the element to add; if empty, nothing is inserted.
 * @param {int}
 *            iIndex the <code>0</code>-based index the control should be inserted at; for a negative
 *            value <code>iIndex</code>, <code>oElement</code> is inserted at position 0; for a value
 *            greater than the current size of the aggregation, <code>oElement</code> is inserted at
 *            the last position
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element as well as the added child is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.insertAggregation = function(sAggregationName, oElement, iIndex, bSuppressInvalidate) {
	if (!oElement) {
		return this;
	}

	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		aChildren = this.mAggregations[sAggregationName] = [];
	}

	if (iIndex<0) {
		jQuery.sap.log.warning("Element.insertAggregation called with index out of range: " + sAggregationName + ", " + iIndex);
		jQuery.sap.log.warning("Element.insertAggregation insertion done on position 0.");
		iIndex = 0;
	}

	if (iIndex>aChildren.length) {
		jQuery.sap.log.warning("Element.insertAggregation called with index out of range: " + sAggregationName + ", " + iIndex);
		jQuery.sap.log.warning("Element.insertAggregation insertion done on last position.");
		iIndex = aChildren.length;
	}


	aChildren.splice(iIndex, 0, oElement);
	oElement.setParent(this, sAggregationName, bSuppressInvalidate);

	return this;
};

/**
 * Adds some entity <code>oElement</code> to the aggregation identified by <code>sAggregationName</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation the element <code>oElement</code> should be added to.
 * @param {sap.ui.core.Element}
 *            oElement the element to add; if empty, nothing is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element as well as the added child is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.addAggregation = function(sAggregationName, oElement, bSuppressInvalidate) {
	if (!oElement) {
		return this;
	}

	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		aChildren = this.mAggregations[sAggregationName] = [oElement];
	} else {
		aChildren.push(oElement);
	}
	oElement.setParent(this, sAggregationName, bSuppressInvalidate);

	return this;
};

/**
 * Removes an element from the aggregation named <code>sAggregationName</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation the Element should be removed from
 * @param {int | string | sap.ui.core.Element}
 *            vElement the position or ID of the Element to remove or the Element itself; if <code>vElement</code> is invalid,
 *            a negative value or a value greater or equal than the current size of the aggregation, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @type sap.ui.core.Element
 * @return the removed element or null
 * @protected
 */
sap.ui.core.Element.prototype.removeAggregation = function(sAggregationName, vElement, bSuppressInvalidate) {
	var aChildren = this.mAggregations[sAggregationName];
	var oChildControl = null;

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}

	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		for (var i = 0; i < aChildren.length; i++) {
			if (aChildren[i] == vElement) {
				vElement = i;
				break;
			}
		}
	}

	if (typeof(vElement) == "number") { // "vElement" is the index now
		if (vElement < 0 || vElement >= aChildren.length) {
			jQuery.sap.log.warning("Element.removeAggregation called with invalid index: " + sAggregationName + ", " + vElement);

		} else {
			oChildControl = aChildren[vElement];
			aChildren.splice(vElement, 1);
			oChildControl.setParent(null);
			if (!this.isInvalidateSuppressed()) {
				this.invalidate();
			}
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return oChildControl;
};

/**
 * Removes all the controls in the 0..n-aggregation named <code>sAggregationName</code> (and returns them in an array).<br/>
 * Additionally unregisters them from the hosting UIArea.
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @type Array
 * @return an array of the removed elements (might be empty)
 * @protected
 */
sap.ui.core.Element.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren)	{
		return [];
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	delete this.mAggregations[sAggregationName];
	for (var i = 0; i < aChildren.length; i++) {
		aChildren[i].setParent(null);
	}
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return aChildren;
};

/**
 * Destroys (all) the control(s) in the aggregation named <code>sAggregationName</code> and afterwards empties the
 * aggregation.
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		return this;
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	delete this.mAggregations[sAggregationName];
	if (aChildren instanceof sap.ui.core.Element) {
		aChildren.destroy(bSuppressInvalidate);
	} else if (aChildren && jQuery.isArray(aChildren)) {
		for (var i = 0; i < aChildren.length; i++) {
			if (aChildren[i]) {
				aChildren[i].destroy(bSuppressInvalidate);
			}
		}
	}
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

// ######################################################################################################
// End of Aggregations
// ######################################################################################################

if ( !jQuery.sap.isDeclared('sap.ui.core.Core') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the real core class sap.ui.core.Core of SAPUI5
jQuery.sap.declare("sap.ui.core.Core");


if ( !jQuery.sap.isDeclared('jquery.sap.events') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides functionality related to eventing.
jQuery.sap.declare("jquery.sap.events");


(function(){

	/**
	 * List of DOM events that a UIArea automatically takes care of.
	 *
	 * A control/element doesn't have to bind listeners for these events.
	 * It instead can implement an <code>on<i>event</i>(oEvent)</code> method
	 * for any of these events that it wants to be notified about.
	 *
	 * @public
	 */
	jQuery.sap.ControlEvents = [
		"click",
		"dblclick",
		"focusin",
		"focusout",
		"keydown",
		"keypress",
		"keyup",
		"mousedown",
		"mouseout",
		"mouseover",
		"mouseup",
		"select",
		"selectstart",
		"dragstart",
		"dragenter",
		"dragover",
		"dragleave",
		"dragend",
		"drop",
		"paste"
	];


	/**
	 * Enumeration of all so called "pseudo events", a useful classification
	 * of standard browser events as implied by SAP product standards.
	 *
	 * Whenever a browser event is recognized as one or more pseudo events, then this
	 * classification is attached to the original {@link jQuery.Event} object and thereby
	 * delivered to any jQuery-style listeners registered for that browser event.
	 *
	 * Pure JavaScript listeners can evaluate the classification information using 
	 * the {@link jQuery.Event#isPseudoType} method.
	 *
	 * Instead of using the procedure as described above, the SAPUI5 controls and elements 
	 * should simply implement an <code>on<i>pseudo-event</i>(oEvent)</code> method. It will 
	 * be invoked only when that specific pseudo event has been recognized. This simplifies event
	 * dispatching even further.
	 *
	 * @namespace
	 * @public
	 */
	jQuery.sap.PseudoEvents = {

		/* Pseudo keyboard events */

		/**
		 * Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdown: {sName: "sapdown", aTypes: ["keydown"], fnCheck: function (oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdownmodifiers: {sName: "sapdownmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)
		 * @public
		 */
		sapshow: {sName: "sapshow", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.F4 && !hasModifierKeys(oEvent)) ||
				(oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/true, /*Shift*/false));
		}},
		/**
		 * Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapup: {sName: "sapup", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapupmodifiers: {sName: "sapupmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'hide' event (Alt + up-Arrow)
		 * @public
		 */
		saphide: {sName: "saphide", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/true, /*Shift*/false);
		}},
		/**
		 * Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapleft: {sName: "sapleft", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_LEFT && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapleftmodifiers: {sName: "sapleftmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_LEFT && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapright: {sName: "sapright", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_RIGHT && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saprightmodifiers: {sName: "saprightmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_RIGHT && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saphome: {sName: "saphome", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saphomemodifiers: {sName: "saphomemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for  pseudo top event
		 * @public
		 */
		saptop: {sName: "saptop", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && checkModifierKeys(oEvent, /*Ctrl*/true, /*Alt*/false, /*Shift*/false);
		}},
		/**
		 * Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapend: {sName: "sapend", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapendmodifiers: {sName: "sapendmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo bottom event
		 * @public
		 */
		sapbottom: {sName: "sapbottom", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && checkModifierKeys(oEvent, /*Ctrl*/true, /*Alt*/false, /*Shift*/false);
		}},
		/**
		 * Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappageup: {sName: "sappageup", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_UP && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappageupmodifiers: {sName: "sappageupmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_UP && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappagedown: {sName: "sappagedown", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_DOWN && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappagedownmodifiers: {sName: "sappagedownmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_DOWN && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapselect: {sName: "sapselect", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.ENTER || oEvent.keyCode == jQuery.sap.KeyCodes.SPACE) && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapselectmodifiers: {sName: "sapselectmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.ENTER || oEvent.keyCode == jQuery.sap.KeyCodes.SPACE) && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapspace: {sName: "sapspace", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.SPACE && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapspacemodifiers: {sName: "sapspacemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.SPACE && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapenter: {sName: "sapenter", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ENTER && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapentermodifiers: {sName: "sapentermodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ENTER && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapbackspace: {sName: "sapbackspace", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.BACKSPACE && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapbackspacemodifiers: {sName: "sapbackspacemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.BACKSPACE && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdelete: {sName: "sapdelete", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.DELETE && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdeletemodifiers: {sName: "sapdeletemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.DELETE && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapexpand: {sName: "sapexpand", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_PLUS && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapexpandmodifiers: {sName: "sapexpandmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_PLUS && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapcollapse: {sName: "sapcollapse", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_MINUS && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapcollapsemodifiers: {sName: "sapcollapsemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_MINUS && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad *)
		 * @public
		 */
		sapcollapseall: {sName: "sapcollapseall", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_ASTERISK && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard escape
		 * @public
		 */
		sapescape: {sName: "sapescape", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ESCAPE && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard tab (TAB + no modifier)
		 * @public
		 */
		saptabnext: {sName: "saptabnext", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.TAB && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for keyboard tab (TAB + shift modifier)
		 * @public
		 */
		saptabprevious: {sName: "saptabprevious", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.TAB && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		}},
		/**
		 * Pseudo event for pseudo skip forward (F6 + no modifier)
		 * @public
		 */
		sapskipforward: {sName: "sapskipforward", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.F6 && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo skip back (F6 + shift modifier)
		 * @public
		 */
		sapskipback: {sName: "sapskipback", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.F6 && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		}},
		//// contextmenu Shift-F10 hack
		//{sName: "sapcontextmenu", aTypes: ["keydown"], fnCheck: function(oEvent) {
		//	return oEvent.keyCode == jQuery.sap.KeyCodes.F10 && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		//}},

		/**
		 * Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdecrease: {sName: "sapdecrease", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdecreasemodifiers: {sName: "sapdecreasemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapincrease: {sName: "sapincrease", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapincreasemodifiers: {sName: "sapincreasemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapprevious: {sName: "sapprevious", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappreviousmodifiers: {sName: "sappreviousmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapnext: {sName: "sapnext", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && !hasModifierKeys(oEvent);
		}},
		/**
		 * Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapnextmodifiers: {sName: "sapnextmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && hasModifierKeys(oEvent);
		}},
		//// pseudo hotkey event
		//{sName: "saphotkey", aTypes: ["keydown"], fnCheck: function(oEvent) {
		//  return false;
		//}},
		/* TODO: hotkeys: all other events could be hotkeys
		if(UCF_KeyboardHelper.bIsValidHotkey(iKey, bCtrl, bAlt, bShift)) {

			if (iKey == jQuery.sap.KeyCodes.F1 && bNoModifiers) {
				//special handling for FF - in IE the help is handeled by onHelp
				if (UCF_System.sDevice == "ff1") {
					this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
				}
			}
			else if (bCtrlOnly && iKey == jQuery.sap.KeyCodes.C && document.selection) {
				//handle ctrl+c centrally if text is selected to allow to copy it instead of firing the hotkey
				var oTextRange = document.selection.createRange();
				if (!oTextRange || oTextRange.text.length <= 0) {
					this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
				}
			}
			else {
				this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
			}
		}
		*/

		/*
		 * Other pseudo events
		 * @public
		 */

		/**
		 * Pseudo event indicating delayed double click (e.g. for inline edit)
		 * @public
		 */
		sapdelayeddoubleclick: {sName: "sapdelayeddoubleclick", aTypes: ["click"], fnCheck: function(oEvent) {
			var element = jQuery(oEvent.target);
			var currentTimestamp = oEvent.timeStamp;
			var data = element.data("sapdelayeddoubleclick_lastClickTimestamp");
			var lastTimestamp = data || 0;
			element.data("sapdelayeddoubleclick_lastClickTimestamp", currentTimestamp);
			var diff = currentTimestamp - lastTimestamp;
			return (diff >= 300 && diff <= 1300);
		}}

	};

	/**
	 * Ordered array of the {@link jQuery.sap.PseudoEvents}.
	 *
	 * Order is significant as some check methods rely on the fact that they are tested before other methods.
	 * The array is processed during event analysis (when classifying browser events as pseudo events).
	 * @private
	 */
	var PSEUDO_EVENTS = ["sapdown", "sapdownmodifiers", "sapshow", "sapup", "sapupmodifiers", "saphide", "sapleft", "sapleftmodifiers", "sapright", "saprightmodifiers", "saphome", "saphomemodifiers", "saptop", "sapend", "sapendmodifiers", "sapbottom", "sappageup", "sappageupmodifiers", "sappagedown", "sappagedownmodifiers", "sapselect", "sapselectmodifiers", "sapspace", "sapspacemodifiers", "sapenter", "sapentermodifiers", "sapexpand", "sapbackspace", "sapbackspacemodifiers", "sapdelete", "sapdeletemodifiers", "sapexpandmodifiers", "sapcollapse", "sapcollapsemodifiers", "sapcollapseall", "sapescape", "saptabnext", "saptabprevious", "sapskipforward", "sapskipback", "sapprevious", "sappreviousmodifiers", "sapnext", "sapnextmodifiers", "sapdecrease", "sapdecreasemodifiers", "sapincrease", "sapincreasemodifiers", "sapdelayeddoubleclick"];
	
	
	//Add mobile touch events if touch is supported or we run in special dev test mode
	(function initTouchEventSupport() {
		
		function simulateMobileTouchEventSupport(){
			var sConfigKey = "xx-test-mobile"; //see sap.ui.core.Configuration -> M_SETTINGS
			var oCfgData = window["sap-ui-config"];
			return document.location.href.indexOf("sap-ui-"+sConfigKey) > -1 || (oCfgData && oCfgData[sConfigKey]);
		}
		
		jQuery.sap.touchEventMode = "OFF";
		
		var aAdditionalControlEvents = [];
		var aAdditionalPseudoEvents = [];
		
		if("ontouchend" in document){ //Touch events natively supported
			jQuery.sap.touchEventMode = "ON";
			
			//ensure that "oEvent.touches", ... works (and not only "oEvent.originalEvent.touches", ...)
			jQuery.event.props.push("touches", "targetTouches", "changedTouches");
			
			//Define additional native events to be added to the event list
			//TODO maybe add "gesturestart", "gesturechange", "gestureend" later ?
			aAdditionalControlEvents.push("touchstart", "touchend", "touchmove", "touchcancel");

		}else if(simulateMobileTouchEventSupport()){ //Touch Simulation mode
			jQuery.sap.touchEventMode = "SIM";
			jQuery.sap.log.warning("MOBILE TOUCH EVENT TEST MODE ACTIVE", "", "jQuery.sap.events");

			function createSimulatedTouch(sName, aOrigEvents) {
				var sHandlerKey = "__"+sName+"Handler";
				var sSapName = "sap"+sName;
				aAdditionalControlEvents.push(sSapName);
				aAdditionalPseudoEvents.push({sName: sName, aTypes: [sSapName], fnCheck: function (oEvent) { return true; }});
				
				jQuery.event.special[sSapName] = {
					add: function(oHandle) {
						var that = this,
						$this = jQuery(this);
						var fHandler = function(oEvent) {
							if(!(oEvent.type != "mouseout" || (oEvent.type === "mouseout" && jQuery.sap.checkMouseEnterOrLeave(oEvent, that)))){
								return;
							}
							
							var oNewEvent = jQuery.event.fix(oEvent.originalEvent);
							oNewEvent.type = sSapName;
							
							//TODO Extend if necessary
							oNewEvent.touches = [{
								identifier: 1,
								pageX: oNewEvent.pageX,
								pageY: oNewEvent.pageY,
								clientX: oNewEvent.clientX,
								clientY: oNewEvent.clientY,
								screenX: oNewEvent.screenX,
								screenY: oNewEvent.screenY,
								radiusX: 1,
								radiusY: 1,
								rotationAngle: 0
							}];
							
							if(sName === "touchstart" || $this.data("__touch_in_progress")){
								$this.data("__touch_in_progress", "X");
								oHandle.handler.call(that, oNewEvent);
								if(sName === "touchend"){
									$this.removeData("__touch_in_progress");
								}
							}
						};
						$this.data(sHandlerKey + oHandle.guid, fHandler);
						for(var i=0; i<aOrigEvents.length; i++){
							$this.bind(aOrigEvents[i], fHandler);
						}
					},
					remove: function(oHandle) {
						var $this = jQuery(this);
						var fHandler = $this.data(sHandlerKey + oHandle.guid);
						$this.removeData(sHandlerKey + oHandle.guid);
						for(var i=0; i<aOrigEvents.length; i++){
							jQuery.event.remove(this, aOrigEvents[i], fHandler);
						}
					}
				};
			}
			
			createSimulatedTouch("touchstart", ["mousedown"]);
			createSimulatedTouch("touchend", ["mouseup", "mouseout"]);
			createSimulatedTouch("touchmove", ["mousemove"]);
		}
		
		if(jQuery.sap.touchEventMode != "OFF"){
			jQuery.sap.require("jquery-mobile-custom");
			
			//Define additional jQuery Mobile events to be added to the event list
			//TODO taphold cannot be used (does not bubble / has no target property) -> Maybe provide own solution
			aAdditionalControlEvents.push("swipe", "tap", "swipeleft", "swiperight", "scrollstart", "scrollstop");
			
			//Define additional pseudo events to be added to the event list
			aAdditionalPseudoEvents.push({sName: "swipebegin", aTypes: ["swipeleft", "swiperight"], fnCheck: function (oEvent) {
				var bRtl = sap.ui.getCore().getConfiguration().getRTL();
				return (bRtl && oEvent.type === "swiperight") || (!bRtl && oEvent.type === "swipeleft");
			}});
			aAdditionalPseudoEvents.push({sName: "swipeend", aTypes: ["swipeleft", "swiperight"], fnCheck: function (oEvent) {
				var bRtl = sap.ui.getCore().getConfiguration().getRTL();
				return (!bRtl && oEvent.type === "swiperight") || (bRtl && oEvent.type === "swipeleft");
			}});
			
			//Add all defined events to the event infrastructure
			jQuery.sap.ControlEvents = jQuery.sap.ControlEvents.concat(aAdditionalControlEvents);
			
			for(var i=0; i<aAdditionalPseudoEvents.length; i++){
				jQuery.sap.PseudoEvents[aAdditionalPseudoEvents[i].sName] = aAdditionalPseudoEvents[i];
				PSEUDO_EVENTS.push(aAdditionalPseudoEvents[i].sName);
			}
		}
	}());
	
	
	/**
	 * Function for initialization of an Array containing all basic event types of the available pseudo events.
	 * @private
	 */
	function initPseudoEventBasicTypes(){
		var mEvents = jQuery.sap.PseudoEvents;
		var aResult = [];
		for (var sName in mEvents) {
			if (mEvents[sName].aTypes) {
				for (var j = 0, js = mEvents[sName].aTypes.length; j < js; j++) {
					var sType = mEvents[sName].aTypes[j];
					if (jQuery.inArray(sType, aResult) == -1) {
						aResult.push(sType);
					}
				}
			}
		}
		return aResult;
	}

	/**
	 * Array containing all basic event types of the available pseudo events.
	 * @private
	 */
	var PSEUDO_EVENTS_BASIC_TYPES = initPseudoEventBasicTypes();

	/**
	 * Convenience method to check an event for a certain combination of modifier keys
	 * @private
	 */
	function checkModifierKeys(oEvent, bCtrlKey, bAltKey, bShiftKey) {
		return oEvent.shiftKey == bShiftKey && oEvent.altKey == bAltKey && getCtrlKey(oEvent) == bCtrlKey;
	}

	/**
	 * Convenience method to check an event for any modifier key
	 * @private
	 */
	function hasModifierKeys(oEvent) {
		return oEvent.shiftKey || oEvent.altKey || getCtrlKey(oEvent);
	}

	/**
	 * Convenience method for handling of Ctrl key, meta key etc.
	 * @private
	 */
	function getCtrlKey(oEvent) {
		//Maybe we should use the metaKey when running on Mac OS (window.navigator.userAgent.indexOf("Mac OS") > -1)
		//and the ctrlKey otherwise. The normalization of the metaKey in jQuery is slightly different from this approach.
		return !!oEvent.metaKey; // double negation doesn't have effect on boolean but ensures null and undefined are equivalent to false.
	}


	/**
	 * Returns an array of names (as strings) identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
	 * @returns {String[]} Array of names identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
	 * @public
	 */
	jQuery.Event.prototype.getPseudoTypes = function() {
		var aPseudoTypes = [];
		if (jQuery.inArray(this.type, PSEUDO_EVENTS_BASIC_TYPES) != -1) {
			var aPseudoEvents = PSEUDO_EVENTS;
			var ilength = aPseudoEvents.length;
			var oPseudo = null;
			for(var i=0; i<ilength; i++){
				oPseudo = jQuery.sap.PseudoEvents[aPseudoEvents[i]];
				if(oPseudo.aTypes
						&& jQuery.inArray(this.type, oPseudo.aTypes) > -1
						&& oPseudo.fnCheck
						&& oPseudo.fnCheck(this)){
					aPseudoTypes.push(oPseudo.sName);
				}
			}
		}

		this.getPseudoTypes = function(){return aPseudoTypes.slice();};

		return aPseudoTypes.slice();
	};

	/**
	 * Checks whether this instance of {@link jQuery.Event} is of the given <code>sType</code> pseudo type.
	 * @param {string} sType The name of the pseudo type this event should be checked for.
	 * @returns {boolean} <code>true</code> if this instance of jQuery.Event is of the given sType, <code>false</code> otherwise.
	 * @public
	 */
	jQuery.Event.prototype.isPseudoType = function(sType) {
		var aPseudoTypes = this.getPseudoTypes();
		if ( sType ) {
			return jQuery.inArray(sType, aPseudoTypes) > -1;
		} else {
			return aPseudoTypes.length > 0;
		}
	};


	/*
	 * store reference to original preventDefault method
	 */
	var _preventDefault = jQuery.Event.prototype.preventDefault;
	/*
	 * and introduce some keyCode fixing for IE...
	 * this e.g. suppresses the address-field drop down opening in case of sapshow (i.e. F4) in ComboBoxes
	 */
	jQuery.Event.prototype.preventDefault = function() {
		_preventDefault.apply(this, arguments);

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		if ( e.keyCode != 0 ) {
			try { // Sometimes setting keycode results in "Access Denied"
				if(!jQuery.browser.mozilla) {
					e.keyCode = 0;
				}
			} catch(ex) {}
		}

	};


	/**
	 * Binds all events for listening with the given callback function
	 * @param {function} fnCallback Callback function
	 * @public
	 */
	jQuery.sap.bindAnyEvent = function bindAnyEvent(fnCallback) {
		if (fnCallback) {
			jQuery(document).bind(jQuery.sap.ControlEvents.join(" "), fnCallback);
		}
	};

	/**
	 * Unbinds all events for listening with the given callback function
	 * @param {function} fnCallback Callback function
	 * @public
	 */
	jQuery.sap.unbindAnyEvent = function unbindAnyEvent(fnCallback) {
		if (fnCallback) {
			jQuery(document).unbind(jQuery.sap.ControlEvents.join(" "), fnCallback);
		}
	};

	/**
	 * Checks a given mouseover or mouseout event whether it is
	 * equivalent to a mouseenter or mousleave event regarding the given DOM reference.
	 * @param {jQuery.Event} oEvent
	 * @param {element} oDomRef
	 * @public
	 */
	jQuery.sap.checkMouseEnterOrLeave = function checkMouseEnterOrLeave(oEvent, oDomRef) {
		if(oEvent.type != "mouseover" && oEvent.type != "mouseout") {
			return false;
		}

		var isMouseEnterLeave = false;
		var element = oDomRef;
		var parent = oEvent.relatedTarget;
		try {
			while ( parent && parent !== element ) {
				parent = parent.parentNode;
			}
			if ( parent !== element ) {
				isMouseEnterLeave = true;
			}
		} catch(e) { }

		return isMouseEnterLeave;
	};

	/**
	 * Constructor for a jQuery.Event object.<br/>
	 * @see "http://www.jquery.com" and "http://api.jquery.com/category/events/event-object/".
	 * 
	 * @class Check the jQuery.Event class documentation available under "http://www.jquery.com"<br/>
	 * and "http://api.jquery.com/category/events/event-object/" for details.
	 *
	 * @name jQuery.Event
	 * @public
	 */

	/**
	 * Returns OffsetX of Event. In jQuery there is a bug. In IE the value is in offsetX, in FF in layerX
	 * @returns offsetX
	 * @public
	 */
	jQuery.Event.prototype.getOffsetX = function() {

		if (this.type == 'click'){
			if (this.offsetX){
				return this.offsetX;
			}
			if (this.layerX){
				return this.layerX;
			}
		}
		// nothing defined -> offset = 0
		return 0;
	};

	/**
	 * Returns OffsetY of Event. In jQuery there is a bug. in IE the value is in offsetY, in FF in layerY
	 * @returns offsetY
	 * @public
	 */
	jQuery.Event.prototype.getOffsetY = function() {

		if (this.type == 'click'){
			if (this.offsetY){
				return this.offsetY;
			}
			if (this.layerY){
				return this.layerY;
			}
		}
		// nothing defined -> offset = 0
		return 0;
	};

}());

}; // end of jquery.sap.events

if ( !jQuery.sap.isDeclared('jquery.sap.properties') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides access to Java-like properties files
jQuery.sap.declare("jquery.sap.properties");


(function() {

	// Javadoc for private inner class "Properties" - this list of comments is intentional!
	/**
	 * @interface  Represents a list of properties (key/value pairs).
	 *
	 * Each key and its corresponding value in the property list is a string.
	 * Values are unicode escaped \ue0012.
	 * Keys are case-sensitive and only alpha-numeric characters with a leading character are allowed.
	 *
	 * Use {@link jQuery.sap.properties} to create an instance of jQuery.sap.util.Properties.
	 *
	 * The getProperty method is used to retrieve a value from the list.
	 * The setProperty method is used to store or change a property in the list.
	 * Additionally, the getKeys method can be used to retrieve an array of all keys that are
	 * currently in the list.
	 *
	 * @author SAP AG
	 * @version 1.2.0
	 * @since 0.9.0
	 * @name jQuery.sap.util.Properties
	 * @public
	 */
	/**
	 * Returns the value of a given key. Optionally, a given default value is returned if the requested key is not in the list.
	 * @param {string} sKey The key of the property
	 * @param {string} [sDefaultValue] Optional, the default value if the requested key is not in the list.
	 * @return {string} The value of a given key. The default value (if given) is returned if the requested key is not in the list.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.getProperty
	 */
	/**
	 * Returns an array of all keys in the property list.
	 * @return {array} All keys in the property list.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.getKeys
	 */
	/**
	 * Adds or changes a given key to/in the list.
	 * @param {string} sKey The key of the property
	 * @param {string} sValue The value for the key with unicode encoding.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.setProperty
	 */
	/**
	 * Creates and returns a clone of the property list.
	 * @return {jQuery.sap.util.Properties} A clone of the property list
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.clone
	 */

	/*
	 * Implements jQuery.sap.util.Properties
	 */
	var Properties = function() {
		this.mProperties = {};
		this.aKeys = [];
	};

	Properties.prototype = {};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.getProperty
	 */
	Properties.prototype.getProperty = function(sKey, sDefaultValue) {
		var sValue = this.mProperties[sKey];
		if (typeof(sValue)=="string") {
			return sValue;
		}
		else if(sDefaultValue) {
			return sDefaultValue;
		}
		return "";
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.getKeys
	 */
	Properties.prototype.getKeys = function() {
		return this.aKeys;
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.setProperty
	 */
	Properties.prototype.setProperty = function(sKey, sValue) {
		if (typeof(sValue) != "string") {
			return;

		}		if (typeof(this.mProperties[sKey])!="string") {
			this.aKeys.push(sKey);
		}
		this.mProperties[sKey] = sValue;
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.clone
	 */
	Properties.prototype.clone = function() {
		var oClone = new Properties();
		oClone.mProperties = jQuery.extend({}, this.mProperties);
		oClone.aKeys = jQuery.merge([], this.aKeys);
		return oClone;
	};

	/*
	 * Saves the property list to a given URL using a POST request.
	 */
	//sap.ui.resource.Properties.prototype.save = function(sUrl) {
	//	return jQuery.sap.syncPost(sUrl, this.mProperties);
	//};

	/*
	 * Parses the given text sText and sets the properties
	 * in the properties object oProp accordingly.
	 * @param {string} sText the text to parse
	 * @param oProp the properties object to fill
	 * @private
	 */
	function parse(sText, oProp) {
		oProp.mProperties = {};
		oProp.aKeys = [];

		var aLines = sText.split(/\r\n|\r|\n/);
		for (var i = 0; i < aLines.length; i++) {
			var sLine = aLines[i];
			sLine = sLine.replace(/^\s+/g,"");
			//empty line
			if (sLine == "") {
				continue;
			}
			//comment line
			if (sLine.indexOf("#") == 0 || sLine.indexOf("!") == 0) {
				continue;
			}
			while (sLine.lastIndexOf("\\") == sLine.length-1) {
				sLine = sLine.substring(0,sLine.length-1);
				//read lines ahead
				i++;
				var sNewLine = aLines[i].replace(/^\s+/g,"");
				if (sNewLine == "" || sNewLine.indexOf("#") == 0 || sNewLine.indexOf("!") == 0) { //empty lines and comments in the next line break
					break;
				}
				sLine += sNewLine;
			}
			var iSeperatorPos1 = sLine.indexOf("="),
				iSeperatorPos2 = sLine.indexOf(":"),
				iSeperatorPos = 0;
			if ((iSeperatorPos1 < iSeperatorPos2 && iSeperatorPos1 > -1) || iSeperatorPos2 == -1) {
				iSeperatorPos = iSeperatorPos1;
			} else {
				iSeperatorPos = iSeperatorPos2;
			}
			if (iSeperatorPos == -1) {
				continue;
			}
			var sKey = sLine.substring(0,iSeperatorPos).replace(/^\s+|\s+$/g, "");
			oProp.aKeys.push(sKey);
			var sValue = "";
			sValue = sLine.substring(iSeperatorPos+1).replace(/^\s+|\s+$/g, "");
			if (sValue.indexOf("\\") >= 0) {
				sValue = eval("\"" + sValue.replace(/"/g,"\\\"") + "\"");
			}
			oProp.mProperties[sKey] = sValue;
		}
	}

	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.Properties}.
	 *
	 * If option 'url' is passed, immediately a load request for the given target is triggered.
	 * A property file that is loaded can contain comments with a leading ! or #.
	 * The loaded property list does not contain any comments.
	 *
	 * <b>Example for loading a property file:</b>
	 * <pre>
	 *  jQuery.sap.properties({url : "../myProperty.properties"});
	 * </pre>
	 *
	 * <b>Example for creating an empty properties instance:</b>
	 * <pre>
	 *  jQuery.sap.properties();
	 * </pre>
	 *
	 * <b>Examples for getting and setting properties:</b>
	 * <pre>
	 *	var oProperties = jQuery.sap.properties();
	 *	oProperties.setProperty("KEY_1","Test Key");
	 *	var sValue1 = oProperties.getProperty("KEY_1");
	 *	var sValue2 = oProperties.getProperty("KEY_2","Default");
	 * </pre>
	 *
	 * @public
	 * @param {object} [mParams] Parameters used to initialize the property list
	 * @param {string} [mParams.url] The URL to the .properties file which should be loaded.
	 * @return {jQuery.sap.util.Properties} A new property list instance
	 */
	jQuery.sap.properties = function properties(mParams) {
		var oProp = new Properties();
		mParams = jQuery.extend({url: undefined}, mParams);
		if (typeof(mParams.url) == "string"){
			var sText = jQuery.sap.syncGetText(mParams.url, null, undefined);
			if (typeof(sText) == "string") {
				parse(sText, oProp);
			}
		}
		return oProp;
	};

}());

}; // end of jquery.sap.properties

if ( !jQuery.sap.isDeclared('jquery.sap.resources') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides access to Java-like resource bundles in properties file format
jQuery.sap.declare("jquery.sap.resources");


(function() {

	// Javadoc for private inner class "Bundle" - this list of comments is intentional!
	/**
	 * @interface  Contains locale-specific texts.
	 *
	 * If you need a locale-specific text within your application, you can use the
	 * resource bundle to load the locale-specific file from the server and access
	 * the texts of it.
	 *
	 * Use {@link jQuery.sap.resources} to create an instance of jQuery.sap.util.ResourceBundle.
	 * There you have to specify the URL to the base .properties file of a bundle 
     * (.properties without any locale information, e.g. "mybundle.properties"), and optionally
	 * a locale. The locale is defined as a string of the language and an optional country code
	 * separated by underscore (e.g. "en_GB" or "fr"). If no locale is passed, the default
	 * locale is "en".
	 *
	 * With the getText() method of the resource bundle, a locale-specific string value
	 * for a given key will be returned.
	 *
	 * With the given locale, the ResourceBundle requests the locale-specific properties file
	 * (e.g. "mybundle_fr_FR.properties").
	 * If no file is found for the locale "fr_FR", the fall back is requested. The fall back is the 
	 * language code without any specific country code, in this case "fr".
	 * The same is true if the getText() method did not find a string value for a given key.
	 * If no language-specific file is found the English file, it is requested with locale "en".
	 * If also the English file is not present, the file without language and country code is requested.
	 * This is the file that is originally used as URL parameter.
	 *
	 * Exception: Fallback for "zh_HK" is "zh_TW" before zh.
	 *
	 * @author SAP AG
	 * @version 1.2.0
	 * @since 0.9.0
	 * @name jQuery.sap.util.ResourceBundle
	 * @public
	 */
	/**
	 * Returns a locale-specific string value for the given key sKey.
	 * @param {string} sKey
	 * @param {string[]} [aArgs] List of parameters which should replace the place holders "{n}" (n is the index) in the found locale-specific string value.
	 * @return {string} The value belonging to the key, if found; otherwise the key itself.
	 *
	 * @function
	 * @name jQuery.sap.util.ResourceBundle.prototype.getText
	 */


	/**
	 * A regular expression that describes language codes according to BCP-47.
	 * @see BCP47 "Tags for Identifying Languages" (http://www.ietf.org/rfc/bcp/bcp47.txt)
	 * 
	 * The regular expression only covers the "normal language tag" part of BCP-47 and thereof
	 * only the sub tags "language", "script", "region" and "variant".
	 * 
	 * ABNF notation:  ((2*3A*3(-3A))/4A/5*8A)[-4A][-(2A/3D)]*(-(5*8A/D*3M))
	 * 
	 * The matching groups are
	 *  0=all
	 *  1=language (shortest ISO639 code | 4digits (reserved) | registered language sub tags)
	 *  2=script (4 letters)
	 *  3=region (2letter language or 3 digits)
	 *  4=variants (separated by '-')
	 * 
	 */
	
	var rlocale=/^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?(?:-((?:[A-Z]{5,8}|(?:[0-9][0-9A-Z]{3}))(?:-[A-Z]{5,8}|(?:[0-9][0-9A-Z]{3}))*))?(-|$)/i;

	/**
	 * Helper to normalize the given locale (in BCP-47 syntax) to the java.util.Locale format.
	 * @return {string} Normalized locale or undefined if the locale can't be normalized
	 */
	function normalize(sLocale) {
		if ( !sLocale && typeof sLocale === 'string' ) {
			return '';
		}
		var m = rlocale.exec(sLocale.replace(/_/g, '-'));
		if ( m ) {
			return m[1].toLowerCase() + (m[3] ? "_" + m[3].toUpperCase() + (m[4] ? "_" + m[4].replace("-","_") : "") : "");
		}
	}
	
	/*
	 * Implements jQuery.sap.util.ResourceBundle
	 */
	var Bundle = function(sUrl, sLocale){
		//first fallback is english if no locale is given
		//TODO: If the browsers allow to access the users language preference this should be the fallback
		if(typeof(sLocale) != "string") {
			sLocale = "en";
		}
		this.sUrl = sUrl;
		//declare list of property files that are loaded
		this.aPropertyFiles = [];
		this.aLocales = [];
		//load the most specific property file
		load(this, normalize(sLocale));
	};

	Bundle.prototype = {};

	/*
	 * Implements jQuery.sap.util.ResourceBundle.prototype.getText
	 */
	Bundle.prototype.getText = function(sKey, aArgs){
		var sValue = null;
		//loop over all loaded property files and return the value for the key if any
		for(var i=0; i<this.aPropertyFiles.length; i++){
			sValue = this.aPropertyFiles[i].getProperty(sKey);
			if(sValue) {
				break;
			}
		}

		//value for this key was not found in the currently loaded property files,
		//load the fallback locales
		if(!sValue){
			var sTempLocale = this.aLocales[0];
			while(sTempLocale.length > 0){
				if(sTempLocale == "zh_HK"){
					sTempLocale = "zh_TW";
				}else{
					if(sTempLocale.length > 2){
						sTempLocale = sTempLocale.substring(0,2);
					}else if(sTempLocale != "en"){
						sTempLocale = "en";
					}else{
						sTempLocale = "";
					}
				}

				var oProperties = load(this, sTempLocale);
				if(oProperties == null) {
					continue;
				}

				//check whether the key is included in the newly loaded property file
				sValue = oProperties.getProperty(sKey);
				if (sValue) {
					break;
				}
			}
		}

		if(!sValue){
			return sKey;
		}

		if(!aArgs){
			return sValue;
		}

		for(var index=0; index<aArgs.length; index++){
			sValue = sValue.replace("{"+index+"}", aArgs[index]);
		}

		return sValue;
	};

	/*
	 * If a .properties file for the given locale is not loaded yet
	 * in the given bundle, this method loads the .properties file and
	 * adds it to the bundle.
	 * @param {string} sLocale the text to parse
	 * @param oBundle the resource bundle to extend
	 * @return The newly loaded properties or <code>null</code>
	 *         when the properties for the given locale already loaded.
	 * @private
	 */
	function load(oBundle, sLocale) {
		if(jQuery.inArray(sLocale, oBundle.aLocales) == -1){
			var sTempUrl = oBundle.sUrl;
			if(sLocale) {
				sTempUrl = sTempUrl.replace(".properties","_" + sLocale + ".properties");
			}
			var props = jQuery.sap.properties({url : sTempUrl});
			oBundle.aPropertyFiles.push(props);
			oBundle.aLocales.push(sLocale);
			return props;
		}
		return null;
	}

	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.ResourceBundle}
	 * using the given URL and locale to determine what to load.
	 *
	 * @public
	 * @param {object} [mParams] Parameters used to initialize the resource bundle
	 * @param {string} [mParams.url=""] The URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
	 * @param {string} [mParams.locale="en"] Optional string of the language and an optional country code separated by underscore (e.g. "en_GB" or "fr")
	 * @return {jQuery.sap.util.ResourceBundle} A new resource bundle instance
	 */
	jQuery.sap.resources = function resources(mParams) {
		mParams = jQuery.extend({url: "", locale: undefined}, mParams);
		var oBundle = new Bundle(mParams.url, mParams.locale);
		return oBundle;
	};

}());

}; // end of jquery.sap.resources




if ( !jQuery.sap.isDeclared('sap.ui.core.Configuration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.Configuration
jQuery.sap.declare("sap.ui.core.Configuration");


/**
 * Creates a new Configuration object.
 *
 * @class Collects and stores the configuration of the current environment.
 *
 * The Configuration is initialized once when the {@link sap.ui.core.Core} is created.
 * There are different ways to set the environment configuration (in ascending priority):
 * <ol>
 * <li>System defined defaults
 * <li>Server wide defaults, read from /sap-ui-config.json
 * <li>Properties of the global configuration object window["sap-ui-config"]
 * <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag
 * <li>Individual data-sap-ui-xyz attributes of the bootstrap tag
 * <li>Using URL parameters
 * <li>Setters in this Configuration object (only for some parameters)
 * </ol>
 *
 * That is, attributes of the DOM reference override the system defaults, URL parameters
 * override the DOM attributes (where empty URL parameters set the parameter back to its
 * system default). Calling setters at runtime will override any previous settings
 * calculated during object creation.
 *
 * The naming convention for parameters is:
 * <ul>
 * <li>in the URL : sap-ui-<i>PARAMETER-NAME</i>="value"
 * <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME</i>="value"
 * </ul>
 * where <i>PARAMETER-NAME</i> is the name of the parameter in lower case.
 *
 * Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.
 *
 * @extends sap.ui.base.Object
 * @author Frank Weigel (Martin Schaus)
 * @constructor
 * @public
 */
sap.ui.core.Configuration = function() {

	// definition of supported settings
	var M_SETTINGS = {
		"theme"           : { type : "string",   defaultValue : "base" },
		"language"        : { type : "string",   defaultValue : navigator.language || navigator.browserLanguage || navigator.userLanguage },
		// "timezone"      : "UTC",
		"accessibility"   : { type : "boolean",  defaultValue : true },
		"animation"       : { type : "boolean",  defaultValue : true },
		"rtl"             : { type : "boolean",  defaultValue : false },
		"debug"           : { type : "boolean",  defaultValue : false },
		"noConflict"      : { type : "boolean",  defaultValue : false,     noUrl:true },
		"noDuplicateIds"  : { type : "boolean",  defaultValue : true },
		"trace"           : { type : "boolean",  defaultValue : false,     noUrl:true },
		"modules"         : { type : "string[]", defaultValue : [],        noUrl:true },
		"areas"           : { type : "string[]", defaultValue : null,      noUrl:true },
		// "libs"			  : { type : "string[]", defaultValue : [],        noUrl:true }, deprecated, handled below
		"onInit"          : { type : "code",     defaultValue : undefined, noUrl:true },
		"uidPrefix"       : { type : "string",   defaultValue : "__",      noUrl:true },
		"ignoreUrlParams" : { type : "boolean",  defaultValue : false,     noUrl:true },
		"weinreServer"	  : { type : "string",   defaultValue : "",	       noUrl:true },
		"weinreId"		  : { type : "string",   defaultValue : "" },
		"xx-loadAllMode"  : { type : "boolean",  defaultValue : false,     noUrl:true },
		"xx-preload"      : { type : "string",   defaultValue : '',        noUrl:true },
		"xx-test-mobile"   : { type : "boolean",  defaultValue : false }
		
	};

	/* Object that carries the real configuration data */
	var config = this;

	function setValue(sName, sValue) {
		if ( typeof sValue === "undefined" || sValue === null ) {
			return;
		}
		switch(M_SETTINGS[sName].type) {
		case "boolean":
			if ( typeof sValue === "string" ) {
				if (M_SETTINGS[sName].defaultValue) {
					config[sName] = sValue.toLowerCase() != "false";
				} else {
					config[sName] = sValue.toLowerCase() === "true" || sValue.toLowerCase() === "x";
				}
			} else {
				// boolean etc.
				config[sName] = !!sValue;
			}
			break;
		case "string":
			config[sName] = "" + sValue; // enforce string
			break;
		case "code":
			config[sName] = typeof sValue === "function" ? sValue : "" + sValue;
			break;
		case "string[]":
			if ( jQuery.isArray(sValue) ) {
				config[sName] = sValue;
			} else if ( typeof sValue === "string" ) {
				config[sName] = jQuery.map(sValue.split(/[ ,;]/), function($) { return jQuery.trim($); });
			} else {
				throw new Error("unsupported value");
			}
			break;
		default:
			throw new Error("illegal state");
		}
	}
 
	// 1. collect the defaults
	for (var n in M_SETTINGS ) {
		config[n] = M_SETTINGS[n].defaultValue;
	}

	// 2. read server wide sapui5 configuration
	var sUrl = "/sap-ui-config.json"; // TODO: make configurable
	var oResponse = jQuery.sap.sjax({url:sUrl});
	if (oResponse.success) {
		var oServerCfg = {};
		if (typeof oResponse.data == "string") {
			try {
				oServerCfg = jQuery.parseJSON(oResponse.data);
			} catch(ex) {
				jQuery.sap.log.warning("Error when parsing the JSON configuration content from " + sUrl + " : " + ex);
			}
		} else {
			oServerCfg = oResponse.data;
		}
		for (var n in M_SETTINGS) {
			if (oServerCfg[n]) {
				setValue(n, oServerCfg[n]);
			}
		}
	}
	
	// 3.-5. apply settings from global config object (already merged with script tag attributes)
	var oCfg = window["sap-ui-config"] || {};
	oCfg.oninit = oCfg.oninit || oCfg["evt-oninit"];
	for (var n in M_SETTINGS) {
		setValue(n, oCfg[n.toLowerCase()]);
	}
	// if libs are configured, convert them to modules and prepend them to the existing modules list
	if ( oCfg.libs ) {
		config.modules = jQuery.map(oCfg.libs.split(","), function($) { return jQuery.trim($)+".library"; }).concat(config.modules);
	}

	// 6. apply the settings from the url (only if not blocked by app configuration)
	if ( !config.ignoreUrlParams ) {
		var sUrlPrefix = "sap-ui-";
		var oUriParams = jQuery.sap.getUriParameters();
		for (var n in M_SETTINGS) {
			if ( M_SETTINGS[n].noUrl ) {
				continue;
			}
			var sValue = oUriParams.get(sUrlPrefix + n);
			if (sValue === "") {
				//empty URL parameters set the parameter back to its system default
				config[n] = M_SETTINGS[n].defaultValue;
			} else {
				//sets the value (null or empty value ignored)
				setValue(n, sValue);
			}
		}
	}

	for (var n in M_SETTINGS) {
		if ( config[n] !== M_SETTINGS[n].defaultValue ) {
			jQuery.sap.log.info("  " + n + " = " + config[n]);
		}
	}
};

sap.ui.core.Configuration.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

sap.ui.base.Object.defineClass("sap.ui.core.Configuration", {
	baseType : "sap.ui.base.Object",
	publicMethods : ["getTheme", /*"setTheme", */"getLanguage", "getAccessibility", "getAnimation", "getApplication", "getRTL", "getDebug", "getNoDuplicateIds", "getUIDPrefix", "getWeinreServer", "getWeinreId"]
});

/**
 * Returns the theme name
 * @return {string} the theme name
 * @public
 */
sap.ui.core.Configuration.prototype.getTheme = function () {
	return this.theme;
};

/**
 * Allows setting the theme name
 * @param {string} sTheme the theme name
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Configuration.prototype.setTheme = function (sTheme) {
	this.theme = sTheme;
	return this;
};

/**
 * Returns the language string with language and country code
 * @return {string} the language string with language and country code
 * @public
 */
sap.ui.core.Configuration.prototype.getLanguage = function () {
	return this.language;
};

/**
 * Returns whether the accessibility mode is used or not
 * @return {boolean} whether the accessibility mode is used or not
 * @public
 */
sap.ui.core.Configuration.prototype.getAccessibility = function () {
	return this.accessibility;
};

/**
 * Returns whether the animations are globally used
 * @return {boolean} whether the animations are globally used
 * @public
 */
sap.ui.core.Configuration.prototype.getAnimation = function () {
	return this.animation;
};

/**
 * Returns whether the page uses the rtl test direction
 * @return {boolean} whether the page uses the rtl test direction
 * @public
 */
sap.ui.core.Configuration.prototype.getRTL = function () {
	return this.rtl;
};

/**
 * Returns whether the page runs in debug mode
 * @return {boolean} whether the page runs in debug mode
 * @public
 */
sap.ui.core.Configuration.prototype.getDebug = function () {
	return this.debug;
};

/**
 * Returns whether there should be an exception on any duplicate element IDs
 * @return {boolean} whether there should be an exception on any duplicate element IDs
 * @public
 */
sap.ui.core.Configuration.prototype.getNoDuplicateIds = function () {
	return this.noDuplicateIds;
};

/**
 * Whether a trace view should be shown or not.
 * Has only an effect when the sap-ui-debug module has been loaded
 * either by explicitly loading it or by setting the 'debug' option to true.
 * @return {boolean} whether a trace view should be shown
 */
sap.ui.core.Configuration.prototype.getTrace = function () {
	return this.trace;
};

/**
 * Prefix to be used for automatically generated control IDs.
 * Default is a double underscore "__".
 *
 * @returns {string} the prefix to be used
 * @public
 */
sap.ui.core.Configuration.prototype.getUIDPrefix = function() {
	return this.uidPrefix;
};

/**
 * WEINRE server URL
 *
 * @returns {string} the base URL of the WEINRE server
 * @public
 */
sap.ui.core.Configuration.prototype.getWeinreServer = function() {
	return this.weinreServer;
};

/**
 * WEINRE session ID
 *
 * @returns {string} the ID to use for the WEINRE server
 * @public
 */
sap.ui.core.Configuration.prototype.getWeinreId = function() {
	return this.weinreId;
};
}; // end of sap.ui.core.Configuration

if ( !jQuery.sap.isDeclared('sap.ui.core.Control') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides base class sap.ui.core.Control for all controls
jQuery.sap.declare("sap.ui.core.Control");

//jQuery.sap.require("sap.ui.core.RenderManager"); // cyclic

/**
 * Creates and initializes a new control with the given <code>sId</code> and settings.
 *
 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
 * argument.
 *
 * @param {string} [sId] optional id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new control
 * @public
 *
 * @class Base Class for Controls.
 * @extends sap.ui.core.Element
 * @abstract
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.2.0
 */
sap.ui.core.Control = function(sId, mSettings) {

	// TODO initialization should happen in init
	// but many of the existing controls don't call super.init()
	// As a workaround I moved the initialization of bAllowTextSelection here
	// so that it doesn't overwrite settings in init() (e.g. ListBox)
	this.bAllowTextSelection = true;

	sap.ui.core.Element.apply(this,arguments);
	this.bOutput = this.getDomRef() != null; // whether this control has already produced output
};

// chain the prototypes
sap.ui.core.Control.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe class Control.
 */
sap.ui.core.Element.defineClass("sap.ui.core.Control", {
	"abstract" : true,
	baseType : "sap.ui.core.Element",
	publicMethods: ["placeAt", "attachBrowserEvent", "detachBrowserEvent"],
	library: "sap.ui.core",
	properties : {},
	aggregations : {},
	associations : {},
	events : {}
});

/*
 * Override clone() to be able to clone additional internal state
 * which is not stored in properties or aggregations.
 */
sap.ui.core.Control.prototype.clone = function() {
	var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);

	if ( this.aBindParameters ) {
		for(var i=0, l=this.aBindParameters.length; i<l; i++) {
			var aParams = this.aBindParameters[i];
			oClone.attachBrowserEvent(aParams.sEventType, aParams.fnHandler, aParams.oListener !== this ? aParams.oListener : undefined);
		}
	}
	oClone.bAllowTextSelection = this.bAllowTextSelection;
	return oClone;
};

// must appear after clone() method and metamodel definition

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.core.Control.prototype);


/**
 * Checks whether the control is still active (part of the active DOM)
 *
 * @return {boolean} whether the control is still in the active DOM
 * @private
 */
sap.ui.core.Control.prototype.isActive = function() {
	return jQuery.sap.domById(this.sId) != null;
};

/**
 * Triggers rerendering of this element and its children.
 *
 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
 * potentially result in rerendering of the whole sub tree.
 * @protected
 */
sap.ui.core.Control.prototype.invalidate = function(oOrigin) {
	var oUIArea;
	if ( this.bOutput && (oUIArea = this.getUIArea()) ) {
		// if this control has been rendered before (bOutput)
		// and if it is contained in an UIArea (!!oUIArea)
		// then control re-rendering can be used (see UIArea.rerender() for details)
		//
		// The check for bOutput is necessary as the control
		// re-rendering needs to identify the previous rendering results.
		// Otherwise it wouldn't be able to replace them.
		oUIArea.addInvalidatedControl(this);
	} else {
		// else we bubble up the hierarchy
		var oParent = this.getParent();
		if (oParent && (
				this.bOutput /* && !this.getUIArea() */ ||
				/* !this.bOutput && */ !(this.getVisible && this.getVisible() === false))) {
			
			// Note: the two comments in the condition above show additional conditions
			//       that help to understand the logic. As they are always fulfilled,
			//       they have been omitted for better performance.
			//
			// If this control has a parent but either
			//  - has produced output before ('this.bOutput') but is not part of an UIArea (!this.getUIArea())
			//  - or if it didn't produce output (!this.bOutput') before and is/became visible
			// then invalidate the parent to request re-rendering
			//
			// The first commented condition is always true, otherwise the initial if condition
			// in this method would have been met. The second one must be true as well because of the
			// short evaluation logic of JavaScript. When bOutput is true the second half of the Or won't be processed.
			
			oParent.invalidate(this);
		}
	}
};

/**
 * Tries to replace its DOM reference by re-rendering.
 * @protected
 */
sap.ui.core.Control.prototype.rerender = function() {
	sap.ui.core.UIArea.rerenderControl(this);
};

/**
 * Defines whether the user can select text inside this control.
 * Defaults to <code>true</code> as long as this method has not been called.
 *
 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
 * be set to:
 * <pre>
 *   -moz-user-select: none;
 * </pre>
 * in order to prevent text selection.
 *
 * @param {boolean} whether to allow text selection or not
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.allowTextSelection = function(bAllow) {
	this.bAllowTextSelection = bAllow;
	return this;
};

/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 *    .myRedTextButton {
 *       color: red;
 *    }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * 
 * @name sap.ui.core.Control.prototype.addStyleClass
 * @function
 *
 * @param {string} sStyleClass the CSS class name to be added
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */

/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 *
 * @name sap.ui.core.Control.prototype.removeStyleClass
 * @function
 * 
 * @param {string} sStyleClass the style to be removed
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */

/**
 * Returns true if the given style class string is valid and if this control has this style class set
 * via a previous call to addStyleClass().
 * 
 * @name sap.ui.core.Control.prototype.hasStyleClass
 * @function
 * 
 * @param {string} sStyleClass the style to check for
 * @type boolean
 * @return whether the given style has been set before
 * @public
 */


/**
 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
 * DOM element replacements caused by re-rendering.
 *
 * IMPORTANT:
 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
 * E.g. when working with a sap.ui.commons.Button, always use the Button's "press" event, not the native "click" event, because
 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
 *
 * In the event handler, "this" refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
 * be done. E.g. use Control.addStyleClass() instead if the modification is of visual nature.
 *
 * Use detachBrowserEvent() to remove the event handler(s) again.
 *
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] A function to execute each time the event is triggered.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.attachBrowserEvent = function(sEventType, fnHandler, oListener) {
	if (sEventType && (typeof(sEventType) === "string")) { // do nothing if the first parameter is empty or not a string
		if (fnHandler && typeof(fnHandler) === "function") {   // also do nothing if the second parameter is not a function
			// store the parameters for bind()
			if (!this.aBindParameters) {
				this.aBindParameters = [];
			}
			oListener = oListener || this;

			// FWE jQuery.proxy can't be used as it breaks our contract when used with same function but different listeners
			var fnProxy=function() { fnHandler.apply(oListener, arguments); };
			
			this.aBindParameters.push({
				sEventType: sEventType,
				fnHandler: fnHandler,
				oListener: oListener,
				fnProxy : fnProxy
			});

			// if control is rendered, directly call bind()
			this.$().bind(sEventType, fnProxy);
		}
	}

	return this;
};


/**
 * This method is used to remove event handlers which have been previously attached using sap.ui.core.Control.attachBrowserEvent().
 *
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] The function that is to be no longer executed.
 * @public
 */
sap.ui.core.Control.prototype.detachBrowserEvent = function(sEventType, fnHandler, oListener) {
	if (sEventType && (typeof(sEventType) === "string")) { // do nothing if the first parameter is empty or not a string
		if (fnHandler && typeof(fnHandler) === "function") {   // also do nothing if the second parameter is not a function
			var $ = this.$(),i,oParamSet;
			oListener=oListener || this;
			
			// remove the bind parameters from the stored array
			if (this.aBindParameters) {
				for (i = this.aBindParameters.length - 1; i >= 0; i--) {
					oParamSet = this.aBindParameters[i];
					if ( oParamSet.sEventType === sEventType  && oParamSet.fnHandler === fnHandler  &&  oParamSet.oListener === oListener ) {
						this.aBindParameters.splice(i, 1);
						// if control is rendered, directly call unbind()
						$.unbind(sEventType, oParamSet.fnProxy);
					}
				}
			}

		}
	}

	return this;
};



/**
 * Returns a renderer for this control instance.
 *
 * It is retrieved using the RenderManager as done during rendering.
 *
 * @return {object} a Renderer suitable for this Control instance.
 * @protected
 */
sap.ui.core.Control.prototype.getRenderer = function () {
	//TODO introduce caching?
	return sap.ui.core.RenderManager.getRenderer(this);
};

/**
 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
 * position (<code>oPosition</code>).
 *
 * First it is checked whether <code>oRef</code> is a container element / control (has a
 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
 * of such an container.
 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
 * (if it does not yet exist implicitly a new UIArea is created),
 *
 * The <code>oPosition</code> can be one of the following:
 *
 *  - "first": The control is added as the first element to the container.
 *  - "last": The control is added as the last element to the container (default).
 *  - "only": All existing children of the container are removed (not destroyed!) and the control is added as new child.
 *  - index: The control is added at the specified index to the container.
 *
 * @param {String|DomRef|sap.ui.core.Control} oRef container into which the control should be put
 * @param {String|int} oPosition Describes the position where the control should be put into the container
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.placeAt = function(oRef, oPosition) {
	var oCore = sap.ui.getCore();
	if(oCore.isInitialized()){
		// core already initialized, do it now

		// 1st try to resolve the oRef as a Container control
		var oContainer = oRef;
		if(typeof oContainer === "string"){
			oContainer = oCore.byId(oRef);
		}
		// if no container control is found use the corresponding UIArea
		var bIsUIArea = false;
		if(!(oContainer instanceof sap.ui.core.Element)) {
			oContainer = oCore.createUIArea(oRef);
			bIsUIArea = true;
		}

		if(!oContainer) {
			return;
		}

		if(!bIsUIArea){
			var oContentAggInfo = oContainer.getMetadata().getAllAggregations()["content"];
			var bContainerSupportsPlaceAt = true;
			if(oContentAggInfo){
				if(!oContentAggInfo.multiple || oContentAggInfo.type != "sap.ui.core.Control"){
					bContainerSupportsPlaceAt = false;
				}
			}else{
				//Temporary workaround for sap.ui.commons.AbsoluteLayout to enable placeAt even when no content aggregation is available. TODO: Find a proper solution
				if(!oContainer.addContent || !oContainer.insertContent || !oContainer.removeAllContent) {
					bContainerSupportsPlaceAt = false;
				}
			}
			if(!bContainerSupportsPlaceAt) {
				jQuery.sap.log.warning("placeAt cannot be processed because container "+oContainer+" does not have an aggregation 'content'.");
				return;
			}
		}

		if(typeof oPosition === "number"){
			oContainer.insertContent(this, oPosition);
		}else{
			oPosition = oPosition || "last"; //"last" is default
			switch(oPosition){
				case "last":
					oContainer.addContent(this);
					break;
				case "first":
					oContainer.insertContent(this, 0);
					break;
				case "only":
					oContainer.removeAllContent();
					oContainer.addContent(this);
					break;
				default:
					jQuery.sap.log.warning("Position "+oPosition+" is not supported for function placeAt.");
			}
		}
	}else{
		// core not yet initialized, defer execution
		var that = this;
		oCore.attachInitEvent(function () {
			that.placeAt(oRef, oPosition);
		});
	}
	return this;
};

/*
 * Event handling
 */

/**
 * Cancels user text selection if text selection is disabled for this control.
 * See the {@link #allowTextSelection} method.
 * @private
 */
sap.ui.core.Control.prototype.onselectstart = function (oBrowserEvent) {
	if(!this.bAllowTextSelection) {
		oBrowserEvent.preventDefault();
		oBrowserEvent.stopPropagation();
	}
};

/*
 * Rendering
 */

/**
 * Function is called before the rendering of the control is started.<br/>
 * Override this hook as you please.
 *
 * @function
 * @name sap.ui.core.Control.prototype.onBeforeRendering
 * @public
 */
//sap.ui.core.Control.prototype.onBeforeRendering = function() {};

/**
 * Function is called when the rendering of the control is completed. <br/>
 * Override this hook as you please.
 *
 * @function
 * @name sap.ui.core.Control.prototype.onAfterRendering
 * @public
 */
//sap.ui.core.Control.prototype.onAfterRendering = function() {};

/**
 * Gets the ID used for the "labelFor" attribute of the label
 * By default its the control ID
 * @public
 */
sap.ui.core.Control.prototype.getIdForLabel = function () {
	return this.getId();
};

}; // end of sap.ui.core.Control

if ( !jQuery.sap.isDeclared('sap.ui.core.FocusHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.FocusHandler
jQuery.sap.declare("sap.ui.core.FocusHandler");




(function(){

	/**
	 * Constructs an instance of a sap.ui.core.FocusHandler.
	 * Keeps track of the focused element.
	 *
	 * @class sap.ui.core.FocusHandler
	 * @param oRootRef e.g. document.body
	 */
	sap.ui.core.FocusHandler = function(oRootRef, oCore) {
		sap.ui.base.Object.apply(this);

		this.oCore = oCore;

		// keep track of element currently in focus
		this.oCurrent = null;
		// keep track of the element previously had the focus
		this.oLast = null;
		// buffer the focus/blur events for correct order
		this.aEventQueue = [];

		this.fEventHandler = jQuery.proxy(this.onEvent, this);
		this.fDestroyHandler = jQuery.proxy(this.destroy, this);

		// initialize event handling
		if(oRootRef.addEventListener && !jQuery.browser.msie){ //FF, Safari
			oRootRef.addEventListener("focus", this.fEventHandler, true);
			oRootRef.addEventListener("blur", this.fEventHandler, true);
		}else{ //IE
			jQuery(oRootRef).bind("activate", this.fEventHandler);
			jQuery(oRootRef).bind("deactivate", this.fEventHandler);
		}
		jQuery.sap.log.debug("FocusHandler setup on Root " + oRootRef.type + (oRootRef.id?": " + oRootRef.id:""), null, "sap.ui.core.FocusHandler");

		// TODO: Or should we be destroyed by the Core?
		jQuery(window).bind("unload", {"oRootRef": oRootRef}, this.fDestroyHandler);
	};

	sap.ui.core.FocusHandler.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
	sap.ui.base.Object.defineClass("sap.ui.core.FocusHandler", {
		baseType : "sap.ui.base.Object"
	});

	/**
	 * Returns the Id of the control/element currently in focus.
	 * @return {string} the Id of the control/element currently in focus.
	 * @public
	 */
	sap.ui.core.FocusHandler.prototype.getCurrentFocusedControlId = function(){
		return this.oCurrent;
	};

	/**
	 * Destroy method of the Focus Handler.
	 * It unregisters the event handlers.
	 *
	 * @param {jQuery.Event} event the event that initiated the destruction of the FocusHandler
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.destroy = function(event) {
		var oRootRef = event.data.oRootRef;
		if(oRootRef){
			if(oRootRef.removeEventListener && !jQuery.browser.msie){ //FF, Safari
				oRootRef.removeEventListener("focus", this.fEventHandler, true);
				oRootRef.removeEventListener("blur", this.fEventHandler, true);
			}else{ //IE
				jQuery(oRootRef).unbind("activate", this.fEventHandler);
				jQuery(oRootRef).unbind("deactivate", this.fEventHandler);
			}
		}
		jQuery(window).unbind("unload", this.fDestroyHandler);
		this.oCore = null;
	};

	/**
	 * Handles the focus/blur events.
	 *
	 * @param oRootRef e.g. document.body
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onEvent = function(oBrowserEvent){
		var oEvent = jQuery.event.fix(oBrowserEvent);

		jQuery.sap.log.debug("Event "+oEvent.type+" reached Focus Handler (target: "+oEvent.target+(oEvent.target ? oEvent.target.id : "")+")", null, "sap.ui.core.FocusHandler");

		var type = (oEvent.type == "focus" || oEvent.type == "focusin" || oEvent.type == "activate") ? "focus" : "blur";
		this.aEventQueue.push({type:type, controlId: getControlIdForDOM(oEvent.target)});
		if(this.aEventQueue.length == 1) {
			this.processEvent();
		}
	};

	/**
	 * Processes the focus/blur events in the event queue.
	 *
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.processEvent = function(){
		var oEvent = this.aEventQueue[0];
		if(!oEvent) {
			return;
		}
		if(oEvent.type == "focus"){
			this.onfocusEvent(oEvent.controlId);
		}else if(oEvent.type == "blur"){
			this.onblurEvent(oEvent.controlId);
		}
		this.aEventQueue.shift();
		if(this.aEventQueue.length > 0) {
			this.processEvent();
		}
	};

	/**
	 * Processes the focus event taken from the event queue.
	 *
	 * @param sControlId Id of the event related control
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onfocusEvent = function(sControlId){
		this.oCurrent = sControlId;
		triggerFocusleave(this.oLast, sControlId, this.oCore);
		this.oLast = null;
	};

	/**
	 * Processes the blur event taken from the event queue.
	 *
	 * @param sControlId Id of the event related control
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onblurEvent = function(sControlId){
		this.oLast = sControlId;
		this.oCurrent = null;
		jQuery.sap.delayedCall(0, this, "checkForLostFocus");
	};

	/**
	 * Checks for lost focus and provides events in case of losing the focus.
	 * Called in delayed manner from {@link sap.ui.core.FocusHandler#onblurEvent}.
	 *
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.checkForLostFocus = function(){
		if(this.oCurrent == null && this.oLast != null){
			triggerFocusleave(this.oLast, null, this.oCore);
		}
		this.oLast = null;
	};


	//***********************************************************
	// Utility / convenience
	//***********************************************************

	/**
	 * Returns the id of the control/element to which the given DOM
	 * reference belongs to or <code>null</code> if no such
	 * control/element exists.
	 *
	 * @param {DOMObject} oDOM the DOM reference
	 * @private
	 */
	var getControlIdForDOM = function(oDOM){
		var sId = jQuery(oDOM).closest("[data-sap-ui]").attr("id");
		if(sId) {
			return sId;
		}
		return null;
	};

	/**
	 * Calls the onsapfocusleave function on the control with id sControlId
	 * with the information about the given related control.
	 *
	 * @param {string} sControlId
	 * @param {string} sRelatedControlId
	 * @private
	 */
	var triggerFocusleave = function(sControlId, sRelatedControlId, oCore){
		var oControl = sControlId ? sap.ui.getCore().byId(sControlId) : null;
		if(oControl){
			var oRelatedControl = sRelatedControlId ? sap.ui.getCore().byId(sRelatedControlId) : null;
			var oEvent = jQuery.Event("sapfocusleave");
			oEvent.target = oControl.getDomRef();
			oEvent.relatedControlId = oRelatedControl ? oRelatedControl.getId() : null;
			oEvent.relatedControlFocusInfo = oRelatedControl ? oRelatedControl.getFocusInfo() : null;
			//TODO: Cleanup the popup! The following is shit
			var oControlUIArea = oControl.getUIArea();
			var oUiArea = null;
			if(oControlUIArea){
				oUiArea = oCore.getUIArea(oControlUIArea.getId());
			}else{
				var oPopupUIAreaDomRef = sap.ui.getCore().getStaticAreaRef();
				if(jQuery.sap.containsOrEquals(oPopupUIAreaDomRef, oEvent.target)){
					oUiArea = oCore.getUIArea(oPopupUIAreaDomRef.id);
				}
			}
			if(oUiArea) {
				oUiArea._handleEvent(oEvent);
			}
		}
	};

	/**
	 * Checks if the passed DOM reference is nested in the active DOM of the document
	 * @param {DOMNode} oDomRef The new active element
	 * @private
	 * @type boolean
	 * @returns whether the passed DOM reference is nested in the active DOM of the document
	 */
	/*function isInActiveDom(oDomRef) {
		jQuery.sap.assert(oDomRef != null);
		var oCurrDomRef = oDomRef;
		while(oCurrDomRef) {
			if(oCurrDomRef === document) return true;
			oCurrDomRef = oCurrDomRef.parentNode;
		}
		return false;
	};*/

}());
}; // end of sap.ui.core.FocusHandler


if ( !jQuery.sap.isDeclared('sap.ui.core.RenderManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the render manager sap.ui.core.RenderManager
jQuery.sap.declare("sap.ui.core.RenderManager");

if ( !jQuery.sap.isDeclared('jquery.sap.encoder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides encoding functions for JavaScript.
jQuery.sap.declare("jquery.sap.encoder", false);

(function(){

	/*
	 * Encoding according to the Secure Programming Guide
	 * https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide
	 */

	/**
	 * Create hex and pad to length
	 * @private
	 */
	function hex(iChar, iLength) {
		var sHex = iChar.toString(16);
		if (iLength) {
			while (iLength > sHex.length) {
				sHex = "0" + sHex;
			}
		}
		return sHex;
	}

	/**
	 * RegExp and escape function for HTML escaping
	 */
	var rHtml = /[\x00-\x08\x11\x12\x14-\x2b\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g,
		rHtmlReplace = /[\x00-\x08\x11\x12\x14-\x1f\x7f-\x9f]/,
		mHtmlLookup = {
			"<": "&lt;",
			">": "&gt;",
			"&": "&amp;",
			"\"": "&quot;"
		};

	var fHtml = function(sChar) {
		var sEncoded = mHtmlLookup[sChar];
		if (!sEncoded) {
			if (rHtmlReplace.test(sChar)) {
				sEncoded = "&#xfffd;";
			}
			else {
				sEncoded = "&#x" + hex(sChar.charCodeAt(0)) + ";";
			}
			mHtmlLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into HTML content/attribute
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.encodeHTML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * Encode the string for inclusion into XML content/attribute
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.encodeXML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * Encode the string for inclusion into HTML content/attribute.
	 * Old name "escapeHTML" kept for backward compatibility
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @deprecated
	 */
	jQuery.sap.escapeHTML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * RegExp and escape function for JS escaping
	 */
	var rJS = /[\x00-\x2b\x2d\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g,
		mJSLookup = {};

	var fJS = function(sChar) {
		var sEncoded = mJSLookup[sChar];
		if (!sEncoded) {
			var iChar = sChar.charCodeAt(0);
			if (iChar < 256) {
				sEncoded = "\\x" + hex(iChar, 2);
			}
			else {
				sEncoded = "\\u" + hex(iChar, 4);
			}
			mJSLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into a JS string literal
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.encodeJS = function(sString) {
		return sString.replace(rJS, fJS);
	};

	/**
	 * Encode the string for inclusion into a JS string literal.
	 * Old name "escapeJS" kept for backward compatibility
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.escapeJS = function(sString) {
		return sString.replace(rJS, fJS);
	};

	/**
	 * RegExp and escape function for URL escaping
	 */
	var rURL = /[\x00-\x29\x2b\x2c\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g,
		mURLLookup = {};

	var fURL = function(sChar) {
		var sEncoded = mURLLookup[sChar];
		if (!sEncoded) {
			var iChar = sChar.charCodeAt(0);
			if (iChar < 128) {
				sEncoded = "%" + hex(iChar, 2);
			}
			else if (iChar < 2048) {
				sEncoded = "%" + hex((iChar >> 6) | 192, 2) +
						   "%" + hex((iChar & 63) | 128, 2);
			}
			else {
				sEncoded = "%" + hex((iChar >> 12) | 224, 2) +
						   "%" + hex(((iChar >> 6) & 63) | 128, 2) +
						   "%" + hex((iChar & 63) | 128, 2);
			}
			mURLLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into an URL parameter
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.encodeURL = function(sString) {
		return sString.replace(rURL, fURL);
	};

	/**
	 * RegExp and escape function for CSS escaping
	 */
	var rCSS = /[\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xff\u2028\u2029][0-9A-Fa-f]?/g;

	var fCSS = function(sChar) {
		var iChar = sChar.charCodeAt(0);
		if (sChar.length == 1) {
			return "\\" + hex(iChar);
		}
		else {
			return "\\" + hex(iChar) + " " + sChar.substr(1);
		}
	};

	/**
	 * Encode the string for inclusion into CSS string literals or identifiers
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 */
	jQuery.sap.encodeCSS = function(sString) {
		return sString.replace(rCSS, fCSS);
	};


}());
}; // end of jquery.sap.encoder




/**
 * Creates an instance of the RenderManager.
 *
 * @class RenderManager that will take care for rendering Controls.
 *
 * The RenderManager will be available from the sap.ui.core.Core instance (available via <code>sap.ui.getCore()</code>).<br/>It
 * can be used to render Controls and Control-Trees.
 *
 * The convention for renderers belonging to some controls is the following:
 * <ul>
 * <li>for a Control e.g. <code>sap.ui.controls.InputField</code> there shall be </li>
 * <li>a renderer named <code>sap.ui.controls.InputFieldRenderer</code></li>
 * <ul>
 *
 * @see sap.ui.core.Core
 * @see sap.ui.getCore()
 *
 * @extends sap.ui.base.Object
 * @author Jens Pflueger *
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.core.RenderManager = function() {
	this.aBuffer = [];
	this.aRenderedControls = [];
	this.aStyleStack = [{}];
};
sap.ui.core.RenderManager.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

(function() {

	var aCommonMethods = ["renderControl", "write", "writeEscaped", "translate", "writeAcceleratorKey", "writeControlData",
						  "writeElementData", "writeAttribute", "writeAttributeEscaped", "addClass", "writeClasses",
						  "addStyle", "writeStyles", "writeAccessibilityState",
						  "getConfiguration", "getHTML"];
	var aNonRendererMethods = ["render", "flush", "destroy"];

	sap.ui.base.Object.defineClass("sap.ui.core.RenderManager", {
		baseType : "sap.ui.base.Object",
		publicMethods : aCommonMethods.concat(aNonRendererMethods)
	});

	/**
	 * Returns the public interface of the RenderManager which can be used by Renderers.
	 *
	 * @return {sap.ui.base.Interface} the interface
	 * @private
	 */
	sap.ui.core.RenderManager.prototype.getRendererInterface = function() {
		// see sap.ui.base.Object.getInterface for reference
		var oInterface = new sap.ui.base.Interface(this, aCommonMethods);
		this.getRendererInterface = jQuery.sap.getter(oInterface);
		return oInterface;
	};

}());


/**
 * Cleans up the resources associated with this instance.
 * After the instance has been destroyed, it must not be used anymore.
 * Applications should call this function if they don't need the instance any longer.
 *
 * @public
 */
sap.ui.core.RenderManager.prototype.destroy = function() {
	this.aBuffer = [];
	this.aRenderedControls = [];
	this.aStyleStack = [{}];
};

/**
 * Returns the configuration object
 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
 * @return {sap.ui.core.Configuration} the configuration object
 * @public
 */
sap.ui.core.RenderManager.prototype.getConfiguration = function() {
	return sap.ui.getCore().getConfiguration();
};

/**
 * Returns the renderer class for a given control instance
 *
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @return the renderer class for a given control instance
 * @public
 */
sap.ui.core.RenderManager.prototype.getRenderer = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");
	return sap.ui.core.RenderManager.getRenderer(oControl);
};

/**
 * Turns the given control into its HTML representation and appends it to the
 * rendering buffer.
 *
 * If the given control is undefined or null, then nothing is rendered.
 *
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @public
 */
sap.ui.core.RenderManager.prototype.renderControl = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");
	// don't render a NOTHING
	if (!oControl) {
		return;
	}

	//Remember the current buffer size to check later whether the control produced output
	var iBufferLength = this.aBuffer.length;

	var oControlStyles = {};
	if (oControl.aCustomStyleClasses && oControl.aCustomStyleClasses.length > 0) {
		oControlStyles.aCustomStyleClasses = oControl.aCustomStyleClasses; //cleared again in the writeClasses function
	}

	this.aStyleStack.push(oControlStyles);

	var oRenderer = this.getRenderer(oControl);

	// notify the behavior object that the controls will be detached from DOM
	if (oControl.bOutput) {
		var oEvent = jQuery.Event("BeforeRendering");
		// store the element on the event (aligned with jQuery syntax)
		oEvent.srcControl = oControl;
		oControl._handleEvent(oEvent);
	}

	// unbind any generically bound browser event handlers
	var aBindings = oControl.aBindParameters;
	if (aBindings && aBindings.length > 0) { // if we have stored bind calls...
		var jDomRef = jQuery(oControl.getDomRef());
		if (jDomRef && jDomRef[0]) { // ...and we have a DomRef
			for (var i = 0; i < aBindings.length; i++) {
				var oParams = aBindings[i];
				jDomRef.unbind(oParams.sEventType, oParams.fnProxy);
			}
		}
	}

	//Render the control using the RenderManager interface
	oRenderer.render(this.getRendererInterface(), oControl);

	this.aStyleStack.pop();

	//Remember the rendered control
	this.aRenderedControls.push(oControl);

	//Check whether the control has produced HTML
	oControl.bOutput = this.aBuffer.length != iBufferLength;
};

/**
 * Renders the given {@link sap.ui.core.Control} and finally returns
 * the content of the rendering buffer.
 * Ensures the buffer is restored to the state before calling this method.
 *
 * @param {sap.ui.core.Control}
 *            oControl the Control whose HTML should be returned.
 * @return {string} the resulting HTML of the provided control
 * @deprecated Since version 0.15.0. Use <code>flush()</code> instead render content outside the rendering phase.
 * @public
 */
sap.ui.core.RenderManager.prototype.getHTML = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");

	var tmp = this.aBuffer;
	var aResult = this.aBuffer = [];
	this.renderControl(oControl);
	this.aBuffer = tmp;
	return aResult.join("");
};

(function() {

	//Returns the information of the current focus
	var storeCurrentFocus = function(){
		var oCore = sap.ui.getCore();

		// Store current focus
		var sFocusedControlId = oCore.getCurrentFocusedControlId(),
			oFocusInfo = null,
			oFocusedDomRef = null;

		if(sFocusedControlId){
			var oFocusedControl = oCore.getElementById(sFocusedControlId);
			if(oFocusedControl){
				oFocusInfo = oFocusedControl.getFocusInfo();
				oFocusedDomRef = oFocusedControl.getFocusDomRef();
			}
		}

		return {focusedControlId: sFocusedControlId, focusInfo: oFocusInfo, focusDomRef: oFocusedDomRef};
	};

	//Does everthing needed after the rendering (restore focus, calling "onAfterRendering", initialize event binding)
	var finalizeRendering = function(oRM, aRenderedControls, oStoredFocusInfo){
		// Notify the behavior object that the controls will be attached to DOM
		for (var i = 0, size = aRenderedControls.length; i < size; i++) {
			var oControl = aRenderedControls[i];
			if (oControl.bOutput) {
				var oEvent = jQuery.Event("AfterRendering");
				// store the element on the event (aligned with jQuery syntax)
				oEvent.srcControl = oControl;
				oControl._handleEvent(oEvent);
			}
		}

		//finally restore focus
		try{
			if (oStoredFocusInfo && oStoredFocusInfo.focusedControlId) {
				var oFocusedControl = sap.ui.getCore().getElementById(oStoredFocusInfo.focusedControlId);
				if (oFocusedControl && oFocusedControl.getFocusDomRef() != oStoredFocusInfo.focusDomRef ) {
					oFocusedControl.applyFocusInfo(oStoredFocusInfo.focusInfo);
				}
			}
		}catch(e){
			jQuery.sap.log.warning("Problems while restore focus after rendering: " + e, null, oRM);
		}

		// Re-bind any generically bound browser event handlers (must happen after restoring focus to avoid focus event)
		for (var i = 0, size = aRenderedControls.length; i < size; i++) {
			var oControl = aRenderedControls[i],
				aBindings = oControl.aBindParameters;
				
			if (aBindings && aBindings.length > 0) { // if we have stored bind calls...
				var jDomRef = jQuery(oControl.getDomRef());
				if (jDomRef && jDomRef[0]) { // ...and we have a DomRef - TODO: this check should not be required right after rendering...
					for (var j = 0; j < aBindings.length; j++) {
						var oParams = aBindings[j];
						jDomRef.bind(oParams.sEventType, oParams.fnProxy);
					}
				}
			}
		}
	};


	/**
	 * Renders the content of the rendering buffer into the provided DOMNode.
	 *
	 * This function must not be called within control renderers.
	 *
	 * Usage:
	 * <pre>
	 * // Create a new instance of the RenderManager
	 * var rm = sap.ui.getCore().createRenderManager();
	 * // Use the writer API to fill the buffers
	 * rm.write(...);
	 * rm.renderControl(oControl);
	 * rm.write(...);
	 * ...
	 * //Finally flush the buffer into the provided DOM node (The current content is removed)
	 * rm.flush(oDomNode);
	 * // If the instance is not needed anymore, destroy it
	 * rm.destroy();
	 * </pre>
	 *
	 * @param {DOMNode} oTargetDomNode The node in the dom where the buffer should be flushed into.
	 * @param {boolean} bDoNotPreserve flag, whether to not preserve (true) the content or to preserve it (false).
	 * @param {boolean} bAppend flag, whether to append (true) or replace (false) the buffer of the target dom node.
	 * @public
	 */
	sap.ui.core.RenderManager.prototype.flush = function(oTargetDomNode, bDoNotPreserve, bAppend) {
		jQuery.sap.assert((typeof oTargetDomNode === "object") && (oTargetDomNode.ownerDocument == document), "oTargetDomNode must be a DOM element");
		if(this.bRendererMode){
			jQuery.sap.log.info("Flush must not be called from control renderers. Call ignored.", null, this);
			return;
		}

		// preserve HTML content before flushing HTML into target DOM node
		if (!bDoNotPreserve) {
			sap.ui.core.RenderManager.preserveContent(oTargetDomNode);
		}

		var oStoredFocusInfo = storeCurrentFocus();

		var vHTML = this._prepareHTML5(this.aBuffer.join("")); // Note: string might have been converted to a node list!

		if(this._fPutIntoDom){
			//Case when render function was called
			this._fPutIntoDom(oTargetDomNode, vHTML);
		}else{
			for(var i=0; i<this.aRenderedControls.length; i++){
				//TODO It would be enough to loop over the controls for which renderControl was initially called but for this
				//we have to manage an additional array. Rethink about later.
				var oldDomNode = this.aRenderedControls[i].getDomRef();
				if(oldDomNode && !sap.ui.core.RenderManager.isPreservedContent(oldDomNode)) {
					jQuery(oldDomNode).remove();
				}
			}
			if (!bAppend) {
				jQuery(oTargetDomNode).html(vHTML); // Put the HTML into the given DOM Node
			} else {
				jQuery(oTargetDomNode).append(vHTML); // Append the HTML into the given DOM Node
			}
		}

		if(jQuery.browser.safari && parseFloat(jQuery.browser.version) < 534.5){
			// in safari we must wait until the CSS are loaded and applied (fixed in Safari 5.1)
			var jDummy = jQuery("<div id=\"sap-ui-DummyCSSCheck\" class=\"sapUiCssCheck\" style=\"visibility:hidden;position:absolute;height:100px;width:100px;top:-150px;\"></div>");
			jQuery(document.body).append(jDummy);
			this._finalizeIfReady(this.aRenderedControls, oStoredFocusInfo);
		}else{
			finalizeRendering(this, this.aRenderedControls, oStoredFocusInfo);
		}

		this.aRenderedControls = [];
		this.aBuffer = [];
		this.aStyleStack = [{}];
	};

	/**
	 * Safari applies CSS files only after it finished rendering. So logic based on CSS property onAferRendering
	 * goes wrong. Therefore we have to wait until the CSS is applied before we call onAfterRendering.
	 * This is made using a dummy DIV and checking the border defined in Core global.CSS
	 * We repeat the check until it's OK and the call the onAfterRendering
	 * @private
	 */
	sap.ui.core.RenderManager.prototype._finalizeIfReady = function(aRenderedControls, oStoredFocusInfo){
		if((jQuery.sap.domById("sap-ui-DummyCSSCheck").offsetHeight - jQuery.sap.domById("sap-ui-DummyCSSCheck").clientHeight) == 20 ){
			//CSS loaded - fine
			jQuery.sap.byId("sap-ui-DummyCSSCheck").remove();
			finalizeRendering(this, aRenderedControls, oStoredFocusInfo);
		}else{
			//CSS still not loaded - try again
			jQuery.sap.delayedCall(1, this, "_finalizeIfReady", [aRenderedControls, oStoredFocusInfo]);
		}
	};

	/**
	 * Renders the given control to the provided DOMNode.
	 *
	 * If to control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
	 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
	 * to the provided DOMNode.
	 *
	 * This function must not be called within control renderers.
	 *
	 * @param {sap.ui.core.Control} oControl the Control that should be rendered.
	 * @param {DOMNode} oTargetDomNode The node in the dom where the result of the rendering should be inserted.
	 * @public
	 */
	sap.ui.core.RenderManager.prototype.render = function(oControl, oTargetDomNode) {
		jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a control");
		jQuery.sap.assert(typeof oTargetDomNode === "object" && oTargetDomNode.ownerDocument == document, "oTargetDomNode must be a DOM element");
		if(this.bRendererMode){
			jQuery.sap.log.info("Render must not be called from control renderers. Call ignored.", null, this);
			return;
		}

		if(jQuery.browser.safari){
			// for Safari CSS bug append CSS class at the end
			if (!sap.ui.core.RenderManager.initialized) {
				jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.ui.core.", "/") + "SafariCheck.css");
			}
			sap.ui.core.RenderManager.initialized = true;
		}

		// Reset the buffer before rendering
		this.aBuffer = [];

		// Retrieve the markup (the rendering phase)
		this.renderControl(oControl);

		// FIXME: MULTIPLE ROOTS
		// The implementation of this method doesn't support multiple roots for a control.
		// Affects all places where 'oldDomNode' is used
		this._fPutIntoDom = function(oTarget, vHTML){

			if(oControl && oTargetDomNode){

				var oldDomNode = oControl.getDomRef();
				if ( sap.ui.core.RenderManager.isPreservedContent(oldDomNode) ) {
					// use placeholder instead
					oldDomNode = jQuery.sap.byId("sap-ui-dummy-" + oControl.getId())[0] || oldDomNode;
				}
				var bNewTarget = oldDomNode && oldDomNode.parentNode != oTargetDomNode;

				var fAppend = function(){
					var jTarget = jQuery(oTargetDomNode);
					if(oTargetDomNode.innerHTML == ""){
						jTarget.html(vHTML);
					}else{
						jTarget.append(vHTML);
					}
				};

				if(bNewTarget){ //Control was rendered already and is now moved to different location

					if(!sap.ui.core.RenderManager.isPreservedContent(oldDomNode)) {
						jQuery(oldDomNode).remove();
					}

					if(vHTML) {
						fAppend();
					}

				}else{ //Control either rendered initially or rerendered at the same location

					if(vHTML){
						if(oldDomNode){
							jQuery(oldDomNode).replaceWith(vHTML);
						}else{
							fAppend();
						}
					}else{
						jQuery(oldDomNode).remove();
					}

				}

			}

		};

		this.flush(oTargetDomNode, true);

		this._fPutIntoDom = null;
	};

}());


//#################################################################################################
// Static Methods
//#################################################################################################

/**
 * Returns the renderer class for a given control instance
 *
 * @param {sap.ui.core.Control}
 *            oControl the control that should be rendered
 * @type function
 * @return the renderer class for a given control instance
 * @static
 * @public
 */
sap.ui.core.RenderManager.getRenderer = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a control");
	var sRendererName = null;

	if(oControl.getMetadata().getRendererName) {
		sRendererName = oControl.getMetadata().getRendererName();
	}

	// fall back to generic renderer name
	if(!sRendererName){
		var aNameSegments = oControl.getMetadata().getName().split(".");
		aNameSegments[aNameSegments.length - 1] += "Renderer";
		sRendererName = aNameSegments.join(".");
	}

	// check if renderer class exists already
	var fnRendererClass = jQuery.sap.getObject(sRendererName);
	if(fnRendererClass) {
		return fnRendererClass;
	}

	// if not, try to load a module with the same name
	jQuery.sap.require(sRendererName);
	return jQuery.sap.getObject(sRendererName);
};

/**
 * Makes the HTML5 tags known to older IE browsers; to be called once before rendering happens.
 *
 * Applies two workarounds
 * <ol>
 * <li>1. "SHIV": create each HTML5 tag once in the window document to make IE8 aware of it
 * <li>2. "INNERSHIV": IE8 fails when using innerHTML in conjunction with HTML5 tags for a DOM element __not__ part of the document.
 *        _prepareHTML5 uses a dummy DOM element to convert the innerHTML to a set of DOM nodes first.
 * </ol>
 * @static
 * @private
 */
//Called once by the Core during initialization
sap.ui.core.RenderManager.initHTML5Support = function() {
	if(jQuery.browser.msie && (jQuery.browser.version === "8.0" || jQuery.browser.version === "7.0")){ // IE8 is recognized as "7.0"!!

		var aTags = [ "article", "aside", "audio", "canvas", "command", "datalist", "details",
				"figcaption", "figure", "footer", "header", "hgroup", "keygen", "mark", "meter", "nav",
				"output", "progress", "rp", "rt", "ruby", "section", "source", "summary", "time", "video", "wbr" ];

		// 1. SHIV, create each HTML5 element once to make IE8 recognize it
		// see http://paulirish.com/2011/the-history-of-the-html5-shiv/ for an explanation
		for (var i = 0; i < aTags.length; i++) {
			document.createElement(aTags[i]);
		}

		// 2. INNERSHIV, converts string with HTML5 tags to DOM nodes before using them with jQuery
		// see http://jdbartlett.com/innershiv/ for an explanation of the matter
		var rhtmltags = new RegExp("<(" + aTags.join("|") + ")(\\s|>)", "i");
		var d = null;
		sap.ui.core.RenderManager.prototype._prepareHTML5 = function(sHTML) {
			if ( sHTML && sHTML.match(rhtmltags) ) {
				if(!d){
					d = document.createElement('div');
					d.style.display = 'none';
				}

				var e = d.cloneNode(true);
				document.body.appendChild(e);
				e.innerHTML = sHTML.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
				document.body.removeChild(e);

				return e.childNodes;
			}
			return sHTML;
		};

		jQuery.sap.log.info("IE8 HTML5 support activated");

	}else{

		jQuery.sap.log.info("no IE8 HTML5 support required");

		sap.ui.core.RenderManager.prototype._prepareHTML5 = function(sHTML) {
			return sHTML;
		};
	}
};


//#################################################################################################
// Methods for preserving HTML content
//#################################################################################################

(function() {

	var ID_PRESERVE_AREA = "sap-ui-preserve";
	var ATTR_PRESERVE_MARKER = "data-sap-ui-preserve";

	function getPreserveArea() {
		var $preserve = jQuery("#"+ID_PRESERVE_AREA);
		if ($preserve.length === 0){
			$preserve = jQuery("<DIV/>",{role:"application",id:ID_PRESERVE_AREA}).
				addClass("sapUiHidden").
				appendTo(document.body);
		}
		return $preserve;
	}

	/**
	 * Collects descendants of the given root node that need to be preserved before the root node
	 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
	 *
	 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
	 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
	 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
	 * is set automatically. This option is used by UIAreas when they render for the first time and
	 * simplifies the handling of predefined HTML content in a web page.
	 *
	 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
	 * area in the order that they are found. So for direct siblings the order should be stable.
	 *
	 * @param {DOMNode} oRootNode to search for "to-be-preserved" nodes
	 * @param {boolean} [bPreserveRoot=false] whether to preserve the root itself
	 * @param {boolean} [bPreserveNodesWithId=false] whether to preserve nodes with an id as well
	 * @public
	 */
	sap.ui.core.RenderManager.preserveContent = function(oRootNode, bPreserveRoot, bPreserveNodesWithId) {
		jQuery.sap.assert(typeof oRootNode === "object" && oRootNode.ownerDocument == document, "oRootNode must be a DOM element");
		
		var $preserve = getPreserveArea();

		function check($candidates) {
			
			$candidates.each(function(i,candidate) {

				// don't process the preserve area
				if ( candidate.id === ID_PRESERVE_AREA ) {
					return;
				}
				
				var $candidate = jQuery(candidate);

				if ( $candidate.attr(ATTR_PRESERVE_MARKER) )  { // node is marked with the preserve marker
					// when the current node is the root node then we're doing a single control rerendering
					if ( candidate === oRootNode ) {
						var $placeholder = jQuery("<DIV/>", { id: "sap-ui-dummy-" + candidate.id}).addClass("sapUiHidden");
						$placeholder.insertBefore($candidate);
					}
					$preserve.append($candidate);
				} else if ( bPreserveNodesWithId && candidate.id ) {
					sap.ui.core.RenderManager.markPreservableContent($candidate, candidate.id);
					$preserve.append($candidate);
					return;
				}
				
				// don't dive into nested UIAreas. They are preserved together with any preserved parent (e.g. HTML control)
				if ( !$candidate.attr("data-sap-ui-area") ) {
					check($candidate.children());
				}
			});
		}

		var t0 = new Date().getTime();
		check(bPreserveRoot? jQuery(oRootNode) : jQuery(oRootNode).children());
		var t1 = new Date().getTime();
		jQuery.sap.log.debug("preserveContent took " + (t1-t0) + " ms");
	};

	/**
	 * Searches "to-be-preserved" nodes for the given control id.
	 *
	 * @param {string} sId control id to search content for.
	 * @return {jQuery} a jQuery collection representing the found content
	 * @public
	 */
	sap.ui.core.RenderManager.findPreservedContent = function(sId) {
		jQuery.sap.assert(typeof sId === "string", "sId must be a string");
		var $preserve = getPreserveArea(),
			$content = $preserve.children("[" + ATTR_PRESERVE_MARKER + "='" + sId.replace(/(:|\.)/g,'\\$1') + "']");
		return $content;
	};

	/**
	 * Marks the given content as "to-be-preserved" for a control with the given id.
	 * When later on the content has been preserved, it can be found by giving the same id.
	 *
	 * @param {jQuery} $content a jQuery collection of DOM objects to be marked
	 * @param {string} sId id of the control to associate the content with
	 */
	sap.ui.core.RenderManager.markPreservableContent = function($content, sId) {
		$content.attr(ATTR_PRESERVE_MARKER, sId);
	};

	/**
	 * Checks whether the given DOM node is part of the 'preserve' area.
	 *
	 * @param {DOMNode} oDomNode
	 * @return {boolean} whether node is part of 'preserve' area
	 * @private
	 */
	sap.ui.core.RenderManager.isPreservedContent = function(oDomNode) {
		return ( oDomNode && oDomNode.getAttribute(ATTR_PRESERVE_MARKER) && oDomNode.parentNode && oDomNode.parentNode.id == ID_PRESERVE_AREA );
	};

	/**
	 * Returns the hidden area reference belonging to this window instance.
	 *
	 * @return {DOMNode}the hidden area reference belonging to this core instance.
	 * @public
	 */
	sap.ui.core.RenderManager.getPreserveAreaRef = function() {
		return getPreserveArea()[0];
	};

}());


//#################################################################################################
// Methods for 'Buffered writer' functionality... (all public)
// i.e. used methods in render-method of Renderers
//#################################################################################################

/**
 * Write the given texts to the buffer
 * @param {string ...} sText
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.write = function(/** string */ sText /* ... */) {
	jQuery.sap.assert(typeof sText === "string", "sText must be a string");
	this.aBuffer.push.apply(this.aBuffer, arguments);
	return this;
};

/**
 * Escape text for HTML and write it to the buffer
 * @param {string} sText
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeEscaped = function(/** string */ sText) {
	jQuery.sap.assert(typeof sText === "string", "sText must be a string");
	this.aBuffer.push(jQuery.sap.escapeHTML(sText));
	return this;
};


/**
 * @deprecated Not implemented - DO NOT USE
 * @public
 */
sap.ui.core.RenderManager.prototype.translate = function(/** string */ sKey) {
	// TODO
};

/**
 * @deprecated Not implemented - DO NOT USE
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeAcceleratorKey = function() {
	/*
	if (bAlt && !bCtrl && !bArrowKey) {
		// Keyboard helper provides means for visualizing access keys.
		// keydown modifies some CSS rule for showing underlines
		// <span><u class="sapUiAccessKey">H</u>elp me</span>
		UCF_KeyboardHelper.showAccessKeys();
	}
	*/
	return this;
};

/**
 * Adds a style property to the style collection if the value is not empty or null
 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
 *
 * @param {string} sName name of the CSS property to write
 * @param {string} sValue value to write
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.addStyle = function(sName, sValue) {
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");
	if (sValue) {
		jQuery.sap.assert(typeof sValue === "string", "sValue must be a string");
		var oStyle = this.aStyleStack[this.aStyleStack.length-1];
		if (!oStyle.aStyle) {
			oStyle.aStyle = [];
		}
		oStyle.aStyle.push(sName + ":" + sValue);
	}
	return this;
};

/**
 * Writes and flushes the style collection
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeStyles = function() {
	var oStyle = this.aStyleStack[this.aStyleStack.length-1];
	if (oStyle.aStyle) {
		this.write(" style=\"" +oStyle.aStyle.join(";") +"\" ");
	}
	oStyle.aStyle = null;
	return this;
};

/**
 * Adds a class to the class collection if the name is not empty or null.
 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
 *
 * @param {string} sName name of the class to be added; null values are ignored
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.addClass = function(sName) {
	if (sName) {
		jQuery.sap.assert(typeof sName === "string", "sName must be a string");
		var oStyle = this.aStyleStack[this.aStyleStack.length-1];
		if (!oStyle.aClasses) {
			oStyle.aClasses = [];
		}
		oStyle.aClasses.push(sName);
	}
	return this;
};

/**
 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush). 
 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are 
 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
 * classes are added instead. If oElement === false, no custom style classes are added.
 * 
 * @param {sap.ui.core.Element | boolean} [oElement] an Element from which to add custom style classes (instead of adding from the control itself)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeClasses = function(oElement) {
	jQuery.sap.assert(!oElement || typeof oElement === "boolean" || oElement instanceof sap.ui.core.Element, "oElement must be empty, a boolean, or a sap.ui.core.Element");
	var oStyle = this.aStyleStack[this.aStyleStack.length-1];
	
	// Custom classes are added by default from the currently rendered control. If an oElement is given, this Element's custom style
	// classes are added instead. If oElement === false, no custom style classes are added.
	var aCustomClasses = oElement ? oElement.aCustomStyleClasses : ((oElement === false) ? [] : oStyle.aCustomStyleClasses);
	
	if (oStyle.aClasses || aCustomClasses) {
		this.write(" class=\"");
		if (oStyle.aClasses) {
			this.write(oStyle.aClasses.join(" "));
		}
		if (aCustomClasses) {
			this.write(" " + aCustomClasses.join(" "));
		}
		this.write("\" ");
	}
	if (!oElement) {
		oStyle.aCustomStyleClasses = null;
	}
	oStyle.aClasses = null;
	return this;
};

/**
 * Writes the controls data into the HTML.
 * Control Data consists at least of the id of a control
 * @param {sap.ui.core.Control} oControl the control whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeControlData = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a control");
	this.writeElementData(oControl);
	return this;
};

/**
 * Writes the elements data into the HTML.
 * Element Data consists at least of the id of a element
 * @param {sap.ui.core.Element} oElement the element whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeElementData = function(oElement) {
	jQuery.sap.assert(oElement && oElement instanceof sap.ui.core.Element, "oElement must be an Element");
	var sId = oElement.getId();
	if(sId) {
		this.writeAttribute("id", sId).writeAttribute("data-sap-ui", sId);
	}
	return this;
};

/**
 * Writes the attribute and its value into the HTML
 * @param {string} sName the name of the attribute
 * @param {string | number | boolean} sValue the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeAttribute = function(sName, value) {
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");
	jQuery.sap.assert(typeof value === "string" || typeof value === "number" || typeof value === "boolean", "value must be a string, number or boolean");
	this.write(" ", sName, "=\"", value, "\"");
	return this;
};

/**
 * Writes the attribute and its value into the HTML
 * @param sName the name of the attribute
 * @param sValue the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeAttributeEscaped = function(sName, sValue) {
	// writeAttribute asserts
	this.writeAttribute(sName, jQuery.sap.escapeHTML(sValue));
	return this;
};

/**
 * Writes the accessibility state (see ARIA spec) of the provided control into the HTML.
 *
 * @param {sap.ui.core.Control}
 *            oControl the control whose accessibility state (see ARIA spec)
 *            should be rendered
 * @param {Object}
 *            [mProps] a map of properties that should be added additionally.
 *            'aria-' will be prepended to the provided property names (passed as
 *            keys).
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @deprecated Do not use yet, prototype implementation for testing purposes.
 *             Will be moved to utility / helper class.
 */
sap.ui.core.RenderManager.prototype.writeAccessibilityState = function(oControl, mProps) {
	if(arguments.length == 1 && !(oControl instanceof sap.ui.core.Control)) {
		mProps = oControl;
		oControl = null;
	}
	var aARIAStates = [""];
	if(oControl != null) {
		var mMetaProps = oControl.getMetadata().getAllProperties();
		for(var p in mMetaProps){
			switch(p){
			case "editable":
				if(oControl.getProperty(p) === false) {
					aARIAStates.push("aria-readonly=\"true\"");
				}
				break;
			case "enabled":
				if(oControl.getProperty(p) === false) {
					aARIAStates.push("aria-disabled=\"true\"");
				}
				break;
			case "visible":
				if(oControl.getProperty(p) === false) {
					aARIAStates.push("aria-hidden=\"true\"");
				}
				break;
			case "required":
				if(oControl.getProperty(p) === true) {
					aARIAStates.push("aria-required=\"true\"");
				}
				break;
			case "selected": // E.g. Tab
				if(oControl.getProperty(p) === true) {
					aARIAStates.push("aria-selected=\"true\"");
				}
				break;
			case "checked": // E.g. CheckBox
				if(oControl.getProperty(p) === true) {
					aARIAStates.push("aria-checked=\"true\"");
				}
				break;
//			case "ARIA_and_SAPUI5_do_not_perfectly_fit_to_eachother":
//				eval("Think about what now? Food for thought: RadioButton has selected but must provide checked :(
//					  We might think about introducing some special accessbility callback in the controls (like LS does)
//					  to get those things handled... but what about generic functionality like the one above?
//					  Some kind of mapping could also be interesting, couldn't it");
//				break;
			}
		}
	}
	var aTmp = [];
	for(var p in mProps) {
		aTmp.push("aria-");
		aTmp.push(p);
		aTmp.push("=\"");
		aTmp.push(mProps[p]);
		aTmp.push("\" ");
	}
	aARIAStates.push(aTmp.join(""));

	this.write(aARIAStates.join(" "));
	return this;
};
}; // end of sap.ui.core.RenderManager

if ( !jQuery.sap.isDeclared('sap.ui.core.UIArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.UIArea
jQuery.sap.declare("sap.ui.core.UIArea");
if ( !jQuery.sap.isDeclared('jquery.sap.ui') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// A bridge between the jQuery.sap plugin and the SAPUI5 Core
jQuery.sap.declare("jquery.sap.ui", false);

//jQuery.sap.require("sap.ui.core.Core"); // cyclic

// !!!!!!!!!!!!!!!!!!!!!!!!!!
// !!     EXPERIMENTAL     !!
// !!!!!!!!!!!!!!!!!!!!!!!!!!
(function() {

	// FIXME Too tough or just right?
	if(!jQuery.sap) {
		throw "Initialisation of jQuery.sap.ui failed. jQuery.sap plugin required!";
	}
	if(!window.sap || !window.sap.ui) {
		jQuery.sap.fatal("Initialisation of jQuery.sap.ui failed. Global SAP UI namespace required!");
	}

	//ensure not to initialize twice
	if(jQuery.sap.ui) {
		return;
	}

//	/**
//	 * Root Namespace for the jQuery UI-Layer plugin provided by SAP AG.
//	 *
//	 * @version 1.2.0
//	 * @namespace
//	 * @public
//	 */
//	jQuery.sap.ui = {};

	function fUIAreaFilter(idx){
		return sap.ui.getCore().getUIArea(this.id) != null;
	}
	function fgetUIArea(idx, odomref){
		return sap.ui.getCore().getUIArea(this.id);
	}
	function fgetUIAreaOfCtrl(oCtrl, idx){
		return oCtrl.getUIArea().getInterface();
	}

	/**
	 * @public
	 * @author SAP AG
	 */
	jQuery.fn.root = function(oRootControl) {
		var tmp;
		// handle 'setRoot'
		if(oRootControl) {
			sap.ui.getCore().setRoot(this.get(0), oRootControl);
			return this;
		}
		// and 'getRoot' behavior.
		var aControls = this.control();
		if (aControls.length > 0) {
			return jQuery.map(aControls, fgetUIAreaOfCtrl);
		}

		var aUIAreas = this.uiarea();

		if (aUIAreas.length > 0) {
			// we have UIAreas
			return aUIAreas;
		}

		// create UIAreas
		this.each(function(idx){
			sap.ui.getCore().createUIArea(this);
		});
		return this;
	};

	/**
	 * @public
	 */
	jQuery.fn.uiarea = function(iIdx) {
		// UIAreas need to have IDs... so reduce to those elements first
		var aUIAreas = this.slice("[id]").filter(fUIAreaFilter).map(fgetUIArea).get();
		return typeof(iIdx) === "number"?aUIAreas[iIdx]:aUIAreas;
	};

	/**
	 * Function identifying the closest SAPUI5 Control in the given jQuery context (provided via jQuery.map method).
	 * @private
	 */
	function fgetControl() {
		// as with jQuery 1.4.3 and 1.4.4 there is a big problem here, we increase checks here
		if(!this || !this.nodeType || this.nodeType === 9) {
			return null;
		} // in this case, we are on the HTML Document and cannot do anything
		// in IE8 'closest' might fail (e.g. when the element is not in the current document tree)
		// The following line would probably also work for the 'try-catch' below but induce performance penalty in EVERY call of this method.
		// if(jQuery(document.documentElement).has(this)) {
		try{
			var sId = jQuery(this).closest("[data-sap-ui]").attr("id");
			return sId ? sap.ui.getCore().byId(sId) : null;
		} catch(e){
			// probably IE8 case where element is not in current document tree... ==> there is no current control
			return null;
		}
	}

	/**
	 * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
	 *
	 * @param {integer} [idx] optional parameter to return the control instance at the given idx's position in the array.
	 * @methodOf jQuery.prototype
	 * @returns {sap.ui.core.Control[] | sap.ui.core.Control | null} depending on the given context and idx parameter an array of controls, an instance or null.
	 * @public
	 */
	jQuery.fn.control = function(idx) {
		var aControls = this.map(fgetControl);
		if(idx === undefined || isNaN(idx)) {
			return aControls.get();
		}
		else {
			return aControls.get(idx);
		}
	};


	/**
	 * EXPERIMENTAL!!
	 * Creates a new control of the given type and places it into the first DOM object of the jQuery collection.
	 * The type string is case sensitive.
	 *
	 * @param {string} sControlType the control type (fully qualified, like "sap.ui.dev.GoogleMap"; if no package is given, the package "sap.ui.commons" is assumed)
	 * @param {string} [sId] optional id for the new control; generated automatically if no non-empty id is given
	 * @param {object} [oConfiguration] optional map/JSON-object with initial values for the new control
	 * @returns {jQuery} the given jQuery object
	 * @private
	 */
	jQuery.fn.sapui = function(sControlType, sId, oConfiguration) {

		return this.each(function() { // TODO: hack for Steffen; (point is not clear, as this adds identical controls to many DOM elements...); remove soon

			var oControl = null;
			if (this) {
				// allow omitting the package prefix because this looks less Java-like...  sap.ui.commons is the default package
				if (sControlType.indexOf(".") == -1)  {
					sControlType = "sap.ui.commons." + sControlType;
				}

				// instantiate the control
				var fnClass = jQuery.sap.getObject(sControlType);
				if (fnClass) {

					// TODO: hack for Steffen; remove later
					if(typeof oConfiguration == 'object' && typeof oConfiguration.press == 'function') {
			  oConfiguration.press = jQuery.proxy(oConfiguration.press,this);
			}

					oControl = new (fnClass)(sId, oConfiguration); // sId might actually contain oConfiguration, the Element constructor will take care of this

					// placeAt first DomRef in collection
					oControl.placeAt(this);
					// TODO: avoid the direct call to applyChanges() in favor of a delayed version that potentially bundles several changes
					//sap.ui.getCore().applyChanges();
				}
			}

		});
	};

}());
}; // end of jquery.sap.ui




/**
 * @class An area in a page that hosts a tree of UI elements.
 *
 * Provides means for event-handling, rerendering, etc.
 *
 * @extends sap.ui.base.EventProvider
 * @author Daniel Brinkmann, Martin Schaus
 * @version 1.2.0
 * @param {sap.ui.Core}
 *            oCore internal API of the <core>Core</code> that manages this UIArea
 * @param {object}
 *            [oRootNode] reference to the Dom Node that should be 'hosting' the UI Area.
 * @public
 */
sap.ui.core.UIArea = function(oCore, oRootNode) {
	if(arguments.length === 0) {
		return;
	}
	sap.ui.base.EventProvider.apply(this);

	//TODO we could get rid of oCore here, if we wanted to...
	this.oCore = oCore;
	this.bLocked = false;
	this.bInitial = true;
	this.aContentToRemove = [];
	this.oModels = {};
	this.iSuppressInvalidate = 0;

	this.mAggregations = {}; //Use the aggregation functionality of sap.ui.core.Element

	this.bNeedsRerendering = false;
	if (oRootNode != null) {
		this.setRootNode(oRootNode);
		// Figure out whether UI Area is pre-rendered (server-side JS rendering)!
		this.bNeedsRerendering = this.bNeedsRerendering && !jQuery.sap.domById(oRootNode.id + "-Init");
	}
	this.mInvalidatedControls = {};

	if(!this.bNeedsRerendering) {
		this.oRenderControl = null;
	} else {
		// Core needs to be notified about an invalid UIArea
		this.oCore.addInvalidatedUIArea(this);
	}

};
sap.ui.core.UIArea.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);
sap.ui.base.Object.defineClass("sap.ui.core.UIArea", {
		// ---- object ----
		baseType : "sap.ui.base.EventProvider",
		publicMethods : ["getId", "setRootNode", "getRootNode", "setRootControl", "getRootControl", "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", "lock", "unlock", "isLocked", "getSavedContent", "setModel", "getModel", "hasModel"]
	});

sap.ui.core.UIArea.M_EVENTS = {};

//Use the aggregation functionality of sap.ui.core.Element
sap.ui.core.UIArea.prototype.getAggregation = sap.ui.core.Element.prototype.getAggregation;
sap.ui.core.UIArea.prototype.insertAggregation = sap.ui.core.Element.prototype.insertAggregation;
sap.ui.core.UIArea.prototype.addAggregation = sap.ui.core.Element.prototype.addAggregation;
sap.ui.core.UIArea.prototype.removeAggregation = sap.ui.core.Element.prototype.removeAggregation;
sap.ui.core.UIArea.prototype.removeAllAggregation = sap.ui.core.Element.prototype.removeAllAggregation;
sap.ui.core.UIArea.prototype.indexOfAggregation = sap.ui.core.Element.prototype.indexOfAggregation;
sap.ui.core.UIArea.prototype.destroyAggregation = sap.ui.core.Element.prototype.destroyAggregation;

/**
 * Returns whether rerendering is currently suppressed on this UIArea
 * @return boolean
 * @protected
 */
sap.ui.core.UIArea.prototype.isInvalidateSuppressed = function() {
	return this.iSuppressInvalidate > 0;
};

/**
 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
 * @return {string} id of this UIArea
 * @public
 *
 * TODO what is this needed for? ID can change and getRootNode() is also there...
 * Is this part of "UI area is like an Element" contract?
 */
sap.ui.core.UIArea.prototype.getId = function() {
	return this.oRootNode ? this.oRootNode.id : null;
};

/**
 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
 *
 * @return {sap.ui.core.UIArea} this
 * @protected
 */
sap.ui.core.UIArea.prototype.getUIArea = function() {
	return this;
};

/**
 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
 * will be used as Id for this instance of <code>UIArea</code>.
 *
 * @param {object}
 *            oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
 * @public
 */
sap.ui.core.UIArea.prototype.setRootNode = function(oRootNode) {
	if(this.oRootNode === oRootNode) {
		return;
	}

	// oRootNode must either be empty or must be a DOMElement and must not be root node of some other UIArea
	jQuery.sap.assert(!oRootNode || (oRootNode.nodeType === 1 && !jQuery(oRootNode).attr("data-sap-ui-area")), "UIArea root node must be a DOMElement");

	//TODO IS there something missing
	if(this.oRootNode) {
		this._ondetach();
	}

	this.oRootNode = oRootNode;
	if ( this.getContent().length > 0 ) {
	  this.invalidate();
	}

	if(this.oRootNode) {
		// prepare eventing
		this._onattach();
	}
};

/**
 * Returns the Root Node hosting this instance of <code>UIArea</code>.
 *
 * @return {DOMNode} the Root Node hosting this instance of <code>UIArea</code>.
 * @public
 */
sap.ui.core.UIArea.prototype.getRootNode = function() {
	return this.oRootNode;
};

/**
 * Sets the root control to be displayed in this UIArea.
 *
 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
 * relationship to this UIArea will be cut off). Then the parent relationship for the new
 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
 * be marked for re-rendering.
 *
 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
 *
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oRootControl the Control that should be the Root for this <code>UIArea</code>.
 * @public
 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
 */
sap.ui.core.UIArea.prototype.setRootControl = function(oRootControl) {
	this.removeAllContent();
	this.addContent(oRootControl);
};

/**
 * Returns the content control of this <code>UIArea</code> at the specified index.
 * If no index is given the first content control is returned.
 *
 * @param {int} idx index of the control in the content of this <code>UIArea</code>
 * @return {sap.ui.core.Control} the content control of this <code>UIArea</code> at the specified index.
 * @public
 * @deprecated use function <code>getContent</code> instead
 */
sap.ui.core.UIArea.prototype.getRootControl = function(idx) {
	var aContent = this.getContent();
	if(aContent.length > 0){
		if(idx >=0 && idx < aContent.length) {
			return aContent[idx];
		}
		return aContent[0];
	}
	return null;
};

sap.ui.core.UIArea.prototype._addRemovedContent = function(oDomRef) {
	if(this.oRootNode && oDomRef) {
		this.aContentToRemove.push(oDomRef);
	}
};

/**
 * Getter for aggregation <code>content</code>.<br/>
 *
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.core.UIArea.prototype.getContent = function() {
	return this.getAggregation("content", []);
};

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *			iIndex the <code>0</code>-based index the content should be inserted at; for
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the content is inserted at
 *             the last position
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.UIArea.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code>
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.UIArea.prototype.addContent = function(oContent, _bSuppressInvalidate) {
	this.addAggregation("content", oContent, _bSuppressInvalidate);
	// TODO this remains here just to make the UX3 Shell work which doesn't invalidate properly
	if ( _bSuppressInvalidate !== true ) {
		this.invalidate();
	}
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed element or null
 * @public
 */
sap.ui.core.UIArea.prototype.removeContent = function(vContent, _bSuppressInvalidate) {
	var oContent = this.removeAggregation("content", vContent, _bSuppressInvalidate);
	if ( !_bSuppressInvalidate ) {
		var oDomRef;
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
		//this.invalidate();
	}
	return oContent;
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.core.UIArea.prototype.removeAllContent = function() {
	var aContent = this.removeAllAggregation("content");
	for(var idx=0; idx<aContent.length; idx++){
		var oDomRef;
		var oContent = aContent[idx];
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
	}
	//this.invalidate();
	return aContent;
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.core.UIArea.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.UIArea.prototype.destroyContent = function() {
	var aContent = this.getContent();
	for(var idx=0; idx<aContent.length; idx++){
		var oDomRef;
		var oContent = aContent[idx];
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
	}
	this.destroyAggregation("content");
	//this.invalidate();
	return this;
};

/**
 * Removes the given child from this UI area, where it must have been the root
 * control.
 * @see sap.ui.core.Element#_removeChild
 * @see sap.ui.core.Element#setParent
 *
 * @param {sap.ui.core.Control}
 *            oChild the child element to be removed
 * @protected
 */
sap.ui.core.UIArea.prototype._removeChild = function(oChild) {
	var idx = this.indexOfContent(oChild);
	if(idx >=0){
		this.removeContent(idx);
	}
};

/**
 * Locks this instance of UIArea.
 *
 * Rerendering and eventing will not be active as long as no
 * {@link #unlock} is called.
 *
 * @public
 */
sap.ui.core.UIArea.prototype.lock = function() {
	this.bLocked = true;
};

/**
 * Un-Locks this instance of UIArea.
 *
 * Rerendering and eventing will now be enabled again.
 *
 * @public
 */
sap.ui.core.UIArea.prototype.unlock = function() {
	if ( this.bLocked && this.bNeedsRerendering ) {
		// While being locked, we might have ignored a call to rerender()
		// Therefore notify the Core (again)
		this.oCore.addInvalidatedUIArea(this);
	}
	this.bLocked = false;
};

/**
 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
 * @type boolean
 * @return locked state
 * @public
 */
sap.ui.core.UIArea.prototype.isLocked = function () {
	return this.bLocked;
};

/**
 * Set the model for databinding
 * @param {sap.ui.model.Model} oModel
 * @param {string} [sName]
 * @public
 */
sap.ui.core.UIArea.prototype.setModel = function(oModel, sName) {
	this.oModels[sName] = oModel;
	this.updateBindings(sName);
};

/**
 * Get the model for databinding
 * @param {string} [sName]
 * @return {sap.ui.model.Model} oModel
 * @public
 */
sap.ui.core.UIArea.prototype.getModel = function(sName) {
	return this.oModels[sName] || this.oCore.getModel(sName);
};

/**
 * Check if a Model is set to the UI Area or to the Core
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.UIArea.prototype.hasModel = function() {
	if (!jQuery.isEmptyObject(this.oModels) || this.oCore.hasModel()) {
		return true;
	} else {
		return false;
	}
};

/**
 * Provide getBindingContext, as UIArea can be parent of an element.
 * Always returns null.
 *
 * @protected
 */
sap.ui.core.UIArea.prototype.getBindingContext = function(){
	return null;
};

/**
 * Method is called by the core if a model is set to the core to update/recreate all bindings
 * for the UI Areas and its contents.
 *
 * @private
 */
sap.ui.core.UIArea.prototype.updateBindings = function(sName){
	jQuery.each(this.getContent(), function (i, oElement){
		// update binding context, for primary model only
		if (!sName){oElement.updateBindingContext();}
		// if the model changes, all bindings have to be recreated (at least those to the previous model)
		oElement.updateBindings(false, sName, true);
	});
};



// ###########################################################################
// Convenience for methods
// e.g. Process Events for inner Controls
// or figure out whether control is part of this area.
// ###########################################################################

/**
 * Checks whether the control is still valid (is in the DOM)
 *
 * @return {boolean} True if the control is still in the active DOM
 * @protected
 */
sap.ui.core.UIArea.prototype.isActive = function() {
	return jQuery.sap.domById(this.getId()) != null;
};

/**
 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
 * the UIAreas content.
 * @protected
 */
sap.ui.core.UIArea.prototype.invalidate = function() {
	this.addInvalidatedControl(this);
};

/**
 * Notifies the UIArea about an just invalidated control.
 *
 * The UIArea internally decides whether to re-render just the modified
 * controls or the complete content. It also informs the Core when it
 * becomes invalid the first time.
 *
 * TODO this.oRenderControl is either NULL or THIS. change to boolean?!
 * @protected
 */
sap.ui.core.UIArea.prototype.addInvalidatedControl = function(oControl){
	if (this.oRenderControl == this) {
		return;
	}

	// inform the Core, if we are getting invalid now
	if ( !this.bNeedsRerendering ) {
		this.oCore.addInvalidatedUIArea(this);
	}

	var sId = oControl.getId();
	//check whether the control is already invalidated
	if (/*jQuery.inArray(oControl, this.getContent()) || */oControl == this ) {
		this.oRenderControl = this; //everything in this UIArea
		this.bNeedsRerendering = true;
		return;
	}
	if (this.mInvalidatedControls[sId]) {
		return;
	}
	if (!this.oRenderControl) {
		//add it to the list of controls
		this.mInvalidatedControls[sId] = oControl;
		this.bNeedsRerendering = true;
	}
};

sap.ui.core.UIArea.MAX_INVALIDATED_CHILDREN = 10000;

/**
 * TODO review and maybe refactor this complex algorithm
 * TODO documentation
 * @param force {boolean} true, if the rerendering of the UI area should be forced
 * @return {boolean} whether a redraw was necessary or not
 * @private
 */
sap.ui.core.UIArea.prototype.rerender = function(force){
	if (force) {
		this.bNeedsRerendering = true;
	}
	if ( this.bLocked || !this.bNeedsRerendering ) {
		return false;
	}

	if (this.oRenderControl == this) {
		if (this.oRootNode) {
			jQuery.sap.log.info("Rerendering of UI area: " + this.getId());

			// save old content
			sap.ui.core.RenderManager.preserveContent(this.oRootNode, /* bPreserveRoot */ false, /* bPreserveNodesWithId */ this.bInitial);
			this.bInitial = false;

			//First remove the old Dom nodes and then render the controls again
			var len = this.aContentToRemove.length;
			var oDomRef;
			for(var i=0; i<len; i++) {
				oDomRef = this.aContentToRemove[i];
				if ( oDomRef && !sap.ui.core.RenderManager.isPreservedContent(oDomRef) ) {
					jQuery(oDomRef).remove();
				}
			}
			this.aContentToRemove = [];

			var aContent = this.getContent();
			var len = aContent.length;

			var oDomRef;
			for(var i=0; i<len; i++){
				oDomRef = aContent[i].getDomRef();
				if(oDomRef && !sap.ui.core.RenderManager.isPreservedContent(oDomRef)) {
					jQuery(oDomRef).remove();
				}
			}

			for(var i=0; i<len; i++){
				this.oCore.oRenderManager.render(aContent[i], this.oRootNode, true);
			}
		} else { // cannot re-render now; wait!
			return false;
		}
	} else {
		var that = this;
		function isAncestorInvalidated(oAncestor) {
			while ( oAncestor && oAncestor !== that ) {
				if ( that.mInvalidatedControls.hasOwnProperty(oAncestor.getId()) ) {
					return true;
				}
				oAncestor = oAncestor.getParent();
			}
			return false;
		}
		for (var n in this.mInvalidatedControls) { // TODO for in skips some names in IE8!
			var oControl = this.oCore.byId(n);
			// CSN 0000834961 2011: control may have been destroyed since invalidation happened
			if ( oControl && !isAncestorInvalidated(oControl.getParent()) ) {
				oControl.rerender();
			}
		}

	}

	this.oRenderControl = null;
	this.mInvalidatedControls = {};
	this.bNeedsRerendering = false;

	return true;

};

/**
 * Rerenders the given control
 * @see sap.ui.core.Control.rerender()
 * @param oControl
 * @private
 */
sap.ui.core.UIArea.rerenderControl = function(oControl){
	var oDomRef = oControl ? oControl.getDomRef() : null;
	var oParentDomRef = oDomRef && oDomRef.parentNode; // remember parent here as preserveContent() might move the node!
	if(oParentDomRef){
		var uiArea = oControl.getUIArea();
		var rm = uiArea ? uiArea.oCore.oRenderManager : sap.ui.getCore().createRenderManager();
		jQuery.sap.log.info("Rerendering of control (using Core-RenderManager: "+(!!uiArea)+"): " + oControl.getId());
		sap.ui.core.RenderManager.preserveContent(oDomRef, /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
		rm.render(oControl, oParentDomRef);
	} else {
		jQuery.sap.log.warning("Couldn't rerender '" + oControl.getId() + "', as its DOM location couldn't be determined");
	}
};

/**
 * Handles all incoming DOM events centrally and dispatches the event to the
 * registered event handlers.
 * @param {jQuery.Event} oEvent the jQuery event object
 * @private
 */
sap.ui.core.UIArea.prototype._handleEvent = function(/**event*/oEvent) {

	// execute the registered event handlers
	var oElement = null;

	// TODO: this should be the 'lowest' SAPUI5 Control of this very
	// UIArea instance's scope -> nesting scenario
	oElement = jQuery(oEvent.target).control(0);
	if (oElement == null ||
		// in case of a Dialog the getUIArea function of the element returns
		// "null" and in case of nested UIAreas we need to ensure that the
		// UIArea is the same => BUT in case of nested UIAreas in dialogs
		// this pattern will not work!
		// TODO: May be in nested UIAreas in the UIArea is set properly and not
		//       null like for the root UI Area of the dialog!
		// TODO: In case of PopUp control it could be that the event is handled
		//       by the static area where the getUIArea check fails e.g.
		//       this happens in the MenuButton.qunit.html within the test
		//       "Menu is hidden after click on a menuitem" so in this case
		//       we have to ignore this check in case of static area where
		//       nevertheless the items are rendered invisible!
		// REMARK: IN GENERAL WE SHOULD RETHINK THE getUIArea FUNCTION
		//         BECAUSE IN CASE OF NESETED UI AREAS WE NEED TO MAKE SURE TO
		//         CHECK IF THE EVENT OCCURED WITHIN THE SPECIFIC UIAREA
		(this.getId() != "sap-ui-static" && oElement.getUIArea() != null && oElement.getUIArea() != this)) {
		return;
	}

	// store the element on the event (aligned with jQuery syntax)
	oEvent.srcControl = oElement;

	// forward the control event:
	// if the control propagation has been stopped or the default should be
	// prevented then do not forward the control event.
	this.oCore._handleControlEvent(oEvent, this.getId());

	// if the UIArea or the Core is locked then we do not dispatch
	// any event to the control => but they will still be dispatched
	// as control event afterwards!
	if (this.bLocked || this.oCore.isLocked()) {
		return;
	}

	// retrieve the pseudo event types
	var aEventTypes = [];
	if(oEvent.getPseudoTypes){
		aEventTypes = oEvent.getPseudoTypes();
	}
	aEventTypes.push(oEvent.type);

	// dispatch the event to the controls (callback methods: onXXX)
	while (oElement && oElement instanceof sap.ui.core.Element && oElement.isActive() && !oEvent.isPropagationStopped()) {

		// for each event type call the callback method
		// if the execution should be stopped immediately
		// then no further callback method will be executed
		for (var i = 0, is = aEventTypes.length; i < is; i++) {
			var sType = aEventTypes[i];
			oEvent.type = sType;
			// ensure currenTarget is the DomRef of the handling Control
			oEvent.currentTarget = oElement.getDomRef();
			oElement._handleEvent(oEvent);
			if(oEvent.isImmediatePropagationStopped()) {
				break;
			}
		}

		// if the propagation is stopped do not bubble up further
		if(oEvent.isPropagationStopped()) {
			break;
		}

		// This is the (not that common) situation that the element was deleted in its own event handler.
		// i.e. the Element became 'inactive' (see Element#isActive())
		var oDomRef = oElement.getDomRef();
		if(!oDomRef) {
			continue;
		}

		// bubble up to the parent
		oDomRef = oDomRef.parentNode;
		oElement = null;

		// ensure we do not bubble the control tree higher than our rootNode
		while (oDomRef && oDomRef !== this.getRootNode()) {
			if (oDomRef.id) {
				oElement = jQuery(oDomRef).control(0);
				if (oElement) {
					break;
				}
			}
			oDomRef = oDomRef.parentNode;
		}

	}

	// reset previously changed currentTarget
	oEvent.currentTarget = this.getRootNode();

	// TODO: rethink about logging levels!

	// logging: propagation stopped
	if (oEvent.isPropagationStopped()) {
		jQuery.sap.log.debug("'" + oEvent.type + "' propagation has been stopped");
	}

	// logging: prevent the logging of some events and for others do some
	//          info logging into the console
	var sName = oEvent.type;
	if (sName!="mousemove" && sName!="mouseover" && sName!="scroll" && sName!="mouseout") {
		var oElem = jQuery(oEvent.target).control(0);
		if(oElem) {
			jQuery.sap.log.debug("Event fired: '" + oEvent.type + "' on " + oElem, "", "sap.ui.core.UIArea");
		}
		else {
			jQuery.sap.log.debug("Event fired: '" + oEvent.type + "'", "", "sap.ui.core.UIArea");
		}
	}

};

/*
* The onattach function is called when the Element is attached to the DOM
* @private
*/
sap.ui.core.UIArea.prototype._onattach = function() {

// TODO optimizations for 'matching event list' could be done here.
//	// create the events string (space separated list of event names):
//	// the first time a control is attached - it will determine the required
//	// events and store this information in the controls metadata which is
//	// shared across the control instances.
//	if (!this.getMetadata().sEvents) {
//
//		// shorten the access to the array of events and pseudo events
//		var aEv = jQuery.sap.ControlEvents;
//		var oPsEv = jQuery.sap.PseudoEvents;
//
//		// create the data structures for the event handler registration
//		this.sEvents = "";
//		var aEvents = [];
//
//		// check for pseudo events and register them for their relevant types
//		for (var evt in oPsEv) {
//				for (j = 0, js = oPsEv[evt].aTypes.length; j < js; j++) {
//					var type = oPsEv[evt].aTypes[j];
//					if (jQuery.inArray(type, aEvents) == -1) {
//						aEvents.push(type);
//					}
//				}
//		}
//
//		// check for events and register them
//		for (var i = 0, is = aEv.length; i < is; i++) {
//			var type = aEv[i];
//				if (jQuery.inArray(type, aEvents) == -1) {
//					aEvents.push(type);
//				}
//		}
//
//		// keep the list of events for the jQuery bind/unbind method
//		this.sEvents = aEvents.join(" ");
//
//		// cache the event handlers registry map
//		this.getMetadata().sEvents = this.sEvents;
//
//	} else {
//		// use the cached map of event handlers
//		this.sEvents = this.getMetadata().sEvents;
//	}

	// check for existing root node
	var oDomRef = this.getRootNode();
	if (oDomRef == null) {
		return;
	}

	//	mark the DOM as UIArea and bind the required events
	jQuery(oDomRef).attr("data-sap-ui-area", oDomRef.id).bind(jQuery.sap.ControlEvents.join(" "), jQuery.proxy(this._handleEvent, this));

};

/**
* The ondetach function is called when the Element is detached out of the DOM
* @private
*/
sap.ui.core.UIArea.prototype._ondetach = function() {

	// check for existing root node
	var oDomRef = this.getRootNode();
	if (oDomRef == null) {
		return;
	}

	// remove UIArea marker and unregister all event handlers of the control
	jQuery(oDomRef).removeAttr("data-sap-ui-area").unbind();

	// TODO: when optimizing the events => take care to unbind only the
	//       required. additionally consider not to remove other event handlers.
//	var ojQRef = jQuery(oDomRef);
//	if (this.sEvents) {
//		ojQRef.unbind(this.sEvents, this._handleEvent);
//	}
//
//	var oFH = this.oCore.oFocusHandler;
//	ojQRef.unbind("focus",oFH.onfocusin);
//	ojQRef.unbind("blur", oFH.onfocusout);

};
}; // end of sap.ui.core.UIArea


/**
 * @class Core Class of the SAP UI Library.
 *
 * This class boots the Core framework and makes it available for the Application
 * via the method <code>sap.ui.getCore()</code>.
 *
 * Example:<br/>
 * <pre>   var oCore = sap.ui.getCore();</pre><br/>
 *
 * It provides events where the Application can attach to.<br/>
 * Example:<br/>
 * <pre>
 * oCore.attachInitEvent(function () {
 *   //do the needful, do it lean
 * });
 * </pre><br/>
 *
 * It registers the Browser Eventing.
 *
 * @extends sap.ui.base.EventProvider
 * @final
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.core.Core = function() {

	//make this class only available once
	if(sap.ui.getCore && sap.ui.getCore()) {
		return sap.ui.getCore();
	}

	var that=this,
		log = jQuery.sap.log,
		METHOD="sap.ui.core.Core";
	
	//inheritance to be able to fire internal events
	sap.ui.base.EventProvider.apply(this);

	/**
	 * Whether the core has been booted
	 * @private
	 */
	this.bBooted = false;

	/**
	 * Whether the core has been initialized
	 * @private
	 */
	this.bInitialized = false;

	/**
	 * Available plugins in the order of registration.
	 * @private
	 */
	this.aPlugins = [];

	/**
	 * Collection of loaded libraries, keyed by their name.
	 * @private
	 */
	this.mLibraries = {};

	/**
	 * Already loaded resource bundles keyed by library and locale.
	 * @private
	 * @see sap.ui.core.Core.getLibraryResourceBundle
	 */
	this.mResourceBundles = {};

	/**
	 * Currently created UIAreas keyed by their id.
	 * @private
	 * FIXME how can a UI area ever be removed?
	 */
	this.mUIAreas = {};

	/**
	 * Default model used for databinding
	 * @private
	 */
	this.oModels = {};

	/**
	 * Map of of created Elements keyed by their id.
	 *
	 * Each element registers itself in its constructor and deregisters itself in its
	 * destroy method.
	 *
	 * @private
	 * TODO get rid of this collection as it represents a candidate for memory leaks
	 */
	this.mElements = {};

	/**
	 * Ordered collection of initEvent listeners
	 * Moved here (before boot()) so that the libraries can be registered for lazy load!!
	 * @private
	 */
	this.aInitListeners = [];

	/**
	 * Whether the legacy library has to be loaded.
	 * @private
	 */
	this.bInitLegacyLib = false;

	log.info("Creating Core",null,METHOD);

	/**
	 * Object holding the interpreted configuration
	 * Initialized from the global "sap-ui-config" object and from Url parameters
	 * @private
	 */
	this.oConfiguration = new sap.ui.core.Configuration();

	// grant Element "friend" access to Core for (de-)registration
	sap.ui.core.Element.prototype.register = function() {
		that.registerElement(this);
	};
	sap.ui.core.Element.prototype.deregister = function() {
		that.deregisterElement(this);
	};

	// handle modules
	var aModules = this.oConfiguration.modules;
	if ( this.oConfiguration.getDebug() ) {
		// add debug module if configured
		aModules.unshift("sap-ui-debug");
	}
	// enforce the core library as the first loaded module
	aModules.unshift("sap.ui.core.library");
	log.info("Declared modules: " + aModules, METHOD);

	// set CSS class for the theme name
	this.sTheme = this.oConfiguration.getTheme();
	jQuery(document.documentElement).addClass("sapUiTheme-" + this.sTheme);
	log.info("Declared theme " + this.sTheme,null,METHOD);

	if (this.oConfiguration.getRTL()) {
		jQuery(document.documentElement).attr("dir", "rtl"); // webkit does not allow setting document.dir before the body exists
		log.info("RTL mode activated",null,METHOD);
	}

	sap.ui.global.resourceRoot = jQuery.sap.getModulePath('', '/');
	sap.ui.global.jsRoot=sap.ui.global.resourceRoot + "js";
	sap.ui.global.themeRoot=sap.ui.global.resourceRoot + "themes";
	if ( this.oConfiguration.getDebug() ) {
		sap.ui.global.debugFolder = "dbg";
	}

	log.info("sap.ui.global.resourceRoot: " + sap.ui.global.resourceRoot,null,METHOD);
	log.info("sap.ui.global.themeRoot: " + sap.ui.global.themeRoot,null,METHOD);
	log.info("sap.ui.global.jsRoot: " + sap.ui.global.jsRoot,null,METHOD);

	function calcBrowserId() {

		var b = jQuery.browser,
			ua = navigator.userAgent,
			browserVersion = parseFloat(b.version);

		// jQuery checks for user agent strings. We differentiate between browsers
		if ( b.mozilla ) {
			if ( ua.match(/Firefox\/(\d+\.\d+)/) ) {
				browserVersion = parseFloat(RegExp.$1);
				b.fVersion = browserVersion;
				if ( browserVersion >= 4 ) {
					return "ff4";
				}
				if ( browserVersion >= 3 ) {
					return "ff3";
				}
			}
		} else if ( b.webkit ) {
			if ( ua.match(/Chrome\/(\d+\.\d+).\d+/) ) {
				b.chrome = true;
				b.safari = false;
				browserVersion = parseFloat(RegExp.$1);
				b.fVersion = browserVersion;
				return "cr" + browserVersion;
			} else { // I do not know why but Safari might have an issue with ua.match(...); thus changing
				var oExp = /Version\/(\d+\.\d+).\d* *Safari/;
				if(oExp.test(ua)) {
					b.safari = true;
					browserVersion = parseFloat(oExp.exec(ua)[1]);
					b.fVersion = browserVersion;
					if ( browserVersion >= 5 ) {
						return "sf5";
					}
					if ( browserVersion >= 4 ) {
						return "sf4";
					}
				}
			}
		} else if ( b.msie ) {
			// recognize IE8 when running in compat mode (only then the documentMode property is there)
			if (document.documentMode) {
				if(document.documentMode === 7) {
					// OK, obviously we are IE and seem to be 7... but as documentMode is there this cannot be IE7!
					log.warning("Browser running in IE7 document mode.", null, METHOD);
					b.fVersion = 8.0;
					return "ie8"; // how do we solve this in higher versions? Where do we get this information from?
				}
				b.fVersion = parseFloat(document.documentMode);
				return "ie" + document.documentMode;
			} else {
				b.fVersion = browserVersion;
				return "ie" + browserVersion;
			}
		}
		
		// otherwise not recognized...
	}

	//set the browser for css attribute selectors. do not move this to the onload function because sf and ie do not
	//use the classes
	var id = calcBrowserId();
	if ( id ) {
		jQuery("html").attr("data-sap-ui-browser", id);
		log.debug("Browser-Id: " + id, null, METHOD);
	}
	
	//if weinre id is set, load weinre target script
	if (this.oConfiguration.getWeinreId()) {
		log.info("Starting WEINRE Remote Web Inspector");
		document.write("<script src=\"");
		document.write(this.oConfiguration.getWeinreServer() + "/target/target-script-min.js#" + this.oConfiguration.getWeinreId());
		document.write("\"></script>");
	}

	// create accessor to the Core API early so that initLibrary and others can use it
	/**
	 * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
	 * @returns the API of the current SAPUI5 Core instance.
	 * @public
	 * @function
	 */
	sap.ui.getCore = jQuery.sap.getter(this.getInterface());

	if (!this.oConfiguration['xx-loadAllMode'] && !this.oConfiguration['xx-preload'] && (!window.document.body || window.document.readyState)) {
		//the instance will boot now
		this.boot();
	}

	//Init the HTML5 support if necessary before initialize the RenderManager
	sap.ui.core.RenderManager.initHTML5Support();
	// create the RenderManager so it can be used already
	this.oRenderManager = new sap.ui.core.RenderManager();

	//register to load event of the browser
	jQuery(document).ready(jQuery.proxy(this, "handleLoad")); // make sure SAPUI5 is first when jQuery.ready is fired
	
	if ( this.oConfiguration['xx-preload'] ) {
		jQuery.each(aModules, function(i,mod) {
			var m = mod.match(/^(.*)\.library$/);
			if ( m ) {
				var sPreloadModule = m[1].replace(/\./g, "-") + "-preload";
				jQuery.sap.log.debug("preload file " + sPreloadModule);
				jQuery.ajax({
					dataType : "text",
					async : that.oConfiguration['xx-preload'] !== "sync",
					url : jQuery.sap.getModulePath(sPreloadModule, ".js"),
					success : function(data) {
						jQuery.sap.globalEval(data);
					}
				});
			}
		});
	}

};

sap.ui.core.Core.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);
sap.ui.base.Object.defineClass("sap.ui.core.Core", {
		// ---- object ----
		baseType : "sap.ui.base.EventProvider",
		publicMethods : ["boot", "isInitialized","attachInitEvent","getRenderManager","createRenderManager",
						 "getConfiguration", "setRoot", "createUIArea", "getUIArea", "getUIDirty", "getElementById",
						 "getCurrentFocusedControlId", "getControl","lock", "unlock","isLocked",
						 "attachEvent","detachEvent","addProcessedEvent","removeProcessedEvent","applyChanges",
						 "applyTheme","attachThemeChanged","detachThemeChanged","getStaticAreaRef",
						 "registerPlugin","unregisterPlugin","getLibraryResourceBundle", "byId",
						 "getLoadedLibraries", "attachControlEvent", "detachControlEvent", "loadLibrary", "initLibrary",
						 "includeLibraryTheme", "setModel", "getModel", "hasModel", "isMobile", "attachParseError", "detachParseError", 
						 "attachValidationError", "detachValidationError", "attachFormatError", "detachFormatError", "attachValidationSuccess",
						 "detachValidationSuccess", "fireFormatError", "fireParseError", "fireValidationError", "fireValidationSuccess"]
	});
/**
 * Map of event names and ids, that are provided by this class
 * @private
 */
sap.ui.core.Core.M_EVENTS = {ControlEvent: "ControlEvent", UIUpdated: "UIUpdated", ThemeChanged: "ThemeChanged", 
		ValidationError : "validationError", ParseError : "parseError", FormatError : "formatError", ValidationSuccess : "validationSuccess"};

/**
 * Boots the core and injects the necessary css and js files for the library.
 * Applications shouldn't call this method. It is automatically called by the bootstrap scripts (e.g. sap-ui-core.js)
 * 
 * @private
 */
sap.ui.core.Core.prototype.boot = function() {

	if (this.bBooted) {
		return;
	}
	
	this.bBooted = true;
	
	//do not allow any event processing until the Core is booting
	this.lock();
	
	// load all modules now
	var that = this;
	jQuery.each(this.oConfiguration.modules, function(i,mod) {
		var m = mod.match(/^(.*)\.library$/);
		if ( m ) {
			that.loadLibrary(m[1]);
		} else {
			jQuery.sap.require(mod);
		}
	});
	
	//allow events again
	this.unlock();
};


/**
 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application)
 * @param {string} sThemeName the name of the theme to be loaded
 * @public
 */
sap.ui.core.Core.prototype.applyTheme = function(sThemeName) {
	jQuery.sap.assert(typeof sThemeName === "string", "sThemeName must be a string");
	
	// only apply the theme if it is a different one
	if (sThemeName && this.sTheme != sThemeName) {
		var sCurrentTheme = this.sTheme;
		// select "our" stylesheets
		jQuery("link[id^=sap-ui-theme-]").each(function() {
			// modify style sheet URL to point to the new theme
			//this.href = this.href.replace("/themes/"+sCurrentTheme+"/library","/themes/"+sThemeName+"/library");
			// be aware of custom css included with the colon (see includeLibraryTheme)
			this.href = this.href.replace("/themes/"+sCurrentTheme+"/","/themes/"+sThemeName+"/");
		});
		this.sTheme = sThemeName;
		this.getConfiguration().setTheme(sThemeName);

		// modify the <html> tag's CSS class with the theme name
		jQuery(document.documentElement).removeClass("sapUiTheme-" + sCurrentTheme).addClass("sapUiTheme-" + sThemeName);

		// notify the listeners
		jQuery.sap.delayedCall(250, this, "fireThemeChanged", [{theme: sThemeName}]); // TODO: only fire when we are sure the theme has been loaded. E.g. have a certain off-screen element with a width that can be derived from the theme name and is unique. And wait until the element has changed size.
	}
};


/**
 * Initializes the Core after the initial page was loaded
 * @private
 */
sap.ui.core.Core.prototype.init = function() {

	if (this.bInitialized) {
		return;
	}

	var log = jQuery.sap.log,
		METHOD = "sap.ui.core.Core.init()";

	// ensure that the core is booted now (e.g. loadAllMode)
	this.boot();
	
	log.info("Initializing",null,METHOD);

	this.oFocusHandler = new sap.ui.core.FocusHandler(document.body, this);
	this.oResizeHandler = new sap.ui.core.ResizeHandler(this);

	log.info("Initialized",null,METHOD);

	this.bInitialized = true;

	// start the plugins
	log.info("Starting Plugins",null,METHOD);
	this.startPlugins();
	log.info("Plugins started",null,METHOD);

	var oConfig = this.oConfiguration;
	// create any pre-configured UIAreas
//	if ( oConfig.areas && oConfig.areas.length > 0 ) {
	if ( oConfig.areas ) {
		// log.warning("deprecated config option '(data-sap-ui-)areas' used.");
		for (var i=0, l = oConfig.areas.length; i < l; i++) {
			this.createUIArea(oConfig.areas[i]);
		}
		oConfig.areas = undefined;
	}

	// execute a configured init hook
	if ( oConfig.onInit ) {
		if ( typeof oConfig.onInit === "function" ) {
			oConfig.onInit();
		} else {
			// DO NOT USE jQuery.globalEval as it executes async in FF!
			jQuery.sap.globalEval(oConfig.onInit);
		}
		oConfig.onInit = undefined;
	}

	// execute registered init event handlers
	if (this.aInitListeners.length > 0) {
		log.info("Fire Loaded Event",null,METHOD);
		jQuery.each(this.aInitListeners, function(i,f) { f(); }); // TODO is jQuery.each safe wrt. concurrent modifications?
		this.aInitListeners = [];
	}

	this._rerenderAllUIAreas(); // directly render without setTimeout, so rendering is guaranteed to be finished when init() ends
};

/**
 * Handles the load event of the browser to initialize the Core
 * @private
 */
sap.ui.core.Core.prototype.handleLoad = function () {

	//do not allow any event processing until the Core is initialized
	var bWasLocked = this.isLocked();
	if ( !bWasLocked ) {
		this.lock();
	}
	this.init();
	//allow event processing again
	if ( !bWasLocked ) {
		this.unlock();
	}

};

/**
 * Returns true if the core has already been initialized. This means that instances of RenderManager,
 * etc. do already exist and the init event has already been fired (and will not
 * be fired again).
 *
 * @return whether the core has already been initialized
 * @public
 */
sap.ui.core.Core.prototype.isInitialized = function () {
	return this.bInitialized;
};

/**
 * Attaches a given function to the initialized event of the core.
 * This event will only be fired once; you can check if it already has been fired by calling isInitialized().
 *
 * @param func the function to be called on event firing.
 * @public
 */
sap.ui.core.Core.prototype.attachInitEvent = function (func) {
	jQuery.sap.assert(typeof func === "function", "func must be a function");
	this.aInitListeners.push(func);
};

/**
 * Locks the Core. No browser events are dispatched to the controls.
 * Lock should be called before and after the dom is modified for rendering, roundtrips...
 * Exceptions might be the case for asynchronous UI behavior
 * @public
 */
sap.ui.core.Core.prototype.lock = function () {
	this.bLocked = true;
};

/**
 * Unlocks the Core. Browser events are dispatched to the controls after
 * this method is called.
 * @public
 */
sap.ui.core.Core.prototype.unlock = function () {
	this.bLocked = false;
};

/**
 * Returns the locked state of the <code>sap.ui.core.Core</code>
 * @type boolean
 * @return locked state
 * @public
 */
sap.ui.core.Core.prototype.isLocked = function () {
	return this.bLocked;
};

/**
 * Returns the Configuration instance of the current Core instance.
 *
 * @return {sap.ui.core.Configuration} the Configuration instance of the current Core instance.
 * @public
 */
sap.ui.core.Core.prototype.getConfiguration = function () {
	return this.oConfiguration;
};

/**
 * @public
 * @deprecated Since version 0.15.0. Replaced by <code>createRenderManager()</code>
 */
sap.ui.core.Core.prototype.getRenderManager = function() {
	return this.createRenderManager(); //this.oRenderManager;
};

/**
 * Returns a new instance of the RenderManager interface.
 *
 * @return {sap.ui.core.RenderManager} the new instance of the RenderManager interface.
 * @public
 */
sap.ui.core.Core.prototype.createRenderManager = function() {
	return (new sap.ui.core.RenderManager()).getInterface();
};

/**
 * Returns the Id of the control/element currently in focus.
 * @return {string} the Id of the control/element currently in focus.
 * @public
 */
sap.ui.core.Core.prototype.getCurrentFocusedControlId = function() {
	return this.oFocusHandler.getCurrentFocusedControlId();
};

/**
 * Synchronously loads the given library and makes it available to the application.
 *
 * Loads the *.library module, which contains all preload modules (enums, types, content of a shared.js
 * if it exists). The library module will call initLibrary with additional metadata for the library.
 *
 * As a result, consuming applications can instantiate any control or element from that library
 * without having to write import statements for the controls or for the enums.
 * 
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sLibrary, sUrl);
 * </pre>
 *
 * When the given library has been loaded already, no further action will be taken.
 * Especially, a given Url will not be honored!
 * 
 * @param {string} sLibrary name of the library to import
 * @param {string} [sUrl] URL to load the library from
 * @public
 */
sap.ui.core.Core.prototype.loadLibrary = function(sLibrary, sUrl) {
	jQuery.sap.assert(typeof sLibrary === "string", "sLibrary must be a string");
	jQuery.sap.assert(sUrl === undefined || typeof sUrl === "string", "sUrl must be a string or empty");

	// load libraries only once
	if ( !this.mLibraries[sLibrary] ) {
	
		var sModule = sLibrary + ".library",
			sAllInOneModule;
	
		// if a sUrl is given, redirect access to it
		if ( sUrl ) {
			jQuery.sap.registerModulePath(sLibrary, sUrl);
		}
		
		// optimization: in all-in-one mode we are loading all modules of the lib in a single file
		if ( this.oConfiguration['xx-loadAllMode'] && !jQuery.sap.isDeclared(sModule) ) {
			sAllInOneModule = sLibrary.replace(/\./g, "-") + "-all";
			jQuery.sap.log.debug("load all-in-one file " + sAllInOneModule);
			jQuery.sap.require(sAllInOneModule);
		}
		
		// require the library module (which in turn will call initLibrary())
		jQuery.sap.require(sModule);
		
		// check for legacy code
		if ( !this.mLibraries[sLibrary] ) {
			jQuery.sap.log.warning("library " + sLibrary + " didn't initialize itself");
			this.initLibrary(sLibrary); // TODO redundant to generated initLibrary call....
		}

	}
	
	return this.mLibraries[sLibrary];
};

/**
 * Initializes a library for an already loaded library module.
 *
 * This method is intended to be called only from a library.js (e.g. generated code).
 * It includes the library specific stylesheet into the current page, and creates
 * lazy import stubs for all controls and elements in the library.
 *
 * As a result, consuming applications don't have to write import statements for the controls or for the enums.
 *
 * Synchronously loads any libraries that the given library depends on.
 *
 * @param {string|object} vLibInfo name of or info object for the library to import
 * @public
 */
sap.ui.core.Core.prototype.initLibrary = function(vLibInfo) {
	jQuery.sap.assert(typeof vLibInfo === "string" || typeof vLibInfo === "object", "vLibInfo must be a string or object");
	
	var bLegacyMode = typeof vLibInfo === "string",
		oLibInfo = bLegacyMode ? { name : vLibInfo } : vLibInfo,
		sLibName = oLibInfo.name,
		log = jQuery.sap.log,
		METHOD =  "sap.ui.core.Core.initLibrary()";

	if ( bLegacyMode ) {
		log.warning("[Deprecated] library " + sLibName + " uses old fashioned initLibrary() call (rebuild with newest generator)");
	}

	if ( !sLibName || this.mLibraries[sLibName] ) {
		return;
	}

	log.debug("Analyzing Library " + sLibName, null, METHOD);

	// Create lib info object. Also used as a marker that the library is loading/has been loaded
	this.mLibraries[sLibName] = oLibInfo = jQuery.extend({
	  dependencies : [],
	  types : [],
	  interfaces : [],
	  controls: [],
	  elements : []
	}, oLibInfo);

	// this code could be moved to a separate "legacy support" module
	function readLibInfoFromProperties() {

		// read library properties
		var oProperties = jQuery.sap.properties({url : sap.ui.resource(sLibName, "library.properties")});

		// version info
		oLibInfo.version = oProperties.getProperty(sLibName + "[version]");

		// dependencies
		var sDepInfo = oProperties.getProperty(sLibName + "[dependencies]");
		log.debug("Required Libraries: " + sDepInfo, null, METHOD);
		oLibInfo.dependencies = (sDepInfo && sDepInfo.split(/[,;| ]/)) || [];

		// collect types, controls and elements
		var aKeys = oProperties.getKeys(),
		  rPattern = /(.+)\.(type|interface|control|element)$/,
		  aMatch;
		for(var i=0; i<aKeys.length; i++) {
			var sEntityPath = oProperties.getProperty(aKeys[i]);
			if ( aMatch = sEntityPath.match(rPattern) ) {
				oLibInfo[aMatch[2]+"s"].push(aKeys[i]);
			}
		}
	}

	// (legacy) if only a string was given, read the library.properties instead
	if ( bLegacyMode ) {
		readLibInfoFromProperties();
	}

	// resolve dependencies
	for(var i=0; i<oLibInfo.dependencies.length; i++) {
		var sDepLib = oLibInfo.dependencies[i];
		log.debug("resolve Dependencies to " + sDepLib, null, METHOD);
		if ( !this.mLibraries[sDepLib] ) {
			log.warning("Dependency from " + sLibName + " to " + sDepLib + " has not been resolved by library itself", null, METHOD);
			this.loadLibrary(sDepLib);
		}
	}

	// create lazy imports for all controls and elements
	var aElements = oLibInfo.controls.concat(oLibInfo.elements);
	for(var i=0; i<aElements.length; i++) {
		sap.ui.lazyRequire(aElements[i]);
	}

	// include the library theme
	this.includeLibraryTheme(sLibName);

	// expose some legacy names
	oLibInfo.sName = oLibInfo.name;
	oLibInfo.aControls = oLibInfo.controls;

	// load and execute the library.js script
	if ( !jQuery.sap.isDeclared(sLibName + ".library") ) {
		// TODO redundant to generated require calls
		log.warning("Library Module " + sLibName + ".library" + " not loaded automatically", null, METHOD);
		jQuery.sap.require(sLibName + ".library");
	}

};

/**
 * Includes a library theme into the current page (if a variant is specified it
 * will include the variant library theme)
 * @param {string} sLibName the name of the UI library
 * @param {string} [sVariant] the variant to include (optional)
 * @public
 */
sap.ui.core.Core.prototype.includeLibraryTheme = function(sLibName, sVariant) {
	jQuery.sap.assert(typeof sLibName === "string", "sLibName must be a string");
	jQuery.sap.assert(sVariant === undefined || typeof sVariant === "string", "sVariant must be a string or undefined");
	
	/*
	 * by specifiying a library name containing a colon (":") you can specify
	 * the file name of the CSS file to include (ignoring RTL)
	 */

	// include the stylesheet for the library (except for "classic" and "legacy" lib)
	if ((sLibName != "sap.ui.legacy") && (sLibName != "sap.ui.classic")) {

		// no variant?
		if (!sVariant) {
			sVariant = "";
		}

		// determine RTL
		var sRtl = (this.oConfiguration.getRTL() ? "-RTL" : "");

		// create the library file name
		var sLibId, sLibFileName;
		if (sLibName && sLibName.indexOf(":") == -1) {
			sLibId = sLibName + sVariant;
			sLibFileName = "library" + sVariant + sRtl;
		} else {
			sLibId = sLibName + sVariant;
			sLibFileName = sLibName.substring(sLibName.indexOf(":") + 1) + sVariant;
			sLibName = sLibName.substring(0, sLibName.indexOf(":"));
		}

		// log and include
		jQuery.sap.log.info("Including " + sLibName + "/themes/" + this.sTheme + "/" + sLibFileName + ".css" + " -  sap.ui.core.Core.includeLibraryTheme()");
		jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath(sLibName + ".themes." + this.sTheme, "/") + sLibFileName + ".css", "sap-ui-theme-" + sLibId);

	}

};

/**
 * Returns a map which contains the names of the loaded libraries as keys
 * and some additional information about each library as values.
 * 
 * Note that the details of the 'values' in the returned map are not yet specified!
 * Their structure might change in future versions without notice. So applications
 * can only rely on the set of keys as well as the pure existance of a value.
 * 
 * @return {map} map of library names / controls
 * @public
 */
sap.ui.core.Core.prototype.getLoadedLibraries = function() {
	return jQuery.extend({}, this.mLibraries); // TODO deep copy or real Library object?
};

/**
 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
 * adds the given control reference to the UIAreas content (existing content will be removed).
 *
 * @param {String,DomRef} oDomRef a Dom Reference or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be the added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
 */
sap.ui.core.Core.prototype.setRoot = function(oDomRef, oControl) {
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");
	jQuery.sap.assert(oControl instanceof sap.ui.base.Interface || oControl instanceof sap.ui.core.Control, "oControl must be a Control or Interface");
	
	if(oControl) {
		oControl.placeAt(oDomRef, "only");
	}
};

/**
 * Creates a new sap.ui.core.UIArea
 *
 * @param {String,DomRef} oDomRef a DOM reference or ID string of the UIArea
 * @return a new UIArea
 * @type sap.ui.core.UIArea
 *
 * @public
 * @deprecated Use <code>setRoot()</code> instead!
 */
sap.ui.core.Core.prototype.createUIArea = function(oDomRef) {
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");
	
	if (!oDomRef) {
		throw new Error("oDomRef must not be null");
	}

	// oDomRef might be (and actually IS in most cases!) a string (the ID of a DOM element)
	if (typeof(oDomRef) === "string") {
		var id = oDomRef;
		oDomRef = jQuery.sap.domById(oDomRef);
		if (!oDomRef) {
			throw new Error("DOM element with ID '" + id + "' not found in page, but application tries to insert content.");
		}
	}

	// if the domref does not have an ID or empty ID => generate one
	if (!oDomRef.id || oDomRef.id.length == 0) {
		oDomRef.id = jQuery.sap.uid();
	}

	// create a new or fetch an existing UIArea
	var sId = oDomRef.id;
	if (!this.mUIAreas[sId]) {
		this.mUIAreas[sId] = new sap.ui.core.UIArea(this, oDomRef);
	} else {
		// this should solve the issue of 'recreation' of a UIArea
		// e.g. via setRoot with a new domRef
		this.mUIAreas[sId].setRootNode(oDomRef);
	}
	return this.mUIAreas[sId];

};

/**
 * Returns a UIArea if the given ID/Element belongs to one
 * 
 * @public
 * @param {String,DomRef} o a DOM Reference or ID String of the UIArea
 * @return a UIArea with a given id or dom ref.
 * @type sap.ui.core.UIArea
 */
sap.ui.core.Core.prototype.getUIArea = function(o) {
	jQuery.sap.assert(typeof o === "string" || typeof o === "object", "o must be a string or object");
	
	var sId = "";
	if (typeof(o)=="string") {
		sId = o;
	}
	else {
		sId = o.id;
	}

	if (sId) {
		return this.mUIAreas[sId];
	}

	return null;
};

/**
 * Informs the core about an UIArea that just became invalid.
 *
 * The core might use this information to minimize the set of
 * re-rendered UIAreas. But for the time being it just registers
 * a timer to trigger a re-rendering after the current event
 * has been processed.
 *
 * @param oUIArea {sap.ui.core.UIArea} UIArea that just became invalid
 * @private
 */
sap.ui.core.Core.prototype.addInvalidatedUIArea = function(oUIArea) {
	this.rerenderAllUIAreas(); // TODO: document why immediately rerender all??
};

/**
 * Retrieves a resource bundle for the given library and locale.
 *
 * If only one argument is given, it is assumed to be the libraryName. The locale
 * then falls back to the current {@link sap.ui.core.Configuration.prototype.getLanguage session locale}.
 * If no argument is given, the library also falls back to a default: "sap.ui.core".
 *
 * @param {string} [sLibraryName=sap.ui.core] name of the library to retrieve the bundle for
 * @param {string} [sLocale] locale to retrieve the resource bundle for
 * @return {jQuery.sap.util.ResourceBundle} the best matching resource bundle for the given parameters or undefined
 * @public
 */
sap.ui.core.Core.prototype.getLibraryResourceBundle = function(sLibraryName, sLocale) {
	jQuery.sap.assert((sLibraryName === undefined && sLocale === undefined) || typeof sLibraryName === "string", "sLibraryName must be a string or there is no argument given at all");
	jQuery.sap.assert(sLocale === undefined || typeof sLocale === "string", "sLocale must be a string or omitted");
	
	// TODO move implementation together with similar stuff to a new class "UILibrary"?
	sLibraryName = sLibraryName || "sap.ui.core";
	sLocale = sLocale || this.getConfiguration().getLanguage();
	var sKey = sLibraryName + "/" + sLocale;
	if (!this.mResourceBundles[sKey]) {
		var sURL = sap.ui.resource(sLibraryName, 'messagebundle.properties');
		this.mResourceBundles[sKey] = jQuery.sap.resources({url : sURL, locale : sLocale});
	}
	return this.mResourceBundles[sKey];
};

sap.ui.core.Core.prototype.rerenderAllUIAreas = function() {
	if ( !this._sRerenderTimer ) {
		jQuery.sap.log.info("registering timer for delayed re-rendering");
		this._sRerenderTimer = jQuery.sap.delayedCall(0,this,"_rerenderAllUIAreas"); // decoupled for collecting several invalidations into one redraw
	}
};

sap.ui.core.Core.prototype._rerenderAllUIAreas = function() {
	// clear the timer so that the next call to re-render will create a new timer
	if (this._sRerenderTimer) {
		jQuery.sap.clearDelayedCall(this._sRerenderTimer); // explicitly stop the timer, as this call might be synchronous while still a timer is running
		this._sRerenderTimer = undefined;
	}

	var bUIUpdated = false;
	for (var sId in this.mUIAreas) {
		bUIUpdated = this.mUIAreas[sId].rerender() || bUIUpdated;
	}
	// TODO: Provide information on what actually was re-rendered...
	if(bUIUpdated) {
		this.fireUIUpdated();
	}
};


/**
 * Returns "true" if the UI is marked as dirty and will be cleaned/re-rendered after a certain small timeout.
 * 
 * @return {boolean} true if some UI part is marked as dirty and will be cleaned up/re-rendered
 * @public
 */
sap.ui.core.Core.prototype.getUIDirty = function() {
	return !!this._sRerenderTimer;
};

/**
 * @name sap.ui.core.Core.prototype.UIUpdated
 * @event
 * @param {string} a
 * @param {object} source
 * @private
 */

sap.ui.core.Core.prototype.attachUIUpdated = function(fFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, fFunction, oListener);
};

sap.ui.core.Core.prototype.detachUIUpdated = function(fFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, fFunction, oListener);
};

sap.ui.core.Core.prototype.fireUIUpdated = function(mParameters) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, mParameters);
};

/**
 * @name sap.ui.core.Core.prototype.ThemeChanged
 * @event
 * @param {string} a
 * @param {object} source
 */

sap.ui.core.Core.prototype.attachThemeChanged = function(fFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ThemeChanged, fFunction, oListener);
};

sap.ui.core.Core.prototype.detachThemeChanged = function(fFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ThemeChanged, fFunction, oListener);
};

sap.ui.core.Core.prototype.fireThemeChanged = function(mParameters) {
	// notify all elements/controls via a pseudo browser event
	var sEventId = sap.ui.core.Core.M_EVENTS.ThemeChanged;
	var oEvent = jQuery.Event(sEventId);
	jQuery.each(this.mElements, function(sId, oElement) {
		oElement._handleEvent(oEvent);
	});
	// notify the listeners via a control event
	this.fireEvent(sEventId, mParameters);
};

/**
 * Enforces an immediate update of the visible UI (aka "rendering").
 *
 * In general, applications should avoid calling this method and
 * instead let the framework manage any necessary rendering.
 * @public
 */
sap.ui.core.Core.prototype.applyChanges = function() {
	this._rerenderAllUIAreas();
};

/**
 * Stores the event which is currently processed in order to avoid unnecessary rerendering.
 * @param {sap.ui.core.Element} oProvider the origin of the event
 * @param {string} sEventId the id of the fired processed event
 */
sap.ui.core.Core.prototype.addProcessedEvent = function(oProvider,sEventId) {
	if (!this.oProcessedEvent) {
		this.oProcessedEvent = {oProvider: oProvider, sEventId: sEventId};
	}
};

/**
 * Provides information to the core that a beforehand registered event's processing is finished.<br/>
 * When the given combination was the root event of the processing stack, rerendering is called.
 * @param {sap.ui.core.Element} oProvider the origin of the event
 * @param {string} sEventId the id of the fired processed event
 */
sap.ui.core.Core.prototype.removeProcessedEvent = function(oProvider,sEventId) {
	var oProcessedEvent = this.oProcessedEvent;
	if (oProcessedEvent &&
		oProcessedEvent.oProvider == oProvider &&
		oProcessedEvent.sEventId == sEventId) {
		this.oProcessedEvent = null;
		// this.rerenderAllUIAreas();
	};
};

/**
 * Registers the given element. Must be called once during construction.
 * @param {sap.ui.core.Element} oElement
 * @private
 */
sap.ui.core.Core.prototype.registerElement = function(oElement) {
	var oldElement = this.byId(oElement.getId());
	if ( oldElement && oldElement !== oElement ) {
		// duplicate ID detected => fail or at least log a warning
		if (this.oConfiguration.getNoDuplicateIds()) {
			jQuery.sap.log.error("adding element with duplicate id '" + oElement.getId() + "'");
			throw new Error("Error: adding element with duplicate id '" + oElement.getId() + "'");
		} else {
			jQuery.sap.log.warning("adding element with duplicate id '" + oElement.getId() + "'");
		}
	}

	this.mElements[oElement.getId()] = oElement;
};

/**
 * Deregisters the given element. Must be called once during destruction.
 * @param {sap.ui.core.Element} oElement
 * @private
 */
sap.ui.core.Core.prototype.deregisterElement = function(oElement) {
	delete this.mElements[oElement.getId()];
};

/**
 * Returns the registered element for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @public
 */
sap.ui.core.Core.prototype.byId = function(sId) {
	jQuery.sap.assert(sId == null || typeof sId === "string", "sId must be a string when defined"); 
	// allow null, as this occurs frequently and it is easier to check whether there is a control in the end than 
	// first checking whether there is an ID and then checking for a control
	
	/*
	// test alternative implementation
	function findById(sId, mUIAreas) {
		function _find(oControl) {
			if ( !oControl )
				return undefined;
			if ( oControl.getId() === sId ) {
				return oControl;
			}
			for (var n in oControl.mAggregations) {
				var a = oControl.mAggregations[n];
				if ( a instanceof Array ) {
					for (var i=0; i<a.length; i++) {
						var r = _find(a[i]);
						if ( r ) return r;
					}
				} else if ( a instanceof sap.ui.core.Element ) {
					var r = _find(a[i]);
					if ( r ) return r;
				}
			}
			return undefined;
		}

		//var t0=new Date().getTime();
		var r=undefined;
		for (var n in mUIAreas) {
			r=_find(mUIAreas[n].getRootControl()); //TODO: Adapt to mUIAreas[n].getContent
			if ( r ) break;
		}
		//var t1=new Date().getTime();
		//t=t+(t1-t0);
		return r;
	}

	if ( findById(sId, this.mUIAreas) !== this.mElements[sId] ) {
		jQuery.sap.log.error("failed to resolve " + sId + " (" + this.mElements[sId] + ")");
	}
	*/
	return sId == null ? undefined : this.mElements[sId];
};

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @function
 * @public
 */
sap.ui.core.Core.prototype.getControl = sap.ui.core.Core.prototype.byId;

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @function
 * @public
 */
sap.ui.core.Core.prototype.getElementById = sap.ui.core.Core.prototype.byId;

/**
 * Returns the static, hidden area reference belonging to this core instance.<br/> It can be used e.g. for hiding
 * elements like Popups, Shadow, Blocklayer etc.<br/> If it is not yet available, creates one HTML element and attaches
 * it to the body.
 *
 * @return {DOMNode} the static, hidden area reference belonging to this core instance.
 * @public
 */
sap.ui.core.Core.prototype.getStaticAreaRef = function() {
	var sStaticId = "sap-ui-static";
	var oStatic = jQuery.sap.domById(sStaticId);
	if(!oStatic){
		var leftRight = this.getConfiguration().getRTL() ? "right" : "left";
		oStatic = jQuery("<DIV/>",{id:sStaticId})
					.css("visibility", "hidden")
					.css("height", "0")
					.css("width", "0")
					.css("overflow", "hidden")
					.css("float", leftRight)
					.prependTo(document.body)[0];

		// TODO Check whether this is sufficient
		this.createUIArea(oStatic).bInitial = false;
	}
	return oStatic;
};

/**
 * Registers a listener for control events
 * @param {function} sFunction
 * @param {object} [oListener]
 * @public
 */
sap.ui.core.Core.prototype.attachControlEvent = function(fFunction, oListener) {
	this.attachEvent(sap.ui.core.UIArea.M_EVENTS.ControlEvent, fFunction, oListener);
};

/**
 * Unregisters a listener for control events
 * @param {function} sFunction
 * @param {object} [oListener]
 * @public
 */
sap.ui.core.Core.prototype.detachControlEvent = function(fFunction, oListener) {
	this.detachEvent(sap.ui.core.UIArea.M_EVENTS.ControlEvent, fFunction, oListener);
};

/**
 * Notifies the listeners that a event on a control occures
 * @param {map} mParameters { browserEvent: jQuery.EventObject }
 * @private
 */
sap.ui.core.Core.prototype.fireControlEvent = function(mParameters) {
	this.fireEvent(sap.ui.core.UIArea.M_EVENTS.ControlEvent, mParameters);
};

/**
 * Handles a control event and forwards it to the registered control event
 * listeners
 * @param {jQuery.EventObject} control event
 * @private
 */
sap.ui.core.Core.prototype._handleControlEvent = function(/**event*/oEvent, sUiAreaId) {
	// Create a copy of the event
	var oEventClone = jQuery.Event(oEvent.type);
	jQuery.extend(oEventClone, oEvent);
	oEventClone.originalEvent = undefined;

	this.fireControlEvent({"browserEvent": oEventClone, "uiArea": sUiAreaId});
};


/**
 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
 * will be managed (start and stop).
 * <br/>
 * Plugin object need to implement two methods:
 * <ul>
 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
 *       should start (as parameter the reference to the Core will be provided</li>
 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
 * </ul>
 *
 * @param {object} oPlugin reference to a Plugin object
 * @public
 */
sap.ui.core.Core.prototype.registerPlugin = function(oPlugin) {
	jQuery.sap.assert(typeof oPlugin === "object", "oPlugin must be an object");
	
	// check for a valid plugin
	if (!oPlugin) {
		return;
	}

	// check if the plugin is already registered
	// if yes, the exit this function
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		if (this.aPlugins[i] === oPlugin) {
			return;
		}
	}

	// register the plugin (keep the plugin in the plugin array)
	this.aPlugins.push(oPlugin);

	// if the Core is initialized also start the plugin
	if (this.bInitialized && oPlugin && oPlugin.startPlugin) {
		oPlugin.startPlugin(this);
	}

};

/**
 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
 *
 * @param {object} oPlugin reference to a Plugin object
 * @public
 */
sap.ui.core.Core.prototype.unregisterPlugin = function(oPlugin) {
	jQuery.sap.assert(typeof oPlugin === "object", "oPlugin must be an object");
	
	// check for a valid plugin
	if (!oPlugin) {
		return;
	}

	// check if the plugin is already registered
	var iPluginIndex = -1;
	for (var i = this.aPlugins.length; i--; i >= 0) {
		if (this.aPlugins[i] === oPlugin) {
			iPluginIndex = i;
			break;
		}
	}

	// plugin was not registered!
	if (iPluginIndex == -1) {
		return;
	}

	// stop the plugin
	if (this.bInitialized && oPlugin && oPlugin.stopPlugin) {
		oPlugin.stopPlugin(this);
	}

	// remove the plugin
	this.aPlugins.splice(iPluginIndex, 1);

};

/**
 * Internal method to start all registered plugins
 * @private
 */
sap.ui.core.Core.prototype.startPlugins = function() {
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		var oPlugin = this.aPlugins[i];
		if (oPlugin && oPlugin.startPlugin) {
			oPlugin.startPlugin(this, /* onInit*/ true);
		}
	}
};

/**
 * Internal method to stop all registered plugins
 * @private
 */
sap.ui.core.Core.prototype.stopPlugins = function() {
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		var oPlugin = this.aPlugins[i];
		if (oPlugin && oPlugin.stopPlugin) {
			oPlugin.stopPlugin(this);
		}
	}
};

/**
 * Set the model for databinding
 * @param {sap.ui.model.Model} oModel
 * @param {string} [sName]
 * @public
 */
sap.ui.core.Core.prototype.setModel = function(oModel, sName) {
	jQuery.sap.assert(typeof oModel === "object", "oModel must be an object");
	jQuery.sap.assert(sName === undefined || typeof sName === "string", "sName must be a string or omitted");
	
	this.oModels[sName] = oModel;
	
	// notify all UI areas to update their bindings
	jQuery.each(this.mUIAreas, function (i, oUIArea){
		oUIArea.updateBindings(sName);
	});
	
};

/**
 * Get the model for databinding
 * @param {string} [sName]
 * @return {sap.ui.model.Model} oModel
 * @public
 */
sap.ui.core.Core.prototype.getModel = function(sName) {
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");
	return this.oModels[sName];
};

/**
 * Check if a Model is set to the core
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.Core.prototype.hasModel = function() {
	if (!jQuery.isEmptyObject(this.oModels)) {
		return true;
	} else {
		return false;
	}
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachValidationError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ValidationError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachValidationError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ValidationError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 *  
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachParseError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ParseError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachParseError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ParseError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachFormatError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.FormatError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachFormatError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.FormatError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachValidationSuccess = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachValidationSuccess = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, fnFunction, oListener);
	return this;
};


/**
 * Fire event parseError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireParseError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ParseError, mArguments);
	return this;
};

/**
 * The 'parseError' event is fired when input parsing fails.
 *
 * @name sap.ui.core.Core#parseError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the parse error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the parse error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the parse error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the parse error) 
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the parse error
 * @public
 */

/**
 * Fire event validationError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireValidationError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ValidationError, mArguments);
	return this;
};

/**
 * The 'validationError' event is fired when validation of the input fails.
 *
 * @name sap.ui.core.Core#validationError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the validation error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the validation error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation error) 
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the validation error
 * @public
 */

/**
 * Fire event formatError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireFormatError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.FormatError, mArguments);
	return this;
};

/**
 * The 'formatError' event is fired when a value formatting fails. This can happen when a value stored in the model cannot be formatted to be displayed in an element property.
 *
 * @name sap.ui.core.Core#formatError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the format error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the format error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the format error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the format error) 
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the format error
 * @public
 */

/**
 * Fire event validationSuccess to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireValidationSuccess = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, mArguments);
	return this;
};

/**
 * The 'validationSuccess' event is fired when a value validation was successfully completed.
 *
 * @name sap.ui.core.Core#validationSuccess
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the successful validation occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the successfull validation occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation)
 * @public
 */

/**
 * Check if the script is running on mobile
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.Core.prototype.isMobile = function() {
	return !!window.orientation;
};

/**
 * @name sap.ui.core.CorePlugin
 * @interface Contract for plugins that want to extend the core runtime
 */

/**
 * Called by the Core after it has been initialized.
 * If a plugin is added to the core after its initialization, then
 * this method is called during registration of the plugin.
 *
 * Implementing this method is optional for a plugin.
 *
 * @name sap.ui.core.CorePlugin.prototype.startPlugin
 * @param {sap.ui.core.Core} oCore reference to the core
 * @param {boolean} bOnInit whether the hook is called during Core.init() or later
 * @function
 */

/**
 * Called by the Core when it is shutdown or when a plugin is
 * deregistered from the core.
 *
 * Implementing this method is optional for a plugin.
 *
 * @name sap.ui.core.CorePlugin.prototype.stopPlugin
 * @param {sap.ui.core.Core} oCore reference to the core
 * @function
 */


// TODO come up with more sophisticated solution.
// e.g. check for script tag, check for config... if not (yet) there, delay creation by e.g. 500ms or so.
if(!window.sap.ui.getCore){
	/**
	 * Create Core instance and make it available.
	 */
	(function(){
		new sap.ui.core.Core();
	}());
}

/**
 * Displays the control tree with the given root inside the area of the given
 * DOM reference (or inside the DOM node with the given ID) or in the given Control.
 *
 * Example:
 * <pre>
 *   &lt;div id="SAPUI5UiArea">&lt;/div>
 *   &lt;script type="text/javascript">
 *     var oRoot = new sap.ui.commons.Label();
 *     oRoot.setText("Hello world!");
 *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
 *   &lt;/script>
 * </pre>
 * <p>
 *
 * This is a shortcut for <code>sap.ui.getCore().setRoot()</code>.
 *
 * Internally, if a string is given that does not identify an UIArea or a control
 * then implicitly a new <code>UIArea</code> is created for the given DOM reference
 * and the given control is added.
 *
 * @param {string|DOMRef|sap.ui.core.Control} oDomRef a Dom Reference or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>placeAt</code> of <code>sap.ui.core.Control</code> instead.
 */
sap.ui.setRoot = function(oDomRef, oControl) {
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");
	jQuery.sap.assert(oControl instanceof sap.ui.base.Interface || oControl instanceof sap.ui.core.Control, "oControl must be a Control or Interface");
	
	sap.ui.getCore().setRoot(oDomRef, oControl);
};

}; // end of sap.ui.core.Core
/// cyclic dependency
//jQuery.sap.require("sap.ui.core.TooltipBase"); /// cyclic dependency

/**
 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
 * @protected
 */
sap.ui.core.Element.prototype.invalidate = function() {
	var oParent = this.getParent();
	if (oParent) {
		oParent.invalidate(this);
	}
};

/**
 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
 * @protected
 */
sap.ui.core.Element.prototype.rerender = function() {
	var oParent = this.getParent();
	if (oParent) {
		oParent.rerender();
	}
};

/**
 * Returns whether rerendering is currently suppressed on this Element
 * @return boolean
 * @protected
 */
sap.ui.core.Element.prototype.isInvalidateSuppressed = function() {
	var oParent = this.getParent(),
	    bInvalidateSuppressed = this.iSuppressInvalidate > 0;
	if (oParent && oParent instanceof sap.ui.core.Element) {
		bInvalidateSuppressed = bInvalidateSuppressed || oParent.isInvalidateSuppressed();
	}
	return bInvalidateSuppressed;
};


/**
 * Removes the given child from this element's named aggregation.
 * @see sap.ui.core.UIArea#_removeChild
 * @see sap.ui.core.Element#setParent
 *
 * @param {sap.ui.core.Element}
 *            oChild the child element to be removed
 * @param {string}
 *            sAggregationName the name of this element's aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @protected
 */
sap.ui.core.Element.prototype._removeChild = function(oChild, sAggregationName, bSuppressInvalidate) {
	if (!sAggregationName) {
		// an aggregation name has to be specified!
		jQuery.sap.log.error("Cannot remove aggregated child without aggregation name.", null, this);
	} else {
		// set suppress invalidate flag
		if (bSuppressInvalidate) {
			this.iSuppressInvalidate++;
		}
		
		var iIndex = this.indexOfAggregation(sAggregationName, oChild);
		var oAggregationInfo = this.getMetadata().getJSONKeys()[sAggregationName];
		// Note: we assume that this is the given child's parent, i.e. -1 not expected!
		if (iIndex == -2) { // 0..1
			if(this[oAggregationInfo._sMutator]) {
				this[oAggregationInfo._sMutator](null);
			}
			else {
				this.setAggregation(sAggregationName, null, bSuppressInvalidate);
			}
		} else if(iIndex > -1 ) { // 0..n
			if(this[oAggregationInfo._sRemoveMutator]) {
				this[oAggregationInfo._sRemoveMutator](iIndex);
			}
			else {
				this.removeAggregation(sAggregationName, iIndex, bSuppressInvalidate);
			}
		} else {
			// already removed!?
			// this is the unexpected -1
			// TODO: What would be better? Explicit removeCompositeChild callback on subclass?
		}
		if (!this.isInvalidateSuppressed()) {
			this.invalidate();
		}
		
		// reset suppress invalidate flag
		if (bSuppressInvalidate) {
			this.iSuppressInvalidate--;
		}
	}
};

/**
 * Defines this element's new parent. If no new parent is given, the parent is
 * just reset and we assume that the old parent has removed this child from its
 * aggregation. But if a new parent is given, this child is first removed from
 * its old parent.
 *
 * @param {sap.ui.core.Element}
 *            oParent the element that becomes this element's parent
 * @param {string}
 *            sAggregationName the name of the parent element's aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw. The old parent, however, is marked for redraw.
 * @return {sap.ui.core.Element}
 *            Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Element.prototype.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {
	if ( !oParent ) {
		this.oParent = null;
		this.sParentAggregationName = null;
		// Note: no need (and no way how) to invalidate
		return;
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	var oOldParent = this.getParent();
	if (oOldParent) { // remove this element from its old parent
		oOldParent._removeChild(this, this.sParentAggregationName);
	}
	// adopt new parent
	this.oParent = oParent;
	this.sParentAggregationName = sAggregationName;

	// update bindings
	if (this.hasModel()) {
		this.updateBindingContext();
		this.updateBindings(true);
	}

	// Only invalidate if the control already is in the HTML and has been initialized (i.e. has a parent)
	if((!this.bPrerendered || this.bPrerendered && oOldParent)) {
		if (!this.isInvalidateSuppressed()) {
			this.invalidate();
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	return this;
};

/**
 * Returns the parent control or <code>null</code> if this element hasn't been added to a parent yet.
 *
 * @return {sap.ui.core.Element} The parent control or <code>null</code>
 * @public
 */
sap.ui.core.Element.prototype.getParent = function() {
	return this.oParent;
};

/**
 * Returns the UI area of this element, if any.
 *
 * @return {sap.ui.core.UIArea} The UI area of this element or null
 * @private
 */
sap.ui.core.Element.prototype.getUIArea = function() {
	var oParent = this.getParent();
	return oParent ? oParent.getUIArea() : null;
};

/**
 * Cleans up the resources associated with this element and all its children.
 *
 * After an element has been destroyed, it can no longer be used in the UI!
 *
 * Applications should call this method if they don't need the element any longer.
 *
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @public
 */
sap.ui.core.Element.prototype.destroy = function(bSuppressInvalidate) {
	var that = this;

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}
	
	if (this.exit) {
		this.exit();
	}

	// TODO: generic concept for exit hooks?
	if ( this._exitCompositeSupport ) {
		this._exitCompositeSupport();
	}

	// ensure that also our children are destroyed!!
	for(var oAggr in this.mAggregations){
		this.destroyAggregation(oAggr, bSuppressInvalidate);
	}
	this.deregister();

	// remove this child from parent aggregation
	if (this.getParent() && this.sParentAggregationName) {
		this.getParent()._removeChild(this, this.sParentAggregationName, bSuppressInvalidate);
	}

	// Data Binding
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
		if (oBindingInfo.template) {
			that.unbindAggregation(sName);
		} else {
			that.unbindProperty(sName);
		}
	});

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	// remove this control from DOM, e.g. if there is no parent (e.g. Dialog or already removed control) or this.sParentAggregationName is not properly set
	this.$().remove();
};

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 *
 * @param {string} sEventId the event id
 * @param {object} mParameters the parameter map
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.fireEvent = function(sEventId, mParameters) {
	// TODO id added only for legacy code - to be removed in future takt
	var mParameters = mParameters || {},
		oResult;
	if ( !mParameters["id"] ) {
		mParameters["id"] = this.getId();
	}

	// Note: avoid Core's re-rendering for simple event handler changes
	var bProcess = sEventId != sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange;
	if (bProcess) {
		sap.ui.getCore().addProcessedEvent(this,sEventId);
	}
	oResult = sap.ui.base.EventProvider.prototype.fireEvent.apply(this,arguments);
	if (bProcess) {
		sap.ui.getCore().removeProcessedEvent(this,sEventId);
	}

	return oResult;
};

/**
 * Adds a delegate that listens to the events of this element.
 *
 * To avoid double registrations, all registrations of the given delegate are first
 * removed and then the delegate is added.
 * @param {sap.ui.base.EventProvider} oDelegate the delegate object
 * @param {boolean} [bCallBefore] if true, the delegator event listeners are called before the event listeners of the element
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Element.prototype.addDelegate = function (oDelegate, bCallBefore) {
	this.removeDelegate(oDelegate);
	(bCallBefore ? this.aBeforeDelegates : this.aDelegates).push(oDelegate);
	return this;
};

/**
 * Removes the given delegate from this element.
 *
 * This method will remove all registrations of the given delegate, not only one.
 * @param {sap.ui.base.EventProvider} oDelegate the delegate object
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Element.prototype.removeDelegate = function (oDelegate) {
	for (var i=0;i<this.aDelegates.length;i++) {
		if (this.aDelegates[i]==oDelegate) {
			this.aDelegates.splice(i,1);
		}
	}
	for (var i=0;i<this.aBeforeDelegates.length;i++) {
		if (this.aBeforeDelegates[i]==oDelegate) {
			this.aBeforeDelegates.splice(i,1);
		}
	}
	return this;
};

/**
 * Returns the dom reference that should get the focus
 * To be overwritten by the specific control method
 * @type DOMNode
 * @return Returns the dom reference that should get the focus
 */
sap.ui.core.Element.prototype.getFocusDomRef = function () {
	return this.getDomRef() || null;
};

/**
 * Sets the focus to the stored focus dom reference
 * @private
 */
sap.ui.core.Element.prototype.focus = function () {
	var oFocusDomRef = this.getFocusDomRef();

	if(oFocusDomRef) {
		try {
			oFocusDomRef.focus();
		} catch (ex) { // IE8 fails on focusing certain elements; IE9+10 and all other current browsers don't fail
			// the element does not exist or is not focusable; there is no information what to focus instead
			var id = oFocusDomRef.id ? " (id: " + oFocusDomRef.id + ")" : " ";
			jQuery.sap.log.warning("DOM element" + id + " in UI5 element (id: " + this.getId() + ") which should be focused cannot be focused: " + ex.message);
		}
	}
};

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @type object
 * @return an object representing the serialized focus information
 * @protected
 */
sap.ui.core.Element.prototype.getFocusInfo = function () {
	return {id:this.getId()};
};

/**
 * Applies the focus info
 * To be overwritten by the specific control method
 * @param {object} oFocusInfo
 * @protected
 */
sap.ui.core.Element.prototype.applyFocusInfo = function (oFocusInfo) {
	this.focus();
	return this;
};


/**
 * Sets a new tooltip for this object. The tooltip can either be a simple string
 * (which in most cases will be rendered as the <code>title</code> attribute of this
 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
 *
 * If a new tooltip is set, any previously set tooltip is deactivated.
 *
 * @param {string|sap.ui.core.TooltipBase} oTooltip.
 * @public
 */
sap.ui.core.Element.prototype.setTooltip = function(oTooltip) {

	var oOldTooltip = this.getTooltip();
	// if the old tooltip was a Tooltip object, remove it as a delegate
	if (oOldTooltip instanceof sap.ui.core.TooltipBase){
		this.removeDelegate(oOldTooltip);
	}
	// if the new tooltip is a Tooltip object, add it as a delegate
	if (oTooltip instanceof sap.ui.core.TooltipBase){
		oTooltip._currentControl = this;
		this.addDelegate(oTooltip);
	}
	this.setAggregation("tooltip", oTooltip);

	return this;
};

/**
 * Returns the tooltip for this element if any or an undefined value.
 * The tooltip can either be a simple string or a subclass of
 * {@link sap.ui.core.TooltipBase}.
 *
 * Callers that are only interested in tooltips of type string (e.g. to render
 * them as a <code>title</code> attribute), should call the convenience method
 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
 * instance) then they could call {@link #getTooltip_Text} instead.
 *
 * @return {string|sap.ui.core.TooltipBase} The tooltip for this Element.
 * @public
 */
sap.ui.core.Element.prototype.getTooltip = function() {
	return this.getAggregation("tooltip");
};

/**
 * Returns the tooltip for this element but only if it is a simple string.
 * Otherwise an undefined value is returned.
 *
 * @return {string} string tooltip or undefined
 * @public
 */
sap.ui.core.Element.prototype.getTooltip_AsString = function() {
	var oTooltip = this.getTooltip();
	if (typeof oTooltip === "string" || oTooltip instanceof String ) {
		return oTooltip;
	}
	return undefined;
};

/**
 * Returns the main text for the current tooltip or undefined if there is no such text.
 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
 * of that object is returned. Otherwise the object itself is returned (either a string
 * or undefined or null).
 *
 * @return {string} text of the current tooltip or undefined
 * @public
 */
sap.ui.core.Element.prototype.getTooltip_Text = function() {
	var oTooltip = this.getTooltip();
	if (oTooltip && typeof oTooltip.getText === "function" ) {
		return oTooltip.getText();
	}
	return oTooltip;
};

/**
 * Returns the runtime metadata for this UI element.
 *
 * When using the defineClass method, this function is automatically created and returns
 * a runtime representation of the design time metadata.
 *
 * @function
 * @name sap.ui.core.Element.prototype.getMetadata
 * @return {sap.ui.core.ElementMetadata} runtime metadata
 * @public
 */
// sap.ui.core.Element.prototype.getMetadata = sap.ui.base.Object.ABSTRACT_METHOD;



// DataBinding
/**
 * Determines whether a given object contains binding information instead of a
 * value or aggregated controls. The method is used in applySettings for processing
 * the JSON notation of properties/aggregations in the constructor.
 *
 * @param {object} oValue the value
 * @param {object} oKeyInfo the metadata of the property
 *
 * @returns {boolean} whether the value contains binding information
 *
 * @private
 */
sap.ui.core.Element.prototype.isBinding = function(oValue, oKeyInfo) {
	if (oValue && typeof oValue == "object" && oValue.path && oKeyInfo.type != "object") {
		return true;
	}
	if (typeof oValue == "string" && jQuery.sap.startsWith(oValue, "{") && jQuery.sap.endsWith(oValue, "}")) {
		return true;
	}
	return false;
};

/**
 * Extracts the binding info from the given value. There are two possible notations
 * for binding information in the JSON notation of the control constructor:
 * - property: "{path}"
 *   This is used for property binding and can only contain the path.
 * - property:{path:"path", template:oTemplate}
 *   This is used for aggregation binding, where a template is required or can
 *   be used for property binding when additional data is required (e.g. formatter).
 *
 * @param {object} oValue
 *
 * @returns {object} the binding info object, containing at least a path property
 *                   and, dependant of the binding type, additional properties
 *
 * @private
 */
sap.ui.core.Element.prototype.getBindingInfo = function(oValue) {
	var oBindingInfo;
	// property:{path:"path", template:oTemplate}
	if (oValue && typeof oValue == "object") {
		oBindingInfo = oValue;
	}
	// property:"{path}"
	if (typeof oValue == "string") {
		var oBindingInfo = {};
		oBindingInfo.path = oValue.substr(1, oValue.length - 2);
	}
	return oBindingInfo;
};

/**
 * Create a new binding context for an element, which is used to resolve bound properties or
 * aggregations relatively to the given path.
 * This method is useful if the binding path changes or wasn't provided in the first place
 * (e.g. master detail scenarios).
 * @param {string} sPath the binding path
 *
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.bindContext = function(sPath) {
	this.sBindingPath = sPath;
	this.updateBindingContext();
	return this;
};

/**
 * Removes the defined binding context of this element, all bindings will now resolve
 * relative to the parent context again.
 *
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.unbindContext = function() {
	this.sBindingPath = null;
	this.oBindingContext = null;
	this.updateBindingContext();
	return this;
};


/**
 * Bind a property to the model.
 * The Setter for the given property will be called with the value retrieved
 * from the data model.
 * This is a generic method which can be used to bind any property to the
 * model. A control may flag properties in the metamodel with
 * bindable="bindable" to get typed bind methods for a property.
 *
 * @param {string} sName the name of the property
 * @param {string} sPath the binding path
 * @param {object} [oFormat=null] the formatter function or sap.ui.model.Type
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way)
 *
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.bindProperty = function(sName, sPath, oFormat, sMode) {
	var sModelName,
		oBindingInfo,
		iSeparatorPos = sPath.indexOf(">"),
		fnFormatter,
		oType;
	// find out whether formatter or type has been provided
	if (typeof oFormat == "function") {
		fnFormatter = oFormat;
	}
	else if (oFormat instanceof sap.ui.model.SimpleType) {
		oType = oFormat;
	}
	// if property is already bound, unbind it first
	if (this.isBound(sName)){
		this.unbindProperty(sName);
	}
	// if a model separator is found in the path, extract model name and path
	if (iSeparatorPos > 0) {
		sModelName = sPath.substr(0, iSeparatorPos);
		sPath = sPath.substr(iSeparatorPos + 1);
	}
	// create a binding info object with all necessary information to create the binding, as soon
	// as the model is available, or when the model is changed
	oBindingInfo = {path: sPath, formatter: fnFormatter, type: oType, model: sModelName, mode: sMode || sap.ui.model.BindingMode.Default};
	this.mBindingInfos[sName] = oBindingInfo;
	
	// if the model is already available, create the binding
	if (this.getModel(sModelName)) {
		this._bindProperty(sName, oBindingInfo);
	}
	return this;
};

sap.ui.core.Element.prototype._bindProperty = function(sName, oBindingInfo) {
	var oModel = this.getModel(oBindingInfo.model),
		oContext,
		oBinding,
		oPropertyInfo = this.getMetadata().getJSONKeys()[sName],
		fnFormatter = oBindingInfo.formatter,
		oType = oBindingInfo.type,
		sInternalType = oPropertyInfo.type,
		that = this,
		fModelChangeHandler = function() {
			var oValue = oBinding.getValue();
			if (fnFormatter) {
				oValue = fnFormatter.apply(that, [oValue]);
			} 
			if (oType) {
				try {
					oValue = oType.formatValue(oValue, sInternalType);
					oBindingInfo.skipModelUpdate = true;
					that[oPropertyInfo._sMutator](oValue);
					oBindingInfo.skipModelUpdate = false;
				}catch (oException) {
					if (oException instanceof sap.ui.model.FormatException) {
						sap.ui.getCore().fireFormatError({element : that, property : sName, type : oType, newValue : oValue, oldValue : that.getProperty(sName), exception: oException});
					}else {
						throw oException;
					}
				}
			}else {
				oBindingInfo.skipModelUpdate = true;
				that[oPropertyInfo._sMutator](oValue);
				oBindingInfo.skipModelUpdate = false;
			}
		};

	// Only use context for bindings on the primary model
	oContext = oBindingInfo.sModelName ? null : this.getBindingContext();

	// Create binding object
	oBinding = oModel.bindProperty(oBindingInfo.path, oContext);
			
	// Set additional information on the binding info
	oBindingInfo.skipModelUpdate = false;
	oBindingInfo.binding = oBinding;
	oBindingInfo.modelChangeHandler = fModelChangeHandler;
	
	if (!oModel.isBindingModeSupported(oBindingInfo.mode)) {
		oBindingInfo.mode = oModel.getDefaultBindingMode();
	}
	
	// Attach to the change event of the binding and initialize value
	if (oBindingInfo.mode != sap.ui.model.BindingMode.OneTime) {
		oBinding.attachChange(fModelChangeHandler);
	}
	fModelChangeHandler();
};

/**
 * Unbind the property from the model
 *
 * @param {String} sName the name of the property
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.unbindProperty = function(sName){
	var oBindingInfo = this.mBindingInfos[sName];
	if(oBindingInfo) {
		if (oBindingInfo.binding) {
			oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
		}
		delete this.mBindingInfos[sName];
	}
	return this;
};

/**
 * Update the property in the model if two way data binding mode is enabled
 *
 * @param sName the name of the property to update
 * @param oValue the new value to set for the property in the model
 * @private
 */
sap.ui.core.Element.prototype.updateModelProperty = function(sName, oValue, oOldValue){
	if (this.isBound(sName)){
		var oBindingInfo = this.mBindingInfos[sName],
			oBinding = oBindingInfo.binding,
			oPropertyInfo = this.getMetadata().getJSONKeys()[sName],
			oType = oBindingInfo.type,
			sInternalType = oPropertyInfo.type;
		if (oBindingInfo.mode == sap.ui.model.BindingMode.TwoWay
				&& oBinding
				&& !oBindingInfo.skipModelUpdate
				&& !oBindingInfo.formatter) {
			if (oType) {
				try {
					oValue = oType.parseValue(oValue, sInternalType);
					oType.validateValue(oValue);
					oBindingInfo.binding.setValue(oValue);
					sap.ui.getCore().fireValidationSuccess({element : this, property : sName, type : oType, newValue : oValue, oldValue : oOldValue});
				}
				catch (oException) {
					if (oException instanceof sap.ui.model.ParseException) {
						sap.ui.getCore().fireParseError({element : this, property : sName, type : oType, newValue : oValue, oldValue : oOldValue, exception: oException});
					}else if (oException instanceof sap.ui.model.ValidateException) {
						sap.ui.getCore().fireValidationError({element : this, property : sName, type : oType, newValue : oValue, oldValue : oOldValue, exception: oException});
					}
					else {
						throw oException;
					}
				}
			}else {
				oBindingInfo.binding.setValue(oValue);				
			}
		}
	}
};

/**
 * Bind an aggregation to the model.
 * The bound aggregation will use the given template, clone it for each element
 * which exists in the bound list and set the appropriate binding context.
 * This is a generic method which can be used to bind any aggregation to the
 * model. A control may flag aggregations in the metamodel with
 * bindable="bindable" to get typed bind methods for an aggregation.
 *
 * @param {string} sName the aggregation to bind
 * @param {string} sPath the binding path
 * @param {sap.ui.core.Element} oTemplate the template
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters (sap.ui.model.Filter) for this aggregation (optional)
 *
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.bindAggregation = function(sName, sPath, oTemplate, oSorter, aFilters) {
	var oBindingInfo,
		iSeparatorPos = sPath.indexOf(">");
	// if aggregation is already bound, unbind it first
	if (this.isBound(sName)){
		this.unbindAggregation(sName);
	}
	// if a model separator is found, throw an error: aggregation binding is only allowed on the primary model
	if (iSeparatorPos > 0) {
		throw new Error("Tried to bind aggregation " + sName + " of control id " + this.getId() + " to a named model!");
	}
	// check whether a template has been provided, which is required for proper processing of the binding
	if (!oTemplate) {
		throw new Error("Missing template for aggregation " + sName + " of control id " + this.getId() + " !");
	}
	// create a binding info object with all necessary information to create the binding as soon as
	// the model is available, or when the model is changed
	var oBindingInfo = {path: sPath, template: oTemplate, sorter: oSorter, filters: aFilters};
	this.mBindingInfos[sName] = oBindingInfo;
	
	// if the model is already available create the binding
	if (this.getModel()) {
		this._bindAggregation(sName, oBindingInfo);
	}
	return this;
};

sap.ui.core.Element.prototype._bindAggregation = function(sName, oBindingInfo) {
	var sBindMethod = this.isTreeBinding(sName) ? "bindTree" : "bindList",
		oBinding = this.getModel()[sBindMethod](oBindingInfo.path, this.getBindingContext(), oBindingInfo.sorter, oBindingInfo.filters),
		that = this,
		fModelChangeHandler = function(oEvent){
			that.updateAggregation(sName);
		};

	oBindingInfo.binding =  oBinding;
	oBindingInfo.modelChangeHandler =  fModelChangeHandler;

	oBinding.attachChange(fModelChangeHandler);
	fModelChangeHandler();
};

/**
 * Unbind the aggregation from the model
 *
 * @param {String} sName the name of the aggregation
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.unbindAggregation = function(sName){
	var oBindingInfo = this.mBindingInfos[sName];
	if(oBindingInfo) {
		if (oBindingInfo.binding) {
			oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
		}
		delete this.mBindingInfos[sName];
	}
	return this;
};

/**
 *  This method is used internally and should only be overridden by a tree control which utilizes the tree binding.
 *  In this case and if the aggregation is a tree node the overridden method should then return true.
 *  If true is returned the tree binding will be used instead of the list binding.
 *
 *  @param {string} sName the aggregation to bind (e.g. nodes for a tree control)
 *  @return {boolean} whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
 *
 *  @protected
 */
sap.ui.core.Element.prototype.isTreeBinding = function(sName) {
	return false;
};

/**
 * Create bindings in case the model was not available at the time
 * bindProperty or bindAggregation was called
 *
 * @private
 */
sap.ui.core.Element.prototype.updateBindings = function(bUpdateAll, sModelName, bRecreate) {
	var that = this;

	// create property and aggregation bindings if they don't exist yet
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
		if (that.getModel(oBindingInfo.model) && (bUpdateAll || oBindingInfo.model == sModelName)) {
			if ( bRecreate && oBindingInfo.binding ) {
				oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
				delete oBindingInfo.binding;
			}
			if (!oBindingInfo.binding) {
				if (oBindingInfo.template) {
					that._bindAggregation(sName, oBindingInfo);
				} else {
					that._bindProperty(sName, oBindingInfo);
				}
			}
		}
	});

	// also update bindings in all child elements
	jQuery.each(this.mAggregations, function(sName, oAggregation) {
		if (oAggregation instanceof sap.ui.core.Element) {
			oAggregation.updateBindings(bUpdateAll, sModelName, bRecreate);
		} else if (oAggregation instanceof Array) {
			for (var i = 0; i < oAggregation.length; i++) {
				oAggregation[i].updateBindings(bUpdateAll, sModelName, bRecreate);
			}
		}
	});

};

/**
 * Generic method which is called, whenever an aggregation binding is changed.
 * This method deletes all elements in this aggregation and recreates them
 * according to the data model.
 * In case a control needs special handling for a aggregation binding, it can create
 * a typed update-method (e.g. "updateRows") which will be used instead of the
 * default behaviour.
 *
 * @private
 */
sap.ui.core.Element.prototype.updateAggregation = function(sName, iStartIndex, iLength) {
	var oBindingInfo = this.mBindingInfos[sName],
		sUpdater = "update" + sName.substr(0,1).toUpperCase() + sName.substr(1);
	if (this[sUpdater]) {
		this[sUpdater](oBindingInfo, iStartIndex, iLength);
		return;
	}
	var oBinding = oBindingInfo.binding,
		oTemplate = oBindingInfo.template,
		aContexts = oBinding.getContexts(iStartIndex, iLength),
		oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
		aAggregation = [],
		oClone,
		oContext,
		that = this;
	this[oAggregationInfo._sDestructor]();
	if (iStartIndex) {
		this.mAggregations[sName] = new Array(iStartIndex);
	}
	jQuery.each(aContexts, function(iIndex, oContext) {
		oClone = oTemplate.clone(that.getId() + "-" + iIndex);
		oClone.setBindingContext(oContext);
		that[oAggregationInfo._sMutator](oClone);
	});
};

/**
 * Find out whether a property or aggregation is bound
 *
 * @param {String} sName the name of the property or aggregation
 * @return {boolean} whether a binding exists for the given name
 * @public
 */
sap.ui.core.Element.prototype.isBound = function(sName){
	return (sName in this.mBindingInfos);
};

/**
 * Get the binding object for a specific aggregation/property
 *
 * @param {String} sName the name of the property or aggregation
 * @return {Binding} the binding for the given name
 * @public
 */
sap.ui.core.Element.prototype.getBinding = function(sName){
	return this.mBindingInfos[sName] && this.mBindingInfos[sName].binding;
};

/**
 * Get the binding path for a specific aggregation/property
 *
 * @param {String} sName the name of the property or aggregation
 * @return {String} the binding path for the given name
 * @protected
 */
sap.ui.core.Element.prototype.getBindingPath = function(sName){
	return this.mBindingInfos[sName] && this.mBindingInfos[sName].path;
};

/**
 * Set the binding context for this element.
 *
 * @param {Object} oContext the new binding context for this element
 * 
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.setBindingContext = function(oContext){
	this.oBindingContext = oContext;
	this.updateBindingContext();
	return this;
};

/**
 * Update the binding context in this element and all children
 * @private
 */
sap.ui.core.Element.prototype.updateBindingContext = function(bSkipLocal){

	var oModel = this.getModel(),
		oParent = this.getParent(),
		that = this;
	
	if (this.sBindingPath && !bSkipLocal) {
		if (oParent && oModel) {
			oModel.createBindingContext(this.sBindingPath, oParent.getBindingContext(), function(oContext) {
				that.oBindingContext = oContext;
				that.updateBindingContext(true);
			});
		}
		return;
	}

	var oContext = this.getBindingContext();

	// update context in existing bindings, but only for the primary model
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
		var oBinding = oBindingInfo.binding;
		if (oBinding && oBinding.getModel() == oModel) {
			oBinding.setContext(oContext);
		}
	});

	// also update context in all child elements
	jQuery.each(this.mAggregations, function(sName, oAggregation) {
		if (oAggregation instanceof sap.ui.core.Element) {
			oAggregation.updateBindingContext();
		} else if (oAggregation instanceof Array) {
			for (var i = 0; i < oAggregation.length; i++) {
				oAggregation[i].updateBindingContext();
			}
		}
	});

};


/**
 * Get the binding context of this element
 * If the element does not have a binding context set on itself, it will ask
 * the parent element for its binding context
 *
 * @return {Object} the binding context of this element
 * @public
 */
sap.ui.core.Element.prototype.getBindingContext = function(){
	if (this.oBindingContext) {
		return this.oBindingContext;
	}
	return this.getParent() && this.getParent().getBindingContext();
};

/**
 * Set the model for databinding
 * @param {sap.ui.model.Model} oModel
 * @param {string} [sName]
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Element.prototype.setModel = function(oModel, sName) {
	if ( oModel !== this.oModels[sName] ) {
		this.oModels[sName] = oModel;
		// update binding context, for primary model only
		if (!sName){this.updateBindingContext();}
		// if the model changes, all bindings have to be recreated (at least those to the previous model)
		this.updateBindings(false, sName, true);
	}
	return this;
};

/**
 * Get the model for databinding
 * If the element does not have a model set on itself, it will ask
 * the parent element for the model to use
 * @param {string} [sName]
 * @return {sap.ui.model.Model} oModel
 * @public
 */
sap.ui.core.Element.prototype.getModel = function(sName) {
	return this.oModels[sName] || (this.getParent() && this.getParent().getModel(sName));
};

/**
 * Check if a Model is set to the Element or to one of its Parents (including UIArea and Core)
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.Element.prototype.hasModel = function() {
	if (!jQuery.isEmptyObject(this.oModels) || (this.getParent() && this.getParent().hasModel())) {
		return true;
	} else {
		return false;
	}
};

/**
 * Clone an element
 *
 * @param {String} [sIdSuffix] a suffix to be appended to the cloned element id
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 */
sap.ui.core.Element.prototype.clone = function(sIdSuffix){
	var oClass = this.getMetadata()._oClass,
		sId = this.getId() + "-" + (sIdSuffix || jQuery.sap.uid()),
		mSettings = jQuery.extend({},this.mProperties),
		oClone;

	// Clone aggregations
	jQuery.each(this.mAggregations, function(sName, oAggregation) {
		if (oAggregation instanceof sap.ui.core.Element) {
			mSettings[sName] = oAggregation.clone(sIdSuffix);
		} else if (jQuery.isArray(oAggregation)) {
			mSettings[sName] = [];
			for (var i = 0; i < oAggregation.length; i++) {
				mSettings[sName].push(oAggregation[i].clone(sIdSuffix));
			}
		} else {
			// must be an alt type
			mSettings[sName] = oAggregation;
		}
	});

	// Clone associations
	jQuery.each(this.mAssociations, function(sName, oAssociation) {
		// Note: 1:1 assignment is okay even for 1..n associations. applySettings() clones the array nevertheless
		mSettings[sName] = oAssociation;
	});

	// Create clone instance
	oClone = new oClass(sId, mSettings);

	// Clone events
	jQuery.each(this.mEventRegistry, function(sName, aListeners) {
		oClone.mEventRegistry[sName] = aListeners.slice();
	});

	// Clone models
	jQuery.each(this.oModels, function(sName, oModel) {
		oClone.setModel(oModel, sName);
	});
	
	// Clone bindings
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
		if (oBindingInfo.template) {
			oClone.bindAggregation(sName, oBindingInfo.path, oBindingInfo.template, oBindingInfo.sorter, oBindingInfo.filters);
		} else {
			oClone.bindProperty(sName, oBindingInfo.model ? oBindingInfo.model + ">" + oBindingInfo.path : oBindingInfo.path, oBindingInfo.type || oBindingInfo.formatter, oBindingInfo.mode);
		}
	});

	return oClone;
};

/**
 * Maps the given aggregation with name <code>sOldAggrName</code>
 * on aggregation <code>sNewAggrName</code> (When calling an accessor function
 * of the old aggregation the call is forwarded to the corresponding accessor
 * function of the new aggregation).
 *
 * This function should help to perform a smooth transition for users of a control
 * when an aggregation must be renamed.
 *
 * Both aggregations must have a mutiple cardinality (0..n) and must have the same
 * aggregated type!
 *
 * @param {object}
 *			oPrototype Control/Element prototype for which a mapping should be defined
 * @param {string}
 *			sOldAggrName Name of the old deprecated aggregation
 * @param {string}
 *			sNewAggrName Name of the new aggregation
 * @deprecated
 */
sap.ui.core.Element._mapAggregation = function(oPrototype, sOldAggrName, sNewAggrName){
	var mKeys = oPrototype.getMetadata().getJSONKeys();
	var oOldAggrInfo = mKeys[sOldAggrName];
	var oNewAggrInfo = mKeys[sNewAggrName];

	//Check whether aggregations exist and are multiple.
	if(!oOldAggrInfo || !oNewAggrInfo || oOldAggrInfo._iKind != 2 || oNewAggrInfo._iKind != 2) {
		return;
	}

	var mFunc = {"insert" : true, "add" : true, "remove" : true, "removeAll" : false, "indexOf" : true, "destroy" : false, "get" : false};

	function method(sPrefix, sName) {
		return sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
	}

	function fAggrDelegator(sFuncName){
		return function() {
			return this[sFuncName].apply(this, arguments);
		};
	}

	for(var sPrefix in mFunc){
		var sOldFuncName = method(sPrefix, mFunc[sPrefix] ? oOldAggrInfo.singularName : oOldAggrInfo._sName);
		var sNewFuncName = method(sPrefix, mFunc[sPrefix] ? oNewAggrInfo.singularName : oNewAggrInfo._sName);
		oPrototype[sOldFuncName] = fAggrDelegator(sNewFuncName);
	}
};

}; // end of sap.ui.core.Element


/**
 * If called on the prototype of a sap.ui.core.Element, the Element (and its prototype) is extended
 * to support custom style classes.
 * 
 * WARNING: only to be used WITHIN a control implementation. An application cannot add style class support by calling this method!
 *  
 * The methods "addStyleClass", "removeStyleClass" and "hasStyleClass" are added to the Element and the clone() method 
 * is extended to also clone the custom classes. 
 * 
 * Usage example:
 * jQuery.sap.require("sap.ui.core.CustomStyleClassSupport");
 * sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutCell.prototype);
 * 
 * Each renderer handling the given Element MUST then call 
 * renderManager.writeClasses(oElement);
 * when writing the root tag of the Element. This makes sure the classes are written to the HTML.
 * 
 * @public
 */
sap.ui.core.CustomStyleClassSupport = function () {
	// "this" is the protoype now when called with apply()
	
	// Ensure only Elements are enhanced
	if(!(this instanceof sap.ui.core.Element)) {
		return;
	}
	
	// enrich original clone function
	var fOriginalClone = this.clone;
	this.clone = function() {
		// call original clone function
		var oClone = fOriginalClone.apply(this, arguments);

		// add the style classes of "this" to the clone
		if (this.aCustomStyleClasses) {
			oClone.aCustomStyleClasses = this.aCustomStyleClasses.slice();
		} 
		return oClone;
	};
	

	this.addStyleClass = function(sStyleClass, bSuppressRerendering) {
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");
		
		if (!this.aCustomStyleClasses) {
			this.aCustomStyleClasses = [];
		}
		if (sStyleClass) {
			// ensure the "class" attribute is not closed
			if (sStyleClass.indexOf("\"") > -1) {
				return this;
			}
			if (sStyleClass.indexOf("'") > -1) {
				return this;
			} // TODO: maybe check for quotes in different charsets or encodings

			// multiple calls should not add the class multiple times
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					return this;
				}
			}

			this.aCustomStyleClasses.push(sStyleClass);
			var oRoot = this.getDomRef();
			if (oRoot) { // non-rerendering shortcut
				jQuery(oRoot).addClass(sStyleClass);
			} else if (!bSuppressRerendering) {
				this.invalidate();
			}
		}

		return this;
	};
	
	
	this.removeStyleClass = function(sStyleClass, bSuppressRerendering) { // bSuppressRerendering is experimental and hence undocumented
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");
		
		if (sStyleClass && this.aCustomStyleClasses) {
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					this.aCustomStyleClasses.splice(i, 1);
					var oRoot = this.getDomRef();
					if (oRoot) { // non-rerendering shortcut
						jQuery(oRoot).removeClass(sStyleClass);
					} else if (!bSuppressRerendering) {
						this.invalidate();
					}
				}
			}
		}

		return this;
	};
	
	
	this.hasStyleClass = function(sStyleClass) {
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");
		
		if (sStyleClass && this.aCustomStyleClasses) {
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					return true;
				}
			}
		}
		return false;
	};
	
	this.getMetadata().addPublicMethods(["addStyleClass", "removeStyleClass", "hasStyleClass"]);
	
};

}; // end of sap.ui.core.CustomStyleClassSupport
if ( !jQuery.sap.isDeclared('sap.ui.test.ControlTree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a control tree to be used in the Eclipse preview editor
jQuery.sap.declare("sap.ui.test.ControlTree");




/*global addProperty, callback, restoreLockState, restoreTreeCallback,supplySelectedTheme, *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * Constructs the class <code>sap.ui.test.ControlTree</code> and registers
 * to the <code>sap.ui.core.Core</code> for UI change events.
 *
 * @class Control Tree used for the Test Environment
 * @author SAPUI5 Designtime
 * @version 1.2.0
 *
 * @param {sap.ui.core.Core}
 *            oCore the core instance to use for analysis
 * @param {window}
 *            oWindow reference to the window object
 *
 * @constructor
 * @private
 */
sap.ui.test.ControlTree = function(oCore, oWindow) {
	this.oWindow = oWindow;
	this.oCore = oCore;
	this.oCore.attachUIUpdated(this.renderDelayed, this);
	this.renderDelayed(); // additionally necessary due to first UI update
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.test.ControlTree.prototype.renderDelayed = function() {
	if (this.oTimer) {
		this.oWindow.jQuery.sap.clearDelayedCall(this.oTimer);
	}
	this.oTimer = this.oWindow.jQuery.sap.delayedCall(500,this,"initDT");
	//Provide a callback when the UI is updated
	restoreLockState(this);
	supplySelectedTheme(this.oCore.getConfiguration().getTheme());
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.test.ControlTree.prototype.initDT = function() {
	//Make a Callback to reset the Outline Tree
	restoreTreeCallback();

	var oUIArea = null,
		oUIAreas = this.oCore.mUIAreas;
		//alert("initcontrol tree");
	for (var i in oUIAreas) {
		var oUIArea = oUIAreas[i],
			oDomNode = this.createTreeNodeDT(oUIArea.getId(),0,"UIArea");

		var aRootControls = oUIArea.getContent();
		for(var i = 0, l = aRootControls.length; i < l; i++) {
			this.renderNodeDT(aRootControls[i],0);
		}
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.test.ControlTree.prototype.createTreeNodeDT = function(sId,iLevel,sType) {
	callback(sId,iLevel,sType);
};

sap.ui.test.ControlTree.prototype.createAssocTreeNodeDT = function(sId,iLevel,sType,srcCntrlId,trgtCntrlId) {
	callback(sId,iLevel,sType,srcCntrlId,trgtCntrlId);
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.test.ControlTree.prototype.renderNodeDT = function(oControl,iLevel) {

	if (!oControl) {
		return;
	}

	var oMetadata = oControl.getMetadata();

	var oDomNode = this.createTreeNodeDT(oControl.getId(),iLevel+1, oMetadata.getName());

	var mProperties = oMetadata.getAllProperties();
	for (var sPropertyName in mProperties) {
		var oMethod =  oControl["get" + sPropertyName];
		var sName = sPropertyName;
		if (!oMethod) {
			sName = jQuery.sap.charToUpperCase(sName,0);
		}
		var oValue = oControl["get" + sName]();
		addProperty(oControl.getId(), sPropertyName, mProperties[sPropertyName].type, oValue!=null?oValue:"");
	}

	var mAggregations = oMetadata.getAllAggregations();
	for (var n in mAggregations) {
		// Ensure to analyze the actual element/control instance, not just its metadata!
		var oAggregation = oControl.getAggregation(mAggregations[n].name);
		if (oAggregation && oAggregation.length) {
			for (var i=0;i<oAggregation.length;i++) {
				var o = oAggregation[i];
				if (o instanceof sap.ui.core.Element) {
					this.renderNodeDT(oAggregation[i],iLevel+1);
				}
			}
		} else if (oAggregation instanceof sap.ui.core.Element) {
			this.renderNodeDT(oAggregation,iLevel+1);
		}
	}


	//Get all the associations
	var mAssociations = oMetadata.getAllAssociations();
	for (var m in mAssociations) {
		var oAssociation = oControl.getAssociation(mAssociations[m].name);//Returns the association Name

		if(null!=oAssociation) {
			//Construct the Association Name
			var assocId = mAssociations[m].name+oAssociation;
			this.createAssocTreeNodeDT(assocId,iLevel+2,"Association",oControl.getId(),oAssociation);
			//Add the properties of the association here
			addProperty(assocId,mAssociations[m].name,"assoc_type",oAssociation);
			addProperty(assocId, "Name", "string", mAssociations[m].name);

		}
	}
};
}; // end of sap.ui.test.ControlTree
if ( !jQuery.sap.isDeclared('sap.ui.debug.Highlighter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a helper that can highlight a given control
jQuery.sap.declare("sap.ui.debug.Highlighter");



/**
 * Creates a new highlighter object without displaying it.
 *
 * The DOM node is not created until the first call to method {@link #highlight}.
 *
 * @param {string} [sId] id that is used by the new highlighter
 * @param {boolean} [bFilled] whether the box of the highlighter is partially opaque (20%), defaults to false
 * @param {string} [sColor] the CSS color of the border and the box (defaults to blue)
 * @param {int} [iBorderWidth] the width of the border
 *
 * @class Helper class to display a colored rectangle around and above a given DOM node
 * @author Frank Weigel
 * @since 0.8.7
 * @public
 */
sap.ui.debug.Highlighter = function(sId, bFilled, sColor, iBorderWidth) {
	this.sId = sId || jQuery.sap.uid();
	this.bFilled = (bFilled == true);
	this.sColor = sColor || 'blue';
	if ( isNaN(iBorderWidth ) ) {
		this.iBorderWidth = 2;
	} else if ( iBorderWidth <= 0 ) {
		this.iBorderWidth = 0;
	} else {
		this.iBorderWidth = iBorderWidth;
	}
};

/**
 * Shows a rectangle/box that surrounds the given DomRef.
 *
 * If this is the first call to {@link #highlight} for this instance, then
 * a DOM node for the highlighter is created in the same document as the given <code>oDomRef</code>.
 *
 * <b>Note:</b> As the DOM node is reused across multiple calls, the highlighter must only be used
 * within a single document.
 */
sap.ui.debug.Highlighter.prototype.highlight = function(oDomRef) {
	if (!oDomRef || !oDomRef.parentNode) {
		return;
	}

	var oHighlightRect = jQuery.sap.domById(this.sId);
	if (!oHighlightRect) {
		oHighlightRect = oDomRef.ownerDocument.createElement("DIV");
		oHighlightRect.setAttribute("id", this.sId);
		oHighlightRect.style.position = "absolute";
		oHighlightRect.style.border = this.iBorderWidth + "px solid " + this.sColor;
		oHighlightRect.style.display = "none";
		oHighlightRect.style.margin = "0px";
		oHighlightRect.style.padding = "0px";
		if ( this.bFilled ) {
			oHighlightRect.innerHTML = "<div style='background-color:" + this.sColor + ";opacity:0.2;filter:progid:DXImageTransform.Microsoft.Alpha(opacity=20);height:100%;width:100%'>&nbsp;</div>";
		}
		oDomRef.ownerDocument.body.appendChild(oHighlightRect);
	}
	var oRect = jQuery(oDomRef).rect();
	oHighlightRect.style.top = (oRect.top-this.iBorderWidth) + "px";
	oHighlightRect.style.left = (oRect.left-this.iBorderWidth) + "px";
	oHighlightRect.style.width = (oRect.width) + "px";
	oHighlightRect.style.height = (oRect.height) + "px";
	oHighlightRect.style.display = "block";
};

/**
 * Hides the rectangle/box if it is currently shown.
 */
sap.ui.debug.Highlighter.prototype.hide = function() {
	var oHighlightRect = jQuery.sap.domById(this.sId);
	if (!oHighlightRect) {
		return;
	}
	oHighlightRect.style.display = "none";
};
}; // end of sap.ui.debug.Highlighter
if ( !jQuery.sap.isDeclared('sap.ui.debug.ControlTree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a tree of controls for the testsuite
jQuery.sap.declare("sap.ui.debug.ControlTree");

/**
 * Constructs the class <code>sap.ui.debug.ControlTree</code> and registers
 * to the <code>sap.ui.core.Core</code> for UI change events.
 *
 * @param {sap.ui.core.Core}
 *            oCore the core instance to use for analysis
 * @param {window}
 *            oWindow reference to the window object
 * @param {DOMNode}
 *            oParentDomRef reference to the parent DOM element
 *
 * @constructor
 *
 * @class Control Tree used for the Debug Environment
 * @extends sap.ui.base.EventProvider
 * @author Martin Schaus, Frank Weigel
 * @version 1.2.0
 * @private
 */
sap.ui.debug.ControlTree = function(oCore, oWindow, oParentDomRef, bRunsEmbedded) {
	sap.ui.base.EventProvider.apply(this,arguments);
	this.oWindow = oWindow;
	this.oDocument = oWindow.document;
	this.oCore = oCore;
	this.oSelectedNode = null;
	this.oParentDomRef = oParentDomRef;
	this.oSelectionHighlighter = new sap.ui.debug.Highlighter("sap-ui-testsuite-SelectionHighlighter");
	this.oHoverHighlighter = new sap.ui.debug.Highlighter("sap-ui-testsuite-HoverHighlighter", true, '#c8f', 1);
	var that = this;
	jQuery(oParentDomRef).bind("click",function(evt) {
		that.onclick(evt);
	})
	.bind("mouseover",function(evt) {
		that.onmouseover(evt);
	})
	.bind("mouseout",function(evt) {
		that.onmouseout(evt);
	});
	this.enableInplaceControlSelection();// see below...
	this.oCore.attachUIUpdated(this.renderDelayed, this);
	this.sSelectedNodeId = "";
	this.sResourcePath = bRunsEmbedded ? jQuery.sap.getModulePath("", "/") : (window.top.testfwk.sResourceRoot || "../");
	this.sTestResourcePath = this.sResourcePath + "../test-resources/";
	this.sSpaceUrl = this.sResourcePath + "testsuite/images/space.gif";
	this.sMinusUrl = this.sResourcePath + "testsuite/images/minus.gif";
	this.sPlusUrl = this.sResourcePath + "testsuite/images/plus.gif";
	this.sLinkUrl = this.sResourcePath + "testsuite/images/link.gif";
};
sap.ui.debug.ControlTree.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

sap.ui.base.Object.defineClass("sap.ui.debug.ControlTree", {
		// ---- object ----
		baseType : "sap.ui.base.EventProvider",
		publicMethods : []
	});

/** events of the ControlTree */
sap.ui.debug.ControlTree.M_EVENTS = {
	SELECT : "SELECT"
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.exit = function() {
	jQuery(document).unbind();
	jQuery(this.oParentDomRef).unbind();
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.renderDelayed = function() {
	if (this.oTimer) {
		this.oWindow.jQuery.sap.clearDelayedCall(this.oTimer);
	}
	this.oTimer = this.oWindow.jQuery.sap.delayedCall(0,this,"render");
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.render = function() {
	var oDomRef = this.oParentDomRef;
	var oUIArea = null,
		oUIAreas = this.oCore.mUIAreas;
	oDomRef.innerHTML = "";
	for (var i in oUIAreas) {
		var oUIArea = oUIAreas[i],
			oDomNode = this.createTreeNodeDomRef(oUIArea.getId(),0,"UIArea", this.sTestResourcePath + "sap/ui/core/images/controls/sap.ui.core.UIArea.gif");
		oDomRef.appendChild(oDomNode);

		var aRootControls = oUIArea.getContent();
		for(var i = 0, l = aRootControls.length; i < l; i++){
			this.renderNode(oDomRef,aRootControls[i],1);
		}
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.createTreeNodeDomRef = function(sId,iLevel,sType,sIcon) {
	var oDomNode = this.oParentDomRef.ownerDocument.createElement("DIV");
	oDomNode.setAttribute("id","sap-debug-controltree-" + sId);
	var sShortType = sType.substring(sType.lastIndexOf(".")>-1?sType.lastIndexOf(".")+1:0);
	oDomNode.innerHTML = "<img style='height:12px;width:12px;display:none' src='" + this.sSpaceUrl + "' align='absmiddle'/><img style='height:16px;width:16px' src='" + sIcon + "' align='absmiddle'/>&nbsp;<span>" + sShortType + " - " + sId+"</span>";
	oDomNode.style.overflow = "hidden";
	oDomNode.style.whiteSpace = "nowrap";
	oDomNode.style.textOverflow = "ellipsis";
	oDomNode.style.paddingLeft = (iLevel * 16) + "px";
	oDomNode.style.height = "20px";
	oDomNode.style.cursor = "default";
	oDomNode.setAttribute("sap-type",sType);
	oDomNode.setAttribute("sap-id",sId);
	oDomNode.setAttribute("sap-expanded","true");
	oDomNode.setAttribute("sap-level","" + iLevel);
	oDomNode.title = sType + " - " + sId;
	return oDomNode;
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.createLinkNode = function(oParentRef, sId, iLevel, sType) {
	var oDomNode = this.oParentDomRef.ownerDocument.createElement("DIV");
	oDomNode.setAttribute("id","sap-debug-controltreelink-" + sId);
	var sShortType = sType ? sType.substring(sType.lastIndexOf(".")>-1?sType.lastIndexOf(".")+1:0) : "";
	oDomNode.innerHTML = "<img style='height:12px;width:12px;display:none' src='" + this.sSpaceUrl + "' align='absmiddle'/><img style='height:12px;width:12px' src='" + this.sLinkUrl + "' align='absmiddle'/>&nbsp;<span style='color:#888;border-bottom:1px dotted #888;'>" + (sShortType ? sShortType + " - " : "") + sId+"</span>";
	oDomNode.style.overflow = "hidden";
	oDomNode.style.whiteSpace = "nowrap";
	oDomNode.style.textOverflow = "ellipsis";
	oDomNode.style.paddingLeft = (iLevel * 16) + "px";
	oDomNode.style.height = "20px";
	oDomNode.style.cursor = "default";
	oDomNode.setAttribute("sap-type","Link");
	oDomNode.setAttribute("sap-id",sId);
	oDomNode.setAttribute("sap-expanded","true");
	oDomNode.setAttribute("sap-level","" + iLevel);
	oDomNode.title = "Association to '" + sId + "'";
	oParentRef.appendChild(oDomNode);
	return oDomNode;
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.renderNode = function(oDomRef,oControl,iLevel) {
	if (!oControl) {
		return;
	}

	var oMetadata = oControl.getMetadata();
	var sIcon = this.sTestResourcePath + oMetadata.getLibraryName().replace(/\./g, "/") + "/images/controls/"+oMetadata.getName()+".gif";
	var oDomNode = this.createTreeNodeDomRef(oControl.getId(),iLevel,oMetadata.getName(),sIcon);
	oDomRef.appendChild(oDomNode);
	var bRequiresExpanding = false;
	if (oControl.mAggregations) {
		for (var n in oControl.mAggregations) {
			bRequiresExpanding = true;
			var oAggregation = oControl.mAggregations[n];
			if (oAggregation && oAggregation.length) {
				for (var i=0;i<oAggregation.length;i++) {
					var o = oAggregation[i];
					if (o  instanceof sap.ui.core.Element) {
						this.renderNode(oDomRef,oAggregation[i],iLevel+1);
					}
				}
			} else if (oAggregation instanceof sap.ui.core.Element) {
				this.renderNode(oDomRef,oAggregation,iLevel+1);
			}
		}
	}
	if (oControl.mAssociations) {
		for (var n in oControl.mAssociations) {
			bRequiresExpanding = true;
			var oAssociation = oControl.mAssociations[n];
			if (jQuery.isArray(oAssociation)) {
				for (var i=0;i<oAssociation.length;i++) {
					var o = oAssociation[i];
					if (typeof o === "string") {
						this.createLinkNode(oDomRef, o, iLevel+1);
					}
				}
			} else if (typeof oAssociation === "string") {
				this.createLinkNode(oDomRef, oAssociation, iLevel+1);
			}
		}
	}
	if ( bRequiresExpanding ) {
		var oExpandImage = oDomNode.getElementsByTagName("IMG")[0];
		oExpandImage.src=this.sMinusUrl;
		oExpandImage.style.display="";
	}

};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.onclick = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if (oSource.tagName == "IMG") {
		var oParent = oSource.parentNode,
			iLevel = parseInt(oParent.getAttribute("sap-level"), 10),
			oNextNode = oParent.nextSibling,
			bExpanded = oParent.getAttribute("sap-expanded") == "true";
		// propagate expanded state to all children
		oSource = oParent.firstChild;
		if (oNextNode) {
			var iNextLevel = parseInt(oNextNode.getAttribute("sap-level"), 10);
			while (oNextNode && iNextLevel > iLevel) {
				var oExpandImage = oNextNode.getElementsByTagName("IMG")[0];
				if (bExpanded) {
					oNextNode.style.display = "none";
					oNextNode.setAttribute("sap-expanded","false");
					if ( oExpandImage && oExpandImage.src !== this.sSpaceUrl ) {
						oExpandImage.src = this.sPlusUrl;
					}
				} else {
					oNextNode.style.display = "block";
					oNextNode.setAttribute("sap-expanded","true");
					if ( oExpandImage && oExpandImage.src !== this.sSpaceUrl ) {
						oExpandImage.src = this.sMinusUrl;
					}
				}
				oNextNode = oNextNode.nextSibling;
				if (oNextNode) {
					iNextLevel = parseInt(oNextNode.getAttribute("sap-level"), 10);
				}
			}
		}
		if (bExpanded) {
			oSource.src = this.sPlusUrl;
			oParent.setAttribute("sap-expanded","false");
		} else {
			oSource.src = this.sMinusUrl;
			oParent.setAttribute("sap-expanded","true");
		}

	} else if (oSource.getAttribute("sap-type") == "UIArea") {

	} else {
		if (oSource.tagName != "SPAN") {
			oSource = oSource.getElementsByTagName("SPAN")[0];
		}
		var oParent = oSource.parentNode,
			sId = oParent.getAttribute("sap-id"),
			oElement = this.oCore.getElementById(sId),
			sNodeId = oParent.getAttribute("sap-type") === "Link" ? "sap-debug-controltree-" + sId : oParent.id;
		this.oSelectionHighlighter.hide();
		if (oElement && oElement instanceof sap.ui.core.Element) {
			this.oSelectionHighlighter.highlight(oElement.getDomRef());
			this.oHoverHighlighter.hide();
		}
		this.deselectNode(this.sSelectedNodeId);
		this.selectNode(sNodeId);
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.onmouseover = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if (oSource.tagName=="SPAN") {
		this.oHoverHighlighter.highlight(this.getTargetDomRef(oSource.parentNode));
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.onmouseout = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if (oSource.tagName=="SPAN") {
		if ( this.getTargetDomRef(oSource.parentNode) ) {
			this.oHoverHighlighter.hide();
		}
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.selectNode = function(sId) {
	if (!sId) {
		return;
	}
	var oDomRef = jQuery.sap.domById(sId, jQuery.sap.ownerWindow(this.oParentDomRef));
	if ( !oDomRef ) {
		jQuery.sap.log.warning("Control with Id '" + sId.substring(22) + "' not found in tree");
		return;
	}
	var	sControlId = oDomRef.getAttribute("sap-id");
	var oSpan = oDomRef.getElementsByTagName("SPAN")[0];
	oSpan.style.backgroundColor = "#000066";
	oSpan.style.color = "#FFFFFF";
	this.sSelectedNodeId = sId;

	this.fireEvent(sap.ui.debug.ControlTree.M_EVENTS.SELECT,{id:sId, controlId: sControlId});
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.ControlTree.prototype.deselectNode = function(sId) {
	if (!sId) {
		return;
	}
	var oDomRef = jQuery.sap.domById(sId, jQuery.sap.ownerWindow(this.oParentDomRef));
	var oSpan = oDomRef.getElementsByTagName("SPAN")[0];
	oSpan.style.backgroundColor = "transparent";
	oSpan.style.color = "#000000";
	this.sSelectedNodeId = sId;
};

/**
 * Tries to find the innermost DOM node in the source window that contains the
 * SAPUI5 element/UIArea identified by the given tree node.
 *
 * If elements in the hierarchy don't return a value for {@link sap.ui.core.Element#getDomRef}
 * (e.g. because they don't render a DOM node with their own id), enclosing parents
 * are checked until the UIArea is reached.
 *
 * @param oTreeNodeDomRef the tree node to start the search for
 * @return {DOMNode} best matching source DOM node
 * @private
 */
sap.ui.debug.ControlTree.prototype.getTargetDomRef = function(oTreeNodeDomRef) {
	var sType = oTreeNodeDomRef.getAttribute("sap-type"),
		sId = oTreeNodeDomRef.getAttribute("sap-id"),
		oSomething = sType === "UIArea" ? this.oCore.getUIArea(sId) : this.oCore.getElementById(sId);

	while (oSomething && oSomething instanceof sap.ui.core.Element) {
		var oDomRef = oSomething.getDomRef();
		if ( oDomRef ) {
			return oDomRef;
		}
		oSomething = oSomething.getParent();
	}

	if ( oSomething instanceof sap.ui.core.UIArea ) {
		return oSomething.getRootNode();
	}
};

/**
 * Enables an 'onhover' handler in the content window that allows to see control borders.
 * @private
 */
sap.ui.debug.ControlTree.prototype.enableInplaceControlSelection = function() {
	var that = this;
	jQuery(document).bind("mouseover" , function (oEvt) { that.selectControlInTree(oEvt); });
};

sap.ui.debug.ControlTree.prototype.selectControlInTree = function( oEvt ) {
	if ( oEvt ) {
	  if ( oEvt.ctrlKey && oEvt.shiftKey && !oEvt.altKey ) {
		  var oControl = oEvt.srcElement || oEvt.target;
		  while (oControl && (!oControl.id || !this.oCore.getControl(oControl.id )) ) {
			oControl = oControl.parentNode;
		}
		 if ( oControl && oControl.id && this.oCore.getControl(oControl.id ) ) {
			this.oHoverHighlighter.highlight(oControl);
		 } else {
		// this.selectControlInTreeByCtrlId(sId);
			  this.oHoverHighlighter.hide();
		 }

	  } else {
		  this.oHoverHighlighter.hide();
	  }
	}
};
}; // end of sap.ui.debug.ControlTree
if ( !jQuery.sap.isDeclared('sap.ui.debug.LogViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a log viewer for debug purposes
jQuery.sap.declare("sap.ui.debug.LogViewer");

/**
 * Constructs a LogViewer in the given window, embedded into the given DOM element.
 * If the DOM element doesn't exist, a DIV is created.
 *
 * @param {Window} oTargetWindow the window where the log will be displayed in
 * @param {sRootId} sRootId id of the top level element that will contain the log entries
 *
 * @class HTML LogViewer that displays all entries of a Logger, as long as they match a filter and a minimal log level
 */
sap.ui.debug.LogViewer = function(oWindow, sRootId) {
	this.oWindow = oWindow;
	this.oDomNode = oWindow.document.getElementById(sRootId);
	if (!this.oDomNode) {
		var oDiv = this.oWindow.document.createElement("DIV");
		oDiv.setAttribute("id", sRootId);
		oDiv.style.overflow="auto";
		oDiv.style.tabIndex="-1";
		oDiv.style.position="absolute";
		oDiv.style.bottom="0px";
		oDiv.style.left="0px";
		oDiv.style.right="202px";
		oDiv.style.height="200px";
		oDiv.style.border="1px solid gray";
		oDiv.style.fontFamily = "Arial monospaced for SAP,monospace";
		oDiv.style.fontSize   = "11px";
		this.oWindow.document.body.appendChild(oDiv);
		this.oDomNode = oDiv;
	}
	this.iLogLevel = 3; /* jQuery.sap.log.LogLevel.INFO */
	this.sLogEntryClassPrefix = undefined;
	this.clear();
	this.setFilter(sap.ui.debug.LogViewer.NO_FILTER);
};

sap.ui.debug.LogViewer.NO_FILTER = function(oLogMessage) { return true; };

sap.ui.debug.LogViewer.prototype.clear = function() {
	this.oDomNode.innerHTML = "";
};

/**
 * Returns an XML escaped version of a given string sText
 * @param {string} sText the string that is escaped.
 * @return {string} an XML escaped version of a given string sText
 * @private
 */
sap.ui.debug.LogViewer.xmlEscape = function(sText) {
	sText = sText.replace(/\&/g, "&amp;");
	sText = sText.replace(/\</g, "&lt;");
	sText = sText.replace(/\"/g, "&quot;");
	return sText;
};
/**
 * Renders a single log entry to the DOM. Could be overwritten in subclasses.
 * @protected
 */
sap.ui.debug.LogViewer.prototype.addEntry = function(oLogEntry) {

	var oDomEntry = this.oWindow.document.createElement("div");

	// style the entry
	if ( this.sLogEntryClassPrefix ) {
		// note: setting a class has only an effect when the main.css is loaded (testsuite)
		oDomEntry.className = this.sLogEntryClassPrefix + oLogEntry.level;
	} else {
		oDomEntry.style.overflow="hidden";
		oDomEntry.style.textOverflow="ellipsis";
		oDomEntry.style.height="1.3em";
		oDomEntry.style.width="100%";
		oDomEntry.style.whiteSpace="noWrap";
	}

	// create text as text node
	var sText = sap.ui.debug.LogViewer.xmlEscape(oLogEntry.time + "  " + oLogEntry.message),
		oTextNode = this.oWindow.document.createTextNode(sText);
	oDomEntry.appendChild(oTextNode);
	oDomEntry.title = oLogEntry.message;

	// filter
	oDomEntry.style.display = this.oFilter(sText) ? "" : "none";

	this.oDomNode.appendChild(oDomEntry);

	return oDomEntry;
};

sap.ui.debug.LogViewer.prototype.fillFromLogger = function(iFirstEntry) {
	this.clear();
	this.iFirstEntry = iFirstEntry;
	if ( !this.oLogger ) {
		return;
	}

	// when attached to a log, clear the dom node and add all entries from the log
	var aLog = this.oLogger.getLog();
	for (var i=this.iFirstEntry,l=aLog.length;i<l;i++) {
		if ( aLog[i].level <= this.iLogLevel ) {
			this.addEntry(aLog[i]);
		}
	}

	this.scrollToBottom();
};

sap.ui.debug.LogViewer.prototype.scrollToBottom = function() {
	this.oDomNode.scrollTop = this.oDomNode.scrollHeight;
};

sap.ui.debug.LogViewer.prototype.truncate = function() {
	this.clear();
	this.fillFromLogger(this.oLogger.getLog().length);
};

sap.ui.debug.LogViewer.prototype.setFilter = function(oFilter) {
	this.oFilter = oFilter = oFilter || sap.ui.debug.LogViewer.NO_FILTER;
	var childNodes = this.oDomNode.childNodes;
	for (var i=0,l=childNodes.length; i<l; i++) {
		var sText = childNodes[i].innerText;
		if (!sText) {
			sText = childNodes[i].innerHTML;
		}
		childNodes[i].style.display = oFilter(sText) ? "" : "none";
	}
	this.scrollToBottom();
};

sap.ui.debug.LogViewer.prototype.setLogLevel = function(iLogLevel) {
	this.iLogLevel = iLogLevel;
	if ( this.oLogger ) {
		this.oLogger.setLevel(iLogLevel);
	}
	// fill and filter again
	this.fillFromLogger(this.iFirstEntry);
};

sap.ui.debug.LogViewer.prototype.lock = function() {
	this.bLocked = true;
	//this.oDomNode.style.backgroundColor = 'gray'; // marker for 'locked' state
};

sap.ui.debug.LogViewer.prototype.unlock = function() {
	this.bLocked = false;
	//this.oDomNode.style.backgroundColor = ''; // clear 'locked' marker
	this.fillFromLogger(0);
	// this.addEntry({ time : '---------', message: '---------------', level : 3});
};

sap.ui.debug.LogViewer.prototype.onAttachToLog = function(oLogger) {
	this.oLogger = oLogger;
	this.oLogger.setLevel(this.iLogLevel);
	if ( !this.bLocked ) {
		this.fillFromLogger(0);
	}
};

sap.ui.debug.LogViewer.prototype.onDetachFromLog = function(oLogger) {
	this.oLogger = undefined;
	this.fillFromLogger(0); // clears the viewer
};

sap.ui.debug.LogViewer.prototype.onLogEntry = function(oLogEntry) {
	if ( !this.bLocked ) {
		var oDomRef = this.addEntry(oLogEntry);
		if ( oDomRef && oDomRef.style.display !== 'none' ) {
			this.scrollToBottom();
		}
	}
};
}; // end of sap.ui.debug.LogViewer
if ( !jQuery.sap.isDeclared('sap.ui.debug.PropertyList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a (modifiable) list of properties for a given control
jQuery.sap.declare("sap.ui.debug.PropertyList");






/**
 * Constructs the class <code>sap.ui.debug.PropertyList</code>.
 *
 * @class HTML Property list for a <code>sap.ui.core.Control</code> in the
 * Debug Environment
 *
 * @extends sap.ui.base.EventProvider
 * @author Martin Schaus
 * @version 1.2.0
 *
 * @param {sap.ui.core.Core}
 *            oCore the core instance to use for analysis
 * @param {window}
 *            oWindow reference to the window object
 * @param {object}
 *            oParentDomRef reference to the parent DOM element
 *
 * @constructor
 * @private
 */
sap.ui.debug.PropertyList = function(oCore, oWindow, oParentDomRef) {
	sap.ui.base.EventProvider.apply(this,arguments);
	this.oWindow = oWindow;
	this.oParentDomRef = oParentDomRef;
//	this.oCore = oWindow.sap.ui.getCore();
	this.oCore = oCore;
	this.bEmbedded = top.window == oWindow; // check only with ==, not === as the test otherwise fails on IE8
	this.mProperties = {};
	var that = this;
	jQuery(oParentDomRef).bind("click",function(evt) {
		that.onclick(evt);
	})
	.bind("focusin",function(evt) {
		that.onfocus(evt);
	})
	.bind("keydown",function(evt) {
		that.onkeydown(evt);
	});
	if ( !this.bEmbedded ) {
		jQuery(oParentDomRef).bind("mouseover",function(evt) {
			that.onmouseover(evt);
		})
		.bind("mouseout",function(evt) {
			that.onmouseout(evt);
		});
	}
	//this.oParentDomRef.style.backgroundColor = "#e0e0e0";
	this.oParentDomRef.style.border = "solid 1px gray";
	this.oParentDomRef.style.padding = "2px";

};
sap.ui.debug.PropertyList.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.exit = function() {
	jQuery(this.oParentDomRef).unbind();
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.update = function(oParams) {
	var sControlId = oParams.getParameter("controlId");
	this.oParentDomRef.innerHTML = "";

	var oControl = this.oCore.getElementById(sControlId);
	if (!oControl) {
		this.oParentDomRef.innerHTML = "Please select a valid control";
		return;
	}
	if(!oControl.getMetadata || !oControl.getMetadata()){
		this.oParentDomRef.innerHTML = "Control does not provide Metadata.";
		return;
	}
	this.mProperties = {};
	var oMetadata = oControl.getMetadata(),
		aHTML = [];
	aHTML.push("<span data-sap-ui-quickhelp='" + this._calcHelpId(oMetadata) + "'>Type : " + oMetadata.getName() + "</span><br >");
	aHTML.push("Id : " + oControl.getId() + "<br >");
	aHTML.push("<button id='sap-debug-propertylist-apply' sap-id='"+sControlId+"' style='border:solid 1px gray;background-color:#d0d0d0;font-size:8pt;'>Apply Changes</button>");
	if ( !this.bEmbedded ) {
		aHTML.push("<div id='sap-ui-quickhelp' style='position:fixed;display:none;padding:5px;background-color:rgb(200,220,231);border:1px solid gray;overflow:hidden'>Help</div>");
	}
	aHTML.push("<div style='border-bottom:1px solid gray'>&nbsp;</div><table cellspacing='1' style='font-size:8pt;width:100%;table-layout:fixed'>");

	while( oMetadata instanceof sap.ui.core.ElementMetadata ) {
		var mProperties = oMetadata.getProperties();
		var bHeaderCreated = false;
		if ( !jQuery.isEmptyObject(mProperties) ) {
			if ( !bHeaderCreated && oMetadata !== oControl.getMetadata() ) {
				aHTML.push("<tr><td colspan=\"2\">BaseType: ");
				aHTML.push(oMetadata.getName());
				aHTML.push("</td></tr>");
				bHeaderCreated = true;
			}
			oMetadata.getJSONKeys(); // side effect: properties are enriched with _oParent
			this.printProperties(aHTML, oControl, mProperties);
		}
		var mProperties = this.getAggregationsAsProperties(oMetadata);
		if ( !jQuery.isEmptyObject(mProperties) ) {
			if ( !bHeaderCreated && oMetadata !== oControl.getMetadata() ) {
				aHTML.push("<tr><td colspan=\"2\">BaseType: ");
				aHTML.push(oMetadata.getName());
				aHTML.push("</td></tr>");
				bHeaderCreated = true;
			}
			oMetadata.getJSONKeys(); // side effect: properties are enriched with _oParent
			this.printProperties(aHTML, oControl, mProperties);
		}
		oMetadata = oMetadata.getParent();
	}

	aHTML.push("</table>");
	this.oParentDomRef.innerHTML = aHTML.join("");
	this.mHelpDocs = {};
};

sap.ui.debug.PropertyList.prototype.getAggregationsAsProperties = function(oMetadata) {

	function isSimpleType(sType) {
		if ( !sType ) {
			return false;
		}

		if ( sType.indexOf("[]") > 0 ) {
			sType = sType.substring(sType.indexOf("[]"));
		}

		if ( sType === "boolean" || sType === "string" || sType === "int" || sType === "float" ) {
			return true;
		}

		if ( sType === "void" ) {
			return false;
		}

		// TODO check for enum

		return false;
	}

	var oResult = {};
	for(var sAggrName in oMetadata.getAggregations() ) {
		var oAggr = oMetadata.getAggregations()[sAggrName];
		if ( oAggr.altTypes && oAggr.altTypes[0] && isSimpleType(oAggr.altTypes[0]) ) {
			oResult[sAggrName] = { name : sAggrName, type : oAggr.altTypes[0], _oParent : oAggr._oParent };
		}
	}
	return oResult;

};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.printProperties = function(aHTML, oControl, mProperties, bAggregation) {
	for (var i in mProperties) {
		var sName = i,
			sType = mProperties[i].type,
			oMethod =  oControl["get" + sName];
		if (!oMethod) {
			sName = jQuery.sap.charToUpperCase(sName,0);
		}
		var oValue = oControl["get" + sName]();
		aHTML.push("<tr><td>");
		this.mProperties[sName] = sType;
		aHTML.push("<span data-sap-ui-quickhelp='", this._calcHelpId(mProperties[i]._oParent, i), "' >", sName, '</span>');
		aHTML.push("</td><td>");
		if (sType == "string" || sType == "int" || sType == "float" || jQuery.sap.endsWith(sType, "[]")) {
			var sColor='', sTitle='';
			if ( oValue === null ) {
				sColor = 'color:#a5a5a5;';
				oValue = '(null)';
			} else if ( oValue  instanceof sap.ui.core.Element ) {
				sColor = 'color:#a5a5a5;';
				if (jQuery.isArray(oValue)) {
					// array type (copied from primitive values above and modified the value to string / comma separated)
					oValue = oValue.join(", ");
				} else {
					oValue = oValue.toString();
				}
				sTitle = ' title="This aggregation currently references an Element. You can set a ' + sType +  ' value instead"';
			}
			aHTML.push("<input type='text' style='width:100%;font-size:8pt;background-color:#f5f5f5;"+sColor+"' value='"+ jQuery.sap.escapeHTML("" + oValue)+"'" + sTitle + " sap-name='"+sName+"'/>");
		} else if (sType == "boolean") {
			aHTML.push("<input type='checkbox' sap-name='"+sName+"' ");
			if (oValue == true) {
				aHTML.push("checked='checked'");
			}
			aHTML.push("/>");
		} else if (sType != "void"){
			//Enum or Custom Type
			var oEnum = jQuery.sap.getObject(sType);
			if (!oEnum || oEnum instanceof sap.ui.base.DataType) {
				aHTML.push("<input type='text' style='width:100%;font-size:8pt;background-color:#f5f5f5;' value='"+ jQuery.sap.escapeHTML("" + oValue)+"'" + sTitle + " sap-name='"+sName+"'/>");
			} else {
				aHTML.push("<select style='width:100%;font-size:8pt;background-color:#f5f5f5;' sap-name='"+sName+"'>");
				sType = sType.replace("/",".");
				for (var n in oEnum) {
					aHTML.push("<option ");
					if (n==oValue) {
						aHTML.push(" selected ");
					}
					aHTML.push("value='"+sType+"."+n+"'>");
					aHTML.push(n);
					aHTML.push("</option>");
				}
				aHTML.push("</select>");
			}
		} else {
			aHTML.push("&nbsp;");
		}
		aHTML.push("</td></tr>");
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.onkeydown = function(oEvent) {
	if (oEvent.keyCode == 13) {
		this.applyChanges("sap-debug-propertylist-apply");
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.onclick = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if (oSource.id == "sap-debug-propertylist-apply") {
		this.applyChanges("sap-debug-propertylist-apply");
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.onfocus = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if (oSource.tagName === "INPUT" && oSource.getAttribute("sap-name") ) {
		if ( oSource.style.color === '#a5a5a5' /* && oSource.value === '(null)' */ ) {
			oSource.style.color = '';
			oSource.value = '';
		}
	}
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.applyChanges = function(sId) {
	var oSource = this.oParentDomRef.ownerDocument.getElementById(sId),
		sControlId = oSource.getAttribute("sap-id"),
		oControl = this.oCore.getElementById(sControlId),
		aInput = oSource.parentNode.getElementsByTagName("INPUT"),
		aSelect = oSource.parentNode.getElementsByTagName("SELECT");

	for (var i=0; i< aInput.length; i++) {
		var oInput = aInput[i],
			sName = oInput.getAttribute("sap-name");
			oMethod = oControl["set"+sName];
		if (!oMethod) {
			sName = jQuery.sap.charToUpperCase(sName,0);
		}
		if (oControl["set"+sName]) {
			var oType = sap.ui.base.DataType.getType(this.mProperties[sName]);
			var vValue = this.mProperties[sName] === "boolean" ? oInput.checked : oType.parseValue(oInput.value);
			if (oType.isValid(vValue) && vValue !== "(null)" ) {
				oControl["set"+sName](vValue);
			}
		}
	}
	for (var i=0; i< aSelect.length; i++) {
		var oSelect = aSelect[i],
			sName = oSelect.getAttribute("sap-name"),
			oMethod = oControl["set"+sName];
		if (!oMethod) {
			sName = jQuery.sap.charToUpperCase(sName,0);
		}
		var	oValue = null;
		if (oSelect.value) {
			eval("oValue = " + oSelect.value);
			oControl["set"+sName](oValue);
		}
	}
	this.oCore.applyChanges();
};

sap.ui.debug.PropertyList.prototype.showQuickHelp = function(oSource) {
	if ( this.oQuickHelpTimer ) {
		clearTimeout(this.oQuickHelpTimer);
		this.oQuickHelpTimer = undefined;
	}
	var oTooltipDomRef = this.oParentDomRef.ownerDocument.getElementById("sap-ui-quickhelp");
	if ( oTooltipDomRef ) {
		this.sCurrentHelpId = oSource.getAttribute("data-sap-ui-quickhelp");
		var oRect = jQuery(oSource).rect();
		oTooltipDomRef.style.left = (oRect.left + 40 + 10) + "px";
		oTooltipDomRef.style.top = (oRect.top - 40) + "px";
		oTooltipDomRef.style.display = 'block';
		oTooltipDomRef.style.opacity = '0.2';
		oTooltipDomRef.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=20)';
		if ( this.mHelpDocs[this.sCurrentHelpId] ) {
			this.updateQuickHelp(this.mHelpDocs[this.sCurrentHelpId], 2000);
		} else {
			oTooltipDomRef.innerHTML = "<b>Quickhelp</b> for " + this.sCurrentHelpId + " is being retrieved...";
			this.sCurrentHelpDoc = this.sCurrentHelpId;
			this.sCurrentHelpDocPart = undefined;
			if ( this.sCurrentHelpId.indexOf('#') >= 0 ) {
				this.sCurrentHelpDoc = this.sCurrentHelpId.substring(0, this.sCurrentHelpId.indexOf('#'));
				this.sCurrentHelpDocPart = this.sCurrentHelpId.substring(this.sCurrentHelpId.indexOf('#')+1);
			}
			var sUrl = this.oWindow.jQuery.sap.getModulePath(this.sCurrentHelpDoc, ".control");
			var that = this;
			jQuery.ajax({
				async: true,
				url : sUrl,
				dataType : 'xml',
				error : function(xhr,status) { that.receiveQuickHelp(undefined); },
				success : function(data) { that.receiveQuickHelp(data); }
			});
			this.oQuickHelpTimer = setTimeout(function () { that.hideQuickHelp(); }, 2000);
		}
	}
};

// ---- Quickhelp ----

sap.ui.debug.PropertyList.prototype.receiveQuickHelp = function(oDocument) {
	if ( oDocument ) {
		var oControlNode = oDocument.getElementsByTagName("control")[0];
		if ( oControlNode ) {
			// debugger;
			function get(oXMLNode, sName) {
				var result = [];
				var oCandidate = oXMLNode.firstChild;
				while ( oCandidate ) {
					if ( sName === oCandidate.nodeName ) {
						result.push(oCandidate);
					}
					oCandidate = oCandidate.nextSibling;
				};
				return result;
			};
			var aName = get(oControlNode, "name");
			var sName = '';
			if ( aName[0] ) {
				sName = aName[0].text || aName[0].textContent;
			}
			var aDocumentation = get(oControlNode, "documentation");
			if ( aDocumentation[0] ) {
				if ( sName && aDocumentation[0] ) {
					var doc=[];
					doc.push("<div style='font-size:10pt;font-weight:bold;padding:5px 0px;margin-bottom:5px;border-bottom:1px solid gray'>", sName.replace('/', '.'), "</div>");
					doc.push("<div style='padding:2px 0px;'>", aDocumentation[0].text || aDocumentation[0].textContent, "</div>");
					this.mHelpDocs[this.sCurrentHelpDoc] = doc.join("");
				}
			}
			var aProperties = get(oControlNode, "properties");
			if ( aProperties[0] ) {
				aProperties = get(aProperties[0], "property");
			}
			for(var i = 0, l = aProperties.length; i < l; i++) {
				var oProperty = aProperties[i];
				var sName = oProperty.getAttribute("name");
				var sType = oProperty.getAttribute("type") || "string";
				var sDefaultValue = oProperty.getAttribute("defaultValue") || "empty/undefined";
				var aDocumentation = get(oProperty, "documentation");
				if ( sName && aDocumentation[0] ) {
					var doc=[];
					doc.push("<div style='font-size:10pt;font-weight:bold;padding:3px 0px;margin-bottom:3px;border-bottom:1px solid gray'>", sName, "</div>");
					doc.push("<div style='padding:2px 0px;'><i><strong>Type</strong></i>: ", sType, "</div>");
					doc.push("<div style='padding:2px 0px;'>", aDocumentation[0].text || aDocumentation[0].textContent, "</div>");
					doc.push("<div style='padding:2px 0px;'><i><strong>Default Value</strong></i>: ", sDefaultValue, "</div>");
					this.mHelpDocs[this.sCurrentHelpDoc + "#" + sName] = doc.join("");
				}
			};
			var aProperties = get(oControlNode, "aggregations");
			if ( aProperties[0] ) {
				aProperties = get(aProperties[0], "aggregation");
			}
			for(var i = 0, l = aProperties.length; i < l; i++) {
				var oProperty = aProperties[i];
				var sName = oProperty.getAttribute("name");
				var sType = oProperty.getAttribute("type") || "sap.ui.core/Control";
				var sDefaultValue = oProperty.getAttribute("defaultValue") || "empty/undefined";
				var aDocumentation = get(oProperty, "documentation");
				if ( sName && aDocumentation[0] && !this.mHelpDocs[this.sCurrentHelpDoc + "#" + sName]) {
					var doc=[];
					doc.push("<div style='font-size:10pt;font-weight:bold;padding:3px 0px;margin-bottom:3px;border-bottom:1px solid gray'>", sName, "</div>");
					doc.push("<div style='padding:2px 0px;'><i><strong>Type</strong></i>: ", sType, "</div>");
					doc.push("<div style='padding:2px 0px;'>", aDocumentation[0].text || aDocumentation[0].textContent, "</div>");
					doc.push("<div style='padding:2px 0px;'><i><strong>Default Value</strong></i>: ", sDefaultValue, "</div>");
					this.mHelpDocs[this.sCurrentHelpDoc + "#" + sName] = doc.join("");
				}
			};
		}
		if ( this.mHelpDocs[this.sCurrentHelpId] ) {
			this.updateQuickHelp(this.mHelpDocs[this.sCurrentHelpId], 2000);
		}
		else {
			this.updateQuickHelp(undefined, 0);
		}
	} else {
		this.updateQuickHelp(undefined, 0);
	};
};

sap.ui.debug.PropertyList.prototype.updateQuickHelp = function(sNewContent, iTimeout) {
	if ( this.oQuickHelpTimer ) {
		clearTimeout(this.oQuickHelpTimer);
		this.oQuickHelpTimer = undefined;
	}
	var oTooltipDomRef = this.oParentDomRef.ownerDocument.getElementById("sap-ui-quickhelp");
	if ( oTooltipDomRef ) {
		if ( !sNewContent ) {
			oTooltipDomRef.innerHTML = "<i>No quick help...</i>";;
			oTooltipDomRef.style.display = 'none';
		} else {
			oTooltipDomRef.innerHTML = sNewContent;
			var that = this;
			this.oQuickHelpTimer = setTimeout(function () { that.hideQuickHelp(); }, iTimeout);
		}
	}
};

sap.ui.debug.PropertyList.prototype.hideQuickHelp = function() {
	var oTooltipDomRef = this.oParentDomRef.ownerDocument.getElementById("sap-ui-quickhelp");
	if ( oTooltipDomRef ) {
		oTooltipDomRef.style.display = 'none';
	}
	this.bMovedOverTooltip = false;
};

sap.ui.debug.PropertyList.prototype._calcHelpId = function(oMetadata, sName) {
	var sHelpId = oMetadata.getName();
	if ( sName ) {
		sHelpId = sHelpId + "#" + sName;
	}
	return sHelpId;
};

sap.ui.debug.PropertyList.prototype._isChildOfQuickHelp = function(oDomRef) {
	while ( oDomRef ) {
		if ( oDomRef.id === "sap-ui-quickhelp" ) {
			return true;
		}
		oDomRef = oDomRef.parentNode;
	};
	return false;
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.onmouseover = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if ( this._isChildOfQuickHelp(oSource) ) {
		// if the user enteres the tooltip with the mouse, we don't close it automatically
		if ( this.oQuickHelpTimer ) {
			clearTimeout(this.oQuickHelpTimer);
			this.oQuickHelpTimer = undefined;
		}
		this.bMovedOverTooltip = true;
		var oTooltipDomRef = this.oParentDomRef.ownerDocument.getElementById("sap-ui-quickhelp");
		if ( oTooltipDomRef ) {
			oTooltipDomRef.style.opacity = '';
			oTooltipDomRef.style.filter = '';
		};
	} else if ( oSource.getAttribute("data-sap-ui-quickhelp") ) {
		this.showQuickHelp(oSource);
	};
};

/**
 * TODO: missing internal JSDoc... @author please update
 * @private
 */
sap.ui.debug.PropertyList.prototype.onmouseout = function(oEvent) {
	var oSource = oEvent.srcElement || oEvent.target;
	if ( this._isChildOfQuickHelp(oSource) ) {
		if ( this.oQuickHelpTimer ) {
			clearTimeout(this.oQuickHelpTimer);
			this.oQuickHelpTimer = undefined;
		}
		this.bMovedOverTooltip = false;
		var that = this;
		this.oQuickHelpTimer = setTimeout(function () { that.hideQuickHelp(); }, 50);
	} else if (oSource.getAttribute("data-sap-ui-quickhelp")) {
		if ( this.oQuickHelpTimer ) {
			clearTimeout(this.oQuickHelpTimer);
			this.oQuickHelpTimer = undefined;
		}
		if ( !this.bMovedOverTooltip ) {
			var that = this;
			this.oQuickHelpTimer = setTimeout(function () { that.hideQuickHelp(); }, 800);
		};
	}
};
}; // end of sap.ui.debug.PropertyList
if ( !jQuery.sap.isDeclared('sap.ui.model.Binding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides an abstraction for model bindings
jQuery.sap.declare("sap.ui.model.Binding");


/**
 * Constructor for Binding class.
 *
 * @class
 * The Binding is the object, which holds the necessary information for a data binding,
 * like the binding path and the binding context, and acts like an interface to the
 * model for the control, so it is the event provider for changes in the data model
 * and provides getters for accessing properties or lists.
 *
 * @param {sap.ui.model.Model} the model
 * @param {String} sPath the path
 * @param {Object} oContext the context object
 * @abstract
 * @public
 */
sap.ui.model.Binding = function(oModel, sPath, oContext){
	sap.ui.base.EventProvider.apply(this);

	this.sPath = sPath;
	this.oContext = oContext;
	this.oModel = oModel;

};
sap.ui.model.Binding.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

/*
 * Describe the sap.ui.model.Binding.
 * Resulting metadata can be obtained via sap.ui.model.Binding.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.Binding", {

  // ---- object ----
  baseType : "sap.ui.base.Object",
  publicMethods : [
	// methods
	"getPath", "getContext", "getModel", "attachChange", "detachChange"
  ]

});

// Getter
/**
 * Getter for path
 * @return {String} the binding path
 */
sap.ui.model.Binding.prototype.getPath = function() {
	return this.sPath;
};

/**
 * Getter for context
 * @return {Object} the context object
 */
sap.ui.model.Binding.prototype.getContext = function() {
	return this.oContext;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.Binding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this._fireChange();
	}
};

/**
 * Getter for model
 * @return {sap.ui.core.Model} the model
 */
sap.ui.model.Binding.prototype.getModel = function() {
	return this.oModel;
};

// Eventing and related
/**
 * Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.Binding.prototype.attachChange = function(fnFunction, oListener) {
	if (!this.hasListeners("_change")) {
		this.oModel.addBinding(this);
	}
	this.attachEvent("_change", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.Binding.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("_change", fnFunction, oListener);
	if (!this.hasListeners("_change")) {
		this.oModel.removeBinding(this);
	}
};

/**
 * Fire event _change to attached listeners.

 * @param {Map}
 *         mArguments the arguments to pass along with the event.
 * @private
 */
sap.ui.model.Binding.prototype._fireChange = function(mArguments) {
	this.fireEvent("_change", mArguments);
};
}; // end of sap.ui.model.Binding
if ( !jQuery.sap.isDeclared('sap.ui.model.PropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides an abstract property binding.
jQuery.sap.declare("sap.ui.model.PropertyBinding");


/**
 * Constructor for PropertyBinding
 *
 * @class
 * The PropertyBinding is used to access single data values in the data model.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @abstract
 * @public
 */
sap.ui.model.PropertyBinding = function(oModel, sPath, oContext){
	sap.ui.model.Binding.apply(this, arguments);
};
sap.ui.model.PropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.Binding.prototype);

/*
 * Describe the sap.ui.model.PropertyBinding.
 * Resulting metadata can be obtained via sap.ui.model.PropertyBinding.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.PropertyBinding", {

  // ---- object ----
  baseType : "sap.ui.model.Binding",
  publicMethods : [
	// methods
	"getValue", "setValue"
  ]

});

// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.PropertyBinding.prototype.getValue
 * @return {object} the current value of the bound target
 *
 * @public
 */

/**
 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 *
 * @function
 * @name sap.ui.model.PropertyBinding.prototype.setValue
 * @param {object} oValue the value to set for this binding
 *
 * @public
 */
}; // end of sap.ui.model.PropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.FilterOperator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides enumeration sap.ui.model.FilterOperator
jQuery.sap.declare("sap.ui.model.FilterOperator");

/**
* @class
* Operators for the Filter.
*
* @static
* @public
*/
sap.ui.model.FilterOperator = {
		/**
		 * FilterOperator equals
		 * @public
		 */
		EQ: "EQ",

		/**
		 * FilterOperator not equals
		 * @public
		 */
		NE: "NE",

		/**
		 * FilterOperator less than
		 * @public
		 */
		LT: "LT",

		/**
		 * FilterOperator less or equals
		 * @public
		 */
		LE: "LE",

		/**
		 * FilterOperator greater than
		 * @public
		 */
		GT: "GT",

		/**
		 * FilterOperator greater or equals
		 * @public
		 */
		GE: "GE",

		/**
		 * FilterOperator between
		 * @public
		 */
		BT: "BT",

		/**
		 * FilterOperator contains
		 * @public
		 */
		Contains: "Contains",

		/**
		 * FilterOperator starts with
		 * @public
		 */
		StartsWith: "StartsWith",

		/**
		 * FilterOperator ends with
		 * @public
		 */
		EndsWith: "EndsWith"
};
}; // end of sap.ui.model.FilterOperator
if ( !jQuery.sap.isDeclared('sap.ui.model.Filter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.Filter");


/**
 * Constructor for Filter
 *
 * @class
 * Filter for the list binding
 *
 *
 * @param {String} sPath the binding path for this filter
 * @param {sap.ui.model.FilterOperator} sOperator Operator used for the filter
 * @param {Object} oValue1 First value to use for filter
 * @param {Object} [oValue2=null] Second value to use for filter (optional)
 * @public
 */
sap.ui.model.Filter = function(sPath, sOperator, oValue1, oValue2){
	this.sPath = sPath;
	this.sOperator = sOperator;
	this.oValue1 = oValue1;
	this.oValue2 = oValue2;
};
sap.ui.model.Filter.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
}; // end of sap.ui.model.Filter
if ( !jQuery.sap.isDeclared('sap.ui.model.Sorter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the concept of a sorter for list bindings
jQuery.sap.declare("sap.ui.model.Sorter");

/**
 *
 * Constructor for Sorter
 *
 * @class
 * Sorter for the list binding
 * This object defines the sort order for the list binding.
 *
 *
 * @param {String} sPath the binding path used for sorting
 * @param {boolean} [bDescending=false] whether the sort order should be descending
 * @public
 */
sap.ui.model.Sorter = function(sPath, bDescending){
	this.sPath = sPath;
	this.bDescending = bDescending;
};
sap.ui.model.Sorter.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
}; // end of sap.ui.model.Sorter
if ( !jQuery.sap.isDeclared('sap.ui.model.resource.ResourcePropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the Resource model implementation of a property binding
jQuery.sap.declare("sap.ui.model.resource.ResourcePropertyBinding");


/**
 *
 * @class
 * Property binding implementation for resource bundles
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.resource.ResourcePropertyBinding = function(oModel, sPath){
	sap.ui.model.PropertyBinding.apply(this, arguments);

	this.oValue = this.oModel.getProperty(sPath);
};
sap.ui.model.resource.ResourcePropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.PropertyBinding.prototype);

//chain the prototypes
sap.ui.base.Object.defineClass("sap.ui.model.resource.ResourcePropertyBinding", {

  // ---- object ----
  baseType : "sap.ui.model.PropertyBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * @see sap.ui.model.PropertyBinding.prototype.getValue
 */
sap.ui.model.resource.ResourcePropertyBinding.prototype.getValue = function(){
	return this.oValue;
};
}; // end of sap.ui.model.resource.ResourcePropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.TreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.TreeBinding");


/**
 * Constructor for TreeBinding
 *
 * @class
 * The TreeBinding is a specific binding for trees in the model, which can be used
 * to populate Trees.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @abstract
 * @public
 */
sap.ui.model.TreeBinding = function(oModel, sPath, oContext){
	sap.ui.model.Binding.apply(this, arguments);
};
sap.ui.model.TreeBinding.prototype = jQuery.sap.newObject(sap.ui.model.Binding.prototype);

/*
 * Describe the sap.ui.model.TreeBinding.
 * Resulting metadata can be obtained via sap.ui.model.TreeBinding.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.TreeBinding", {

  // ---- object ----
  baseType : "sap.ui.model.Binding",
  publicMethods : [
	// methods
	"getRootContexts", "getNodeContexts", "filter"
  ]

});

// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.getRootContexts
 * @return {Array} the array of child contexts for the root node
 *
 * @public
 */

/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.getNodeContexts
 * @param {Object} oContext the context element of the node
 * @return {Array} the array of child contexts for the given node
 *
 * @public
 */

/**
 * Filters the tree according to the filter definitions.
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.TreeBinding.prototype.attachFilter = function(fnFunction, oListener) {
	this.attachEvent("_filter", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.TreeBinding.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("_filter", fnFunction, oListener);
};

/**
 * Fire event _filter to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 */
sap.ui.model.TreeBinding.prototype._fireFilter = function(mArguments) {
	this.fireEvent("_filter", mArguments);
};
}; // end of sap.ui.model.TreeBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.control.ControlPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the JSON model implementation of a property binding
jQuery.sap.declare("sap.ui.model.control.ControlPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.control.ControlPropertyBinding = function(oModel, sPath, oContext){
	sap.ui.model.PropertyBinding.apply(this, arguments);
	this.oValue = this._getValue();
};
sap.ui.model.control.ControlPropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.PropertyBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.control.ControlPropertyBinding", {

  // ---- object ----
  baseType : "sap.ui.model.PropertyBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 */
sap.ui.model.control.ControlPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};

/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.control.ControlPropertyBinding.prototype._getValue = function () {
	return this.oContext.getProperty(this.sPath);
};

/**
 * Setter for context
 */
sap.ui.model.control.ControlPropertyBinding.prototype.setContext = function(oContext) {
	this.oContext = oContext;
	this.checkUpdate();
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * @protected
 */
sap.ui.model.control.ControlPropertyBinding.prototype.checkUpdate = function() {
	var oValue = this._getValue();
	if(oValue !== this.oValue) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange();
	}
};
}; // end of sap.ui.model.control.ControlPropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.ListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.ListBinding");




/**
 * Constructor for ListBinding
 *
 * @class
 * The ListBinding is a specific binding for lists in the model, which can be used
 * to populate Tables or ItemLists.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @abstract
 * @public
 */
sap.ui.model.ListBinding = function(oModel, sPath, oContext){
	sap.ui.model.Binding.apply(this, arguments);
};
sap.ui.model.ListBinding.prototype = jQuery.sap.newObject(sap.ui.model.Binding.prototype);

/*
 * Describe the sap.ui.model.ListBinding.
 * Resulting metadata can be obtained via sap.ui.model.ListBinding.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.ListBinding", {

  // ---- object ----
  baseType : "sap.ui.model.Binding",
  publicMethods : [
	// methods
	"getContexts", "sort", "attachSort", "detachSort", "filter", "attachFilter", "detachFilter", "getDistinctValues"
  ]

});

// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.getContexts
 * @return {Array} the array of contexts for each row of the bound list
 *
 * @public
 */

/**
 * Filters the list according to the filter definitions
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */

/**
 * Sorts the list according to the sorter object
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.sort
 * @param {sap.ui.model.Sorter} oSorter the Sorter object which defines the sort order
 *
 * @public
 */

// base methods, may be overridden by child classes
/**
 * Returns list of distinct values for the given relative binding path
 *
 * @param {String} sPath the relative binding path
 * @return {Array} the array of distinct values. 
 *
 * @public
 */
sap.ui.model.ListBinding.prototype.getDistinctValues = function(sPath) {
	return null;
};

//Eventing and related
/**
 * Attach event-handler <code>fnFunction</code> to the '_sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.ListBinding.prototype.attachSort = function(fnFunction, oListener) {
	this.attachEvent("_sort", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the '_sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.ListBinding.prototype.detachSort = function(fnFunction, oListener) {
	this.detachEvent("_sort", fnFunction, oListener);
};

/**
 * Fire event _change to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 */
sap.ui.model.ListBinding.prototype._fireSort = function(mArguments) {
	this.fireEvent("_sort", mArguments);
};

/**
 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.ListBinding.prototype.attachFilter = function(fnFunction, oListener) {
	this.attachEvent("_filter", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function. 
 * @protected
 */
sap.ui.model.ListBinding.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("_filter", fnFunction, oListener);
};

/**
 * Fire event _filter to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 */
sap.ui.model.ListBinding.prototype._fireFilter = function(mArguments) {
	this.fireEvent("_filter", mArguments);
};
}; // end of sap.ui.model.ListBinding
if ( !jQuery.sap.isDeclared('sap.ui.core.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.core (1.2.0)
 */
jQuery.sap.declare("sap.ui.core.library");

/**
 * The SAPUI5 Core Runtime. 
 *   
 *   Contains the UI5 jQuery plugin (jQuery.sap.*), the Core and all its components, 
 *   base classes for Controls and the Model View Controller components.
 *
 * @namespace
 * @name sap.ui.core
 * @public
 */


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.core",
  types: [
    "sap.ui.core.AccessibleRole",
    "sap.ui.core.BarColor",
    "sap.ui.core.CSSSize",
    "sap.ui.core.Design",
    "sap.ui.core.HorizontalAlign",
    "sap.ui.core.ID",
    "sap.ui.core.ImeMode",
    "sap.ui.core.OpenState",
    "sap.ui.core.ScrollBarAction",
    "sap.ui.core.Scrolling",
    "sap.ui.core.TextAlign",
    "sap.ui.core.TextDirection",
    "sap.ui.core.ValueState",
    "sap.ui.core.VerticalAlign",
    "sap.ui.core.Wrapping",
    "boolean",
    "float",
    "int",
    "sap.ui.core.mvc.ViewType",
    "object",
    "string",
    "void"
  ],
  interfaces: [],
  controls: [
    "sap.ui.core.Control",
    "sap.ui.core.HTML",
    "sap.ui.core.ScrollBar",
    "sap.ui.core.mvc.JSONView",
    "sap.ui.core.mvc.JSView",
    "sap.ui.core.mvc.View",
    "sap.ui.core.mvc.XMLView"
  ],
  elements: [
    "sap.ui.core.Element",
    "sap.ui.core.Item",
    "sap.ui.core.ListItem",
    "sap.ui.core.SeparatorItem",
    "sap.ui.core.TooltipBase"
  ],
  version: "1.2.0"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.AccessibleRole.
jQuery.sap.declare("sap.ui.core.AccessibleRole");

/**
 * @class Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.AccessibleRole = {
  
    /**
     * No explicit role is applicable. An AccessibleName should be specified for the control.
     *  
     * @public
     */
    None : "None",

    /**
     * A message with an alert or error information.
     *  
     * @public
     */
    Alert : "Alert",

    /**
     * A separate window with an alert or error information.
     *  
     * @public
     */
    AlertDialog : "AlertDialog",

    /**
     * A software unit executing a set of tasks for the user. 
     * @public
     */
    Application : "Application",

    /**
     * Usually defined as the advertisement at the top of a web page.
     * The banner content typically contains the site or company logo, or other key advertisements.
     *  
     * @public
     */
    Banner : "Banner",

    /**
     * Allows user-triggered actions.
     *  
     * @public
     */
    Button : "Button",

    /**
     * A control that has three possible values: true, false, mixed. 
     * @public
     */
    Checkbox : "Checkbox",

    /**
     * A table cell containing header information for a column. 
     * @public
     */
    ColumnHeader : "ColumnHeader",

    /**
     * Allows selecting an item from a list, or to enter data directly in the input field. 
     * @public
     */
    Combobox : "Combobox",

    /**
     * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
     *  
     * @public
     */
    ContentInfo : "ContentInfo",

    /**
     * The content of the associated element represents a definition.
     * If there is a definition element within the content, this one represents the term being defined.
     *  
     * @public
     */
    Definition : "Definition",

    /**
     * Descriptive content for a page element. 
     * @public
     */
    Description : "Description",

    /**
     * A small window that is designed to interrupt the current application processing
     * in order to inform the user and to get some response. 
     * @public
     */
    Dialog : "Dialog",

    /**
     * A list of references to members of a single group.
     *  
     * @public
     */
    Directory : "Directory",

    /**
     * Content that contains related information, such as a book. 
     * @public
     */
    Document : "Document",

    /**
     * Contains cells of tabular data arranged in rows and columns, for example in a table. 
     * @public
     */
    Grid : "Grid",

    /**
     * A table cell in a grid where the cells can be active, editable, and selectable.
     * Cells may have functional relationships to controls, for example. 
     * @public
     */
    GridCell : "GridCell",

    /**
     * A section of user interface objects. 
     * @public
     */
    Group : "Group",

    /**
     * A heading for a section of the page. 
     * @public
     */
    Heading : "Heading",

    /**
     * A container for a collection of elements that form an image. 
     * @public
     */
    Img : "Img",

    /**
     * An interactive reference to a resource. 
     * @public
     */
    Link : "Link",

    /**
     * A container for non-interactive list items which are the children of the list. 
     * @public
     */
    List : "List",

    /**
     * A widget that allows the user to select one or more items from a list.
     * The items within the list are static and can contain images. 
     * @public
     */
    Listbox : "Listbox",

    /**
     * A single item in a list. 
     * @public
     */
    ListItem : "ListItem",

    /**
     * An area where new information is added, or old information disappears.
     * Information types are chat logs, messaging, or error logs, for example.
     * The log contains a sequence: New information is always added to the end of the log. 
     * @public
     */
    Log : "Log",

    /**
     * Defines the main content of a document.
     *  
     * @public
     */
    Main : "Main",

    /**
     * Is used to scroll text across the page.
     *  
     * @public
     */
    Marquee : "Marquee",

    /**
     * Offers a list of choices to the user.
     *  
     * @public
     */
    Menu : "Menu",

    /**
     * A container for menu items where each item may activate a submenu.
     *  
     * @public
     */
    Menubar : "Menubar",

    /**
     * A child in a menu. 
     * @public
     */
    MenuItem : "MenuItem",

    /**
     * A checkable menu item (tri-state). 
     * @public
     */
    MenuItemCheckbox : "MenuItemCheckbox",

    /**
     * A menu item which is part of a group of menuitemradio roles. 
     * @public
     */
    MenuItemRadio : "MenuItemRadio",

    /**
     * A collection of links suitable for use when navigating the document or related documents. 
     * @public
     */
    Navigation : "Navigation",

    /**
     * The content is parenthetic or ancillary to the main content of the resource. 
     * @public
     */
    Note : "Note",

    /**
     * A selectable item in a list represented by a select.
     *  
     * @public
     */
    Option : "Option",

    /**
     * An element whose role is presentational does not need to be mapped to the accessibility API. 
     * @public
     */
    Presentation : "Presentation",

    /**
     * Shows the execution progress in applications providing functions that take a long time. 
     * @public
     */
    ProgressBar : "ProgressBar",

    /**
     * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
     *  
     * @public
     */
    Radio : "Radio",

    /**
     * A group of radio controls. 
     * @public
     */
    RadioGroup : "RadioGroup",

    /**
     * A large section on the web page. 
     * @public
     */
    Region : "Region",

    /**
     * A row of table cells. 
     * @public
     */
    Row : "Row",

    /**
     * A table cell containing header information for a row. 
     * @public
     */
    RowHeader : "RowHeader",

    /**
     * A search section of a web document. In many cases, this is a form used to submit search requests about the site,
     * or a more general Internet wide search service. 
     * @public
     */
    Search : "Search",

    /**
     * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
     * or stock price. 
     * @public
     */
    Secondary : "Secondary",

    /**
     * Indicates that the element contains content that is related to the main content of the page. 
     * @public
     */
    SeeAlso : "SeeAlso",

    /**
     * A line or bar that separates sections of content. 
     * @public
     */
    Separator : "Separator",

    /**
     * A user input where the user selects an input in a given range. This form of range expects an analogous keyboard
     * interface. 
     * @public
     */
    Slider : "Slider",

    /**
     * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and
     * the other ones can be displayed by scrolling using the arrow up and arrow down key.
     *  
     * @public
     */
    SpinButton : "SpinButton",

    /**
     * A container for processing advisory information. 
     * @public
     */
    Status : "Status",

    /**
     * A header for a tab panel. 
     * @public
     */
    Tab : "Tab",

    /**
     * A list of tabs which are references to tab panels.
     *  
     * @public
     */
    Tablist : "Tablist",

    /**
     * A container for the resources associated with a tab. 
     * @public
     */
    Tabpanel : "Tabpanel",

    /**
     * Inputs that allow free-form text as their value. 
     * @public
     */
    Textbox : "Textbox",

    /**
     * A numerical counter which indicates an amount of elapsed time from a start point,
     * or of the time remaining until a certain end point. 
     * @public
     */
    Timer : "Timer",

    /**
     * A collection of commonly used functions represented in compact visual form. 
     * @public
     */
    Toolbar : "Toolbar",

    /**
     * A popup that displays a description for an element when the user passes over or rests on that element.
     * Supplement to the normal tooltip processing of the user agent.
     *  
     * @public
     */
    Tooltip : "Tooltip",

    /**
     * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.
     *  
     * @public
     */
    Tree : "Tree",

    /**
     * A grid whose rows are expandable and collapsable in the same manner as the ones of trees. 
     * @public
     */
    TreeGrid : "TreeGrid",

    /**
     * A tree node 
     * @public
     */
    TreeItem : "TreeItem"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.BarColor.
jQuery.sap.declare("sap.ui.core.BarColor");

/**
 * @class Configuration options for the colors of a progress bar
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.BarColor = {
  
    /**
     * Color: blue (#b8d0e8) 
     * @public
     */
    NEUTRAL : "NEUTRAL",

    /**
     * Color: green (#b5e7a8) 
     * @public
     */
    POSITIVE : "POSITIVE",

    /**
     * Color: yellow (#faf2b0) 
     * @public
     */
    CRITICAL : "CRITICAL",

    /**
     * Color: red (#ff9a90) 
     * @public
     */
    NEGATIVE : "NEGATIVE"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.CSSSize
jQuery.sap.declare('sap.ui.core.CSSSize');


/**
 * @class A string type that represents CSS size values.
 *
 * @static
 * @public
 */
sap.ui.core.CSSSize = sap.ui.base.DataType.createType('sap.ui.core.CSSSize', {
    isValid : function(vValue) {
      return /^(auto|[-+]?(0*|([0-9]+|[0-9]*\.[0-9]+)([eE][mM]|[eE][xX]|[pP][xX]|[cC][mM]|[mM][mM]|[iI][nN]|[pP][tT]|[pP][cC]|%)))$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Design.
jQuery.sap.declare("sap.ui.core.Design");

/**
 * @class Font design for texts
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.Design = {
  
    /**
     * Standard font 
     * @public
     */
    Standard : "Standard",

    /**
     * Mono space font 
     * @public
     */
    Monospace : "Monospace"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.HorizontalAlign.
jQuery.sap.declare("sap.ui.core.HorizontalAlign");

/**
 * @class Configuration options for horizontal alignments of controls
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.HorizontalAlign = {
  
    /**
     * Locale-specific positioning at the beginning of the line 
     * @public
     */
    Begin : "Begin",

    /**
     * Locale-specific positioning at the end of the line 
     * @public
     */
    End : "End",

    /**
     * Hard option for left alignment 
     * @public
     */
    Left : "Left",

    /**
     * Hard option for right alignment 
     * @public
     */
    Right : "Right",

    /**
     * Centered alignment of text 
     * @public
     */
    Center : "Center"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.ID
jQuery.sap.declare('sap.ui.core.ID');


/**
 * @class A string type representing an Id or a name.
 *
 * @static
 * @public
 */
sap.ui.core.ID = sap.ui.base.DataType.createType('sap.ui.core.ID', {
    isValid : function(vValue) {
      return /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ImeMode.
jQuery.sap.declare("sap.ui.core.ImeMode");

/**
 * @class State of the Input Method Editor (IME) for the control. Depending on its value, it allows users to enter and edit for example Chinese characters.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.ImeMode = {
  
    /**
     * The value is automatically computed by the user agent. 
     * @public
     */
    Auto : "Auto",

    /**
     * IME is used for entering characters. 
     * @public
     */
    Active : "Active",

    /**
     * IME is not used for entering characters. 
     * @public
     */
    Inactive : "Inactive",

    /**
     * IME is disabled. 
     * @public
     */
    Disabled : "Disabled"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.OpenState.
jQuery.sap.declare("sap.ui.core.OpenState");

/**
 * @class Defines the different possible states of an element that can be open or closed and does not only toggle between these states, but also spends some time in between (e.g. because of an animation).
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.OpenState = {
  
    /**
     * Open and currently not changing states. 
     * @public
     */
    OPEN : "OPEN",

    /**
     * Closed and currently not changing states. 
     * @public
     */
    CLOSED : "CLOSED",

    /**
     * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN. 
     * @public
     */
    OPENING : "OPENING",

    /**
     * Still open, but in the process of going to the CLOSED state. 
     * @public
     */
    CLOSING : "CLOSING"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ScrollBarAction.
jQuery.sap.declare("sap.ui.core.ScrollBarAction");

/**
 * @class Actions are: Click on track, button, drag of thumb, or mouse wheel click
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.ScrollBarAction = {
  
    /**
     * Single step scrolling caused by clicking an arrow button or arrow key. 
     * @public
     */
    Step : "Step",

    /**
     * Range scrolling caused by clicking track area or using page up or page down key. 
     * @public
     */
    Page : "Page",

    /**
     * Scrolling done by mouse wheel 
     * @public
     */
    MouseWheel : "MouseWheel",

    /**
     * Scrolling done by dragging the scroll bar's paint thumb 
     * @public
     */
    Drag : "Drag"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Scrolling.
jQuery.sap.declare("sap.ui.core.Scrolling");

/**
 * @class Defines the possible values for horizontal and vertical scrolling behavior.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.Scrolling = {
  
    /**
     * No scroll bar provided even if the content is larger than the available space. 
     * @public
     */
    None : "None",

    /**
     * A scroll bar is shown if the content requires more space than the given space (rectangle) provides. 
     * @public
     */
    Auto : "Auto",

    /**
     * A scroll bar is always shown even if the space is large enough for the current content. 
     * @public
     */
    Scroll : "Scroll",

    /**
     * No scroll bar is shown, and the content stays in the given rectangle. 
     * @public
     */
    Hidden : "Hidden"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.TextAlign.
jQuery.sap.declare("sap.ui.core.TextAlign");

/**
 * @class Configuration options for text alignments.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.TextAlign = {
  
    /**
     * Locale-specific positioning at the beginning of the line. 
     * @public
     */
    Begin : "Begin",

    /**
     * Locale-specific positioning at the end of the line. 
     * @public
     */
    End : "End",

    /**
     * Hard option for left alignment. 
     * @public
     */
    Left : "Left",

    /**
     * Hard option for right alignment. 
     * @public
     */
    Right : "Right",

    /**
     * Centered text alignment. 
     * @public
     */
    Center : "Center"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.TextDirection.
jQuery.sap.declare("sap.ui.core.TextDirection");

/**
 * @class Configuration options for the direction of texts.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.TextDirection = {
  
    /**
     * Specifies left-to-right text direction. 
     * @public
     */
    LTR : "LTR",

    /**
     * Specifies right-to-left text direction. 
     * @public
     */
    RTL : "RTL",

    /**
     * Inherits the direction from its parent control/container. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ValueState.
jQuery.sap.declare("sap.ui.core.ValueState");

/**
 * @class Marker for the correctness of the current value.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.ValueState = {
  
    /**
     * State is not valid. 
     * @public
     */
    Error : "Error",

    /**
     * State is valid but with a warning. 
     * @public
     */
    Warning : "Warning",

    /**
     * State is valid. 
     * @public
     */
    Success : "Success",

    /**
     * State is not specified. 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.VerticalAlign.
jQuery.sap.declare("sap.ui.core.VerticalAlign");

/**
 * @class
 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
 * 
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.VerticalAlign = {
  
    /**
     * 
     * Content is aligned at the bottom.
     *  
     * @public
     */
    Bottom : "Bottom",

    /**
     * 
     * Content is centered vertically .
     *  
     * @public
     */
    Middle : "Middle",

    /**
     * 
     * Content is aligned at the top.
     *  
     * @public
     */
    Top : "Top"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Wrapping.
jQuery.sap.declare("sap.ui.core.Wrapping");

/**
 * @class Configuration options for text wrapping.
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.Wrapping = {
  
    /**
     * The standard browser behavior is considered for wrapping. 
     * @public
     */
    None : "None",

    /**
     * The text is actually on the same line but displayed within several lines. 
     * @public
     */
    Soft : "Soft",

    /**
     * Inserts actual line breaks in the text at the wrap point. 
     * @public
     */
    Hard : "Hard",

    /**
     * Wrapping shall not be allowed. 
     * @public
     */
    Off : "Off"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.mvc.ViewType.
jQuery.sap.declare("sap.ui.core.mvc.ViewType");

/**
 * @class Specifies possible view types
 *
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.mvc.ViewType = {
  
    /**
     * JSON View 
     * @public
     */
    JSON : "JSON",

    /**
     * XML view 
     * @public
     */
    XML : "XML",

    /**
     * JS View 
     * @public
     */
    JS : "JS"

  };
  

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// lazy imports for BusyIndicator
sap.ui.lazyRequire("sap.ui.core.BusyIndicator", "show hide attachOpen detachOpen attachClose detachClose");

// lazy imports for optional model stuff and model implementations
sap.ui.lazyRequire("sap.ui.model.Filter");
sap.ui.lazyRequire("sap.ui.model.Sorter");
sap.ui.lazyRequire("sap.ui.model.json.JSONModel");
sap.ui.lazyRequire("sap.ui.model.resource.ResourceModel");
sap.ui.lazyRequire("sap.ui.model.odata.ODataModel");
sap.ui.lazyRequire("sap.ui.model.xml.XMLModel");

//lazy imports for types
sap.ui.lazyRequire("sap.ui.model.type.Boolean");
sap.ui.lazyRequire("sap.ui.model.type.Integer");
sap.ui.lazyRequire("sap.ui.model.type.Float");
sap.ui.lazyRequire("sap.ui.model.type.String");
sap.ui.lazyRequire("sap.ui.model.type.Date");

// lazy imports for MVC
sap.ui.lazyRequire("sap.ui.core.mvc.Controller");
sap.ui.lazyRequire("sap.ui", "controller", "sap.ui.core.mvc.Controller");
sap.ui.lazyRequire("sap.ui", "view", "sap.ui.core.mvc.View");
sap.ui.lazyRequire("sap.ui", "jsview", "sap.ui.core.mvc.JSView");
sap.ui.lazyRequire("sap.ui", "jsonview", "sap.ui.core.mvc.JSONView");
sap.ui.lazyRequire("sap.ui", "xmlview", "sap.ui.core.mvc.XMLView");

}; // end of sap.ui.core.library
if ( !jQuery.sap.isDeclared('sap.ui.core.Item') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.Item.
jQuery.sap.declare("sap.ui.core.Item");



/**
 * Constructor for a new Item.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li>
 * <li>enabled : boolean</li>
 * <li>textDirection : sap.ui.core.TextDirection</li>
 * <li>key : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A control base type.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.Item = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.Item.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.core.Item. 
 * Resulting metadata can be obtained via sap.ui.core.Item.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.Item", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  publicMethods : [
    // properties 
    "getText", "setText", "getEnabled", "setEnabled", "getTextDirection", "setTextDirection", "getKey", "setKey"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : ""},
    "enabled" : {name : "enabled", type : "boolean", group : "Misc", defaultValue : true},
    "textDirection" : {name : "textDirection", type : "sap.ui.core.TextDirection", group : "Misc", defaultValue : sap.ui.core.TextDirection.Inherit},
    "key" : {name : "key", type : "string", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Item.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


/**
 * Getter for property <code>enabled</code>.
 * Enabled items can be selected.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getEnabled = function() {
	return this.getProperty("enabled");
};

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Item.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled);
	return this;
};


/**
 * Getter for property <code>textDirection</code>.
 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getTextDirection = function() {
	return this.getProperty("textDirection");
};

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Item.prototype.setTextDirection = function(oTextDirection) {
	this.setProperty("textDirection", oTextDirection);
	return this;
};


/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * 
 */
sap.ui.core.Item.prototype.getKey = function() {
	return this.getProperty("key");
};

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Item.prototype.setKey = function(sKey) {
	this.setProperty("key", sKey);
	return this;
};


// Start of sap/ui/core/Item.js

}; // end of sap.ui.core.Item
if ( !jQuery.sap.isDeclared('sap.ui.core.Popup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides helper class sap.ui.core.Popup
jQuery.sap.declare("sap.ui.core.Popup");







/**
 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
 * visually appearing in front of other controls.
 *
 * @class Popup Class is a helper class for controls that want themselves or
 * parts of themselves or even other aggregated or composed controls
 * or plain HTML content to popup on the screen like menues, dialogs, drop down boxes.
 *
 * It allows the controls to be aligned to other dom elements
 * using the {@link sap.ui.core.Popup#dock} method. With it you can define where
 * the popup should be docked. One can dock the popup to the top bottom left or right side
 * of a dom ref.
 *
 * In the case that the popup has no space to show itself in the view port
 * of the current window it tries to open itself to
 * the inverted direction.
 *
 * @param {sap.ui.core.Control | sap.ui.core.Element | DOMNode} oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
 * @param {boolean} [bModal=false] whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.
 * @param {boolean} [bShadow=true] whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)
 * @param {boolean} [bAutoClose=false] whether the popup should automatically close when the focus moves out of the popup
 * 
 * @constructor
 * @public
 */
sap.ui.core.Popup = function (oContent, bModal, bShadow, bAutoClose) {
	jQuery.sap.assert(arguments.length == 0 || (oContent && typeof oContent === "object"), "oContent must be an object or there may be no arguments at all");
	jQuery.sap.assert((bModal === undefined || bModal === true || bModal === false), "bModal must be true, false, or undefined");
	jQuery.sap.assert((bShadow === undefined || bShadow === true || bShadow === false), "bShadow must be true, false, or undefined");
	jQuery.sap.assert((bAutoClose === undefined || bAutoClose === true || bAutoClose === false), "bAutoClose must be true, false, or undefined");
	
	sap.ui.base.EventProvider.apply(this);

	this.bOpen = false; // true exactly if the Popup is opening, open, or closing
	this.eOpenState = sap.ui.core.OpenState.CLOSED;
	if (oContent) this.setContent(oContent);

	this._oPosition = {my: sap.ui.core.Popup.Dock.CenterCenter, at: sap.ui.core.Popup.Dock.CenterCenter, of:document, offset:"0 0", collision:"flip"};
	this._bModal = !!bModal;
	this._oPreviousFocus = null;
	this._sInitialFocusId = null;
	this._bShadow = typeof(bShadow) === "boolean" ? bShadow : true;
	this._bAutoClose = !!bAutoClose;
	this._aAutoCloseAreas;
	this._animations = {open: null, close: null};
	this._durations = {open: "fast", close: "fast"};
	this._iZIndex = -1;
	this._oBlindLayer = null;
};

// stack used for storing z-indices for blocklayer
sap.ui.core.Popup.blStack = [];

// this should be capable of raising event etc and thus uses EventProvider
sap.ui.core.Popup.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

sap.ui.base.Object.defineClass("sap.ui.core.Popup", {
		// ---- object ----
		baseType : "sap.ui.base.EventProvider",
		publicMethods : ["open", "close", "setContent", "getContent", "setPosition", "setShadow", "setModal", "setAutoClose", "isOpen", "getOpenState", "setAnimations", "setDurations", "attachOpened", "attachClosed", "detachOpened", "detachClosed"]
	});

sap.ui.core.Popup.M_EVENTS = {opened:'opened',closed:'closed'};

/**
 * Enumeration providing options for docking of some element to another.
 * "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side ("Begin" is "Right" in RTL).
 *
 * @static
 * @namespace
 * @public
 */
sap.ui.core.Popup.Dock = {
		/**
		 * @public
		 */
		BeginTop      : "begin top",
		/**
		 * @public
		 */
		BeginCenter   : "begin center",
		/**
		 * @public
		 */
		BeginBottom   : "begin bottom",
		/**
		 * @public
		 */
		LeftTop      : "left top",
		/**
		 * @public
		 */
		LeftCenter   : "left center",
		/**
		 * @public
		 */
		LeftBottom   : "left bottom",
		/**
		 * @public
		 */
		CenterTop    : "center top",
		/**
		 * @public
		 */
		CenterCenter : "center center",
		/**
		 * @public
		 */
		CenterBottom : "center bottom",
		/**
		 * @public
		 */
		RightTop     : "right top",
		/**
		 * @public
		 */
		RightCenter  : "right center",
		/**
		 * @public
		 */
		RightBottom  : "right bottom",
		/**
		 * @public
		 */
		EndTop     : "end top",
		/**
		 * @public
		 */
		EndCenter  : "end center",
		/**
		 * @public
		 */
		EndBottom  : "end bottom"
};

//****************************************************
// Event handlers
//****************************************************

/**
 * Attach event-handler <code>fnFunction</code> to the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * Event is fired when the popup has completely opened (after any animation).
 *
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present)
 * @param {object}
 *            [oListener] object on which to call the given function.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.attachOpened = function(fnFunction, oListener) {
	this.attachEvent("opened", fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * Event is fired when the popup has completely closed (after any animation).
 *
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely closed (after any animation).
 * @param {object}
 *            [oListener] object on which to call the given function.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.attachClosed = function(fnFunction, oListener) {
	this.attachEvent("closed", fnFunction, oListener);
	return this;
};

/**
 * Detach event handler <code>fnFunction</code> from the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely opened (after any animation).
 * @param {object}
 *            oListener (optional) The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.detachOpened = function(fnFunction, oListener) {
	this.detachEvent("opened", fnFunction, oListener);
	return this;
};

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely closed (after any animation).
 * @param {object}
 *            oListener (optional) The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.detachClosed = function(fnFunction, oListener) {
	this.detachEvent("closed", fnFunction, oListener);
	return this;
};


//****************************************************
// BlindLayer et al
//****************************************************
/**
 * @class
 * @private
 */
sap.ui.core.Popup.BlindLayer = function() {
	this._$Ref = jQuery("<iframe scrolling=\"no\"  id=\"sap-ui-blindlayer-" + jQuery.sap.uid() + "\" src=\"javascript:''\"	tabIndex=\"-1\"	class=\"sapUiBliLy\"></iframe>");
	this._$Ref.appendTo(sap.ui.getCore().getStaticAreaRef());
};
sap.ui.core.Popup.BlindLayer.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
/**
 *
 * @param oRef
 * @param iZIndex
 * @private
 */
sap.ui.core.Popup.BlindLayer.prototype.init = function(/** jQuery */oRef, iZIndex) {
	var oPopupPosition = oRef.position(),
		oRect = oRef.rect();
	this._$Ref
		.css("visibility", "visible")
		.css("left", oPopupPosition.left)
		.css("top", oPopupPosition.top)
		.css("width", oRect.width)
		.css("height", oRect.height)
		.css("z-index", iZIndex)
		.insertAfter(oRef)
		.show();
};
/**
 * @protected
 */
sap.ui.core.Popup.BlindLayer.prototype.update = function(oRect, iZIndex){
	this._$Ref.css("left", oRect.left)
		.css("top", oRect.top)
		.css("width", oRect.width)
		.css("height", oRect.height);

	if(typeof(iZIndex) === "number") {
		this._$Ref.css("z-index", iZIndex);
	}
};
sap.ui.core.Popup.BlindLayer.prototype.reset = function(){
	this._$Ref
		.hide()
		.css("visibility", "hidden")
		.appendTo(sap.ui.getCore().getStaticAreaRef());
};
/**
 * Facility for reuse of created iframes.
 * @type sap.ui.base.ObjectPool
 * @private
 */
sap.ui.core.Popup.prototype.oBlindLayerPool = new sap.ui.base.ObjectPool(sap.ui.core.Popup.BlindLayer);

// End of BlindLayer


// Begin of Popup-Stacking facilities
(function() {
	var iLastZIndex = 0;

	/**
	 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
	 *
	 * @returns {Number}
	 * @public
	 */
	sap.ui.core.Popup.getLastZIndex = function(){
		return iLastZIndex;
	};

	/**
	 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
	 *
	 * @returns {Number}
	 * @public
	 */
	sap.ui.core.Popup.prototype.getLastZIndex = function(){
		return sap.ui.core.Popup.getLastZIndex();
	};

	/**
	 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
	 *
	 * @returns {Number} the next z-index on top of the Popup stack
	 * @public
	 */
	sap.ui.core.Popup.getNextZIndex = function(){
		return (iLastZIndex += 10);
	};

	/**
	 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
	 *
	 * @returns {Number} the next z-index on top of the Popup stack
	 * @public
	 */
	sap.ui.core.Popup.prototype.getNextZIndex = function(){
		return sap.ui.core.Popup.getNextZIndex();
	};
}());
// End of Popup-Stacking facilites



/**
 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
 * Content must be capable of being positioned via "position:absolute;"
 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
 *
 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
 *
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.
 * @param {sap.ui.core.Popup.Dock} [my=sap.ui.core.Popup.Dock.CenterCenter] the popup content's reference position for docking
 * @param {sap.ui.core.Popup.Dock} [at=sap.ui.core.Popup.Dock.CenterCenter] the "of" element's reference point for docking to
 * @param {DOMNode|sap.ui.core.Element} [of=document] the DOM element or control to dock to
 * @param {string} [offset="0 0"] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @public
 */
sap.ui.core.Popup.prototype.open = function(iDuration, my, at, of, offset, collision) { // TODO: document collision and say that offset is only optional when no collision is given
	jQuery.sap.assert(this.oContent, "Popup content must have been set by now");
	// other asserts follow after parameter shifting
	
	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		return;
	}

	this.eOpenState = sap.ui.core.OpenState.OPENING;

	// If the content is a control and has no parent, add it to the static UIArea.
	// This makes automatic rerendering after invalidation work.
	// When the popup closes, the content is removed again from the static UIArea.
	this._bContentAddedToStatic = false;
	if ( this.oContent instanceof sap.ui.core.Control && !this.oContent.getParent() ) {
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.addContent(this.oContent, true);
		this._bContentAddedToStatic = true;
	}

	// iDuration is optional... if not given:
	if (typeof(iDuration) == "string") {
		collision = offset;
		offset = of;
		of = at;
		at = my;
		my = iDuration;
		iDuration = -1;
	}
	// all other parameters must be given if any subsequent parameter is given, hence no more shifting
	// now every parameter should be in the right variable
	
	jQuery.sap.assert(iDuration === -1 || (typeof iDuration === "number" && iDuration % 1 == 0), "iDuration must be an integer (or omitted)"); // omitted results in -1
	jQuery.sap.assert(my === undefined || typeof my === "string", "my must be a string or empty");
	jQuery.sap.assert(at === undefined || typeof at === "string", "at must be a string or empty");
	jQuery.sap.assert(!of || typeof of === "object" || typeof of === "function", "of must be empty or an object");
	jQuery.sap.assert(!offset || typeof offset === "string", "offset must be empty or a string");
	jQuery.sap.assert(!collision || typeof collision === "string", "collision must be empty or a string");

	// save current focused element to restore the focus after closing
	var focusedControlId = sap.ui.getCore().getCurrentFocusedControlId();
	if(focusedControlId) {
		// a SAPUI5 control was focused before
		var oFocusedControl = sap.ui.getCore().getControl(focusedControlId);
		this._oPreviousFocus = {'sFocusId':focusedControlId,'oFocusInfo': oFocusedControl ? oFocusedControl.getFocusInfo() : {}}; // add empty oFocusInfo to avoid the need for all recipients to check
	} else {
		// not a SAPUI5 control... but if something has focus, save as much information about it as available
		var oElement = document.activeElement;
		if (oElement) {
			this._oPreviousFocus = {'sFocusId':oElement.id,'oFocusedElement':oElement,'oFocusInfo':{}}; // add empty oFocusInfo to avoid the need for all recipients to check
		}
	}

	var $Ref = this._$();
	var iRealDuration = "fast";
	if((iDuration === 0) || (iDuration > 0)) {
		iRealDuration = iDuration;
	} else if ((this._durations.open === 0) || (this._durations.open > 0)) {
		iRealDuration = this._durations.open;
	}

	// Ensure right position is used for this call
	var _oPosition = {
			"my": my || this._oPosition.my,
			"at": at || this._oPosition.at,
			"of": of || this._oPosition.of || document,
			"offset": offset || this._oPosition.offset,
			"collision": collision || this._oPosition.collision
		};
	this._iZIndex = this._iZIndex === this.getLastZIndex() ? this._iZIndex : this.getNextZIndex();

	var oStaticArea = sap.ui.getCore().getStaticAreaRef();
	$Ref.css("position", "absolute").css("visibility", "hidden");
	if(!($Ref[0].parentNode == oStaticArea)) { // do not move in DOM if not required - otherwise this destroys e.g. the RichTextEditor
		$Ref.appendTo(oStaticArea);
	}
	$Ref.css("z-index", this._iZIndex);

	jQuery.sap.log.debug("position popup content " + $Ref.attr("id") + " at " + (window.JSON ? JSON.stringify(_oPosition.at) : String(_oPosition.at)));
	this._applyPosition(_oPosition);

	var that = this;
	var fnOpened = function() {
		$Ref.css("display","block");

		// in modal and auto-close case the focus needs to be in the popup; provide this generic implementation as helper, but users can change the focus in the "opened" event handler
		if (that._bModal || that._bAutoClose || that._sInitialFocusId) {
			var domRefToFocus = null;
			if (that._sInitialFocusId) {
				domRefToFocus = jQuery.sap.domById(that._sInitialFocusId);
			}
			if (!domRefToFocus) {
				domRefToFocus = $Ref.firstFocusableDomRef();
			}
			jQuery.sap.focus(domRefToFocus);
		}

		that.eOpenState = sap.ui.core.OpenState.OPEN;

		// notify that opening has completed
		if (jQuery.browser.msie && jQuery.browser.version == '9.0') { 
			jQuery.sap.delayedCall(0,that,function(){
				that.fireEvent(sap.ui.core.Popup.M_EVENTS.opened);
			});
		} else {
			that.fireEvent(sap.ui.core.Popup.M_EVENTS.opened);			
		}
			
	};

	// and show the popup content
	$Ref.toggleClass("sapUiShd", this._bShadow).hide().css("visibility", "visible");
	if (iRealDuration == 0) { // do not animate if there is a duration == 0
		fnOpened.apply(); // otherwise call after-opening functions directly
	} else {
		if (this._animations.open) { // if custom animation is defined, call it
			this._animations.open.call(null, $Ref, iRealDuration, fnOpened);
		} else { // otherwise play the default animation
			$Ref.fadeIn(iRealDuration, fnOpened);
		}
	}

	// get (and 'show' i.e. activate) the BlindLayer
	if(jQuery.browser.msie) {
		this._oBlindLayer = this.oBlindLayerPool.borrowObject($Ref, this._iZIndex - 1);
	} // -1 = BlindLayer, -2 = BlockLayer

	if(this._bModal) {
		this._showBlockLayer();
	}

	// add Delegate to hosted content for handling of events (e.g. onfocusin)
	if(this.oContent instanceof sap.ui.core.Element) {
		this.oContent.addDelegate(this);
	}

	this.bOpen = true;

	if (this._bModal || this._bAutoClose) { // initialize focus handling
		this.fEventHandler = jQuery.proxy(this.onFocusEvent, this);
		// make sure to notice all blur's in the popup
		var jPopupRoot = $Ref;//this._$();
		if(document.addEventListener) { //FF, Safari
			document.addEventListener("focus", this.fEventHandler, true);
			jPopupRoot.get(0).addEventListener("blur", this.fEventHandler, true);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					this._aAutoCloseAreas[i].addEventListener("blur", this.fEventHandler, true);
				}
			}
		} else { // IE8
			jQuery(document).bind("activate", this.fEventHandler);
			jPopupRoot.bind("deactivate", this.fEventHandler);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					jQuery(this._aAutoCloseAreas[i]).bind("deactivate", this.fEventHandler);
				}
			}
		}
	}
	//  register resize handler for blindlayer resizing
	if(this._oBlindLayer) {
		this._resizeListenerId = sap.ui.core.ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
	}
};



/**
 * Handles the focus/blur events.
 *
 * @param oBrowserEvent the browser event
 * @private
 */
sap.ui.core.Popup.prototype.onFocusEvent = function(oBrowserEvent) {
	var oEvent = jQuery.event.fix(oBrowserEvent);
	var type = (oEvent.type == "focus" || oEvent.type == "activate") ? "focus" : "blur";

	if (type=="focus") {
		var oDomRef = this._$().get(0);
		if (oDomRef) {
			var contains = (oDomRef == oEvent.target) || (jQuery.contains(oDomRef, oEvent.target));

			// if focus does not go into the popup, check any other areas belonging to it
			if (!contains && this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					contains = (this._aAutoCloseAreas[i] == oEvent.target) || (jQuery.contains(this._aAutoCloseAreas[i], oEvent.target));
					if (contains) {
						break;
					}
				}
			}
			jQuery.sap.log.debug("focus event on " + oEvent.target.id + ", contains: " + contains);

			if (this._bModal && !contains) { // case: modal popup and focus has gone somewhere else in the document
				// The popup is modal, but the focus has moved to a part of the document that is NOT inside the popup
				// check whether this modal popup is the topmost one
				var bTopMost = (sap.ui.core.Popup.getLastZIndex() == this._iZIndex);
				if (bTopMost) {
					// set the focus back to the last focused element inside the popup or at least to the popup root
					var oDomRefToFocus = this.oLastBlurredElement ? this.oLastBlurredElement : oDomRef;
					jQuery.sap.focus(oDomRefToFocus);
				}
			} else if (this._bAutoClose && contains && this._sTimeoutId) { // case: autoclose popup and focus has returned into the popup immediately
				// focus has returned, so it did only move inside the popup => clear timeout
				jQuery.sap.clearDelayedCall(this._sTimeoutId);
				this._sTimeoutId = null;
			}
		}

	} else if (type=="blur") { // an element inside the popup is loosing focus - remember in case we need to re-set
		jQuery.sap.log.debug("blur event on " + oEvent.target.id);
		if (this._bModal) {
			this.oLastBlurredElement = oEvent.target;
		} else if (this._bAutoClose) {
			// create timeout for closing the popup if there is no focus immediately returning to the popup
			if (!this._sTimeoutId) {
				this._sTimeoutId = jQuery.sap.delayedCall(0, this, "close"); // TODO: do we need a "onBeforeClose" event?
			}
		}
	}
};


/**
 * Sets the ID of the element that should be focused once the popup opens.
 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
 *
 * @param sId the ID of the DOM element to focus
 * @public
 */
sap.ui.core.Popup.prototype.setInitialFocusId = function(sId) {
	jQuery.sap.assert(typeof sId === "string", "sId must be a string");
	this._sInitialFocusId = sId;
};


/**
 * Closes the popup.
 *
 * If the Popup is already closed or in the process of closing, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
 *
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.
 * @public
 */
sap.ui.core.Popup.prototype.close = function(iDuration) {
	jQuery.sap.assert(iDuration === undefined || (typeof iDuration === "number" && (iDuration % 1 == 0)), "iDuration must be empty or an integer");
	
	if(this.eOpenState == sap.ui.core.OpenState.CLOSED || this.eOpenState == sap.ui.core.OpenState.CLOSING) {
		return;
	} // also close when OPENING
	// the above will queue the animations (close only after opening), but may lead to the CLOSED event happening before the OPENED event

	var iRealDuration = "fast";
	if((iDuration === 0) || (iDuration > 0)) {
		iRealDuration = iDuration;
	} else if ((this._durations.close === 0) || (this._durations.close > 0)) {
		iRealDuration = this._durations.close;
	}

	if (iRealDuration === 0 && this.eOpenState == sap.ui.core.OpenState.OPENING) {
		return;
	} // do not allowed immediate closing while opening


	//if(this.eOpenState != sap.ui.core.OpenState.OPEN) return; // this is the more conservative approach: to only close when the Popup is OPEN

	this.eOpenState = sap.ui.core.OpenState.CLOSING;

	// If we added the content control to the static UIArea,
	// then we should remove it again now.
	// Assumption: application did not move the content in the meantime!
	if ( this.oContent && this._bContentAddedToStatic ) {
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.removeContent(oStatic.indexOfContent(this.oContent), true);
	}
	this._bContentAddedToStatic = false;

	this._sTimeoutId = null;

	if (this.fEventHandler) { // remove focus handling
		var jPopupRoot = this._$();
		if(document.removeEventListener) { //FF, Safari
			document.removeEventListener("focus", this.fEventHandler, true);
			jPopupRoot.get(0).removeEventListener("blur", this.fEventHandler, true);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					this._aAutoCloseAreas[i].removeEventListener("blur", this.fEventHandler, true);
				}
			}
		} else { // IE8
			jQuery(document).unbind("activate", this.fEventHandler);
			jPopupRoot.unbind("deactivate", this.fEventHandler);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					jQuery(this._aAutoCloseAreas[i]).unbind("deactivate", this.fEventHandler);
				}
			}
		}
		this.fEventHandler = null;
	}

	if(this.oContent instanceof sap.ui.core.Element) {
		this.oContent.removeDelegate(this);
	}

	var $Ref = this._$();
	// get (and 'hide' i.e. remove) the BlindLayer
	if(this._oBlindLayer) {
		this.oBlindLayerPool.returnObject(this._oBlindLayer);
	}
	this._oBlindLayer = null;

	var that = this;
	var fnClose = function() { // the function to call when the popup closing animation has completed
		jQuery($Ref).hide().
			css("visibility", "inherit").
			css("left", "0px").
			css("top", "0px").
			css("right", "");

		if (that._bModal){
			// try to set the focus back to whatever was focused before. Do this here because animation needs to be finished.
			//- TODO: currently focus is restored only for modal popups. Non modal popups have to do it themselves because the outside focus can change!
			if(that._oPreviousFocus) {
				var oFocusedControl = sap.ui.getCore().getControl(that._oPreviousFocus.sFocusId);
				if(oFocusedControl) {
					// if a SAPUI5 control had been focused, just re-focus it
					oFocusedControl.applyFocusInfo(that._oPreviousFocus.oFocusInfo);
				} else {
					// no SAPUI5 control... try to find the control by ID if an ID was there
					var oElement = jQuery.sap.domById(that._oPreviousFocus.sFocusId) 
							|| that._oPreviousFocus.oFocusedElement; // if not even an ID was available when focus was lost maybe the original DOM element is still there
					jQuery.sap.focus(oElement); // also works for oElement == null
				}
				that._oPreviousFocus = null;
				that.oLastBlurredElement = null;
			}
		}

		that.bOpen = false;
		that.eOpenState = sap.ui.core.OpenState.CLOSED;

		// notify users that the popup is now officially closed
		that.fireEvent(sap.ui.core.Popup.M_EVENTS.closed);
	};

	if (iRealDuration == 0) { // iRealDuration == 0 means: no animation!
		fnClose.apply();
	} else {
		if (this._animations.close) {
			this._animations.close.call(null, $Ref, iRealDuration, fnClose); // play custom animation, if supplied
		} else {
			$Ref.fadeOut(iRealDuration, fnClose); // otherwise use default animation
		}
	}

	if(this._bModal) {
		this._hideBlockLayer();
	}

	//deregister resize handler
	if (this._resizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
		this._resizeListenerId = null;
	}
};

/**
 * Sets the content this instance of the Popup should render.
 * Content must be capable of being positioned via position:absolute;
 * @param {sap.ui.core.Control | DOMRef } oContent
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setContent = function(oContent) {
	jQuery.sap.assert(typeof oContent === "object", "oContent must be an object");
	this.oContent = oContent;
	return this;
};


/**
 * Returns this Popup's content.
 * @return {sap.ui.core.Control | DOMRef } the content that has been set previously (if any)
 * @public
 */
sap.ui.core.Popup.prototype.getContent = function() {
	return this.oContent;
};

/**
 * Sets the position of the Popup (if you refer to a Control as anchor then do not
 * use the DOMRef of the control which might change after re-renderings).
 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
 * 
 * @param {sap.ui.core.Popup.Dock} my specifies which point of the given Content should be aligned
 * @param {sap.ui.core.Popup.Dock | object {left: {sap.ui.core.CSSSize}, top: {sap.ui.core.CSSSize}}} at specifies the point of the reference element to which the given Content should be aligned
 * @param {string | sap.ui.core.Control | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should be aligned as specified in the other parameters
 * @param {string} [offset="0 0"] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setPosition = function(my, at, of, offset, collision) { // TODO: document collision and implications on offset
	jQuery.sap.assert(typeof my === "string", "my must be a string");
	jQuery.sap.assert(typeof at === "string" || (typeof at === "object" && at.left && at.top), "my must be a string or an object with 'left' and 'top' properties");
	jQuery.sap.assert(!of || typeof of === "object" || typeof of === "function", "of must be empty or an object");
	jQuery.sap.assert(!offset || typeof offset === "string", "offset must be empty or a string");
	jQuery.sap.assert(!collision || typeof collision === "string", "collision must be empty or a string");
	
	// defaults are implemented in Popup.open()
	this._oPosition = jQuery.extend({},this._oPosition, {
			"my": my,
			"at": at,
			"of": of,
			"offset": offset,
			"collision": collision
		});

	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		this._applyPosition(this._oPosition);
		this._oBlindLayer && this._oBlindLayer.update(this._$().rect());
	}

	return this;
};


/**
 * Applies the given position to the Popup which is assumed to be currently open
 *
 * @private
 */
sap.ui.core.Popup.prototype._applyPosition = function(oPosition) {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var $Ref = this._$();
	var oAt = oPosition.at;
	if(typeof(oAt) === "string") {
		$Ref.css("display", "block").position(this._resolveReference(this._convertPositionRTL(oPosition, bRtl))); // must be visible, so browsers can calculate its offset!
		this._fixPositioning(oPosition, bRtl);
	} else if(sap.ui.core.CSSSize.isValid(oAt.left) && sap.ui.core.CSSSize.isValid(oAt.top)) {
		$Ref.css("left", oAt.left).css("top", oAt.top);
	} else if(sap.ui.core.CSSSize.isValid(oAt.right) && sap.ui.core.CSSSize.isValid(oAt.top)) {
		$Ref.css("right", oAt.right).css("top", oAt.top);
	} else if(typeof(oAt.left) === "number" && typeof(oAt.top) === "number") {
		var domRef = $Ref[0];
		if (domRef && domRef.style.right) { // in some RTL cases leave the Popup attached to the right side of the browser window
			var width = $Ref.outerWidth();
			$Ref.css("right", (jQuery(document).width() - (oAt.left + width)) + "px").css("top", oAt.top + "px");
		} else {
			$Ref.css("left", oAt.left + "px").css("top", oAt.top + "px");
		}
	}

	// remember given position for later redraws
	this._oLastPosition = oPosition;
};

/**
 * Converts a position string with RTL-independent settings like "begin top" or "end center" into a string understood by
 * jQuery UI position() by replacing "begin" and "end" with the respective concrete value, depending on RTL settings.
 * The returned object is a clone, the original is unchanged.
 *
 * @private
 */
sap.ui.core.Popup.prototype._convertPositionRTL = function(oPosition, bRtl) {
	var fixedPos = jQuery.extend({}, oPosition); // don't modify the original object
	if (bRtl) {
		if (oPosition.offset
				&& ((oPosition.my.indexOf("begin") > -1) || (oPosition.my.indexOf("end") > -1))
				&& ((oPosition.at.indexOf("begin") > -1) || (oPosition.at.indexOf("end") > -1))) {
			fixedPos.offset = this._mirrorOffset(oPosition.offset);
		}
		fixedPos.my = oPosition.my.replace("begin", "right").replace("end", "left");
		fixedPos.at = oPosition.at.replace("begin", "right").replace("end", "left");
	} else {
		fixedPos.my = oPosition.my.replace("end", "right").replace("begin", "left");
		fixedPos.at = oPosition.at.replace("end", "right").replace("begin", "left");
	}
	return fixedPos;
};

/**
 * Mirrors the given offset which is a string containing two integer numbers separated by whitespace.
 * (=negates the first number)
 *
 * @param sOffset
 * @returns {String}
 *
 * @private
 */
sap.ui.core.Popup.prototype._mirrorOffset = function(sOffset) {
	var aOffset = jQuery.trim(sOffset).split(/\s/);
	var posX = parseInt(aOffset[0], 10);
	return (-posX) + " " + aOffset[aOffset.length-1]; // array could be longer than 2 with multiple whitespace characters
};

/**
 * Changes the default positioning of the Popup ("left: ...px") to ("right: ...px"), maintaining the
 * actual screen position, if the Popup should "grow to the left" when increasing in size.
 * This is the case if:
 * - LTR mode and horizontal alignment is right or end
 * - RTL mode and horizontal alignment is right, begin or center
 *
 * @private
 */
sap.ui.core.Popup.prototype._fixPositioning = function(sPosition, bRtl) {
	var my = sPosition.my;
	if (typeof(my) === "string") {
		if (bRtl && ((my.indexOf("right") > -1) || (my.indexOf("begin") > -1) || (my.indexOf("center") > -1))) {
			var $Ref = this._$();
			var right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
			$Ref.css("right", right + "px").css("left", "");
		} else if ((my.indexOf("right") > -1) || (my.indexOf("end") > -1)) {
			// LTR
			var $Ref = this._$();
			var right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
			$Ref.css("right", right + "px").css("left", "");
		}
	}
};

/**
 * If the reference element is specified as a sap.ui.core.Element, then it is resovled to a DOM node
 * @param oPosition
 * @returns
 */
sap.ui.core.Popup.prototype._resolveReference = function(oPosition) {
	var oResult = oPosition;
	if ( oPosition.of instanceof sap.ui.core.Element ) {
		oResult = jQuery.extend({}, oPosition, { of : oPosition.of.getDomRef()});
	}
	return oResult;
};

/**
 * Determines whether the Popup should have a shadow (in supporting browsers).
 * This also affects a currently open popup.
 *
 * @param bShowShadow
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setShadow = function(bShowShadow) {
	jQuery.sap.assert(typeof bShowShadow === "boolean", "bShowShadow must be boolean");
	this._bShadow = bShowShadow;
	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		this._$().toggleClass("sapUiShd", bShowShadow);
	}
	return this;
};

/**
 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
 * prevent attempts to put the focus outside/below the popup.
 * Setting this while the popup is open will have no immediate effect (only when it is opened the next time).
 *
 * @param {boolean} bModal whether the Popup is of modal type
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setModal = function(bModal, sModalCSSClass) {
	jQuery.sap.assert(typeof bModal === "boolean", "bModal must be boolean");
	jQuery.sap.assert(!sModalCSSClass || typeof sModalCSSClass === "string", "sModalCSSClass must be empty or a string");
	
	this._bModal = bModal;
	this._sModalCSSClass = sModalCSSClass;
	return this;
};

/**
 * Used to specify whether the Popup should close as soon as the focus leaves
 * @param {boolean} bModal whether the Popup should close as soon as the focus leaves
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAutoClose = function(bAutoClose) {
	jQuery.sap.assert(typeof bAutoClose === "boolean", "bAutoClose must be boolean");
	this._bAutoClose = bAutoClose;
	return this;
};

/**
 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled. If the focus leaves the Popup
 * but immediately enters one of these areas, the Popup does NOT close.
 *
 * @param {DomRef[]} aAutoCloseAreas an array containing DOM elements considered part of the Popup; a value of null removes all previous areas
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAutoCloseAreas = function(aAutoCloseAreas) {
	jQuery.sap.assert(aAutoCloseAreas === null || jQuery.isArray(aAutoCloseAreas), "aAutoCloseAreas must be null or an array");
	this._aAutoCloseAreas = aAutoCloseAreas;
	return this;
};

/**
 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
 * When called, the animation functions receive three parameters:
 * - the jQuery object wrapping the DomRef of the popup
 * - the requested animation duration
 * - a function that MUST be called once the animation has completed
 *
 * @param {function} fnOpen
 * @param {function} fnClose
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAnimations = function(fnOpen, fnClose) {
	jQuery.sap.assert(fnOpen === null || typeof fnOpen === "function", "fnOpen must be a function");
	jQuery.sap.assert(fnClose === null || typeof fnClose === "function", "fnClose must be a function");
	
	if (fnOpen && (typeof(fnOpen) == "function")) {
		this._animations.open = fnOpen;
	}
	if (fnClose && (typeof(fnClose) == "function")) {
		this._animations.close = fnClose;
	}
	return this;
};

/**
 * Sets the durations for opening and closing animations.
 * Null values and values < 0 are ignored.
 * A duration of 0 means no animation.
 * Default value is "fast" which is the jQuery constant for "200 ms".
 *
 * @param {int} iOpenDuration in milliseconds
 * @param {int} iCloseDuration in milliseconds
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setDurations = function(iOpenDuration, iCloseDuration) {
	jQuery.sap.assert(iOpenDuration === null || (typeof iOpenDuration === "number" && (iOpenDuration % 1 == 0)), "iOpenDuration must be null or an integer");
	jQuery.sap.assert(!iCloseDuration || (typeof iCloseDuration === "number" && (iCloseDuration % 1 == 0)), "iOpenDuration must be undefined or an integer");
	
	if ((iOpenDuration > 0) || (iOpenDuration === 0)) {
		this._durations.open = iOpenDuration;
	}
	if ((iCloseDuration > 0) || (iCloseDuration === 0)) {
		this._durations.close = iCloseDuration;
	}
	return this;
};

/**
 * Returns whether the Popup is currently open (this includes opening and closing animations).
 *
 * @returns {Boolean} whether the Popup is opened (or currently being opened or closed)
 * @public
 */
sap.ui.core.Popup.prototype.isOpen = function() {
	return this.bOpen;
};

/**
 * Returns whether the Popup is currently open, closed, or transitioning between these states.
 *
 * @returns {OpenState} whether the Popup is opened
 * @public
 */
sap.ui.core.Popup.prototype.getOpenState = function() {
	return this.eOpenState;
};

/**
 * Closes and destroys this instance of Popup.
 * Does not destroy the hosted content.
 * @public
 */
sap.ui.core.Popup.prototype.destroy = function() {
	this.close();
	this.oContent = null;
};

/**
 * Returns the jQuery object containing the root of the content of the Popup
 * @returns {jQuery} the jQuery object containing the root of the content of the Popup
 * @private
 */
sap.ui.core.Popup.prototype._$ = function(){
	if(this.oContent instanceof sap.ui.core.Control){
		var oResult = this.oContent.$();
		if (oResult.length === 0) {
			jQuery.sap.log.info("Rendering of popup content: " + this.oContent.getId());
			sap.ui.getCore().getRenderManager().render(this.oContent, sap.ui.getCore().getStaticAreaRef(), true); // TODO: this not fully sets the StaticArea as UIArea for the control... Events 'should' work, but this is not confirmed.
			oResult = this.oContent.$();
		}
		return oResult;

	} else if(this.oContent instanceof sap.ui.core.Element){
		return this.oContent.$();

	} else {
		return jQuery(this.oContent);
	}
};

/**
 *
 * @param iZIndex
 * @private
 */
sap.ui.core.Popup.prototype._showBlockLayer = function() {
	var $BlockRef = jQuery("#sap-ui-blocklayer-popup");
	if($BlockRef.length === 0){
		var className = "sapUiBLy" + (this._sModalCSSClass ? " " + this._sModalCSSClass : "");
		$BlockRef = jQuery("<div id=\"sap-ui-blocklayer-popup\" tabindex=\"0\" class=\"" + className + "\"></div>");
		$BlockRef.appendTo(sap.ui.getCore().getStaticAreaRef());
	}
	// push current z-index to stack
	sap.ui.core.Popup.blStack.push(this._iZIndex - 2);
	$BlockRef.css("z-index", this._iZIndex - 2).css("visibility","visible").show();
};

sap.ui.core.Popup.prototype._hideBlockLayer = function() {
	// a dialog was closed so pop his z-index from the stack
	sap.ui.core.Popup.blStack.pop();
	// if there are more z-indices this means there are more dialogs stacked up. So redisplay the blocklayer (with new z-index) under the new current dialog which should be displayed.
	if (sap.ui.core.Popup.blStack.length > 0){
		// set the blocklayer z-index to the last z-index in the stack and show it
		jQuery("#sap-ui-blocklayer-popup").css("z-index", sap.ui.core.Popup.blStack[sap.ui.core.Popup.blStack.length-1]).css("visibility","visible").show();
	}
	else{
		// the last dialog was closed so we can hide the block layer now
		jQuery("#sap-ui-blocklayer-popup").css("visibility","inherit").hide();
	}
};



//****************************************************
//Focus Handling Delegate function for use with the given content (of type sap.ui.core.Element)
//****************************************************

/**
 * Delegate function for handling of mousedown event on sap.ui.core.Elements as content
 * @private
 */
sap.ui.core.Popup.prototype.onmousedown = function(oEvent) {
	if(this._iZIndex === this.getLastZIndex()) {
		return;
	} // we are 'uppermost' and therefore everything is ok

	this._iZIndex = this.getNextZIndex();

	var $Ref = this._$();
	$Ref.css("z-index", this._iZIndex);

	if(this._oBlindLayer) {
		this._oBlindLayer.update($Ref.rect(), this._iZIndex -1);
	}
};


//****************************************************
//Rerendering Handling Delegate function for use with the given content (of type sap.ui.core.Element)
//****************************************************

/**
 * Delegate function for onAfterRendering.
 * Only active when Popup is opened.
 * @private
 */
sap.ui.core.Popup.prototype.onAfterRendering = function(oEvent){
	var $Ref = this.getContent().$();

	$Ref.toggleClass("sapUiShd", this._bShadow);
	var pos = $Ref.css("position");
	if (!pos || pos == "static") {
		$Ref.css("position", "absolute");
	} // only set 'position:absolute' if nobody else has set positioning yet

	// Ensure right position is used for this call
	var ref = $Ref[0];
	var left = ref.style.left;
	var right = ref.style.right;
	var top = ref.style.top;
	var bottom = ref.style.bottom;
	if (!(left && left != "auto" || right && right != "auto" || top && top != "auto" || bottom && bottom != "auto")) {
		jQuery.sap.log.debug("reposition popup content " + $Ref.attr("id") + " at " + (window.JSON ? JSON.stringify(this._oLastPosition.at) : String(this._oLastPosition.at)));
		this._applyPosition(this._oLastPosition);
	}
	$Ref.show()
		.css("visibility", "visible")
		.css("z-index", this._iZIndex);
	// register resize handler for blindlayer resizing
	if(this._oBlindLayer) {
		this._resizeListenerId = sap.ui.core.ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
	}
};

/**
* Delegate function for onBeforeRendering.
* @private
*/
sap.ui.core.Popup.prototype.onBeforeRendering = function(oEvent){
	//deregister resize handler
	if (this._resizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
		this._resizeListenerId = null;
	}
};

/**
 * Resize handler listening to the popup. If the Popup changes its size the blindlayer
 * should be updated as well. For example necessary when popup content has absolute positions.
 * 
 * @private
 */
sap.ui.core.Popup.prototype.onresize = function(oEvent) {
	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		this._oBlindLayer && this._oBlindLayer.update(this._$().rect());
	}
};
 

}; // end of sap.ui.core.Popup
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.View') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.View.
jQuery.sap.declare("sap.ui.core.mvc.View");



/**
 * Constructor for a new mvc/View.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>width : sap.ui.core.CSSSize</li>
 * <li>height : sap.ui.core.CSSSize</li>
 * <li>viewName : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>content : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>afterInit : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>beforeExit : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>afterRendering : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>beforeRendering : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * View
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.mvc.View = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.mvc.View.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.core.mvc.View. 
 * Resulting metadata can be obtained via sap.ui.core.mvc.View.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.mvc.View", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getWidth", "setWidth", "getHeight", "setHeight", "getViewName", "setViewName", 
    // aggregations
    "getContent", "insertContent", "addContent", "removeContent", "removeAllContent", "indexOfContent", "destroyContent", 
    // associations
    
    // events
    "attachAfterInit", "detachAfterInit", "attachBeforeExit", "detachBeforeExit", "attachAfterRendering", "detachAfterRendering", "attachBeforeRendering", "detachBeforeRendering", 
    // methods
    "getController"
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "width" : {name : "width", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
    "height" : {name : "height", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "viewName" : {name : "viewName", type : "string", group : "Misc", defaultValue : null}
  },
  
  aggregations : {
    "content" : {name : "content", type : "sap.ui.core.Control", multiple : true, singularName : "content"}
  },
  associations : {},
  events : {
    "afterInit" : "afterInit", 
    "beforeExit" : "beforeExit", 
    "afterRendering" : "afterRendering", 
    "beforeRendering" : "beforeRendering"
  }

});	

sap.ui.core.mvc.View.M_EVENTS = {'afterInit':'afterInit','beforeExit':'beforeExit','afterRendering':'afterRendering','beforeRendering':'beforeRendering'};


/**
 * Getter for property <code>width</code>.
 * The width
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getWidth = function() {
	return this.getProperty("width");
};

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.setWidth = function(sWidth) {
	this.setProperty("width", sWidth);
	return this;
};


/**
 * Getter for property <code>height</code>.
 * The height
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getHeight = function() {
	return this.getProperty("height");
};

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.setHeight = function(sHeight) {
	this.setProperty("height", sHeight);
	return this;
};


/**
 * Getter for property <code>viewName</code>.
 * Name of the View
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>viewName</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getViewName = function() {
	return this.getProperty("viewName");
};

/**
 * Setter for property <code>viewName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sViewName  new value for property <code>viewName</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.setViewName = function(sViewName) {
	this.setProperty("viewName", sViewName);
	return this;
};

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Child Controls of the view
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 */
sap.ui.core.mvc.View.prototype.getContent = function() {
	return this.getAggregation("content", []);
};


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.insertContent = function(oContent, iIndex) {
	this.insertAggregation("content", oContent, iIndex);
	return this;
};

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public 
 */
sap.ui.core.mvc.View.prototype.addContent = function(oContent) {
	this.addAggregation("content", oContent);
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 */
sap.ui.core.mvc.View.prototype.removeContent = function(vContent) {
	return this.removeAggregation("content", vContent);
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.core.mvc.View.prototype.removeAllContent = function() {
	return this.removeAllAggregation("content");
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 */
sap.ui.core.mvc.View.prototype.indexOfContent = function(oContent) {
	return this.indexOfAggregation("content", oContent);
};
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.destroyContent = function() {
	this.destroyAggregation("content");
	return this;
};


/**
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree). 
 *
 * @name sap.ui.core.mvc.View#afterInit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree). 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.attachAfterInit = function(oData, fnFunction, oListener) {
	this.attachEvent("afterInit", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.detachAfterInit = function(fnFunction, oListener) {
	this.detachEvent("afterInit", fnFunction, oListener);
	return this;	
};

/**
 * Fire event afterInit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.mvc.View.prototype.fireAfterInit = function(mArguments) {
	this.fireEvent("afterInit", mArguments);
	return this;
};


/**
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything. 
 *
 * @name sap.ui.core.mvc.View#beforeExit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.attachBeforeExit = function(oData, fnFunction, oListener) {
	this.attachEvent("beforeExit", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.detachBeforeExit = function(fnFunction, oListener) {
	this.detachEvent("beforeExit", fnFunction, oListener);
	return this;	
};

/**
 * Fire event beforeExit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.mvc.View.prototype.fireBeforeExit = function(mArguments) {
	this.fireEvent("beforeExit", mArguments);
	return this;
};


/**
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @name sap.ui.core.mvc.View#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.attachAfterRendering = function(oData, fnFunction, oListener) {
	this.attachEvent("afterRendering", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.detachAfterRendering = function(fnFunction, oListener) {
	this.detachEvent("afterRendering", fnFunction, oListener);
	return this;	
};

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.mvc.View.prototype.fireAfterRendering = function(mArguments) {
	this.fireEvent("afterRendering", mArguments);
	return this;
};


/**
 * Fired before this View is re-rendered. Us to unbind event handlers from HTML elements etc. 
 *
 * @name sap.ui.core.mvc.View#beforeRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 * Fired before this View is re-rendered. Us to unbind event handlers from HTML elements etc. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.attachBeforeRendering = function(oData, fnFunction, oListener) {
	this.attachEvent("beforeRendering", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.mvc.View.prototype.detachBeforeRendering = function(fnFunction, oListener) {
	this.detachEvent("beforeRendering", fnFunction, oListener);
	return this;	
};

/**
 * Fire event beforeRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.mvc.View.prototype.fireBeforeRendering = function(mArguments) {
	this.fireEvent("beforeRendering", mArguments);
	return this;
};


/**
 * Returns the view's Controller instance (if any)
 *
 * @name sap.ui.core.mvc.View.prototype.getController
 * @function

 * @type object
 * @public
 */


// Start of sap/ui/core/mvc/View.js
(function() {
	/**
	 * @namespace
	 * @name sap.ui.core.mvc
	 * @public
	 */

	/**
	 * initialize the View and connect (create if no instance is given) the Controller
	 * 
	 * @private
	 */
	sap.ui.core.mvc.View.prototype._initCompositeSupport = function(mSettings) {

		// init View with constructor settings
		// (e.g. parse XML or identify default controller) ***/
		
		// make user specific data available during view instantiation
		this.oViewData = mSettings.viewData;
		
		if (this.initViewSettings) {
			this.initViewSettings(mSettings);
		}

		createAndConnectController(this, mSettings);

		// the controller is connected now => notify the view implementations
		// and install an ID preprocessor to replace the view ID placeholder
		// with the correct value
		if (this.onControllerConnected) {
			var fnOldIdPreprocessor = sap.ui.core.Element._fnIdPreprocessor;
			var that = this;
			sap.ui.core.Element._fnIdPreprocessor = function(sId) {
				return that.getId() + "--" + sId;
			};
			this.onControllerConnected(this.oController);
			sap.ui.core.Element._fnIdPreprocessor = fnOldIdPreprocessor;
		}

		// notifies the listeners that the View is initialized
		this.fireAfterInit();

	};

	/**
	 * may return null for controller-less View
	 * 
	 * @return Controller of the View
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.getController = function() {
		return this.oController;
	};

	/**
	 * returns an Element by its id in the context of the View
	 * 
	 * @return Element by its id
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.byId = function(sId) {
		return sap.ui.getCore().byId(this.createId(sId));
	};

	/**
	 * creates an id for an Element prefixed with the view id
	 * 
	 * @return prefixed id
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.createId = function(sId) {
		return this.getId() + "--" + sId;
	};

	/**
	 * creates and connects the controller if the controller is not given in the
	 * mSettings
	 * 
	 * @private
	 */
	var createAndConnectController = function(oThis, mSettings) {

		// only set when used internally
		var oController = mSettings.controller;

		// check for default controller
		if (!oController && oThis.getControllerName) {
			// get optional default controller name
			var defaultController = oThis.getControllerName();
			if (defaultController) {
				// create controller
				oController = sap.ui.controller(defaultController);
			}
		}
		
		if ( oController ) {
			// connect controller
			oController.connectToView(oThis);
		}
	};
	
	/**
	 * Returns user specific data object
	 * 
	 * @return object viewData
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.getViewData = function(){
		return this.oViewData;
	};
	
	/**
	 * exit hook
	 * 
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.exit = function() {
		this.fireBeforeExit();
		this.oController = null;
	};

	/**
	 * onAfterRendering hook
	 * 
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.onAfterRendering = function() {
		this.fireAfterRendering();
	};

	/**
	 * onBeforeRendering hook
	 * 
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.onBeforeRendering = function() {
		this.fireBeforeRendering();
	};
	
	/**
	 * Creates a view of the given type, name and with the given id.
	 *
	 * The <code>oView</code> configuration object can have the following properties for the view
	 * instantiation:
	 * <ul>
	 * <li>The ID <code>oView.id</code> specifies an ID for the View instance. If no ID is given,
	 * an ID will be generated.</li>
	 * <li>The view name <code>oView.viewName</code> corresponds to an XML module that can be loaded
	 * via the module system (oView.viewName + suffix ".view.xml")</li>
	 * <li>The controller instance <code>oView.controller</code> must be a valid controller implementation.
	 * The given controller instance overrides the controller defined in the view definition</li>
	 * <li>The view type <code>oView.type</code> specifies what kind of view will be instantiated. All valid
	 * view types are listed in the enumeration sap.ui.core.mvc.ViewType.</li>
	 * <li>The view data <code>oView.viewData</code> can hold user specific data. This data is available
	 * during the whole lifecycle of the view and the controller</li>
	 * </ul>
	 * 
	 * @param {object} [oView] view configuration Object
	 * @public
	 * @static
	 */
	sap.ui.view = function(oView) {
		var view = null;
		if (!oView.type) {
			throw new Error("No view type specified.");
		} else if (oView.type === sap.ui.core.mvc.ViewType.JS) {
			view = new sap.ui.core.mvc.JSView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.JSON) {
			view = new sap.ui.core.mvc.JSONView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.XML) {
			view = new sap.ui.core.mvc.XMLView(oView);
		} else { // unknown view type
			throw new Error("Unknown view type "+oView.type+" specified.");
		}
		return view;
	};
	
}());
}; // end of sap.ui.core.mvc.View
if ( !jQuery.sap.isDeclared('sap.ui.model.resource.ResourceModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * ResourceBundle-based DataBinding
 * 
 * @namespace
 * @name sap.ui.model.resource
 * @public
 */

// Provides the resource bundle based model implementation
jQuery.sap.declare("sap.ui.model.resource.ResourceModel");



/**
 * Constructor for a new ResourceModel.
 * 
 * @class Model implementation for resource bundles
 * 
 * @extends sap.ui.model.Model
 * 
 * @author SAP AG
 * @version
 * 1.2.0
 * 
 * @param {object}
 *            oData.url defines the url of the resource bundle, [oData.locale]
 *            defines an optional locale
 * @constructor
 * @public
 */
sap.ui.model.resource.ResourceModel = function(oData) {
	sap.ui.model.Model.apply(this, arguments);

	this.sDefaultBindingMode = sap.ui.model.BindingMode.OneTime;
	this.mSupportedBindingModes = {
		"OneWay" : false,
		"TwoWay" : false,
		"OneTime" : true
	};
	// load resource bundle
	if (oData && (oData.bundleUrl || oData.bundleName)) { 
		this.ResourceBundle = this.loadResourceBundle(oData);
	} else {
		throw new Error("Neither url nor library name are given. One of these is mandatory.");
	}
};

// chain the prototypes
sap.ui.model.resource.ResourceModel.prototype = jQuery.sap.newObject(sap.ui.model.Model.prototype);

/*
 * Describe the sap.ui.model.resource.ResourceModel. Resulting metadata can be
 * obtained via sap.ui.model.resource.ResourceModel.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.resource.ResourceModel", {

	// ---- object ----
	baseType : "sap.ui.model.Model",
	publicMethods : [ "getResourceBundle" ]
});

/**
 * Returns the resource bundle
 * 
 * @param {object} oData
 * @return loaded resource bundle
 * @private
 */
sap.ui.model.resource.ResourceModel.prototype.loadResourceBundle = function(oData) {
	var oRb, sUrl, sLocale;
	sLocale = oData.bundleLocale;
	if (!sLocale) {
		sLocale = sap.ui.getCore().getConfiguration().getLanguage();
	}
	sUrl = oData.bundleUrl;
	if(oData.bundleName) {
		sUrl = jQuery.sap.getModulePath(oData.bundleName, '.properties');
	}
    oRb = jQuery.sap.resources({url : sUrl, locale : sLocale});
    return oRb;
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty 
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.bindProperty = function(sPath) {
	var oBinding = new sap.ui.model.resource.ResourcePropertyBinding(this, sPath);
	return oBinding;
};

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * 
 * @param {string} sPath the path to the property
 * @type any
 * @return the value of the property
 * @public
 */
sap.ui.model.resource.ResourceModel.prototype.getProperty = function(sPath) {
	var sText = this.ResourceBundle.getText(sPath);
	return sText;
};

/**
 * Returns the resource bundle of this model
 * 
 * @return loaded resource bundle
 * @public
 */
sap.ui.model.resource.ResourceModel.prototype.getResourceBundle = function() {
	return this.ResourceBundle;
};

}; // end of sap.ui.model.resource.ResourceModel
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.model.odata.ODataPropertyBinding
jQuery.sap.declare("sap.ui.model.odata.ODataPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for oData format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.odata.ODataPropertyBinding = function(oModel, sPath, oContext){
	sap.ui.model.PropertyBinding.apply(this, arguments);

	this.oValue = this._getValue();
};
sap.ui.model.odata.ODataPropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.PropertyBinding.prototype);

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 * @protected
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};

/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.odata.ODataPropertyBinding.prototype._getValue = function(){
	return this.oModel._getObject(this.sPath, this.oContext);
};

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.setValue = function(oValue){
	// TODO do nothing because currently setValue not supported because of OneWay Binding
};

/**
 * Setter for context
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.setContext = function(oContext) {
	this.oContext = oContext;
	this.checkUpdate();
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.checkUpdate = function(){
	var oValue = this._getValue();
	if(oValue !== this.oValue) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange();
	}
};
}; // end of sap.ui.model.odata.ODataPropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the XML model implementation of a list binding
jQuery.sap.declare("sap.ui.model.xml.XMLTreeBinding");


/**
 *
 * @class
 * Tree binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.xml.XMLTreeBinding = function(oModel, sPath, oContext){
	sap.ui.model.TreeBinding.apply(this, arguments);
	if (!this.oContext) {
		this.oContext = "";
	}
	this.filterInfo = {}
	this.filterInfo.aFilteredContexts = [];
	this.filterInfo.oParentContext = {};
};
sap.ui.model.xml.XMLTreeBinding.prototype = jQuery.sap.newObject(sap.ui.model.TreeBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.xml.XMLTreeBinding", {

  // ---- object ----
  baseType : "sap.ui.model.TreeBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * Return root contexts for the tree
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.xml.XMLTreeBinding.prototype.getRootContexts = function() {
	return this.getNodeContexts(this.sPath);
};

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.xml.XMLTreeBinding.prototype.getNodeContexts = function(oContext) {
	
	if (!jQuery.sap.endsWith(oContext,"/")) {
		oContext = oContext + "/";
	}	
	if (!jQuery.sap.startsWith(oContext,"/")) {
		oContext = "/" + oContext;
	}

	var aContexts = [],
		mNodeIndices = {},
		that = this,
		oNode = this.oModel._getObject(oContext),
		oChild;

	jQuery.each(oNode[0].childNodes, function(sName, oChild) {
		if (oChild.nodeType == 1) { // check if node is an element
			if (mNodeIndices[oChild.nodeName] == undefined){
				mNodeIndices[oChild.nodeName] = 0;
			} else {
				mNodeIndices[oChild.nodeName]++;
			}
			var oChildContext = oContext + oChild.nodeName + "/" + mNodeIndices[oChild.nodeName];
			// check if there is a filter on this level applied
			if (that.aFilters && !that.bIsFiltering){
				if (jQuery.inArray(oChildContext, that.filterInfo.aFilteredContexts) != -1) {
					aContexts.push(oChildContext);
				}			
			}else {
				aContexts.push(oChildContext);
			}			
		}
	});

	return aContexts;
};

/**
 * 
 * @see sap.ui.model.TreeBinding.prototype.filter
 * Filters the tree according to the filter definitions.
 * The filtering is applied recursively through the tree. 
 * The parent nodes of filtered child nodes will also be displayed if they don't match the filter conditions.
 * All filters belonging to a group (=have the same path) are ORed and after that the
 * results of all groups are ANDed.
 * @function
 * @name sap.ui.model.TreeBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */
sap.ui.model.xml.XMLTreeBinding.prototype.filter = function(aFilters){
	// The filtering is applied recursively through the tree and stores all filtered contexts and its parent contexts in an array.
	
	// reset previous stored filter contexts
	this.filterInfo.aFilteredContexts = [];
	this.filterInfo.oParentContext = {};
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = null;
	} else {
		this.aFilters = aFilters;
		// start with binding path root
		this.filterRecursive(this.sPath);
	}
	this._fireChange();
	this._fireFilter({filters: aFilters});
};

/**
 * filters the tree recursively.
 * @param {object} oParentContext the context where to start. The children of this node context are then filtered recursively.
 * @private
 */
sap.ui.model.xml.XMLTreeBinding.prototype.filterRecursive = function(oParentContext){
	
	this.bIsFiltering = true;
	var aChildren = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;
	
	if (aChildren.length > 0) {
		var that = this;
		jQuery.each(aChildren, function(i, oChildContext){
			that.filterRecursive(oChildContext);
		});
		this.applyFilter(oParentContext);		
	}
};


/**
 * Performs the real filtering and stores all filtered contexts and its parent context into an array.
 * @param {object} oParentContext the context where to start. The children of this node context are filtered.
 * @private
 */
sap.ui.model.xml.XMLTreeBinding.prototype.applyFilter = function(oParentContext){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true;
	this.bIsFiltering = true;
	var aUnfilteredContexts = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;
	jQuery.each(aUnfilteredContexts, function(i, aUnfilteredContext) {
		bFiltered = true;
		jQuery.each(that.aFilters, function(j, oFilter) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
			aFilterGroup.push(oFilter);
		});
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			var oValue = that.oModel._getObject(sPath,aUnfilteredContext);
			if (typeof oValue == "string") oValue = oValue.toUpperCase();
			bGroupFiltered = false;
			jQuery.each(aFilterGroup, function(j, oFilter) {
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue && fnTest(oValue)) {
					bGroupFiltered = true;
					return false;
				}
			});
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(aUnfilteredContext);
		}
	});
	if (aFiltered.length > 0) {
		jQuery.merge(this.filterInfo.aFilteredContexts, aFiltered);		
		this.filterInfo.aFilteredContexts.push(oParentContext);	
		this.filterInfo.oParentContext = oParentContext;
	}
	// push additionally parentcontexts if any children are already included in filtered contexts
	if (jQuery.inArray(this.filterInfo.oParentContext, aUnfilteredContexts) != -1) {
		this.filterInfo.aFilteredContexts.push(oParentContext);
		// set the parent context which was added to be the new parent context
		this.filterInfo.oParentContext = oParentContext;
	}
	
};

/**
 * Provides a JS filter function for the given filter
 * @private
 */
sap.ui.model.xml.XMLTreeBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = oFilter.oValue1,
		oValue2 = oFilter.oValue2;
	if (typeof oValue1 == "string") oValue1 = oValue1.toUpperCase();
	if (typeof oValue2 == "string") oValue2 = oValue2.toUpperCase();
	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value > oValue1) && (value < oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) != -1; }; break;
		case "StartsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == 0; }; break;
		case "EndsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == value.length - new String(oFilter.oValue1).length; }; break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.xml.XMLTreeBinding.prototype.checkUpdate = function(){
	this._fireChange();
};
}; // end of sap.ui.model.xml.XMLTreeBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the XML model implementation of a property binding
jQuery.sap.declare("sap.ui.model.xml.XMLPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.xml.XMLPropertyBinding = function(oModel, sPath, oContext){
	sap.ui.model.PropertyBinding.apply(this, arguments);

	this.oValue = this._getValue();
};
sap.ui.model.xml.XMLPropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.PropertyBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.xml.XMLPropertyBinding", {

  // ---- object ----
  baseType : "sap.ui.model.PropertyBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * @see sap.ui.model.PropertyBinding.prototype.getValue
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};

/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.xml.XMLPropertyBinding.prototype._getValue = function(){
	var sProperty = this.sPath.substr(this.sPath.lastIndexOf("/")+1);
	if (sProperty == "__name__") {
		var aPath = this.oContext.split("/");
		return aPath[aPath.length - 1];
	}
	return this.oModel.getProperty(this.sPath, this.oContext);
};

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.setValue = function(oValue){
	if (this.oValue != oValue){
		this.oValue = oValue;
		this.oModel.setProperty(this.sPath, oValue, this.oContext);
	}
};

/**
 * Setter for context
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.setContext = function(oContext) {
	this.oContext = oContext;
	this.checkUpdate();
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.checkUpdate = function(){
	var oValue = this._getValue();
	if(oValue !== this.oValue) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange();
	}
};
}; // end of sap.ui.model.xml.XMLPropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the XML model implementation of a list binding
jQuery.sap.declare("sap.ui.model.xml.XMLListBinding");



/**
 *
 * @class
 * List binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.xml.XMLListBinding = function(oModel, sPath, oContext, oSorter, aFilters){
	sap.ui.model.ListBinding.apply(this, arguments);
	this.oSorter = oSorter;
	this.aFilters = aFilters;
	this.update();
};
sap.ui.model.xml.XMLListBinding.prototype = jQuery.sap.newObject(sap.ui.model.ListBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.xml.XMLListBinding", {

  // ---- object ----
  baseType : "sap.ui.model.ListBinding",
  publicMethods : [
	// methods
	"getLength"
  ]

});

/**
 * Return contexts for the list or a specified subset of contexts
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts 
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index. 
 * Default is the whole list length. 
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.xml.XMLListBinding.prototype.getContexts = function(iStartIndex, iLength) {
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = Math.min(this.iLength, 100);
	}

	var iEndIndex = Math.min(iStartIndex + iLength, this.aIndices.length);
	
	function slash(s) { return s.slice(-1) !== "/" ? s + "/" : s; }
	var aContexts = [],
		// if the path is not absolute, the prefix starts with the context. It always ends with the (potentially empty) path
		sPrefix = slash((this.sPath.indexOf("/") !== 0 ? slash(this.oContext || "") : "") + this.sPath);
	for (var i = iStartIndex; i < iEndIndex; i++) {
		aContexts.push(sPrefix + this.aIndices[i]);
	}
	return aContexts;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.xml.XMLListBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this.update();
		this._fireChange();
	}
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 * @public
 */
sap.ui.model.xml.XMLListBinding.prototype.getLength = function() {
	return this.iLength;
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 */
sap.ui.model.xml.XMLListBinding.prototype._getLength = function() {
	return this.aIndices.length;
};

/**
 * Update the list, indices array and apply sorting and filtering
 * @private
 */
sap.ui.model.xml.XMLListBinding.prototype.update = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (oList) {
		this.oList = jQuery(oList).slice(0);
		this.updateIndices();
		this.applyFilter();
		this.applySort();
		this.iLength = this._getLength();
	}
	else {
		this.oList = null;
		this.aIndices = [];
		this.iLength = 0;
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.xml.XMLListBinding.prototype.checkUpdate = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (!this.oList || !oList || oList.length != this.oList.length) {
		this.update();
		this._fireChange();
	}
};

/**
 * Get indices of the list
 */
sap.ui.model.xml.XMLListBinding.prototype.updateIndices = function(){
	this.aIndices = [];
	for (var i = 0; i < this.oList.length; i++) {
		this.aIndices.push(i);
	}
};

/**
 * @see sap.ui.model.ListBinding.prototype.sort
 *
 */
sap.ui.model.xml.XMLListBinding.prototype.sort = function(oSorter){
	if (!oSorter) {
		this.oSorter = null;
		this.updateIndices();
		this.applyFilter();
	} else {
		this.oSorter = oSorter;
		this.applySort();
	}
	this._fireChange();
};

/**
 * Sorts the list
 * @private
 */
sap.ui.model.xml.XMLListBinding.prototype.applySort = function(){
	if (!this.oSorter) {
		return;
	}
	var that = this,
		aSortValues = [],
		oValue;
	jQuery.each(this.aIndices, function(i, iIndex) {
		oValue = that.oModel._getObject(that.oSorter.sPath, that.oList[iIndex]);
		if (typeof oValue == "string") {
			oValue = oValue.toUpperCase();
		}
		aSortValues[iIndex] = oValue;
	});
	this.aIndices.sort(function(a, b) {
		var valueA = aSortValues[a],
			valueB = aSortValues[b],
			returnValue = 0;
		if (valueA < valueB || valueB == null) {
			returnValue = -1;
		}
		if (valueA > valueB || valueA == null) {
			returnValue = 1;
		}
		if (that.oSorter.bDescending) {
			returnValue = -returnValue;
		}
		return returnValue;
	});
};

/**
 * @see sap.ui.model.ListBinding.prototype.filter
 *
 */
sap.ui.model.xml.XMLListBinding.prototype.filter = function(aFilters){
	this.updateIndices();
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = null;
		this.iLength = this._getLength();
	} else {
		this.aFilters = aFilters;
		this.applyFilter();
	}
	this.applySort();
	this._fireChange();
};

/**
 * Filters the list
 * Filters are first grouped according to their binding path.
 * All filters belonging to a group are ORed and after that the
 * results of all groups are ANDed.
 * Usually this means, all filters applied to a single table column
 * are ORed, while filters on different table columns are ANDed.
 *
 * @private
 */
sap.ui.model.xml.XMLListBinding.prototype.applyFilter = function(){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true;
	jQuery.each(this.aIndices, function(i, iIndex) {
		bFiltered = true;
		jQuery.each(that.aFilters, function(j, oFilter) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
			aFilterGroup.push(oFilter);
		});
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			var oValue = that.oModel._getObject(sPath, that.oList[iIndex]);
			if (typeof oValue == "string") {
				oValue = oValue.toUpperCase();
			}
			bGroupFiltered = false;
			jQuery.each(aFilterGroup, function(j, oFilter) {
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue != undefined && fnTest(oValue)) {
					bGroupFiltered = true;
					return false;
				}
			});
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(iIndex);
		}
	});
	this.aIndices = aFiltered;
	this.iLength = aFiltered.length;
};

/**
 * Provides a JS filter function for the given filter
 *
 * @param {Object} oFilter
 */
sap.ui.model.xml.XMLListBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = oFilter.oValue1,
		oValue2 = oFilter.oValue2;
	if (typeof oValue1 == "string") {
		oValue1 = oValue1.toUpperCase();
	}
	if (typeof oValue2 == "string") {
		oValue2 = oValue2.toUpperCase();
	}
	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value > oValue1) && (value < oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) != -1; }; break;
		case "StartsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == 0; }; break;
		case "EndsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == value.length - new String(oFilter.oValue1).length; }; break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};

/**
 * Get distinct values
 *
 * @param {String} sPath
 * @protected
 */
sap.ui.model.xml.XMLListBinding.prototype.getDistinctValues = function(sPath){
	var aResult = [],
		oMap = {},
		sValue,
		that = this;
	jQuery.each(this.oList, function(i, oContext) {
		sValue = that.oModel.getProperty(sPath, oContext);
		if (!oMap[sValue]) {
			oMap[sValue] = true;
			aResult.push(sValue);
		}
	});
	return aResult;
};
}; // end of sap.ui.model.xml.XMLListBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.control.ControlModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * Control-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.control
 * @public
 */

// Provides the JSON object based model implementation
jQuery.sap.declare("sap.ui.model.control.ControlModel");


//jQuery.sap.require("sap.ui.model.control.ControlListBinding");

/**
 * Constructor for a new ControlModel.
 *
 * @class
 * Model implementation for Control model
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @constructor
 */
sap.ui.model.control.ControlModel = function (oControl) {
	sap.ui.model.Model.apply(this, arguments);
	this.oControl = oControl;
	this.oControl.attachEvent("_change", this.checkUpdate, this);
	this.oElements = [];
};

//chain the prototypes
sap.ui.model.control.ControlModel.prototype = jQuery.sap.newObject(sap.ui.model.Model.prototype);

/*
 * Describe the sap.ui.model.json.JSONModel.
 * Resulting metadata can be obtained via sap.ui.model.json.JSONModel.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.control.ControlModel", {
  baseType : "sap.ui.model.Model"
});

/**
 */
sap.ui.model.control.ControlModel.prototype.destroy = function() {
	this.oControl.detachEvent("_change", this.checkUpdate, this);
};

/**
 */
sap.ui.model.control.ControlModel.prototype.addFacadeComponent = function(oElement) {
	var i=jQuery.inArray(oElement, this.oElements);
	if ( i<0 ) {
		this.oElements.push(oElement);
		oElement.attachEvent("_change", this.checkUpdate, this);
	}
};

/**
 */
sap.ui.model.control.ControlModel.prototype.removeFacadeComponent = function(oElement) {
	var i=jQuery.inArray(oElement, this.oElements);
	if ( i>= 0 ) {
		this.oElements.splice(i, 1);
		oElement.detachEvent("_change", this.checkUpdate, this);
	}
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.control.ControlModel.prototype.bindProperty = function(sPath, oContext) {
	oContext = oContext || this.oControl;
	if ( oContext !== this.oControl ) {
		this.addFacadeComponent(oContext);
	}
	return new sap.ui.model.control.ControlPropertyBinding(this, sPath, oContext);
};

/**
 */
sap.ui.model.control.ControlModel.prototype.checkUpdate = function(oEvent) {
	if ( this._onchange ) {
		this._onchange(oEvent);
	}
	if ( this.aBindings.length ) {
		// TODO optimize with info from event object (control & property)
		var aBindings = this.aBindings.slice(0);
		jQuery.each(aBindings, function(iIndex, oBinding) {
			oBinding.checkUpdate();
		});
	}
};
}; // end of sap.ui.model.control.ControlModel
if ( !jQuery.sap.isDeclared('jquery.sap.xml') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides xml parsing and error checking functionality.
jQuery.sap.declare("jquery.sap.xml", false);

(function() {

	/**
	 * Parses the specified XML formatted string text using native parsing
	 * function of the browser and returns a valid XML document. If an error
	 * occurred during parsing a parse error object is returned as property (parseError) of the
	 * returned XML document object. The parse error object has the following error
	 * information parameters: errorCode, url, reason, srcText, line, linepos, filepos
	 *
	 * @param {string}
	 *            sXMLText the XML data as string
	 * @return {object} the parsed XML document with a parseError property as described in
	 *         getParseError. An error occurred if the errorCode property of the parseError is != 0.
	 * @public
	 */
	jQuery.sap.parseXML = function parseXML(sXMLText) {
		var oXMLDocument;
		if (window.DOMParser) {
			var oParser = new DOMParser();
			try {
				oXMLDocument = oParser.parseFromString(sXMLText, "text/xml");				
			} catch (e) {
				var oParseError = jQuery.sap.getParseError(oXMLDocument);
				oXMLDocument = {};
				oParseError.reason = e.message;
				oXMLDocument.parseError = oParseError;
				return oXMLDocument;		
			}
		} else {
			oXMLDocument = new ActiveXObject("Microsoft.XMLDOM");
			oXMLDocument.async = false;
			oXMLDocument.loadXML(sXMLText);
		}
		var oParseError = jQuery.sap.getParseError(oXMLDocument);
		if (oParseError){
			if (!oXMLDocument.parseError) {
				oXMLDocument.parseError = oParseError;				
			}
		}
		return oXMLDocument;
	};
	
	/**
	 * Serializes the specified XML document into a string representation.
	 *
	 * @param {string}
	 *            oXMLDocument the XML document object to be serialized as string
	 * @return {object} the serialized XML string
	 * @public
	 */
	jQuery.sap.serializeXML = function serializeXML(oXMLDocument) {
        var sXMLString = "";
        if (window.ActiveXObject) {
			sXMLString = oXMLDocument.xml;
        }
        if (window.XMLSerializer) {
			var serializer = new XMLSerializer();
			sXMLString = serializer.serializeToString(oXMLDocument);
        }
        return sXMLString;
	};


	/**
	 * Extracts parse error information from the specified document (if any). If
	 * an error was found the returned object has the following error
	 * information parameters: errorCode, url, reason, srcText, line, linepos,
	 * filepos
	 *
	 * @return oParseError if errors were found, or an object with an errorCode of 0 only
	 * @private
	 */
	jQuery.sap.getParseError = function getParseError(oDocument) {
		var oParseError = {
			errorCode : -1,
			url : "",
			reason : "unknown error",
			srcText : "",
			line : -1,
			linepos : -1,
			filepos : -1
		};

		// IE
		if (jQuery.browser.msie && oDocument && oDocument.parseError
				&& oDocument.parseError.errorCode != 0) {
			return oDocument.parseError;
		}

		// Firefox
		if (jQuery.browser.mozilla && oDocument && oDocument.documentElement
				&& oDocument.documentElement.tagName == "parsererror") {

			var sErrorText = oDocument.documentElement.firstChild.nodeValue, rParserError = /XML Parsing Error: (.*)\nLocation: (.*)\nLine Number (\d+), Column (\d+):(.*)/;

			if (rParserError.test(sErrorText)) {
				oParseError.reason = RegExp.$1;
				oParseError.url = RegExp.$2;
				oParseError.line = parseInt(RegExp.$3, 10);
				oParseError.linepos = parseInt(RegExp.$4, 10);
				oParseError.srcText = RegExp.$5;

			}
			return oParseError;
		}

		// Safari
		if (jQuery.browser.webkit && oDocument && oDocument.documentElement
				&& oDocument.documentElement.tagName == "html"
				&& oDocument.getElementsByTagName("parsererror").length > 0) {

			var sErrorText = jQuery.sap.serializeXML(oDocument), rParserError = /error on line (\d+) at column (\d+): ([^<]*)/;

			if (rParserError.test(sErrorText)) {
				oParseError.reason = RegExp.$3;
				oParseError.url = "";
				oParseError.line = parseInt(RegExp.$1, 10);
				oParseError.linepos = parseInt(RegExp.$2, 10);
				oParseError.srcText = "";

			}
			return oParseError;
		}

		if (!oDocument || !oDocument.documentElement) {
			return oParseError;
		}

		return 	{
				errorCode : 0
			};
	};

}());
}; // end of jquery.sap.xml
if ( !jQuery.sap.isDeclared('sap.ui.util.Rect') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * @namespace
 * @name sap.ui.util
 * @public
 */

// A helper type to represent a rectangle using screen coordinates
jQuery.sap.declare("sap.ui.util.Rect");


/**
 * Creates an instance of <code>sap.ui.util.Rect</code> with the given values.
 *
 * @class A rectangle is defined by its upper left corner (left &amp; top) and its width and height.
 *
 * @extends sap.ui.base.Object
 * @param {int} iTop the top position
 * @param {int} iLeft the left position
 * @param {int} iWidth the width
 * @param {int} iHeight the height
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.util.Rect = function(iTop, iLeft, iWidth, iHeight) {
	this.top = iTop || 0;
	this.left = iLeft || 0;
	this.width = iWidth || 0;
	this.height = iHeight || 0;
};
sap.ui.util.Rect.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Returns whether a point described by X and Y is inside this Rectangle's boundaries
 *
 * @param {int} iPosX
 * @param {int} iPosY
 * @return whether X and Y is inside this Rectangle's boundaries
 * @type  boolean
 * @public
 * @since 0.8.6
 */
sap.ui.util.Rect.prototype.contains = function(iPosX, iPosY) {
	jQuery.sap.assert(!isNaN(iPosX), "iPosX must be a number");
	jQuery.sap.assert(!isNaN(iPosY), "iPosY must be a number");

	return iPosX >= this.left
		&& iPosX <= this.left + this.width
		&& iPosY >= this.top
		&& iPosY <= this.top + this.height;
};

///**
//* Applies the current settings to the given oDomRef
//* @param {object} oDomRef the oDomRef
//* @param {sap.ui.util.Rect} [oBias] an optional parameter defining some offset to add to the applied style
//* @return
//*/
//sap.ui.util.Rect.prototype.applyToDom = function(oDomRef, oBias) {
//	if(oBias instanceof sap.ui.util.Rect){
//		for(var p in this){
//			oDomRef.style[p] = this[p] + oBias[p];
//		}
//	} else {
//		for(var p in this){
//			oDomRef.style[p] = this[p];
//		}
//	}
//};
}; // end of sap.ui.util.Rect
if ( !jQuery.sap.isDeclared('sap.ui.core.ListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.ListItem.
jQuery.sap.declare("sap.ui.core.ListItem");



/**
 * Constructor for a new ListItem.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>icon : string</li>
 * <li>additionalText : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Item#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * An item that is used in lists or list-similar controls.
 * 
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.ListItem = function (sId, mSettings) {
	sap.ui.core.Item.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.ListItem.prototype = jQuery.sap.newObject(sap.ui.core.Item.prototype);

/*
 * Describe the sap.ui.core.ListItem. 
 * Resulting metadata can be obtained via sap.ui.core.ListItem.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.ListItem", {

  // ---- object ----
  baseType : "sap.ui.core.Item",
  publicMethods : [
    // properties 
    "getIcon", "setIcon", "getAdditionalText", "setAdditionalText"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "icon" : {name : "icon", type : "string", group : "Appearance", defaultValue : null},
    "additionalText" : {name : "additionalText", type : "string", group : "Data", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>icon</code>.
 * Icon belonging to this instance of <code>ListItem</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getIcon = function() {
	return this.getProperty("icon");
};

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ListItem.prototype.setIcon = function(sIcon) {
	this.setProperty("icon", sIcon);
	return this;
};


/**
 * Getter for property <code>additionalText</code>.
 * Additional text of type string, optionally to be displayed along with this item.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>additionalText</code>
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getAdditionalText = function() {
	return this.getProperty("additionalText");
};

/**
 * Setter for property <code>additionalText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAdditionalText  new value for property <code>additionalText</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ListItem.prototype.setAdditionalText = function(sAdditionalText) {
	this.setProperty("additionalText", sAdditionalText);
	return this;
};


// Start of sap/ui/core/ListItem.js

}; // end of sap.ui.core.ListItem
if ( !jQuery.sap.isDeclared('sap.ui.core.plugin.DeclarativeSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.plugin.DeclarativeSupport
jQuery.sap.declare("sap.ui.core.plugin.DeclarativeSupport");

/**
 * Creates an instance of the class <code>sap.ui.core.plugin.DeclarativeSupport</code>
 *
 * @class Central Class for the enabling declarative programming
 *
 * @author Peter Muessig
 * @version 1.2.0
 * @private
 */
sap.ui.core.plugin.DeclarativeSupport = function() {
};

/**
 * Will be invoked by <code>sap.ui.core.Core</code> to notify the plugin to start.
 *
 * @param {sap.ui.core.Core} oCore reference to the Core
 * @param {boolean} [bOnInit] whether the hook is called during core initialization
 * @public
 */
sap.ui.core.plugin.DeclarativeSupport.prototype.startPlugin = function(oCore, bOnInit) {
	jQuery.sap.log.info("Starting DeclarativeSupport plugin.");
	jQuery.sap.log.warning("DeclarativeSupport is an experimental feature which might change in future!");
	this.oCore = oCore;
	this.oWindow = window;
	this._parse();
};

/**
 * Will be invoked by <code>sap.ui.core.Core</code> to notify the plugin to start
 * @param {sap.ui.core.Core} oCore reference to the Core
 * @public
 */
sap.ui.core.plugin.DeclarativeSupport.prototype.stopPlugin = function() {
	jQuery.sap.log.info("Stopping DeclarativeSupport plugin.");
	this.oCore = null;
};


/**
 * Enhances the given document by parsing the Control and Elements and create
 * the SAPUI5 controls for them.
 * @private
 */
sap.ui.core.plugin.DeclarativeSupport.prototype._parse = function(oRootDomRef) {

	// determine the root domref
	oRootDomRef = oRootDomRef || document.body;
	
	// lookup all DOM elements defining a Type for a SAPUI5 control
	var $DeclarativeTags = jQuery("[data-sap-ui-type]", oRootDomRef);

	// determine the valid root domrefs
	var aRootDomRef = [];
	jQuery.each($DeclarativeTags, function(vKey, oDomRef) {
		if (jQuery(oDomRef).parents("[data-sap-ui-type]").length === 0) {
			aRootDomRef.push(oDomRef);
		}
	});
	
	// find and parse the root domrefs
	var that = this;
	jQuery.each(aRootDomRef, function(vKey, oDomRef) {
		that._parseRootDomRef(oDomRef);
	});
	
};


sap.ui.core.plugin.DeclarativeSupport.prototype._parseRootDomRef = function (oDomRef) {
	
	// get the jQuery object
	var jDomRef = jQuery(oDomRef);
	
	// determine the type of the control
	var sType = jDomRef.attr("data-sap-ui-type");
	
	// we differ between UIArea and default SAPUI5 control
	var aControls = [];
	if (sType === "sap.ui.core.UIArea") {
		
		// use a UIArea / better performance when rendering multiple controls
		// parse and create the controls / children of domref
		var that = this;
		jQuery.each(jDomRef.children(), function(vKey, oDomRef) {
			var oControl = that._parseDomRef(oDomRef);
			if (oControl) {
				aControls.push(oControl);
			}
		});		
		
	} else if (sType) {
		
		// only a single control - so add this one
		var oControl = this._parseDomRef(oDomRef);
		if (oControl) {
			aControls.push(oControl);	
		}
		
	}
	
	// remove the old content
	jDomRef.empty();
	
	// add the controls
	jQuery.each(aControls, function(vKey, oControl) {
		oControl.placeAt(oDomRef);
	});		
	
	// remove the attributes for declarative support
	jDomRef.removeAttr("data-sap-ui-type");

};



/**
 * Parses a given DOM ref and converts it into a Control.
 * @param oDomRef {DomElement} reference to a DOM element
 * @return {sap.ui.core.Control} reference to a Control
 * @private
 */
sap.ui.core.plugin.DeclarativeSupport.prototype._parseDomRef = function (oDomRef) {

	var jDomRef = jQuery(oDomRef);
	
	// determine the type of the control
	var sControl = jDomRef.attr("data-sap-ui-type");
	if (sControl) {

		// in case of having an ID retrieve it and clear it in the placeholder
		// DOM element to avoid double IDs
		var sControlId = "";
		if (jDomRef.attr("id")) {
			sControlId = jDomRef.attr("id");
			jDomRef.attr("id", "");
		}

		// create a new control (depending on its type info)
		var oControl = new (jQuery.sap.getObject(sControl))(sControlId);

		// determine the settings (since attributes of a HTML element is not
		// case sensitive they have to be written in the following way:
		// label-for => labelFor)
		var oSettings = {};
		for (var key in oDomRef.attributes) {
			if(!isNaN(key)) {

				// parse all attributes of a control
				// (except the ID, tooltip and the data-sap-ui information)
				var sName = oDomRef.attributes[key].name;
				if (sName != "data-sap-ui-type" &&
					sName != "data-sap-ui-aggregation" &&
					sName != "data-sap-ui-default-aggregation" &&
					sName != "id"  && sName != "tooltip") {

					// camel case the name
					sName = this._camelCase(sName);
					
					// apply the value of the attribute to a
					//   * property,
					//   * association (id of the control) or
					//   * event (name of the function)
					var sValue = oDomRef.attributes[key].value;
					if (oControl.getMetadata().getAllProperties()[sName]) {
						// PROPERTY
						var oProperty = oControl.getMetadata().getAllProperties()[sName];
						var oType = sap.ui.base.DataType.getType(oProperty.type);
						if (oType) {
							if (oType instanceof sap.ui.base.DataType) {
								// DATATYPE
								oSettings[sName] = oType.parseValue(sValue);
							} else {
								// any other, e.g. ENUMARATION
								oSettings[sName] = sValue;
							}
						}
					} else if (oControl.getMetadata().getAllAssociations()[sName]) {
						// ASSOCIATION
						oSettings[sName] = sValue; // use the value as ID
					} else if (oControl.getMetadata().getAllEvents()[sName]) {
						// EVENT
						var oWindow = window;
						if (sValue && sValue.indexOf(".") != -1) {
							// NESTED FUNCTIONS SEPARATED VIA DOTS!!!!
							var aPath = sValue.split(".");
							for (var i = 0; i < aPath.length - 1; i++) {
								oWindow = oWindow[aPath[i]];
								if (!oWindow) {
									sValue = null;
									break;
								}
							}
							sValue = aPath[aPath.length - 1];
						}
						if (sValue && typeof(oWindow[sValue]) == "function") {
							oSettings[sName] = oWindow[sValue];
						}


					}

				} else if (sName == "tooltip") {

					// special handling for tooltip (which is an aggregation)
					// but can also be applied as property
					oSettings[sName] = oDomRef.attributes[key].value;

				}

			}

		}

		// AGGREGATION:
		// check for child aggregations
		var arrChildren = jDomRef.children();
		var sDefaultType = jDomRef.attr("data-sap-ui-default-aggregation") || oControl.getMetadata().getDefaultAggregationName();
		var oAggregations = oControl.getMetadata().getAllAggregations();
		if (!sDefaultType && oAggregations) {
			// determine the default aggregation and ignore the tooltip
			for (var sAggregationName in oAggregations) {
				if (sAggregationName !== "tooltip") {
					sDefaultType = sAggregationName;
					break;
				}
			}
		}
		var that = this;
		jQuery.each(jDomRef.children(), function(key, oChild) {

			// check for an aggregation tag of in case of a sepcifiying the
			// aggregration on the parent control this will be used in case
			// of no meta tag was found
			var sType = jQuery(oChild).attr("data-sap-ui-aggregation");
			var bUseDefault = false;
			if (!sType) {
				bUseDefault = true;
				sType = sDefaultType;
			}

			// add the child to the aggregation
			if (sType && oAggregations[sType]) {

				var bMultiple = oAggregations[sType].multiple;

				jQuery.each(bUseDefault ? [this] : jQuery(oChild).children(), function(key, value) {

					var oControl = that._parseDomRef(value);
					if (oControl) {

						if (bMultiple) {
							// 1..n AGGREGATION
							if (!oSettings[sType]) {
								oSettings[sType] = [];
							}
							oSettings[sType].push(oControl);
						} else {
							// 1..1 AGGREGATION
							oSettings[sType] = oControl;
						}

					}

				});

			}

		});

		// apply the settings to the control
		oControl.applySettings(oSettings);

		// mark control as parsed
		jDomRef.removeAttr("data-sap-ui-type");

		// return the control
		return oControl;

	} else {
		
		// include HTML content
		var oHTML = new sap.ui.core.HTML({preferDOM: true});
		oHTML.setDOMContent(oDomRef);
		
		// check for declarative content
		this._parse(oDomRef);
		
		return oHTML;
		
	}

	// nothing to return
	return null;

};


sap.ui.core.plugin.DeclarativeSupport.prototype._camelCase = function(sString) {
	// convert minus into upper case for the next, e.g.
	// label-for => labelFor
	if (sString.indexOf("-") != -1) {
		var arrStringParts = sString.split("-");
		var arrString = [];
		for (var i = 0; i < arrStringParts.length; i++) {
			if (i > 0 && arrStringParts[i].length > 1) {
				arrString.push(arrStringParts[i].substring(0, 1).toUpperCase());
				arrString.push(arrStringParts[i].substring(1));
			} else {
				arrString.push(arrStringParts[i]);
			}
		}
		sString = arrString.join("");
	}
	return sString;
};


/**
 * Create the <code>sap.ui.core.plugin.DeclarativeSupport</code> plugin and
 * register it within the <code>sap.ui.core.Core</code>.
 */
(function(){
	var oThis = new sap.ui.core.plugin.DeclarativeSupport();
	sap.ui.getCore().registerPlugin(oThis);
}());
}; // end of sap.ui.core.plugin.DeclarativeSupport
if ( !jQuery.sap.isDeclared('sap.ui.core.HTML') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.HTML.
jQuery.sap.declare("sap.ui.core.HTML");



/**
 * Constructor for a new HTML.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>content : string</li>
 * <li>preferDOM : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>afterRendering : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Embeds standard HTML in a SAPUI5 control tree.
 * @extends sap.ui.core.Control
 *
 * @author Frank Weigel 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.HTML = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.HTML.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.core.HTML. 
 * Resulting metadata can be obtained via sap.ui.core.HTML.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.HTML", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getContent", "setContent", "getPreferDOM", "setPreferDOM", 
    // aggregations
    
    // associations
    
    // events
    "attachAfterRendering", "detachAfterRendering"
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "content" : {name : "content", type : "string", group : "Misc", defaultValue : null},
    "preferDOM" : {name : "preferDOM", type : "boolean", group : "Misc", defaultValue : true}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "afterRendering" : "afterRendering"
  }

});	

sap.ui.core.HTML.M_EVENTS = {'afterRendering':'afterRendering'};


/**
 * Getter for property <code>content</code>.
 * HTML content to be displayed, defined as a string. The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.
 * 
 * Some of these restrictions (there might be others!) are:
 * <ul>
 * <li>the content must be enclosed in tags, pure text is not supported. </li>
 * <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.</li>
 * </ul>
 * 
 * Please consider to consult the jQuery documentation as well.
 * 
 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. setContent("<div/><div/>")), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>content</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getContent = function() {
	return this.getProperty("content");
};

/**
 * Setter for property <code>content</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sContent  new value for property <code>content</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.HTML.prototype.setContent = function(sContent) {
	this.setProperty("content", sContent);
	return this;
};


/**
 * Getter for property <code>preferDOM</code>.
 * Whether existing DOM content is preferred over the given content string.
 * 
 * There are two scenarios where this flag is relevant (when set to true):
 * <ul>
 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content</li>
 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content</li>
 * </ul>
 * 
 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>preferDOM</code>
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getPreferDOM = function() {
	return this.getProperty("preferDOM");
};

/**
 * Setter for property <code>preferDOM</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bPreferDOM  new value for property <code>preferDOM</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.HTML.prototype.setPreferDOM = function(bPreferDOM) {
	this.setProperty("preferDOM", bPreferDOM);
	return this;
};


/**
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.
 *  
 *
 * @name sap.ui.core.HTML#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.isPreservedDOM Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property or it is an empty HTML control).
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.
 *  
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.HTML.prototype.attachAfterRendering = function(oData, fnFunction, oListener) {
	this.attachEvent("afterRendering", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.HTML.prototype.detachAfterRendering = function(fnFunction, oListener) {
	this.detachEvent("afterRendering", fnFunction, oListener);
	return this;	
};

/**
 * Fire event afterRendering to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'isPreservedDOM' of type <code>boolean</code> Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property or it is an empty HTML control).</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.HTML.prototype.fireAfterRendering = function(mArguments) {
	this.fireEvent("afterRendering", mArguments);
	return this;
};


// Start of sap/ui/core/HTML.js
/**
 * @return {DOMNode} The element's DOM reference or null
 * @public
 */
sap.ui.core.HTML.prototype.getDomRef = function() {
	return jQuery.sap.domById("sap-ui-dummy-" + this.getId()) || jQuery.sap.domById(this.getId());
};

sap.ui.core.HTML.prototype.setContent = function(sContent) {
	this.setProperty("content", sContent, true);
	if ( /* sContent && */ this.getDomRef() ) {
		var $newContent = new jQuery(this.getContent()); // TODO what if content is not HTML (e.g. #something)?
		jQuery(this.getDomRef()).replaceWith($newContent);
		this._postprocessNewContent($newContent);
	} else {
		this.invalidate();
	}
	return this;
};

/**
 * If the HTML doesn't contain own content, it tries to reproduce existing content
 */
sap.ui.core.HTML.prototype.onAfterRendering = function() {

	var $placeholder = jQuery(jQuery.sap.domById("sap-ui-dummy-" + this.getId()));
	var $oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	var $newContent = undefined;
	var isPreservedDOM = false;
	if ( /*this.getContent() && */ (!this.getPreferDOM() || $oldContent.size() == 0) ) {
		// remove old, preserved content
		$oldContent.remove();
		// replace placeholder with content string
		$newContent = new jQuery(this.getContent()); // TODO what if content is not HTML (e.g. #something)?
		$placeholder.replaceWith($newContent);
	} else if ( $oldContent.size() > 0 ) {
		// replace dummy with old content
		$placeholder.replaceWith($oldContent);
		$newContent = $oldContent;
		isPreservedDOM = true;
	} else {
		$placeholder.remove();
	}

	this._postprocessNewContent($newContent);

	this.fireAfterRendering({isPreservedDOM : isPreservedDOM});

};

sap.ui.core.HTML.prototype._postprocessNewContent = function($newContent) {
	if ( $newContent && $newContent.size() > 0 ) {
		if ( $newContent.length > 1 ) {
			jQuery.sap.log.warning("[Unsupported Feature]: " + this + " has rendered " + $newContent.length + " root nodes!");
		}

		// set a marker that identifies all root nodes in $newContent as 'to-be-preserved'
		sap.ui.core.RenderManager.markPreservableContent($newContent, this.getId());
		// and if no node has the control id, search the first without an id and set it
		if ( $newContent.find("#" + this.getId().replace(/(:|\.)/g,'\\$1')).length === 0 ) {
			$newContent.filter(":not([id])").first().attr("id", this.getId());
		}
	} else {
		jQuery.sap.log.debug("" + this + " is empty after rendering, setting bOutput to false");
		this.bOutput = false; // clean up internal rendering bookkeeping
	}
};

/**
 * Sets some new DOM content for this HTML control. The content will replace the existing content
 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
 *
 * @param {DOMNode} oDom the new DOM content
 * @return this for chaining
 * @public
 */
sap.ui.core.HTML.prototype.setDOMContent = function(oDom) {
	var $newContent = jQuery(oDom);
	if ( this.getDomRef() ) {
		jQuery(this.getDomRef()).replaceWith($newContent);
		this._postprocessNewContent($newContent);
	} else {
		$newContent.appendTo(sap.ui.core.RenderManager.getPreserveAreaRef());
		if ( this.getUIArea() ) {
			this.getUIArea().invalidate();
		} // TODO fix issue with Control.rerender()
		this._postprocessNewContent($newContent); // CHECK is it okay to set bOutput to false for empty content?
	}

	return this;
};


}; // end of sap.ui.core.HTML
if ( !jQuery.sap.isDeclared('sap.ui.core.ScrollBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */ 

jQuery.sap.declare("sap.ui.core.ScrollBarRenderer");

/**
 * @class ScrollBar renderer.
 * @static
 */
sap.ui.core.ScrollBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl Object representation of the control that should be rendered
 */
sap.ui.core.ScrollBarRenderer.render = function(oRenderManager, oScrollBar){

    // convenience variable
	var rm = oRenderManager;
	var bRTL = sap.ui.getCore().getConfiguration().getRTL();

	// Get Properties
	var bVertical = oScrollBar.getVertical();
	var sSize = oScrollBar.getSize();
	var sContentSize = oScrollBar.getContentSize();

	if (bVertical){
		// First div. <div style="overflow:hidden;width:16px;height:200px">
		rm.write("<div");
		rm.writeControlData(oScrollBar);
		rm.write(" style=\"overflow:hidden;width:16px");
		if (sSize) {
			rm.write(";height:" + sSize);
		}
		rm.write("\"");
		rm.write(">");

		// Middle div - ScrollBar itself.
		rm.write("<div ");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sb"); 
        rm.write(" style=\"width:32px;height:100%;margin-left:-16px;overflow-y:scroll;overflow-x:hidden\">");

		//Last div - The content div <div style="height:1000px;width:16px"></div>
		rm.write("<div");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sbcnt"); 
		rm.write(" style=\"width:16px");
		if (sContentSize) {
			rm.write(";height:" + sContentSize);
		}
		rm.write("\"");
		rm.write(">");
		rm.write("</div>");
		rm.write("</div>");

	    rm.write("<div> <span id=" + oScrollBar.getId() + "-ffsize" +" style='position: absolute; top: -9000px; left: -9000px; visibility: hidden; line-height: normal;'> FF Size</span></div>");
		rm.write("</div>");

	} else {

		// Horizontal Scrollbar
		// First div.    <div style="width:200px;height:16px;overflow:hidden">
		rm.write("<div");
			rm.writeControlData(oScrollBar);
		rm.write(" style=\"overflow:hidden;height:16px");
		if (sSize) {
			rm.write(";width:" + sSize);
		}
		rm.write("\"");
		rm.write(">");

		// Middle div - ScrollBar itself.
		rm.write("<div ");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sb"); 
        rm.write(" style=\"width:100%;height:32px;margin-top:-16px;overflow-x:scroll;overflow-y:hidden\">");

		//Last div - The content div   <div style="width:1000px;height:16px;"></div>
		rm.write("<div");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sbcnt"); 
		rm.write(" style=\"height:16px");
		if (sContentSize) {
			rm.write(";width:" + sContentSize);
		}
		rm.write("\"");
		rm.write(">");
		rm.write("</div>");
		rm.write("</div>");
		rm.write("</div>");
	}
};


/* PURE HTML EXAMPLE, FOR TESTING, FOR EXAMPLE IE9 SCROLLING PROBLEM:
<h1>vertical</h1>
<div style="width:16px;height:200px;overflow:hidden">
<div style="width:32px;height:100%;margin-left:-16px;overflow-y:scroll;overflow-x:hidden" onscroll="document.getElementById('v').innerHTML = this.scrollTop">
<div style="height:1000px;width:16px"></div>
</div>
</div>
<div id="v"></div>

<h1>horizontal</h1>
<div style="width:200px;height:16px;overflow:hidden">
<div style="width:100%;height:32px;margin-top:-16px;overflow-x:scroll;overflow-y:hidden" onscroll="document.getElementById('h').innerHTML = this.scrollLeft">
<div style="width:1000px;height:16px;"></div>
</div>
</div>
<div id="h"></div>

*/

}; // end of sap.ui.core.ScrollBarRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.EnabledPropagator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides helper sap.ui.core.EnabledPropagator
jQuery.sap.declare("sap.ui.core.EnabledPropagator");


/**
 * @class Helper Class for enhancement of a Control with propagation of enabled property.
 *
 * <b>This constructor should be applied to the prototype of a control</b>
 *
 * Example:
 * <code>
 * sap.ui.core.EnabledPropagator.apply(<Some-Control>.prototype, [<Default-values>]);
 * </code>
 * e.g.
 * <code>
 * sap.ui.core.EnabledPropagator.apply(sap.ui.commons.Button.prototype, [true]);
 * </code>
 *
 * @author Daniel Brinkmann
 * @version 1.2.0
 * @param {boolean}
 *		bDefault the value that should be used as default value for the enhancement of the control.
 * @public
 */
sap.ui.core.EnabledPropagator = function(bDefault) {
	// Ensure only Controls are enhanced
	if(!(this instanceof sap.ui.core.Control)){
		return;
	}

	// Ensure not to overwrite existing implementations.
	var fWalkUp = function(/**sap.ui.core.Control*/oControl){
		var oParent = oControl.getParent();
		while(oParent && !oParent.getEnabled && oParent.getParent){
			oParent = oParent.getParent();
		}
		return oParent;
	};
	if(this.getEnabled === undefined) {
		// set some default
		this.getEnabled = function () {
			var oParent = fWalkUp(this);
			return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : this.getProperty('Enabled');
		};

		this.getMetadata().addProperty('Enabled', {type : "boolean", group : "Behavior", defaultValue :  bDefault === true});
		this.getMetadata().addPublicMethods('getEnabled');

	} else {
//		// What should we do here?

//		// --> Replace?
//		this.getEnabled = function () {
//			var oParent = fWalkUp(this);
////		return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : this.bEnabled;
//			return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : this.getProperty('Enabled');
//		}

//		// Or

//		// --> Wrap?
		var fOld = this.getEnabled;
		this.getEnabled = function () {
			var oParent = fWalkUp(this);
			return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : fOld.apply(this);
		};
	}

	if(this.setEnabled === undefined){
		this.setEnabled = function (bEnabled) {
			this.setProperty('Enabled', bEnabled);
		};

		this.getMetadata().addPublicMethods('setEnabled');
	}
};
}; // end of sap.ui.core.EnabledPropagator
if ( !jQuery.sap.isDeclared('sap.ui.core.CompositeSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.CompositeSupport
jQuery.sap.declare("sap.ui.core.CompositeSupport");



/**
 * Helper for composite controls. Can be applied as a mixin to existing classes by calling
 *
 * <pre>
 * sap.ui.core.CompositeSupport.mixInto(your.Class, {
 *   createComponent1 : function() {
 *   },
 *   createComponent2 : function() {
 *   },
 *   ...
 * });
 * </pre>
 *
 * @class
 * @static
 */
sap.ui.core.CompositeSupport = {};

/**
 * Applies the CompositeMixin to the given control class <code>fnClass</code>. This includes the following steps:
 *
 * <ul>
 * <li>Creates a new subclass of {@link sap.ui.core.ComponentFactory} and adds it to the given class
 * <li>Merges the given methods into the prototype of the newly created class
 * <li>Enriches the prototype of the given control class with a getComponentFactory() method
 * <li>Hooks into init() and destroy() of the given class
 * </ul>
 *
 * @param {function} fnClass the class (constructor function) of a control calls to be enriched
 * @param {string} [sFactoryName='ComponentFactory'] name under which the newly created factory class will be added to the control class
 * @param {object} [oMethods] default factory methods and helper methods
 * @public
 */
sap.ui.core.CompositeSupport.mixInto = function(fnClass, sFactoryName, oMethods) {

	if ( arguments.length == 2 && typeof sFactoryName === "object" ) {
		oMethods = sFactoryName;
		sFactoryName = "ComponentFactory";
	}
	jQuery.sap.assert(typeof fnClass === "function" && fnClass.prototype instanceof sap.ui.core.Control, "CompositeSupport.mixInto: fnClass must be a subclass of Control");
	jQuery.sap.assert(typeof sFactoryName === "string" && sFactoryName, "CompositeSupport.mixInto: sFactoryName must be a non-empty string");
	jQuery.sap.assert(typeof oMethods === "object", "oMethods must be an object");

	function _getBaseFactory() {
		var oMetadata = fnClass.getMetadata();
		do {
			oMetadata = oMetadata.getParent();
			if ( oMetadata && oMetadata.getComponentFactoryClass ) {
				return oMetadata.getComponentFactoryClass();
			}
		} while ( oMetadata );
		return sap.ui.core.ComponentFactory;
	}

	// create a new component factory class
	fnClass[sFactoryName] = (_getBaseFactory()).subclass(oMethods);

	// add factory class info to metadata
	fnClass.getMetadata().getComponentFactoryClass = jQuery.sap.getter(fnClass[sFactoryName]);

	// initialization and getter for the component factory
	if ( !fnClass.prototype._initCompositeSupport ) {
		fnClass.prototype._initCompositeSupport = function(mSettings) {

			var oFactory = new (this.getMetadata().getComponentFactoryClass())(this);

			if ( mSettings.componentFactory ) {

				// assert a pure object literal
				jQuery.sap.assert(jQuery.isPlainObject(mSettings.componentFactory));

				// customize the factory with it
				oFactory.customize(mSettings.componentFactory);

				// cleanup settings
				delete mSettings.componentFactory;

			}

			this.getComponentFactory = jQuery.sap.getter(oFactory);
		};
	}

	if ( !fnClass.prototype._exitCompositeSupport ) {
		fnClass.prototype._exitCompositeSupport = function() {

			this.getComponentFactory().destroy();
			delete this.getComponentFactory;
		};
	}

};

/**
 * @class Base class for component factories. Subclasses are created by the CompositeSupport mixin.
 *
 * @param oComposite Composite control that this factory is used for.
 */
sap.ui.core.ComponentFactory = function(oComposite) {
	sap.ui.base.EventProvider.apply(this);
	this.oComposite = oComposite;
	return this;
};

sap.ui.core.ComponentFactory.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

/**
 * Attaches a change notification listener to this factory. The listener will be informed when
 * any of the API objects of the composite API will change.
 * @param {function} f listener function to call
 * @param {object} [o=window] Object to call the function on
 * @return {sap.ui.core.ComponentFactory} returns this to facilitate method chaining
 * @public
 */
sap.ui.core.ComponentFactory.prototype.attachChange = function (f,o) {
	this.getModel();
	this.attachEvent("change", f,o);
	return this;
};

/**
 * Detaches the given change notification listener from this factory.
 * The listener must have been registered with the exact same parameters before
 * @param {function} f listener function to remove
 * @param {object} [o=window] Object that the listener function had to be called for
 * @return {sap.ui.core.ComponentFactory} returns this to facilitate method chaining
 * @public
 */
sap.ui.core.ComponentFactory.prototype.detachChange = function (f,o) {
	this.getModel();
	this.detachEvent("change", f,o);
	return this;
};

/**
 * Returns a control model for the composite that this factory belongs to.
 *
 * The model can be used to bind properties of created components against it.
 *
 * @return {sap.ui.model.control.ControlModel} A model for the composite of this factory
 * @public
 */
sap.ui.core.ComponentFactory.prototype.getModel = function() {
	if ( !this.oModel ) {
		var that=this;
		this.oModel = new sap.ui.model.control.ControlModel(this.oComposite);
		this.oModel._onchange = function(e) {
			that.fireEvent("change", e.getParameters && e.getParameters());
		};
	}
	return this.oModel;
};

/**
 * Adds an element to the facade of the composite. To be called by the composite application.
 * @param {sap.ui.core.Element} oElement element to be added to the facade
 * @return {void}
 * @public
 */
sap.ui.core.ComponentFactory.prototype.addFacadeComponent = function(oElement) {
	this.getModel().add(oElement);
};

/**
 * Removes an element from the facade of the composite. To be called by the composite application.
 * @param {sap.ui.core.Element} oElement element to be removed to the facade
 * @return {void}
 * @public
 */
sap.ui.core.ComponentFactory.prototype.removeFacadeComponent = function(oElement) {
	this.getModel().remove(oElement);
};

(function() {

	function _extend(o, oMethods, bDefaults) {
		jQuery.each(oMethods, function(sName, fnFunc) {
			if ( sName.indexOf("default") != 0 ) {
				o[sName] = fnFunc;
			}
			// for create functions keep a backup
			if ( bDefaults && sName.indexOf("create") == 0 ) {
				o["defaultC" + sName.substring(1)] = o[sName];
			}
		});
	}

	function _createExtendFunction(fnBaseClass) {
		return function(oMethods) {

			// create a new constructor function
			var fnCtor = function(/* anonymous arguments */) {
				// invoke base class
				fnBaseClass.apply(this, arguments);
			};
			// properly chain the prototypes
			fnCtor.prototype = jQuery.sap.newObject(fnBaseClass.prototype);
			_extend(fnCtor.prototype, oMethods, /* bDefaults */ true);

			fnCtor.customize = function(oMethods) {
				_extend(fnCtor.prototype, oMethods);
				return this;
			};

			fnCtor.subclass = _createExtendFunction(fnCtor);

			return fnCtor;
		};
	}

	/**
	 * @function
	 * @param oMethods
	 * @return
	 */
	sap.ui.core.ComponentFactory.subclass = _createExtendFunction(sap.ui.core.ComponentFactory);

	/**
	 * Overrides factory methods with a customized implementation.
	 *
	 * The members in the <code>mMethods</code> parameter should match
	 * the documented factory methods in the concrete ComponentFactory subclass
	 * of a composite.
	 *
	 * @see Application Developers guide for component customization
	 *
	 * @param {object} mMethods
	 * @return this to allow method chaining
	 * @public
	 */
	sap.ui.core.ComponentFactory.prototype.customize = function (mMethods) {
		_extend(this, mMethods);
		if ( this.oComposite && this.oComposite._onComponentFactoryChanged ) {
			//
			this.oComposite._onComponentFactoryChanged();
		}
		return this;
	};

}());
}; // end of sap.ui.core.CompositeSupport
if ( !jQuery.sap.isDeclared('sap.ui.core.TooltipBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.TooltipBase.
jQuery.sap.declare("sap.ui.core.TooltipBase");



/**
 * Constructor for a new TooltipBase.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>text : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Element#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Base class for any extended tooltip, for example for RichTooltip. It provides the opening/closing behavior and the main "text" property.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.TooltipBase = function (sId, mSettings) {
	sap.ui.core.Element.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.TooltipBase.prototype = jQuery.sap.newObject(sap.ui.core.Element.prototype);

/*
 * Describe the sap.ui.core.TooltipBase. 
 * Resulting metadata can be obtained via sap.ui.core.TooltipBase.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.TooltipBase", {

  // ---- object ----
  baseType : "sap.ui.core.Element",
  "abstract" : true,
  publicMethods : [
    // properties 
    "getText", "setText"
    // aggregations
    
    // associations
    
    // events
    
    // methods
    
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "text" : {name : "text", type : "string", group : "Misc", defaultValue : ""}
  },
  
  aggregations : {},
  associations : {},
  events : {}

});	


/**
 * Getter for property <code>text</code>.
 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getText = function() {
	return this.getProperty("text");
};

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.TooltipBase.prototype.setText = function(sText) {
	this.setProperty("text", sText);
	return this;
};


// Start of sap/ui/core/TooltipBase.js


/**
 * Return the popup to use but do not expose it to the outside.
 * @type sap.ui.commons.Popup
 * @return The popup to use
 * @private
 */
sap.ui.core.TooltipBase.prototype._getPopup = jQuery.sap.getter((function() {
		var oPopup = new sap.ui.core.Popup();
			oPopup.setShadow(true);
			return oPopup;
		}())
);

/**
 * When a control that has a Tooltip gets the focus, this method is called.
 * @param {jQuery.EventObject} oEvent The event that occurred on the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onfocusin = function(oEvent) {

	var oSC = jQuery(oEvent.target).control(0);
	if (oSC != null) {
		var oDomRef = oSC.getFocusDomRef();
		this.sStoredTooltip = null;
		if (oDomRef.title && oDomRef.title!= "") {
			this.sStoredTooltip = oDomRef.title;
			oDomRef.title = "";
		}

		var oPopup = this._getPopup();
		if (!(oPopup.isOpen() && oPopup.getContent() == this)) {
			// Update Tooltip or create a new span with texts.
			sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
		}

		// Attach accessibility info to the control oSC

		var sValue = oDomRef.getAttribute("aria-describedby");
		if (sValue == null || sValue== "" ) {
			oDomRef.setAttribute("aria-describedby", "sap-ui-rtt-title sap-ui-rtt-txt");
		}
		else if (sValue.indexOf("sap-ui-rtt-title sap-ui-rtt-txt") == -1) {
			oDomRef.setAttribute("aria-describedby", sValue + " sap-ui-rtt-title sap-ui-rtt-txt");
		}
	}
};

/**
 * When a control that has a Tooltip looses the focus, this method is called.
 * @param {jQuery.EventObject} oEvent The event that occurred on the extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onfocusout = function(oEvent) {
	var oSC = jQuery(oEvent.target).control(0);
	if (oSC != null) {

		var oDomRef = oSC.getFocusDomRef();
		if (this.sStoredTooltip) {
			oDomRef.title = this.sStoredTooltip;
		}

		// Detach accessibility information from control oSC.
		var sValue = oDomRef.getAttribute("aria-describedby");
		if (sValue && sValue.indexOf("sap-ui-rtt-title sap-ui-rtt-txt") >= 0){
			if (jQuery.trim(sValue) == "sap-ui-rtt-title sap-ui-rtt-txt") {
				oDomRef.removeAttribute("aria-describedby");
			}
			else  {
				sValue = sValue.replace("sap-ui-rtt-title sap-ui-rtt-txt", "");
				oDomRef.setAttribute("aria-describedby", sValue);
			}
		}
	}
	if (this.sOpenTimeout){
		jQuery.sap.clearDelayedCall(this.sOpenTimeout);
		this.sOpenTimeout = null;
	}

	// Avoid closing the popup when there is a move inside the control to another control or element (for example div)
	this.sCloseNowTimeout = jQuery.sap.delayedCall(100, this, "closePopup");
};

/**
 *	Check if the parameter is a standard browser Tooltip.
 * @return {boolean} - true if the Tooltip is a standard tooltip type of string. False if not a string or empty. 
 * @private
 */
sap.ui.core.TooltipBase.prototype.isStandardTooltip = function(oTooltip) {
	return  (typeof oTooltip === "string" &&  (jQuery.trim(oTooltip)) !== "");
};

/**
* Handle the mouseover event of a Control that has a Tooltip.
* @param {jQuery.EventObject} oEvent - The event that occurred on the Control.
* @private
 */
sap.ui.core.TooltipBase.prototype.onmouseover = function(oEvent) {

	// The Element or Control that initiated the event.
	var oEventSource = jQuery(oEvent.target).control(0);
	if ( oEventSource != null) {
		// The current Element or Control within the event bubbling phase.
		var oCurrentElement = jQuery(oEvent.currentTarget).control(0);
		// Cancel close event if we move from parent with extended tooltip to child without own tooltip
		if ( oCurrentElement !== oEventSource &&  !this.isStandardTooltip(oEventSource.getTooltip()))  {
			if (this.sCloseNowTimeout){
				jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
				this.sCloseNowTimeout = null;
				return;
			}
		}

		// Indicates the element being exited.
		var oLeftElement = jQuery(oEvent.relatedTarget).control(0);
		if (oLeftElement) {

			// Cancel close event if we move from child without own tooltip to the parent with rtt - current element has to have rtt.
			if (oLeftElement.getParent()){
				if (oLeftElement.getParent() === oCurrentElement && oCurrentElement === oEventSource) {
					// It is a child of the current element and has no tooltip
					var oLeftElementTooltip = oLeftElement.getTooltip();
					if ( !this.isStandardTooltip(oLeftElementTooltip) && (!oLeftElementTooltip || !(oLeftElementTooltip instanceof sap.ui.core.TooltipBase))) {
						if (this.sCloseNowTimeout){
							jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
							this.sCloseNowTimeout = null;
							return;
						}
					}
				}
			}
		}

		// Open the popup
		if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {
			// Set all standard tooltips to empty string
			this.removeStandardTooltips(oEventSource);
			// Open with delay 0,5 sec.
			this.sOpenTimeout = jQuery.sap.delayedCall(500, this, "openPopup", [this._currentControl]);
			// We need this for the scenario if the both a child and his parent have an RichTooltip
			oEvent.stopPropagation();
			oEvent.preventDefault();
		}
	}
};

/**
 * Handle the mouseout event  of a Control that has a Tooltip.
 * @param {jQuery.EventObject} oEvent Event that occurred on the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onmouseout = function(oEvent) {
	if (this.sOpenTimeout){
		jQuery.sap.clearDelayedCall(this.sOpenTimeout);
		this.sOpenTimeout = null;
	}
	// Avoid closing the popup when there is a move inside the control to another control or element (for example div)
	this.sCloseNowTimeout = jQuery.sap.delayedCall(100, this, "closePopup");
};

/**
 * Close the popup holding the content of the tooltip.
 * Clears all delayed calls for closing this popup as those are not needed anymore.
 * @private
 */
sap.ui.core.TooltipBase.prototype.closePopup = function() {
	var oPopup = this._getPopup();
	if (this.sCloseNowTimeout) {
		jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
	}
	this.sCloseNowTimeout = null;

	oPopup.close();
	this.restoreStandardTooltips();
};


/**
 * Open the popup holding the content of the tooltip.
 * @param {Object} oSC - the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.openPopup = function(oSC) {
	if (oSC.getTooltip() != null) {

		// Clear Delayed Call if exist
		if (this.sCloseNowTimeout){
			jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
			this.sCloseNowTimeout = null;
			return;
		}

		// If already opened with the needed content then return
		var oPopup = this._getPopup();
		if (oPopup.isOpen() && oPopup.getContent() == this) {
			return;
		}

		// Tooltip will be displayed. Ensure the content is rendered. As this is no control, the popup will not take care of rendering.
		sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);

		// Open popup
		var oDomRef = oSC.getDomRef();
		oPopup.setContent(this);
		oPopup.setPosition(sap.ui.core.Popup.Dock.BeginTop, sap.ui.core.Popup.Dock.BeginBottom, oDomRef, "10 3");
		oPopup.open();
	}
};

/**
 * Switch off the browser standard tooltips and store them in array.
 * @private
*/
sap.ui.core.TooltipBase.prototype.removeStandardTooltips = function(oSC) {
	var oDomRef = oSC.getDomRef();
	this.aStoredTooltips = [];
	var tooltip = "";
	while (oDomRef && !(oDomRef === document)) {
		tooltip = oDomRef.title;
		if ( tooltip ) {
			this.aStoredTooltips.push({ domref : oDomRef, tooltip : tooltip });
			oDomRef.title = "";
		}
		oDomRef = oDomRef.parentNode;
	}
};

/**
 * Restore the standard tooltips.
 * @param {Object} oSC Source Control on what Extended tooltip has to be called.
 * @private
 */
sap.ui.core.TooltipBase.prototype.restoreStandardTooltips = function(oSC) {
	if (this.aStoredTooltips){
		for (var i = 0; i < this.aStoredTooltips.length; i++) {
			var oDomRef = this.aStoredTooltips[i].domref;
			oDomRef.title = this.aStoredTooltips[i].tooltip;
		}
	}
	this.aStoredTooltips = null;
};

/* Store reference to original setParent function */
sap.ui.core.TooltipBase.prototype._setParent = sap.ui.core.TooltipBase.prototype.setParent;

/**
 * Defines the new parent of this TooltipBase using {@link sap.ui.core.Element#setParent}.
 * Additionally closes the Tooltip.
 *
 * @param {sap.ui.core.Element} oParent The element that becomes this element's parent.
 * @param {string} sAggregationName - The name of the parent element's aggregation.
 * @private
 */
sap.ui.core.TooltipBase.prototype.setParent = function(oParent, sAggregationName) {
	// As there is a new parent, close popup.
	this.closePopup();
	this._setParent.apply(this, arguments);
};

/**
 * Handle the key down event Ctrl+i and ESCAPE.
 * @param {jQuery.Event} oEvent - the event that occurred on the Parent of the Extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onkeydown = function(oEvent) {
	// Ctrl is pressed together with "i" - Open Rich tooltip.
	if(oEvent.ctrlKey && oEvent.which == jQuery.sap.KeyCodes.I) {
		// The Element or Control that initiated the event.

		var oEventSource = jQuery(oEvent.target).control(0);
		if (oEventSource != null) {
			// If the current control is the event source or event source does not have a standard tooltip
			if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {

				// Set all standard tooltips to empty string
				this.removeStandardTooltips(oEventSource);

				// Open extended tooltip
				this.openPopup( this._currentControl);

				oEvent.preventDefault();
				oEvent.stopPropagation();
			}
		}
	}
	// If Ecs is pressed then close the Rich Tooltip.
	else if(oEvent.which == jQuery.sap.KeyCodes.ESCAPE) {
		if (this.sOpenTimeout) {
			jQuery.sap.clearDelayedCall(this.sOpenTimeout);
			this.sOpenTimeout = null;
		}
		this.closePopup();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

}; // end of sap.ui.core.TooltipBase
if ( !jQuery.sap.isDeclared('sap.ui.core.theming.Parameters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * @namespace
 * @name sap.ui.core.theming
 * @public
 */

jQuery.sap.declare("sap.ui.core.theming.Parameters");


(function(){
	
	/**
	 * A helper used for (read-only) access to CSS parameters at runtime.
	 * 
	 * @class A helper used for (read-only) access to CSS parameters at runtime
	 * @author SAP AG
	 * @static
	 * 
	 * @public
	 */
	sap.ui.core.theming.Parameters = {};
	
	var mParameters = null;
	
	sap.ui.getCore().attachThemeChanged(function(evt){
		mParameters = null;
	});
	
	var getParameters = function() {
		if (!mParameters) {
			
			var aJsonUrls = [];
			jQuery("link[id^=sap-ui-theme-]").each(function() {
				aJsonUrls.push(this.href.replace(".css", ".json").replace("/library", "/library-parameters")); // TODO: just one good pattern
			});

			mParameters = {};
			
			for (var i = 0; i < aJsonUrls.length; i++) {
				var sUrl = aJsonUrls[i];

				var oResponse = jQuery.sap.sjax({url:sUrl});
				if (oResponse.success) {
					var oResult = (typeof oResponse.data == "string") ? jQuery.parseJSON(oResponse.data) : oResponse.data;
					mParameters = jQuery.extend(mParameters, oResult);
				} else {
					mParameters = {};
					throw new Error("Could not load theme parameters from: " + sUrl);
				}
			}
		}
		return mParameters;
	};

	
	/**
	 * Returns the current value for the given CSS parameter.
	 * If no parameter is given, a map containing all parameters is returned. This map is a copy, so changing values in the map does not have any effect.
	 * For any other input or an undefined parameter name, the result is undefined.
	 *
	 * @param {string} sName the CSS parameter name
	 * @returns the CSS parameter value
	 * 
	 * @public
	 */
	sap.ui.core.theming.Parameters.get = function(sName) {
		
		if (arguments.length == 1) {
			return getParameters()[sName];
			
		} else if (arguments.length == 0) {
			var clone = {};
			return jQuery.extend(clone, getParameters());
			
		} else {
			return undefined;
		}
	};
	
}());

}; // end of sap.ui.core.theming.Parameters
if ( !jQuery.sap.isDeclared('sap.ui.core.format.NumberFormat') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.format.NumberFormat
jQuery.sap.declare("sap.ui.core.format.NumberFormat");

/**
 * Format classes
 *
 * @namespace
 * @name sap.ui.core.format
 * @public
 */

/**
 * Constructor for NumberFormat
 *
 * @class
 * The NumberFormat is a static class for formatting and parsing numeric values according
 * to a set of format options.
 * 
 * Supported format options:
 * - minIntegerDigits
 * - maxIntegerDigits
 * - minFractionDigits
 * - maxFractionDigits
 * - groupingEnabled
 * - groupingSeparator
 * - decimalSeparator
 *
 * To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
 *
 * @public
 */
sap.ui.core.format.NumberFormat = function(oFormatOptions) {
	// Do not use the constructor
	throw new Error();
};
sap.ui.core.format.NumberFormat.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/*
 * Default format options for Integer
 */
sap.ui.core.format.NumberFormat.oDefaultIntegerFormat = {
	minIntegerDigits: 1,
	maxIntegerDigits: 99,
	minFractionDigits: 0,
	maxFractionDigits: 0,
	groupingEnabled: false,
	groupingSeparator: ",",
	decimalSeparator: ".",
	isInteger: true
};

/*
 * Default format options for Float
 */
sap.ui.core.format.NumberFormat.oDefaultFloatFormat = {
	minIntegerDigits: 1,
	maxIntegerDigits: 99,
	minFractionDigits: 0,
	maxFractionDigits: 99,
	groupingEnabled: true,
	groupingSeparator: ",",
	decimalSeparator: ".",
	isInteger: false
};

/**
 * Get an instance of the NumberFormat, which can be used for formatting
 */
sap.ui.core.format.NumberFormat.getInstance = function(oFormatOptions) {
	return sap.ui.core.format.NumberFormat.getFloatInstance(oFormatOptions);
};

/**
 * Get a float instance of the NumberFormat
 */
sap.ui.core.format.NumberFormat.getFloatInstance = function(oFormatOptions) {
	var oFormat = jQuery.sap.newObject(sap.ui.core.format.NumberFormat.prototype);
	oFormat.oFormatOptions = jQuery.extend(false, {}, sap.ui.core.format.NumberFormat.oDefaultFloatFormat, oFormatOptions);
	return oFormat;
};

/**
 * Get an integer instance of the NumberFormat
 */
sap.ui.core.format.NumberFormat.getIntegerInstance = function(oFormatOptions) {
	var oFormat = jQuery.sap.newObject(sap.ui.core.format.NumberFormat.prototype);
	oFormat.oFormatOptions = jQuery.extend(false, {}, sap.ui.core.format.NumberFormat.oDefaultIntegerFormat, oFormatOptions);
	return oFormat;
};

/**
 * Format a number according to the given format options
 * 
 * @param {number} oValue the number to format
 * @param {object} oFormatOptions the format options 
 * @return the formatted output value
 * @type {string}
 */
sap.ui.core.format.NumberFormat.prototype.format = function(oValue) {
	var sNumber = "" + oValue,
		sIntegerPart = "", 
		sFractionPart = "",
		sGroupedIntegerPart = "",
		sResult = "",
		iPosition = 0,
		iLength = 0,
		bNegative = oValue < 0, 
		iDotPos = -1,
		oOptions = this.oFormatOptions;
	
	// if number is negative remove minus
	if (bNegative) {
		sNumber = sNumber.substr(1);
	}
	
	// if number contains fraction, extract it
	iDotPos = sNumber.indexOf(".");
	if (iDotPos > -1) {
		sIntegerPart = sNumber.substr(0, iDotPos);
		sFractionPart = sNumber.substr(iDotPos + 1);
	}
	else {
		sIntegerPart = sNumber
	}
	
	// integer part length
	if (sIntegerPart.length < oOptions.minIntegerDigits) {
		sIntegerPart = jQuery.sap.padLeft(sIntegerPart, "0", oOptions.minIntegerDigits);
	}
	else if (sIntegerPart.length > oOptions.maxIntegerDigits) {
		sIntegerPart = jQuery.sap.padLeft("", "?", oOptions.maxIntegerDigits);
	}
	
	// fraction part length
	if (sFractionPart.length < oOptions.minFractionDigits) {
		sFractionPart = jQuery.sap.padRight(sFractionPart, "0", oOptions.minFractionDigits);
	}
	else if (sFractionPart.length > oOptions.maxFractionDigits) {
		sFractionPart = sFractionPart.substr(0, oOptions.maxFractionDigits);
	}
	
	// grouping
	iLength = sIntegerPart.length;
	if (oOptions.groupingEnabled && iLength > 3) {
		iPosition = iLength % 3 || 3;
		sGroupedIntegerPart = sIntegerPart.substr(0, iPosition);
		while (iPosition < sIntegerPart.length) {
			sGroupedIntegerPart += oOptions.groupingSeparator;
			sGroupedIntegerPart += sIntegerPart.substr(iPosition, 3);
			iPosition += 3;
		}
		sIntegerPart = sGroupedIntegerPart;
	}

	// combine
	if (bNegative) {
		sResult = "-";
	}
	sResult += sIntegerPart;
	if (sFractionPart) {
		sResult += oOptions.decimalSeparator + sFractionPart;
	}
	
	return sResult;
};

/**
 * Parse a number which is formatted according to the given format options
 * 
 * @param {string} sValue the string containing a numeric value 
 * @return the parse result
 * @type {number}
 */
sap.ui.core.format.NumberFormat.prototype.parse = function(sValue) {
	// Remove all characters but numbers and decimal separator, then use parseInt/parseFloat
	var oOptions = this.oFormatOptions,
		sRegExp = "[^0-9\\-" + oOptions.decimalSeparator + "]",
		oRegExp = new RegExp(sRegExp, "g"),
		oResult = 0;
	sValue = sValue.replace(oRegExp, "");
	sValue = sValue.replace(oOptions.decimalSeparator, ".");
	if (oOptions.isInteger) {
		oResult = parseInt(sValue, 10);
	}
	else {
		oResult = parseFloat(sValue);
	}
	return oResult;
};
	
	
}; // end of sap.ui.core.format.NumberFormat
if ( !jQuery.sap.isDeclared('sap.ui.core.format.DateFormat') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.core.format.DateFormat
jQuery.sap.declare("sap.ui.core.format.DateFormat");

/**
 * Constructor for DateFormat
 *
 * @class
 * The DateFormat is a static class for formatting and parsing dates values according
 * to a set of format options.
 * 
 * Supported format options:
 * - pattern
 *
 * To get an instance of the DateFormat please use the getInstance method.
 *
 * @public
 */
sap.ui.core.format.DateFormat = function() {
	// Do not use the constructor
	throw new Error();
};

sap.ui.core.format.DateFormat.oDefaultDateFormat = {
	pattern: "MM/dd/yyyy"
};

sap.ui.core.format.DateFormat.oDefaultDateTimeFormat = {
	pattern: "MM/dd/yyyy hh:mm a"
};

sap.ui.core.format.DateFormat.oDefaultTimeFormat = {
	pattern: "hh:mm a"
};

/**
 * Get an instance of the DateFormat
 */
sap.ui.core.format.DateFormat.getInstance = function(oFormatOptions) {
	var oFormat = jQuery.sap.newObject(sap.ui.core.format.DateFormat.prototype);
	oFormat.oFormatOptions = jQuery.extend(false, {}, sap.ui.core.format.DateFormat.oDefaultDateFormat, oFormatOptions);
	oFormat.init();
	return oFormat;
};

/**
 * Get a DateTime instance of the DateFormat
 */
sap.ui.core.format.DateFormat.getDateTimeInstance = function(oFormatOptions) {
	var oFormat = jQuery.sap.newObject(sap.ui.core.format.DateFormat.prototype);
	oFormat.oFormatOptions = jQuery.extend(false, {}, sap.ui.core.format.DateFormat.oDefaultDateTimeFormat, oFormatOptions);
	oFormat.init();
	return oFormat;
};

/**
 * Get a Time instance of the DateFormat
 */
sap.ui.core.format.DateFormat.getTimeInstance = function(oFormatOptions) {
	var oFormat = jQuery.sap.newObject(sap.ui.core.format.DateFormat.prototype);
	oFormat.oFormatOptions = jQuery.extend(false, {}, sap.ui.core.format.DateFormat.oDefaultTimeFormat, oFormatOptions);
	oFormat.init();
	return oFormat;
};

/**
 * Initialize date format
 */
sap.ui.core.format.DateFormat.prototype.init = function() {
	this.aFormatArray = this.parseJavaDateFormat(this.oFormatOptions.pattern);
	this.bJapaneseDate = jQuery.inArray("era", this.aFormatArray) != -1;
};

/**
 * Array of Monthnames
 */
sap.ui.core.format.DateFormat.prototype.MONTHNAMES = ["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"];
sap.ui.core.format.DateFormat.prototype.aMonthNames3 = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
sap.ui.core.format.DateFormat.prototype.aMonthNames = ["January","February","March","April","May","June","July","August","September","October","November","December"];

/**
 * Array of Daynames
 */
sap.ui.core.format.DateFormat.prototype.DAYNAMES = ["SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY"];
sap.ui.core.format.DateFormat.prototype.aDayNames3 = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
sap.ui.core.format.DateFormat.prototype.aDayNames = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];

/**
 * Pattern elements
 */
sap.ui.core.format.DateFormat.prototype.oStates = {
	"G": "era",
	"y": "year",
	"Y": "weekYear",
	"M": "month",
	"w": "weekInYear",
	"W": "weekInMonth",
	"D": "dayInYear",
	"d": "day",
	"F": "dayOfWeekInMonth",
	"E": "dayNameInWeek",
	"u": "dayNumberOfWeek",
	"a": "amPmMarker",
	"H": "hour0_23",
	"k": "hour1_24",
	"K": "hour0_11",
	"h": "hour1_12",
	"m": "minute",
	"s": "second",
	"S": "millisecond",
	"z": "timezoneGeneral",
	"Z": "timezoneRFC822",
	"X": "timezoneISO8601"
};

/**
 * Format a date according to the given format options
 * 
 * @param {Date} oValue the number to format
 * @return {string} the formatted output value
 */
sap.ui.core.format.DateFormat.prototype.format = function(oDate) {
	var aBuffer = [], 
		oPart,
		iHour = oDate.getHours(),
		iTZOffset = Math.abs(oDate.getTimezoneOffset()),
		bNegativeOffset = oDate.getTimezoneOffset() < 0,
		iHourOffset = Math.floor(iTZOffset / 60),
		iMinuteOffset = iTZOffset % 60,
		sYear,
		sWeek;
	
	for (var i = 0; i < this.aFormatArray.length; i++) {
		oPart = this.aFormatArray[i];
		switch (oPart.sType) {
			case "text":
				aBuffer.push(oPart.sValue);
				break;
			case "day":
				aBuffer.push(jQuery.sap.padLeft(String(oDate.getDate()), "0", oPart.iDigits));
				break;
			case "dayNameInWeek":
				if (oPart.iDigits < 4) {
					aBuffer.push(this.aDayNames3[oDate.getDay()]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aDayNames[oDate.getDay()]);
				} 
				break;
			case "dayNumberOfWeek":
				aBuffer.push(oDate.getDay() || 7);
				break;
			case "month":
				if (oPart.iDigits == 3) {
					aBuffer.push(this.aMonthNames3[oDate.getMonth()]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aMonthNames[oDate.getMonth()]);
				} else {
					aBuffer.push(jQuery.sap.padLeft(String(oDate.getMonth()+1), "0", oPart.iDigits));
				}
				break;
			case "era": 
				if (this.bJapaneseDate) {
					aBuffer.push(this.getEmperorYearChar(oDate));
				} else {
					aBuffer.push("AD");
				}
				break;
			case "year":
			case "weekYear":
				if (this.bJapaneseDate && this.getEmperorYearChar(oDate) != "") {
					aBuffer.push(jQuery.sap.padLeft(String(this.getEmperorYear(oDate)), "0", oPart.iDigits));
				} 
				else {
					sYear = "" + oDate.getFullYear();
					if (oPart.iDigits == 2 && sYear.length > 2) {
						sYear = sYear.substr(sYear.length - 2);
					}
					aBuffer.push(jQuery.sap.padLeft(sYear, "0", oPart.iDigits));
				}
				break;
			case "weekInYear":
				sWeek = "";
				if (oDate.getWeek) {
					sWeek += oDate.getWeek();
				}
				aBuffer.push(jQuery.sap.padLeft(sWeek, "0", oPart.iDigits));
				break;
			case "hour0_23":
				aBuffer.push(jQuery.sap.padLeft(String(iHour), "0", oPart.iDigits));
				break;
			case "hour1_24":
				if (iHour == 0) {
					iHour = 24;
				}
				aBuffer.push(jQuery.sap.padLeft(String(iHour), "0", oPart.iDigits));
				break;
			case "hour0_11":
				if (iHour > 11) {
					iHour -= 12;
				}
				aBuffer.push(jQuery.sap.padLeft(String(iHour), "0", oPart.iDigits));
				break;
			case "hour1_12":
				if (iHour > 12) {
					iHour -= 12;
				}
				else if (iHour == 0) {
					iHour = 12;
				}
				aBuffer.push(jQuery.sap.padLeft(String(iHour), "0", oPart.iDigits));
				break;
			case "minute":
				aBuffer.push(jQuery.sap.padLeft(String(oDate.getMinutes()), "0", oPart.iDigits));
				break;
			case "second":
				aBuffer.push(jQuery.sap.padLeft(String(oDate.getSeconds()), "0", oPart.iDigits));
				break;
			case "millisecond":
				aBuffer.push(jQuery.sap.padLeft(String(oDate.getMilliseconds()), "0", oPart.iDigits));
				break;
			case "amPmMarker":
				aBuffer.push(oDate.getHours() < 12 ? "AM" : "PM");
				break;
			case "timezoneGeneral":
				if (oPart.iDigits > 3 && oDate.getTimezoneLong) {
					aBuffer.push(oDate.getTimezoneLong());
					break;
				}
				else if (oDate.getTimezoneShort){
					aBuffer.push(oDate.getTimezoneShort());
					break;
				}
				aBuffer.push("GMT");
			case "timezoneISO8601":
				if (iTZOffset != 0) {
					aBuffer.push(bNegativeOffset ? "-" : "+");
					aBuffer.push(jQuery.sap.padLeft(String(iHourOffset), "0", 2));
					aBuffer.push(":");
					aBuffer.push(jQuery.sap.padLeft(String(iMinuteOffset), "0", 2));
				}
				break;
			case "timezoneRFC822":
				if (iTZOffset != 0) {
					aBuffer.push(bNegativeOffset ? "-" : "+");
					aBuffer.push(jQuery.sap.padLeft(String(iHourOffset), "0", 2));
					aBuffer.push(jQuery.sap.padLeft(String(iMinuteOffset), "0", 2));
				}
				break;
				
		}
	}
	
	return aBuffer.join("");
};

/**
 * Parse a date
 */
sap.ui.core.format.DateFormat.prototype.parse = function(oValue) {
	var oDate = new Date(0),
		iIndex = 0,
		bError = false,
		iDay = null,
		iMonth = null,
		iYear = null,
		iHour = null,
		iMinute = null,
		iSecond = null,
		iMillisecond = null,
		bPM = false,
		oPart,
		sPart;
	
	function isNumber(iCharCode) {
		return iCharCode >= 48 && iCharCode <= 57;
	}
	
	function findNumbers(iMaxLength) {
		var iLength = 0;
		while (iLength <= iMaxLength && isNumber(oValue.charCodeAt(iIndex + iLength))) {
			iLength++;
		}
		return oValue.substr(iIndex, iLength);
	}
	
	function findEntry(aList) {
		var i;
		for (i = 0; i < aList.length; i++) {
			if (oValue.indexOf(aList[i], iIndex) == iIndex) {
				return aList[i];
			}
		}
		return null;
	}

	function findEntryIndex(aList) {
		var i;
		for (i = 0; i < aList.length; i++) {
			if (oValue.indexOf(aList[i], iIndex) == iIndex) {
				return i;
			}
		}
		return null;
	}

	for (var i = 0; i < this.aFormatArray.length; i++) {
		oPart = this.aFormatArray[i];
		switch (oPart.sType) {
			case "text":
				if (oValue.indexOf(oPart.sValue, iIndex) == iIndex) {
					iIndex += oPart.sValue.length;
				}
				break;
			case "day":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iDay = parseInt(sPart, 10);
				break;
			case "dayNameInWeek":
				sPart = findEntry(this.aDayNames);
				if (!sPart) {
					sPart = findEntry(this.aDayNames3);
				}
				if (sPart) {
					iIndex += sPart.length;
				}
				break;
			case "dayNumberOfWeek":
				sPart = findNumbers(oPart.iDigits);
				iIndex += sPart.length;
				break;
			case "month":
				if (oPart.iDigits < 3) {
					sPart = findNumbers(Math.max(oPart.iDigits, 2));
					iMonth = parseInt(sPart, 10) - 1;
					iIndex += sPart.length;
				} else {
					iMonth = findEntryIndex(this.aMonthNames);
					if (iMonth != null) {
						iIndex += this.aMonthNames[iMonth].length;
					}
					else {
						iMonth = findEntryIndex(this.aMonthNames3);
						if (iMonth != null) {
							iIndex += this.aMonthNames3[iMonth].length;
						}
					}
				}
				break;
			case "era": 
				// TODO
				break;
			case "year":
			case "weekYear":
				if (oPart.iDigits == 1) {
					sPart = findNumbers(4);
					iIndex += sPart.length;
				}
				else if (oPart.iDigits == 2) {
					sPart = findNumbers(4);
					if (sPart.length == 2) {
						iYear = parseInt(sPart, 10);
						if (iYear < 90) {
							sPart = "20" + sPart;
						} else {
							sPart = "19" + sPart;
						}
						iIndex +=2;
					}
					else {
						iIndex += sPart.length;
					}
				} 
				else {
					sPart = findNumbers(oPart.iDigits);
					iIndex += sPart.length;
				}
				iYear = parseInt(sPart, 10);
				break;
			case "weekInYear":
				// TODO
				break;
			case "hour0_23":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iHour = parseInt(sPart, 10);
				break;
			case "hour1_24":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iHour = parseInt(sPart, 10);
				if (iHour == 24) {
					iHour = 0;
				}
				break;
			case "hour0_11":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iHour = parseInt(sPart, 10);
				break;
			case "hour1_12":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iHour = parseInt(sPart, 10);
				if (iHour == 12) {
					iHour = 0;
				}
				break;
			case "minute":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iMinute = parseInt(sPart, 10);
				break;
			case "second":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				iIndex += sPart.length;
				iSecond = parseInt(sPart, 10);
				break;
			case "millisecond":
				sPart = findNumbers(Math.max(oPart.iDigits, 3));
				sPart = jQuery.sap.padRight(sPart, "0", 3);
				iIndex += sPart.length;
				iMillisecond = parseInt(sPart, 10);
				break;
			case "amPmMarker":
				if (oValue.indexOf("AM", iIndex) == iIndex) {
					bPM = false;
					iIndex += 2;
				}
				else if (oValue.indexOf("PM", iIndex) == iIndex) {
					bPM = true;
					iIndex += 2;
				}
				break;
			case "timezoneGeneral":
				// TODO
				break;
			case "timezoneISO8601":
				// TODO
				break;
			case "timezoneRFC822":
				// TODO
				break;
				
		}
	}
	if (bPM) {
		iHour += 12;
	}
	oDate.setFullYear(iYear || 1970);
	oDate.setMonth(iMonth || 0);
	oDate.setDate(iDay || 1);
	oDate.setHours(iHour || 0);
	oDate.setMinutes(iMinute || 0);
	oDate.setSeconds(iSecond || 0);
	oDate.setMilliseconds(iMillisecond || 0);
	return oDate;
};


/**
 * Parse the date format string and create an format array from it, which can be
 * used for parsing and formatting the date
 * 
 * @param sFormat the java date format string
 * @returns {Array} format array
 */
sap.ui.core.format.DateFormat.prototype.parseJavaDateFormat = function(sFormat) {
	var aFormatArray = [],
		i,
		bQuoted = false,
		oCurrentObject = null,
		sState = "",
		sNewState = "";

	
	for (i = 0; i < sFormat.length; i++) {
		var sCurChar = sFormat.charAt(i), sNextChar, sPrevChar;
		if (bQuoted) {
			if (sCurChar == "'") {
				sPrevChar = sFormat.charAt(i - 1);
				sNextChar = sFormat.charAt(i + 1);
				// handle abc''def correctly
				if (sPrevChar == "'") {
					bQuoted = false;
				}
				// handle 'abc''def' correctly
				else if( sNextChar == "'") {
					i += 1;
				}
				//  normal quote 'abcdef'
				else {
					bQuoted = false;
					continue;
				}
			}
			if (sState == "text") {
				oCurrentObject.sValue += sCurChar;
			} else {
				oCurrentObject = {
					sType:"text",
					sValue : sCurChar
				};
				aFormatArray.push(oCurrentObject);
				sState = "text";
			}
			
		} else {
			if (sCurChar == "'") {
				bQuoted = true;
			} 
			else if (!bQuoted && this.oStates[sCurChar]){
				sNewState = this.oStates[sCurChar];
				if (sState == sNewState) {
					oCurrentObject.iDigits++;
				} else {
					oCurrentObject = {
						sType: sNewState,
						iDigits: 1
					};
					aFormatArray.push(oCurrentObject);
					sState = sNewState;
				}
			} 
			else {	
				if (sState == "text") {
					oCurrentObject.sValue += sCurChar;
				} else {
					oCurrentObject = {
						sType:"text",
						sValue : sCurChar
					};
					aFormatArray.push(oCurrentObject);
					sState = "text";
				}
			}
		}
		 	
	}
	return aFormatArray;
};

/**
 * Get japanese emperor year char
 * 
 * @param {Date} oDate
 * @returns {String} 
 */
sap.ui.core.format.DateFormat.prototype.getEmperorYearChar = function(oDate) {
};

/**
 * Get japanese emperor year
 * 
 * @param {Date} oDate
 * @returns {int} 
 */
sap.ui.core.format.DateFormat.prototype.getEmperorYear = function(oDate) {
};
}; // end of sap.ui.core.format.DateFormat
if ( !jQuery.sap.isDeclared('sap.ui.core.ValueStateSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.core.ValueStateSupport");
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained


(function() {
	sap.ui.core.ValueStateSupport = {};
	var mTexts = null;

	
	var ensureTexts = function() {
		if (!mTexts) { // initialize texts if required
			mTexts = {};
			var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.core");
			mTexts[sap.ui.core.ValueState.Error] = rb.getText("VALUE_STATE_ERROR");
			mTexts[sap.ui.core.ValueState.Warning] = rb.getText("VALUE_STATE_WARNING");
			mTexts[sap.ui.core.ValueState.Success] = rb.getText("VALUE_STATE_SUCCESS");
		}
	};
	
	
	/**
	 * Appends a generic success, warning or error message to the given tooltip text if the given Element
	 * has a property "valueState" with one of these three states.
	 * 
	 * @param {sap.ui.core.Element} oElement the Element of which the tooltip needs to be modified
	 * @param {string} sTooltipText the original tooltip text (may be null)
	 * @returns the given text, with appended success/warning/error text, if appropriate
	 * 
	 * @public
	 */
	sap.ui.core.ValueStateSupport.enrichTooltip = function(oElement, sTooltipText) {
		jQuery.sap.assert(oElement instanceof sap.ui.core.Element, "oElement must be an Element");
		
		if (!sTooltipText && oElement.getTooltip()) {
			return undefined; // this means there is no tooltip text configured, but a tooltip object like a RichTooltip
		}
		
		if (oElement.getValueState) {
			var state = oElement.getValueState();
			if (state && (state != sap.ui.core.ValueState.None)) { // only for one of the three interesting state, not for the default
				ensureTexts();
				return (sTooltipText ? sTooltipText + " - " : "") + mTexts[state]; // add a suffix to the Tooltip
			}
		}
		
		return sTooltipText; // when there is no value state
	};


	/**
	 * Returns a generic success, warning or error message if the given Element
	 * has a property "valueState" with one of these three states.
	 * 
	 * @param {sap.ui.core.Element} oElement the Element of which the valueState needs to be checked
	 * @returns the success/warning/error text, if appropriate; otherwise null
	 * 
	 * @public
	 */
	sap.ui.core.ValueStateSupport.getAdditionalText = function(oElement) {
		var result = null;
		if (oElement.getValueState) {
			var state = oElement.getValueState();
			if (state && (state != sap.ui.core.ValueState.None)) { // only for one of the three interesting state, not for the default
				ensureTexts();
				result = mTexts[state];
			}
		}
		return result;
	};

})();

}; // end of sap.ui.core.ValueStateSupport
if ( !jQuery.sap.isDeclared('sap.ui.core.History') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the history handler sap.ui.core.History
jQuery.sap.declare("sap.ui.core.History");



/**
 * Creates an instance of the History.
 *
 * @class History handles the history of certain controls (e.g. sap.ui.commons.SearchField). 
 * 
 * @param {string} sId id for the history
 * @param {object} [mSettings] optional map/JSON-object with additional settings
 *
 * @extends sap.ui.base.Object
 * @author SAP AG
 * @version 1.2.0
 * @constructor
 * @private
 */
sap.ui.core.History = function(sId, mSettings) {
	sap.ui.base.Object.apply(this);
	if(!mSettings){
		mSettings = {};
	}
	
	var sHistoryPrefix = mSettings.prefix ? mSettings.prefix : document.location.pathname;
	
	this._iMaxHistory = mSettings.max ? mSettings.max : 100;
	this._sHistoryId = sHistoryPrefix + sId;
	var that = this;
	try{
		jQuery.sap.require("jquery.sap.storage");
		this._oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);
	}catch(e){
		this._oStorage = {get: function(){return null;}, put: function(){}, remove: function(){}}; //Create a dummy
		jQuery.sap.log.warning("History functionality deactivated due to the following error ", e, "sap.ui.core.History");
	}
	this._fFilter = mSettings.filter ? mSettings.filter : function(sHistoryValue, sValue) {
		return sHistoryValue && (!sValue || (sValue && jQuery.sap.startsWithIgnoreCase(sHistoryValue, sValue)));
	};
	this._fCheckHistory = mSettings.checkHistory ? mSettings.checkHistory : function(aHistory) {
		return aHistory;
	};
};
sap.ui.core.History.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);
sap.ui.base.Object.defineClass("sap.ui.core.History", {
	baseType : "sap.ui.base.Object",
	publicMethods : ["get", "add", "clear"]
});

/**
 * Initializes the history if not already done.
 * 
 * @private
 */
sap.ui.core.History.prototype._initHistory = function() {
	if(!this._aHistory){
		var aHistory = this._oStorage.get(this._sHistoryId);
		if(typeof(aHistory) === "string") {
			// in case it is a string, convert it to an array
			aHistory = aHistory.split(",");
		} else if(!aHistory){
			// or create a new one in case of non existence
			aHistory = [];
		} // else assume that there is the means for serializing JSON used, returning an array directly
		//do a final check of the entries
		this._aHistory = this._fCheckHistory(aHistory);
	}
	return this._aHistory;
};

/**
 * Returns the history values fitting to the given value (according to the specified filter.
 * 
 * @private
 */
sap.ui.core.History.prototype.get = function(sValue) {
	var aHistory = this._initHistory();
	var aResult = [];
	for(var i=0; i<aHistory.length; i++){
		if(this._fFilter(aHistory[i], sValue)){
			aResult.push(aHistory[i]);
		}
	}
	return aResult;
};

/**
 * Adds the given value to the history.
 * 
 * @private
 */
sap.ui.core.History.prototype.add = function(sValue) {
	var aHistory = this._initHistory();
	// ensure it is not contained twice -> remove
	for(var i=0; i<aHistory.length; i++){
		if(aHistory[i] === sValue){
			aHistory.splice(i,1);
			break;
		}
	}
	// and put it to the 'very top'
	aHistory.unshift(sValue);
	// but do not store more than specified
	if(aHistory.length > this._iMaxHistory) {
		aHistory.splice(this._iMaxHistory);
	}

	this._oStorage.put(this._sHistoryId, aHistory);
};

/**
 * Clears the history.
 * 
 * @private
 */
sap.ui.core.History.prototype.clear = function() {
	this._oStorage.remove(this._sHistoryId);
};

}; // end of sap.ui.core.History
if ( !jQuery.sap.isDeclared('sap.ui.core.SeparatorItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.SeparatorItem.
jQuery.sap.declare("sap.ui.core.SeparatorItem");



/**
 * Constructor for a new SeparatorItem.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.Item#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * An Item that provides a visual separation
 * @extends sap.ui.core.Item
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.SeparatorItem = function (sId, mSettings) {
	sap.ui.core.Item.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.SeparatorItem.prototype = jQuery.sap.newObject(sap.ui.core.Item.prototype);

/*
 * Describe the sap.ui.core.SeparatorItem. 
 * Resulting metadata can be obtained via sap.ui.core.SeparatorItem.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.SeparatorItem", {

  // ---- object ----
  baseType : "sap.ui.core.Item",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/core/SeparatorItem.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.core.SeparatorItem.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap.ui.core.SeparatorItem
if ( !jQuery.sap.isDeclared('sap.ui.core.BusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// A static class to show a busy indicator
jQuery.sap.declare("sap.ui.core.BusyIndicator");



/**
 * This class is used to display a waiting animation covering the whole page and blocking user interaction.
 *
 * @class sap.ui.core.BusyIndicator
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.core.BusyIndicator = jQuery.extend(jQuery.sap.newObject(sap.ui.base.EventProvider.prototype), {
	oPopup: null,
	oDomRef: null,
	bOpenRequested: false,
	iDEFAULT_DELAY_MS: 1000,
	sDOM_ID: "sapUiBusyIndicator"
});

sap.ui.base.EventProvider.apply(sap.ui.core.BusyIndicator);

/**
 * Map of event names and ids, that are provided by this class
 * @private
 */
sap.ui.core.BusyIndicator.M_EVENTS = {Open: "Open", Close: "Close"};


/**
 * Sets up the BusyIndicator HTML and the Popup instance.
 *
 * @private
 */
sap.ui.core.BusyIndicator._init = function() {
	// Create the graphics element
	var root = document.createElement("div");
	root.id = this.sDOM_ID;

	// Render into invisible area, so the size settings from CSS are applied
	var oInvisible = sap.ui.getCore().getStaticAreaRef();
	oInvisible.appendChild(root);
	jQuery(root).addClass("sapUiBusy").attr("tabindex", 0).attr("role", "progressbar").attr("alt", "").attr("title", "Please Wait");
	this.oDomRef = root;

	this.oPopup = new sap.ui.core.Popup(root);
	this.oPopup.setModal(true, "sapUiBlyBusy");
	this.oPopup.setShadow(false);
};


/**
 * Displays the BusyIndicator and starts blocking all user input.
 * This only happens after some delay and if after that delay the BusyIndicator.hide() has not yet been called in the meantime.
 * There is a certain default value for the delay, but that one can be overridden.
 *
 * @public
 * @param {int} [iDelay] The delay in milliseconds before opening the BusyIndicator. It is not opened if hide() is called before end of the delay. If no delay (or no valid delay) is given, the default value is used.
 */
sap.ui.core.BusyIndicator.show = function(iDelay) {
	jQuery.sap.assert(iDelay === undefined || (typeof iDelay == "number" && (iDelay % 1 == 0)), "iDelay must be empty or an integer");

	if ((iDelay === undefined)
			|| ((iDelay != 0) && (parseInt(iDelay, 10) == 0))
			|| (parseInt(iDelay, 10) < 0)) {
		iDelay = this.iDEFAULT_DELAY_MS;
	}

	this.bOpenRequested = true;
	if (iDelay === 0) { // avoid async call when there is no delay
		this._showNowIfRequested();
	} else {
		jQuery.sap.delayedCall(iDelay, this, "_showNowIfRequested");
	}
};


/**
 * Immediately displays the BusyIndicator if the application has not called hide() yet.
 *
 * @private
 */
sap.ui.core.BusyIndicator._showNowIfRequested = function() {
	// Do not open if the request has been canceled in the meantime
	if (!this.bOpenRequested) {
		return;
	}

	// If body/Core are not available yet, give them some more time and open later if still required
	if (!document.body || !sap.ui.getCore().isInitialized()) {
		jQuery.sap.delayedCall(100, this, "_showNowIfRequested");
		return;
	}

	this.bOpenRequested = false; // opening request is handled

	// Initialize/create the BusyIndicator if this has not been done yet
	if (!this.oDomRef) {
		this._init();
	}

	// Actually open the popup
	this.oPopup.open(0, sap.ui.core.Popup.Dock.CenterCenter, sap.ui.core.Popup.Dock.CenterCenter, document);

	// allow an event handler to do something with the indicator
	this.fireOpen({$Busy: this.oPopup._$()});

	// Grab the focus once opened
	var oDomRef = jQuery.sap.domById(sap.ui.core.BusyIndicator.sDOM_ID);
	jQuery.sap.focus(oDomRef);

	jQuery("body").attr("aria-busy", true);
};

/**
 * Removes the BusyIndicator from the screen
 *
 * @public
 */
sap.ui.core.BusyIndicator.hide = function() {
	var that = sap.ui.core.BusyIndicator; // Restore scope in case we are called with setTimeout or so...

	that.bOpenRequested = false;

	if (that.oDomRef) { // only if the BusyIndicator was shown before!
		jQuery("body").removeAttr("aria-busy");

		// allow an event handler to do something with the indicator
		this.fireClose({$Busy: this.oPopup._$()});

		that.oPopup.close(0);
	}
};


/*  EVENT HANDLING */

/**
 * Registers a handler for the "open" event
 * @public
 */
sap.ui.core.BusyIndicator.attachOpen = function(fFunction, oListener) {
	this.attachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, fFunction, oListener);
	return this;
};

/**
 * Unregisters a handler for the "open" event
 * @public
 */
sap.ui.core.BusyIndicator.detachOpen = function(fFunction, oListener) {
	this.detachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, fFunction, oListener);
	return this;
};

/**
 * Registers a handler for the "close" event
 * @public
 */
sap.ui.core.BusyIndicator.attachClose = function(fFunction, oListener) {
	this.attachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, fFunction, oListener);
	return this;
};

/**
 * Unregisters a handler for the "close" event
 * @public
 */
sap.ui.core.BusyIndicator.detachClose = function(fFunction, oListener) {
	this.detachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, fFunction, oListener);
	return this;
};

sap.ui.core.BusyIndicator.fireOpen = function(mParameters) {
	this.fireEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, mParameters);
};

sap.ui.core.BusyIndicator.fireClose = function(mParameters) {
	this.fireEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, mParameters);
};
}; // end of sap.ui.core.BusyIndicator
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.ViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for View
jQuery.sap.declare("sap.ui.core.mvc.ViewRenderer");

/**
 * @class View renderer.
 * @static
 */
sap.ui.core.mvc.ViewRenderer = {
};
}; // end of sap.ui.core.mvc.ViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.Controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides base class for controllers (part of MVC concept)
jQuery.sap.declare("sap.ui.core.mvc.Controller");


(function(){
	var mRegistry = {};

	/**
	 * Instantiates a (MVC-style) Controller. Consumers should call the constructor only in the 
	 * typed controller scenario. In the generic controller use case, they should use 
	 * {@link sap.ui.controller} instead.
	 * 
	 * @class A generic controller implementation for the UI5 Model View controller concept. 
	 * 
	 * Can either be used as a generic controller which is enriched on the fly with methods 
	 * and properties (see {@link sap.ui.controller}) or  as a base class for typed controllers.
	 *
	 * @param {string || object[]} sName The name of the Controller to instantiate. If a Controller is defined as real sub-class,
	 *                                   the "arguments" of the sub-class constructor should be given instead.
	 * @public                                   
	 */
	sap.ui.core.mvc.Controller = function(sName) {
		var oToExtend = null;
		if (typeof(sName) == "string") {
			/* TODO the whole if block is unnecessary, if constructor is really private (as documented) */
			if (!mRegistry[sName]) {
				jQuery.sap.require({modName: sName, type: "controller"}); // maybe there is a controller definition, but it has not been loaded yet -> try to load

				if (!mRegistry[sName]) {
					throw new Error("Controller type " + sName + " is undefined.");
				}
			}
			oToExtend = mRegistry[sName];
		}

		sap.ui.base.EventProvider.apply(this,arguments);

		if (oToExtend) {
			jQuery.extend(this, mRegistry[sName]);
		}

		// hidden second parameter for internal use
		if (arguments.length > 1 && arguments[1] instanceof sap.ui.core.mvc.View) {
			this.connectToView(arguments[1]);
		}
	};

	// Chain the prototypes
	sap.ui.core.mvc.Controller.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

	/*
	 * Describe class sap.ui.core.mvc.Controller.
	 */
	sap.ui.base.Object.defineClass("sap.ui.core.mvc.Controller", {
		baseType : "sap.ui.base.EventProvider",
		publicMethods: []
	});


	/**
	 * Defines a controller class or creates an instance of an already defined controller class.
	 * 
	 * When a name and a controller implementation object is given, a new controller class
	 * of the given name is created. The members of the implementation object will be copied
	 * into each new instance of that controller class (shallow copy). 
	 * <b>Note</b>: as the members are shallow copied, controller instances will share all object values.
	 * This might or might not be what applications expect.
	 *  
	 * If only a name is given, a new instance of the named Controller class is returned.
	 *
	 * @param {string} sName The Controller name
	 * @param {object} [oControllerImpl] An object literal defining the methods and properties of the Controller 
	 * @return {void | sap.ui.core.mvc.Controller} void or the new controller instance, depending on the use case 
	 * @public
	 */
	sap.ui.controller = function(sName, oControllerImpl) {
		if (!sName) {
			throw new Error("Controller name ('sName' parameter) is required");
		}

		if (!oControllerImpl) {
			// controller *instantiation*
			
			// check if controller is available, either anonymous or typed
			if ( !mRegistry[sName] && !jQuery.sap.getObject(sName) ) {
				// if not, try to load an external controller definition module
				jQuery.sap.require({modName: sName, type: "controller"}); 
			}
			
			if ( mRegistry[sName] ) {
				// anonymous controller 
				return new sap.ui.core.mvc.Controller(sName);
			} else {
				var CTypedController = jQuery.sap.getObject(sName);
				if ( typeof CTypedController === "function" && CTypedController.prototype instanceof sap.ui.core.mvc.Controller ) {
					// typed controller
					return new CTypedController();
				}
			}
			throw new Error("Controller " + sName + " couldn't be instantiated");
		} else {
			// controller *definition*
			mRegistry[sName] = oControllerImpl;
		}

	};

	/**
	 * Returns the view associated with this controller or undefined.
	 * @return {sap.ui.core.mvc.View} View connected to this controller.
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.getView = function() {
		return this.oView;
	};

	/**
	 * Returns an Element of the connected view with the given local Id. 
	 * 
	 * Views automatically prepend their own id as a prefix to created Elements
	 * to make the ids unique even in the case of multiple view instances.
	 * This method helps to find an element by its local id only.
	 *  
	 * If no view is connected or if the view doesn't contain an element with 
	 * the given local id, undefined is returned.
	 *  
	 * @param {string} sId The view-local id 
	 * @return {sap.ui.core.Element} Element by its (view local) id
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.byId = function(sId) {
		return this.oView ? this.oView.byId(sId): undefined;
	};


	/**
	 * Converts a view local id to a globally unique one by prepending 
	 * the view id.
	 * 
	 * If no view is connected, undefined is returned.
	 *  
	 * @param {string} sId The view-local id 
	 * @return {string} The prefixed id
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.createId = function(sId) {
		return this.oView ? this.oView.createId(sId): undefined;
	};


	sap.ui.core.mvc.Controller.prototype.connectToView = function(oView) {
		oView.oController = this;
		if(!oView._bNested || oView._bNested !== true) {
			this.oView = oView;

			if (this.onInit) {
				oView.attachAfterInit(this.onInit, this);
			}
			if (this.onExit) {
				oView.attachBeforeExit(this.onExit, this);
			}
			if (this.onAfterRendering) {
				oView.attachAfterRendering(this.onAfterRendering, this);
			}
			if (this.onBeforeRendering) {
				oView.attachBeforeRendering(this.onBeforeRendering, this);
			}
		}
		//oView.addDelegate(this);
	};

}());
}; // end of sap.ui.core.mvc.Controller
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.XMLViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for XMLView
jQuery.sap.declare("sap.ui.core.mvc.XMLViewRenderer");


sap.ui.core.mvc.XMLViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.mvc.XMLView} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.XMLViewRenderer.render = function(rm, oControl) {

	// write the HTML into the render manager
	var $oldContent = oControl._$oldContent = sap.ui.core.RenderManager.findPreservedContent(oControl.getId());
	if ( $oldContent.length === 0 ) {
		// jQuery.sap.log.debug("rendering " + oControl + " anew");
		var bSubView = oControl.isSubView();
		if(!bSubView){
			rm.write("<div");
			rm.writeControlData(oControl);
			rm.addClass("sapUiView");
			rm.addClass("sapUiXMLView");
			rm.writeAttribute("data-sap-ui-preserve", oControl.getId());
			
			if (oControl.getWidth()) {
				rm.addStyle("width", oControl.getWidth());
			}
			if (oControl.getHeight()) {
				rm.addStyle("height", oControl.getHeight());
			}
			rm.writeStyles();
	
			rm.writeClasses();
	
			rm.write(">");
		}
		for (var i = 0; i < oControl._aParsedContent.length; i++) {
			var fragment = oControl._aParsedContent[i];
			if(fragment && typeof(fragment) === "string") {
				rm.write(fragment); // TODO: escaping
			} else {
				rm.renderControl(fragment);
			}
		}
		if (!bSubView) {
			rm.write("</div>");
		}

	} else {
		
		// jQuery.sap.log.debug("rendering placeholder instead of " + oControl + " (preserved dom)");
		// preserve mode: render only root tag and child controls
		rm.write('<div id="sap-ui-dummy-' + oControl.getId() + '" class="sapUiHidden">');
		for (var i = 0; i < oControl._aParsedContent.length; i++) {
			var fragment = oControl._aParsedContent[i];
			if( typeof(fragment) !== "string") {
				// jQuery.sap.log.debug("replacing preserved DOM for child " + fragment + " with a placeholder");
				jQuery.sap.byId(fragment.getId(), $oldContent).replaceWith('<div id="sap-ui-dummy-' + fragment.getId() + '" class="sapUiHidden"/>');
				rm.renderControl(fragment);
			}
		}
		rm.write('</div>');
		
	}
};

}; // end of sap.ui.core.mvc.XMLViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSONView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.JSONView.
jQuery.sap.declare("sap.ui.core.mvc.JSONView");



/**
 * Constructor for a new mvc/JSONView.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.mvc.View#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A View defined using JSON.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.mvc.JSONView = function (sId, mSettings) {
	sap.ui.core.mvc.View.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.mvc.JSONView.prototype = jQuery.sap.newObject(sap.ui.core.mvc.View.prototype);

/*
 * Describe the sap.ui.core.mvc.JSONView. 
 * Resulting metadata can be obtained via sap.ui.core.mvc.JSONView.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.mvc.JSONView", {

  // ---- object ----
  baseType : "sap.ui.core.mvc.View",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/core/mvc/JSONView.js
(function(){

	/**
	 * Creates a JSON view of the given name and id.
	 *
     * The <code>viewName</code> must either correspond to an JSON module that can be loaded
	 * via the module system (viewName + suffix ".view.json") and which defines the view or must
	 * be a configuration object for a view.
	 * The configuration object can have a vieName, viewContent and a controller property. The viewName
	 * behaves as described above. ViewContent can hold the view description as JSON string. The controller
	 * property can hold an controller instance. If a controller instance is given it overrides the
	 * controller defined in the view.
	 * 
	 * Like with any other control, an id is optional and will be created when missing.
	 *
	 * @param {string} [sId] id of the newly created view
	 * @param {string | object} vView name of the view or view configuration as described above.
	 * @public
	 * @static
	 */
	sap.ui.jsonview = function(sId, vView) {
		var mSettings = {};
		if (vView) {
			if (typeof(vView) == "string") {
				mSettings.viewName = vView;
			}
			else {
				mSettings.viewName = vView.viewName;
				mSettings.controller = vView.controller;
				mSettings.viewContent = vView.viewContent;
			}
			return new sap.ui.core.mvc.JSONView(sId, mSettings);
		} else {
			if (typeof(sId) == "string") {
				mSettings.viewName = sId;
			}
			else {
				mSettings.viewName = sId.viewName;
				mSettings.controller = sId.controller;
				mSettings.viewContent = sId.viewContent;
			}
			return new sap.ui.core.mvc.JSONView(mSettings);
		}
	};
	sap.ui.core.mvc.JSONView.prototype.initViewSettings = function(mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - no JSON template given
		if (mSettings.viewName && mSettings.viewContent) {
			throw new Error("View name and view content are given. There is no point in doing this, so please decide.");
		} else if (!mSettings.viewName && !mSettings.viewContent) {
			throw new Error("Neither view name nor view content is given. One of them is required.");
		}

		if (mSettings.viewName) {
			this._loadTemplate(mSettings.viewName);
		} else if (mSettings.viewContent) {
			this._oJSONView = jQuery.parseJSON(mSettings.viewContent);
		} else {
			// does not happen, already checked
		}
		
		if(this._oJSONView.resourceBundleName || this._oJSONView.resourceBundleUrl) {
			var model = new sap.ui.model.resource.ResourceModel({bundleName:this._oJSONView.resourceBundleName, bundleUrl:this._oJSONView.resourceBundleUrl});
			this.setModel(model, this._oJSONView.resourceBundleAlias);
		}

	};

	sap.ui.core.mvc.JSONView.prototype.createControls = function() {
		for (var i = 0; i < this._oJSONView.content.length; i++) {
			var oSettings = this._oJSONView.content[i];
			var oClass = jQuery.sap.getObject(oSettings.Type);
			//var oControl = new oClass(oSettings, this._oController);

			var oControl = new oClass(oSettings);
			this.addAggregation("content", oControl);
		}
	};


	sap.ui.core.mvc.JSONView.prototype.onControllerConnected = function(oController) {
		var that = this,
			oController = this.oController;
		// preprocess 'mSettings' for setting the controller as Listener for defined events
		// => make sure to store old preprocessor in case of nested views
		var fnOldSettingPreprocessor = sap.ui.core.Element._fnSettingsPreprocessor;
		// TODO how to avoid usage of this preprocessor in controls that are not part of this view (eg. embedded XMLView or JSView)?
		sap.ui.core.Element._fnSettingsPreprocessor = function(oSettings) {
			var oMetadata = this.getMetadata(),
			aValidKeys = oMetadata.getJSONKeys(),
			sKey, oValue, oKeyInfo;
			for(sKey in oSettings) {
				// get info object for the key
				if ( oKeyInfo = aValidKeys[sKey] ) {
					oValue = oSettings[sKey];
					switch(oKeyInfo._iKind) {
					case 3: // SINGLE ASSOCIATIONS
						// prefix the association ids with the view id
						oSettings[sKey] = that.getId() + "--" + oValue;
						break;
					case 5: // EVENTS
						if ( typeof oSettings[sKey] === "string" ) {
							oSettings[sKey] = [oController[oSettings[sKey]], oController];
						}
						break;
					}
				}
			}
		};
		// parse
		this.createControls();
		// restore SettingsPreprocessor
		sap.ui.core.Element._fnSettingsPreprocessor = fnOldSettingPreprocessor;
	};

	sap.ui.core.mvc.JSONView.prototype._loadTemplate = function(sTemplateName) {
		var url = jQuery.sap.getModulePath(sTemplateName, ".view.json");

		var response = jQuery.sap.sjax({
			url : url,
			dataType: 'json'
		});
		this._oJSONView = response.data;
		if (!this._oJSONView) {
			throw new Error("View definition could not be loaded from " + url + ". Check for 'file not found' errors.");
		}
	};

	sap.ui.core.mvc.JSONView.prototype.getControllerName = function() {
		return this._oJSONView.controllerName;
	};

}());
}; // end of sap.ui.core.mvc.JSONView
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSONViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for JSONView
jQuery.sap.declare("sap.ui.core.mvc.JSONViewRenderer");

/**
 * @class JSONView renderer.
 * @static
 */
sap.ui.core.mvc.JSONViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.JSONViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiJSONView");
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	var content = oControl.getContent();
	if (content) {
		if (content.length && !(content instanceof sap.ui.core.Control)) {
			// looks like an Array
			for (var i = 0; i < content.length; i++) {
				rm.renderControl(content[i]);
			}

		} else {
			// should be a Control
			rm.renderControl(oControl.getContent());
		}
	}

	rm.write("</div>");
};

}; // end of sap.ui.core.mvc.JSONViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.XMLView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.XMLView.
jQuery.sap.declare("sap.ui.core.mvc.XMLView");



/**
 * Constructor for a new mvc/XMLView.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.mvc.View#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A View defined using (P)XML and HTML markup.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.mvc.XMLView = function (sId, mSettings) {
	sap.ui.core.mvc.View.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.mvc.XMLView.prototype = jQuery.sap.newObject(sap.ui.core.mvc.View.prototype);

/*
 * Describe the sap.ui.core.mvc.XMLView. 
 * Resulting metadata can be obtained via sap.ui.core.mvc.XMLView.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.mvc.XMLView", {

  // ---- object ----
  baseType : "sap.ui.core.mvc.View",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/core/mvc/XMLView.js




(function(){

	/**
	 * Creates an XML view of the given name and with the given id.
	 *
	 * The <code>viewName</code> must either correspond to an XML module that can be loaded
	 * via the module system (viewName + suffix ".view.xml") and which defines the view or must
	 * be a configuration object for a view.
	 * The configuration object can have a vieName, viewContent and a controller property. The viewName
	 * behaves as described above. ViewContent can hold the view description as XML string. The controller
	 * property can hold an controller instance. If a controller instance is given it overrides the
	 * controller defined in the view.
	 *
	 * Like with any other control, id is optional and one will be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view
	 * @param {string | object} vView name of the view or view configuration as described above.
	 * @public
	 * @static
	 */
	sap.ui.xmlview = function(sId, vView) {
		var mSettings = {};
		if (vView) {
			if (typeof(vView) == "string") {
				mSettings.viewName = vView;
			}
			else {
				mSettings.viewName = vView.viewName;
				mSettings.controller = vView.controller;
				mSettings.viewContent = vView.viewContent;
			}
			return new sap.ui.core.mvc.XMLView(sId, mSettings);
		} else {
			if (typeof(sId) == "string") {
				mSettings.viewName = sId;
			}
			else {
				mSettings.viewName = sId.viewName;
				mSettings.controller = sId.controller;
				mSettings.viewContent = sId.viewContent;
			}
			return new sap.ui.core.mvc.XMLView(mSettings);
		}
	};


	sap.ui.core.mvc.XMLView.prototype.initViewSettings = function(mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - either template name or XML node is given
		if (mSettings.viewName && mSettings.viewContent) {
			throw new Error("View name and view content are given. There is no point in doing this, so please decide.");
		} else if ((mSettings.viewName || mSettings.viewContent) && mSettings.xmlNode) {
			throw new Error("View name/content AND an XML node are given. There is no point in doing this, so please decide.");
		} else if (!(mSettings.viewName || mSettings.viewContent) && !mSettings.xmlNode) {
			throw new Error("Neither view name/content nor an XML node is given. One of them is required.");
		}

		if (mSettings.viewName) {
			this._xContent = loadTemplate(mSettings.viewName);
		} else if (mSettings.viewContent) {
			this._xContent = jQuery.sap.parseXML(mSettings.viewContent);
			if (this._xContent.parseError.errorCode != 0){
				var oParseError = this._xContent.parseError;
				throw new Error("The following problem occurred: XML parse Error for " + oParseError.url + " code: " + oParseError.errorCode + " reason: " +
						oParseError.reason +  " src: " + oParseError.srcText + " line: " +  oParseError.line +  " linepos: " + oParseError.linepos +  " filepos: " + oParseError.filepos);	
			}else{
				this._xContent = this._xContent.documentElement;
			}
			
		} else if (mSettings.xmlNode) {
			this._xContent = mSettings.xmlNode;
		} else {
			// does not happen, already checked
		}
		this._bNested = mSettings.nested === true ? mSettings.nested:false;
		
		// extract the properties of the view from the XML element
		if ( !this._bNested ) {
			parseViewAttributes(this._xContent, this, mSettings);
		}
		
		if(this._resourceBundleName || this._resourceBundleUrl) {
			var model = new sap.ui.model.resource.ResourceModel({bundleName:this._resourceBundleName, bundleUrl:this._resourceBundleUrl, bundleLocale:this._resourceBundleLocale});
			this.setModel(model,this._resourceBundleAlias);
		}
	};

	sap.ui.core.mvc.XMLView.prototype.onControllerConnected = function(oController) {
		// parse the XML tree
		this._aParsedContent = parseView(this._xContent, this);

	};

	sap.ui.core.mvc.XMLView.prototype.getControllerName = function() {
		return this._controllerName;
	};


	sap.ui.core.mvc.XMLView.prototype.isSubView = function() {
		return this._bNested;
	};
	
	/**
	 * If the HTML doesn't contain own content, it tries to reproduce existing content
	 */
	sap.ui.core.mvc.XMLView.prototype.onAfterRendering = function() {

		if ( this._$oldContent.length !== 0 ) {
			// jQuery.sap.log.debug("after rendering for " + this);

			// move DOM of children into correct place in preserved DOM
			var aChildren = this.getAggregation("content");
			if ( aChildren ) {
				for(var i=0; i<aChildren.length; i++) {
					var $childDOM = aChildren[i].$();
					// jQuery.sap.log.debug("replacing placeholder for " + aChildren[i] + " with content");
					jQuery.sap.byId("sap-ui-dummy-" + aChildren[i].getId(), this._$oldContent).replaceWith($childDOM);
				}
			}
			// move preserved DOM into place
			// jQuery.sap.log.debug("moving preserved dom into place for " + this);
			jQuery.sap.byId("sap-ui-dummy-" + this.getId()).replaceWith(this._$oldContent);
		}
		this._$oldContent = undefined;

		// call super
		sap.ui.core.mvc.View.prototype.onAfterRendering.apply(this, arguments);
	};
	
	function loadTemplate(sTemplateName) {
		var url = jQuery.sap.getModulePath(sTemplateName, ".view.xml");

		var response = jQuery.sap.sjax({
			url : url,
			dataType: 'xml'
		});
		var _xContent = response.data;
		if (!_xContent) {
			throw new Error("View definition could not be loaded from " + url + ". Check for XML errors or 'file not found' errors.");
		}
		return _xContent.documentElement; // response.data is the document node
	}

	/************* PARSING *************/
	
	function parseScalarType(sType, sValue, sName) {
		var oType = sap.ui.base.DataType.getType(sType);
		if (oType) {
			if (oType instanceof sap.ui.base.DataType) {
				return oType.parseValue(sValue);
			}
			// else return original sValue (e.g. for enums)
		} else {
			throw new Error("Property " + sName + " has no known type");
		}
		return sValue;
	}
	
	function localName(xmlNode) {
		// localName for standard browsers, baseName for IE, nodeName in the absence of namespaces
		return xmlNode.localName || xmlNode.baseName || xmlNode.nodeName;
	}
	
	/**
	 * Parses only the attributes of the root node (View)
	 * Children are parsed later on after the controller has been set.
	 * TODO can't handle event handlers in the root node
	 */
	function parseViewAttributes(xmlNode, oView, mSettings) {

		var mAllProperties = oView.getMetadata().getAllProperties();
		for ( var i = 0; i < xmlNode.attributes.length; i++) {
			var attr = xmlNode.attributes[i];
			if (attr.name === 'controllerName') {
				oView._controllerName = attr.value;
			} else if (attr.name === 'resourceBundleName') {
				oView._resourceBundleName =  attr.value;
			} else if (attr.name === 'resourceBundleUrl') {
				oView._resourceBundleUrl =  attr.value;
			} else if (attr.name === 'resourceBundleLocale') {
				oView._resourceBundleLocale =  attr.value;
			} else if (attr.name === 'resourceBundleAlias') {
				oView._resourceBundleAlias =  attr.value;
			} else if (!mSettings[attr.name] && mAllProperties[attr.name]) {
				mSettings[attr.name] = parseScalarType(mAllProperties[attr.name].type, attr.value, attr.name);
			}
		}
	}

	/**
	 * Parses a complete View definition (full node hierarchy)
	 */
	function parseView(xmlNode, oView) {
		
		var aResult=[];
		if (oView.isSubView()) {
			parseNode(xmlNode, true);
		} else {
			parseChildren(xmlNode);
		}
		return aResult;

		/**
		 * Parses an XML node that might represent an UI5 control or simple XHTML.
		 * XHTML will be added to the aResult array as a sequence of strings,
		 * UI5 controls will be instantiated and added as controls
		 */
		function parseNode(xmlNode, bRoot) {

			if ( xmlNode.nodeType === 1 /* ELEMENT_NODE */ ) {
				
				var sLocalName = localName(xmlNode);
				if (xmlNode.namespaceURI === "http://www.w3.org/1999/xhtml" || xmlNode.namespaceURI === "http://www.w3.org/2000/svg") {
					// write opening tag
					aResult.push("<" + sLocalName + " ");
					// write attributes
					var sId;
					for (var i = 0; i < xmlNode.attributes.length; i++) {
						var attr = xmlNode.attributes[i];
						var value = attr.value;
						if (attr.name === "id") {
							// also preprocess the id of HTML elements
							// (instead of the Element pass the XMLNode)
							var preprocessor = sap.ui.core.Element._fnIdPreprocessor;
							value = sId = preprocessor ? preprocessor.call(xmlNode, value) : value;
						}
						aResult.push(attr.name + "='" + value + "' ");
					}
					if ( bRoot === true ) {
						aResult.push("data-sap-ui-preserve" + "='" + oView.getId() + "' ");
					}
					aResult.push(">");
		
					// write children
					parseChildren(xmlNode);
					
					// close the tag
					aResult.push("</" + sLocalName + ">");
					
				} else {

					// assumption: an ELEMENT_NODE with non-XHTML namespace is a SAPUI5 control and the namespace equals the library name
					var oChild = createRegularControl(xmlNode);
					
					oView.addAggregation("content", oChild);
					aResult.push(oChild);
					
				}
				
			} else if (xmlNode.nodeType === 3 /* TEXT_NODE */ ) {
				
				var text = xmlNode.textContent || xmlNode.text;
				if (text) {
					aResult.push(text);
				}
				
			}

		}
	
		/**
		 * Parses the children of an XML node
		 */
		function parseChildren(xmlNode, bRoot) {
			var children = xmlNode.childNodes;
			for (var i = 0; i < children.length; i++) {
				parseNode(children[i], bRoot);
			}
		}
		
		function findControlClass(sNamespaceURI, sLocalName) {
			var sClassName;
			var mLibraries = sap.ui.getCore().getLoadedLibraries();
			jQuery.each(mLibraries, function(sLibName, oLibrary) {
				if ( sNamespaceURI === oLibrary.namespace || sNamespaceURI === oLibrary.name ) {
					sClassName = oLibrary.name + "." + ((oLibrary.tagNames && oLibrary.tagNames[sLocalName]) || sLocalName);
				}
			});
			// TODO guess library from sNamespaceURI and load corresponding lib!?
			sClassName = sClassName || sNamespaceURI + "." + sLocalName;
			
			// ensure that control and library are loaded
			jQuery.sap.require(sClassName); // make sure oClass.getMetadata() exists
			
			return jQuery.sap.getObject(sClassName);
		}
		
		/**
		 * Takes an arbitrary node and creates a SAPUI5 control from it, iterating over the attributes and child nodes
		 *
		 * @private
		 */
		function createControl(node) {
			// differentiate between SAPUI5 and plain-HTML children
			if (node.namespaceURI === "http://www.w3.org/1999/xhtml" || node.namespaceURI === "http://www.w3.org/2000/svg" ) {
				// plain HTML node - create a new View control
				return new sap.ui.core.mvc.XMLView({id: xmlNode.attributes['id'], xmlNode:node,controller:oView.oController,nested:true});
			} else {
				// SAPUI5 control
				return createRegularControl(node);
			}
		}
		
		function createRegularControl(node) {
			var ns = node.namespaceURI,
				oClass = findControlClass(ns, localName(node)),
				oMetadata = oClass.getMetadata(),
				mJSONKeys = oMetadata.getJSONKeys(),
				mSettings = {},
				sStyleClasses = "";

			for (var i = 0; i < node.attributes.length; i++) {
				var attr = node.attributes[i];
	
				var sName = attr.name;
				var sValue = attr.value;
	
				// apply the value of the attribute to a
				//   * property,
				//   * association (id of the control) or
				//   * event (name of the function in the controller)
	
				var oInfo = mJSONKeys[sName];
				
				if (sName === "id") {
					// special handling for ID
					mSettings[sName] = sValue;
	
				} else if (sName === "class") {
					// special handling for CSS classes, which will be added via addStyleClass()
					sStyleClasses += sValue + " ";
	
				} else if (sName === "viewName") {
					mSettings[sName] = sValue;
	
				} else if (oInfo && oInfo._iKind === 0 /* PROPERTY */ ) {
					// other PROPERTY
					mSettings[sName] = parseScalarType(oInfo.type, sValue, sName);
	
				} else if (oInfo && oInfo._iKind === 1 /* SINGLE_AGGREGATION */ && oInfo.altTypes ) {
					// AGGREGATION with scalar type (altType)
					mSettings[sName] = parseScalarType(oInfo.altTypes[0], sValue, sName);
	
				} else if (oInfo && oInfo._iKind === 3 /* SINGLE_ASSOCIATION */ ) {
					// ASSOCIATION
					// prefix the association ids with the view id
					mSettings[sName] = oView.getId() + "--" + sValue; // use the value as ID
	
				} else if (oInfo && oInfo._iKind === 5 /* EVENT */ ) {
					// EVENT
					mSettings[sName] = [oView.oController[sValue], oView.oController];
	
				}
			}
	
			function handleChildren(node, oAggregation, mAggregations) {

				var childNode,oNamedAggregation,oControl;
				
				// loop over all nodes
				for (childNode=node.firstChild; childNode; childNode = childNode.nextSibling) {
				
					// inspect only element nodes
					if ( childNode.nodeType === 1 /* ELEMENT_NODE */ ) {
						
						// check for a named aggregation (must have the same namespace as the parent and an aggregation with the same name must exist)
						oNamedAggregation = childNode.namespaceURI === ns && mAggregations && mAggregations[localName(childNode)];
						if (oNamedAggregation) {
							
							// the children of the current childNode are aggregated controls (or HTML) below the named aggregation
							handleChildren(childNode, oNamedAggregation);
							
						} else if (oAggregation) {
							// child node name does not equal an aggregation name,
							// so this child must be a control (or HTML) which is aggregated below the DEFAULT aggregation
							var oControl = createControl(childNode);
							if ( oControl ) {
								// append the child to the aggregation
								var name = oAggregation._sName;
								if (oAggregation.multiple) {
									// 1..n AGGREGATION
									if (!mSettings[name]) {
										mSettings[name] = [];
									}
									mSettings[name].push(oControl);
								} else {
									// 1..1 AGGREGATION
									mSettings[name] = oControl;
								}
							}
						} else {
							throw new Error("Cannot add direct child without default aggregation defined for control " + oMetadata.getElementName());
						}
						
					} else if ( childNode.nodeType === 3 /* TEXT_NODE */ ) {
						if ( jQuery.trim(childNode.textContent || childNode.text) ) { // whitespace would be okay
							throw new Error("Cannot add text nodes as direct child of an aggregation. For adding text to an aggregation, a surrounding html tag is needed");
						}
					} // other nodes types are silently ignored
						
				}
			}
			
			// loop child nodes and handle all AGGREGATIONS
			handleChildren(node, oMetadata.getDefaultAggregation(), oMetadata.getAllAggregations());
	
			// apply the settings to the control
			var oControl = new oClass(mSettings);
	
			if (oControl.addStyleClass) {
				// Elements do not have a style class!
				oControl.addStyleClass(sStyleClasses);
			}
	
			return oControl;
		}
	
	}

}());
}; // end of sap.ui.core.mvc.XMLView
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for JSView
jQuery.sap.declare("sap.ui.core.mvc.JSViewRenderer");

/**
 * @class JSView renderer.
 * @static
 */
sap.ui.core.mvc.JSViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.JSViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiJSView");
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	var content = oControl.getContent();
	if (content) {
		if (jQuery.isArray(content)) {
			// looks like an Array
			for (var i = 0; i < content.length; i++) {
				rm.renderControl(content[i]);
			}

		} else if (content) {
			// should be a Control
			rm.renderControl(content);
		}
	}

	rm.write("</div>");
};

}; // end of sap.ui.core.mvc.JSViewRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.JSView.
jQuery.sap.declare("sap.ui.core.mvc.JSView");



/**
 * Constructor for a new mvc/JSView.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * For further parameters see {@link sap.ui.core.mvc.View#constructor}
 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * A View defined/constructed by JavaScript code.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.mvc.JSView = function (sId, mSettings) {
	sap.ui.core.mvc.View.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.mvc.JSView.prototype = jQuery.sap.newObject(sap.ui.core.mvc.View.prototype);

/*
 * Describe the sap.ui.core.mvc.JSView. 
 * Resulting metadata can be obtained via sap.ui.core.mvc.JSView.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.mvc.JSView", {

  // ---- object ----
  baseType : "sap.ui.core.mvc.View",
  publicMethods : [],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {},
  
  aggregations : {},
  associations : {},
  events : {}

});	


// Start of sap/ui/core/mvc/JSView.js
(function(){
	var mRegistry = {};
	/**
	 * Defines or creates an instance of a JavaScript view.
	 *
	 * The behavior of this method depends on the signature of the call and on the current context.
	 *
	 * <ul>
	 * <li>View Definition <code>sap.ui.jsview(sId, vView)</code>: Defines a view of the given name with the given 
	 * implementation. sId must be the views name, vView must be an object and can contain 
	 * implementations for any of the hooks provided by JSView</li>
	 * <li>View Instantiation <code>sap.ui.jsview(sId?, vView)</code>: Creates an instance of the view with the given name (and id).
	 * If no view implementation has been defined for that view name, a JavaScript module with the same name and with suffix "view.js" will be loaded
	 * and executed. The module should contain a view definition (1st. variant above). </li>
	 * </ul>
	 *
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view, only allowed for instance creation
	 * @param {string | object} vView name or implementation of the view.
	 * @public
	 * @static
	 */
	sap.ui.jsview = function(sId, vView) {
		var mSettings = {};

		if (vView && typeof (vView) == "string") { // instantiation sap.ui.jsview("id","name")
			mSettings.viewName = vView;
			mSettings.controller = arguments[2];
			var oView = new sap.ui.core.mvc.JSView(sId, mSettings);
			return oView;

		} else if (vView && typeof (vView) == "object"){ // definition sap.ui.jsview("name",definitionObject)
			// sId is not given, but contains the desired value of sViewName
			mRegistry[sId] = vView;
			jQuery.sap.declare({modName:sId,type:"view"}, false);

		} else if (arguments.length == 1 && typeof(arguments[0]) == "string") { // instantiation sap.ui.jsview("name")
			mSettings.viewName = sId;
			mSettings.controller = arguments[1];
			/*** STEP 1: create View ***/
			var oView = mSettings.id ? new sap.ui.core.mvc.JSView(mSettings.id,mSettings): new sap.ui.core.mvc.JSView(mSettings);
			/*** Step 3B and 4B (create and connect controller) happen in View ***/
			return oView;
		} else {
			throw new Error("Wrong arguments! Either call sap.ui.jsview([sId,] sViewName) to instantiate a View or sap.ui.jsview(sViewName, oViewImpl) to define a View type.");
		}
	};

	sap.ui.core.mvc.JSView.prototype.initViewSettings = function (mSettings) {
		/*** require view definition if not yet done... ***/
		if (!mRegistry[mSettings.viewName]) {
			jQuery.sap.require({modName: mSettings.viewName, type: "view"});
		}
		/*** Step 2: extend() ***/
		jQuery.extend(this, mRegistry[mSettings.viewName]);
	};

	sap.ui.core.mvc.JSView.prototype.onControllerConnected = function(oController) {
		// no id preprocessing
		var fnOldIdPreprocessor = sap.ui.core.Element._fnIdPreprocessor;
		sap.ui.core.Element._fnIdPreprocessor = undefined;

		/*** Step 3A: get content ***/
		var oContent = this.createContent(oController);

		/*** Step 4A: setParent on content ***/
		if (oContent instanceof sap.ui.core.Control) {
			this.setAggregation("content", oContent);
		} else if (jQuery.isArray(oContent)) {
			for (var i = 0; i < oContent.length; i++) {
				this.addAggregation("content", oContent[i]);
			}
		} else {
			jQuery.sap.log.warning("JSView.createContent() must return a single control or an array of controls which is not the case for View '" + this.getId() + "'");
		}

		// restore id preprocessor
		sap.ui.core.Element._fnIdPreprocessor = fnOldIdPreprocessor; 
	};
	
}());
}; // end of sap.ui.core.mvc.JSView
if ( !jQuery.sap.isDeclared('sap.ui.core.Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides (optional) base class for all renderers
jQuery.sap.declare("sap.ui.core.Renderer");

/**
 * @class Base Class for Renderer.
 *
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.2.0
 * @static
 * @public
 */
sap.ui.core.Renderer = {
};

/**
 * Provides some 'extends' functionality for Renderers.<br/> Creates a new
 * object (i.e. static class) that knows its parent (accessible from
 * <code>this._super</code>) and initially forwards method calls to the
 * parents methods.<br/> Methods can be overwritten afterwards as known from
 * JavaScript.
 *
 * @param {object}
 *            oParentClass the definition of the class that should be extended.
 * @return a new class definition that can be enriched.
 * @type object
 * @public
 */
sap.ui.core.Renderer.extend = function(oParentClass) {
	//var oChild = jQuery.extend(new jQuery.sap.newObject(oParentClass), {_super: oParentClass});
	//return oChild;
	var oChild = {_super: oParentClass};
	for(var f in oParentClass) {
		if(typeof(oParentClass[f]) == "function") {
			oChild[f] = (function(){
				var sMethod = f,
					that = oChild;
				return function() {
					return that._super[sMethod].apply(this, arguments);
				};
			}());
		}
	}
	return oChild;
};

/**
 * Returns the TextAlignment for the provided configuration.
 *
 * @param oTextAlign
 *            {sap.ui.core.TextAlign} the text alignment of the Control
 * @param oTextDirection
 *            {sap.ui.core.TextDirection} the text direction of the Control
 * @return the actual text alignment that must be set for this environment
 * @type {string}
 * @private
 */
sap.ui.core.Renderer.getTextAlign = function(oTextAlign, oTextDirection) {
	var sTextAlign = "";
	var oConfig = sap.ui.getCore().getConfiguration();

	switch (oTextAlign) {
	case sap.ui.core.TextAlign.End:
		switch (oTextDirection) {
		case "LTR":
			sTextAlign = "right";
			break;
		case "RTL":
			sTextAlign = "left";
			break;
		default:
			if (oConfig.getRTL()) { // this is really only influenced by the SAPUI5 configuration. The browser does not change alignment with text-direction
				sTextAlign = "left";
			} else {
				sTextAlign = "right";
			}
			break;
		}
		break;
	case sap.ui.core.TextAlign.Begin:
		switch (oTextDirection) {
		case "LTR":
			sTextAlign = "left";
			break;
		case "RTL":
			sTextAlign = "right";
			break;
		default:
			if (oConfig.getRTL()) {
				sTextAlign = "right";
			} else {
				sTextAlign = "left";
			}
			break;
		}
		break;
	case sap.ui.core.TextAlign.Right:
		if (oConfig.getRTL()) {
			if (oTextDirection == "LTR") {
				sTextAlign = "right";
			}
		} else {
			sTextAlign = "right";
		}
		break;
	case sap.ui.core.TextAlign.Center:
		sTextAlign = "center";
		break;
	case sap.ui.core.TextAlign.Left:
		if (oConfig.getRTL()) {
			sTextAlign = "left";
		} else {
			if (oTextDirection == "RTL") {
				sTextAlign = "left";
			}
		}
		break;
	}
	return sTextAlign;
};
}; // end of sap.ui.core.Renderer
if ( !jQuery.sap.isDeclared('sap.ui.core.ScrollBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.ScrollBar.
jQuery.sap.declare("sap.ui.core.ScrollBar");



/**
 * Constructor for a new ScrollBar.
 * 
 * It accepts one JSON-like object (object literal) as parameter <code>mSettings</code> that can define values for any property, 
 * aggregation, association or event.<br/> 
 * If for a control a specific name is ambiguous (a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order.<br/> 
 * To resolve ambiguities, add an "aggregation:", "association:" or "event:" prefix to the key in the JSON object.<br/>
 * Allowed values are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>vertical : boolean</li>
 * <li>scrollPosition : int</li>
 * <li>size : sap.ui.core.CSSSize</li>
 * <li>contentSize : sap.ui.core.CSSSize</li>
 * <li>steps : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>scroll : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string}
 *        [sId] optional id for the new control; generated automatically if no id is given. 
 *        Note: this can be omitted, no matter whether <code>mSettings</code> is given or not!
 * @param {object}
 *        [mSettings] optional map/JSON-object with initial values for the new control.<br/>
 *
 * @class
 * Add your documentation for the new ScrollBar
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.core.ScrollBar = function (sId, mSettings) {
	sap.ui.core.Control.apply(this, arguments);
};

// chain the prototypes
sap.ui.core.ScrollBar.prototype = jQuery.sap.newObject(sap.ui.core.Control.prototype);

/*
 * Describe the sap.ui.core.ScrollBar. 
 * Resulting metadata can be obtained via sap.ui.core.ScrollBar.getMetadata();
 */ 
sap.ui.core.Element.defineClass("sap.ui.core.ScrollBar", {

  // ---- object ----
  baseType : "sap.ui.core.Control",
  publicMethods : [
    // properties 
    "getVertical", "setVertical", "getScrollPosition", "setScrollPosition", "getSize", "setSize", "getContentSize", "setContentSize", "getSteps", "setSteps", 
    // aggregations
    
    // associations
    
    // events
    "attachScroll", "detachScroll", 
    // methods
    "bind", "unbind", "pageUp", "pageDown"
  ],

  // ---- control specific ----
  library : "sap.ui.core",
  properties : {
    "vertical" : {name : "vertical", type : "boolean", group : "Behavior", defaultValue : true},
    "scrollPosition" : {name : "scrollPosition", type : "int", group : "Behavior", defaultValue : null},
    "size" : {name : "size", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "contentSize" : {name : "contentSize", type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
    "steps" : {name : "steps", type : "int", group : "Dimension", defaultValue : null}
  },
  
  aggregations : {},
  associations : {},
  events : {
    "scroll" : "scroll"
  }

});	

sap.ui.core.ScrollBar.M_EVENTS = {'scroll':'scroll'};


/**
 * Getter for property <code>vertical</code>.
 * Orientation. Defines if the Scrollbar is the vertical or horizontal.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getVertical = function() {
	return this.getProperty("vertical");
};

/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.setVertical = function(bVertical) {
	this.setProperty("vertical", bVertical);
	return this;
};


/**
 * Getter for property <code>scrollPosition</code>.
 * Scroll position in steps or pixels.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>scrollPosition</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getScrollPosition = function() {
	return this.getProperty("scrollPosition");
};

/**
 * Setter for property <code>scrollPosition</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iScrollPosition  new value for property <code>scrollPosition</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.setScrollPosition = function(iScrollPosition) {
	this.setProperty("scrollPosition", iScrollPosition);
	return this;
};


/**
 * Getter for property <code>size</code>.
 * Size of the Scrollbar (in pixels).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSize = function() {
	return this.getProperty("size");
};

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.setSize = function(sSize) {
	this.setProperty("size", sSize);
	return this;
};


/**
 * Getter for property <code>contentSize</code>.
 * Size of the scrollable content (in pixels).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentSize</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getContentSize = function() {
	return this.getProperty("contentSize");
};

/**
 * Setter for property <code>contentSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentSize  new value for property <code>contentSize</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.setContentSize = function(sContentSize) {
	this.setProperty("contentSize", sContentSize);
	return this;
};


/**
 * Getter for property <code>steps</code>.
 * Number of steps to scroll. Used if the size of the content is not known as the data are loaded dynamically.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>steps</code>
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSteps = function() {
	return this.getProperty("steps");
};

/**
 * Setter for property <code>steps</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iSteps  new value for property <code>steps</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.setSteps = function(iSteps) {
	this.setProperty("steps", iSteps);
	return this;
};


/**
 * Scroll event. 
 *
 * @name sap.ui.core.ScrollBar#scroll
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.ScrollBarAction} oControlEvent.getParameters.action Actions are: Click on track, button, drag of thumb, or mouse wheel click.
 * @param {boolean} oControlEvent.getParameters.forward Direction of scrolling: back (up) or forward (down).
 * @param {int} oControlEvent.getParameters.newScrollPos Current Scroll position either in pixels or in steps.
 * @param {int} oControlEvent.getParameters.oldScrollPos Old Scroll position - can be in pixels or in steps.
 * @public
 */
 
/**
 * Attach event-handler <code>fnFunction</code> to the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>
 * Scroll event. 
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the this control instance.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this control instance is used.
 *
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.attachScroll = function(oData, fnFunction, oListener) {
	this.attachEvent("scroll", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ScrollBar.prototype.detachScroll = function(fnFunction, oListener) {
	this.detachEvent("scroll", fnFunction, oListener);
	return this;	
};

/**
 * Fire event scroll to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'action' of type <code>sap.ui.core.ScrollBarAction</code> Actions are: Click on track, button, drag of thumb, or mouse wheel click.</li>
 * <li>'forward' of type <code>boolean</code> Direction of scrolling: back (up) or forward (down).</li>
 * <li>'newScrollPos' of type <code>int</code> Current Scroll position either in pixels or in steps.</li>
 * <li>'oldScrollPos' of type <code>int</code> Old Scroll position - can be in pixels or in steps.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.ScrollBar.prototype.fireScroll = function(mArguments) {
	this.fireEvent("scroll", mArguments);
	return this;
};


/**
 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
 *
 * @name sap.ui.core.ScrollBar.prototype.bind
 * @function
 * @param {string} 
 *         sOOwnerDomRef
 *         Dom ref of the control that uses the scrollbar

 * @type void
 * @public
 */


/**
 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
 *
 * @name sap.ui.core.ScrollBar.prototype.unbind
 * @function
 * @param {string} 
 *         sOOwnerDomRef
 *         Dom ref of the Control that uses the scrollbar

 * @type void
 * @public
 */


/**
 * Page Up is used to scroll one page back.
 *
 * @name sap.ui.core.ScrollBar.prototype.pageUp
 * @function

 * @type void
 * @public
 */


/**
 * Page Down is used to scroll one page forward.
 *
 * @name sap.ui.core.ScrollBar.prototype.pageDown
 * @function

 * @type void
 * @public
 */


// Start of sap/ui/core/ScrollBar.js
/**
 * This file defines behavior for the control,
 */

// =============================================================================
// BASIC CONTROL API
// =============================================================================

/**
 * Initialization of the Scrollbar control
 * @private
 */
sap.ui.core.ScrollBar.prototype.init = function(){

	// JQuery Object - Dom reference of the scroll bar
	this._$ScrollDomRef = null;

	// In pixels - exact position
	this._iOldScrollPos = 0;

	// In steps
	this._iOldStep = 0;
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.core.ScrollBar.prototype.onBeforeRendering = function() {
	jQuery.sap.byId(this.getId() + "-sb").unbind("scroll", this.onscroll);
	if (this._bStepMode) {
		this.setProperty("scrollPosition", this._iOldStep, true);
	}
	else {
		this.setProperty("scrollPosition", this._iOldScrollPos, true);
	}
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.core.ScrollBar.prototype.onAfterRendering = function () {
	 // count of steps (comes per API)
	this._iSteps = this.getSteps();

	// content size in pixel
	var sContentSize = this.getContentSize();

	// determine the mode
	this._bStepMode = !sContentSize;

	var iScrollBarSize = this.getSize();
	if(jQuery.sap.endsWith(iScrollBarSize,"px")){
		iScrollBarSize = iScrollBarSize.substr(0, iScrollBarSize.length -2);
	} else {
		iScrollBarSize = this.getVertical() ? this.$().height() : this.$().width();
	}

	var stepSize = null;

	var $ffsize = jQuery('#' + this.getId() + "-ffsize");
	if (jQuery.browser.mozilla) {
		stepSize = $ffsize.outerHeight();
	}
	$ffsize.remove();

	if  (jQuery.browser.webkit) {
		stepSize = 40 / (document.height / jQuery(document).height());
	}

	if (this.getVertical()) {
		this._iFactor = jQuery.browser.mozilla ? stepSize :	jQuery.browser.webkit ? stepSize : Math.floor(iScrollBarSize  * 0.125);
		this._iFactorPage = jQuery.browser.mozilla ? iScrollBarSize - stepSize : Math.floor(iScrollBarSize * 0.875)
	} else {
		this._iFactor = jQuery.browser.mozilla ? 10 : jQuery.browser.webkit ? stepSize :  7 ;
		this._iFactorPage = jQuery.browser.mozilla ? Math.floor(iScrollBarSize * 0.8) : jQuery.browser.webkit ? Math.floor(iScrollBarSize  * 0.875) : iScrollBarSize-14;
	}

	this._$ScrollDomRef = jQuery.sap.byId(this.getId() + "-sb");

	if (this._bStepMode) {
		if (this.getVertical()) {
			// calculate the height of the content size => scroll bar height + (steps * browser step size)
			var iContentSize = this._$ScrollDomRef.height() + this._iSteps * this._iFactor;
			// set the content size
			this._$ScrollDomRef.find("div").height(iContentSize);
		} else {
			// calculate the height of the content size => scroll bar size + (steps * browser step size)
			var iContentSize = this._$ScrollDomRef.width() + this._iSteps * this._iFactor;
			// set the content size
			this._$ScrollDomRef.find("div").width(iContentSize);
		}
	}


	this.setScrollPosition(this.getScrollPosition() ? this.getScrollPosition() : 0);

	this._$ScrollDomRef.bind("scroll", jQuery.proxy(this.onscroll, this));
};

//=============================================================================
// CONTROL EVENT HANDLING
//=============================================================================

/**
 * Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer, Safari, and Opera). 
 * Scrolling down is a positive number for detail, but a negative number for wheelDelta.
 * @param {jQuery.Event} oEvent Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer, Safari, and Opera).
 * @private
*/
sap.ui.core.ScrollBar.prototype.onmousewheel = function(oEvent)  {

   // So let's scale and make negative value for all scroll down in all browsers.
   var wheelData = oEvent.detail ? oEvent.detail : oEvent.wheelDelta * (-1) / 40;

   // find out if the user is scrolling up= back or down= forward.
   var bForward = wheelData > 0 ? true : false; 

   if (jQuery.sap.containsOrEquals(this._$ScrollDomRef[0], oEvent.target)) {
	   this._doScroll(sap.ui.core.ScrollBarAction.MouseWheel, bForward);
   } else {

	   this._bMouseWheel = true;
	   var pos = null;
	   if (this._bStepMode) {
		   pos = wheelData + this._iOldStep;
	   } else {
		   pos = wheelData * this._iFactor + this._iOldScrollPos;
	   }

	   this.setScrollPosition(pos);
   }

  // prevent the default behavior
  oEvent.preventDefault();
  oEvent.stopPropagation();
  return false;

};


/**
 * Handles the Scroll event.
 * @param {jQuery.Event} oEvent Event object
 * @private
*/
sap.ui.core.ScrollBar.prototype.onscroll = function(oEvent) {

	// Set new Scroll position
	var iScrollPos = null;
	if (this._$ScrollDomRef){
		if (this.getVertical()) {
			iScrollPos = this._$ScrollDomRef.scrollTop();
		} else {
			iScrollPos = this._$ScrollDomRef.scrollLeft();
		}
	}

	var iDelta = iScrollPos - this._iOldScrollPos;

	var bForward = iDelta > 0 ? true : false; 
	if (iDelta < 0) {
		iDelta = iDelta*(-1);
	}

	var eAction = sap.ui.core.ScrollBarAction.Drag;
	if (iDelta == this._iFactor ) {
		eAction = sap.ui.core.ScrollBarAction.Step;
	} else if (iDelta == this._iFactorPage) {
		eAction = sap.ui.core.ScrollBarAction.Page;
	} else if (this._bMouseWheel) {
		eAction = sap.ui.core.ScrollBarAction.MouseWheel;
	}

	// Proceed scroll
	this._doScroll(eAction, bForward);

	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};


//=============================================================================
// PUBLIC API METHODS
//=============================================================================

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.unbind = function (oOwnerDomRef) {
	if (oOwnerDomRef) {
		this._$OwnerDomRef = jQuery(oOwnerDomRef);
		this._$OwnerDomRef.unbind(jQuery.browser.mozilla ? "DOMMouseScroll" : "mousewheel", this.onmousewheel);
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.bind = function (oOwnerDomRef) {
	if (oOwnerDomRef) {
		this._$OwnerDomRef = jQuery(oOwnerDomRef);
		this._$OwnerDomRef.bind(jQuery.browser.mozilla ? "DOMMouseScroll" : "mousewheel", jQuery.proxy(this.onmousewheel, this));
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.pageUp = function() {
	// call on scroll
	this._doScroll(sap.ui.core.ScrollBarAction.Page, false);
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.pageDown = function() {
    // call on scroll
    this._doScroll(sap.ui.core.ScrollBarAction.Page, true);
};

//=============================================================================
// OVERRIDE OF SETTERS
//=============================================================================

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.setScrollPosition = function (scrollPosition) {

	var iCheckedSP = Math.max(scrollPosition, 0);

	if (this._bStepMode === undefined) this._bStepMode = !this.getContentSize();

	var iScrollPos = iCheckedSP;
	if (this._bStepMode) {

		// check the max possible size
		iCheckedSP = Math.min(iCheckedSP, this.getSteps());

		// STEPS MODE - Calculate the position in PX
		iScrollPos = iCheckedSP * this._iFactor;
	}

	this.setProperty("scrollPosition", iCheckedSP, true);

	if (this._$ScrollDomRef) {
		if (this.getVertical()) {
			this._$ScrollDomRef.scrollTop(iScrollPos);
		} else {
			this._$ScrollDomRef.scrollLeft(iScrollPos);
		}
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.setContentSize = function (sContentSize) {

	// Trigger the rerendering when switching the from step mode.
	this.setProperty("contentSize", sContentSize, !this._bStepMode);
	if (!this._bStepMode) {
		var $SbCnt = jQuery.sap.byId(this.getId() + "-sbcnt");
		if ($SbCnt) {
			if (this.getVertical()) {
				$SbCnt.height(sContentSize);
			} else {
				$SbCnt.width(sContentSize);
			}
		}
	}
};

//=============================================================================
// PRIVATE METHODS
//=============================================================================

/**
* Process scroll events and fire scroll event
* @param eAction Action type that can be mouse wheel, Drag, Step or Page.
* @param bForward Scroll Direction - forward or back
* @private
*/
sap.ui.core.ScrollBar.prototype._doScroll = function(eAction, bForward) {

	// Get new scroll position
	var iScrollPos = null;
	if (this._$ScrollDomRef){
		if (this.getVertical()) {
			iScrollPos = this._$ScrollDomRef.scrollTop();
		} else {
			iScrollPos = this._$ScrollDomRef.scrollLeft();
		}
	}

	if (this._bStepMode) {

		// STEP MODE 
		var iStep = parseInt(iScrollPos / this._iFactor, 10);
		var iOldStep = this._iOldStep; //or   parseInt(this._iOldScrollPos / this._iFactor, 10);

		if (iOldStep !== iStep) {

			// Set new scrollposition withouit the rerendering
			this.setProperty("scrollPosition", iStep, true);

			jQuery.sap.log.debug("-----STEPMODE-----: New Step: " + iStep + " --- Old Step: " +  iOldStep  + " --- Scroll Pos in px: " + iScrollPos + " --- Action: " + eAction + " --- Direction is forward: " + bForward);
			this.fireScroll({ action: eAction, forward: bForward, newScrollPos: iStep, oldScrollPos: iOldStep});
			this._iOldStep = iStep;

		}
	} else {

		// Set new scrollposition withouit the rerendering
		this.setProperty("scrollPosition", iScrollPos, true);

		jQuery.sap.log.debug("-----PIXELMODE-----: New ScrollPos: " + iScrollPos + " --- Old ScrollPos: " +  this._iOldScrollPos + " --- Action: " + eAction + " --- Direction is forward: " + bForward);
		this.fireScroll({ action: eAction, forward: bForward, newScrollPos: iScrollPos, oldScrollPos: this._iOldScrollPos});
	}
	this._iOldScrollPos = iScrollPos;
	this._bMouseWheel = false;

};
}; // end of sap.ui.core.ScrollBar
if ( !jQuery.sap.isDeclared('sap.ui.core.HTMLRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// A renderer for the HTML control
jQuery.sap.declare("sap.ui.core.HTMLRenderer");

sap.ui.core.HTMLRenderer = {

	/**
	 * Renders either the configured content or a dummy div that will be replaced after rendering
	 */
	render : function(oRM, oControl) {
		var oUIArea = oControl.getUIArea();

		// render an invisible, but easily identifiable placeholder for the content
		oRM.write("<div id=\"sap-ui-dummy-" + oControl.getId() + "\" style=\"display:none\">");

		// Note: we do not render the content string here, but only in onAfterRendering
		// This has the advantage that syntax errors don't affect the whole control tree
		// but only this control...

		oRM.write("</div>");
	}

};
}; // end of sap.ui.core.HTMLRenderer
if ( !jQuery.sap.isDeclared('sap.ui.core.delegate.ItemNavigation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * @namespace
 * @name sap.ui.core.delegate
 * @public
 */

// Provides class sap.ui.core.delegate.ItemNavigation
jQuery.sap.declare("sap.ui.core.delegate.ItemNavigation");

/**
 * Creates an ItemNavigation delegate that can be attached to Controls requiring
 * capabilities for keyboard navigation between items.
 *
 * @class Delegate for the ItemNavigation with the keyboard
 *
 * @author Martin Schaus
 *
 * Delegate for the ItemNavigation with
 * arrow keys over a one dimensional list of items.
 *
 * The ItemNavigation gets a main DOM reference and
 * an array of DOM references that represent the
 * DOM nodes that should be focused.
 *
 * If there are disabled nodes or not focusable nodes like separators that should be used
 * (e.g. for paging issues) in the ItemNavigation they
 * can be added to the DOM reference array as empty (false) entries. These nodes are
 * not focused by keyboard navigation but are useful because the index of the nodes in the
 * ItemNavigation is the same like in the calling control.
 *
 * If the DOM references are submitted to the ItemNavigation the TabIndexes of the
 * nodes are adjusted regarding to the Focused Index.
 *
 * Per default the ItemNavigation cycles over the items.
 * It starts again on the top if arrow down is pressed while
 * the last item has the focus. It starts at the end if arrow up or
 * left is pressed while the first item has the focus.
 * If you like to stop the navigation at the first and last item,
 * call the <code>setCycling</code> method with a value of <code>false</code>.
 *
 * It is possible to have multiple columns in the item navigation. If multiple columns
 * are used the keyboard navigation changes. Right and left will get to the next or previous
 * node. but up and down will navigate the same way but in vertical direction.
 *
 * The ItemNavigation helper also allows to set a selected index that is used
 * if the user initially enters the navigated control (for a radio group there
 * is one selected).
 *
 * This class listens to mousedown event and if it occurs on an item in the
 * list aItemDomRefs, it sets the focus to it.
 *
 * Remembering the focused item after a server roundtrip or after re-rendering is
 * up to the control that uses this delegate.
 *
 * When the <code>setPageSize</code> method is called with a value &gt; 0,
 * then page up and down events will be handled.
 *
 * The <code>BeforeFocus</code> event is fired before the actual item is focused.
 * The control can register to this event and e.g. make the item visible
 * if it is not currently visible.
 * The index of the focused Item and the triggering event are returned.
 * !!! But this is not usable in the moment because not visible items are not reached
 * !!! by keyboard navigation. It is to late to make them visible on this event or it
 * !!! is fired to late.
 * !!! This must be redesigned if the feature is really needed. (e.g. in TabStrip for
 * !!! tabs that are not visible in the moment...)
 *
 * The <code>AfterFocus</code> event is fired after the actual item is focused.
 * The control can register to this event and react on the focus change.
 * The index of the focused Item and the triggering event are returned.
 *
 * @extends sap.ui.base.EventProvider
 *
 * @param {DOMNode} oDomRef the DOM node that is focused if the item navigation is started
 * @param {array} aItemDomRefs Array of DOM nodes representing the items for the navigation
 * @param {boolean} [bNotInTabChain=false] Whether the selected element should be in the tab chain or not
 *
 * @version 1.2.0
 * @constructor
 * @public
 */
sap.ui.core.delegate.ItemNavigation = function(oDomRef, aItemDomRefs, bNotInTabChain) {

	sap.ui.base.EventProvider.apply(this);

	//the surrounding dom ref that is focused initially
	this.oDomRef = null;
	if (oDomRef) {
		this.setRootDomRef(oDomRef);
	}
	//the array of dom refs representing the items
	this.aItemDomRefs = [];
	if (aItemDomRefs) {
		this.setItemDomRefs(aItemDomRefs);
	}

	//initialize Tabindex
	this.iTabIndex = -1;
	
	//whether the active element should get a tabindex of 0 or -1
	this.iActiveTabIndex = !!bNotInTabChain ? -1 : 0;
	
	//the initial focusedindex
	this.iFocusedIndex = -1;
	//the initial selected index (if any)
	this.iSelectedIndex = -1;
	//default for cycling
	this.bCycling = true;
	//the pagesize for pageup and down events
	this.iPageSize = -1;
	//a marker to enable focusin to decide HOW the focus arrived
	this._bMouseDownHappened = false;

};
sap.ui.core.delegate.ItemNavigation.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

sap.ui.base.Object.defineClass("sap.ui.core.delegate.ItemNavigation", {
		// ---- object ----
		baseType : "sap.ui.base.EventProvider",
		publicMethods : []
	});

sap.ui.core.delegate.ItemNavigation.Events = {
		BeforeFocus:"BeforeFocus",
		AfterFocus:"AfterFocus"
};

/**
 * Sets the root reference surrounding the items
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setRootDomRef = function(oDomRef) {
	this.oDomRef = oDomRef;

	if(this.iFocusedIndex >= 0){
		jQuery(this.oDomRef).attr("tabIndex", this.iTabIndex);
	}else{
		jQuery(this.oDomRef).attr("tabIndex", this.iActiveTabIndex);
	}
	return this;
};

/**
 * Sets the item dom refs as an array the items
 * 
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setItemDomRefs = function(aItemDomRefs) {
	this.aItemDomRefs = aItemDomRefs;

	for (var i=0; i<this.aItemDomRefs.length; i++) {
		if (this.aItemDomRefs[i]) { // separators return null here
			if(i == this.iFocusedIndex){
				jQuery(this.aItemDomRefs[i]).attr("tabIndex", this.iActiveTabIndex);
			}else{
				jQuery(this.aItemDomRefs[i]).attr("tabIndex", -1);
			}
		}
	}
	return this;
};

/**
 * Destroys the delegate and releases all dom references
 */
sap.ui.core.delegate.ItemNavigation.prototype.destroy = function() {
	this.oDomRef = null;
	this.aItemDomRefs = null;
};

/**
 * Sets whether the ItemNavigation should cycle through the items
 * @param {boolean} bCycling true if cycling should be done, else false
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setCycling = function(bCycling) {
	this.bCycling = bCycling;
	return this;
};

/**
 * Sets the page size of the item navigation to allow pageup and down keys
 * @param {int} iPageSize the pagesize, needs to be at least 1
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setPageSize = function(iPageSize) {
	this.iPageSize = iPageSize;
	return this;
};

/**
 * Sets the selected index if the used control supports selection
 * @param {int} iIndex the index of the first selected item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setSelectedIndex = function(iIndex) {
	this.iSelectedIndex = iIndex;
	return this;
};

/**
 * Sets whether the items are displayed in columns
 * @param {boolean} bCycling true if cycling should be done, else false
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setColumns = function(iColumns) {
	this.iColumns = iColumns;
	return this;
};

/**
 * Sets the focus to the item with the given index
 * @param {int} iIndex the index of the item to focus
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.focusItem = function(iIndex, oEvent) {

	jQuery.sap.log.info('FocusItem: '+iIndex+' iFocusedIndex: '+this.iFocusedIndex);
	if(iIndex == this.iFocusedIndex && this.aItemDomRefs[this.iFocusedIndex] == document.activeElement){
		return; // item already focused -> nothing to do
	}
	// if there is no item to put the focus on, we don't even try it
	if(!this.aItemDomRefs[iIndex]) {
		return;
	}
	this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.BeforeFocus,{index:iIndex, event:oEvent});
	this.setFocusedIndex(iIndex);
	this.bISetFocus = true;
	jQuery.sap.focus(this.aItemDomRefs[this.iFocusedIndex]);

	this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus,{index:iIndex, event:oEvent});
};

/**
 * Sets the focused index to the given index
 * @param {int} iIndex the index of the item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining 
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setFocusedIndex = function(iIndex) {
	if (iIndex < 0) {
		iIndex = 0;
	}
	if (iIndex > this.aItemDomRefs.length-1) {
		iIndex = this.aItemDomRefs.length-1;
	}

	jQuery(this.oDomRef).attr("tabIndex", this.iTabIndex);
	if (this.iFocusedIndex !== -1 && this.aItemDomRefs.length > this.iFocusedIndex) {
		jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr("tabIndex", -1);
	}
	this.iFocusedIndex = iIndex;
	var oFocusItem = this.aItemDomRefs[this.iFocusedIndex];

	jQuery(oFocusItem).attr("tabIndex", this.iActiveTabIndex);
	
	return this;
};

/**
 * Returns the focused index
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.getFocusedIndex = function() {
	return(this.iFocusedIndex);
};

/**
 * Handles the onfocusin event
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onfocusin = function(oEvent) {
	var oSource = oEvent.target;
	if (oSource == this.oDomRef) {
		//focus occured on the main dom ref

		// if the focus came by clicking AND it did not target one of the elements, but the root element, do nothing
		// (otherwise clicking the scrollbar re-focuses the previously focused element, which causes the browser to scroll it into view)
		if (this._bMouseDownHappened) {
			return;
		}

		this.focusItem(this.iSelectedIndex != -1 ?  this.iSelectedIndex : (this.iFocusedIndex != -1 ? this.iFocusedIndex : 0), oEvent);
		//cancel the bubbling of event in this case
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}else if(!this.bISetFocus){
		//give focused item to registered application
		this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus,{index:this.iFocusedIndex, event:oEvent});
	}
	this.bISetFocus = false;
};

/**
 * Handles the onsapfocusleave event
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapfocusleave = function(oEvent) {
	if (!oEvent.relatedControlId || !jQuery.sap.containsOrEquals(this.oDomRef, sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())) {
		// entirely leaving the control handled by this ItemNavigation instance
		this.setFocusedIndex(this.iSelectedIndex != -1 ?  this.iSelectedIndex : (this.iFocusedIndex != -1 ? this.iFocusedIndex : 0));
	}
};

/**
 * Handles the onmousedown event
 * Sets the focus to the item if it occured on an item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onmousedown = function(oEvent) {
	//set the focus to the clicked element or back to the last
	var oSource = oEvent.target;
	if (jQuery.sap.containsOrEquals(this.oDomRef,oSource)) {
		//the mouse down occured inside the main dom ref
		for (var i=0;i<this.aItemDomRefs.length;i++) {
			var oItem = this.aItemDomRefs[i];
			if (jQuery.sap.containsOrEquals(oItem,oSource)) {
				//the mouse down occured inside of an item
				this.focusItem(i, oEvent);
				oEvent.preventDefault();
				oEvent.stopPropagation();
				return;
			}
		}
		if (oSource == this.oDomRef) {
			// root DomRef of item navigation has been clicked
			// focus will also come in a moment - let it know that it was the mouse who caused the focus
			this._bMouseDownHappened = true;
			var that = this;
			window.setTimeout(
				function(){
					that._bMouseDownHappened = false;
				}, 20
			);
		}
	}
};

/**
 * Handles the onsapnext event
 * Sets the focus to the next item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapnext = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}
	
	//focus the next item
	var iIndex = this.iFocusedIndex;
	var bFirstTime = true;
	if (iIndex > -1) {
		do{
			if(this.iColumns > 1 && oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN){
				if( (iIndex + this.iColumns) >= this.aItemDomRefs.length){
					// on bottom -> begin on top of next column
					if((iIndex % this.iColumns) < (this.iColumns -1)){
						iIndex = (iIndex % this.iColumns) + 1;
					}else if(this.bCycling){
						iIndex = 0;
					}
				}else{
					iIndex = iIndex + this.iColumns;
				}
			}else{
				if (iIndex == this.aItemDomRefs.length-1){
					//last item, in cycling case focus first one, if not - don't change
					if(this.bCycling){
						iIndex = 0;
					}
				}else{
					iIndex++;
				}
			}
			
			if (iIndex == this.iFocusedIndex) {
				if (bFirstTime) {
					bFirstTime = false;
				} else {
					throw new Error("ItemNavigation has no visible/existing items and is hence unable to select the next one");
				}
			}
			
		// if item is not visible or a dummy item go to the next one
		}while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css('visibility') == 'hidden');
		this.focusItem(iIndex, oEvent);
		//cancel the event otherwise the browser will scroll
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};
/**
 * Ensure the sapnext event with modifiers is also handled
 * @see #onsapnext
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapnextmodifiers = sap.ui.core.delegate.ItemNavigation.prototype.onsapnext;

/**
 * Handles the onsapprevious event
 * Sets the focus to the previous item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapprevious = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}
	
	//focus the previous item
	var iIndex = this.iFocusedIndex;
	var bFirstTime = true;
	if (iIndex > -1) {
		do{
			if(this.iColumns > 1 && oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP){
				if( (iIndex - this.iColumns) < 0){
					// on top -> begin on end of previous column
					if((iIndex % this.iColumns) > 0){
						var iCol = (iIndex % this.iColumns) - 1;
					}else if(this.bCycling){
						var iCol = this.iColumns - 1;
					}
					var iRows = Math.ceil(this.aItemDomRefs.length / this.iColumns);
					iIndex = iCol + ((iRows-1)*this.iColumns);
					if(iIndex >= this.aItemDomRefs.length){
						iIndex = iIndex - this.iColumns;
					}
				}else{
					iIndex = iIndex - this.iColumns;
				}
			}else{
				if (iIndex == 0){
					//last item, in cycling case focus first one, if not - don't change
					if(this.bCycling){
						iIndex = this.aItemDomRefs.length;
					}
				}else{
					iIndex--;
				}
			}
			
			if (iIndex == this.iFocusedIndex) {
				if (bFirstTime) {
					bFirstTime = false;
				} else {
					throw new Error("ItemNavigation has no visible/existing items and is hence unable to select the previous one");
				}
			}
			
			
		// if item is not visible or a dummy item go to the next one
		}while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css('visibility') == 'hidden');
		this.focusItem(iIndex, oEvent);
		//cancel the event otherwise the browser will scroll
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};
/**
 * Ensure the sapprevious event with modifiers is also handled
 * @see #onsapprevious
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappreviousmodifiers = sap.ui.core.delegate.ItemNavigation.prototype.onsapprevious;

/**
 * Handles the onsappageup event
 * Sets the focus to the previous page item of iPageSize>0
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappageup = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}

	if (this.iPageSize > 0) {
		var iIndex = this.iFocusedIndex;
		if (iIndex > -1) {
			iIndex = iIndex - this.iPageSize;
			if (iIndex < 0) {
				iIndex = 0;
			}
			this.focusItem(iIndex, oEvent);
		}
	}
	//cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * Handles the onsappagedown event
 * Sets the focus to the previous page item of iPageSize>0
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappagedown = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}

	if (this.iPageSize > 0) {
		var iIndex = this.iFocusedIndex;
		if (iIndex > -1) {
			iIndex = iIndex + this.iPageSize;
			if (iIndex > this.aItemDomRefs.length-1) {
				iIndex = this.aItemDomRefs.length-1;
			}
			this.focusItem(iIndex, oEvent);
		}
	}
	//cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the onsaphome event
 * Sets the focus to first visible and focusable item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsaphome = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}

	var iIndex = 0;
	while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css('visibility') == 'hidden'){
		iIndex++;
		if (iIndex == this.aItemDomRefs.length) {
			// no visible item -> no new focus
			return;
		}
	};

	this.focusItem(iIndex, oEvent);
	//cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the onsapend event
 * Sets the focus to last visible and focusable item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapend = function(oEvent) {

	if(!jQuery.sap.containsOrEquals(this.oDomRef,oEvent.target)){
		// current element is not part of the navigation content
		return;
	}

	var iIndex = this.aItemDomRefs.length-1;
	while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css('visibility') == 'hidden'){
		iIndex--;
		if (iIndex < 0) {
			// no visible item -> no new focus
			return;
		}
	};

	this.focusItem(iIndex, oEvent);
	//cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Sets tabIndex of the RootElement to 0. Is used, for example in image map for IE browser in order to avoid tabIndex -1 on image with what it would not be tabable at all.
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setTabIndex0 = function() {

	this.iTabIndex = 0;
	this.iActiveTabIndex = 0;
	
};

}; // end of sap.ui.core.delegate.ItemNavigation
if ( !jQuery.sap.isDeclared('sap.ui.qunit.qunit') ) {
  jQuery.sap.declare('sap.ui.qunit.qunit');
/*
 * QUnit - A JavaScript Unit Testing Framework
 * 
 * http://docs.jquery.com/QUnit
 *
 * Copyright (c) 2009 John Resig, Jörn Zaefferer
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 */

(function(window) {

var QUnit = {

	// call on start of module test to prepend name to all tests
	module: function(name, testEnvironment) {
		config.currentModule = name;

		synchronize(function() {
			if ( config.currentModule ) {
				QUnit.moduleDone( config.currentModule, config.moduleStats.bad, config.moduleStats.all );
			}

			config.currentModule = name;
			config.moduleTestEnvironment = testEnvironment;
			config.moduleStats = { all: 0, bad: 0 };

			QUnit.moduleStart( name, testEnvironment );
		});
	},

	asyncTest: function(testName, expected, callback) {
		if ( arguments.length === 2 ) {
			callback = expected;
			expected = 0;
		}

		QUnit.test(testName, expected, callback, true);
	},
	
	test: function(testName, expected, callback, async) {
		var name = '<span class="test-name">' + testName + '</span>', testEnvironment, testEnvironmentArg;

		if ( arguments.length === 2 ) {
			callback = expected;
			expected = null;
		}
		// is 2nd argument a testEnvironment?
		if ( expected && typeof expected === 'object') {
			testEnvironmentArg =  expected;
			expected = null;
		}

		if ( config.currentModule ) {
			name = '<span class="module-name">' + config.currentModule + "</span>: " + name;
		}

		if ( !validTest(config.currentModule + ": " + testName) ) {
			return;
		}

		synchronize(function() {

			testEnvironment = extend({
				setup: function() {},
				teardown: function() {}
			}, config.moduleTestEnvironment);
			if (testEnvironmentArg) {
				extend(testEnvironment,testEnvironmentArg);
			}

			QUnit.testStart( testName, testEnvironment );

			// allow utility functions to access the current test environment
			QUnit.current_testEnvironment = testEnvironment;
			
			config.assertions = [];
			config.expected = expected;
			
			var tests = id("qunit-tests");
			if (tests) {
				var b = document.createElement("strong");
					b.innerHTML = "Running " + name;
				var li = document.createElement("li");
					li.appendChild( b );
					li.id = "current-test-output";
				tests.appendChild( li )
			}

			try {
				if ( !config.pollution ) {
					saveGlobal();
				}

				testEnvironment.setup.call(testEnvironment);
			} catch(e) {
				QUnit.ok( false, "Setup failed on " + name + ": " + e.message );
			}
	    });
	
	    synchronize(function() {
			if ( async ) {
				QUnit.stop();
			}

			try {
				callback.call(testEnvironment);
			} catch(e) {
				fail("Test " + name + " died, exception and test follows", e, callback);
				QUnit.ok( false, "Died on test #" + (config.assertions.length + 1) + ": " + e.message );
				// else next test will carry the responsibility
				saveGlobal();

				// Restart the tests if they're blocking
				if ( config.blocking ) {
					start();
				}
			}
		});

		synchronize(function() {
			try {
				checkPollution();
				testEnvironment.teardown.call(testEnvironment);
			} catch(e) {
				QUnit.ok( false, "Teardown failed on " + name + ": " + e.message );
			}
	    });
	
	    synchronize(function() {
			try {
				QUnit.reset();
			} catch(e) {
				fail("reset() failed, following Test " + name + ", exception and reset fn follows", e, reset);
			}

			if ( config.expected && config.expected != config.assertions.length ) {
				QUnit.ok( false, "Expected " + config.expected + " assertions, but " + config.assertions.length + " were run" );
			}

			var good = 0, bad = 0,
				tests = id("qunit-tests");

			config.stats.all += config.assertions.length;
			config.moduleStats.all += config.assertions.length;

			if ( tests ) {
				var ol  = document.createElement("ol");

				for ( var i = 0; i < config.assertions.length; i++ ) {
					var assertion = config.assertions[i];

					var li = document.createElement("li");
					li.className = assertion.result ? "pass" : "fail";
					li.innerHTML = assertion.message || "(no message)";
					ol.appendChild( li );

					if ( assertion.result ) {
						good++;
					} else {
						bad++;
						config.stats.bad++;
						config.moduleStats.bad++;
					}
				}
				if (bad == 0) {
					ol.style.display = "none";
				}

				var b = document.createElement("strong");
				b.innerHTML = name + " <b style='color:black;'>(<b class='fail'>" + bad + "</b>, <b class='pass'>" + good + "</b>, " + config.assertions.length + ")</b>";
				
				addEvent(b, "click", function() {
					var next = b.nextSibling, display = next.style.display;
					next.style.display = display === "none" ? "block" : "none";
				});
				
				addEvent(b, "dblclick", function(e) {
					var target = e && e.target ? e.target : window.event.srcElement;
					if ( target.nodeName.toLowerCase() == "span" || target.nodeName.toLowerCase() == "b" ) {
						target = target.parentNode;
					}
					if ( window.location && target.nodeName.toLowerCase() === "strong" ) {
						window.location.search = "?" + encodeURIComponent(getText([target]).replace(/\(.+\)$/, "").replace(/(^\s*|\s*$)/g, ""));
					}
				});

				var li = id("current-test-output");
				li.id = "";
				li.className = bad ? "fail" : "pass";
				li.removeChild( li.firstChild );
				li.appendChild( b );
				li.appendChild( ol );

				if ( bad ) {
					var toolbar = id("qunit-testrunner-toolbar");
					if ( toolbar ) {
						toolbar.style.display = "block";
						id("qunit-filter-pass").disabled = null;
						id("qunit-filter-missing").disabled = null;
					}
				}

			} else {
				for ( var i = 0; i < config.assertions.length; i++ ) {
					if ( !config.assertions[i].result ) {
						bad++;
						config.stats.bad++;
						config.moduleStats.bad++;
					}
				}
			}

			QUnit.testDone( testName, bad, config.assertions.length );

			if ( !window.setTimeout && !config.queue.length ) {
				done();
			}
		});

		if ( window.setTimeout && !config.doneTimer ) {
			config.doneTimer = window.setTimeout(function(){
				if ( !config.queue.length ) {
					done();
				} else {
					synchronize( done );
				}
			}, 13);
		}
	},
	
	/**
	 * Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.
	 */
	expect: function(asserts) {
		config.expected = asserts;
	},

	/**
	 * Asserts true.
	 * @example ok( "asdfasdf".length > 5, "There must be at least 5 chars" );
	 */
	ok: function(a, msg) {
		msg = escapeHtml(msg);
		QUnit.log(a, msg);

		config.assertions.push({
			result: !!a,
			message: msg
		});
	},

	/**
	 * Checks that the first two arguments are equal, with an optional message.
	 * Prints out both actual and expected values.
	 *
	 * Prefered to ok( actual == expected, message )
	 *
	 * @example equal( format("Received {0} bytes.", 2), "Received 2 bytes." );
	 *
	 * @param Object actual
	 * @param Object expected
	 * @param String message (optional)
	 */
	equal: function(actual, expected, message) {
		push(expected == actual, actual, expected, message);
	},

	notEqual: function(actual, expected, message) {
		push(expected != actual, actual, expected, message);
	},
	
	deepEqual: function(actual, expected, message) {
		push(QUnit.equiv(actual, expected), actual, expected, message);
	},

	notDeepEqual: function(actual, expected, message) {
		push(!QUnit.equiv(actual, expected), actual, expected, message);
	},

	strictEqual: function(actual, expected, message) {
		push(expected === actual, actual, expected, message);
	},

	notStrictEqual: function(actual, expected, message) {
		push(expected !== actual, actual, expected, message);
	},

	raises: function(fn,  message) {
		try {
			fn();
			ok( false, message );
		}
		catch (e) {
			ok( true, message );
		}
	},

	start: function() {
		// A slight delay, to avoid any current callbacks
		if ( window.setTimeout ) {
			window.setTimeout(function() {
				if ( config.timeout ) {
					clearTimeout(config.timeout);
				}

				config.blocking = false;
				process();
			}, 13);
		} else {
			config.blocking = false;
			process();
		}
	},
	
	stop: function(timeout) {
		config.blocking = true;

		if ( timeout && window.setTimeout ) {
			config.timeout = window.setTimeout(function() {
				QUnit.ok( false, "Test timed out" );
				QUnit.start();
			}, timeout);
		}
	}

};

// Backwards compatibility, deprecated
QUnit.equals = QUnit.equal;
QUnit.same = QUnit.deepEqual;

// Maintain internal state
var config = {
	// The queue of tests to run
	queue: [],

	// block until document ready
	blocking: true
};

// Load paramaters
(function() {
	var location = window.location || { search: "", protocol: "file:" },
		GETParams = location.search.slice(1).split('&');

	for ( var i = 0; i < GETParams.length; i++ ) {
		GETParams[i] = decodeURIComponent( GETParams[i] );
		if ( GETParams[i] === "noglobals" ) {
			GETParams.splice( i, 1 );
			i--;
			config.noglobals = true;
		} else if ( GETParams[i].search('=') > -1 ) {
			GETParams.splice( i, 1 );
			i--;
		}
	}
	
	// restrict modules/tests by get parameters
	config.filters = GETParams;
	
	// Figure out if we're running the tests from a server or not
	QUnit.isLocal = !!(location.protocol === 'file:');
})();

// Expose the API as global variables, unless an 'exports'
// object exists, in that case we assume we're in CommonJS
if ( typeof exports === "undefined" || typeof require === "undefined" ) {
	extend(window, QUnit);
	window.QUnit = QUnit;
} else {
	extend(exports, QUnit);
	exports.QUnit = QUnit;
}

// define these after exposing globals to keep them in these QUnit namespace only
extend(QUnit, {
	config: config,

	// Initialize the configuration options
	init: function() {
		extend(config, {
			stats: { all: 0, bad: 0 },
			moduleStats: { all: 0, bad: 0 },
			started: +new Date,
			updateRate: 1000,
			blocking: false,
			autostart: true,
			autorun: false,
			assertions: [],
			filters: [],
			queue: []
		});

		var tests = id("qunit-tests"),
			banner = id("qunit-banner"),
			result = id("qunit-testresult");

		if ( tests ) {
			tests.innerHTML = "";
		}

		if ( banner ) {
			banner.className = "";
		}

		if ( result ) {
			result.parentNode.removeChild( result );
		}
	},
	
	/**
	 * Resets the test setup. Useful for tests that modify the DOM.
	 */
	reset: function() {
		if ( window.jQuery ) {
			jQuery("#main, #qunit-fixture").html( config.fixture );
		}
	},
	
	/**
	 * Trigger an event on an element.
	 *
	 * @example triggerEvent( document.body, "click" );
	 *
	 * @param DOMElement elem
	 * @param String type
	 */
	triggerEvent: function( elem, type, event ) {
		if ( document.createEvent ) {
			event = document.createEvent("MouseEvents");
			event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView,
				0, 0, 0, 0, 0, false, false, false, false, 0, null);
			elem.dispatchEvent( event );

		} else if ( elem.fireEvent ) {
			elem.fireEvent("on"+type);
		}
	},
	
	// Safe object type checking
	is: function( type, obj ) {
		return QUnit.objectType( obj ) == type;
	},
	
	objectType: function( obj ) {
		if (typeof obj === "undefined") {
				return "undefined";

		// consider: typeof null === object
		}
		if (obj === null) {
				return "null";
		}

		var type = Object.prototype.toString.call( obj )
			.match(/^\[object\s(.*)\]$/)[1] || '';

		switch (type) {
				case 'Number':
						if (isNaN(obj)) {
								return "nan";
						} else {
								return "number";
						}
				case 'String':
				case 'Boolean':
				case 'Array':
				case 'Date':
				case 'RegExp':
				case 'Function':
						return type.toLowerCase();
		}
		if (typeof obj === "object") {
				return "object";
		}
		return undefined;
	},
	
	// Logging callbacks
	begin: function() {},
	done: function(failures, total) {},
	log: function(result, message) {},
	testStart: function(name, testEnvironment) {},
	testDone: function(name, failures, total) {},
	moduleStart: function(name, testEnvironment) {},
	moduleDone: function(name, failures, total) {},
	// ### MODIFIED ###
	push: function (result, actual, expected, message) {}
});

if ( typeof document === "undefined" || document.readyState === "complete" ) {
	config.autorun = true;
}

addEvent(window, "load", function() {
	QUnit.begin();
	
	// Initialize the config, saving the execution queue
	var oldconfig = extend({}, config);
	QUnit.init();
	extend(config, oldconfig);

	config.blocking = false;

	var userAgent = id("qunit-userAgent");
	if ( userAgent ) {
		userAgent.innerHTML = navigator.userAgent;
	}
	
	var toolbar = id("qunit-testrunner-toolbar");
	if ( toolbar ) {
		toolbar.style.display = "none";
		
		var filter = document.createElement("input");
		filter.type = "checkbox";
		filter.id = "qunit-filter-pass";
		filter.disabled = true;
		addEvent( filter, "click", function() {
			var li = document.getElementsByTagName("li");
			for ( var i = 0; i < li.length; i++ ) {
				if ( li[i].className.indexOf("pass") > -1 ) {
					li[i].style.display = filter.checked ? "none" : "";
				}
			}
		});
		toolbar.appendChild( filter );

		var label = document.createElement("label");
		label.setAttribute("for", "qunit-filter-pass");
		label.innerHTML = "Hide passed tests";
		toolbar.appendChild( label );

		var missing = document.createElement("input");
		missing.type = "checkbox";
		missing.id = "qunit-filter-missing";
		missing.disabled = true;
		addEvent( missing, "click", function() {
			var li = document.getElementsByTagName("li");
			for ( var i = 0; i < li.length; i++ ) {
				if ( li[i].className.indexOf("fail") > -1 && li[i].innerHTML.indexOf('missing test - untested code is broken code') > - 1 ) {
					li[i].parentNode.parentNode.style.display = missing.checked ? "none" : "block";
				}
			}
		});
		toolbar.appendChild( missing );

		label = document.createElement("label");
		label.setAttribute("for", "qunit-filter-missing");
		label.innerHTML = "Hide missing tests (untested code is broken code)";
		toolbar.appendChild( label );
	}

	var main = id('main') || id('qunit-fixture');
	if ( main ) {
		config.fixture = main.innerHTML;
	}

	if (config.autostart) {
		QUnit.start();
	}
});

function done() {
	if ( config.doneTimer && window.clearTimeout ) {
		window.clearTimeout( config.doneTimer );
		config.doneTimer = null;
	}

	if ( config.queue.length ) {
		config.doneTimer = window.setTimeout(function(){
			if ( !config.queue.length ) {
				done();
			} else {
				synchronize( done );
			}
		}, 13);

		return;
	}

	config.autorun = true;

	// Log the last module results
	if ( config.currentModule ) {
		QUnit.moduleDone( config.currentModule, config.moduleStats.bad, config.moduleStats.all );
	}

	var banner = id("qunit-banner"),
		tests = id("qunit-tests"),
		html = ['Tests completed in ',
		+new Date - config.started, ' milliseconds.<br/>',
		'<span class="passed">', config.stats.all - config.stats.bad, '</span> tests of <span class="total">', config.stats.all, '</span> passed, <span class="failed">', config.stats.bad,'</span> failed.'].join('');

	if ( banner ) {
		banner.className = (config.stats.bad ? "qunit-fail" : "qunit-pass");
	}

	if ( tests ) {	
		var result = id("qunit-testresult");

		if ( !result ) {
			result = document.createElement("p");
			result.id = "qunit-testresult";
			result.className = "result";
			tests.parentNode.insertBefore( result, tests.nextSibling );
		}

		result.innerHTML = html;
	}

	QUnit.done( config.stats.bad, config.stats.all );
}

function validTest( name ) {
	var i = config.filters.length,
		run = false;

	if ( !i ) {
		return true;
	}
	
	while ( i-- ) {
		var filter = config.filters[i],
			not = filter.charAt(0) == '!';

		if ( not ) {
			filter = filter.slice(1);
		}

		if ( name.indexOf(filter) !== -1 ) {
			return !not;
		}

		if ( not ) {
			run = true;
		}
	}

	return run;
}

function escapeHtml(s) {
	s = s === null ? "" : s + "";
	return s.replace(/[\&"<>\\]/g, function(s) {
		switch(s) {
			case "&": return "&amp;";
			case "\\": return "\\\\";
			case '"': return '\"';
			case "<": return "&lt;";
			case ">": return "&gt;";
			default: return s;
		}
	});
}

function push(result, actual, expected, message) {

	// ### MODIFIED ###
	QUnit.push(result, actual, expected, message);

	message = escapeHtml(message) || (result ? "okay" : "failed");
	message = '<span class="test-message">' + message + "</span>";
	expected = escapeHtml(QUnit.jsDump.parse(expected));
	actual = escapeHtml(QUnit.jsDump.parse(actual));
	var output = message + ', expected: <span class="test-expected">' + expected + '</span>';
	if (actual != expected) {
		output += ' result: <span class="test-actual">' + actual + '</span>, diff: ' + QUnit.diff(expected, actual);
	}
	
	// ### MODIFIED ###
	// can't use ok, as that would double-escape messages
	//QUnit.log(result, output);

	config.assertions.push({
		result: !!result,
		message: output
	});
}

function synchronize( callback ) {
	config.queue.push( callback );

	if ( config.autorun && !config.blocking ) {
		process();
	}
}

function process() {
	var start = (new Date()).getTime();

	while ( config.queue.length && !config.blocking ) {
		if ( config.updateRate <= 0 || (((new Date()).getTime() - start) < config.updateRate) ) {
			config.queue.shift()();

		} else {
			setTimeout( process, 13 );
			break;
		}
	}
}

function saveGlobal() {
	config.pollution = [];
	
	if ( config.noglobals ) {
		for ( var key in window ) {
			config.pollution.push( key );
		}
	}
}

function checkPollution( name ) {
	var old = config.pollution;
	saveGlobal();
	
	var newGlobals = diff( old, config.pollution );
	if ( newGlobals.length > 0 ) {
		ok( false, "Introduced global variable(s): " + newGlobals.join(", ") );
		config.expected++;
	}

	var deletedGlobals = diff( config.pollution, old );
	if ( deletedGlobals.length > 0 ) {
		ok( false, "Deleted global variable(s): " + deletedGlobals.join(", ") );
		config.expected++;
	}
}

// returns a new Array with the elements that are in a but not in b
function diff( a, b ) {
	var result = a.slice();
	for ( var i = 0; i < result.length; i++ ) {
		for ( var j = 0; j < b.length; j++ ) {
			if ( result[i] === b[j] ) {
				result.splice(i, 1);
				i--;
				break;
			}
		}
	}
	return result;
}

function fail(message, exception, callback) {
	if ( typeof console !== "undefined" && console.error && console.warn ) {
		console.error(message);
		console.error(exception);
		console.warn(callback.toString());

	} else if ( window.opera && opera.postError ) {
		opera.postError(message, exception, callback.toString);
	}
}

function extend(a, b) {
	for ( var prop in b ) {
		a[prop] = b[prop];
	}

	return a;
}

function addEvent(elem, type, fn) {
	if ( elem.addEventListener ) {
		elem.addEventListener( type, fn, false );
	} else if ( elem.attachEvent ) {
		elem.attachEvent( "on" + type, fn );
	} else {
		fn();
	}
}

function id(name) {
	return !!(typeof document !== "undefined" && document && document.getElementById) &&
		document.getElementById( name );
}

// Test for equality any JavaScript type.
// Discussions and reference: http://philrathe.com/articles/equiv
// Test suites: http://philrathe.com/tests/equiv
// Author: Philippe Rathé <prathe@gmail.com>
QUnit.equiv = function () {

    var innerEquiv; // the real equiv function
    var callers = []; // stack to decide between skip/abort functions
    var parents = []; // stack to avoiding loops from circular referencing

    // Call the o related callback with the given arguments.
    function bindCallbacks(o, callbacks, args) {
        var prop = QUnit.objectType(o);
        if (prop) {
            if (QUnit.objectType(callbacks[prop]) === "function") {
                return callbacks[prop].apply(callbacks, args);
            } else {
                return callbacks[prop]; // or undefined
            }
        }
    }
    
    var callbacks = function () {

        // for string, boolean, number and null
        function useStrictEquality(b, a) {
            if (b instanceof a.constructor || a instanceof b.constructor) {
                // to catch short annotaion VS 'new' annotation of a declaration
                // e.g. var i = 1;
                //      var j = new Number(1);
                return a == b;
            } else {
                return a === b;
            }
        }

        return {
            "string": useStrictEquality,
            "boolean": useStrictEquality,
            "number": useStrictEquality,
            "null": useStrictEquality,
            "undefined": useStrictEquality,

            "nan": function (b) {
                return isNaN(b);
            },

            "date": function (b, a) {
                return QUnit.objectType(b) === "date" && a.valueOf() === b.valueOf();
            },

            "regexp": function (b, a) {
                return QUnit.objectType(b) === "regexp" &&
                    a.source === b.source && // the regex itself
                    a.global === b.global && // and its modifers (gmi) ...
                    a.ignoreCase === b.ignoreCase &&
                    a.multiline === b.multiline;
            },

            // - skip when the property is a method of an instance (OOP)
            // - abort otherwise,
            //   initial === would have catch identical references anyway
            "function": function () {
                var caller = callers[callers.length - 1];
                return caller !== Object &&
                        typeof caller !== "undefined";
            },

            "array": function (b, a) {
                var i, j, loop;
                var len;

                // b could be an object literal here
                if ( ! (QUnit.objectType(b) === "array")) {
                    return false;
                }   
                
                len = a.length;
                if (len !== b.length) { // safe and faster
                    return false;
                }
                
                //track reference to avoid circular references
                parents.push(a);
                for (i = 0; i < len; i++) {
                    loop = false;
                    for(j=0;j<parents.length;j++){
                        if(parents[j] === a[i]){
                            loop = true;//dont rewalk array
                        }
                    }
                    if (!loop && ! innerEquiv(a[i], b[i])) {
                        parents.pop();
                        return false;
                    }
                }
                parents.pop();
                return true;
            },

            "object": function (b, a) {
                var i, j, loop;
                var eq = true; // unless we can proove it
                var aProperties = [], bProperties = []; // collection of strings

                // comparing constructors is more strict than using instanceof
                if ( a.constructor !== b.constructor) {
                    return false;
                }

                // stack constructor before traversing properties
                callers.push(a.constructor);
                //track reference to avoid circular references
                parents.push(a);
                
                for (i in a) { // be strict: don't ensures hasOwnProperty and go deep
                    loop = false;
                    for(j=0;j<parents.length;j++){
                        if(parents[j] === a[i])
                            loop = true; //don't go down the same path twice
                    }
                    aProperties.push(i); // collect a's properties

                    if (!loop && ! innerEquiv(a[i], b[i])) {
                        eq = false;
                        break;
                    }
                }

                callers.pop(); // unstack, we are done
                parents.pop();

                for (i in b) {
                    bProperties.push(i); // collect b's properties
                }

                // Ensures identical properties name
                return eq && innerEquiv(aProperties.sort(), bProperties.sort());
            }
        };
    }();

    innerEquiv = function () { // can take multiple arguments
        var args = Array.prototype.slice.apply(arguments);
        if (args.length < 2) {
            return true; // end transition
        }

        return (function (a, b) {
            if (a === b) {
                return true; // catch the most you can
            } else if (a === null || b === null || typeof a === "undefined" || typeof b === "undefined" || QUnit.objectType(a) !== QUnit.objectType(b)) {
                return false; // don't lose time with error prone cases
            } else {
                return bindCallbacks(a, callbacks, [b, a]);
            }

        // apply transition with (1..n) arguments
        })(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length -1));
    };

    return innerEquiv;

}();

/**
 * jsDump
 * Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com
 * Licensed under BSD (http://www.opensource.org/licenses/bsd-license.php)
 * Date: 5/15/2008
 * @projectDescription Advanced and extensible data dumping for Javascript.
 * @version 1.0.0
 * @author Ariel Flesler
 * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}
 */
QUnit.jsDump = (function() {
	function quote( str ) {
		return '"' + str.toString().replace(/"/g, '\\"') + '"';
	};
	function literal( o ) {
		return o + '';	
	};
	function join( pre, arr, post ) {
		var s = jsDump.separator(),
			base = jsDump.indent(),
			inner = jsDump.indent(1);
		if ( arr.join )
			arr = arr.join( ',' + s + inner );
		if ( !arr )
			return pre + post;
		return [ pre, inner + arr, base + post ].join(s);
	};
	function array( arr ) {
		var i = arr.length,	ret = Array(i);					
		this.up();
		while ( i-- )
			ret[i] = this.parse( arr[i] );				
		this.down();
		return join( '[', ret, ']' );
	};
	
	var reName = /^function (\w+)/;
	
	var jsDump = {
		parse:function( obj, type ) { //type is used mostly internally, you can fix a (custom)type in advance
			var	parser = this.parsers[ type || this.typeOf(obj) ];
			type = typeof parser;			
			
			return type == 'function' ? parser.call( this, obj ) :
				   type == 'string' ? parser :
				   this.parsers.error;
		},
		typeOf:function( obj ) {
			var type;
			if ( obj === null ) {
				type = "null";
			} else if (typeof obj === "undefined") {
				type = "undefined";
			} else if (QUnit.is("RegExp", obj)) {
				type = "regexp";
			} else if (QUnit.is("Date", obj)) {
				type = "date";
			} else if (QUnit.is("Function", obj)) {
				type = "function";
			} else if (obj.setInterval && obj.document && !obj.nodeType) {
				type = "window";
			} else if (obj.nodeType === 9) {
				type = "document";
			} else if (obj.nodeType) {
				type = "node";
			} else if (typeof obj === "object" && typeof obj.length === "number" && obj.length >= 0) {
				type = "array";
			} else {
				type = typeof obj;
			}
			return type;
		},
		separator:function() {
			return this.multiline ?	this.HTML ? '<br />' : '\n' : this.HTML ? '&nbsp;' : ' ';
		},
		indent:function( extra ) {// extra can be a number, shortcut for increasing-calling-decreasing
			if ( !this.multiline )
				return '';
			var chr = this.indentChar;
			if ( this.HTML )
				chr = chr.replace(/\t/g,'   ').replace(/ /g,'&nbsp;');
			return Array( this._depth_ + (extra||0) ).join(chr);
		},
		up:function( a ) {
			this._depth_ += a || 1;
		},
		down:function( a ) {
			this._depth_ -= a || 1;
		},
		setParser:function( name, parser ) {
			this.parsers[name] = parser;
		},
		// The next 3 are exposed so you can use them
		quote:quote, 
		literal:literal,
		join:join,
		//
		_depth_: 1,
		// This is the list of parsers, to modify them, use jsDump.setParser
		parsers:{
			window: '[Window]',
			document: '[Document]',
			error:'[ERROR]', //when no parser is found, shouldn't happen
			unknown: '[Unknown]',
			'null':'null',
			undefined:'undefined',
			'function':function( fn ) {
				var ret = 'function',
					name = 'name' in fn ? fn.name : (reName.exec(fn)||[])[1];//functions never have name in IE
				if ( name )
					ret += ' ' + name;
				ret += '(';
				
				ret = [ ret, this.parse( fn, 'functionArgs' ), '){'].join('');
				return join( ret, this.parse(fn,'functionCode'), '}' );
			},
			array: array,
			nodelist: array,
			arguments: array,
			object:function( map ) {
				var ret = [ ];
				this.up();
				for ( var key in map )
					ret.push( this.parse(key,'key') + ': ' + this.parse(map[key]) );
				this.down();
				return join( '{', ret, '}' );
			},
			node:function( node ) {
				var open = this.HTML ? '&lt;' : '<',
					close = this.HTML ? '&gt;' : '>';
					
				var tag = node.nodeName.toLowerCase(),
					ret = open + tag;
					
				for ( var a in this.DOMAttrs ) {
					var val = node[this.DOMAttrs[a]];
					if ( val )
						ret += ' ' + a + '=' + this.parse( val, 'attribute' );
				}
				return ret + close + open + '/' + tag + close;
			},
			functionArgs:function( fn ) {//function calls it internally, it's the arguments part of the function
				var l = fn.length;
				if ( !l ) return '';				
				
				var args = Array(l);
				while ( l-- )
					args[l] = String.fromCharCode(97+l);//97 is 'a'
				return ' ' + args.join(', ') + ' ';
			},
			key:quote, //object calls it internally, the key part of an item in a map
			functionCode:'[code]', //function calls it internally, it's the content of the function
			attribute:quote, //node calls it internally, it's an html attribute value
			string:quote,
			date:quote,
			regexp:literal, //regex
			number:literal,
			'boolean':literal
		},
		DOMAttrs:{//attributes to dump from nodes, name=>realName
			id:'id',
			name:'name',
			'class':'className'
		},
		HTML:false,//if true, entities are escaped ( <, >, \t, space and \n )
		indentChar:'   ',//indentation unit
		multiline:false //if true, items in a collection, are separated by a \n, else just a space.
	};

	return jsDump;
})();

// from Sizzle.js
function getText( elems ) {
	var ret = "", elem;

	for ( var i = 0; elems[i]; i++ ) {
		elem = elems[i];

		// Get the text from text nodes and CDATA nodes
		if ( elem.nodeType === 3 || elem.nodeType === 4 ) {
			ret += elem.nodeValue;

		// Traverse everything else, except comment nodes
		} else if ( elem.nodeType !== 8 ) {
			ret += getText( elem.childNodes );
		}
	}

	return ret;
};

/*
 * Javascript Diff Algorithm
 *  By John Resig (http://ejohn.org/)
 *  Modified by Chu Alan "sprite"
 *
 * Released under the MIT license.
 *
 * More Info:
 *  http://ejohn.org/projects/javascript-diff-algorithm/
 *  
 * Usage: QUnit.diff(expected, actual)
 * 
 * QUnit.diff("the quick brown fox jumped over", "the quick fox jumps over") == "the  quick <del>brown </del> fox <del>jumped </del><ins>jumps </ins> over"
 */
QUnit.diff = (function() {
	function diff(o, n){
		var ns = new Object();
		var os = new Object();
		
		for (var i = 0; i < n.length; i++) {
			if (ns[n[i]] == null) 
				ns[n[i]] = {
					rows: new Array(),
					o: null
				};
			ns[n[i]].rows.push(i);
		}
		
		for (var i = 0; i < o.length; i++) {
			if (os[o[i]] == null) 
				os[o[i]] = {
					rows: new Array(),
					n: null
				};
			os[o[i]].rows.push(i);
		}
		
		for (var i in ns) {
			if (ns[i].rows.length == 1 && typeof(os[i]) != "undefined" && os[i].rows.length == 1) {
				n[ns[i].rows[0]] = {
					text: n[ns[i].rows[0]],
					row: os[i].rows[0]
				};
				o[os[i].rows[0]] = {
					text: o[os[i].rows[0]],
					row: ns[i].rows[0]
				};
			}
		}
		
		for (var i = 0; i < n.length - 1; i++) {
			if (n[i].text != null && n[i + 1].text == null && n[i].row + 1 < o.length && o[n[i].row + 1].text == null &&
			n[i + 1] == o[n[i].row + 1]) {
				n[i + 1] = {
					text: n[i + 1],
					row: n[i].row + 1
				};
				o[n[i].row + 1] = {
					text: o[n[i].row + 1],
					row: i + 1
				};
			}
		}
		
		for (var i = n.length - 1; i > 0; i--) {
			if (n[i].text != null && n[i - 1].text == null && n[i].row > 0 && o[n[i].row - 1].text == null &&
			n[i - 1] == o[n[i].row - 1]) {
				n[i - 1] = {
					text: n[i - 1],
					row: n[i].row - 1
				};
				o[n[i].row - 1] = {
					text: o[n[i].row - 1],
					row: i - 1
				};
			}
		}
		
		return {
			o: o,
			n: n
		};
	}
	
	return function(o, n){
		o = o.replace(/\s+$/, '');
		n = n.replace(/\s+$/, '');
		var out = diff(o == "" ? [] : o.split(/\s+/), n == "" ? [] : n.split(/\s+/));

		var str = "";
		
		var oSpace = o.match(/\s+/g);
		if (oSpace == null) {
			oSpace = [" "];
		}
		else {
			oSpace.push(" ");
		}
		var nSpace = n.match(/\s+/g);
		if (nSpace == null) {
			nSpace = [" "];
		}
		else {
			nSpace.push(" ");
		}
		
		if (out.n.length == 0) {
			for (var i = 0; i < out.o.length; i++) {
				str += '<del>' + out.o[i] + oSpace[i] + "</del>";
			}
		}
		else {
			if (out.n[0].text == null) {
				for (n = 0; n < out.o.length && out.o[n].text == null; n++) {
					str += '<del>' + out.o[n] + oSpace[n] + "</del>";
				}
			}
			
			for (var i = 0; i < out.n.length; i++) {
				if (out.n[i].text == null) {
					str += '<ins>' + out.n[i] + nSpace[i] + "</ins>";
				}
				else {
					var pre = "";
					
					for (n = out.n[i].row + 1; n < out.o.length && out.o[n].text == null; n++) {
						pre += '<del>' + out.o[n] + oSpace[n] + "</del>";
					}
					str += " " + out.n[i].text + nSpace[i] + pre;
				}
			}
		}
		
		return str;
	}
})();

})(this);

}; // end of sap.ui.qunit.qunit
if ( !jQuery.sap.isDeclared('sap.ui.qunit.QUnitUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/*global QUnit, equal, strictEqual, notStrictEqual, deepEqual, ok, start, stop, qutils:true */// declare unusual global vars for JSLint/SAPUI5 validation

/**
 * SAPUI5 test utilities
 *
 * @namespace
 * @name sap.ui.test
 * @public
 */

/**
 * The <code>sap.ui.test.qunit</code> namespace contains helper functionality for
 * QUnit tests.
 *
 * @version 1.2.0
 * @namespace
 * @name sap.ui.test.qunit
 * @public
 */
jQuery.sap.declare("sap.ui.qunit.QUnitUtils");

jQuery.sap.getObject("sap.ui.test.qunit", 0);

//TODO: Get rid of the old namespace and adapt the existing tests accordingly
qutils = sap.ui.test.qunit;


/**
 * Delays the start of the test for the specified milliseconds.
 * This function must be called before the first test function.
 *
 * @param {int} [iDelay=1000] Delay in milliseconds
 * @public
 */
sap.ui.test.qunit.delayTestStart = function(iDelay){
	if(!iDelay) {
		iDelay = 1000;
	}
	QUnit.config.autostart = false;
	setTimeout(function() {
		QUnit.start();
	}, iDelay);
};


/**
 * Programmtically triggers an event specified by its name on a specified target with some optional parameters.
 * @see http://api.jquery.com/trigger/
 *
 * @param {string} sEventName The name of the browser event (like "click")
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {object} [oParams] The parameters which should be attached to the event in JSON notation (depending on the event type).
 * @public
 */
sap.ui.test.qunit.triggerEvent = function(sEventName, oTarget, oParams) {
	var tmpEvent = jQuery.Event(sEventName);
	if(oParams){
		for(var x in oParams){
			tmpEvent[x] = oParams[x];
		}
	}

	if (typeof(oTarget) == "string") {
		oTarget = jQuery.sap.domById(oTarget);
	}
	jQuery(oTarget).trigger(tmpEvent);
};


/**
 * Programmtically triggers a touch event specified by its name.
 * The onEVENTNAME functions are called directly on the "nearest" control / element of the given target.
 *
 * @param {string} sEventName The name of the touch event (touchstart, touchmove, touchend)
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {object} [oParams] The parameters which should be attached to the event in JSON notation (depending on the event type).
 * @public
 */
sap.ui.test.qunit.triggerTouchEvent = function(sEventName, oTarget, oParams) {
	if (typeof(oTarget) == "string") {
		oTarget = jQuery.sap.domById(oTarget);
	}
	var $Target = jQuery(oTarget);
	
	var oEvent = jQuery.Event(sEventName);
	oEvent.originalEvent = {};
	oEvent.target = oTarget;
	if(oParams){
		for(var x in oParams){
			oEvent[x] = oParams[x];
			oEvent.originalEvent[x] = oParams[x];
		}
	}
	
	var oElement = $Target.control(0);
	if(oElement && oElement["on"+sEventName]){
		oElement["on"+sEventName].apply(oElement, [oEvent]);
	}
};


/**
 * Programmtically triggers a keyboard event specified by its name on a specified target.
 * @see sap.ui.test.qunit.triggerEvent
 *
 * @param {string} sEventType The name of the browser keyboard event (like "keydown")
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {string | int} sKey The keys name as defined in <code>jQuery.sap.KeyCodes</code> or its key code
 * @param {boolean} bShiftKey Indicates whether the shift key is down in addition
 * @param {boolean} bAltKey Indicates whether the alt key is down in addition
 * @param {boolean} bCtrlKey Indicates whether the ctrl key is down in addition
 * @public
 */
sap.ui.test.qunit.triggerKeyEvent = function(sEventType, oTarget, sKey, bShiftKey, bAltKey, bCtrlKey) {
	var oParams = {};
	oParams.keyCode = isNaN(sKey) ? jQuery.sap.KeyCodes[sKey] : sKey;
	oParams.which = oParams.keyCode;
	oParams.shiftKey = bShiftKey;
	oParams.altKey = bAltKey;
	oParams.metaKey = bCtrlKey;
	oParams.ctrlKey = bCtrlKey;
	sap.ui.test.qunit.triggerEvent(sEventType, oTarget, oParams);
};


/**
 * Programmtically triggers a keydown event on a specified target.
 * @see sap.ui.test.qunit.triggerKeyEvent
 *
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {string | int} sKey The keys name as defined in <code>jQuery.sap.KeyCodes</code> or its key code
 * @param {boolean} bShiftKey Indicates whether the shift key is down in addition
 * @param {boolean} bAltKey Indicates whether the alt key is down in addition
 * @param {boolean} bCtrlKey Indicates whether the ctrl key is down in addition
 * @public
 */
sap.ui.test.qunit.triggerKeydown = function(oTarget, sKey, bShiftKey, bAltKey, bCtrlKey) {
	sap.ui.test.qunit.triggerKeyEvent("keydown", oTarget, sKey, bShiftKey, bAltKey, bCtrlKey);
};


/**
 * Programmtically triggers a keydup event on a specified target.
 * @see sap.ui.test.qunit.triggerKeyEvent
 *
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {string | int} sKey The keys name as defined in <code>jQuery.sap.KeyCodes</code> or its key code
 * @param {boolean} bShiftKey Indicates whether the shift key is down in addition
 * @param {boolean} bAltKey Indicates whether the alt key is down in addition
 * @param {boolean} bCtrlKey Indicates whether the ctrl key is down in addition
 * @public
 */
sap.ui.test.qunit.triggerKeyup = function(oTarget, sKey, bShiftKey, bAltKey, bCtrlKey) {
	sap.ui.test.qunit.triggerKeyEvent("keyup", oTarget, sKey, bShiftKey, bAltKey, bCtrlKey);
};


/**
 * @deprecated Use <code>sap.ui.test.qunit.triggerKeydown</code> instead.
 * @see sap.ui.test.qunit.triggerKeydown
 * @public
 */
sap.ui.test.qunit.triggerKeyboardEvent = function(oTarget, sKey, bShiftKey, bAltKey, bCtrlKey) {
	sap.ui.test.qunit.triggerKeydown(oTarget, sKey, bShiftKey, bAltKey, bCtrlKey);
};


/**
 * Programmtically triggers a keypress event on a specified target.
 * @see sap.ui.test.qunit.triggerEvent
 *
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {string} sChar Only the first char of the string will be passed via keypress event
 * @public
 */
sap.ui.test.qunit.triggerKeypress = function(oTarget, sChar) {
	var _sChar = sChar && sChar.toUpperCase();
	if(jQuery.sap.KeyCodes[_sChar] === null) {
		ok(false, "Invalid character for triggerKeypress: '" + sChar + "'");
	}
	var _iCharCode = sChar.charCodeAt(0);

	var oParams = {};
	oParams.charCode = _iCharCode;
	oParams.which = _iCharCode;
	oParams.shiftKey = false;
	oParams.altKey = false;
	oParams.metaKey = false;
	oParams.ctrlKey = false;
	sap.ui.test.qunit.triggerEvent("keypress", oTarget, oParams);
};


/**
 * Programmtically triggers a keypress event on a specified input field target and appends the character to the value
 * of this input field.
 * @see sap.ui.test.qunit.triggerKeypress
 *
 * @param {string | DOMElement} oInput The ID of a DOM input field or a DOM input field which serves as target
 * @param {string} sChar Only the first char of the string will be passed via keypress event
 * @public
 */
sap.ui.test.qunit.triggerCharacterInput = function(oInput, sChar) {
	sap.ui.test.qunit.triggerKeypress(oInput, sChar);

	if (typeof(oInput) == "string") {
		oInput = jQuery.sap.domById(oInput);
	}
	var $Input = jQuery(oInput);
	$Input.val($Input.val() + sChar);
};


/**
 * Programmatically triggers a mouse event specified by its name on a specified target.
 * @see sap.ui.test.qunit.triggerEvent
 *
 * @param {string | DOMElement} oTarget The ID of a DOM element or a DOM element which serves as target of the event
 * @param {string} sEventType The name of the browser mouse event (like "click")
 * @param {int} iOffsetX The offset X position of the mouse pointer during the event
 * @param {int} iOffsetY The offset Y position of the mouse pointer during the event
 * @param {int} iPageX The page X position of the mouse pointer during the event
 * @param {int} iPageY The page Y position of the mouse pointer during the event
 * @public
 */
sap.ui.test.qunit.triggerMouseEvent = function(oTarget, sEventType, iOffsetX, iOffsetY, iPageX, iPageY) {
	var oParams = {};
	oParams.offsetX = iOffsetX;
	oParams.offsetY = iOffsetY;
	oParams.pageX = iPageX;
	oParams.pageY = iPageY;
	sap.ui.test.qunit.triggerEvent(sEventType, oTarget, oParams);
};


sap.ui.test.qunit.jsunitSubstitutes = function() {

	// checks whether o might cause endless recursion when used as value in QUnit asserts
	function _critical(o) {
		return o instanceof sap.ui.base.Object || o instanceof sap.ui.base.Metadata;
	}
	
	// A strictEqual impl which is safe for UI5 controls and metadata (original impl. resulted in endless recursion)
	function _strictEqual(a,e,msg) {
		if ( _critical(a) || _critical(e) ) {
			QUnit.ok(a === e, msg);
		} else {
			QUnit.strictEqual(a,e,msg);
		}
	}
	// A notStrictEqual impl which is safe for UI5 controls and metadata (original impl. resulted in endless recursion)
	function _notStrictEqual(a,e,msg) {
		if ( _critical(a) || _critical(e) ) {
			QUnit.ok(a !== e, msg);
		} else {
			QUnit.notStrictEqual(a,e,msg);
		}
	}
	
	window.assert = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } if ( typeof v !== "boolean" ) { throw Error("Bad argument to assert(boolean)"); } ok(v, msg);	};
	window.assertTrue = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } if ( typeof v !== "boolean" ) { throw Error("Bad argument to assertTrue(boolean)"); } ok(v, msg); };
	window.assertFalse = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } if ( typeof v !== "boolean" ) { throw Error("'Bad argument to assertFalse(boolean)'"); } ok(!v, msg); };
	window.assertNull = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } _strictEqual(v,  null, msg); };
	window.assertNotNull = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } _notStrictEqual(v, null, msg); };
	window.assertUndefined = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } _strictEqual(v, undefined, msg); };
	window.assertNotUndefined = function(msg,v) { if ( arguments.length === 1 ) { v = msg; msg = undefined; } _notStrictEqual(v, undefined, msg); };
	window.assertEquals = function(msg,e,a) { if ( arguments.length === 2 ) { a = e; e = msg; msg = undefined; } _strictEqual(a,e, msg); };
	window.assertNotEquals = function(msg,e,a) { if ( arguments.length === 2 ) { a = e; e = msg; msg = undefined; } _notStrictEqual(a,e, msg); };
	// sorry, no replacement for that in QUnit
	window.inform = function() {};
	window.debug = function() {};
};

//************************************
//TODO: Check JS Doc starting here -> describe and check visibility for stuff in namespace sap.ui.test.qunit


(function() {

	/*
	 * wrapper around window.console
	 */
	function info(msg) {
		if ( window.console ) {
			console.info(msg);
		}
	}

	var M_DEFAULT_TEST_VALUES = {
		"boolean" : [false, true],
		"int" : [0, 1, 5, 10, 100],
		"float" : [NaN, 0.0, 0.01, 3.14, 97.7],
		"string" : ["", "some", "very long otherwise not normal and so on whatever", "<" + "script>alert('XSS attack!');</" + "script>"]
	};

	var mDefaultTestValues = jQuery.sap.newObject(M_DEFAULT_TEST_VALUES);

	function ensureArray(o) {
		return o && !(o instanceof Array) ? [o] : o;
	}

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.resetDefaultTestValues = function(sType) {
		if ( typeof sType === "string" ) {
			delete mDefaultTestValues[sType];
		} else {
			mDefaultTestValues = jQuery.sap.newObject(M_DEFAULT_TEST_VALUES);
		}
	};

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.setDefaultTestValues = function(sType, aValues) {
		if ( typeof sType === "string" ) {
			mDefaultTestValues[sType] = ensureArray(aValues);
		} else if ( typeof sType === "object" ) {
			jQuery.extend(mDefaultTestValues, sType);
		}
	};

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.createSettingsDomain = function(oClass, oPredefinedValues) {

		function createValues(sType) {
			if ( mDefaultTestValues[sType] ) {
				return mDefaultTestValues[sType];
			}

			try {
				jQuery.sap.require(sType);
			} catch(e) {
			}
			var oType = jQuery.sap.getObject(sType);
			if ( oType instanceof sap.ui.base.DataType ) {
				; // ???
			} else {
				var r=[];
				for(var n in oType) {
					r.push(oType[n]);
				}
				mDefaultTestValues[sType] = r;
				return r;
			}
			return [];

		}

		var oClass = new oClass().getMetadata().getClass(); // resolves proxy
		var oPredefinedValues = oPredefinedValues || {};
		var result = {};
		var oProps = oClass.getMetadata().getAllProperties();
		for (var name in oProps) {
			result[name] = ensureArray(oPredefinedValues[name]) || createValues(oProps[name].type);
		}
		/*
		var oAggr = oClass.getMetadata().getAllAggregations();
		for (var name in oAggr) {
			if ( oAggr[name].altTypes && oAggr[name].altTypes[0] === 'string' ) {
				result[name] = ensureArray(oPredefinedValues[name]) || createValues(oAggr[name].altTypes[0].type);
			}
		}
		*/
		return result;
	};

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.genericTest = function(oClass, sUIArea, oTestConfig) {
	
		if ( oTestConfig && oTestConfig.skip === true ) {
			return;
		}
	
		var oClass = new oClass().getMetadata().getClass(); // resolves proxy
		var oTestConfig = oTestConfig || {};
		var iTestCount  = oTestConfig.testCount || 100;
		var oTestValues = sap.ui.test.qunit.createSettingsDomain(oClass, oTestConfig.allPairTestValues || {});
	
		info("domain");
		for (var name in oTestValues) {
			var l=oTestValues[name].length;
			var s=[];
			s.push("  ", name, ":", "[");
			for(var i=0; i<l; i++) {
				s.push(oTestValues[name][i], ",");
			}
			s.push("]");
			info(s.join(""));
		}
	
		function method(sPrefix, sName) {
			return sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
		}
	
		function getActualSettings(oControl, oSettings) {
			var oActualSettings = {};
			for (var name in oSettings) {
				if ( oControl[method("get", name)] ) {
				  oActualSettings[name] = oControl[method("get", name)]();
				}
			}
			return oActualSettings;
		}
	
		var oControl;
		var oSettings;
	
		// generate "AllPairs" test cases
		var apg = new sap.ui.test.qunit.AllPairsGenerator(oTestValues);
		var aTestCases=[];
		while( apg.hasNext() ) {
			aTestCases.push(apg.next());
		}
	
		var index=0;
		function testNextCombination() {
			info("testNextCombination(" + index + ")");
			if ( index >= aTestCases.length ) {
				// continue with other tests
				info("last combination -> done");
				start();
				return;
			}
	
			var oSettings = aTestCases[index];
	
			// constructor test
			oControl = new oClass(oSettings);
			var oActualSettings = getActualSettings(oControl, oSettings);
			deepEqual(oActualSettings, oSettings, "settings");
	
			/*
			// individual setters
			oControl = new oClass();
			for(var name in oSettings) {
				var r = oControl[method("set", name)](oSettings[name]);
				equal(oControl[method("get", name)](), oSettings[name], "setter for property '" + name + "'");
				ok(r == oControl, "setter for property '" + name + "' supports chaining");
			}
			*/
	
			// rendering test
			oControl.placeAt(sUIArea);
			info("before explicit rerender");
			oControl.getUIArea().rerender();
			info("after explicit rerender");
	
			info("info");
			setTimeout(continueAfterRendering, 0);
	
		}
	
		stop(15000);
		testNextCombination();
	
		function continueAfterRendering() {
			info("continueAfterRendering(" + index + ")");
			var oSettings = aTestCases[aTestCases.length-index-1];
			for(var name in oSettings) {
				var r = oControl[method("set", name)](oSettings[name]);
				equal(oControl[method("get", name)](), oSettings[name], "setter for property '" + name + "'");
				ok(r == oControl, "setter for property '" + name + "' supports chaining (after rendering)");
			}
			index = index+1;
			setTimeout(testNextCombination, 0);
		}
	
	};

	var lastErrorHandler = undefined;

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.suppressErrors = function(bSuppress) {
		if ( bSuppress !== false ) {
			info("suppress global errors");
			lastErrorHandler = window.onerror;
//			window.onerror = function(msg) {
//				info("global error handler: " + msg);
//				return true;
//			};
		} else {
			info("reenable global errors");
//			window.onerror = lastErrorHandler;
			lastErrorHandler = undefined;
		}
	};

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.RandomPairsGenerator = function(oDomain) {
	
		var iCombinations = 0;
		for (var name in oDomain) {
			if ( oDomain[name] && !(oDomain[name] instanceof Array) ) {
				oDomain[name] = [ oDomain[name] ];
			}
			if ( oDomain[name] && oDomain[name].length > 0 ) {
				if ( iCombinations == 0 ) {
					iCombinations = oDomain[name].length;
				} else {
					iCombinations = iCombinations * oDomain[name].length;
				}
			}
		}
	
		function createSettings(iCombination) {
			var oSettings = {};
			for (var name in oDomain) {
				var l=oDomain[name] && oDomain[name].length;
				if ( l == 1 ) {
					oSettings[name] = oDomain[name][0];
					//info("  " + name + ":" + "0");
				} else if ( l > 1 ) {
					var c = iCombination % l;
					oSettings[name] = oDomain[name][c];
					iCombination = (iCombination - c) / l;
				}
			}
			return oSettings;
		}
	
		this.hasNext = function() {
			return true;
		};
	
		this.next = function() {
			return createSettings(Math.floor(100 * iCombinations * Math.random()));
		};
	
	};

	/**
	 * @TODO DESCRIBE AND CHECK VISIBILITY!
	 * @private
	 */
	sap.ui.test.qunit.AllPairsGenerator = function (oDomain) {
	
		// more suitable access to the params
		var params=[];
		for(var name in oDomain) {
			params.push({
				name : name,
				n : oDomain[name].length,
				values : oDomain[name]
			});
		}
		var N = params.length;
	
		/**
		 * Number of occurrences for each possible property value pair.
		 * A value of 0 indicates that there is no test case yet, so the pair must
		 * be incorporated in another test case. A value of 1 is the optimum,
		 * values greater than 1 indicate that the pair has been used (too) often.
		 *
		 * The algorithm of this generator guarantees to create values > 0 for all
		 * pairs but still tries to minimize the values.  It does not guarantee
		 * to find the most optimal solution.
		 *
		 * Let a and b be two different properties from oDomain (e.g. a='text' and b='visible'),
		 * with (WOLG) params.indexOf(a) < params.indexOf(b). Let further a have
		 * n values (== oDomain[a].length) and b have m values (== oDomain[b].length).
		 *
		 * Then the occurrences counters for the n*m possible value combinations
		 * (pairs) of a and b are stored in a contiguous segment of the occurs[] array.
		 *
		 * The segments for all combinations of a and b themselves are ordered
		 * first by a, then by b (same params.indexOf() ordering applies).
		 *
		 * The position of the segment for a given combination (a,b) could be calculated
		 * as the sum of the size of all preceding segments, but this would be too
		 * expensive (access to the occurs[] is used very often and therefore must be efficient).
		 * Therefore, during initialization, the offset for each segment is stored in
		 * an additional array abOffset[]. To further simplify access, that array uses N*N
		 * space, but only the entries params.indexOf(a) * N + params.indexOf(b) (with
		 * params.indexOf(a) < params.indexOf(b)) are filled.
		 */
		var occurs=[];
	
		/**
		 * Offset for a given combination of properties (a,b) into the occurs[]
		 * array. For a details description see the occurs[] array.
		 */
		var abOffset=[];
	
		/**
		 * Number of pairs for which occurs[(a,b)] == 0.
		 *
		 * Note: during initialization, this variable also represents the number
		 * of created entries in the occurs[] array. As all entries are created with
		 * a value of 0, the definiton above still holds.
		 */
		var nPairs=0;
	
		/*
		 * Initialization. Loops over all a,b combinations with (a<b)
		 * and creates the initial occurs[] and abOccurs[] values.
		 */
		for(var a=0; a<N-1; a++) {
			var pa = params[a];
			for(var b=a+1; b<N; b++) {
				var pb = params[b];
				// remember offset into occurs array
				abOffset[a * N + b] = nPairs;
				// set occurrences for all n*m values to 0
				for(var i=pa.n*pb.n; i>0; i--) {
					occurs[nPairs++] = 0;
				}
			}
		}
	
		/**
		 * Helper that calculates the offset into the occurs array
		 * for a given combination of a,b and the values of a and b.
		 */
		function offset(a,b,va,vb) {
			return abOffset[a*N+b]+va*params[b].n+vb;
		}
	
		function findTestCase() {
	
			var value_index = [];
	
			/**
			 * Calculates a cost function for the case where for
			 * property 'a' the value 'va' is taken.
			 *
			 * The calculated cost consists of two informations:
			 * - pairs : number of newly addressed unique pairs
			 * - redundant : number of redundantly added pairs
			 *
			 * @param a
			 * @param va
			 * @return
			 */
			function calcCost(a, va) {
				var score={ va: va, pairs:0, redundant:0 };
				for(var b=0; b<N; b++) {
					var count;
					if ( b < a ) {
						count = occurs[offset(b,a,value_index[b],va)];
					} else if ( b > a ) {
						var i=offset(a,b,va,0),
							count = occurs[i],
							end=i+params[b].n;
						for(;count > 0 && i<end;i++) {
							if ( occurs[i] < count ) {
								count = occurs[i];
							}
						}
					}
					score.redundant = score.redundant + count;
					if ( count == 0 ) {
						score.pairs++;
					}
				}
				return score;
			}
	
			// loop over all properties and find the "best" value
			for(var a=0; a<N; a++) {
				var pa=params[a];
				// measure the quality of the first possible value
				var bestCost = calcCost(a, 0);
				for(var va=1; va<pa.n; va++) {
					// measure the quality of the new combination
					var cost = calcCost(a, va);
					// a new combination is preferred if it either incorporates more unique pairs or if
					// it incorporates the same number of pairs but with less redundant combinations
					if ( cost.pairs > bestCost.pairs || (cost.pairs == bestCost.pairs && cost.redundant < bestCost.redundant) ) {
						bestCost = cost;
					}
				}
	
				value_index[a] = bestCost.va;
			}
	
			return value_index;
		}
	
		/**
		 * Iff there are still unused pairs, then there will be another test case.
		 * @return whether another test cases is needed.
		 * @private
		 */
		this.hasNext = function() {
			return nPairs>0;
		};
	
		var lastTest = undefined;
		var lastPairs = -1;
	
		/**
		 *
		 * @return
		 * @private
		 */
		this.next = function() {
			lastTest = findTestCase();
			lastPairs=0;
	
			var test={};
			for(var a=0; a<N; a++) {
				for(var b=a+1; b<N; b++) {
					var i=offset(a,b,lastTest[a],lastTest[b]);
					if ( occurs[i] == 0 ) {
						nPairs--;
						lastPairs++;
					}
					occurs[i]++;
				}
				test[params[a].name] = params[a].values[lastTest[a]];
			}
	
			return test;
		};
	
		this.lastPairs = function() { return lastPairs; };
	};
	
}());
}; // end of sap.ui.qunit.QUnitUtils
if ( !jQuery.sap.isDeclared('sap.ui.debug.TechnicalInfo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides a popup with technical informations about the running SAPUI5 core
jQuery.sap.declare("sap.ui.debug.TechnicalInfo");





(function() {

	var DBG_MODE_URL = "sap-ui-xx-debug-mode";
	
	sap.ui.debug.TechnicalInfo = {
	
		open : function(callback) {
	
			function serialize(o) {
				if (o && window.JSON) {
					return window.JSON.stringify(o);
				}
				if ( o === "" ) {
					return '""';
				}
				return "" + o + (o ? "???" : "");
			}
	
			function list(o,prefix) {
				prefix = prefix||'';
				if ( !prefix ) {
					html.push("<table border='0' cellspacing='0' cellpadding='0'>");
				}
				jQuery.each(o, function(i,v) {
					if ( !v || typeof v === 'string' || typeof v === 'number' || v instanceof Date ) {
					  html.push("<tr><td>", prefix, "<b>", jQuery.sap.escapeHTML(serialize(i)), "</b></td><td>", jQuery.sap.escapeHTML(serialize(v)), "</td></tr>");
					} else {
					  html.push("<tr><td>", prefix, "<b>", jQuery.sap.escapeHTML(serialize(i)), "</b></td><td></td></tr>");
					  list(v, prefix + "&nbsp;&nbsp;");
					}
				});
				if ( !prefix) {
					html.push("</table>");
				}
			}
	
			var ojQSData = this._ojQSData = callback() || {};
	
			var bCT=false,bLV=false,bEmbedded=true;
			if ( jQuery.sap.getObject("sap.ui.debug.DebugEnv") ) {
				bCT = sap.ui.debug.DebugEnv.getInstance().isControlTreeShown();
				bLV = sap.ui.debug.DebugEnv.getInstance().isTraceWindowShown();
				bEmbedded = sap.ui.debug.DebugEnv.getInstance().isRunningEmbedded();
			}
			var sDCUrl = "/sapui5-internal/download/index.jsp";
			var bDC = jQuery.sap.syncHead(sDCUrl);
			var sDbgModeUrl = jQuery.sap.getModulePath(DBG_MODE_URL);
			var bUseDbgSrc = "true" === jQuery.sap.syncGetText(sDbgModeUrl, {}, "false"); // does not differentiate between "no debug mode" and "no support for debug mode"
			var sWeinreId = jQuery.sap.uid();
			var sWeinreClientUrl = sap.ui.getCore().getConfiguration().getWeinreServer() + "/client/#" + sWeinreId;
			{
				var html=[];
				html.push("<div id='sap-ui-techinfo' class='sapUiTInf sapUiDlg' style='width:640px; position: relative;'>");
				html.push("<table border='0' cellpadding='3'>");
				html.push("<tr><td align='right' valign='top'><b>SAPUI5 Version</b></td><td>", sap.ui.version, " (build at ", sap.ui.buildinfo.buildtime, ", last change ", sap.ui.buildinfo.lastchange, ")</td></tr>");
				html.push("<tr><td align='right' valign='top'><b>User Agent</b></td><td>", navigator.userAgent, (document.documentMode? ", Document Mode '" + document.documentMode + "'" : ""), "</td></tr>");
				html.push("<tr><td align='right' valign='top'><b>Configuration</b></td><td class='sapUiTInfCfg'>");
				list(ojQSData.config);
				html.push("</td></tr>");
				html.push("<tr><td align='right' valign='top'><b>Loaded Modules</b></td><td><div id='sap-ui-techinfo-modules' class='sapUiTInfMList'>");
				this._renderModules(html, 20);
				html.push("</div></td></tr>");
				if ( bDC ) {
					html.push("<tr><td></td><td><a id=\"sap-ui-techinfo-customModule\" href=\"" + sDCUrl + "\">Create Custom Bootstrap Module</a></td></tr>");
				}
				html.push("<tr><td align='right' valign='top' rowSpan='3'><b>Debug Tools</b></td>", "<td><input id='sap-ui-techinfo-useDbgSources' type='checkbox'",
						bUseDbgSrc?" checked='checked'":"",
						"><span ",
						">Use Debug Sources (clear cache + reload)</span></input></td></tr>");
				html.push("<tr><td><input id='sap-ui-techinfo-showControls' type='checkbox'",
						bCT?" checked='checked'":"",
						bEmbedded?"":" readonly='readonly'",
						"><span ",
						bEmbedded?"":" style='color:grey'",
						">Show UIAreas, Controls and Properties</span></input></td></tr>");
				html.push("<tr><td><input id='sap-ui-techinfo-showLogViewer' type='checkbox' ",
						bLV?" checked='checked'":"",
						bEmbedded?"":" readonly='readonly' style='color:grey'",
						"><span ",
						bEmbedded?"":" style='color:grey'",
						">Show Log Viewer</span></input></td></tr>");
				html.push("<tr><td colspan='2' align='center' valign='bottom' height='40'><button id='sap-ui-techinfo-close' class='sapUiBtn sapUiBtnS sapUiBtnNorm sapUiBtnStd'>Close</button></td></tr>");
				html.push("</table>");
				if ( bDC ) {
					html.push("<form id=\"sap-ui-techinfo-submit\" target=\"_blank\" method=\"post\" action=\"" + sDCUrl + "\">");
					html.push("<input type=\"hidden\" name=\"modules\"/>");
					html.push("</form>");
				}
				html.push("<div style='position: absolute; bottom: 5px; right: 5px;'>");
				html.push("<canvas id='sap-ui-techinfo-qrcode'></canvas>");
				html.push("<br><a id='sap-ui-techinfo-weinre' href=\"" + sWeinreClientUrl + "\" target=\"_blank\">Remote Web Inspector</a>");
				html.push("</div></div>");
				this._$Ref = jQuery(html.join(""));
				this._$Ref.find('#sap-ui-techinfo-useDbgSources').click(jQuery.proxy(this.onUseDbgSources, this));
				this._$Ref.find('#sap-ui-techinfo-showControls').click(jQuery.proxy(this.onShowControls, this));
				this._$Ref.find('#sap-ui-techinfo-showLogViewer').click(jQuery.proxy(this.onShowLogViewer, this));
				this._$Ref.find('#sap-ui-techinfo-more').click(jQuery.proxy(this.onShowAllModules, this));
				this._$Ref.find('#sap-ui-techinfo-close').click(jQuery.proxy(this.close, this));
				this._$Ref.find('#sap-ui-techinfo-customModule').click(jQuery.proxy(this.onCreateCustomModule, this));
				this._$Ref.find('#sap-ui-techinfo-weinre').click(jQuery.proxy(this.onOpenWebInspector, this));
			}
			this._oPopup = new sap.ui.core.Popup(this._$Ref.get(0), /*modal*/true, /*shadow*/true, /*autoClose*/false);
			var bValidBrowser = !jQuery.browser.msie || jQuery.browser.msie && jQuery.browser.version > 8;
			var bDevAvailable = bValidBrowser && jQuery.sap.sjax({type: "HEAD", url: sap.ui.resource("sap.ui.dev", "library.js")}).success;
			if (bDevAvailable) {
				var that = this;
				this._oPopup.attachOpened(function(oEvent) {
					var sAbsUrl = window.location.href,
						sWeinreTargetUrl = sAbsUrl + (sAbsUrl.indexOf("?") > 0 ? "&" : "?") + "sap-ui-weinreId=" + sWeinreId; 
					jQuery.sap.require("sap.ui.dev.qrcode.QRCode");
					if (sap.ui.dev.qrcode.QRCode._renderQRCode) {
						sap.ui.dev.qrcode.QRCode._renderQRCode(jQuery.sap.domById("sap-ui-techinfo-qrcode"), sWeinreTargetUrl);
					}
				});
			}
			this._oPopup.open(400);
		},
	
		close : function() {
			this._oPopup.destroy();
			this._oPopup = undefined;
			this._$Ref.remove();
			this._$Ref = undefined;
			this._ojQSData = undefined;
		},
	
		_renderModules : function(html, iLimit) {
			var modules = this._ojQSData.modules;
			var modnames=[]; jQuery.each(modules, function(i,v) { modnames.push(i); }); modnames.sort();
			var iMore = (iLimit && modnames.length > iLimit) ? modnames.length - iLimit : 0;
			if ( iMore ) {
				modnames.sort(function(a,b) {
					if ( a === b ) {
						return 0;
					}
					var ia = modules[a].url?1:0;
					var ib = modules[b].url?1:0;
					if ( ia != ib ) {
						return ib-ia;
					}
					return a < b ? -1 : 1;
				});
				modnames = modnames.slice(0, iLimit);
			}
			jQuery.each(modnames, function(i,v) {
				var mod = modules[v];
				html.push("<span",
						" title='", mod.url ? jQuery.sap.escapeHTML(mod.url): ("embedded in " + mod.parent), "'",
						" class='",
						  mod.url ? "" : " sapUiTInfMEmbd",
						  mod.state!=="ready" ? " sapUiTInfMFail":"",
						"'>", v, "</span>, ");
			});
			if ( iMore ) {
				html.push("<span id='sap-ui-techinfo-more' title='Show all modules' class='sapUiTInfMMore'>...(" + iMore + " more)</span>");
			};
		},
	
		onShowAllModules : function(e) {
			var html = [];
			this._renderModules(html, 0);
			this._$Ref.find("[id=sap-ui-techinfo-modules]").html(html.join(""));
		},
	
		onCreateCustomModule : function(e) {
			e.preventDefault();
			e.stopPropagation();
			var modnames=[]; jQuery.each(this._ojQSData.modules, function(i,v) { modnames.push(i); }); modnames.sort();
			jQuery("input[name='modules']", this._$Ref).attr("value", modnames.join(","));
			jQuery("form", this._$Ref)[0].submit();
		},
	
		ensureDebugEnv : function(bShowControls) {
			if ( !jQuery.sap.getObject("sap.ui.debug.DebugEnv") ) {
				try {
					jQuery.sap.require("sap-ui-debug");
					// when sap-ui-debug is loaded, control tree and property list are shown by defualt
					// so disable them again if they are not desired
					if ( !bShowControls ) {
						sap.ui.debug.DebugEnv.getInstance().hideControlTree();
						sap.ui.debug.DebugEnv.getInstance().hidePropertyList();
					}
				} catch(e) {
					// failed to load debug env (not installed?)
					return false;
				}
			}
			return true;
		},
	
		onShowControls : function(e) {
			if ( e.target.readOnly ) {
				e.preventDefault();
				e.stopPropagation();
				return;
			}
			if ( this.ensureDebugEnv(true) ) {
				if ( e.target.checked ) {
					sap.ui.debug.DebugEnv.getInstance().showControlTree();
					sap.ui.debug.DebugEnv.getInstance().showPropertyList();
				} else {
					sap.ui.debug.DebugEnv.getInstance().hideControlTree();
					sap.ui.debug.DebugEnv.getInstance().hidePropertyList();
				}
			}
		},
	
		onShowLogViewer : function(e) {
			if ( e.target.readOnly ) {
				e.preventDefault();
				e.stopPropagation();
				return;
			}
			if ( this.ensureDebugEnv(false) ) {
				if ( e.target.checked ) {
					sap.ui.debug.DebugEnv.getInstance().showTraceWindow();
				} else {
					sap.ui.debug.DebugEnv.getInstance().hideTraceWindow();
				}
			}
		},
	
		onUseDbgSources : function(e) {
			var sDbgModeUrl = jQuery.sap.getModulePath(DBG_MODE_URL),
				bUsesDbgSrc = "true" === jQuery.sap.syncGetText(sDbgModeUrl, { mode : e.target.checked }, "false");
			
			alert("Usage of debug sources is " + (bUsesDbgSrc ? "on" : "off") + " now.\nFor the change to take effect, you need to clear the browser cache and reload the page");
		},
		
		onOpenWebInspector: function(e) {
			if (!sap.ui.getCore().getConfiguration().getWeinreServer()) {
				alert("Cannot start Web Inspector - WEINRE server is not configured.");
				e.preventDefault();
			}
			else if (!jQuery.browser.webkit) {
				alert("Cannot start Web Inspector - WEINRE only runs on WebKit, please use Chrome or Safari.");
				e.preventDefault();
			}
		}
	
	
	};

}());

}; // end of sap.ui.debug.TechnicalInfo
if ( !jQuery.sap.isDeclared('sap.ui.jsunit.JsUnitHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides helper functions for unit tests
jQuery.sap.declare("sap.ui.jsunit.JsUnitHelper");

/*global warn, fail *///declare unusual global vars for JSLint/SAPUI5 validation

sap.ui.jsunit.JsUnitHelper = {
};

sap.ui.jsunit.JsUnitHelper.EventTypes = {MouseEvent:"MouseEvents",KeyEvent:"KeyEvents",HTMLEvent:"HTMLEvents"};

/**
 * @public
 */
sap.ui.jsunit.JsUnitHelper.Events = {click:{name:"click",type:sap.ui.jsunit.JsUnitHelper.EventTypes.MouseEvent},
		mouseover:{name:"mouseover",type:sap.ui.jsunit.JsUnitHelper.EventTypes.MouseEvent},
		mouseout:{name:"mouseout",type:sap.ui.jsunit.JsUnitHelper.EventTypes.MouseEvent},
		keyup:{name:"keyup",type:sap.ui.jsunit.JsUnitHelper.EventTypes.KeyEvent},
		keydown:{name:"keydown",type:sap.ui.jsunit.JsUnitHelper.EventTypes.KeyEvent},
		blur:{name:"blur",type:sap.ui.jsunit.JsUnitHelper.EventTypes.HTMLEvent},
		focusout:{name:"focusout",type:sap.ui.jsunit.JsUnitHelper.EventTypes.HTMLEvent}};

/**
 * @param {object} oDomRef the dom ref on which the event should be called
 * @param {sap.ui.jsunit.JsUnitHelper.Events} oEvent the event that should be raised
 * @param {object | map} mParams a map of parameters that should be passed along with the event (not yet fully supported)
 * @public
 */
sap.ui.jsunit.JsUnitHelper.fireEventOnDomRef = function(oDomRef, oEvent, mParams) {
	//Generate an artificial click event on "test".
	if(!oDomRef) {
		warn("Cannot raise event on null dom ref");
		return;
	}

	var _initEvent = function (oEvent, mParams){
		if(oEvent.setAttribute) {
			for(var p in mParams) {
				oEvent.setAttribute(p, mParams[p]);
			}
		} //else { // FF... This is proprietary for FF!!! It simply cannot be done this way :(
		//}
	};

	var docEvent;
	if(document.createEvent) {	// FireFox, Webkit
		switch(oEvent.type) {
			case sap.ui.jsunit.JsUnitHelper.EventTypes.KeyEvent:

				if(!mParams) {
					mParams = {
						ctrlKey : false,
						altKey : false,
						shiftKey : false,
						metaKey : false,
						keyCode : 0
					};
				}

				try {
					docEvent = document.createEvent(/**string eventtype*/oEvent.type);
					docEvent.initKeyEvent(/**string type*/oEvent.name, /**boolean bubbles*/true, /**boolean cancelable*/true, window, mParams.ctrlKey, mParams.altKey, mParams.shiftKey, mParams.metaKey, mParams.keyCode, mParams.charCode);
				} catch (ex) {
					// WebKit doesn't support creation of KeyEvents -> fall back to type Events
					// solution adapted from http://developer.yahoo.com/yui/docs/UserAction.js.html and others
					jQuery.sap.log.error("failed to create event of type 'KeyEvents', falling back to type 'Events'");
					docEvent = document.createEvent("Events");
					docEvent.initEvent(/**string type*/oEvent.name, /**boolean bubbles*/true, /**boolean cancelable*/true);
					docEvent.view = window;
					docEvent.altKey = mParams.altKey;
					docEvent.ctrlKey = mParams.ctrlKey;
					docEvent.shiftKey = mParams.shiftKey;
					docEvent.metaKey = mParams.metaKey;
					docEvent.keyCode = mParams.keyCode;
					docEvent.charCode = mParams.charCode;
				}
				break;

			default:
				docEvent = document.createEvent(/**string eventtype*/oEvent.type);
				docEvent.initEvent(/**string type*/oEvent.name, /**boolean bubbles*/true, /**boolean cancelable*/true);
				break;
		}
		oDomRef.dispatchEvent(docEvent);

	} else if(document.createEventObject) { // IE
		docEvent = document.createEventObject(/**string eventtype*/oEvent.type);
//		docEvent.setAttribute("type", oEvent.type);
		docEvent.setAttribute("type", oEvent.name);
		docEvent.setAttribute("bubbles", true);
		docEvent.setAttribute("cancelable", true);
		_initEvent(docEvent, mParams);
		try{
			oDomRef.fireEvent("on" + oEvent.name, docEvent);
		} catch(e1) {
			fail("JsUnitHelper: Error during fireEvent of event on" + oEvent.name + ".");
		}
	} else {
		//warn("Cannot programmatically create event object thus aborting.");
		fail("Cannot programmatically create event object thus aborting.");
		return;
	}
};

(function() {

	var RX_HEX_COLOR = /#[0-9a-fA-F]+/;
	var CSS_COLORS = {
			maroon: 'rgb(128, 0, 0)',
			red: 'rgb(255, 0, 0)',
			orange: 'rgb(255, 165, 0)',
			yellow: 'rgb(255, 255, 0)',
			olive: 'rgb(128, 128, 0)',
			purple: 'rgb(128, 0, 128)',
			fuchsia: 'rgb(255, 0, 255)',
			white: 'rgb(255, 255, 255)',
			lime: 'rgb(0, 255, 0)',
			green: 'rgb(0, 128, 0)',
			navy: 'rgb(0, 0, 128)',
			blue: 'rgb(0, 0, 255)',
			aqua: 'rgb(0, 255, 255)',
			teal: 'rgb(0, 128, 128)',
			black: 'rgb(0, 0, 0)',
			silver: 'rgb(192, 192, 192)',
			gray: 'rgb(128, 128, 128)',
			transparent: 'rgba(0, 0, 0, 0)'
	};

	sap.ui.jsunit.JsUnitHelper.getCurrentStyle_AsColor = function(oDomRef, sStyleAttribute) {

		var sColor = jQuery(oDomRef).css(sStyleAttribute);

		if ( CSS_COLORS[sColor] ) {
			return CSS_COLORS[sColor];
		}

		if ( sColor.match(RX_HEX_COLOR) ) {
			return "rgb(" + parseInt(sColor.substring(1,3), 16) + ", " + parseInt(sColor.substring(3,5), 16) + ", " + parseInt(sColor.substring(5,7), 16) + ")";
		}

		return sColor;
	};

}());
}; // end of sap.ui.jsunit.JsUnitHelper
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.json.JSONListBinding");



/**
 *
 * @class
 * List binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.json.JSONListBinding = function(oModel, sPath, oContext, oSorter, aFilters){
	sap.ui.model.ListBinding.apply(this, arguments);
	this.oSorter = oSorter;
	this.aFilters = aFilters;
	this.update();
};
sap.ui.model.json.JSONListBinding.prototype = jQuery.sap.newObject(sap.ui.model.ListBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.json.JSONListBinding", {

  // ---- object ----
  baseType : "sap.ui.model.ListBinding",
  publicMethods : [
	// methods
	"getLength"
  ]

});

/**
 * Return contexts for the list or a specified subset of contexts
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts 
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index. 
 * Default is the whole list length. 
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.json.JSONListBinding.prototype.getContexts = function(iStartIndex, iLength) {
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = Math.min(this.iLength, 100);
	}
	
	var iEndIndex = Math.min(iStartIndex + iLength, this.aIndices.length);

	function slash(s) { return s.slice(-1) !== "/" ? s + "/" : s; }
	var aContexts = [],
		// if the path is not absolute, the prefix starts with the context. It always ends with the (potentially empty) path
		sPrefix = slash((this.sPath.indexOf("/") !== 0 ? slash(this.oContext || "") : "") + this.sPath);
	for (var i = iStartIndex; i < iEndIndex; i++) {
		aContexts.push(sPrefix + this.aIndices[i]);	
	}
	return aContexts;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.json.JSONListBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this.update();
		this._fireChange();
	}
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 * @protected
 */
sap.ui.model.json.JSONListBinding.prototype.getLength = function() {
	return this.iLength;
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 */
sap.ui.model.json.JSONListBinding.prototype._getLength = function() {
	return this.aIndices.length;
};


/**
 * Update the list, indices array and apply sorting and filtering
 * @private
 */
sap.ui.model.json.JSONListBinding.prototype.update = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (oList && jQuery.isArray(oList)) {
		this.oList = oList.slice(0);
		this.updateIndices();
		this.applyFilter();
		this.applySort();
		this.iLength = this._getLength();
	}
	else {
		this.oList = null;
		this.aIndices = [];
		this.iLength = 0;
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.json.JSONListBinding.prototype.checkUpdate = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (!this.oList || !oList || oList.length != this.oList.length) {
		this.update();
		this._fireChange();
	}
};

/**
 * Get indices of the list
 */
sap.ui.model.json.JSONListBinding.prototype.updateIndices = function(){
	this.aIndices = [];
	for (var i = 0; i < this.oList.length; i++) {
		this.aIndices.push(i);
	}

};

/**
 * @see sap.ui.model.ListBinding.prototype.sort
 *
 */
sap.ui.model.json.JSONListBinding.prototype.sort = function(oSorter){
	if (!oSorter) {
		this.oSorter = null;
		this.updateIndices();
		this.applyFilter();
	} else {
		this.oSorter = oSorter;
		this.applySort();
	}
	this._fireChange();
	this._fireSort({sorter: oSorter});
};

/**
 * Sorts the list
 * @private
 */
sap.ui.model.json.JSONListBinding.prototype.applySort = function(){
	if (!this.oSorter) {
		return;
	}
	var that = this,
		aSortValues = [],
		oValue;
	jQuery.each(this.aIndices, function(i, iIndex) {
		oValue = that.oModel._getObject(that.oSorter.sPath, that.oList[iIndex]);
		if (typeof oValue == "string") {
			oValue = oValue.toUpperCase();
		}
		aSortValues[iIndex] = oValue;
	});
	this.aIndices.sort(function(a, b) {
		var valueA = aSortValues[a],
			valueB = aSortValues[b],
			returnValue = 0;
		if (valueA < valueB || valueB == null) {
			returnValue = -1;
		}
		if (valueA > valueB || valueA == null) {
			returnValue = 1;
		}
		if (that.oSorter.bDescending) {
			returnValue = -returnValue;
		}
		return returnValue;
	});
};

/**
 * @see sap.ui.model.ListBinding.prototype.filter
 *
 */
sap.ui.model.json.JSONListBinding.prototype.filter = function(aFilters){
	this.updateIndices();
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = null;
		this.iLength = this._getLength();
	} else {
		this.aFilters = aFilters;
		this.applyFilter();
	}
	this.applySort();
	this._fireChange();
	this._fireFilter({filters: aFilters});
};

/**
 * Filters the list
 * Filters are first grouped according to their binding path.
 * All filters belonging to a group are ORed and after that the
 * results of all groups are ANDed.
 * Usually this means, all filters applied to a single table column
 * are ORed, while filters on different table columns are ANDed.
 *
 * @private
 */
sap.ui.model.json.JSONListBinding.prototype.applyFilter = function(){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true;
	jQuery.each(this.aIndices, function(i, iIndex) {
		bFiltered = true;
		jQuery.each(that.aFilters, function(j, oFilter) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
			aFilterGroup.push(oFilter);
		});
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			var oValue = that.oModel._getObject(sPath, that.oList[iIndex]);
			if (typeof oValue == "string") {
				oValue = oValue.toUpperCase();
			}
			bGroupFiltered = false;
			jQuery.each(aFilterGroup, function(j, oFilter) {
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue != undefined && fnTest(oValue)) {
					bGroupFiltered = true;
					return false;
				}
			});
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(iIndex);
		}
	});
	this.aIndices = aFiltered;
	this.iLength = aFiltered.length;
};

/**
 * Provides a JS filter function for the given filter
 */
sap.ui.model.json.JSONListBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = oFilter.oValue1,
		oValue2 = oFilter.oValue2;
	if (typeof oValue1 == "string") {
		oValue1 = oValue1.toUpperCase();
	}
	if (typeof oValue2 == "string") {
		oValue2 = oValue2.toUpperCase();
	}
	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value > oValue1) && (value < oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) != -1; }; break;
		case "StartsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == 0; }; break;
		case "EndsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == value.length - new String(oFilter.oValue1).length; }; break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};

/**
 * Get distinct values
 *
 * @param {String} sPath
 *
 * @protected
 */
sap.ui.model.json.JSONListBinding.prototype.getDistinctValues = function(sPath){
	var aResult = [],
		oMap = {},
		sValue,
		that = this;
	jQuery.each(this.oList, function(i, oContext) {
		sValue = that.oModel.getProperty(sPath, oContext);
		if (!oMap[sValue]) {
			oMap[sValue] = true;
			aResult.push(sValue);
		}
	});
	return aResult;
};
}; // end of sap.ui.model.json.JSONListBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the JSON model implementation of a property binding
jQuery.sap.declare("sap.ui.model.json.JSONPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.json.JSONPropertyBinding = function(oModel, sPath, oContext){
	sap.ui.model.PropertyBinding.apply(this, arguments);

	this.oValue = this._getValue();
};
sap.ui.model.json.JSONPropertyBinding.prototype = jQuery.sap.newObject(sap.ui.model.PropertyBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.json.JSONPropertyBinding", {

  // ---- object ----
  baseType : "sap.ui.model.PropertyBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * @see sap.ui.model.PropertyBinding.prototype.getValue
 */
sap.ui.model.json.JSONPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};


/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.json.JSONPropertyBinding.prototype._getValue = function(){
	var sProperty = this.sPath.substr(this.sPath.lastIndexOf("/")+1);
	if (sProperty == "__name__") {
		var aPath = this.oContext.split("/");
		return aPath[aPath.length - 1];
	}
	return this.oModel._getObject(this.sPath, this.oContext); // ensure to survive also not set model object
};

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.json.JSONPropertyBinding.prototype.setValue = function(oValue){
	if (this.oValue != oValue){
		this.oValue = oValue;
		this.oModel.setProperty(this.sPath, oValue, this.oContext);
	}
};

/**
 * Setter for context
 */
sap.ui.model.json.JSONPropertyBinding.prototype.setContext = function(oContext) {
	this.oContext = oContext;
	this.checkUpdate();
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.json.JSONPropertyBinding.prototype.checkUpdate = function(){
	var oValue = this._getValue();
	if(oValue !== this.oValue) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange();
	}
};
}; // end of sap.ui.model.json.JSONPropertyBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.json.JSONTreeBinding");


/**
 *
 * @class
 * Tree binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.json.JSONTreeBinding = function(oModel, sPath, oContext){
	sap.ui.model.TreeBinding.apply(this, arguments);
	if (!this.oContext) {
		this.oContext = "";
	}
	this.filterInfo = {}
	this.filterInfo.aFilteredContexts = [];
	this.filterInfo.oParentContext = {};
};
sap.ui.model.json.JSONTreeBinding.prototype = jQuery.sap.newObject(sap.ui.model.TreeBinding.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.json.JSONTreeBinding", {

  // ---- object ----
  baseType : "sap.ui.model.TreeBinding",
  publicMethods : [
	// methods
  ]

});

/**
 * Return root contexts for the tree
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.json.JSONTreeBinding.prototype.getRootContexts = function() {
	return this.getNodeContexts(this.sPath);
};

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.json.JSONTreeBinding.prototype.getNodeContexts = function(oContext) {
	
	if (!jQuery.sap.endsWith(oContext,"/")) {
		oContext = oContext + "/";
	}	
	if (!jQuery.sap.startsWith(oContext,"/")) {
		oContext = "/" + oContext;
	}

	var aContexts = [],
		that = this,
		oNode = this.oModel._getObject(oContext),
		oChild;
	jQuery.each(oNode, function(sName, oChild) {
		if (typeof oChild == "object") {
			var oChildContext = oContext + sName;
			// check if there is a filter on this level applied
			if (that.aFilters && !that.bIsFiltering){
				if (jQuery.inArray(oChildContext, that.filterInfo.aFilteredContexts) != -1) {
					aContexts.push(oChildContext);
				}			
			}else {
				aContexts.push(oChildContext);
			}
		}
	});
	return aContexts;
};


/**
 * 
 * @see sap.ui.model.TreeBinding.prototype.filter
 * Filters the tree according to the filter definitions.
 * The filtering is applied recursively through the tree. 
 * The parent nodes of filtered child nodes will also be displayed if they don't match the filter conditions.
 * All filters belonging to a group (=have the same path) are ORed and after that the
 * results of all groups are ANDed.
 * @function
 * @name sap.ui.model.TreeBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */
sap.ui.model.json.JSONTreeBinding.prototype.filter = function(aFilters){
	// The filtering is applied recursively through the tree and stores all filtered contexts and its parent contexts in an array.
	
	// reset previous stored filter contexts
	this.filterInfo.aFilteredContexts = [];
	this.filterInfo.oParentContext = {};
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = null;
	} else {
		this.aFilters = aFilters;
		// start with binding path root
		this.filterRecursive(this.sPath);
	}
	this._fireChange();
	this._fireFilter({filters: aFilters});
};

/**
 * filters the tree recursively.
 * @param {object} oParentContext the context where to start. The children of this node context are then filtered recursively.
 * @private
 */
sap.ui.model.json.JSONTreeBinding.prototype.filterRecursive = function(oParentContext){
	
	this.bIsFiltering = true;
	var aChildren = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;
	
	if (aChildren.length > 0) {
		var that = this;
		jQuery.each(aChildren, function(i, oChildContext){
			that.filterRecursive(oChildContext);
		});
		this.applyFilter(oParentContext);		
	}
};


/**
 * Performs the real filtering and stores all filtered contexts and its parent context into an array.
 * @param {object} oParentContext the context where to start. The children of this node context are filtered.
 * @private
 */
sap.ui.model.json.JSONTreeBinding.prototype.applyFilter = function(oParentContext){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true;
	this.bIsFiltering = true;
	var aUnfilteredContexts = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;
	jQuery.each(aUnfilteredContexts, function(i, aUnfilteredContext) {
		bFiltered = true;
		jQuery.each(that.aFilters, function(j, oFilter) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
			aFilterGroup.push(oFilter);
		});
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			var oValue = that.oModel._getObject(sPath,aUnfilteredContext);
			if (typeof oValue == "string") oValue = oValue.toUpperCase();
			bGroupFiltered = false;
			jQuery.each(aFilterGroup, function(j, oFilter) {
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue && fnTest(oValue)) {
					bGroupFiltered = true;
					return false;
				}
			});
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(aUnfilteredContext);
		}
	});
	if (aFiltered.length > 0) {
		jQuery.merge(this.filterInfo.aFilteredContexts, aFiltered);		
		this.filterInfo.aFilteredContexts.push(oParentContext);	
		this.filterInfo.oParentContext = oParentContext;
	}
	// push additionally parentcontexts if any children are already included in filtered contexts
	if (jQuery.inArray(this.filterInfo.oParentContext, aUnfilteredContexts) != -1) {
		this.filterInfo.aFilteredContexts.push(oParentContext);
		// set the parent context which was added to be the new parent context
		this.filterInfo.oParentContext = oParentContext;
	}
	
};

/**
 * Provides a JS filter function for the given filter
 * @private
 */
sap.ui.model.json.JSONTreeBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = oFilter.oValue1,
		oValue2 = oFilter.oValue2;
	if (typeof oValue1 == "string") oValue1 = oValue1.toUpperCase();
	if (typeof oValue2 == "string") oValue2 = oValue2.toUpperCase();
	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value > oValue1) && (value < oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) != -1; }; break;
		case "StartsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == 0; }; break;
		case "EndsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == value.length - new String(oFilter.oValue1).length; }; break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};


/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 */
sap.ui.model.json.JSONTreeBinding.prototype.checkUpdate = function(){
	this._fireChange();
};
}; // end of sap.ui.model.json.JSONTreeBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * JSON-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.json
 * @public
 */

// Provides the JSON object based model implementation
jQuery.sap.declare("sap.ui.model.json.JSONModel");





/**
 * Constructor for a new JSONModel.
 *
 * @class
 * Model implementation for JSON format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @param {object} oData either the URL where to load the JSON from or a JS object
 * @constructor
 * @public
 */
sap.ui.model.json.JSONModel = function(oData) {
	sap.ui.model.Model.apply(this, arguments);
	if (typeof oData == "string"){
		this.loadData(oData);
	}
	else if (oData && typeof oData == "object"){
		this.setData(oData);
	}
};

// chain the prototypes
sap.ui.model.json.JSONModel.prototype = jQuery.sap.newObject(sap.ui.model.Model.prototype);

/*
 * Describe the sap.ui.model.json.JSONModel.
 * Resulting metadata can be obtained via sap.ui.model.json.JSONModel.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.json.JSONModel", {

  // ---- object ----
  baseType : "sap.ui.model.Model",
  publicMethods : ["loadData", "setData", "getData", "setJSON", "getJSON"]
});

/**
 * Sets the JSON encoded data to the model.
 *
 * @param {object} oData the data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setData = function(oData, bMerge){
	if (bMerge) {
		// do a deep copy
		this.oData = jQuery.extend(true, {}, this.oData, oData);
	} else {
		this.oData = oData;
	}
	this.checkUpdate();
};

/**
 * Returns the current JSON data of the model. 
 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
 *
 * @return the JSON data object
 * @public
 */
sap.ui.model.json.JSONModel.prototype.getData = function(){
	return this.oData;
};

/**
 * Sets the JSON encoded string data to the model.
 *
 * @param {string} sJSONText the string data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setJSON = function(sJSONText, bMerge){
	var oJSONData;
	try {
		oJSONData = jQuery.parseJSON(sJSONText);		
		this.setData(oJSONData, bMerge);
	} catch (e) {
		jQuery.sap.log.fatal("The following problem occurred: JSON parse Error: " + e);
		this.fireParseError({url : "", errorCode : -1,
			reason : "", srcText : e, line : -1, linepos : -1, filepos : -1});
	}
};

/**
 * Serializes the current JSON data of the model into a string. 
 *
 * @return the JSON data serialized as string 
 * @public
 */
sap.ui.model.json.JSONModel.prototype.getJSON = function(){
	return JSON.stringify(this.oData);
};

/**
 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 *
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * Data that is sent to the server is appended to the URL as a query string.
 * If the value of the data parameter is an object (map), it is converted to a string and
 * url-encoded before it is appended to the URL.
 * @param {boolean} [async=true] By default, all requests are sent asynchronous
 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
 * temporarily lock the browser, disabling any actions while the request is active.
 * @param {string} [sType=GET] The type of request to make ("POST" or "GET"), default is "GET".
 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
 * they are not supported by all browsers.
 * @param {boolean} [bMerge=false] whether the data should be merged instead of replaced
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.loadData = function(sURL, oParameters, bAsync, sType, bMerge){
	var that = this;
	if (bAsync !== false) {
		bAsync = true;
	}
	if (!sType)	{
		sType = "GET";
	}
	this.fireRequestSent({url : sURL, type : sType, async : bAsync, info : "cache=false;bMerge=" + bMerge});
	jQuery.ajax({
	  url: sURL,
	  async: bAsync,
	  dataType: 'json',
	  cache: false,
	  data: oParameters,
	  type: sType,
	  success: function(oData) {
		if (!oData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + sURL);
		}
		that.setData(oData, bMerge);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, info : "cache=false;bMerge=" + bMerge});
	  },
	  error: function(XMLHttpRequest, textStatus, errorThrown){
		jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status + "," + XMLHttpRequest.statusText);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, info : "cache=false;bMerge=" + bMerge});
		that.fireRequestFailed({message : textStatus,
			statusCode : XMLHttpRequest.status, statusText : XMLHttpRequest.statusText, responseText : XMLHttpRequest.responseText});
	  }
	});
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 * @param {object} oUpdateInfo
 * @param {string} oUpdateInfo.path
 *
 * @private
 */
sap.ui.model.json.JSONModel.prototype.checkUpdate = function() {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		oBinding.checkUpdate();
	});
};


/**
 * @see sap.ui.model.Model.prototype.bindProperty
 *
 */
sap.ui.model.json.JSONModel.prototype.bindProperty = function(sPath, oContext) {
	var oBinding = new sap.ui.model.json.JSONPropertyBinding(this, sPath, oContext);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 *
 */
sap.ui.model.json.JSONModel.prototype.bindList = function(sPath, oContext, oSorter, aFilters) {
	var oBinding = new sap.ui.model.json.JSONListBinding(this, sPath, oContext, oSorter, aFilters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindTree
 *
 */
sap.ui.model.json.JSONModel.prototype.bindTree = function(sPath, oContext) {
	var oBinding = new sap.ui.model.json.JSONTreeBinding(this, sPath, oContext);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.createBindingContext
 *
 */
sap.ui.model.json.JSONModel.prototype.createBindingContext = function(sPath, oContext, fCallBack) {
	if (!oContext){
		oContext = "";
	}
	if (!jQuery.sap.startsWith(sPath, "/")) {
		sPath = oContext + "/" + sPath;
	}
	fCallBack(sPath);
};

/**
 * @see sap.ui.model.Model.prototype.destroyBindingContext
 *
 */
sap.ui.model.json.JSONModel.prototype.destroyBindingContext = function(oContext) {
	// TODO: what todo here?
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model. 
 * If the model value changed all interested parties are informed.
 *
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setProperty = function(sPath, oValue, oContext) {
	var sObjectPath = sPath.substring(0, sPath.lastIndexOf("/")),
		sProperty = sPath.substr(sPath.lastIndexOf("/")+1);
	var oObject = this._getObject(sObjectPath, oContext);
	oObject[sProperty] = oValue;

	this.checkUpdate();
};

/**
* Returns the value for the property with the given <code>sPropertyName</code>
*
* @param {string} sPath the path to the property
* @param {object} [oContext=null] the context which will be used to retrieve the property
* @type any
* @return the value of the property
* @public
*/
sap.ui.model.json.JSONModel.prototype.getProperty = function(sPath, oContext) {
	return this._getObject(sPath, oContext);

};

/**
 * @param sPath
 * @param oContext
 * @returns the node of the specified path/context
 */
sap.ui.model.json.JSONModel.prototype._getObject = function (sPath, oContext) {
	var oNode = this.oData;
	if (typeof oContext == "string"){
		oNode = this._getObject(oContext);
		if (!oNode) {
			return null;
		}
	}
	else if (oContext){
		oNode = oContext;
	}
	if (!sPath) {
		return oNode;
	}
	var aParts = sPath.split("/"),
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = this.oData;
		iIndex++;
	}
	while(oNode && aParts[iIndex]) {
		oNode = oNode[aParts[iIndex]];
		iIndex++;
	}
	return oNode;
};
}; // end of sap.ui.model.json.JSONModel
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.datajs') ) {
  jQuery.sap.declare('sap.ui.model.odata.datajs');
/*! 
 * Copyright (c) Microsoft.  All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * datajs.js
 */

(function (window, undefined) {
    if (!window.datajs) {
        window.datajs = {};
    }

    if (!window.OData) {
        window.OData = {};
    }

    var datajs = window.datajs;
    var odata = window.OData;
    

    // Provides an enumeration of possible kinds of payloads.
    var PAYLOADTYPE_BATCH = "b";
    var PAYLOADTYPE_COMPLEXTYPE = "c";
    var PAYLOADTYPE_ENTRY = "entry";        // This is used when building the payload.
    var PAYLOADTYPE_FEEDORLINKS = "f";
    var PAYLOADTYPE_PRIMITIVETYPE = "p";
    var PAYLOADTYPE_SVCDOC = "s";
    var PAYLOADTYPE_UNKNOWN = "u";
    var PAYLOADTYPE_NONE = "n";

    // Provides an enumeration of possible kinds of properties.
    var PROPERTYKIND_COMPLEX = "c";
    var PROPERTYKIND_DEFERRED = "d";
    var PROPERTYKIND_INLINE = "i";
    var PROPERTYKIND_PRIMITIVE = "p";
    var PROPERTYKIND_NONE = "n";

    var assigned = function (value) {
        /// <summary>Checks whether the specified value is different from null and undefined.</summary>
        /// <param name="value" mayBeNull="true" optional="true">Value to check.</param>
        /// <returns type="Boolean">true if the value is assigned; false otherwise.</returns>
        return value !== null && value !== undefined;
    };

    var contains = function (arr, item) {
        /// <summary>Checks whether the specified item is in the array.</summary>
        /// <param name="arr" type="Array" optional="false" mayBeNull="false">Array to check in.</param>
        /// <param name="item">Item to look for.</param>
        /// <returns type="Boolean">true if the item is contained, false otherwise.</returns>

        var i, len;
        for (i = 0, len = arr.length; i < len; i++) {
            if (arr[i] === item) {
                return true;
            }
        }

        return false;
    };

    var defined = function (a, b) {
        /// <summary>Given two values, picks the first one that is not undefined.</summary>
        /// <param name="a">First value.</param>
        /// <param name="b">Second value.</param>
        /// <returns>a if it's a defined value; else b.</returns>
        return (a !== undefined) ? a : b;
    };

    var delay = function (callback) {
        /// <summary>Delays the invocation of the specified function until execution unwinds.</summary>
        /// <param name="callback" type="Function">Callback function.</param>
        if (arguments.length === 1) {
            window.setTimeout(callback, 0);
            return;
        }

        var args = Array.prototype.slice.call(arguments, 1);
        window.setTimeout(function () {
            callback.apply(this, args);
        }, 0);
    };


    var forEachSchema = function (metadata, callback) {
        /// <summary>Invokes a function once per schema in metadata.</summary>
        /// <param name="metadata">Metadata store; one of edmx, schema, or an array of any of them.</param>
        /// <param name="callback" type="Function">Callback function to invoke once per schema.</param>
        /// <returns>
        /// The first truthy value to be returned from the callback; null or the last falsy value otherwise.
        /// </returns>

        if (!metadata) {
            return null;
        }

        if (isArray(metadata)) {
            var i, len, result;
            for (i = 0, len = metadata.length; i < len; i++) {
                result = forEachSchema(metadata[i], callback);
                if (result) {
                    return result;
                }
            }

            return null;
        } else {
            if (metadata.dataServices) {
                return forEachSchema(metadata.dataServices.schema, callback);
            }

            return callback(metadata);
        }
    };

    var isDateTimeOffset = function (value) {
        /// <summary>Checks whether a Date object is DateTimeOffset value</summary>
        /// <param name="value" type="Date" mayBeNull="false">Value to check.</param>
        /// <returns type="Boolean">true if the value is a DateTimeOffset, false otherwise.</returns>
        return (value.__edmType === "Edm.DateTimeOffset" || (!value.__edmType && value.__offset));
    };

    var formatMilliseconds = function (ms, ns) {
        /// <summary>Formats a millisecond and a nanosecond value into a single string.</summary>
        /// <param name="ms" type="Number" mayBeNull="false">Number of milliseconds to format.</param>
        /// <param name="ns" type="Number" mayBeNull="false">Number of nanoseconds to format.</param>
        /// <returns type="String">Formatted text.</returns>
        /// <remarks>If the value is already as string it's returned as-is.</remarks>

        // Avoid generating milliseconds if not necessary.
        if (ms === 0) {
            ms = "";
        } else {
            ms = "." + formatNumberWidth(ms.toString(), 3);
        }
        if (ns > 0) {
            if (ms === "") {
                ms = ".000";
            }
            ms += formatNumberWidth(ns.toString(), 4);
        }
        return ms;
    }

    var formatDateTimeOffset = function (value) {
        /// <summary>Formats a DateTime or DateTimeOffset value a string.</summary>
        /// <param name="value" type="Date" mayBeNull="false">Value to format.</param>
        /// <returns type="String">Formatted text.</returns>
        /// <remarks>If the value is already as string it's returned as-is.</remarks>

        if (typeof value === "string") {
            return value;
        }

        var hasOffset = isDateTimeOffset(value);
        var offset = getCanonicalTimezone(value.__offset);
        if (hasOffset && offset !== "Z") {
            // We're about to change the value, so make a copy.
            value = new Date(value.valueOf());

            var timezone = parseTimezone(offset);
            var hours = value.getUTCHours() + (timezone.d * timezone.h);
            var minutes = value.getMinutes() + (timezone.d * timezone.m);

            value.setUTCHours(hours, minutes);
        } else if (!hasOffset) {
            // Don't suffix a 'Z' for Edm.DateTime values.
            offset = "";
        }

        var year = value.getUTCFullYear();
        var month = value.getUTCMonth() + 1;
        var sign = "";
        if (year <= 0) {
            year = -(year - 1);
            sign = "-";
        }

        var ms = formatMilliseconds(value.getUTCMilliseconds(), value.__ns);

        return sign +
            formatNumberWidth(year, 4) + "-" +
            formatNumberWidth(month, 2) + "-" +
            formatNumberWidth(value.getUTCDate(), 2) + "T" +
            formatNumberWidth(value.getUTCHours(), 2) + ":" +
            formatNumberWidth(value.getUTCMinutes(), 2) + ":" +
            formatNumberWidth(value.getUTCSeconds(), 2) +
            ms + offset;
    };

    var formatDuration = function (value) {
        /// <summary>Converts a duration to a string in xsd:duration format.</summary>
        /// <param name="value" type="Object">Object with ms and __edmType properties.</param>
        /// <returns type="String">String representation of the time object in xsd:duration format.</returns>

        var ms = value.ms;

        var sign = "";
        if (ms < 0) {
            sign = "-";
            ms = -ms;
        }

        var days = Math.floor(ms / 86400000);
        ms -= 86400000 * days;
        var hours = Math.floor(ms / 3600000);
        ms -= 3600000 * hours;
        var minutes = Math.floor(ms / 60000);
        ms -= 60000 * minutes;
        var seconds = Math.floor(ms / 1000);
        ms -= seconds * 1000;

        return sign + "P" +
               formatNumberWidth(days, 2) + "DT" +
               formatNumberWidth(hours, 2) + "H" +
               formatNumberWidth(minutes, 2) + "M" +
               formatNumberWidth(seconds, 2) + 
               formatMilliseconds(ms, value.ns) + "S";
    };

    var formatNumberWidth = function (value, width, append) {
        /// <summary>Formats the specified value to the given width.</summary>
        /// <param name="value" type="Number">Number to format (non-negative).</param>
        /// <param name="width" type="Number">Minimum width for number.</param>
        /// <param name="append" type="Boolean">Flag indicating if the value is padded at the beginning (false) or at the end (true).</param>
        /// <returns type="String">Text representation.</returns>
        var result = value.toString(10);
        while (result.length < width) {
            if (append) {
                result += "0";
            } else {
                result = "0" + result;
            }
        }

        return result;
    };

    var getCanonicalTimezone = function (timezone) {
        /// <summary>Gets the canonical timezone representation.</summary>
        /// <param name="timezone" type="String">Timezone representation.</param>
        /// <returns type="String">An 'Z' string if the timezone is absent or 0; the timezone otherwise.</returns>

        return (!timezone || timezone === "Z" || timezone === "+00:00" || timezone === "-00:00") ? "Z" : timezone;
    };

    var invokeRequest = function (request, success, error, handler, httpClient, context) {
        /// <summary>Sends a request containing OData payload to a server.</summary>
        /// <param name="request">Object that represents the request to be sent..</param>
        /// <param name="success">Callback for a successful read operation.</param>
        /// <param name="error">Callback for handling errors.</param>
        /// <param name="handler">Handler for data serialization.</param>
        /// <param name="httpClient">HTTP client layer.</param>
        /// <param name="context">Context used for processing the request</param>
        return httpClient.request(request, function (response) {
            try {
                if (response.headers) {
                    normalizeHeaders(response.headers);
                }

                if (response.data === undefined) {
                    handler.read(response, context);
                }
            } catch (err) {
                if (err.request === undefined) {
                    err.request = request;
                }
                if (err.response === undefined) {
                    err.response = response;
                }
                error(err);
                return;
            }

            success(response.data, response);
        }, error);
    };

    var isArray = function (value) {
        /// <summary>Checks whether the specified value is an array object.</summary>
        /// <param name="value">Value to check.</param>
        /// <returns type="Boolean">true if the value is an array object; false otherwise.</returns>

        return Object.prototype.toString.call(value) === "[object Array]";
    };

    var isDate = function (value) {
        /// <summary>Checks whether the specified value is a Date object.</summary>
        /// <param name="value">Value to check.</param>
        /// <returns type="Boolean">true if the value is a Date object; false otherwise.</returns>

        return Object.prototype.toString.call(value) === "[object Date]";
    };

    var lookupProperty = function (properties, name) {
        /// <summary>Looks up a property by name.</summary>
        /// <param name="properties" type="Array" mayBeNull="true">Array of property objects as per EDM metadata.</param>
        /// <param name="name" type="String">Name to look for.</param>
        /// <returns type="Object">The property object; null if not found.</returns>

        if (properties) {
            var i, len;
            for (i = 0, len = properties.length; i < len; i++) {
                if (properties[i].name === name) {
                    return properties[i];
                }
            }
        }

        return null;
    };

    var lookupTypeInMetadata = function (name, metadata, kind) {
        /// <summary>Looks up a type object by name.</summary>
        /// <param name="name" type="String">Name, possibly null or empty.</param>
        /// <param name="metadata">Metadata store; one of edmx, schema, or an array of any of them.</param>
        /// <param name="kind" type="String">Kind of type to look for; one of 'entityType' or 'complexType'.</param>
        /// <returns>An type description if the name is found; null otherwise.</returns>

        return (name) ? forEachSchema(metadata, function (schema) {
            return lookupTypeInSchema(name, schema, kind);
        }) : null;
    };

    var lookupComplexType = function (name, metadata) {
        /// <summary>Looks up a complex type object by name.</summary>
        /// <param name="name" type="String">Name, possibly null or empty.</param>
        /// <param name="metadata">Metadata store; one of edmx, schema, or an array of any of them.</param>
        /// <returns>A complex type description if the name is found; null otherwise.</returns>

        return lookupTypeInMetadata(name, metadata, "complexType");
    };

    var lookupEntityType = function (name, metadata) {
        /// <summary>Looks up an entity type object by name.</summary>
        /// <param name="name" type="String">Name, possibly null or empty.</param>
        /// <param name="metadata">Metadata store; one of edmx, schema, or an array of any of them.</param>
        /// <returns>An entity type description if the name is found; null otherwise.</returns>

        return lookupTypeInMetadata(name, metadata, "entityType");
    };

    ////    Commented out - metadata is largely optional and we don't rely on it to this extent.
    ////    var lookupEntityTypeForNavigation = function (navigationProperty, metadata) {
    ////        /// <summary>Looks up the target entity type for a navigation property.</summary>
    ////        /// <param name="navigationProperty" type="Object"></param>
    ////        /// <param name="metadata" type="Object"></param>
    ////        /// <returns type="Object">The entity type metadata for the specified property, null if not found.</returns>
    ////        var rel = navigationProperty.relationship;
    ////        var association = forEachSchema(metadata, function (schema) {
    ////            // The name should be the namespace qualified name in 'ns'.'type' format.
    ////            var nameOnly = removeNamespace(schema["namespace"], rel);
    ////            var associations = schema.association;
    ////            if (nameOnly && associations) {
    ////                var i, len;
    ////                for (i = 0, len = associations.length; i < len; i++) {
    ////                    if (associations[i].name === nameOnly) {
    ////                        return associations[i];
    ////                    }
    ////                }
    ////            }
    ////        });
    ////        var result = null;
    ////        if (association) {
    ////            var end = association.end[0];
    ////            if (end.role !== navigationProperty.toRole) {
    ////                end = association.end[1];
    ////                // For metadata to be valid, end.role === navigationProperty.toRole now.
    ////            }
    ////            result = lookupEntityType(end.type, metadata);
    ////        }
    ////        return result;
    ////    };

    var removeNamespace = function (ns, fullName) {
        /// <summary>Given an expected namespace prefix, removes it from a full name.</summary>
        /// <param name="ns" type="String">Expected namespace.</param>
        /// <param name="fullName" type="String">Full name in 'ns'.'name' form.</param>
        /// <returns type="String">The local name, null if it isn't found in the expected namespace.</returns>

        if (fullName.indexOf(ns) === 0 && fullName.charAt(ns.length) === ".") {
            return fullName.substr(ns.length + 1);
        }

        return null;
    };

    var lookupTypeInSchema = function (name, metadata, kind) {
        /// <summary>Looks up an entity type object by name.</summary>
        /// <param name="name" type="String">Name (assigned).</param>
        /// <param name="metadata">Metadata store; one of edmx, schema.</param>
        /// <param name="kind" type="String">Kind of type to look for; one of 'entityType' or 'complexType'.</param>
        /// <returns>An entity type description if the name is found; null otherwise.</returns>
        /// <remarks>
        /// metadata is considered an edmx object if it contains a dataServices object.
        /// </remarks>

        if (metadata) {
            // The name should be the namespace qualified name in 'ns'.'type' format.
            var nameOnly = removeNamespace(metadata["namespace"], name);
            var types = metadata[kind];
            if (nameOnly && types) {
                var i, len;
                for (i = 0, len = types.length; i < len; i++) {
                    if (types[i].name === nameOnly) {
                        return types[i];
                    }
                }
            }
        }

        return null;
    };

    var normalHeaders = {
        "accept": "Accept",
        "content-type": "Content-Type",
        "dataserviceversion": "DataServiceVersion",
        "maxdataserviceversion": "MaxDataServiceVersion"
    };

    var normalizeHeaders = function (headers) {
        /// <summary>Normalizes headers so they can be found with consistent casing.</summary>
        /// <param name="headers" type="Object">Dictionary of name/value pairs.</param>

        for (var name in headers) {
            var lowerName = name.toLowerCase();
            var normalName = normalHeaders[lowerName];
            if (normalName && name !== normalName) {
                var val = headers[name];
                delete headers[name];
                headers[normalName] = val;
            }
        }
    };

    var undefinedDefault = function (value, defaultValue) {
        /// <summary>Returns a default value in place of undefined.</summary>
        /// <param name="value" mayBeNull="true" optional="true">Value to check.</param>
        /// <param name="defaultValue">Value to return if value is undefined.</param>
        /// <returns>value if it's defined; defaultValue otherwise.</returns>
        /// <remarks>
        /// This should only be used for cases where falsy values are valid;
        /// otherwise the pattern should be 'x = (value) ? value : defaultValue;'.
        /// </remarks>
        return (value !== undefined) ? value : defaultValue;
    };

    var parseInt10 = function (value) {
        /// <summary>Parses a value in base 10.</summary>
        /// <param name="value" type="String">String value to parse.</param>
        /// <returns type="Number">The parsed value, NaN if not a valid value.</returns>

        return parseInt(value, 10);
    };


    // The captured indices for this expression are:
    // 0       - complete input
    // 1       - direction
    // 2,3,4   - years, months, days
    // 5,6,7,8 - hours, minutes, seconds, miliseconds

    var parseTimeRE = /^([+-])?P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)(?:\.(\d+))?S)?)?/;

    var parseDuration = function (duration) {
        /// <summary>Parses a string in xsd:duration format.</summary>
        /// <param name="duration" type="String">Duration value.</param>
        /// <remarks>
        /// This method will throw an exception if the input string has a year or a month component. 
        /// </remarks>
        /// <returns type="Object">Object representing the time</returns>

        var parts = parseTimeRE.exec(duration);

        if (parts === null) {
            throw { message: "Invalid duration value." };
        }

        var years = parts[2] || "0";
        var months = parts[3] || "0";
        var days = parseInt10(parts[4] || 0);
        var hours = parseInt10(parts[5] || 0);
        var minutes = parseInt10(parts[6] || 0);
        var seconds = parseFloat(parts[7] || 0);

        if (years !== "0" || months !== "0") {
            throw { message: "Unsupported duration value." };
        }

        var ms = parts[8];
        var ns = 0;
        if (!ms) {
            ms = 0;
        } else {
            if (ms.length > 7) {
                throw { message: "Cannot parse duration value to given precision." };
            }

            ns = formatNumberWidth(ms.substring(3), 4, true);
            ms = formatNumberWidth(ms.substring(0, 3), 3, true);

            ms = parseInt10(ms);
            ns = parseInt10(ns);
        }

        ms += seconds * 1000 + minutes * 60000 + hours * 3600000 + days * 86400000;

        if (parts[1] === "-") {
            ms = -ms;
        }

        var result = { ms: ms, __edmType: "Edm.Time" };

        if (ns) {
            result.ns = ns;
        }
        return result;
    };

    var parseTimezone = function (timezone) {
        /// <summary>Parses a timezone description in (+|-)nn:nn format.</summary>
        /// <param name="timezone" type="String">Timezone offset.</param>
        /// <returns type="Object">
        /// An object with a (d)irection property of 1 for + and -1 for -,
        /// offset (h)ours and offset (m)inutes.
        /// </returns>

        var direction = timezone.substring(0, 1);
        direction = (direction === "+") ? 1 : -1;

        var offsetHours = parseInt10(timezone.substring(1));
        var offsetMinutes = parseInt10(timezone.substring(timezone.indexOf(":") + 1));
        return { d: direction, h: offsetHours, m: offsetMinutes };
    };

    var payloadTypeOf = function (data) {
        /// <summary>Determines the kind of payload applicable for the specified value.</summary>
        /// <param name="value">Value to check.</param>
        /// <returns type="String">One of the values declared on the payloadType object.</returns>

        switch (typeof (data)) {
            case "object":
                if (!data) {
                    return PAYLOADTYPE_NONE;
                }
                if (isArray(data) || isArray(data.results)) {
                    return PAYLOADTYPE_FEEDORLINKS;
                }
                if (data.__metadata && data.__metadata.uri !== undefined) {
                    return PAYLOADTYPE_ENTRY;
                }
                if (isArray(data.EntitySets)) {
                    return PAYLOADTYPE_SVCDOC;
                }
                if (isArray(data.__batchRequests)) {
                    return PAYLOADTYPE_BATCH;
                }
                if (isDate(data)) {
                    return PAYLOADTYPE_PRIMITIVETYPE;
                }

                return PAYLOADTYPE_COMPLEXTYPE;

            case "string":
            case "number":
            case "boolean":
                return PAYLOADTYPE_PRIMITIVETYPE;
        }

        return PAYLOADTYPE_UNKNOWN;
    };

    var prepareRequest = function (request, handler, context) {
        /// <summary>Prepares a request object so that it can be sent through the network.</summary>
        /// <param name="request">Object that represents the request to be sent.</param>
        /// <param name="handler">Handler for data serialization</param>
        /// <param name="context">Context used for preparing the request</param>

        // Default to GET if no method has been specified.    
        if (!request.method) {
            request.method = "GET";
        }

        if (!request.headers) {
            request.headers = {};
        } else {
            normalizeHeaders(request.headers);
        }

        if (request.headers.Accept === undefined) {
            request.headers.Accept = handler.accept;
        }

        if (assigned(request.data) && request.body === undefined) {
            handler.write(request, context);
        }
        
        // ##### BEGIN: MODIFIED BY SAP
        if (request.async === undefined) {
        	request.async = true;
        }
        // ##### END: MODIFIED BY SAP
    };

    var propertyKindOf = function (value) {
        /// <summary>Determines the kind of property for the specified value.</summary>
        /// <param name="value">Value to check.</param>
        /// <returns type="String">One of the values declared on the propertyKind object.</returns>

        switch (payloadTypeOf(value)) {
            case PAYLOADTYPE_COMPLEXTYPE:
                if (value.__deferred && value.__deferred.uri) {
                    return PROPERTYKIND_DEFERRED;
                }

                return PROPERTYKIND_COMPLEX;

            case PAYLOADTYPE_FEEDORLINKS:
            case PAYLOADTYPE_ENTRY:
                return PROPERTYKIND_INLINE;

            case PAYLOADTYPE_PRIMITIVETYPE:
                return PROPERTYKIND_PRIMITIVE;
        }
        return PROPERTYKIND_NONE;
    };

    var throwErrorCallback = function (error) {
        /// <summary>Default error handler.</summary>
        /// <param name="error" type="Object">Error to handle.</param>
        throw error;
    };

    var trimString = function (str) {
        /// <summary>Removes leading and trailing whitespaces from a string.</summary>
        /// <param name="str" type="String" optional="false" mayBeNull="false">String to trim</param>
        /// <returns type="String">The string with no leading or trailing whitespace.</returns>

        if (str.trim) {
            return str.trim();
        }

        return str.replace(/^\s+|\s+$/g, '');
    };

    // Regular expression that splits a uri into its components:
    // 0 - is the matched string.
    // 1 - is the scheme.
    // 2 - is the authority.
    // 3 - is the path.
    // 4 - is the query.
    // 5 - is the fragment.
    var uriRegEx = /^([^:\/?#]+:)?(\/\/[^\/?#]*)?([^?#:]+)?(\?[^#]*)?(#.*)?/;
    var uriPartNames = ["scheme", "authority", "path", "query", "fragment"];

    var getURIInfo = function (uri) {
        /// <summary>Gets information about the components of the specified URI.</summary>
        /// <param name="uri" type="String">URI to get information from.</param>
        /// <returns type="Object">
        /// An object with an isAbsolute flag and part names (scheme, authority, etc.) if available.
        /// </returns>

        var result = { isAbsolute: false };

        if (uri) {
            var matches = uriRegEx.exec(uri);
            if (matches) {
                var i, len;
                for (i = 0, len = uriPartNames.length; i < len; i++) {
                    if (matches[i + 1]) {
                        result[uriPartNames[i]] = matches[i + 1];
                    }
                }
            }
            if (result.scheme) {
                result.isAbsolute = true;
            }
        }

        return result;
    };

    var getURIFromInfo = function (uriInfo) {
        /// <summary>Builds a URI string from its components.</summary>
        /// <param name="uriInfo" type="Object"> An object with uri parts (scheme, authority, etc.).</param>
        /// <returns type="String">URI string.</returns>

        return "".concat(
            uriInfo.scheme || "",
            uriInfo.authority || "",
            uriInfo.path || "",
            uriInfo.query || "",
            uriInfo.fragment || "");
    };

    // Regular expression that splits a uri authority into its subcomponents:
    // 0 - is the matched string.
    // 1 - is the userinfo subcomponent.
    // 2 - is the host subcomponent.
    // 3 - is the port component.
    var uriAuthorityRegEx = /^\/{0,2}(?:([^@]*)@)?([^:]+)(?::{1}(\d+))?/;

    // Regular expression that matches percentage enconded octects (i.e %20 or %3A);
    var pctEncodingRegEx = /%[0-9A-F]{2}/ig;

    var normalizeURICase = function (uri) {
        /// <summary>Normalizes the casing of a URI.</summary>
        /// <param name="uri" type="String">URI to normalize, absolute or relative.</param>
        /// <returns type="String">The URI normalized to lower case.</returns>

        var uriInfo = getURIInfo(uri);
        var scheme = uriInfo.scheme;
        var authority = uriInfo.authority;

        if (scheme) {
            uriInfo.scheme = scheme.toLowerCase();
            if (authority) {
                var matches = uriAuthorityRegEx.exec(authority);
                if (matches) {
                    uriInfo.authority = "//" +
                    (matches[1] ? matches[1] + "@" : "") +
                    (matches[2].toLowerCase()) +
                    (matches[3] ? ":" + matches[3] : "");
                }
            }
        }

        uri = getURIFromInfo(uriInfo);

        return uri.replace(pctEncodingRegEx, function (str) {
            return str.toLowerCase();
        });
    };

    var normalizeURI = function (uri, base) {
        /// <summary>Normalizes a possibly relative URI with a base URI.</summary>
        /// <param name="uri" type="String">URI to normalize, absolute or relative.</param>
        /// <param name="base" type="String" mayBeNull="true">Base URI to compose with.</param>
        /// <returns type="String">The composed URI if relative; the original one if absolute.</returns>

        if (!base) {
            return uri;
        }

        var uriInfo = getURIInfo(uri);
        if (uriInfo.isAbsolute) {
            return uri;
        }

        var baseInfo = getURIInfo(base);
        var normInfo = {};
        var path;

        if (uriInfo.authority) {
            normInfo.authority = uriInfo.authority;
            path = uriInfo.path;
            normInfo.query = uriInfo.query;
        } else {
            if (!uriInfo.path) {
                path = baseInfo.path;
                normInfo.query = uriInfo.query || baseInfo.query;
            } else {
                if (uriInfo.path.charAt(0) === '/') {
                    path = uriInfo.path;
                } else {
                    path = mergeUriPathWithBase(uriInfo.path, baseInfo.path);
                }
                normInfo.query = uriInfo.query;
            }
            normInfo.authority = baseInfo.authority;
        }

        normInfo.path = removeDotsFromPath(path);

        normInfo.scheme = baseInfo.scheme;
        normInfo.fragment = uriInfo.fragment;

        return getURIFromInfo(normInfo);
    };

    var mergeUriPathWithBase = function (uriPath, basePath) {
        /// <summary>Merges the path of a relative URI and a base URI.</summary>
        /// <param name="uriPath" type="String>Relative URI path.</param>
        /// <param name="basePath" type="String">Base URI path.</param>
        /// <returns type="String">A string with the merged path.</returns>

        var path = "/";
        var end;

        if (basePath) {
            end = basePath.lastIndexOf("/");
            path = basePath.substring(0, end);

            if (path.charAt(path.length - 1) !== "/") {
                path = path + "/";
            }
        }

        return path + uriPath;
    };

    var removeDotsFromPath = function (path) {
        /// <summary>Removes the special folders . and .. from a URI's path.</summary>
        /// <param name="path" type="string">URI path component.</param>
        /// <returns type="String">Path without any . and .. folders.</returns>

        var result = "";
        var segment = "";
        var end;

        while (path) {
            if (path.indexOf("..") === 0 || path.indexOf(".") === 0) {
                path = path.replace(/^\.\.?\/?/g, "");
            } else if (path.indexOf("/..") === 0) {
                path = path.replace(/^\/\..\/?/g, "/");
                end = result.lastIndexOf("/");
                if (end === -1) {
                    result = "";
                } else {
                    result = result.substring(0, end);
                }
            } else if (path.indexOf("/.") === 0) {
                path = path.replace(/^\/\.\/?/g, "/");
            } else {
                segment = path;
                end = path.indexOf("/", 1);
                if (end !== -1) {
                    segment = path.substring(0, end);
                }
                result = result + segment;
                path = path.replace(segment, "");
            }
        }
        return result;
    };


    var ticks = 0;

    var canUseJSONP = function (request) {
        /// <summary>
        /// Checks whether the specified request can be satisfied with a JSONP request.
        /// </summary>
        /// <param name="request">Request object to check.</param>
        /// <returns type="Boolean">true if the request can be satisfied; false otherwise.</returns>

        // Requests that 'degrade' without changing their meaning by going through JSONP
        // are considered usable.
        //
        // We allow data to come in a different format, as the servers SHOULD honor the Accept
        // request but may in practice return content with a different MIME type.
        if (request.method && request.method !== "GET") {
            return false;
        }

        return true;
    };

    var createIFrame = function (url) {
        /// <summary>Creates an IFRAME tag for loading the JSONP script</summary>
        /// <param name="url" type="String">The source URL of the script</param>
        /// <returns type="HTMLElement">The IFRAME tag</returns>
        var iframe = window.document.createElement("IFRAME");
        iframe.style.display = "none";

        var attributeEncodedUrl = url.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/\</g, "&lt;");
        var html = "<html><head><script type=\"text/javascript\" src=\"" + attributeEncodedUrl + "\"><\/script><\/head><body><\/body><\/html>";

        var body = window.document.getElementsByTagName("BODY")[0];
        body.appendChild(iframe);

        writeHtmlToIFrame(iframe, html);
        return iframe;
    };

    var createXmlHttpRequest = function () {
        /// <summary>Creates a XmlHttpRequest object.</summary>
        /// <returns type="XmlHttpRequest">XmlHttpRequest object.</returns>
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest();
        }
        var exception;
        if (window.ActiveXObject) {
            try {
                return new window.ActiveXObject("Msxml2.XMLHTTP.6.0");
            } catch (_) {
                try {
                    return new window.ActiveXObject("Msxml2.XMLHTTP.3.0");
                } catch (e) {
                    exception = e;
                }
            }
        } else {
            exception = { message: "XMLHttpRequest not supported" };
        }
        throw exception;
    };

    var isAbsoluteUrl = function (url) {
        /// <summary>Checks whether the specified URL is an absolute URL.</summary>
        /// <param name="url" type="String">URL to check.</param>
        /// <returns type="Boolean">true if the url is an absolute URL; false otherwise.</returns>

        return url.indexOf("http://") === 0 ||
            url.indexOf("https://") === 0 ||
            url.indexOf("file://") === 0;
    };

    var isLocalUrl = function (url) {
        /// <summary>Checks whether the specified URL is local to the current context.</summary>
        /// <param name="url" type="String">URL to check.</param>
        /// <returns type="Boolean">true if the url is a local URL; false otherwise.</returns>

        if (!isAbsoluteUrl(url)) {
            return true;
        }

        // URL-embedded username and password will not be recognized as same-origin URLs.
        var location = window.location;
        var locationDomain = location.protocol + "//" + location.host + "/";
        return (url.indexOf(locationDomain) === 0);
    };

    var removeCallback = function (name, tick) {
        /// <summary>Removes a callback used for a JSONP request.</summary>
        /// <param name="name" type="String">Function name to remove.</param>
        /// <param name="tick" type="Number">Tick count used on the callback.</param>
        try {
            delete window[name];
        } catch (err) {
            window[name] = undefined;
            if (tick === ticks - 1) {
                ticks -= 1;
            }
        }
    };

    var removeIFrame = function (iframe) {
        /// <summary>Removes an iframe.</summary>
        /// <param name="iframe" type="Object">The iframe to remove.</param>
        /// <returns type="Object">Null value to be assigned to iframe reference.</returns>
        if (iframe) {
            writeHtmlToIFrame(iframe, "");
            iframe.parentNode.removeChild(iframe);
        }

        return null;
    };

    var readResponseHeaders = function (xhr, headers) {
        /// <summary>Reads response headers into array.</summary>
        /// <param name="xhr" type="XMLHttpRequest">HTTP request with response available.</param>
        /// <param name="headers" type="Array">Target array to fill with name/value pairs.</param>

        // ##### BEGIN: MODIFIED BY SAP
        var responseHeaders = xhr.getAllResponseHeaders();
        if (!responseHeaders){
            var contentType = xhr.getResponseHeader("Content-Type");
            var contentLength = xhr.getResponseHeader("Content-Length");
            if (contentType)
            	headers["Content-Type"] = contentType;
            if (contentLength)
            	headers["Content-Length"] = contentLength;
        }else{
        	responseHeaders = responseHeaders.split(/\r?\n/);
        	var i, len;
        	for (i = 0, len = responseHeaders.length; i < len; i++) {
        		if (responseHeaders[i]) {
        			var header = responseHeaders[i].split(": ");
        			headers[header[0]] = header[1];
        		}
        	}
        }
        // ##### END: MODIFIED BY SAP
        
    };

    var writeHtmlToIFrame = function (iframe, html) {
        /// <summary>Writes HTML to an IFRAME document.</summary>
        /// <param name="iframe" type="HTMLElement">The IFRAME element to write to.</param>
        /// <param name="html" type="String">The HTML to write.</param>
        var frameDocument = (iframe.contentWindow) ? iframe.contentWindow.document : iframe.contentDocument.document;
        frameDocument.open();
        frameDocument.write(html);
        frameDocument.close();
    };

    odata.defaultHttpClient = {
        callbackParameterName: "$callback",

        formatQueryString: "$format=json",

        enableJsonpCallback: false,

        request: function (request, success, error) {
            /// <summary>Performs a network request.</summary>
            /// <param name="request" type="Object">Request description.</request>
            /// <param name="success" type="Function">Success callback with the response object.</param>
            /// <param name="error" type="Function">Error callback with an error object.</param>
            /// <returns type="Object">Object with an 'abort' method for the operation.</returns>

            var result = {};
            var xhr = null;
            var done = false;
            var iframe;

            result.abort = function () {
                iframe = removeIFrame(iframe);
                if (done) {
                    return;
                }

                done = true;
                if (xhr) {
                    xhr.abort();
                    xhr = null;
                }

                error({ message: "Request aborted" });
            };

            var handleTimeout = function () {
                iframe = removeIFrame(iframe);
                if (!done) {
                    done = true;
                    xhr = null;
                    error({ message: "Request timed out" });
                }
            };

            var name;
            var url = request.requestUri;
            var enableJsonpCallback = defined(request.enableJsonpCallback, this.enableJsonpCallback);
            var callbackParameterName = defined(request.callbackParameterName, this.callbackParameterName);
            var formatQueryString = defined(request.formatQueryString, this.formatQueryString);
            if (!enableJsonpCallback || isLocalUrl(url)) {

                xhr = createXmlHttpRequest();
                // ##### BEGIN: MODIFIED BY SAP
                var requestCallback = function () {
                // ##### END: MODIFIED BY SAP
                    if (done || xhr === null || xhr.readyState !== 4) {
                        return;
                    }

                    // Workaround for XHR behavior on IE.
                    var statusText = xhr.statusText;
                    var statusCode = xhr.status;
                    if (statusCode === 1223) {
                        statusCode = 204;
                        statusText = "No Content";
                    }

                    var headers = [];
                    readResponseHeaders(xhr, headers);

                    var response = { requestUri: url, statusCode: statusCode, statusText: statusText, headers: headers, body: xhr.responseText };

                    done = true;
                    xhr = null;
                    if (statusCode >= 200 && statusCode <= 299) {
                        success(response);
                    } else {
                        error({ message: "HTTP request failed", request: request, response: response });
                    }
                };

                // ##### BEGIN: MODIFIED BY SAP
                if (request.user && request.password) {
                    xhr.open(request.method || "GET", url, request.async, request.user, request.password);
                } else {
                    xhr.open(request.method || "GET", url, request.async);
                }
                // ##### END: MODIFIED BY SAP

                // Set the name/value pairs.
                if (request.headers) {
                    for (name in request.headers) {
                        xhr.setRequestHeader(name, request.headers[name]);
                    }
                }

                // Set the timeout if available.
                if (request.timeoutMS) {
                    xhr.timeout = request.timeoutMS;
                    xhr.ontimeout = handleTimeout;
                }

                // ##### BEGIN: MODIFIED BY SAP
                if (request.async) {
                    xhr.onreadystatechange = requestCallback;
                }
                xhr.send(request.body);
                if (!request.async) {
                	requestCallback();
                }
                // ##### END: MODIFIED BY SAP
            } else {
                if (!canUseJSONP(request)) {
                    throw { message: "Request is not local and cannot be done through JSONP." };
                }

                var tick = ticks;
                ticks += 1;
                var tickText = tick.toString();
                var succeeded = false;
                var timeoutId;
                name = "handleJSONP_" + tickText;
                window[name] = function (data) {
                    iframe = removeIFrame(iframe);
                    if (!done) {
                        succeeded = true;
                        window.clearTimeout(timeoutId);
                        removeCallback(name, tick);

                        // Workaround for IE8 and below where trying to access data.constructor after the IFRAME has been removed
                        // throws an "unknown exception"
                        if (window.ActiveXObject && !window.DOMParser) {
                            data = window.JSON.parse(window.JSON.stringify(data));
                        }

                        // Call the success callback in the context of the parent window, instead of the IFRAME
                        delay(success, { body: data, statusCode: 200, headers: { "Content-Type": "application/json"} });
                    }
                };

                // Default to two minutes before timing out, 1000 ms * 60 * 2 = 120000.
                var timeoutMS = (request.timeoutMS) ? request.timeoutMS : 120000;
                timeoutId = window.setTimeout(handleTimeout, timeoutMS);

                var queryStringParams = callbackParameterName + "=parent." + name;
                if (this.formatQueryString) {
                    queryStringParams += "&" + formatQueryString;
                }

                var qIndex = url.indexOf("?");
                if (qIndex === -1) {
                    url = url + "?" + queryStringParams;
                } else if (qIndex === url.length - 1) {
                    url = url + queryStringParams;
                } else {
                    url = url + "&" + queryStringParams;
                }

                iframe = createIFrame(url);
            }

            return result;
        }
    };



    var contentType = function (str) {
        /// <summary>Parses a string into an object with media type and properties.</summary>
        /// <param name="str" type="String">String with media type to parse.</param>
        /// <returns>null if the string is empty; an object with 'mediaType' and a 'properties' dictionary otherwise.</returns>

        if (!str) {
            return null;
        }

        var contentTypeParts = str.split(";");
        var properties = {};

        var i, len;
        for (i = 1, len = contentTypeParts.length; i < len; i++) {
            var contentTypeParams = contentTypeParts[i].split("=");
            properties[trimString(contentTypeParams[0])] = contentTypeParams[1];
        }

        return { mediaType: trimString(contentTypeParts[0]), properties: properties };
    };

    var contentTypeToString = function (contentType) {
        /// <summary>Serializes an object with media type and properties dictionary into a string.</summary>
        /// <param name="contentType">Object with media type and properties dictionary to serialize.</param>
        /// <returns>String representation of the media type object; undefined if contentType is null or undefined.</returns>

        if (!contentType) {
            return undefined;
        }

        var result = contentType.mediaType;
        var property;
        for (property in contentType.properties) {
            result += ";" + property + "=" + contentType.properties[property];
        }
        return result;
    };

    var createReadWriteContext = function (contentType, dataServiceVersion, context, handler) {
        /// <summary>Creates an object that is going to be used as the context for the handler's parser and serializer.</summary>
        /// <param name="contentType">Object with media type and properties dictionary.</param>
        /// <param name="dataServiceVersion" type="String">String indicating the version of the protocol to use.</param>
        /// <param name="context">Operation context.</param>
        /// <param name="handler">Handler object that is processing a resquest or response.</param>
        /// <returns>Context object.</returns>

        return {
            contentType: contentType,
            dataServiceVersion: dataServiceVersion,
            metadata: context ? context.metadata : null,
            context: context,
            handler: handler
        };
    };

    var fixRequestHeader = function (request, name, value) {
        /// <summary>Sets a request header's value. If the header has already a value other than undefined, null or empty string, then this method does nothing.</summary>
        /// <param name="request">Request object on which the header will be set.</param>
        /// <param name="name" type="String">Header name.</param>
        /// <param name="value" type="String">Header value.</param>
        if (!request) {
            return;
        }

        var headers = request.headers;
        if (!headers[name]) {
            headers[name] = value;
        }
    };

    var fixDataServiceVersion = function (context, version) {
        /// <summary>Sets the dataServiceVersion component of the context.</summary>
        /// <param name="context">Context object used for serialization.</param>
        /// <param name="version" type="String">Version value.</param>
        /// <remarks>
        /// If the component has already a value other than undefined, null or 
        /// empty string, then this method does nothing.
        /// </remarks>

        if (!context.dataServiceVersion) {
            context.dataServiceVersion = version;
        }
    };

    var getRequestOrResponseHeader = function (requestOrResponse, name) {
        /// <summary>Gets the value of a request or response header.</summary>
        /// <param name="requestOrResponse">Object representing a request or a response.</param>
        /// <param name="name" type="String">Name of the header to retrieve.</param>
        /// <returns type="String">String value of the header; undefined if the header cannot be found.</returns>

        var headers = requestOrResponse.headers;
        return (headers && headers[name]) || undefined;
    };

    var getContentType = function (requestOrResponse) {
        /// <summary>Gets the value of the Content-Type header from a request or response.</summary>
        /// <param name="requestOrResponse">Object representing a request or a response.</param>
        /// <returns type="Object">Object with 'mediaType' and a 'properties' dictionary; null in case that the header is not found or doesn't have a value.</returns>

        return contentType(getRequestOrResponseHeader(requestOrResponse, "Content-Type"));
    };

    var versionRE = /^\s?(\d+\.\d+);?.*$/;
    var getDataServiceVersion = function (requestOrResponse) {
        /// <summary>Gets the value of the DataServiceVersion header from a request or response.</summary>
        /// <param name="requestOrResponse">Object representing a request or a response.</param>
        /// <returns type="String">Data service version; undefined if the header cannot be found.</returns>

        var value = getRequestOrResponseHeader(requestOrResponse, "DataServiceVersion");
        if (value) {
            var matches = versionRE.exec(value);
            if (matches && matches.length) {
                return matches[1];
            }
        }

        // Fall through and return undefined.
    };

    var handlerAccepts = function (handler, cType) {
        /// <summary>Checks that a handler can process a particular mime type.</summary>
        /// <param name="handler">Handler object that is processing a resquest or response.</param>
        /// <param name="cType">Object with 'mediaType' and a 'properties' dictionary.</param>
        /// <returns type="Boolean">True if the handler can process the mime type; false otherwise.</returns>

        // The following check isn't as strict because if cType.mediaType = application/; it will match an accept value of "application/xml";
        // however in practice we don't not expect to see such "suffixed" mimeTypes for the handlers.
        return handler.accept.indexOf(cType.mediaType) >= 0;
    };

    var handlerRead = function (handler, parseCallback, response, context) {
        /// <summary>Invokes the parser associated with a handler for reading the payload of a HTTP response.</summary>
        /// <param name="handler">Handler object that is processing the response.</param>
        /// <param name="parseCallback" type="Function">Parser function that will process the response payload.</param>
        /// <param name="response">HTTP response whose payload is going to be processed.</param>
        /// <param name="context">Object used as the context for processing the response.</param>
        /// <returns type="Boolean">True if the handler processed the response payload and the response.data property was set; false otherwise.</returns>

        if (!response || !response.headers) {
            return false;
        }

        var cType = getContentType(response);
        var version = getDataServiceVersion(response) || "";
        var body = response.body;

        if (!assigned(body)) {
            return false;
        }

        if (handlerAccepts(handler, cType)) {
            var readContext = createReadWriteContext(cType, version, context, handler);
            readContext.response = response;
            response.data = parseCallback(handler, body, readContext);
            return response.data !== undefined;
        }

        return false;
    };

    var handlerWrite = function (handler, serializeCallback, request, context) {
        /// <summary>Invokes the serializer associated with a handler for generating the payload of a HTTP request.</summary>
        /// <param name="handler">Handler object that is processing the request.</param>
        /// <param name="serializeCallback" type="Function">Serializer function that will generate the request payload.</param>
        /// <param name="response">HTTP request whose payload is going to be generated.</param>
        /// <param name="context">Object used as the context for serializing the request.</param>
        /// <returns type="Boolean">True if the handler serialized the request payload and the request.body property was set; false otherwise.</returns>
        if (!request || !request.headers) {
            return false;
        }

        var cType = getContentType(request);
        var version = getDataServiceVersion(request);

        if (!cType || handlerAccepts(handler, cType)) {
            var writeContext = createReadWriteContext(cType, version, context, handler);
            writeContext.request = request;

            request.body = serializeCallback(handler, request.data, writeContext);

            if (request.body !== undefined) {
                fixRequestHeader(request, "DataServiceVersion", writeContext.dataServiceVersion || "1.0");
                fixRequestHeader(request, "Content-Type", contentTypeToString(writeContext.contentType));
                return true;
            }
        }

        return false;
    };

    var handler = function (parseCallback, serializeCallback, accept, maxDataServiceVersion) {
        /// <summary>Creates a handler object for processing HTTP requests and responses.</summary>
        /// <param name="parseCallback" type="Function">Parser function that will process the response payload.</param>
        /// <param name="serializeCallback" type="Function">Serializer function that will generate the request payload.</param>
        /// <param name="accept" type="String">String containing a comma separated list of the mime types that this handler can work with.</param>
        /// <param name="maxDataServiceVersion" type="String">String indicating the highest version of the protocol that this handler can work with.</param>
        /// <returns type="Object">Handler object.</returns>
        
        return {
            accept: accept,
            maxDataServiceVersion: maxDataServiceVersion,

            read: function (response, context) {
                return handlerRead(this, parseCallback, response, context);
            },

            write: function (request, context) {
                return handlerWrite(this, serializeCallback, request, context);
            }
        };
    };

    var textParse = function (handler, body /*, context */) {
        return body;
    };

    var textSerialize = function (handler, data /*, context */) {
        if (assigned(data)) {
            return data.toString();
        } else {
            return undefined;
        }
    };

    odata.textHandler = handler(textParse, textSerialize, "text/plain", "2.0");



    var xmlMediaType = "application/xml";

    // URI prefixes to generate smaller code.
    var http = "http://";
    var w3org = http + "www.w3.org/";               // http://www.w3.org/
    var ado = http + "schemas.microsoft.com/ado/";  // http://schemas.microsoft.com/ado/
    var adoDs = ado + "2007/08/dataservices";       // http://schemas.microsoft.com/ado/2007/08/dataservices

    var xmlnsNS = w3org + "2000/xmlns/";            // http://www.w3.org/2000/xmlns/
    var xmlNS = w3org + "XML/1998/namespace";       // http://www.w3.org/XML/1998/namespace
    var edmxNs = ado + "2007/06/edmx";              // http://schemas.microsoft.com/ado/2007/06/edmx
    var edmNs = ado + "2008/09/edm";                // http://schemas.microsoft.com/ado/2008/09/edm
    var edmNs2 = ado + "2006/04/edm";               // http://schemas.microsoft.com/ado/2006/04/edm
    var edmNs3 = ado + "2007/05/edm";               // http://schemas.microsoft.com/ado/2007/05/edm
    var atomXmlNs = w3org + "2005/Atom";            // http://www.w3.org/2005/Atom
    var appXmlNs = w3org + "2007/app";              // http://www.w3.org/2007/app
    var odataXmlNs = adoDs;                         // http://schemas.microsoft.com/ado/2007/08/dataservices
    var odataMetaXmlNs = adoDs + "/metadata";       // http://schemas.microsoft.com/ado/2007/08/dataservices/metadata
    var odataRelatedPrefix = adoDs + "/related/";   // http://schemas.microsoft.com/ado/2007/08/dataservices/related
    var odataScheme = adoDs + "/scheme";            // http://schemas.microsoft.com/ado/2007/08/dataservices/scheme

    var hasLeadingOrTrailingWhitespace = function (text) {
        /// <summary>Checks whether the specified string has leading or trailing spaces.</summary>
        /// <param name="text" type="String">String to check.</param>
        /// <returns type="Boolean">true if text has any leading or trailing whitespace; false otherwise.</returns>

        var re = /(^\s)|(\s$)/;
        return re.test(text);
    };

    var appendAsXml = function (domNode, xmlAsText) {
        /// <summary>Appends an XML text fragment into the specified DOM element node.</summary>
        /// <param name="domNode">DOM node for the parent element.</param>
        /// <param name="xmlAsText" type="String" mayBeNull="false">XML to append as a child of element.</param>

        var value = "<c>" + xmlAsText + "</c>";
        var parsed = xmlParse(value, null);

        var doc = domNode.ownerDocument;
        var imported = parsed.domNode;
        if ("importNode" in doc) {
            imported = doc.importNode(parsed.domNode, true);
        }

        var importedChild = imported.firstChild;
        while (importedChild) {
            domNode.appendChild(importedChild);
            importedChild = importedChild.nextSibling;
        }
    };

    var safeSetProperty = function (obj, name, value) {
        /// <summary>Safely set as property in an object by invoking obj.setProperty.</summary>
        /// <param name="obj">Object that exposes a setProperty method.</param>
        /// <param name="name" type="String" mayBeNull="false">Property name.</param>
        /// <param name="value">Property value.</param>
        try {
            obj.setProperty(name, value);
        } catch (_) { }
    };

    var createDomParser = function () {
        /// <summary>Creates a DOM parser object.</summary>
        /// <returns type="DOMParser">DOMParser object.</returns>
        var exception;
        var result;
        if (window.ActiveXObject) {
            try {
                result = new ActiveXObject("Msxml2.DOMDocument.6.0");
                result.async = false;

                return result;
            } catch (_) {
                try {
                    result = new ActiveXObject("Msxml2.DOMDocument.3.0");

                    result.async = false;
                    safeSetProperty(result, "ProhibitDTD", true);
                    safeSetProperty(result, "MaxElementDepth", 256);
                    safeSetProperty(result, "AllowDocumentFunction", false);
                    safeSetProperty(result, "AllowXsltScript", false);

                    return result;
                } catch (e) {
                    exception = e;
                }
            }
        } else {
            if (window.DOMParser) {
                return new window.DOMParser();
            }
            exception = { message: "XML DOM parser not supported" };
        }
        throw exception;
    };

    var createAttributeExtension = function (wrappedNode) {
        /// <summary>Creates an extension object for the specified attribute.</summary>
        /// <param name="wrappedNode">Wrapped node for the attribute.</param>
        /// <returns type="Object">The new extension object.</returns>

        return {
            name: wrappedNode.localName,
            namespace: wrappedNode.nsURI,
            value: wrappedNode.domNode.value
        };
    };

    var createElementExtension = function (wrappedNode) {
        /// <summary>Creates an extension object for the specified element.</summary>
        /// <param name="wrappedNode">Wrapped node for the element.</param>
        /// <returns type="Object">The new extension object.</returns>

        var result = {
            name: wrappedNode.localName,
            namespace: wrappedNode.nsURI,
            value: getElementText(wrappedNode.domNode),
            attributes: [],
            children: []
        };

        xmlAttributes(wrappedNode, function (wrappedAttribute) {
            // Namespace declarations aren't processed, because every extension
            // is namespace-qualified.
            if (wrappedAttribute.nsURI !== xmlnsNS) {
                result.attributes.push(createAttributeExtension(wrappedAttribute));
            }
        });

        xmlChildElements(wrappedNode, function (wrappedElement) {
            result.children.push(createElementExtension(wrappedElement));
        });

        return result;
    };

    var isWhitespace = function (text) {
        /// <summary>Determines whether the specified text is empty or whitespace.</summary>
        /// <param name="text" type="String">Value to inspect.</param>
        /// <returns type="Boolean">true if the text value is empty or all whitespace; false otherwise.</returns>
        var ws = /^\s*$/;
        return text === null || ws.test(text);
    };

    var isWhitespacePreserveContext = function (domElement) {
        /// <summary>Determines whether the specified element has xml:space='preserve' applied.</summary>
        /// <param name="domElement">Element to inspect.</param>
        /// <returns type="Boolean">Whether xml:space='preserve' is in effect.</returns>
        while (domElement !== null && domElement.nodeType === 1) {
            var val = xml_attribute(domElement, "space", xmlNS);
            if (val === "preserve") {
                return true;
            } else if (val === "default") {
                break;
            } else {
                domElement = domElement.parentNode;
            }
        }

        return false;
    };

    var getElementText = function (domElement) {
        /// <summary>
        /// Gets the concatenated value of all immediate child text and CDATA nodes for the specified element.
        /// </summary>
        /// <param name="domElement">Element to get values for.</param>
        /// <returns type="String" mayBeNull="true">Text for all direct children.</returns>

        var result = null;
        var cursor = domElement.firstChild;
        var whitespaceAlreadyRemoved = domElement.ownerDocument.preserveWhiteSpace === false;
        var whitespacePreserveContext;
        while (cursor) {
            if (cursor.nodeType === 3 || cursor.nodeType === 4) {
                // isElementContentWhitespace indicates that this is 'ignorable whitespace',
                // but it's not defined by all browsers, and does not honor xml:space='preserve'
                // in some implementations.
                //
                // If we can't tell either way, we walk up the tree to figure out whether
                // xml:space is set to preserve; otherwise we discard pure-whitespace.
                //
                // For example <a>  <b>1</b></a>. The space between <a> and <b> is usually 'ignorable'.
                var text = cursor.nodeValue;
                var shouldInclude = whitespaceAlreadyRemoved || !isWhitespace(text);
                if (!shouldInclude) {
                    // Walk up the tree to figure out whether we are in xml:space='preserve' context
                    // for the cursor (needs to happen only once).
                    if (whitespacePreserveContext === undefined) {
                        whitespacePreserveContext = isWhitespacePreserveContext(domElement);
                    }

                    shouldInclude = whitespacePreserveContext;
                }

                if (shouldInclude) {
                    if (!result) {
                        result = text;
                    } else {
                        result += text;
                    }
                }
            }

            cursor = cursor.nextSibling;
        }

        return result;
    };

    var getSingleElementByTagNameNS = function (domNode, namespaceURI, localName) {
        /// <summary>Gets the first element under 'domNode' with the spacified name and namespace.</summary>
        /// <param name="domNode">DOM element node.</param>
        /// <param name="namespaceURI" type="String">The namespace URI of the element to match.</param>
        /// <param name="localName" type="String">The local name of the element to match.</param>
        /// <returns>The first element found, null if none.</returns>
        /// <remarks>namespaceURI should be a specific namespace, otherwise the behavior is unspecified.</remarks>

        var result;
        if (domNode.getElementsByTagNameNS) {
            result = domNode.getElementsByTagNameNS(namespaceURI, localName);
            if (result.length !== 0) {
                return result[0];
            }
        } else {
            var child = domNode.firstChild;
            while (child) {
                if (child.nodeType === 1 &&
                    xmlLocalName(child) === localName &&
                    child.namespaceURI === namespaceURI) {
                    return child;
                }

                child = child.nextSibling;
            }
        }

        return null;
    };

    var checkParserErrorElement = function (element, text) {
        /// <summary>Checks whether the specified element is a parser error element.</summary>
        /// <param name="element">Element to check.</param>
        /// <param name="text" type="String">Original text that was being parsed.</param>
        /// <remarks>
        /// DOMParser-based parsers don't throw an exception but instead return a
        /// specific document; this function checks this case and normalizes to
        /// an exception being thrown.
        /// </remarks>

        // Firefox reports errors with a specific element.
        var parserErrorNS = "http://www.mozilla.org/newlayout/xml/parsererror.xml";
        var wrappedElement = xml_wrapNode(element, "");
        if (wrappedElement.localName === "parsererror" && wrappedElement.nsURI === parserErrorNS) {
            var reason = getElementText(element);
            var sourceTextElement = getSingleElementByTagNameNS(wrappedElement, parserErrorNS, "sourcetext");
            var srcText = (sourceTextElement) ? sourceTextElement.nodeValue : "";
            throw { message: reason, errorXmlText: text, srcText: srcText };
        }

        // Chrome reports errors by injecting a header with an error message.
        // The error may be localized, so instead we simply check for a header as the
        // top element or first child of the document.
        var xhtmlNS = "http://www.w3.org/1999/xhtml";
        if (wrappedElement.localName === "h3" && wrappedElement.nsURI == xhtmlNS ||
            getSingleElementByTagNameNS(element, xhtmlNS, "h3")) {
            throw { message: xmlInnerText(element), errorXmlText: text, srcText: "" };
        }
    };

    var xmlAddNamespaceAttribute = function (domNode, name, attributeNamespace) {
        /// <summary>Adds a namespace declaration attribute to the specified element node.</summary>
        /// <param name="domNode">DOM node for the element.</param>
        /// <param name="domNode" type="String">Attribute name, eg: xmlns, xmlns:foo, xmlns:bar.</param>
        /// <param name="attributeNamespace" type="String">Namespace to associate.</param>

        var doc = domNode.ownerDocument;
        var attribute;
        if (doc.createAttributeNS) {
            attribute = doc.createAttributeNS(xmlnsNS, name);
        } else {
            attribute = doc.createNode(2, name, xmlnsNS);
        }

        attribute.nodeValue = attributeNamespace;
        domNode.setAttributeNode(attribute);
    };

    var xmlAppendPreserving = function (domNode, text) {
        /// <summary>Appends a text node into the specified DOM element node.</summary>
        /// <param name="domNode">DOM node for the element.</param>
        /// <param name="text" type="String" mayBeNull="false">Text to append as a child of element.</param>

        if (hasLeadingOrTrailingWhitespace(text)) {
            var attr = xmlNewDomAttribute(domNode, "space", xmlNS, "xml");
            attr.value = "preserve";
        }

        var textNode = domNode.ownerDocument.createTextNode(text);
        domNode.appendChild(textNode);
    };

    var xmlAttributes = function (element, onAttributeCallback) {
        /// <summary>Iterates through the XML element's attributes and invokes the callback function for each one.</summary>
        /// <param name="element">Wrapped element to iterate over.</param>
        /// <param name="onAttributeCallback" type="Function">Callback function to invoke with wrapped attribute nodes.</param>

        var attribute;
        var domNode = element.domNode;
        var i, len;
        for (i = 0, len = domNode.attributes.length; i < len; i++) {
            attribute = domNode.attributes.item(i);
            onAttributeCallback(xml_wrapNode(attribute));
        }
    };

    var xmlAttribute = function (element, localName, nsURI) {
        /// <summary>Returns the value of an xml element attribute.</summary>
        return xml_attribute(element.domNode, localName, nsURI);
    };

    var xmlAttributeNode = function (domNode, localName, nsURI) {
        /// <summary>Gets an attribute node from an element.</summary>
        /// <param name="domNode">DOM node for the parent element.</param>
        /// <param name="localName" type="String">Local name for the attribute.</param>
        /// <param name="nsURI" type="String">Namespace URI for the attribute.</param>
        /// <returns>The attribute node, null if not found.</returns>

        var attributes = domNode.attributes;
        if (attributes.getNamedItemNS) {
            return attributes.getNamedItemNS(nsURI, localName);
        }

        return attributes.getQualifiedItem(localName, nsURI);
    };

    var xmlChildElements = function (element, onElementCallback) {
        /// <summary>Iterates through the XML element's child elements and invokes the callback function for each one.</summary>
        /// <param name="element">Wrapped element to iterate over.</param>
        /// <param name="onElementCallback" type="Function">Callback function to invoke with wrapped element nodes.</param>

        var child = element.domNode.firstChild;
        var childBaseURI;
        while (child !== null) {
            if (child.nodeType === 1) {
                childBaseURI = normalizeURI(xml_baseURI(child), element.baseURI);
                onElementCallback(xml_wrapNode(child, childBaseURI));
            }

            child = child.nextSibling;
        }
    };

    var xmlFirstElement = function (element) {
        /// <summary>Returns the first child element (wrapped) of the specified element.</summary>
        /// <param name="element">Element to get first child for.</param>
        /// <returns>This first child element (wrapped), null if there is none.</returns>

        var child = element.domNode.firstChild;
        var childBaseURI;
        while (child !== null) {
            if (child.nodeType === 1) {
                childBaseURI = normalizeURI(xml_baseURI(child), element.baseURI);
                return xml_wrapNode(child, childBaseURI);
            }

            child = child.nextSibling;
        }

        return null;
    };

    var xmlInnerText = function (domNode) {
        /// <summary>Returns the text value of an XML element.</summary>
        /// <param name="domNode">DOM element</param>
        /// <returns type="String">
        /// The text content of the node or the concatenated text
        /// representing the node and its descendants; never null.
        /// </returns>

        var result = domNode.text;
        if (result !== undefined) {
            return result;
        }

        result = "";

        var cursor = domNode.firstChild;
        if (cursor) {
            do {
                // Process the node.
                if (cursor.nodeType === 3 || cursor.nodeType === 4) {
                    result += cursor.nodeValue;
                }

                // Advance the node.
                var next = cursor.firstChild;
                if (!next) {
                    while (cursor !== domNode) {
                        next = cursor.nextSibling;
                        if (next) {
                            cursor = next;
                            break;
                        } else {
                            cursor = cursor.parentNode;
                        }
                    }
                } else {
                    cursor = next;
                }
            } while (cursor !== domNode);
        }

        return result;
    };

    var xmlLocalName = function (node) {
        /// <summary>Returns the localName of a XML node.</summary>
        /// <param name="node">DOM node to get value for.</param>
        /// <returns type="String">localName of node.</returns>

        if (node.localName) {
            return node.localName;
        }

        return node.baseName;
    };

    var xmlNewDocument = function (name, nsURI) {
        /// <summary>Creates a new XML document.</summary>
        /// <param name="name" type="String">Local name of the root element.</param>
        /// <param name="nsURI" type="String">Namespace of the root element.</param>
        /// <returns>The wrapped root element of the document.</returns>

        var dom;

        if (window.ActiveXObject) {
            dom = createDomParser();
            dom.documentElement = dom.createNode(1, name, nsURI);
        }
        else if (window.document.implementation && window.document.implementation.createDocument) {
            dom = window.document.implementation.createDocument(nsURI, name, null);
        }

        return xml_wrapNode(dom.documentElement);
    };

    var xmlNewDomAttribute = function (domNode, localName, nsURI, nsPrefix) {
        /// <summary>Creates a new unwrapped DOM attribute.</summary>
        /// <param name="domNode">Parent element to which new node should be added.</param>
        /// <param name="localName" type="String">Local name for attribute.</param>
        /// <param name="nsURI" type="String">Namespace URI for the attribute.</param>
        /// <param name="nsPrefix" type="String">Namespace prefix for attribute to be created.</param>
        /// <returns>The created DOM attribute.</returns>

        var doc = domNode.ownerDocument;
        var attribute;
        localName = (nsPrefix) ? (nsPrefix + ":" + localName) : localName;
        if (doc.createAttributeNS) {
            attribute = doc.createAttributeNS(nsURI, localName);
            domNode.setAttributeNodeNS(attribute);
        } else {
            attribute = doc.createNode(2, localName, nsURI || undefined);
            domNode.setAttributeNode(attribute);
        }

        return attribute;
    };

    var xmlNewDomElement = function (domNode, localName, nsURI, nsPrefix) {
        /// <summary>Creates a new unwrapped DOM element.</summary>
        /// <param name="domNode">Parent element to which new node should be added.</param>
        /// <param name="localName" type="String">Local name for element.</param>
        /// <param name="nsURI" type="String">Namespace URI for the element.</param>
        /// <param name="nsPrefix" type="String">Namespace prefix for attribute to be created.</param>
        /// <returns>The created DOM element.</returns>

        var doc = domNode.ownerDocument;
        var element;
        localName = (nsPrefix) ? (nsPrefix + ":" + localName) : localName;
        if (doc.createElementNS) {
            element = doc.createElementNS(nsURI, localName);
        } else {
            element = doc.createNode(1, localName, nsURI || undefined);
        }

        domNode.appendChild(element);
        return element;
    };

    var xmlNewElement = function (parent, name, nsURI, value) {
        /// <summary>Creates a new wrapped element.</summary>
        /// <param name="parent">Wrapped parent element to which new node should be added.</param>
        /// <param name="name" type="String">Local name for element.</param>
        /// <param name="nsURI" type="String">Namespace URI for the element.</param>
        /// <param name="value" type="String" mayBeNull="true">Text value to append in element, if applicable.</param>
        /// <returns>The created wrapped element.</returns>

        var dom = parent.domNode.ownerDocument;

        var element;
        if (dom.createElementNS) {
            element = dom.createElementNS(nsURI, name);
        } else {
            element = dom.createNode(1, name, nsURI || undefined);
        }

        if (value) {
            xmlAppendPreserving(element, value);
        }

        parent.domNode.appendChild(element);
        return xml_wrapNode(element);
    };

    var xmlNewAttribute = function (element, name, nsURI, value) {
        /// <summary>Creates a new wrapped attribute.</summary>
        /// <param name="element">Wrapped parent element to which new node should be added.</param>
        /// <param name="name" type="String">Local name for element.</param>
        /// <param name="nsURI" type="String">Namespace URI for the element.</param>
        /// <param name="value" type="String">Node value for the attribute.</param>
        /// <returns>The created wrapped attribute.</returns>

        var dom = element.domNode.ownerDocument;

        var attribute;
        if (dom.createAttributeNS) {
            attribute = dom.createAttributeNS(nsURI, name);
            attribute.value = value;
            element.domNode.setAttributeNodeNS(attribute);
        } else {
            attribute = dom.createNode(2, name, nsURI || undefined);
            attribute.value = value;
            element.domNode.setAttributeNode(attribute);
        }

        return xml_wrapNode(attribute);
    };

    var xmlQualifyXmlTagName = function (name, prefix) {
        /// <summary>Qualifies an XML tag name with the specified prefix.</summary>
        /// <param name="name" type="String">Element name</param>
        /// <param name="prefix" type="String">Prefix to use, possibly null.</param>
        /// <returns type="String">The qualified name.</returns>
        /// <remarks>This operates at the lexical level - there is no awareness of in-scope prefixes.</remarks>

        if (prefix) {
            return prefix + ":" + name;
        }

        return name;
    };

    var xmlParse = function (text, baseURI) {
        /// <summary>Returns an XML document from the specified text.</summary>
        /// <param name="text" type="String">Document text.</param>
        /// <param name="baseURI" type="String">Base URI for the document.</param>
        /// <returns>The wrapped root element of the document.</returns>

        var root = xml_parse(text);
        var rootBaseURI = normalizeURI(xml_baseURI(root), baseURI);
        return xml_wrapNode(root, rootBaseURI);
    };

    var xmlSerialize = function (root) {
        /// <summary>
        /// Returns the text representation of the document to which the specified node belongs.
        /// </summary>
        /// <param name="root">Wrapped element in the document to serialize.</param>
        /// <returns type="String">Serialized document.</returns>

        var dom = root.domNode.ownerDocument;
        return xmlSerializeNode(dom);
    };

    var xmlSerializeChildren = function (domNode) {
        /// <summary>Returns the XML representation of the all the descendants of the node.</summary>
        /// <param name="domNode" optional="false" mayBeNull="false">Node to serialize.</param>
        /// <returns type="String">The XML representation of all the descendants of the node.</returns>

        var children = domNode.childNodes;
        var i, len = children.length;
        if (len === 0) {
            return "";
        }

        var fragment = domNode.ownerDocument.createDocumentFragment();
        for (i = 0; i < len; i++) {
            fragment.appendChild(children[i].cloneNode(true));
        }

        return xmlSerializeNode(fragment);
    };

    var xmlSerializeNode = function (domNode) {
        /// <summary>Returns the XML representation of the node and all its descendants.</summary>
        /// <param name="domNode" optional="false" mayBeNull="false">Node to serialize.</param>
        /// <returns type="String">The XML representation of the node and all its descendants.</returns>

        var xml = domNode.xml;
        if (xml !== undefined) {
            return xml;
        }

        if (window.XMLSerializer) {
            var serializer = new window.XMLSerializer();
            return serializer.serializeToString(domNode);
        }

        throw { message: "XML serialization unsupported" };
    };

    var xml_attribute = function (domNode, localName, nsURI) {
        /// <summary>Gets the value of a DOM attribute.</summary>
        /// <param name="domNode">DOM element to get attribute for.</param>
        /// <param name="localName" type="String">Name of the attribute to get.</param>
        /// <param name="nsURI" type="String">Namespace of the attribute to get.</param>
        /// <returns type="String">Value of the attribute if found; null otherwise.</returns>

        if (domNode.getAttributeNS) {
            return domNode.getAttributeNS(nsURI || null, localName);
        }

        // The method is not supported so we work with the attributes collection. 
        var node = domNode.attributes.getQualifiedItem(localName, nsURI);
        if (node) {
            return node.value;
        }

        return null;
    };

    var xml_baseURI = function (domNode) {
        /// <summary>Gets the value of the xml:base attribute on the specified element.</summary>
        /// <param name="domNode">Element to get attribute value from.</param>
        /// <returns type="String">Value of the xml:base attribute if found; null otherwise.</returns>

        return xml_attribute(domNode, "base", xmlNS);
    };

    var xml_parse = function (text) {
        /// <summary>Returns an XML document from the specified text.</summary>
        /// <param name="text" type="String">Document text.</param>
        /// <returns>The root element of the document.</returns>

        var dom = createDomParser();
        if (dom.parseFromString) {
            dom = dom.parseFromString(text, "text/xml");
            checkParserErrorElement(dom.documentElement, text);
        } else {
            dom.loadXML(text);
            if (dom.parseError.errorCode !== 0) {
                throw { message: dom.parseError.reason, errorXmlText: text, srcText: dom.parseError.srcText };
            }
        }

        return dom.documentElement;
    };

    var xml_wrapNode = function (domNode, baseURI) {
        /// <summary>Creates a wrapped DOM node.</summary>
        /// <param name="domNode">DOM node to wrap.</param>
        /// <param name="baseURI" type="String">Base URI in scope for the node.</param>
        /// <returns type="Object">
        /// An object with the wrapped domNode, information about its in-scope URI, and simple 
        /// access to name and namespace.
        /// </returns>

        var nsURI = domNode.namespaceURI;
        var nodeName = domNode.nodeName;

        // MSXML 3.0 doesn't return a namespaceURI for xmlns attributes.
        if (!nsURI) {
            if (domNode.nodeType === 2 && (nodeName === "xmlns" || nodeName.indexOf("xmlns:", 0) === 0)) {
                nsURI = xmlnsNS;
            } else {
                nsURI = null;
            }
        }

        return {
            baseURI: baseURI,
            domNode: domNode,
            localName: xmlLocalName(domNode),
            nsURI: nsURI
        };
    };

    var readODataXmlDocument = function (xmlRoot) {
        /// <summary>Reads an OData link(s) producing an object model in return.</summary>
        /// <param name="xmlRoot">Top-level element to read.</param>
        /// <returns type="Object">The object model representing the specified element.</returns>

        if (xmlRoot.nsURI === odataXmlNs) {
            switch (xmlRoot.localName) {
                case "links":
                    return readLinks(xmlRoot);
                case "uri":
                    return readUri(xmlRoot);
            }
        }
        return undefined;
    };

    var readLinks = function (linksElement) {
        /// <summary>Deserializes an OData XML links element.</summary>
        /// <param name="linksElement">XML links element.</param>
        /// <returns type="Object">A new object representing the links collection.</returns>

        var uris = [];

        xmlChildElements(linksElement, function (child) {
            if (child.localName === "uri" && child.nsURI === odataXmlNs) {
                var uri = readUri(child);
                uris.push(uri);
            }
        });

        return { results: uris };
    };

    var readUri = function (uriElement) {
        /// <summary>Deserializes an OData XML uri element.</summary>
        /// <param name="uriElement">XML uri element.</param>
        /// <returns type="Object">A new object representing the uri.</returns>

        return { uri: xmlInnerText(uriElement.domNode) };
    };

    var writeODataXmlDocument = function (data) {
        /// <summary>Writes the specified data into an OData XML document.</summary>
        /// <param name="data">Data to write.</param>
        /// <returns>The root of the DOM tree built.</returns>

        if (payloadTypeOf(data) === PAYLOADTYPE_COMPLEXTYPE &&
           !data.__metadata && data.hasOwnProperty("uri")) {
            return writeUri(data);
        }

        // Allow for undefined to be returned.
    };

    var writeUri = function (data) {
        /// <summary>Writes the specified uri data into an OData XML uri document.</summary>
        /// <param name="data">Uri data to write in intermediate format.</param>
        /// <returns>The feed element of the DOM tree built.</returns>

        var uri = writeODataXmlNode(null, "uri", odataXmlNs);
        if (data.uri) {
            xmlAppendPreserving(uri.domNode, data.uri);
        }

        return uri;
    };

    var writeODataXmlNode = function (parent, name, nsURI) {
        /// <summary>Writes the root of an OData XML document, possibly under an existing element.</summary>
        /// <param name="parent" mayBeNull="true">Element under which to create a new element.</param>
        /// <param name="name">Name for the new element.</param>
        /// <param name="nsURI" type="String">Namespace URI for the element.</param>
        /// <returns>The created element.</returns>

        if (parent) {
            return xmlNewElement(parent, name, nsURI);
        }
        return xmlNewDocument(name, nsURI);
    };

    var xmlParser = function (handler, text) {
        /// <summary>Parses an OData XML document.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="text" type="String">Document text.</param>
        /// <returns>An object representation of the document; undefined if not applicable.</returns>

        if (text) {
            var root = xmlParse(text);
            if (root) {
                return readODataXmlDocument(root);
            }
        }

        // Allow for undefined to be returned.
    };

    var xmlSerializer = function (handler, data, context) {
        /// <summary>Serializes an OData XML object into a document.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="data" type="Object">Representation of feed or entry.</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>A text representation of the data object; undefined if not applicable.</returns>

        var cType = context.contentType = context.contentType || contentType(xmlMediaType);
        var result = undefined;
        if (cType && cType.mediaType === xmlMediaType) {
            var xmlDoc = writeODataXmlDocument(data);
            if (xmlDoc) {
                result = xmlSerialize(xmlDoc);
            }
        }
        return result;
    };

    odata.xmlHandler = handler(xmlParser, xmlSerializer, xmlMediaType, "2.0");



    var atomAcceptTypes = ["application/atom+xml", "application/atomsvc+xml", "application/xml"];
    var atomMediaType = atomAcceptTypes[0];

    var inlineTag = xmlQualifyXmlTagName("inline", "m");
    var propertiesTag = xmlQualifyXmlTagName("properties", "m");
    var propertyTypeAttribute = xmlQualifyXmlTagName("type", "m");
    var propertyNullAttribute = xmlQualifyXmlTagName("null", "m");

    // These are the namespaces that are not considered ATOM extension namespaces.
    var nonExtensionNamepaces = [atomXmlNs, appXmlNs, xmlNS, xmlnsNS];

    // These are entity property mapping paths that have well-known paths.
    var knownCustomizationPaths = {
        SyndicationAuthorEmail: "author/email",
        SyndicationAuthorName: "author/name",
        SyndicationAuthorUri: "author/uri",
        SyndicationContributorEmail: "contributor/email",
        SyndicationContributorName: "contributor/name",
        SyndicationContributorUri: "contributor/uri",
        SyndicationPublished: "published",
        SyndicationRights: "rights",
        SyndicationSummary: "summary",
        SyndicationTitle: "title",
        SyndicationUpdated: "updated"
    };

    var isExtensionNs = function (nsURI) {
        /// <summary>Checks whether the specified namespace is an extension namespace to ATOM.</summary>
        /// <param type="String" name="nsURI">Namespace to check.</param>
        /// <returns type="Boolean">true if nsURI is an extension namespace to ATOM; false otherwise.</returns>

        return !(contains(nonExtensionNamepaces, nsURI));
    };

    var propertyTypeDefaultConverter = function (propertyValue) {
        /// <summary>Does a no-op conversion on the specified value.</summary>
        /// <param name="propertyValue">Value to convert.</param>
        /// <returns>Original property value.</returns>

        return propertyValue;
    };

    var parseBool = function (propertyValue) {
        /// <summary>Parses a string into a boolean value.</summary>
        /// <param name="propertyValue">Value to parse.</param>
        /// <returns type="Boolean">true if the property value is 'true'; false otherwise.</returns>

        return propertyValue === "true";
    };

    // The captured indices for this expression are:
    // 0     - complete input
    // 1,2,3 - year with optional minus sign, month, day
    // 4,5,6 - hours, minutes, seconds
    // 7     - optional milliseconds
    // 8     - everything else (presumably offset information)
    var parseDateTimeRE = /^(-?\d{4,})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(.*)$/;

    var parseDateTimeMaybeOffset = function (value, withOffset) {
        /// <summary>Parses a string into a DateTime value.</summary>
        /// <param name="value" type="String">Value to parse.</param>
        /// <param name="withOffset" type="Boolean">Whether offset is expected.</param>
        /// <returns type="Date">The parsed value.</returns>

        // We cannot parse this in cases of failure to match or if offset information is specified.
        var parts = parseDateTimeRE.exec(value);
        var offset = (parts) ? getCanonicalTimezone(parts[8]) : null;

        if (!parts || (!withOffset && offset !== "Z")) {
            throw { message: "Invalid date/time value" };
        }

        // Pre-parse years, account for year '0' being invalid in dateTime.
        var year = parseInt10(parts[1]);
        if (year <= 0) {
            year++;
        }

        // Pre-parse optional milliseconds, fill in default. Fail if value is too precise.
        var ms = parts[7];
        var ns = 0;
        if (!ms) {
            ms = 0;
        } else {
            if (ms.length > 7) {
                throw { message: "Cannot parse date/time value to given precision." };
            }

            ns = formatNumberWidth(ms.substring(3), 4, true);
            ms = formatNumberWidth(ms.substring(0, 3), 3, true);
            
            ms = parseInt10(ms);
            ns = parseInt10(ns);
        }

        // Pre-parse other time components and offset them if necessary.
        var hours = parseInt10(parts[4]);
        var minutes = parseInt10(parts[5]);
        var seconds = parseInt10(parts[6]);
        if (offset !== "Z") {
            // The offset is reversed to get back the UTC date, which is
            // what the API will eventually have.
            var timezone = parseTimezone(offset);
            var direction = -(timezone.d);
            hours += timezone.h * direction;
            minutes += timezone.m * direction;
        }

        // Set the date and time separately with setFullYear, so years 0-99 aren't biased like in Date.UTC.
        var result = new Date();
        result.setUTCFullYear(
            year,                       // Year.
            parseInt10(parts[2]) - 1,   // Month (zero-based for Date.UTC and setFullYear).
            parseInt10(parts[3])        // Date.
            );
        result.setUTCHours(hours, minutes, seconds, ms);

        if (isNaN(result.valueOf())) {
            throw { message: "Invalid date/time value" };
        }

        if (withOffset) {
            result.__edmType = "Edm.DateTimeOffset";
            result.__offset = offset;
        }

        if (ns) {
            result.__ns = ns;
        }

        return result;
    };

    var parseDateTime = function (propertyValue) {
        /// <summary>Parses a string into a DateTime value.</summary>
        /// <param name="propertyValue" type="String">Value to parse.</param>
        /// <returns type="Date">The parsed value.</returns>

        return parseDateTimeMaybeOffset(propertyValue, false);
    };

    var parseDateTimeOffset = function (propertyValue) {
        /// <summary>Parses a string into a DateTimeOffset value.</summary>
        /// <param name="propertyValue" type="String">Value to parse.</param>
        /// <returns type="Date">The parsed value.</returns>
        /// <remarks>
        /// The resulting object is annotated with an __edmType property and
        /// an __offset property reflecting the original intended offset of
        /// the value. The time is adjusted for UTC time, as the current
        /// timezone-aware Date APIs will only work with the local timezone.
        /// </remarks>

        return parseDateTimeMaybeOffset(propertyValue, true);
    };

    // Property type converters are parsers that convert strings into typed values.
    var propertyTypeConverters = {
        "Edm.Boolean": parseBool,
        "Edm.Binary": propertyTypeDefaultConverter,
        "Edm.DateTime": parseDateTime,
        "Edm.DateTimeOffset": parseDateTimeOffset,
        "Edm.Time": parseDuration,
        "Edm.Decimal": propertyTypeDefaultConverter,
        "Edm.Guid": propertyTypeDefaultConverter,
        "Edm.String": propertyTypeDefaultConverter,
        "Edm.Byte": parseInt10,
        "Edm.Double": parseFloat,
        "Edm.Single": parseFloat,
        "Edm.Int16": parseInt10,
        "Edm.Int32": parseInt10,
        "Edm.Int64": propertyTypeDefaultConverter,
        "Edm.SByte": parseInt10
    };

    var formatToString = function (value) {
        /// <summary>Formats a value by invoking .toString() on it.</summary>
        /// <param name="value" mayBeNull="false">Value to format.</param>
        /// <returns type="String">Formatted text.</returns>

        return value.toString();
    };

    // Property type formatters are serializers that convert typed values into strings.
    var propertyTypeFormatters = {
        "Edm.Binary": formatToString,
        "Edm.Boolean": formatToString,
        "Edm.Byte": formatToString,
        "Edm.DateTime": formatDateTimeOffset,
        "Edm.DateTimeOffset": formatDateTimeOffset,
        "Edm.Decimal": formatToString,
        "Edm.Double": formatToString,
        "Edm.Guid": formatToString,
        "Edm.Int16": formatToString,
        "Edm.Int32": formatToString,
        "Edm.Int64": formatToString,
        "Edm.SByte": formatToString,
        "Edm.Single": formatToString,
        "Edm.String": formatToString,
        "Edm.Time": formatDuration
    };

    var isPrimitiveType = function (typeName) {
        /// <summary>Checks whether the specified type name is a primitive type.</summary>
        /// <param name="typeName" type="String" mayBeNull="true">Name of type to check.</param>
        /// <returns type="Boolean">
        /// true if the type is the name of a primitive type; false otherwise.
        /// </returns>

        return typeName && (propertyTypeConverters[typeName] !== undefined);
    };

    var convertFromAtomPropertyText = function (value, targetType) {
        /// <summary>Converts a text value to the specified target type.</summary>
        /// <param name="value" type="String" mayBeNull="true">Text value to convert.</param>
        /// <param name="targetType" type="String" mayBeNull="true">Name of type to convert from.</param>
        /// <returns>The converted value.</returns>

        if (value !== null && targetType) {
            var converter = propertyTypeConverters[targetType];
            if (converter) {
                value = converter(value);
            }
        }

        return value;
    };

    var convertToAtomPropertyText = function (value, targetType) {
        /// <summary>Converts a typed value from the specified target type into a text value.</summary>
        /// <param name="value">Typed value to convert.</param>
        /// <param name="targetType" type="String" mayBeNull="true">Name of type to convert to.<param>
        /// <returns type="String">The converted value as text.</returns>

        if (value !== null && targetType) {
            if (isDate(value)) {
                targetType = (isDateTimeOffset(value)) ? "Edm.DateTimeOffset" : "Edm.DateTime";
            }

            var converter = propertyTypeFormatters[targetType];
            if (converter) {
                value = converter(value);
            }
        }

        return value;
    };

    var readAtomDocument = function (atomElement, metadata) {
        /// <summary>Reads an ATOM entry, feed or service document, producing an object model in return.</summary>
        /// <param name="atomElement">Top-level element to read.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>
        /// <returns type="Object">The object model representing the specified element, undefined if the top-level element is not part of the ATOM specification.</returns>

        // Handle feed and entry elements.
        if (atomElement.nsURI === atomXmlNs) {
            switch (atomElement.localName) {
                case "feed":
                    return readAtomFeed(atomElement, metadata);
                case "entry":
                    return readAtomEntry(atomElement, metadata);
            }
        }

        // Handle service documents. 
        if (atomElement.nsURI === appXmlNs && atomElement.localName === "service") {
            return readAtomServiceDocument(atomElement);
        }

        // Allow undefined to be returned.
    };

    var readAtomFeed = function (atomFeed, metadata) {
        /// <summary>Deserializes an ATOM feed element.</summary>
        /// <param name="atomFeed">ATOM feed element.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>
        /// <returns type="Object">A new object representing the feed.</returns>
        var feedMetadata = {};
        var feed = {
            results: [],
            __metadata: feedMetadata
        };

        feedMetadata.feed_extensions = readAtomExtensionAttributes(atomFeed);

        xmlChildElements(atomFeed, function (feedChild) {
            switch (feedChild.nsURI) {
                case atomXmlNs:
                    switch (feedChild.localName) {
                        case "id":
                            feedMetadata.uri = normalizeURI(xmlInnerText(feedChild.domNode), feedChild.baseURI);
                            feedMetadata.uri_extensions = readAtomExtensionAttributes(feedChild);
                            break;
                        case "title":
                            feedMetadata.title = xmlInnerText(feedChild.domNode);
                            feedMetadata.title_extensions = readAtomExtensionAttributes(feedChild);
                            break;
                        case "entry":
                            var entry = readAtomEntry(feedChild, metadata);
                            feed.results.push(entry);
                            break;
                        case "link":
                            readAtomFeedLink(feedChild, feed);
                            break;
                    }
                    return;
                case odataMetaXmlNs:
                    if (feedChild.localName === "count") {
                        feed.__count = parseInt10(xmlInnerText(feedChild.domNode));
                        return;
                    }
                    break;
            }

            var extension = readAtomExtensionElement(feedChild);
            feedMetadata.feed_extensions.push(extension);
        });

        return feed;
    };

    var readAtomFeedLink = function (feedLinkElement, feed) {
        /// <summary>Reads an ATOM link element for a feed.</summary>
        /// <param name="feedLinkElement">Link element to read.</param>
        /// <param name="feed">Feed object to be annotated with information.</param>

        var link = readAtomLink(feedLinkElement);
        var feedMetadata = feed.__metadata;
        switch (link.rel) {
            case "next":
                feed.__next = link.href;
                feedMetadata.next_extensions = link.extensions;
                break;
            case "self":
                feedMetadata.self = link.href;
                feedMetadata.self_extensions = link.extensions;
                break;
        }
    };

    var readAtomLink = function (linkElement) {
        /// <summary>Reads an ATOM link element.</summary>
        /// <param name="linkElement">Link element to read.</param>
        /// <returns type="Object">A link element representation.</returns>

        var link = { extensions: [] };
        var linkExtension;

        xmlAttributes(linkElement, function (attribute) {
            if (!attribute.nsURI) {
                switch (attribute.localName) {
                    case "href":
                        link.href = normalizeURI(attribute.domNode.nodeValue, linkElement.baseURI);
                        return;
                    case "type":
                    case "rel":
                        link[attribute.localName] = attribute.domNode.nodeValue;
                        return;
                }
            }

            if (isExtensionNs(attribute.nsURI)) {
                linkExtension = readAtomExtensionAttribute(attribute);
                link.extensions.push(linkExtension);
            }
        });

        if (!link.href) {
            throw { error: "href attribute missing on link element", element: linkElement };
        }

        return link;
    };

    var readAtomExtensionElement = function (atomExtension) {
        /// <summary>Reads an ATOM extension element (an element not in the ATOM namespaces).</summary>
        /// <param name="atomExtension">ATOM extension element.</param>
        /// <returns type="Object">An extension element representation.</returns>

        var extension = {
            name: atomExtension.localName,
            namespaceURI: atomExtension.nsURI,
            attributes: readAtomExtensionAttributes(atomExtension),
            children: []
        };

        xmlChildElements(atomExtension, function (child) {
            var childExtension = readAtomExtensionElement(child);
            extension.children.push(childExtension);
        });

        if (extension.children.length === 0) {
            var text = xmlInnerText(atomExtension.domNode);
            if (text) {
                extension.value = text;
            }
        }

        return extension;
    };

    var readAtomExtensionAttributes = function (xmlElement) {
        /// <summary>Reads ATOM extension attributes from an element.</summary>
        /// <param name="xmlElement">ATOM element with zero or more extension attributes.</param>
        /// <returns type="Array">An array of extension attribute representations.</returns>

        var extensions = [];
        xmlAttributes(xmlElement, function (attribute) {
            if (isExtensionNs(attribute.nsURI)) {
                var extension = readAtomExtensionAttribute(attribute);
                extensions.push(extension);
            }
        });

        return extensions;
    };

    var readAtomExtensionAttribute = function (attribute) {
        /// <summary>Reads an ATOM extension attribute into an object.</summary>
        /// <param name="attribute">ATOM extension attribute.</param>
        /// <returns type="Object">An object with the attribute information.</returns>

        return {
            name: attribute.localName,
            namespaceURI: attribute.nsURI,
            value: attribute.domNode.nodeValue
        };
    };

    var getObjectValueByPath = function (path, item) {
        /// <summary>Gets a slashed path value from the specified item.</summary>
        /// <param name="path" type="String">Property path to read ('/'-separated).</param>
        /// <param name="item" type="Object">Object to get value from.</param>
        /// <returns>The property value, possibly undefined if any path segment is missing.</returns>

        // Fast path.
        if (path.indexOf('/') === -1) {
            return item[path];
        } else {
            var parts = path.split('/');
            var i, len;
            for (i = 0, len = parts.length; i < len; i++) {
                // Avoid traversing a null object.
                if (item === null) {
                    return undefined;
                }

                item = item[parts[i]];
                if (item === undefined) {
                    return item;
                }
            }

            return item;
        }
    };

    var setObjectValueByPath = function (path, target, value, propertyType) {
        /// <summary>Sets a slashed path value on the specified target.</summary>
        /// <param name="path" type="String">Property path to set ('/'-separated).</param>
        /// <param name="target" type="Object">Object to set value on.</param>
        /// <param name="value">Value to set.</param>
        /// <param name="propertyType" type="String" optional="true">Property type to set in metadata.</param>

        // Fast path.
        var propertyName;
        if (path.indexOf('/') === -1) {
            target[path] = value;
            propertyName = path;
        } else {
            var parts = path.split('/');
            var i, len;
            for (i = 0, len = (parts.length - 1); i < len; i++) {
                // We construct each step of the way if the property is missing;
                // if it's already initialized to null, we stop further processing.
                var next = target[parts[i]];
                if (next === undefined) {
                    next = {};
                    target[parts[i]] = next;
                } else if (next === null) {
                    return;
                }

                target = next;
            }

            propertyName = parts[i];
            target[propertyName] = value;
        }

        if (propertyType) {
            var metadata = target.__metadata = target.__metadata || {};
            var properties = metadata.properties = metadata.properties || {};
            var property = properties[propertyName] = properties[propertyName] || {};
            property.type = propertyType;
        }
    };

    var expandCustomizationPath = function (path) {
        /// <summary>Expands a customization path if it's well-known.</summary>
        /// <param name="path" type="String">Path to expand.</param>
        /// <returns type="String">Expanded path or 'path' otherwise.</returns>

        return knownCustomizationPaths[path] || path;
    };

    var getXmlPathValue = function (ns, xmlPath, element, readAsXml) {
        /// <summary>Returns the text value of the element or attribute at xmlPath.</summary>
        /// <param name="ns" type="String">Namespace for elements to match.</param>
        /// <param name="xmlPath" type="String">
        /// '/'-separated list of element names, possibly ending with a '@'-prefixed attribute name.
        /// </param>
        /// <param name="element">Root element.</param>
        /// <param name="readAsXml">Whether the value should be read as XHTML.</param>
        /// <returns type="String">The text value of the node found, undefined if none.</returns>

        var parts = xmlPath.split('/');
        var i, len;
        for (i = 0, len = parts.length; i < len; i++) {
            if (parts[i].charAt(0) === "@") {
                return xml_attribute(element, parts[i].substring(1), ns);
            } else {
                element = getSingleElementByTagNameNS(element, ns, parts[i]);
                if (!element) {
                    return undefined;
                }
            }
        }

        if (readAsXml) {
            // Treat per XHTML in http://tools.ietf.org/html/rfc4287#section-3.1.1, including the DIV
            // in the content.
            return xmlSerializeChildren(element);
        } else {
            return xmlInnerText(element);
        }
    };

    var setXmlPathValue = function (ns, nsPrefix, xmlPath, element, writeAsKind, value) {
        /// <summary>Sets the text value of the element or attribute at xmlPath.</summary>
        /// <param name="ns" type="String">Namespace for elements to match.</param>
        /// <param name="nsPrefix" type="String">Namespace prefix for elements to be created.</param>
        /// <param name="xmlPath" type="String">
        /// '/'-separated list of element names, possibly ending with a '@'-prefixed attribute name.
        /// </param>
        /// <param name="element">Root element.</param>
        /// <param name="writeAsKind" type="String">Whether the value should be written as text, html or xhtml.</param>
        /// <param name="value" type="String">The text value of the node to write.</param>

        var target = element;
        var parts = xmlPath.split('/');
        var i, len;
        for (i = 0, len = parts.length; i < len; i++) {
            var next;
            if (parts[i].charAt(0) === "@") {
                next = xmlAttributeNode(target, parts[i].substring(1), ns);
                if (!next) {
                    next = xmlNewDomAttribute(target, parts[i].substring(1), ns, nsPrefix);
                }
            } else {
                next = getSingleElementByTagNameNS(target, ns, parts[i]);
                if (!next) {
                    next = xmlNewDomElement(target, parts[i], ns, nsPrefix);
                }
            }

            target = next;
        }

        // Target can be an attribute (2) or an element (1).
        if (target.nodeType === 2) {
            target.value = value;
        } else {
            // The element should be empty at this point; we won't erase its contents.
            if (writeAsKind) {
                target.setAttribute("type", writeAsKind);
            }

            if (writeAsKind === "xhtml") {
                appendAsXml(target, value);
            } else {
                xmlAppendPreserving(target, value);
            }
        }
    };

    var isElementEmpty = function (element) {
        /// <summary>Checks whether the specified XML element is empty.</summary>
        /// <param name="element">DOM element node to check.</param>
        /// <returns type="Boolean">true if the element is empty; false otherwise.</returns>
        /// <remarks>
        /// The element is considered empty if it doesn't have any attributes other than
        /// namespace declarations or type declarations and if it has no child nodes.
        /// </remarks>

        // If there are any child elements or text nodes, it's not empty.
        if (element.childNodes.length) {
            return false;
        }

        // If there are no attributes, then we know it's already empty.
        var attributes = element.attributes;
        var len = attributes.length;
        if (len === 0) {
            return true;
        }

        // Otherwise, we have to search for attributes that aren't namespace declarations.
        for (var i = 0; i < len; i++) {
            var attributeName = attributes[i].nodeName;
            if (attributeName !== "xmlns" && attributeName.indexOf("xmlns:") !== 0 && attributeName !== "m:type") {
                return false;
            }
        }

        return true;
    };
    var removeXmlProperty = function (entryElement, propertyPath) {
        /// <summary>Removes a property from an entry.</summary>
        /// <param name="entryElement">XML element for an ATOM OData entry.</param>
        /// <param name="propertyPath" type="String">Property path to an element.</param>

        // Get the 'properties' node from 'content' or 'properties'.
        var propertiesElement = getSingleElementByTagNameNS(entryElement.domNode, odataMetaXmlNs, "properties");
        if (!propertiesElement) {
            var contentElement = getSingleElementByTagNameNS(entryElement.domNode, atomXmlNs, "content");
            if (contentElement) {
                propertiesElement = getSingleElementByTagNameNS(contentElement, odataMetaXmlNs, "properties");
            }
        }

        if (propertiesElement) {
            // Traverse down to the parent of the property path.
            var propertyParentElement = propertiesElement;
            var parts = propertyPath.split("/");
            var i, len;
            for (i = 0, len = (parts.length - 1); i < len; i++) {
                propertyParentElement = getSingleElementByTagNameNS(propertyParentElement, odataXmlNs, parts[i]);
                if (!propertyParentElement) {
                    return;
                }
            }

            // Remove the child from its parent.
            var propertyElement = getSingleElementByTagNameNS(propertyParentElement, odataXmlNs, parts[i]);
            if (propertyElement) {
                propertyParentElement.removeChild(propertyElement);
            }

            // Remove empty elements up the parent chain.
            var candidate = propertyParentElement;
            while (candidate !== propertiesElement && isElementEmpty(candidate)) {
                var parent = candidate.parentNode;
                parent.removeChild(candidate);
                candidate = parent;
            }
        }
    };

    var applyEntryCustomizationToEntry = function (customization, sourcePath, entryElement, entryObject, propertyType, suffix, context) {
        /// <summary>Applies a specific feed customization item to an entry.</summary>
        /// <param name="customization">Object with customization description.</param>
        /// <param name="sourcePath">Property path to map ('source' in the description).</param>
        /// <param name="entryElement">XML element for the entry that corresponds to the object being written.</param>
        /// <param name="entryObject">Object being written.</param>
        /// <param name="propertyType" type="String">Name of property type to write.</param>
        /// <param name="suffix" type="String">Suffix to feed customization properties.</param>
        /// <param name="context">Context used for serialization.</param>

        var targetPath = customization["FC_TargetPath" + suffix];
        var xmlPath = expandCustomizationPath(targetPath);
        var xmlNamespace = (targetPath !== xmlPath) ? atomXmlNs : customization["FC_NsUri" + suffix];
        var keepInContent = (customization["FC_KeepInContent" + suffix] === "true") ? true : false;
        var writeAsKind = customization["FC_ContentKind" + suffix];
        var prefix = customization["FC_NsPrefix" + suffix] || null;

        // Get the value to be written.
        var value = getObjectValueByPath(sourcePath, entryObject);

        // Special case: for null values, the 'property' should be left as it was generated.
        // undefined values will appear when metadata describe a property the object doesn't have.
        if (!assigned(value)) {
            return;
        }

        // Remove the property if it should not be kept in content.
        if (!keepInContent) {
            context.dataServiceVersion = "2.0";
            removeXmlProperty(entryElement, sourcePath);
        }

        // Set/create the subtree for the property path with the appropriate value.
        value = convertToAtomPropertyText(value, propertyType);
        setXmlPathValue(xmlNamespace, prefix, xmlPath, entryElement.domNode, writeAsKind, value);
    };

    var applyEntryCustomizationToObject = function (customization, sourcePath, entryElement, entryObject, propertyType, suffix) {
        /// <summary>Applies a specific feed customization item to an object.</summary>
        /// <param name="customization">Object with customization description.</param>
        /// <param name="sourcePath">Property path to set ('source' in the description).</param>
        /// <param name="entryElement">XML element for the entry that corresponds to the object being read.</param>
        /// <param name="entryObject">Object being read.</param>
        /// <param name="propertyType" type="String">Name of property type to set.</param>
        /// <param name="suffix" type="String">Suffix to feed customization properties.</param>

        // If keepInConent equals true then we do nothing as the object has been deserialized at this point.
        if (customization["FC_KeepInContent" + suffix] === "true") {
            return;
        }
        // An existing 'null' means that the property was set to null in the properties,
        // which overrides other items.
        if (getObjectValueByPath(sourcePath, entryObject) === null) {
            return;
        }

        var targetPath = customization["FC_TargetPath" + suffix];
        var xmlPath = expandCustomizationPath(targetPath);
        var xmlNamespace = (targetPath !== xmlPath) ? atomXmlNs : customization["FC_NsUri" + suffix];
        var readAsXhtml = (customization["FC_ContentKind" + suffix] === "xhtml");
        var value = getXmlPathValue(xmlNamespace, xmlPath, entryElement.domNode, readAsXhtml);

        // If the XML tree does not contain the necessary elements to read the value,
        // then it shouldn't be considered null, but rather ignored at all. This prevents
        // the customization from generating the object path down to the property.
        if (value === undefined) {
            return;
        }

        value = convertFromAtomPropertyText(value, propertyType);

        // Set the value on the object.
        setObjectValueByPath(sourcePath, entryObject, value, propertyType);
    };

    var lookupPropertyType = function (metadata, entityType, path) {
        /// <summary>Looks up the type of a property given its path in an entity type.</summary>
        /// <param name="metadata">Metadata in which to search for base and complex types.</param>
        /// <param name="entityType">Entity type to which property belongs.</param>
        /// <param name="path" type="String" mayBeNull="false">Property path to look at.</param>
        /// <returns type="String">The name of the property type; possibly null.</returns>

        var parts = path.split("/");
        var i, len;
        while (entityType) {
            // Keep track of the type being traversed, necessary for complex types.
            var traversedType = entityType;

            for (i = 0, len = parts.length; i < len; i++) {
                // Traverse down the structure as necessary.
                var properties = traversedType.property;
                if (!properties) {
                    break;
                }

                // Find the property by scanning the property list (might be worth pre-processing).
                var propertyFound = lookupProperty(properties, parts[i]);
                if (!propertyFound) {
                    break;
                }

                var propertyType = propertyFound.type;

                // We could in theory still be missing types, but that would
                // be caused by a malformed path.
                if (!propertyType || isPrimitiveType(propertyType)) {
                    return propertyType || null;
                }

                traversedType = lookupComplexType(propertyType, metadata);
                if (!traversedType) {
                    return null;
                }
            }

            // Traverse up the inheritance chain.
            entityType = lookupEntityType(entityType.baseType, metadata);
        }

        return null;
    };

    var applyMetadataToObject = function (entryElement, entryObject, metadata) {
        /// <summary>Applies feed customization properties to an object being read.</summary>
        /// <param name="entryElement">XML element for the entry that corresponds to the object being read.</param>
        /// <param name="entryObject">Object being read.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>

        if (!metadata || metadata.length === 0) {
            return;
        }

        var typeName = entryObject.__metadata.type;
        while (typeName) {
            var entityType = lookupEntityType(typeName, metadata);
            if (!entityType) {
                return;
            }

            // Apply all feed customizations from the entity and each of its properties.
            var propertyType;
            var source = entityType.FC_SourcePath;
            if (source) {
                propertyType = lookupPropertyType(metadata, entityType, source);
                applyEntryCustomizationToObject(entityType, source, entryElement, entryObject, propertyType, "");
            }

            var properties = entityType.property;
            if (properties) {
                var i, len;
                for (i = 0, len = properties.length; i < len; i++) {
                    var property = properties[i];
                    var suffixCounter = 0;
                    var suffix = "";
                    while (property["FC_TargetPath" + suffix]) {
                        source = property.name;
                        propertyType = property.type;

                        var sourcePath = property["FC_SourcePath" + suffix];
                        if (sourcePath) {
                            source += "/" + sourcePath;
                            propertyType = lookupPropertyType(metadata, entityType, source);
                        }

                        applyEntryCustomizationToObject(property, source, entryElement, entryObject, propertyType, suffix);
                        suffixCounter++;
                        suffix = "_" + suffixCounter;
                    }
                }
            }

            // Apply feed customizations from base types.
            typeName = entityType.baseType;
        }
    };

    var readAtomEntry = function (atomEntry, metadata) {
        /// <summary>Reads an ATOM entry in OData format.</summary>
        /// <param name="atomEntry">XML element for the entry.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>
        /// <returns type="Object">An object in payload representation format.</returns>

        var entryMetadata = {};
        var entry = {
            __metadata: entryMetadata
        };

        var etag = xmlAttribute(atomEntry, "etag", odataMetaXmlNs);
        if (etag) {
            entryMetadata.etag = etag;
        }

        xmlChildElements(atomEntry, function (entryChild) {
            if (entryChild.nsURI === atomXmlNs) {
                switch (entryChild.localName) {
                    case "id":
                        entryMetadata.uri = normalizeURI(xmlInnerText(entryChild.domNode), entryChild.baseURI);
                        entryMetadata.uri_extensions = readAtomExtensionAttributes(entryChild);
                        break;
                    case "category":
                        readAtomEntryType(entryChild, entry, entryMetadata);
                        break;
                    case "content":
                        readAtomEntryContent(entryChild, entry);
                        break;
                    case "link":
                        readAtomEntryLink(entryChild, entry, metadata);
                        break;
                }
            }

            if (entryChild.nsURI === odataMetaXmlNs && entryChild.localName === "properties") {
                readAtomEntryStructuralObject(entryChild, entry, entryMetadata);
            }
        });

        // Apply feed customizations if applicable.
        applyMetadataToObject(atomEntry, entry, metadata);

        return entry;
    };

    var readAtomEntryType = function (atomCategory, entry, entryMetadata) {
        /// <summary>Reads type information from an ATOM category element.</summary>
        /// <param name="atomCategory">XML category element.</param>
        /// <param name="entry">Entry object to update with information.</param>
        /// <param name="entryMetadata">entry.__metadata, passed as an argument simply to help minify the code.</param>

        var scheme = xmlAttribute(atomCategory, "scheme");
        var term = xmlAttribute(atomCategory, "term");

        if (scheme === odataScheme) {
            if (entry.__metadata.type) {
                throw { message: "Invalid AtomPub document: multiple category elements defining the entry type were encounterd withing an entry", element: atomCategory };
            }

            entryMetadata.type = term;
            entryMetadata.type_extensions = [];

            var typeExtension;
            xmlAttributes(atomCategory, function (attribute) {
                if (!attribute.nsURI) {
                    if (attribute.localName !== "scheme" && attribute.localName !== "term") {
                        typeExtension = readAtomExtensionAttribute(attribute);
                        entryMetadata.type_extensions.push(typeExtension);
                    }
                } else if (isExtensionNs(attribute.nsURI)) {
                    typeExtension = readAtomExtensionAttribute(attribute);
                    entryMetadata.type_extensions.push(typeExtension);
                }
            });
        }
    };

    var readAtomEntryContent = function (atomEntryContent, entry) {
        /// <summary>Reads an ATOM content element.</summary>
        /// <param name="atomEntryContent">XML entry element.</param>
        /// <param name="entry">Entry object to update with information.</param>

        var src = xmlAttribute(atomEntryContent, "src");
        var type = xmlAttribute(atomEntryContent, "type");
        var entryMetadata = entry.__metadata;

        if (src) {
            if (!type) {
                throw { message: "Invalid AtomPub document: content element must specify the type attribute if the src attribute is also specified", element: atomEntryContent };
            }

            entryMetadata.media_src = normalizeURI(src, atomEntryContent.baseURI);
            entryMetadata.content_type = type;
        }

        xmlChildElements(atomEntryContent, function (contentChild) {
            if (src) {
                throw { message: "Invalid AtomPub document: content element must not have child elements if the src attribute is specified", element: atomEntryContent };
            }

            if (contentChild.nsURI === odataMetaXmlNs && contentChild.localName === "properties") {
                readAtomEntryStructuralObject(contentChild, entry, entryMetadata);
            }
        });
    };

    var readAtomEntryEditMediaLink = function (link, entry, entryMetadata) {
        /// <summary>Reads an ATOM media link element.</summary>
        /// <param name="link">Link representation (not the XML element).</param>
        /// <param name="entry">Entry object to update with information.</param>
        /// <param name="entryMetadata">entry.__metadata, passed as an argument simply to help minify the code.</param>

        entryMetadata.edit_media = link.href;
        entryMetadata.edit_media_extensions = [];

        // Read the link extensions.
        var i, len;
        for (i = 0, len = link.extensions.length; i < len; i++) {
            if (link.extensions[i].namespaceURI === odataMetaXmlNs && link.extensions[i].name === "etag") {
                entryMetadata.media_etag = link.extensions[i].value;
            } else {
                entryMetadata.edit_media_extensions.push(link.extensions[i]);
            }
        }
    };

    var readAtomEntryLink = function (atomEntryLink, entry, metadata) {
        /// <summary>Reads a link element on an entry.</summary>
        /// <param name="atomEntryLink">'link' element on the entry.</param>
        /// <param name="entry">An object in payload representation format.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>

        var link = readAtomLink(atomEntryLink);
        var entryMetadata = entry.__metadata;
        switch (link.rel) {
            case "self":
                entryMetadata.self = link.href;
                entryMetadata.self_link_extensions = link.extensions;
                break;
            case "edit":
                entryMetadata.edit = link.href;
                entryMetadata.edit_link_extensions = link.extensions;
                break;
            case "edit-media":
                readAtomEntryEditMediaLink(link, entry, entryMetadata);
                break;
            default:
                if (link.rel.indexOf(odataRelatedPrefix) === 0) {
                    readAtomEntryDeferredProperty(atomEntryLink, link, entry, metadata);
                }
                break;
        }
    };

    var readAtomEntryDeferredProperty = function (atomEntryLink, link, entry, metadata) {
        /// <summary>Reads a potentially-deferred property on an entry.</summary>
        /// <param name="atomEntryLink">'link' element on the entry.</param>
        /// <param name="link">Parsed link object.</param>
        /// <param name="entry">An object in payload representation format.</param>
        /// <param name="metadata">Metadata that describes the conceptual schema.</param>

        var propertyName = link.rel.substring(odataRelatedPrefix.length);

        // undefined is used as a flag that inline data was not found (as opposed to
        // found with a value or with null).
        var inlineData = undefined;

        // Get any inline data.
        xmlChildElements(atomEntryLink, function (child) {
            if (child.nsURI === odataMetaXmlNs && child.localName === "inline") {
                var inlineRoot = xmlFirstElement(child);
                if (inlineRoot) {
                    inlineData = readAtomDocument(inlineRoot, metadata);
                } else {
                    inlineData = null;
                }
            }
        });

        // If the link has no inline content, we consider it deferred.
        if (inlineData === undefined) {
            inlineData = { __deferred: { uri: link.href} };
        }

        // Set the property value on the entry object.
        entry[propertyName] = inlineData;

        // Set the extra property information on the entry object metadata. 
        entry.__metadata.properties = entry.__metadata.properties || {};
        entry.__metadata.properties[propertyName] = {
            extensions: link.extensions
        };
    };

    var readAtomEntryStructuralObject = function (propertiesElement, parent, parentMetadata) {
        /// <summary>Reads an atom entry's property as a structural object and sets its value in the parent and the metadata in the parentMetadata objects.</summary>
        /// <param name="propertiesElement">XML element for the 'properties' node.</param>
        /// <param name="parent">
        /// Object that will contain the property value. It can be either an antom entry or 
        /// an atom complex property object.
        /// </param>
        /// <param name="parentMetadata">Object that will contain the property metadata. It can be either an atom entry metadata or a complex property metadata object</param>

        xmlChildElements(propertiesElement, function (property) {
            if (property.nsURI === odataXmlNs) {
                parentMetadata.properties = parentMetadata.properties || {};
                readAtomEntryProperty(property, parent, parentMetadata.properties);
            }
        });
    };

    var readAtomEntryProperty = function (property, parent, metadata) {
        /// <summary>Reads a property on an ATOM OData entry.</summary>
        /// <param name="property">XML element for the property.</param>
        /// <param name="parent">
        /// Object that will contain the property value. It can be either an antom entry or 
        /// an atom complex property object.
        /// </param>
        /// <param name="metadata">Metadata for the object that will contain the property value.</param>

        var propertyNullValue = null;
        var propertyTypeValue = "Edm.String";
        var propertyExtensions = [];

        xmlAttributes(property, function (attribute) {
            if (attribute.nsURI === odataMetaXmlNs) {
                switch (attribute.localName) {
                    case "null":
                        propertyNullValue = attribute.domNode.nodeValue;
                        return;
                    case "type":
                        propertyTypeValue = attribute.domNode.nodeValue;
                        return;
                };
            }

            if (isExtensionNs(attribute.nsURI)) {
                var extension = readAtomExtensionAttribute(attribute);
                propertyExtensions.push(extension);
            }
        });

        var propertyValue = null;
        var propertyMetadata = {
            type: propertyTypeValue,
            extensions: propertyExtensions
        };

        if (propertyNullValue !== "true") {
            propertyValue = xmlInnerText(property.domNode);
            if (isPrimitiveType(propertyTypeValue)) {
                propertyValue = convertFromAtomPropertyText(propertyValue, propertyTypeValue);
            } else {
                // Probe for a complex type and read it.
                if (xmlFirstElement(property)) {
                    propertyValue = { __metadata: { type: propertyTypeValue} };
                    readAtomEntryStructuralObject(property, propertyValue, propertyMetadata);
                }
            }
        }

        parent[property.localName] = propertyValue;
        metadata[property.localName] = propertyMetadata;
    };

    var readAtomServiceDocument = function (atomServiceDoc) {
        /// <summary>Reads an atom service document</summary>
        /// <param name="atomServiceDoc">An element node that represents the root service element of an AtomPub service document</param>
        /// <returns type="Object">An object that contains the properties of the service document</returns>

        // Consider handling Accept and Category elements.

        var serviceDoc = {
            workspaces: [],
            extensions: []
        };

        // Find all the workspace elements.
        xmlChildElements(atomServiceDoc, function (child) {
            if (child.nsURI === appXmlNs && child.localName === "workspace") {
                var workspace = readAtomServiceDocumentWorkspace(child);
                serviceDoc.workspaces.push(workspace);
            } else {
                var serviceExtension = readAtomExtensionElement(atomServiceDoc);
                serviceDoc.extensions.push(serviceExtension);
            }
        });

        // AtomPub (RFC 5023 Section 8.3.1) says a service document MUST contain one or 
        // more workspaces. Throw if we don't find any. 
        if (serviceDoc.workspaces.length === 0) {
            throw { message: "Invalid AtomPub service document: No workspace element found.", element: atomServiceDoc };
        }

        return serviceDoc;
    };

    var readAtomServiceDocumentWorkspace = function (atomWorkspace) {
        /// <summary>Reads a single workspace element from an atom service document</summary>
        /// <param name="atomWorkspace">An element node that represents a workspace element of an AtomPub service document</param>
        /// <returns type="Object">An object that contains the properties of the workspace</returns>

        var workspace = {
            collections: [],
            extensions: []
        };

        xmlChildElements(atomWorkspace, function (child) {
            if (child.nsURI === atomXmlNs) {
                if (child.localName === "title") {
                    if (atomWorkspace.title) {
                        throw { message: "Invalid AtomPub service document: workspace has more than one child title element", element: child };
                    }

                    workspace.title = xmlInnerText(child.domNode);
                }
            } else if (child.nsURI === appXmlNs) {
                if (child.localName === "collection") {
                    var collection = readAtomServiceDocumentCollection(child, workspace);
                    workspace.collections.push(collection);
                }
            } else {
                var extension = readAtomExtensionElement(atomWorkspace);
                workspace.extensions.push(extension);
            }
        });

        workspace.title = workspace.title || "";

        return workspace;
    };

    var readAtomServiceDocumentCollection = function (atomCollection) {
        /// <summary>Reads a service document collection element into an object.</summary>
        /// <param name="atomCollection">An element node that represents a collection element of an AtomPub service document.</param>
        /// <returns type="Object">An object that contains the properties of the collection.</returns>

        var collection = {
            href: xmlAttribute(atomCollection, "href"),
            extensions: []
        };

        if (!collection.href) {
            throw { message: "Invalid AtomPub service document: collection has no href attribute", element: atomCollection };
        }

        collection.href = normalizeURI(collection.href, atomCollection.baseURI);

        xmlChildElements(atomCollection, function (child) {
            if (child.nsURI === atomXmlNs) {
                if (child.localName === "title") {
                    if (collection.title) {
                        throw { message: "Invalid AtomPub service document: collection has more than one child title element", element: child };
                    }

                    collection.title = xmlInnerText(child.domNode);
                }
            } else if (child.nsURI !== appXmlNs) {
                var extension = readAtomExtensionElement(atomCollection);
                collection.extensions.push(extension);
            }
        });

        // AtomPub (RFC 5023 Section 8.3.3) says the collection element MUST contain 
        // a title element. It's likely to be problematic if the service doc doesn't 
        // have one so here we throw. 
        if (!collection.title) {
            throw { message: "Invalid AtomPub service document: collection has no title element", element: atomCollection };
        }

        return collection;
    };

    var writeAtomDocument = function (data, context) {
        /// <summary>Writes the specified data into an OData ATOM document.</summary>
        /// <param name="data">Data to write.</param>
        /// <param name="context">Context used for serialization.</param>
        /// <returns>The root of the DOM tree built.</returns>

        var docRoot;
        var type = payloadTypeOf(data);
        switch (type) {
            case PAYLOADTYPE_FEEDORLINKS:
                docRoot = writeAtomFeed(null, data, context);
                break;
            case PAYLOADTYPE_ENTRY:
                // FALLTHROUGH
            case PAYLOADTYPE_COMPLEXTYPE:
                docRoot = writeAtomEntry(null, data, context);
                break;
        }

        return docRoot;
    };

    var writeAtomRoot = function (parent, name) {
        /// <summary>Writes the root of an ATOM document, possibly under an existing element.</summary>
        /// <param name="parent" mayBeNull="true">Element under which to create a new element.</param>
        /// <param name="name">Name for the new element, to be created in the ATOM namespace.</param>
        /// <returns>The created element.</returns>

        if (parent) {
            return xmlNewElement(parent, name, atomXmlNs);
        }

        var result = xmlNewDocument(name, atomXmlNs);

        // Add commonly used namespaces.
        // ATOM is implied by the just-created element.
        // xmlAddNamespaceAttribute(result.domNode, "xmlns", atomXmlNs);
        xmlAddNamespaceAttribute(result.domNode, "xmlns:d", odataXmlNs);
        xmlAddNamespaceAttribute(result.domNode, "xmlns:m", odataMetaXmlNs);

        return result;
    };

    var writeAtomFeed = function (parent, data, context) {
        /// <summary>Writes the specified feed data into an OData ATOM feed.</summary>
        /// <param name="parent" mayBeNull="true">Parent to append feed tree to.</param>
        /// <param name="data">Feed data to write.</param>
        /// <param name="context">Context used for serialization.</param>
        /// <returns>The feed element of the DOM tree built.</returns>

        var feed = writeAtomRoot(parent, "feed");
        var entries = (isArray(data)) ? data : data.results;
        if (entries) {
            var i, len;
            for (i = 0, len = entries.length; i < len; i++) {
                writeAtomEntry(feed, entries[i], context);
            }
        }

        return feed;
    };

    var writeAtomEntry = function (parent, data, context) {
        /// <summary>Appends an ATOM entry XML payload to the parent node.</summary>
        /// <param name="parent">Parent element.</param>
        /// <param name="data">Data object to write in intermediate format.</param>
        /// <param name="context">Context used for serialization.</param>
        /// <returns>The new entry.</returns>

        var entry = writeAtomRoot(parent, "entry");

        // Set up a default empty author name as required by ATOM.
        var author = xmlNewElement(entry, "author", atomXmlNs);
        xmlNewElement(author, "name", atomXmlNs);

        // Set up a default empty title as required by ATOM.
        xmlNewElement(entry, "title", atomXmlNs);

        var content = xmlNewElement(entry, "content", atomXmlNs);
        xmlNewAttribute(content, "type", null, "application/xml");

        var properties = xmlNewElement(content, propertiesTag, odataMetaXmlNs);

        var propertiesMetadata = (data.__metadata) ? data.__metadata.properties : null;

        writeAtomEntryMetadata(entry, data.__metadata);
        writeAtomEntryProperties(entry, properties, data, propertiesMetadata, context);
        applyMetadataToEntry(entry, data, context);

        return entry;
    };

    var applyMetadataToEntry = function (entry, data, context) {
        /// <summary>Applies feed customizations to the specified entry element.</summary>
        /// <param name="entry">Entry to apply feed customizations to.</param>
        /// <param name="data">Data object associated with the entry.</param>
        /// <param name="context">Context used for serialization.</param>

        if (!data.__metadata) {
            return;
        }

        var metadata = context.metadata;
        var entityType = lookupEntityType(data.__metadata.type, metadata);
        while (entityType) {
            // Apply all feed customizations from the entity and each of its properties.
            var propertyType;
            var source = entityType.FC_SourcePath;
            if (source) {
                propertyType = lookupPropertyType(metadata, entityType, source);
                applyEntryCustomizationToEntry(entityType, source, entry, data, propertyType, "", context);
            }

            var properties = entityType.property;
            if (properties) {
                var i, len;
                for (i = 0, len = properties.length; i < len; i++) {
                    var property = properties[i];
                    var suffixCounter = 0;
                    var suffix = "";
                    while (property["FC_TargetPath" + suffix]) {
                        source = property.name;
                        if (property["FC_SourcePath" + suffix]) {
                            source += "/" + property["FC_SourcePath" + suffix];
                        }

                        applyEntryCustomizationToEntry(property, source, entry, data, property.type, suffix, context);
                        suffixCounter++;
                        suffix = "_" + suffixCounter;
                    }
                }
            }

            // Apply feed customizations from base types.
            entityType = lookupEntityType(entityType.baseType, metadata);
        }
    };

    var writeAtomEntryMetadata = function (entry, metadata) {
        /// <summary>Writes the content of metadata into the specified DOM entry element.</summary>
        /// <param name="entry">DOM entry element.</param>
        /// <param name="metadata" mayBeNull="true">Object __metadata to write.</param>

        if (metadata) {
            // Write the etag if present.
            if (metadata.etag) {
                xmlNewAttribute(entry, "etag", odataMetaXmlNs, metadata.etag);
            }

            // Write the ID if present.
            if (metadata.uri) {
                xmlNewElement(entry, "id", atomXmlNs, metadata.uri);
            }

            // Write the type name if present.
            if (metadata.type) {
                var category = xmlNewElement(entry, "category", atomXmlNs);
                xmlNewAttribute(category, "term", null, metadata.type);
                xmlNewAttribute(category, "scheme", null, odataScheme);
            }
        }
    };

    var writeAtomEntryLink = function (entry, href, rel) {
        /// <summary>Writes an ATOM link into an entry.</summary>
        /// <param name="entry">DOM entry element to add link to.</param>
        /// <param name="href" type="String">Value for href attribute in link element.</param>
        /// <param name="rel" type="String">Value for rel attribute in link element</param>
        /// <returns>The new link element.</returns>

        var link = xmlNewElement(entry, "link", atomXmlNs);
        xmlNewAttribute(link, "rel", null, rel);
        xmlNewAttribute(link, "href", null, href);
        return link;
    };

    var writeAtomEntryProperties = function (entry, parentElement, data, propertiesMetadata, context) {
        /// <summary>Writes the properties of an entry or complex type.</summary>
        /// <param name="entry" mayBeNull="true">Entry object being written out; null if this is a complex type.</param>
        /// <param name="parentElement">Parent DOM element under which the property should be added.</param>
        /// <param name="data">Data object to write in intermediate format.</param>
        /// <param name="propertiesMetadata" mayBeNull="true">Instance metadata about properties of the 'data' object.</param>
        /// <param name="context">Context used for serialization.</param>

        var name, value, kind, propertyMetadata;
        var contextMetadata = context.metadata;
        var dataMetadataType;
        for (name in data) {
            if (name !== "__metadata") {
                value = data[name];
                kind = propertyKindOf(value);
                propertyMetadata = (propertiesMetadata) ? propertiesMetadata[name] : null;
                if (!propertyMetadata) {
                    // Look up at-most-once.
                    if (dataMetadataType === undefined) {
                        if (data.__metadata) {
                            dataMetadataType = lookupEntityType(data.__metadata.type, contextMetadata);
                        }
                    }

                    if (dataMetadataType) {
                        propertyMetadata = lookupProperty(dataMetadataType.property, name);
                        if (!propertyMetadata) {
                            propertyMetadata = lookupProperty(dataMetadataType.navigationProperty, name);
                        }
                    }
                }

                if (kind === PROPERTYKIND_NONE) {
                    // This could be a null primitive property, complex type or link;
                    // look it up in metadata if available, otherwise assume primitive.
                    kind = PROPERTYKIND_PRIMITIVE;
                    if (propertyMetadata && !isPrimitiveType(propertyMetadata.type)) {
                        if (propertyMetadata.relationship) {
                            kind = PROPERTYKIND_INLINE;
                        } else if (lookupComplexType(propertyMetadata.type, context.metadata)) {
                            kind = PROPERTYKIND_COMPLEX;
                        }
                    }
                }

                if (kind === PROPERTYKIND_PRIMITIVE || kind === PROPERTYKIND_COMPLEX) {
                    writeAtomEntryProperty(parentElement, name, kind, value, propertyMetadata, context);
                } else {
                    writeAtomEntryDeferredProperty(entry, kind, name, value, context);
                }
            }
        }
    };

    var writeAtomEntryProperty = function (parentElement, name, kind, value, propertiesMetadata, context) {
        /// <summary>Writes a single property for an entry or complex type.</summary>
        /// <param name="parentElement">Parent DOM element under which the property should be added.</param>
        /// <param name="name" type="String">Property name.</param>
        /// <param name="kind" type="String">Property kind description (from propertyKind values).</param>
        /// <param name="value" mayBeNull="true">Property value.</param>
        /// <param name="propertiesMetadata" mayBeNull="true">Instance metadata about properties of the 'data' object.</param>
        /// <param name="context">Serialization context.</param>

        var propertyTagName = xmlQualifyXmlTagName(name, "d");
        var propertyType = propertiesMetadata && propertiesMetadata.type;
        var property;
        if (kind === PROPERTYKIND_COMPLEX) {
            property = xmlNewElement(parentElement, propertyTagName, odataXmlNs);
            var propertyMetadata;
            if (propertiesMetadata) {
                propertyMetadata = propertiesMetadata.properties;
            }

            // Null complex types require a V2 payload.
            if (value === null) {
                context.dataServiceVersion = "2.0";
            }

            writeAtomEntryProperties(null, property, value, propertyMetadata, context);
        } else {
            // Default the conversion to string if no property type has been defined.
            property = xmlNewElement(parentElement, propertyTagName, odataXmlNs, convertToAtomPropertyText(value, propertyType || "Edm.String"));
        }

        if (value === null) {
            xmlNewAttribute(property, propertyNullAttribute, odataMetaXmlNs, "true");
        }

        if (propertyType) {
            xmlNewAttribute(property, propertyTypeAttribute, odataMetaXmlNs, propertyType);
        }
    };

    var writeAtomEntryDeferredProperty = function (entry, kind, name, value, context) {
        /// <summary>Writes a single property for an entry or complex type.</summary>
        /// <param name="entry">Entry object being written out.</param>
        /// <param name="name" type="String">Property name.</param>
        /// <param name="kind" type="String">Property kind description (from propertyKind values).</param>
        /// <param name="value" mayBeNull="true">Property value.</param>
        /// <param name="context">Serialization context.</param>
        /// <remarks>entry cannot be null because that would indicate a complex type, which don't support links.</remarks>

        var href;
        var inlineWriter;
        var inlineType;
        var inlineContent = kind === PROPERTYKIND_INLINE;
        if (inlineContent) {
            href = (value && value.__metadata) ? value.__metadata.uri : "";
            inlineType = payloadTypeOf(value);
            switch (inlineType) {
                case PAYLOADTYPE_ENTRY:
                    inlineWriter = writeAtomEntry;
                    break;
                case PAYLOADTYPE_FEEDORLINKS:
                    inlineType = "feed";
                    inlineWriter = writeAtomFeed;
                    break;
                case PAYLOADTYPE_NONE:
                    // Only for a null entry, serialized as a link with an empty m:inline value.
                    inlineType = PAYLOADTYPE_ENTRY;
                    inlineWriter = null;
                    break;
                default:
                    throw { message: "Invalid payload for inline navigation property: " + inlineType };
            }
        } else {
            href = value.__deferred.uri;
        }

        var rel = normalizeURI(name, odataRelatedPrefix);
        var link = writeAtomEntryLink(entry, href, rel);
        if (inlineContent) {
            var inlineRoot = xmlNewElement(link, inlineTag, odataMetaXmlNs);
            xmlNewAttribute(link, "type", null, "application/atom+xml;type=" + inlineType);
            if (inlineWriter) {
                inlineWriter(inlineRoot, value, context);
            }
        }
    };

    var atomParser = function (handler, text, context) {
        /// <summary>Parses an ATOM document (feed, entry or service document).</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="text" type="String">Document text.</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>An object representation of the document; undefined if not applicable.</returns>

        if (text) {
            var atomRoot = xmlParse(text);
            if (atomRoot) {
                return readAtomDocument(atomRoot, context.metadata);
            }
        }
    };

    var atomSerializer = function (handler, data, context) {
        /// <summary>Serializes an ATOM object into a document (feed or entry).</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="data" type="Object">Representation of feed or entry.</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>An text representation of the data object; undefined if not applicable.</returns>

        var cType = context.contentType = context.contentType || contentType(atomMediaType);
        var result = undefined;
        if (cType && cType.mediaType === atomMediaType) {
            var atomDoc = writeAtomDocument(data, context);
            result = xmlSerialize(atomDoc);
        }

        return result;
    };

    odata.atomHandler = handler(atomParser, atomSerializer, atomAcceptTypes.join(","), "2.0");



    // It's assumed that all elements may have Documentation children and Annotation elements.
    // See http://msdn.microsoft.com/en-us/library/bb399292.aspx for a CSDL reference.
    var schema = {
        elements: {
            Association: {
                attributes: ["Name"],
                elements: ["End*", "ReferentialConstraint"]
            },
            AssociationSet: {
                attributes: ["Name", "Association"],
                elements: ["End*"]
            },
            CollectionType: {
                attributes: ["ElementType", "Nullable", "DefaultValue", "MaxLength", "FixedLength", "Precision", "Scale", "Unicode", "Collation"]
            },
            ComplexType: {
                attributes: ["Name", "BaseType", "Abstract"],
                elements: ["Property*"]
            },
            DefiningExpression: {
                text: true
            },
            Dependent: {
                attributes: ["Role"],
                elements: ["PropertyRef*"]
            },
            Documentation: {
                text: true
            },
            End: {
                attributes: ["Type", "Role", "Multiplicity", "EntitySet"],
                elements: ["OnDelete"]
            },
            EntityContainer: {
                attributes: ["Name", "Extends"],
                elements: ["EntitySet*", "AssociationSet*", "FunctionImport*"]
            },
            EntitySet: {
                attributes: ["Name", "EntityType"]
            },
            EntityType: {
                attributes: ["Name", "BaseType", "Abstract", "OpenType"],
                elements: ["Key", "Property*", "NavigationProperty*"]
            },
            Function: {
                attributes: ["Name", "ReturnType"],
                elements: ["Parameter*", "DefiningExpression", "ReturnType"]
            },
            FunctionImport: {
                attributes: ["Name", "ReturnType", "EntitySet"],
                elements: ["Parameter*"]
            },
            Key: {
                elements: ["PropertyRef*"]
            },
            NavigationProperty: {
                attributes: ["Name", "Relationship", "ToRole", "FromRole"]
            },
            OnDelete: {
                attributes: ["Action"]
            },
            Parameter: {
                attributes: ["Name", "Type", "Mode", "MaxLength", "Precision", "Scale"]
            },
            Principal: {
                attributes: ["Role"],
                elements: ["PropertyRef*"]
            },
            Property: {
                attributes: ["Name", "Type", "Nullable", "DefaultValue", "MaxLength", "FixedLength", "Precision", "Scale", "Unicode", "Collation", "ConcurrencyMode"]
            },
            PropertyRef: {
                attributes: ["Name"]
            },
            ReferenceType: {
                attributes: ["Type"]
            },
            ReferentialConstraint: {
                elements: ["Principal", "Dependent"]
            },
            ReturnType: {
                attributes: ["ReturnType"],
                elements: ["CollectionType", "ReferenceType", "RowType"]
            },
            RowType: {
                elements: ["Property*"]
            },
            Schema: {
                attributes: ["Namespace", "Alias"],
                elements: ["Using*", "EntityContainer*", "EntityType*", "Association*", "ComplexType*", "Function*"]
            },
            TypeRef: {
                attributes: ["Type", "Nullable", "DefaultValue", "MaxLength", "FixedLength", "Precision", "Scale", "Unicode", "Collation"]
            },
            Using: {
                attributes: ["Namespace", "Alias"]
            }
        }
    };

    // See http://msdn.microsoft.com/en-us/library/ee373839.aspx for a feed customization reference.
    var customizationAttributes = ["m:FC_ContentKind", "m:FC_KeepInContent", "m:FC_NsPrefix", "m:FC_NsUri", "m:FC_SourcePath", "m:FC_TargetPath"];
    schema.elements.Property.attributes = schema.elements.Property.attributes.concat(customizationAttributes);
    schema.elements.EntityType.attributes = schema.elements.EntityType.attributes.concat(customizationAttributes);

    // See http://msdn.microsoft.com/en-us/library/dd541284(PROT.10).aspx for an EDMX reference.
    schema.elements.Edmx = { attributes: ["Version"], elements: ["DataServices"], ns: edmxNs };
    schema.elements.DataServices = { elements: ["Schema*"], ns: edmxNs };

    // See http://msdn.microsoft.com/en-us/library/dd541233(v=PROT.10) for Conceptual Schema Definition Language Document for Data Services.
    schema.elements.EntityContainer.attributes.push("m:IsDefaultEntityContainer");
    schema.elements.Property.attributes.push("m:MimeType");
    schema.elements.FunctionImport.attributes.push("m:HttpMethod");
    schema.elements.EntityType.attributes.push("m:HasStream");
    schema.elements.DataServices.attributes = ["m:DataServiceVersion"];

    var scriptCase = function (text) {
        /// <summary>Converts a Pascal-case identifier into a camel-case identifier.</summary>
        /// <param name="text" type="String">Text to convert.</param>
        /// <returns type="String">Converted text.</returns>
        /// <remarks>If the text starts with multiple uppercase characters, it is left as-is.</remarks>

        if (!text) {
            return text;
        }

        if (text.length > 1) {
            var firstTwo = text.substr(0, 2);
            if (firstTwo === firstTwo.toUpperCase()) {
                return text;
            }

            return text.charAt(0).toLowerCase() + text.substr(1);
        }

        return text.charAt(0).toLowerCase();
    };

    var getChildSchema = function (parentSchema, candidateName) {
        /// <summary>Gets the schema node for the specified element.</summary>
        /// <param name="parentSchema" type="Object">Schema of the parent XML node of 'element'.</param>
        /// <param name="candidateName">XML element name to consider.</param>
        /// <returns type="Object">The schema that describes the specified element; null if not found.</returns>

        if (candidateName === "Documentation") {
            return { isArray: true, propertyName: "documentation" };
        }

        var elements = parentSchema.elements;
        if (!elements) {
            return null;
        }

        var i, len;
        for (i = 0, len = elements.length; i < len; i++) {
            var elementName = elements[i];
            var multipleElements = false;
            if (elementName.charAt(elementName.length - 1) === "*") {
                multipleElements = true;
                elementName = elementName.substr(0, elementName.length - 1);
            }

            if (candidateName === elementName) {
                var propertyName = scriptCase(elementName);
                return { isArray: multipleElements, propertyName: propertyName };
            }
        }

        return null;
    };

    // This regular expression is used to detect a feed customization element
    // after we've normalized it into the 'm' prefix. It starts with m:FC_,
    // followed by other characters, and ends with _ and a number.
    // The captures are 0 - whole string, 1 - name as it appears in internal table.
    var isFeedCustomizationNameRE = /^(m:FC_.*)_[0-9]+$/;

    var isEdmNamespace = function (nsURI) {
        /// <summary>Checks whether the specifies namespace URI is one of the known CSDL namespace URIs.</summary>
        /// <param name="nsURI" type="String">Namespace URI to check.</param>
        /// <returns type="Boolean">true if nsURI is a known CSDL namespace; false otherwise.</returns>

        return nsURI === edmNs || nsURI === edmNs2 || nsURI === edmNs3;
    };

    var parseConceptualModelElement = function (element) {
        /// <summary>Parses a CSDL document.</summary>
        /// <param name="element">DOM element to parse.</param>
        /// <returns type="Object">An object describing the parsed element.</returns>

        if (!element.domNode) {
            element = xml_wrapNode(element, "");
        }

        var localName = element.localName;
        var elementSchema = schema.elements[localName];
        if (!elementSchema) {
            return null;
        }

        if (elementSchema.ns) {
            if (element.nsURI !== elementSchema.ns) {
                return null;
            }
        } else if (!isEdmNamespace(element.nsURI)) {
            return null;
        }

        var item = {};
        var extensions = [];
        var attributes = elementSchema.attributes || [];
        xmlAttributes(element, function (wrappedAttribute) {
            var node = wrappedAttribute.domNode;
            var localName = wrappedAttribute.localName;
            var namespaceURI = wrappedAttribute.nsURI;
            var value = node.value;

            // Don't do anything with xmlns attributes.
            if (namespaceURI === xmlnsNS) {
                return;
            }

            // Currently, only m: for metadata is supported as a prefix in the internal schema table,
            // un-prefixed element names imply one a CSDL element.
            var schemaName = null;
            var handled = false;
            if (isEdmNamespace(namespaceURI) || namespaceURI === null) {
                schemaName = "";
            } else if (namespaceURI === odataMetaXmlNs) {
                schemaName = "m:";
            }

            if (schemaName !== null) {
                schemaName += localName;

                // Feed customizations for complex types have additional
                // attributes with a suffixed counter starting at '1', so
                // take that into account when doing the lookup.
                var match = isFeedCustomizationNameRE.exec(schemaName);
                if (match) {
                    schemaName = match[1];
                }

                if (contains(attributes, schemaName)) {
                    handled = true;
                    item[scriptCase(localName)] = value;
                }
            }

            if (!handled) {
                extensions.push(createAttributeExtension(wrappedAttribute));
            }
        });

        xmlChildElements(element, function (child) {
            var childSchema = getChildSchema(elementSchema, child.localName);
            if (childSchema) {
                if (childSchema.isArray) {
                    var arr = item[childSchema.propertyName];
                    if (!arr) {
                        arr = [];
                        item[childSchema.propertyName] = arr;
                    }
                    arr.push(parseConceptualModelElement(child));
                } else {
                    item[childSchema.propertyName] = parseConceptualModelElement(child);
                }
            } else {
                extensions.push(createElementExtension(child));
            }
        });

        if (elementSchema.text) {
            item.text = xmlInnerText(element);
        }

        if (extensions.length) {
            item.extensions = extensions;
        }

        return item;
    };

    var metadataParser = function (handler, text) {
        /// <summary>Parses a metadata document.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="text" type="String">Metadata text.</param>
        /// <returns>An object representation of the conceptual model.</returns>

        var doc = xmlParse(text);
        return parseConceptualModelElement(doc) || undefined;
    };

    odata.metadataHandler = handler(metadataParser, null, xmlMediaType, "1.0");



    var jsonMediaType = "application/json";

    var normalizeServiceDocument = function (data, baseURI) {
        /// <summary>Normalizes a JSON service document to look like an ATOM service document.</summary>
        /// <param name="data" type="Object">Object representation of service documents as deserialized.</param>
        /// <param name="baseURI" type="String">Base URI to resolve relative URIs.</param>
        /// <returns type="Object">An object representation of the service document.</returns>
        var workspace = { collections: [] };

        var i, len;
        for (i = 0, len = data.EntitySets.length; i < len; i++) {
            var title = data.EntitySets[i];
            var collection = {
                title: title,
                href: normalizeURI(title, baseURI)
            };

            workspace.collections.push(collection);
        }

        return { workspaces: [workspace] };
    };

    // The regular expression corresponds to something like this:
    // /Date(123+60)/
    //
    // This first number is date ticks, the + may be a - and is optional,
    // with the second number indicating a timezone offset in minutes.
    // 
    // On the wire, the leading and trailing forward slashes are
    // escaped without being required to so the chance of collisions is reduced;
    // however, by the time we see the objects, the characters already
    // look like regular forward slashes.
    var jsonDateRE = /^\/Date\((-?\d+)(\+|-)?(\d+)?\)\/$/;

    var minutesToOffset = function (minutes) {
        /// <summary>Formats the given minutes into (+/-)hh:mm format.</summary>
        /// <param name="minutes" type="Number">Number of minutes to format.</param>
        /// <returns type="String">The minutes in (+/-)hh:mm format.</returns>

        var sign;
        if (minutes < 0) {
            sign = "-";
            minutes = -minutes;
        } else {
            sign = "+";
        }

        var hours = Math.floor(minutes / 60);
        minutes = minutes - (60 * hours);

        return sign + formatNumberWidth(hours, 2) + ":" + formatNumberWidth(minutes, 2);
    };

    var parseJsonDateString = function (value) {
        /// <summary>Parses the JSON Date representation into a Date object.</summary>
        /// <param name="value" type="String">String value.</param>
        /// <returns type="Date">A Date object if the value matches one; falsy otherwise.</returns>

        var arr = value && jsonDateRE.exec(value);
        if (arr) {
            // 0 - complete results; 1 - ticks; 2 - sign; 3 - minutes
            var result = new Date(parseInt10(arr[1]));
            if (arr[2]) {
                var mins = parseInt10(arr[3]);
                if (arr[2] === "-") {
                    mins = -mins;
                }

                // The offset is reversed to get back the UTC date, which is
                // what the API will eventually have.
                var current = result.getUTCMinutes();
                result.setUTCMinutes(current - mins);
                result.__edmType = "Edm.DateTimeOffset";
                result.__offset = minutesToOffset(mins);
            }
            if (!isNaN(result.valueOf())) {
                return result;
            }
        }

        // Allow undefined to be returned.
    };

    // Some JSON implementations cannot produce the character sequence \/
    // which is needed to format DateTime and DateTimeOffset into the 
    // JSON string representation defined by the OData protocol.
    // See the history of this file for a candidate implementation of
    // a 'formatJsonDateString' function.

    var traverseInternal = function (item, callback) {
        /// <summary>Traverses a tree of objects invoking callback for every value.</summary>
        /// <param name="item" type="Object">Object or array to traverse.</param>
        /// <param name="callback" type="Function">
        /// Callback function with key and value, similar to JSON.parse reviver.
        /// </param>
        /// <returns type="Object">The object with traversed properties.</returns>
        /// <remarks>Unlike the JSON reviver, this won't delete null members.</remarks>

        if (item && typeof item === "object") {
            for (var name in item) {
                var value = item[name];
                var result = traverseInternal(value, callback);
                result = callback(name, result);
                if (result !== value) {
                    if (value === undefined) {
                        delete item[name];
                    } else {
                        item[name] = result;
                    }
                }
            }
        }

        return item;
    };

    var traverse = function (item, callback) {
        /// <summary>Traverses a tree of objects invoking callback for every value.</summary>
        /// <param name="item" type="Object">Object or array to traverse.</param>
        /// <param name="callback" type="Function">
        /// Callback function with key and value, similar to JSON.parse reviver.
        /// </param>
        /// <returns type="Object">The traversed object.</returns>
        /// <remarks>Unlike the JSON reviver, this won't delete null members.</remarks>

        return callback("", traverseInternal(item, callback));
    };

    var jsonParser = function (handler, text, context) {
        /// <summary>Parses a JSON OData payload.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="text">Payload text (this parser also handles pre-parsed objects).</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>An object representation of the OData payload.</returns>

        var metadata = context.metadata;
        var recognizeDates = defined(context.context ? context.context.recognizeDates : undefined, handler.recognizeDates);

        var json = (typeof text === "string") ? window.JSON.parse(text) : text;
        json = traverse(json, function (_, value) {
            if (value && typeof value === "object") {
                var dataTypeName = value.__metadata && value.__metadata.type;
                var dataType = lookupEntityType(dataTypeName, metadata) || lookupComplexType(dataTypeName, metadata);

                if (dataType) {
                    var properties = dataType.property;
                    if (properties) {
                        var i, len;
                        for (i = 0, len = properties.length; i < len; i++) {
                            var property = properties[i];
                            var propertyName = property.name;
                            var propertyValue = value[propertyName];

                            if (property.type === "Edm.DateTime" || property.type === "Edm.DateTimeOffset") {
                                if (propertyValue) {
                                    propertyValue = parseJsonDateString(propertyValue);
                                    if (!propertyValue) {
                                        throw { message: "Invalid date/time value" };
                                    }
                                    value[propertyName] = propertyValue;
                                }
                            } else if (property.type === "Edm.Time") {
                                value[propertyName] = parseDuration(propertyValue);
                            }
                        }
                    }
                } else if (recognizeDates) {
                    for (var name in value) {
                        propertyValue = value[name];
                        if (typeof propertyValue === "string") {
                            value[name] = parseJsonDateString(propertyValue) || propertyValue;
                        }
                    }
                }
            }
            return value;
        }).d;

        json = jsonUpdateDataFromVersion(json, context.dataServiceVersion);
        json = jsonNormalizeData(json, context.response.requestUri);

        return json;
    };

    var jsonSerializer = function (handler, data, context) {
        /// <summary>Serializes the data by returning its string representation.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="data">Data to serialize.</param>
        /// <param name="context" type="Object">Object with serialization context.</param>
        /// <returns type="String">The string representation of data.</returns>

        var result = undefined;
        var cType = context.contentType = context.contentType || contentType(jsonMediaType);
        if (cType && cType.mediaType === jsonMediaType) {
            var json = data;

            // Save the current date.toJSON function
            var dateToJSON = Date.prototype.toJSON;
            try {
                // Set our own date.toJSON function
                Date.prototype.toJSON = function () {
                    return formatDateTimeOffset(this);
                };
                result = window.JSON.stringify(json, jsonReplacer);
            } finally {
                // Restore the original toJSON function
                Date.prototype.toJSON = dateToJSON;
            }
        }
        return result;
    };

    var jsonReplacer = function (_, value) {
        /// <summary>JSON replacer function for converting a value to its JSON representation.</summary>
        /// <param value type="Object">Value to convert.</param>
        /// <returns type="String">JSON representation of the input value.</returns>
        /// <remarks>
        ///   This method is used during JSON serialization and invoked only by the JSON.stringify function. 
        ///   It should never be called directly.
        /// </remarks>

        if (value && value.__edmType === "Edm.Time") {
            return formatDuration(value);
        } else {
            return value;
        }
    };

    var jsonNormalizeData = function (data, baseURI) {
        /// <summary>
        /// Normalizes the specified data into an intermediate representation.
        /// like the latest supported version.
        /// </summary>
        /// <param name="data" optional="false">Data to update.</param>
        /// <param name="baseURI" optional="false">URI to use as the base for normalizing references.</param>

        if (payloadTypeOf(data) === PAYLOADTYPE_SVCDOC) {
            return normalizeServiceDocument(data, baseURI);
        } else {
            return data;
        }
    };

    var jsonUpdateDataFromVersion = function (data, dataVersion) {
        /// <summary>
        /// Updates the specified data in the specified version to look
        /// like the latest supported version.
        /// </summary>
        /// <param name="data" optional="false">Data to update.</param>
        /// <param name="dataVersion" optional="true" type="String">Version the data is in (possibly unknown).</param>

        // Strip the trailing comma if there.
        if (dataVersion && dataVersion.lastIndexOf(";") === dataVersion.length - 1) {
            dataVersion = dataVersion.substr(0, dataVersion.length - 1);
        }

        if (!dataVersion) {
            // Try to detect whether this is an array, in which case it
            // should probably be a feed structure - indicates V1 behavior.
            if (isArray(data)) {
                dataVersion = "1.0";
            }
        }

        // If the data is in the latest version, there is nothing to update.
        if (dataVersion === "2.0") {
            return data;
        }

        if (dataVersion === "1.0") {
            if (isArray(data)) {
                data = { results: data };
            }
        }

        return data;
    };

    odata.jsonHandler = handler(jsonParser, jsonSerializer, jsonMediaType, "2.0");
    odata.jsonHandler.recognizeDates = false;


    var batchMediaType = "multipart/mixed";
    var responseStatusRegex = /^HTTP\/1\.\d (\d{3}) (.*)$/i;
    var responseHeaderRegex = /^([^()<>@,;:\\"\/[\]?={} \t]+)\s?:\s?(.*)/;

    var hex16 = function () {
        /// <summary>
        /// Calculates a random 16 bit number and returns it in hexadecimal format.
        /// </summary>
        /// <returns type="String">A 16-bit number in hex format.</returns>

        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);
    };

    var createBoundary = function (prefix) {
        /// <summary>
        /// Creates a string that can be used as a multipart request boundary.
        /// </summary>
        /// <param name="prefix" type="String" optional="true">String to use as the start of the boundary string</param>
        /// <returns type="String">Boundary string of the format: <prefix><hex16>-<hex16>-<hex16></returns>

        return prefix + hex16() + "-" + hex16() + "-" + hex16();
    };

    var partHandler = function (context) {
        /// <summary>
        /// Gets the handler for data serialization of individual requests / responses in a batch.
        /// </summary>
        /// <param name="context">Context used for data serialization.</param>
        /// <returns>Handler object.</returns>

        return context.handler.partHandler;
    };

    var currentBoundary = function (context) {
        /// <summary>
        /// Gets the current boundary used for parsing the body of a multipart response.
        /// </summary>
        /// <param name="context">Context used for parsing a multipart response.</param>
        /// <returns type="String">Boundary string.</returns>

        var boundaries = context.boundaries;
        return boundaries[boundaries.length - 1];
    };

    var batchParser = function (handler, text, context) {
        /// <summary>Parses a batch response.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="text" type="String">Batch text.</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>An object representation of the batch.</returns>

        var boundary = context.contentType.properties["boundary"];
        return { __batchResponses: readBatch(text, { boundaries: [boundary], handlerContext: context }) };
    };

    var batchSerializer = function (handler, data, context) {
        /// <summary>Serializes a batch object representation into text.</summary>
        /// <param name="handler">This handler.</param>
        /// <param name="data" type="Object">Representation of a batch.</param>
        /// <param name="context" type="Object">Object with parsing context.</param>
        /// <returns>An text representation of the batch object; undefined if not applicable.</returns>

        var cType = context.contentType = context.contentType || contentType(batchMediaType);
        if (cType.mediaType === batchMediaType) {
            return writeBatch(data, context);
        }
    };

    var readBatch = function (text, context) {
        /// <summary>
        /// Parses a multipart/mixed response body from from the position defined by the context. 
        /// </summary>
        /// <param name="text" type="String" optional="false">Body of the multipart/mixed response.</param>
        /// <param name="context">Context used for parsing.</param>
        /// <returns>Array of objects representing the individual responses.</returns>

        var delimiter = "--" + currentBoundary(context);

        // Move beyond the delimiter and read the complete batch
        readTo(text, context, delimiter);

        // Ignore the incoming line
        readLine(text, context);

        // Read the batch parts
        var responses = [];
        var partEnd;

        while (partEnd !== "--" && context.position < text.length) {
            var partHeaders = readHeaders(text, context);
            var partContentType = contentType(partHeaders["Content-Type"]);

            if (partContentType && partContentType.mediaType === batchMediaType) {
                context.boundaries.push(partContentType.properties["boundary"]);
                try {
                    var changeResponses = readBatch(text, context);
                } catch (e) {
                    e.response = readResponse(text, context, delimiter);
                    changeResponses = [e];
                }
                responses.push({__changeResponses: changeResponses});
                context.boundaries.pop();
                readTo(text, context, "--" + currentBoundary(context));
            } else {
                if (!partContentType || partContentType.mediaType !== "application/http") {
                    throw { message: "invalid MIME part type " };
                }
                // Skip empty line
                readLine(text, context);
                // Read the response
                var response = readResponse(text, context, delimiter);
                try {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        partHandler(context.handlerContext).read(response, context.handlerContext);
                    } else {
                        // Keep track of failed responses and continue processing the batch.
                        response = { message: "HTTP request failed", response: response };
                    }
                } catch (e) {
                    response = e;
                }

                responses.push(response);
            }

            partEnd = text.substr(context.position, 2);

            // Ignore the incoming line.
            readLine(text, context);
        }
        return responses;
    };

    var readHeaders = function (text, context) {
        /// <summary>
        /// Parses the http headers in the text from the position defined by the context.  
        /// </summary>
        /// <param name="text" type="String" optional="false">Text containing an http response's headers</param>
        /// <param name="context">Context used for parsing.</param>
        /// <returns>Object containing the headers as key value pairs.</returns>
        /// <remarks>
        /// This function doesn't support split headers and it will stop reading when it hits two consecutive line breaks.
        /// </remarks>

        var headers = {};
        var parts;
        var line;
        var pos;
        
        do {
            pos = context.position;
            line = readLine(text, context);
            parts = responseHeaderRegex.exec(line);
            if (parts !== null) {
                headers[parts[1]] = parts[2];
            } else {
              // Whatever was found is not a header, so reset the context position.
              context.position = pos;
            }
        } while(line && parts);

        normalizeHeaders(headers);

        return headers;
    };

    var readResponse = function (text, context, delimiter) {
        /// <summary>
        /// Parses an HTTP response. 
        /// </summary>
        /// <param name="text" type="String" optional="false">Text representing the http response.</param>
        /// <param name="context" optional="false">Context used for parsing.</param>
        /// <param name="delimiter" type="String" optional="false">String used as delimiter of the multipart response parts.</param>
        /// <returns>Object representing the http response.</returns>

        // Read the status line. 
        var pos = context.position;
        var match = responseStatusRegex.exec(readLine(text, context));

        var statusCode;
        var statusText;
        var headers;

        if (match) {
            statusCode = match[1];
            statusText = match[2];
            headers = readHeaders(text, context);
            readLine(text, context);
        } else {
            context.position = pos;
        }

         return {
            statusCode: statusCode,
            statusText: statusText,
            headers: headers,
            body: readTo(text, context, delimiter)
        };
    };

    var readLine = function (text, context) {
        /// <summary>
        /// Returns a substring from the position defined by the context up to the next line break (CRLF).
        /// </summary>
        /// <param name="text" type="String" optional="false">Input string.</param>
        /// <param name="context" optional="false">Context used for reading the input string.</param>
        /// <returns type="String">Substring to the first ocurrence of a line break or null if none can be found. </returns>

        return readTo(text, context, "\r\n");
    };

    var readTo = function (text, context, str) {
        /// <summary>
        /// Returns a substring from the position given by the context up to value defined by the str parameter and increments the position in the context.
        /// </summary>
        /// <param name="text" type="String" optional="false">Input string.</param>
        /// <param name="context" type="Object" optional="false">Context used for reading the input string.</param>
        /// <param name="str" type="String" optional="true">Substring to read up to.</param>
        /// <returns type="String">Substring to the first ocurrence of str or the end of the input string if str is not specified. Null if the marker is not found.</returns>

        var start = context.position || 0;
        var end = text.length;
        if (str) {
            end = text.indexOf(str, start);
            if (end === -1) {
                return null;
            }
            context.position = end + str.length;
        } else {
            context.position = end;
        }

        return text.substring(start, end);
    };

    var writeBatch = function (data, context) {
        /// <summary>
        /// Serializes a batch request object to a string.
        /// </summary>
        /// <param name="data" optional="false">Batch request object in payload representation format</param>
        /// <param name="context" optional="false">Context used for the serialization</param>
        /// <returns type="String">String representing the batch request</returns>

        var type = payloadTypeOf(data);
        if (type !== PAYLOADTYPE_BATCH) {
            throw { message: "Serialization of batches of type \"" + type + "\" is not supported" };
        }

        var batchBoundary = createBoundary("batch_");
        var batchParts = data.__batchRequests;
        var batch = "";
        var i, len;
        for (i = 0, len = batchParts.length; i < len; i++) {
            batch += writeBatchPartDelimiter(batchBoundary, false) +
                     writeBatchPart(batchParts[i], context);
        }
        batch += writeBatchPartDelimiter(batchBoundary, true);

        // Register the boundary with the request content type.
        var contentTypeProperties = context.contentType.properties;
        contentTypeProperties.boundary = batchBoundary;

        return batch;
    };

    var writeBatchPartDelimiter = function (boundary, close) {
        /// <summary>
        /// Creates the delimiter that indicates that start or end of an individual request.
        /// </summary>
        /// <param name="boundary" type="String" optional="false">Boundary string used to indicate the start of the request</param>
        /// <param name="close" type="Boolean">Flag indicating that a close delimiter string should be generated</param>
        /// <returns type="String">Delimiter string</returns>

        var result = "\r\n--" + boundary;
        if (close) {
            result += "--";
        }

        return result + "\r\n";
    };

    var writeBatchPart = function (part, context, nested) {
        /// <summary>
        /// Serializes a part of a batch request to a string. A part can be either a GET request or 
        /// a change set grouping several CUD (create, update, delete) requests.
        /// </summary>
        /// <param name="part" optional="false">Request or change set object in payload representation format</param>
        /// <param name="context" optional="false">Object containing context information used for the serialization</param>
        /// <param name="nested" type="boolean" optional="true">Flag indicating that the part is nested inside a change set</param>
        /// <returns type="String">String representing the serialized part</returns>
        /// <remarks>
        /// A change set is an array of request objects and they cannot be nested inside other change sets.
        /// </remarks>

        var changeSet = part.__changeRequests;
        var result;
        if (isArray(changeSet)) {
            if (nested) {
                throw { message: "Not Supported: change set nested in other change set" };
            }

            var changeSetBoundary = createBoundary("changeset_");
            result = "Content-Type: " + batchMediaType + "; boundary=" + changeSetBoundary + "\r\n";
            var i, len;
            for (i = 0, len = changeSet.length; i < len; i++) {
                result += writeBatchPartDelimiter(changeSetBoundary, false) +
                     writeBatchPart(changeSet[i], context, true);
            }

            result += writeBatchPartDelimiter(changeSetBoundary, true);
        } else {
            result = "Content-Type: application/http\r\nContent-Transfer-Encoding: binary\r\n\r\n";
            prepareRequest(part, partHandler(context), { metadata: context.metadata });
            result += writeRequest(part);
        }

        return result;
    };

    var writeRequest = function (request) {
        /// <summary>
        /// Serializes a request object to a string.
        /// </summary>
        /// <param name="request" optional="false">Request object to serialize</param>
        /// <returns type="String">String representing the serialized request</returns>

        var result = (request.method ? request.method : "GET") + " " + request.requestUri + " HTTP/1.1\r\n";
        for (var name in request.headers) {
            if (request.headers[name]) {
                result = result + name + ": " + request.headers[name] + "\r\n";
            }
        }

        result += "\r\n";

        if (request.body) {
            result += request.body;
        }

        return result;
    };

    odata.batchHandler = handler(batchParser, batchSerializer, batchMediaType, "1.0");



    var handlers = [odata.jsonHandler, odata.atomHandler, odata.xmlHandler, odata.textHandler];

    var dispatchHandler = function (handlerMethod, requestOrResponse, context) {
        /// <summary>Dispatches an operation to handlers.</summary>
        /// <param name="handlerMethod" type="String">Name of handler method to invoke.</param>
        /// <param name="requestOrResponse" type="Object">request/response argument for delegated call.</param>
        /// <param name="context" type="Object">context argument for delegated call.</param>

        var i, len;
        for (i = 0, len = handlers.length; i < len && !handlers[i][handlerMethod](requestOrResponse, context); i++) {
        }

        if (i === len) {
            throw { message: "no handler for data" };
        }
    };

    odata.defaultSuccess = function (data) {
        /// <summary>Default success handler for OData.</summary>
        /// <param name="data">Data to process.</param>

        window.alert(window.JSON.stringify(data));
    };

    odata.defaultError = throwErrorCallback;

    odata.defaultHandler = {
        read: function (response, context) {
            /// <summary>Reads the body of the specified response by delegating to JSON and ATOM handlers.</summary>
            /// <param name="response">Response object.</param>
            /// <param name="context">Operation context.</param>

            if (response && assigned(response.body) && response.headers["Content-Type"]) {
                dispatchHandler("read", response, context);
            }
        },

        write: function (request, context) {
            /// <summary>Write the body of the specified request by delegating to JSON and ATOM handlers.</summary>
            /// <param name="request">Reques tobject.</param>
            /// <param name="context">Operation context.</param>

            dispatchHandler("write", request, context);
        },

        accept: "application/atomsvc+xml;q=0.8, application/json;q=0.5, */*;q=0.1"
    };

    odata.defaultMetadata = [];

    odata.read = function (urlOrRequest, success, error, handler, httpClient, metadata) {
        /// <summary>Reads data from the specified URL.</summary>
        /// <param name="urlOrRequest">URL to read data from.</param>
        /// <param name="success" type="Function" optional="true">Callback for a successful read operation.</param>
        /// <param name="error" type="Function" optional="true">Callback for handling errors.</param>
        /// <param name="handler" type="Object" optional="true">Handler for data serialization.</param>
        /// <param name="httpClient" type="Object" optional="true">HTTP client layer.</param>
        /// <param name="metadata" type="Object" optional="true">Conceptual metadata for this request.</param>

        var request;
        if (urlOrRequest instanceof String || typeof urlOrRequest === "string") {
            request = { requestUri: urlOrRequest };
        } else {
            request = urlOrRequest;
        }

        return odata.request(request, success, error, handler, httpClient, metadata);
    };

    odata.request = function (request, success, error, handler, httpClient, metadata) {
        /// <summary>Sends a request containing OData payload to a server.</summary>
        /// <param name="request" type="Object">Object that represents the request to be sent.</param>
        /// <param name="success" type="Function" optional="true">Callback for a successful read operation.</param>
        /// <param name="error" type="Function" optional="true">Callback for handling errors.</param>
        /// <param name="handler" type="Object" optional="true">Handler for data serialization.</param>
        /// <param name="httpClient" type="Object" optional="true">HTTP client layer.</param>
        /// <param name="metadata" type="Object" optional="true">Conceptual metadata for this request.</param>

        if (!success) {
            success = odata.defaultSuccess;
        }

        if (!error) {
            error = odata.defaultError;
        }

        if (!handler) {
            handler = odata.defaultHandler;
        }

        if (!httpClient) {
            httpClient = odata.defaultHttpClient;
        }

        if (!metadata) {
            metadata = odata.defaultMetadata;
        }

        // Augment the request with additional defaults.
        request.recognizeDates = defined(request.recognizeDates, odata.jsonHandler.recognizeDates);
        request.callbackParameterName = defined(request.callbackParameterName, odata.defaultHttpClient.callbackParameterName);
        request.formatQueryString = defined(request.formatQueryString, odata.defaultHttpClient.formatQueryString);
        request.enableJsonpCallback = defined(request.enableJsonpCallback, odata.defaultHttpClient.enableJsonpCallback);

        // Create the base context for read/write operations, also specifying complete settings.
        var context = {
            metadata: metadata,
            recognizeDates: request.recognizeDates,
            callbackParameterName: request.callbackParameterName,
            formatQueryString: request.formatQueryString,
            enableJsonpCallback: request.enableJsonpCallback
        };

        try {
            prepareRequest(request, handler, context);
            return invokeRequest(request, success, error, handler, httpClient, context);
        } catch (err) {
            error(err);
        }
    };

    // Configure the batch handler to use the default handler for the batch parts.
    odata.batchHandler.partHandler = odata.defaultHandler;



    var localStorage = window.localStorage;

    var domStoreDateToJSON = function () {
        /// <summary>Converts a Date object into an object representation friendly to JSON serialization.</summary>
        /// <returns type="Object">Object that represents the Date.</returns>
        /// <remarks>
        ///   This method is used to override the Date.toJSON method and is called only by
        ///   JSON.stringify.  It should never be called directly.
        /// </remarks>

        var newValue = { v: this.valueOf(), t: "[object Date]" };
        // Date objects might have extra properties on them so we save them.
        for (var name in this) {
            newValue[name] = this[name];
        }
        return newValue;
    };

    var domStoreJSONToDate = function (_, value) {
        /// <summary>JSON reviver function for converting an object representing a Date in a JSON stream to a Date object</summary>
        /// <param value="Object">Object to convert.</param>
        /// <returns type="Date">Date object.</returns>
        /// <remarks>
        ///   This method is used during JSON parsing and invoked only by the reviver function. 
        ///   It should never be called directly.
        /// </remarks>

        if (value && value.t === "[object Date]") {
            var newValue = new Date(value.v);
            for (var name in value) {
                if (name !== "t" && name !== "v") {
                    newValue[name] = value[name];
                }
            }
            value = newValue;
        }
        return value;
    };

    var qualifyDomStoreKey = function (store, key) {
        /// <summary>Qualifies the key with the name of the store.</summary>
        /// <param name="store" type="Object">Store object whose name will be used for qualifying the key.</param>
        /// <param name="key" type="String">Key string.</param>
        /// <returns type="String">Fully qualified key string.</returns>

        return store.name + "#!#" + key;
    };

    var unqualifyDomStoreKey = function (store, key) {
        /// <summary>Gets the key part of a fully qualified key string.</summary>
        /// <param name="store" type="Object">Store object whose name will be used for qualifying the key.</param>
        /// <param name="key" type="String">Fully qualified key string.</param>
        /// <returns type="String">Key part string</returns>

        return key.replace(store.name + "#!#", "");
    };

    var DomStore = function (name) {
        /// <summary>Constructor for store objects that use DOM storage as the underlying mechanism.</summary>
        /// <param name="name" type="String">Store name.</param>
        this.name = name;
    };

    DomStore.create = function (name) {
        /// <summary>Creates a store object that uses DOM Storage as its underlying mechanism.</summary>
        /// <param name="name" type="String">Store name.</param>
        /// <returns type="Object">Store object.</returns>

        if (DomStore.isSupported()) {
            return new DomStore(name);
        }

        throw { message: "Web Storage not supported by the browser" };
    };

    DomStore.isSupported = function () {
        /// <summary>Checks whether the underlying mechanism for this kind of store objects is supported by the browser.</summary>
        /// <returns type="Boolean">True if the mechanism is supported by the browser; otherwise false.</summary>
        return !!localStorage;
    };

    DomStore.prototype.add = function (key, value, success, error) {
        /// <summary>Adds a new value identified by a key to the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="value">Value that is going to be added to the store.</param>
        /// <param name="success" type="Function" optional="no">Callback for a successful add operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        /// <remarks>
        ///    This method errors out if the store already contains the specified key.
        /// </remarks>

        error = error || this.defaultError;
        var store = this;
        this.contains(key, function (contained) {
            if (!contained) {
                store.addOrUpdate(key, value, success, error);
            } else {
                delay(error, { message: "key already exists", key: key });
            }
        }, error);
    };

    DomStore.prototype.addOrUpdate = function (key, value, success, error) {
        /// <summary>Adds or updates a value identified by a key to the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="value">Value that is going to be added or updated to the store.</param>
        /// <param name="success" type="Function" optional="no">Callback for a successful add or update operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        /// <remarks>
        ///   This method will overwrite the key's current value if it already exists in the store; otherwise it simply adds the new key and value.
        /// </remarks>

        error = error || this.defaultError;

        if (key instanceof Array) {
            error({ message: "Array of keys not supported" });
        } else {
            var fullKey = qualifyDomStoreKey(this, key);
            var oldDateToJSON = Date.prototype.toJSON;
            try {
                var storedValue = value;
                if (storedValue !== undefined) {
                    // Dehydrate using json
                    Date.prototype.toJSON = domStoreDateToJSON;
                    storedValue = window.JSON.stringify(value);
                }
                // Save the json string.
                localStorage.setItem(fullKey, storedValue);
                delay(success, key, value);
            }
            catch (e) {
                if (e.code === 22 || e.number === 0x8007000E) {
                    delay(error, { name: "QUOTA_EXCEEDED_ERR", error: e });
                } else {
                    delay(error, e);
                }
            }
            finally {
                Date.prototype.toJSON = oldDateToJSON;
            }
        }
    };

    DomStore.prototype.clear = function (success, error) {
        /// <summary>Removes all the data associated with this store object.</summary>
        /// <param name="success" type="Function" optional="no">Callback for a successful clear operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        /// <remarks>
        ///    In case of an error, this method will not restore any keys that might have been deleted at that point.
        /// </remarks>

        error = error || this.defaultError;
        try {
            var i = 0, len = localStorage.length;
            while (len > 0 && i < len) {
                var fullKey = localStorage.key(i);
                var key = unqualifyDomStoreKey(this, fullKey);
                if (fullKey !== key) {
                    localStorage.removeItem(fullKey);
                    len = localStorage.length;
                } else {
                    i++;
                }
            };
            delay(success);
        }
        catch (e) {
            delay(error, e);
        }
    };

    DomStore.prototype.close = function () {
        /// <summary>This function does nothing in DomStore as it does not have a connection model</summary>
    };

    DomStore.prototype.contains = function (key, success, error) {
        /// <summary>Checks whether a key exists in the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="success" type="Function" optional="no">Callback indicating whether the store contains the key or not.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        error = error || this.defaultError;
        try {
            var fullKey = qualifyDomStoreKey(this, key);
            var value = localStorage.getItem(fullKey);
            delay(success, value !== null);
        } catch (e) {
            delay(error, e);
        }
    };

    DomStore.prototype.defaultError = throwErrorCallback;

    DomStore.prototype.getAllKeys = function (success, error) {
        /// <summary>Gets all the keys that exist in the store.</summary>
        /// <param name="success" type="Function" optional="no">Callback for a successful get operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>

        error = error || this.defaultError;

        var results = [];
        var i, len;

        try {
            for (i = 0, len = localStorage.length; i < len; i++) {
                var fullKey = localStorage.key(i);
                var key = unqualifyDomStoreKey(this, fullKey);
                if (fullKey !== key) {
                    results.push(key);
                }
            }
            delay(success, results);
        }
        catch (e) {
            delay(error, e);
        }
    };

    /// <summary>Identifies the underlying mechanism used by the store.</summary>
    DomStore.prototype.mechanism = "dom";

    DomStore.prototype.read = function (key, success, error) {
        /// <summary>Reads the value associated to a key in the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="success" type="Function" optional="no">Callback for a successful reads operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        error = error || this.defaultError;

        if (key instanceof Array) {
            error({ message: "Array of keys not supported" });
        } else {
            try {
                var fullKey = qualifyDomStoreKey(this, key);
                var value = localStorage.getItem(fullKey);
                if (value !== null && value !== "undefined") {
                    // Hydrate using json
                    value = window.JSON.parse(value, domStoreJSONToDate);
                }
                else {
                    value = undefined;
                }
                delay(success, key, value);
            } catch (e) {
                delay(error, e);
            }
        }
    };

    DomStore.prototype.remove = function (key, success, error) {
        /// <summary>Removes a key and its value from the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="success" type="Function" optional="no">Callback for a successful remove operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        error = error || this.defaultError;

        if (key instanceof Array) {
            error({ message: "Batches not supported" });
        } else {
            try {
                var fullKey = qualifyDomStoreKey(this, key);
                localStorage.removeItem(fullKey);
                delay(success);
            } catch (e) {
                delay(error, e);
            }
        }
    };

    DomStore.prototype.update = function (key, value, success, error) {
        /// <summary>Updates the value associated to a key in the store.</summary>
        /// <param name="key" type="String">Key string.</param>
        /// <param name="value">New value.</param>
        /// <param name="success" type="Function" optional="no">Callback for a successful update operation.</param>
        /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
        /// <remarks>
        ///    This method errors out if the specified key is not found in the store.
        /// </remarks>

        error = error || this.defaultError;
        var store = this;
        this.contains(key, function (contained) {
            if (contained) {
                store.addOrUpdate(key, value, success, error);
            } else {
                delay(error, { message: "key not found", key: key });
            }
        }, error);
    };



    var mozIndexedDB = window.mozIndexedDB;

    var IDBTransaction = window.IDBTransaction;
    var IDBKeyRange = window.IDBKeyRange;

    var getError = function (error, defaultError) {
        /// <summary>Returns either a specific error handler or the default error handler</summary>
        /// <param name="error" type="Function">The specific error handler</param>
        /// <param name="defaultError" type="Function">The default error handler</param>
        /// <returns type="Function">The error callback</returns>
        return function (e) {
            if (e.code === 11 /* IndexedDb disk quota exceeded */) {
                e = { name: "QUOTA_EXCEEDED_ERR", error: e };
            }

            if (error) {
                error(e);
            } else if (defaultError) {
                defaultError(e);
            }
        };
    };

    var openTransaction = function (store, mode, success, error) {
        /// <summary>Opens a new transaction to the store</summary>
        /// <param name="store" type="IndexedDBStore">The store object</param>
        /// <param name="mode" type="Short">The read/write mode of the transaction (constants from IDBTransaction)</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = store.name;
        var db = store.db;
        var errorCallback = getError(error, store.defaultError);

        if (db) {
            success(db.transaction(name, mode));
        } else {
            var request = mozIndexedDB.open("_datajs_" + name);
            request.onsuccess = function (event) {
                db = store.db = event.target.result;
                if (!db.objectStoreNames.contains(name)) {
                    var versionRequest = db.setVersion("1.0");
                    versionRequest.onsuccess = function () {
                        db.createObjectStore(name, null, false);
                        success(db.transaction(name, mode));
                    };
                    versionRequest.onerror = errorCallback;
                    versionRequest.onblocked = errorCallback;
                } else {
                    success(db.transaction(name, mode));
                }
            };
            request.onerror = getError(error, this.defaultError);
        }
    };

    var IndexedDBStore = function (name) {
        /// <summary>Creates a new IndexedDBStore.</summary>
        /// <param name="name" type="String">The name of the store.</param>
        /// <returns type="Object">The new IndexedDBStore.</returns>
        this.name = name;
    };

    IndexedDBStore.create = function (name) {
        /// <summary>Creates a new IndexedDBStore.</summary>
        /// <param name="name" type="String">The name of the store.</param>
        /// <returns type="Object">The new IndexedDBStore.</returns>
        if (IndexedDBStore.isSupported()) {
            return new IndexedDBStore(name);
        }

        throw { message: "IndexedDB is not supported on this browser" };
    };

    IndexedDBStore.isSupported = function () {
        /// <summary>Returns whether IndexedDB is supported.</summary>
        /// <returns type="Boolean">True if IndexedDB is supported, false otherwise.</returns>
        return !!mozIndexedDB;
    };

    IndexedDBStore.prototype.add = function (key, value, success, error) {
        /// <summary>Adds a key/value pair to the store</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="value" type="Object">The value</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        var keys = [];
        var values = [];

        if (key instanceof Array) {
            keys = key;
            values = value;
        } else {
            keys = [key];
            values = [value];
        }

        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            transaction.onabort = getError(error, defaultError);
            transaction.oncomplete = function () {
                if (key instanceof Array) {
                    success(keys, values);
                } else {
                    success(key, value);
                }
            };

            for (var i = 0; i < keys.length && i < values.length; i++) {
                transaction.objectStore(name).add(values[i], keys[i]);
            }
        }, error);
    };

    IndexedDBStore.prototype.addOrUpdate = function (key, value, success, error) {
        /// <summary>Adds or updates a key/value pair in the store</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="value" type="Object">The value</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        var keys = [];
        var values = [];

        if (key instanceof Array) {
            keys = key;
            values = value;
        } else {
            keys = [key];
            values = [value];
        }

        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            transaction.onabort = getError(error, defaultError);
            transaction.oncomplete = function () {
                if (key instanceof Array) {
                    success(keys, values);
                } else {
                    success(key, value);
                }
            };

            for (var i = 0; i < keys.length && i < values.length; i++) {
                transaction.objectStore(name).put(values[i], keys[i]);
            }
        }, error);
    };

    IndexedDBStore.prototype.clear = function (success, error) {
        /// <summary>Clears the store</summary>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            transaction.onerror = getError(error, defaultError);
            transaction.oncomplete = function () {
                success();
            };

            transaction.objectStore(name).clear();
        }, error);
    };

    IndexedDBStore.prototype.close = function () {
        /// <summary>Closes the connection to the database</summary>
        if (this.db) {
            this.db.close();
            this.db = null;
        }
    };

    IndexedDBStore.prototype.contains = function (key, success, error) {
        /// <summary>Returns whether the store contains a key</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        openTransaction(this, IDBTransaction.READ_ONLY, function (transaction) {
            var request = transaction.objectStore(name).openCursor(IDBKeyRange.only(key));
            transaction.oncomplete = function () {
                success(request.result !== undefined);
            };
            transaction.onerror = getError(error, defaultError);
        }, error);
    };

    IndexedDBStore.prototype.defaultError = throwErrorCallback;

    IndexedDBStore.prototype.getAllKeys = function (success, error) {
        /// <summary>Gets all the keys from the store</summary>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        openTransaction(this, IDBTransaction.READ_ONLY, function (transaction) {
            var results = [];

            transaction.oncomplete = function () {
                success(results);
            };

            var request = transaction.objectStore(name).openCursor();

            request.onerror = getError(error, defaultError);
            request.onsuccess = function (event) {
                var cursor = event.target.result;
                if (cursor) {
                    results.push(cursor.key);
                    // Some tools have issues because continue is a javascript reserved word. 
                    cursor["continue"].call(cursor);
                }
            };
        }, error);
    };

    /// <summary>Identifies the underlying mechanism used by the store.</summary>
    IndexedDBStore.prototype.mechanism = "indexeddb";

    IndexedDBStore.prototype.read = function (key, success, error) {
        /// <summary>Reads the value for the specified key</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        /// <remarks>If the key does not exist, the success handler will be called with value = undefined</remarks>
        var name = this.name;
        var defaultError = this.defaultError;
        var keys = (key instanceof Array) ? key : [key];

        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            var values = [];

            transaction.onerror = getError(error, defaultError);
            transaction.oncomplete = function () {
                if (key instanceof Array) {
                    success(keys, values);
                } else {
                    success(keys[0], values[0]);
                }
            };

            for (var i = 0; i < keys.length; i++) {
                // Some tools have issues because get is a javascript reserved word. 
                var objectStore = transaction.objectStore(name);
                var request = objectStore["get"].call(objectStore, keys[i]);
                request.onsuccess = function (event) {
                    values.push(event.target.result);
                };
            }
        }, error);
    };

    IndexedDBStore.prototype.remove = function (key, success, error) {
        /// <summary>Removes the specified from the store</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        var keys = (key instanceof Array) ? key : [key];

        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            transaction.onerror = getError(error, defaultError);
            transaction.oncomplete = function () {
                success();
            };

            for (var i = 0; i < keys.length; i++) {
                // Some tools have issues because continue is a javascript reserved word. 
                var objectStore = transaction.objectStore(name);
                objectStore["delete"].call(objectStore, keys[i]);
            }
        }, error);
    };

    IndexedDBStore.prototype.update = function (key, value, success, error) {
        /// <summary>Updates a key/value pair in the store</summary>
        /// <param name="key" type="String">The key</param>
        /// <param name="value" type="Object">The value</param>
        /// <param name="success" type="Function">The success callback</param>
        /// <param name="error" type="Function">The error callback</param>
        var name = this.name;
        var defaultError = this.defaultError;
        var keys = [];
        var values = [];

        if (key instanceof Array) {
            keys = key;
            values = value;
        } else {
            keys = [key];
            values = [value];
        }

        openTransaction(this, IDBTransaction.READ_WRITE, function (transaction) {
            transaction.onabort = getError(error, defaultError);
            transaction.oncomplete = function () {
                if (key instanceof Array) {
                    success(keys, values);
                } else {
                    success(key, value);
                }
            };

            for (var i = 0; i < keys.length && i < values.length; i++) {
                var request = transaction.objectStore(name).openCursor(IDBKeyRange.only(keys[i]));
                request.pair = { key: keys[i], value: values[i] };
                request.onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        cursor.update(event.target.pair.value);
                    } else {
                        transaction.abort();
                    }
                };
            }
        }, error);
    };



    var MemoryStore = function (name) {
        /// <summary>Constructor for store objects that use a sorted array as the underlying mechanism.</summary>
        /// <param name="name" type="String">Store name.</param>

        var holes = [];
        var items = [];
        var keys = {};

        this.name = name;

        var getErrorCallback = function (error) {
            return error || this.defaultError;
        };

        var validateKeyInput = function (key, error) {
            /// <summary>Validates that the specified key is not undefined, not null, and not an array</summary>
            /// <param name="key">Key value.</param>
            /// <param name="error" type="Function">Error callback.</param>
            /// <returns type="Boolean">True if the key is valid. False if the key is invalid and the error callback has been queued for execution.</returns>

            var messageString;

            if (key instanceof Array) {
                messageString = "Array of keys not supported";
            }

            if (key === undefined || key === null) {
                messageString = "Invalid key";
            }

            if (messageString) {
                delay(error, { message: messageString });
                return false;
            }
            return true;
        };

        this.add = function (key, value, success, error) {
            /// <summary>Adds a new value identified by a key to the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="value">Value that is going to be added to the store.</param>
            /// <param name="success" type="Function" optional="no">Callback for a successful add operation.</param>
            /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
            /// <remarks>
            ///    This method errors out if the store already contains the specified key.
            /// </remarks>

            error = getErrorCallback(error);

            if (validateKeyInput(key, error)) {
                if (!keys.hasOwnProperty(key)) {
                    this.addOrUpdate(key, value, success, error);
                } else {
                    error({ message: "key already exists", key: key });
                }
            }
        };

        this.addOrUpdate = function (key, value, success, error) {
            /// <summary>Adds or updates a value identified by a key to the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="value">Value that is going to be added or updated to the store.</param>
            /// <param name="success" type="Function" optional="no">Callback for a successful add or update operation.</param>
            /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
            /// <remarks>
            ///   This method will overwrite the key's current value if it already exists in the store; otherwise it simply adds the new key and value.
            /// </remarks>

            error = getErrorCallback(error);

            if (validateKeyInput(key, error)) {
                var index = keys[key];
                if (index === undefined) {
                    if (holes.length > 0) {
                        index = holes.splice(0, 1);
                    } else {
                        index = items.length;
                    }
                }
                items[index] = value;
                keys[key] = index;
                delay(success, key, value);
            }
        };

        this.clear = function (success) {
            /// <summary>Removes all the data associated with this store object.</summary>
            /// <param name="success" type="Function" optional="no">Callback for a successful clear operation.</param>

            items = [];
            keys = {};
            holes = [];

            delay(success);
        };

        this.contains = function (key, success) {
            /// <summary>Checks whether a key exists in the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="success" type="Function" optional="no">Callback indicating whether the store contains the key or not.</param>

            var contained = keys.hasOwnProperty(key);
            delay(success, contained);
        };

        this.getAllKeys = function (success) {
            /// <summary>Gets all the keys that exist in the store.</summary>
            /// <param name="success" type="Function" optional="no">Callback for a successful get operation.</param>

            var results = [];
            for (var name in keys) {
                results.push(name);
            }
            delay(success, results);
        };

        this.read = function (key, success, error) {
            /// <summary>Reads the value associated to a key in the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="success" type="Function" optional="no">Callback for a successful reads operation.</param>
            /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
            error = getErrorCallback(error);

            if (validateKeyInput(key, error)) {
                var index = keys[key];
                delay(success, key, items[index]);
            }
        };

        this.remove = function (key, success, error) {
            /// <summary>Removes a key and its value from the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="success" type="Function" optional="no">Callback for a successful remove operation.</param>
            /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
            error = getErrorCallback(error);

            if (validateKeyInput(key, error)) {
                var index = keys[key];
                if (index !== undefined) {
                    if (index === items.length - 1) {
                        items.pop();
                    } else {
                        items[index] = undefined;
                        holes.push(index);
                    }
                    delete keys[key];

                    // The last item was removed, no need to keep track of any holes in the array.
                    if (items.length === 0) {
                        holes = [];
                    }
                }

                delay(success);
            }
        };

        this.update = function (key, value, success, error) {
            /// <summary>Updates the value associated to a key in the store.</summary>
            /// <param name="key" type="String">Key string.</param>
            /// <param name="value">New value.</param>
            /// <param name="success" type="Function" optional="no">Callback for a successful update operation.</param>
            /// <param name="error" type="Function" optional="yes">Callback for handling errors. If not specified then store.defaultError is invoked.</param>
            /// <remarks>
            ///    This method errors out if the specified key is not found in the store.
            /// </remarks>

            error = getErrorCallback(error);
            if (validateKeyInput(key, error)) {
                if (keys.hasOwnProperty(key)) {
                    this.addOrUpdate(key, value, success, error);
                } else {
                    error({ message: "key not found", key: key });
                }
            }
        };
    };

    MemoryStore.create = function (name) {
        /// <summary>Creates a store object that uses memory storage as its underlying mechanism.</summary>
        /// <param name="name" type="String">Store name.</param>
        /// <returns type="Object">Store object.</returns>
        return new MemoryStore(name);
    };

    MemoryStore.isSupported = function () {
        /// <summary>Checks whether the underlying mechanism for this kind of store objects is supported by the browser.</summary>
        /// <returns type="Boolean">True if the mechanism is supported by the browser; otherwise false.</returns>
        return true;
    };

    MemoryStore.prototype.close = function () {
        /// <summary>This function does nothing in MemoryStore as it does not have a connection model.</summary>
    };

    MemoryStore.prototype.defaultError = throwErrorCallback;

    /// <summary>Identifies the underlying mechanism used by the store.</summary>
    MemoryStore.prototype.mechanism = "memory";



    var mechanisms = {
        indexeddb: IndexedDBStore,
        dom: DomStore,
        memory: MemoryStore
    };

    datajs.defaultStoreMechanism = "best";

    datajs.createStore = function (name, mechanism) {
        /// <summary>Creates a new store object.</summary>
        /// <param name="name" type="String">Store name.</param>
        /// <param name="mechanism" type="String" optional="true">A specific mechanism to use (defaults to best, can be "best", "dom", "indexeddb", "webdb").</param>
        /// <returns type="Object">Store object.</returns>

        if (!mechanism) {
            mechanism = datajs.defaultStoreMechanism;
        }

        if (mechanism === "best") {
            mechanism = (DomStore.isSupported()) ? "dom" : "memory";
        }

        var factory = mechanisms[mechanism];
        if (factory) {
            return factory.create(name);
        }

        throw { message: "Failed to create store", name: name, mechanism: mechanism };
    };




    var forwardCall = function (thisValue, name, returnValue) {
        /// <summary>Creates a new function to forward a call.</summary>
        /// <param name="thisValue" type="Object">Value to use as the 'this' object.</param>
        /// <param name="name" type="String">Name of function to forward to.</param>
        /// <param name="returnValue" type="Object">Return value for the forward call (helps keep identity when chaining calls).</param>
        /// <returns type="Function">A new function that will forward a call.</returns>

        return function () {
            thisValue[name].apply(thisValue, arguments);
            return returnValue;
        };
    };

    var DjsDeferred = function () {
        /// <summary>Initializes a new DjsDeferred object.</summary>
        /// <remarks>
        /// Compability Note A - Ordering of callbacks through chained 'then' invocations
        ///
        /// The Wiki entry at http://wiki.commonjs.org/wiki/Promises/A
        /// implies that .then() returns a distinct object.
        ////
        /// For compatibility with http://api.jquery.com/category/deferred-object/
        /// we return this same object. This affects ordering, as
        /// the jQuery version will fire callbacks in registration
        /// order regardless of whether they occur on the result
        /// or the original object.
        ///
        /// Compability Note B - Fulfillment value
        /// 
        /// The Wiki entry at http://wiki.commonjs.org/wiki/Promises/A
        /// implies that the result of a success callback is the
        /// fulfillment value of the object and is received by
        /// other success callbacks that are chained.
        ///
        /// For compatibility with http://api.jquery.com/category/deferred-object/
        /// we disregard this value instead.
        /// </remarks>

        this._arguments = undefined;
        this._done = undefined;
        this._fail = undefined;
        this.resolved = false;
        this.rejected = false;
    };

    DjsDeferred.prototype = {
        then: function (fulfilledHandler, errorHandler /*, progressHandler */) {
            /// <summary>Adds success and error callbacks for this deferred object.</summary>
            /// <param name="fulfilledHandler" type="Function" mayBeNull="true" optional="true">Success callback.</param>
            /// <param name="errorHandler" type="Function" mayBeNull="true" optional="true">Error callback.</param>
            /// <remarks>See Compatibility Note A.</remarks>

            if (fulfilledHandler) {
                if (!this._done) {
                    this._done = [fulfilledHandler];
                } else {
                    this._done.push(fulfilledHandler);
                }
            }

            if (errorHandler) {
                if (!this._fail) {
                    this._fail = [errorHandler];
                } else {
                    this._fail.push(errorHandler);
                }
            }

            //// See Compatibility Note A in the DjsDeferred constructor.
            //// if (!this._next) {
            ////    this._next = createDeferred();
            //// } 
            //// return this._next.promise();

            if (this._resolved) {
                this.resolve.apply(this, this._arguments);
            } else if (this._rejected) {
                this.reject.apply(this, this._arguments);
            }

            return this;
        },

        resolve: function (/* args */) {
            /// <summary>Invokes success callbacks for this deferred object.</summary>
            /// <remarks>All arguments are forwarded to success callbacks.</remarks>


            if (this._done) {
                var i, len;
                for (i = 0, len = this._done.length; i < len; i++) {
                    //// See Compability Note B - Fulfillment value.
                    //// var nextValue = 
                    this._done[i].apply(null, arguments);
                }

                //// See Compatibility Note A in the DjsDeferred constructor.
                //// this._next.resolve(nextValue);
                //// delete this._next;

                this._done = undefined;
                this._resolved = false;
                this._arguments = undefined;
            } else {
                this._resolved = true;
                this._arguments = arguments;
            }
        },

        reject: function (/* args */) {
            /// <summary>Invokes error callbacks for this deferred object.</summary>
            /// <remarks>All arguments are forwarded to error callbacks.</remarks>
            if (this._fail) {
                var i, len;
                for (i = 0, len = this._fail.length; i < len; i++) {
                    this._fail[i].apply(null, arguments);
                }

                this._fail = undefined;
                this._rejected = false;
                this._arguments = undefined;
            } else {
                this._rejected = true;
                this._arguments = arguments;
            }
        },

        promise: function () {
            /// <summary>Returns a version of this object that has only the read-only methods available.</summary>
            /// <returns>An object with only the promise object.</returns>

            var result = {};
            result.then = forwardCall(this, "then", result);
            return result;
        }
    };

    var createDeferred = function () {
        /// <summary>Creates a deferred object.</summary>
        /// <returns type="DjsDeferred">
        /// A new deferred object. If jQuery is installed, then a jQuery
        /// Deferred object is returned, which provides a superset of features.
        /// </returns>

        if (window.jQuery && window.jQuery.Deferred) {
            return new window.jQuery.Deferred();
        } else {
            return new DjsDeferred();
        }
    };



    var appendQueryOption = function (uri, queryOption) {
        /// <summary>Appends the specified escaped query option to the specified URI.</summary>
        /// <param name="uri" type="String">URI to append option to.</param>
        /// <param name="queryOption" type="String">Escaped query option to append.</param>
        var separator = (uri.indexOf("?") >= 0) ? "&" : "?";
        return uri + separator + queryOption;
    };

    var appendSegment = function (uri, segment) {
        /// <summary>Appends the specified segment to the given URI.</summary>
        /// <param name="uri" type="String">URI to append a segment to.</param>
        /// <param name="segment" type="String">Segment to append.</param>
        /// <returns type="String">The original URI with a new segment appended.</returns>

        var index = uri.indexOf("?");
        var queryPortion = "";
        if (index >= 0) {
            queryPortion = uri.substr(index);
            uri = uri.substr(0, index);
        }

        if (uri[uri.length - 1] !== "/") {
            uri += "/";
        }
        return uri + segment + queryPortion;
    };

    var buildODataRequest = function (uri, options) {
        /// <summary>Builds a request object to GET the specified URI.</summary>
        /// <param name="uri" type="String">URI for request.</param>
        /// <param name="options" type="Object">Additional options.</param>

        return {
            method: "GET",
            requestUri: uri,
            user: options.user,
            password: options.password,
            enableJsonpCallback: options.enableJsonpCallback,
            callbackParameterName: options.callbackParameterName,
            formatQueryString: options.formatQueryString
        };
    };

    var findQueryOptionStart = function (uri, name) {
        /// <summary>Finds the index where the value of a query option starts.</summary>
        /// <param name="uri" type="String">URI to search in.</param>
        /// <param name="name" type="String">Name to look for.</param>
        /// <returns type="Number">The index where the query option starts.</returns>

        var result = -1;
        var queryIndex = uri.indexOf("?");
        if (queryIndex !== -1) {
            var start = uri.indexOf("?" + name + "=", queryIndex);
            if (start === -1) {
                start = uri.indexOf("&" + name + "=", queryIndex);
            }
            if (start !== -1) {
                result = start + name.length + 2;
            }
        }
        return result;
    };

    var queryForData = function (uri, options, success, error) {
        /// <summary>Gets data from an OData service.</summary>
        /// <param name="uri" type="String">URI to the OData service.</param>
        /// <param name="options" type="Object">Object with additional well-known request options.</param>
        /// <param name="success" type="Function">Success callback.</param>
        /// <param name="error" type="Function">Error callback.</param>
        /// <returns type="Object">Object with an abort method.</returns>

        var request = queryForDataInternal(uri, options, [], success, error);
        return request;
    };

    var queryForDataInternal = function (uri, options, data, success, error) {
        /// <summary>Gets data from an OData service taking into consideration server side paging.</summary>
        /// <param name="uri" type="String">URI to the OData service.</param>
        /// <param name="options" type="Object">Object with additional well-known request options.</param>
        /// <param name="data" type="Array">Array that stores the data provided by the OData service.</param>
        /// <param name="success" type="Function">Success callback.</param>
        /// <param name="error" type="Function">Error callback.</param>
        /// <returns type="Object">Object with an abort method.</returns>

        var request = buildODataRequest(uri, options);
        var currentRequest = odata.request(request, function (newData) {
            var next = newData.__next;
            var results = newData.results;

            data = data.concat(results);

            if (next) {
                currentRequest = queryForDataInternal(next, options, data, success, error);
            } else {
                success(data);
            }
        }, error, undefined, options.httpClient, options.metadata);

        return {
            abort: function () {
                currentRequest.abort();
            }
        };
    };

    var ODataCacheSource = function (options) {
        /// <summary>Creates a data cache source object for requesting data from an OData service.</summary>
        /// <param name="options">Options for the cache data source.</param>
        /// <returns type="ODataCacheSource">A new data cache source instance.</returns>

        var that = this;
        var uri = options.source;
        
        that.identifier = normalizeURICase(encodeURI(decodeURI(uri)));
        that.options = options;

        that.count = function (success, error) {
            /// <summary>Gets the number of items in the collection.</summary>
            /// <param name="success" type="Function">Success callback with the item count.</param>
            /// <param name="error" type="Function">Error callback.</param>
            /// <returns type="Object">Request object with an abort method./<param>

            var options = that.options;
            return odata.request(
                buildODataRequest(appendSegment(uri, "$count"), options),
                function (data) {
                    var count = parseInt10(data.toString());
                    if (isNaN(count)) {
                        error({ message: "Count is NaN", count: count });
                    } else {
                        success(count);
                    }
                }, error, undefined, options.httpClient, options.metadata);
        };

        that.read = function (index, count, success, error) {
            /// <summary>Gets a number of consecutive items from the collection.</summary>
            /// <param name="index" type="Number">Zero-based index of the items to retrieve.</param>
            /// <param name="count" type="Number">Number of items to retrieve.</param>
            /// <param name="success" type="Function">Success callback with the requested items.</param>
            /// <param name="error" type="Function">Error callback.</param>
            /// <returns type="Object">Request object with an abort method./<param>

            var queryOptions = "$skip=" + index + "&$top=" + count;
            return queryForData(appendQueryOption(uri, queryOptions), that.options, success, error);
        };

        return that;
    };



    var appendPage = function (operation, page) {
        /// <summary>Appends a page's data to the operation data.</summary>
        /// <param name="operation" type="Object">Operation with (i)ndex, (c)ount and (d)ata.</param>
        /// <param name="page" type="Object">Page with (i)ndex, (c)ount and (d)ata.</param>

        var intersection = intersectRanges(operation, page);
        if (intersection) {
            var start = intersection.i - page.i;
            var end = start + (operation.c - operation.d.length);
            operation.d = operation.d.concat(page.d.slice(start, end));
        }
    };

    var intersectRanges = function (x, y) {
        /// <summary>Returns the {(i)ndex, (c)ount} range for the intersection of x and y.</summary>
        /// <param name="x" type="Object">Range with (i)ndex and (c)ount members.</param>
        /// <param name="y" type="Object">Range with (i)ndex and (c)ount members.</param>
        /// <returns type="Object">The intersection (i)ndex and (c)ount; undefined if there is no intersection.</returns>

        var xLast = x.i + x.c;
        var yLast = y.i + y.c;
        var resultIndex = (x.i > y.i) ? x.i : y.i;
        var resultLast = (xLast < yLast) ? xLast : yLast;
        var result;
        if (resultLast >= resultIndex) {
            result = { i: resultIndex, c: resultLast - resultIndex };
        }

        return result;
    };

    var checkZeroGreater = function (val, name) {
        /// <summary>Checks whether val is a defined number with value zero or greater.</summary>
        /// <param name="val" type="Number">Value to check.</param>
        /// <param name="name" type="String">Parameter name to use in exception.</param>

        if (val === undefined || typeof val !== "number") {
            throw { message: "'" + name + "' must be a number." };
        }

        if (isNaN(val) || val < 0 || !isFinite(val)) {
            throw { message: "'" + name + "' must be greater than or equal to zero." };
        }
    };

    var checkUndefinedGreaterThanZero = function (val, name) {
        /// <summary>Checks whether val is undefined or a number with value greater than zero.</summary>
        /// <param name="val" type="Number">Value to check.</param>
        /// <param name="name" type="String">Parameter name to use in exception.</param>

        if (val !== undefined) {
            if (typeof val !== "number") {
                throw { message: "'" + name + "' must be a number." };
            }

            if (isNaN(val) || val <= 0 || !isFinite(val)) {
                throw { message: "'" + name + "' must be greater than zero." };
            }
        }
    };

    var checkUndefinedOrNumber = function (val, name) {
        /// <summary>Checks whether val is undefined or a number</summary>
        /// <param name="val" type="Number">Value to check.</param>
        /// <param name="name" type="String">Parameter name to use in exception.</param>
        if (val !== undefined && (typeof val !== "number" || isNaN(val) || !isFinite(val))) {
            throw { message: "'" + name + "' must be a number." };
        }
    };

    var removeFromArray = function (arr, item) {
        /// <summary>Performs a linear search on the specified array and removes the first instance of 'item'.</summary>
        /// <param name="arr" type="Array">Array to search.</param>
        /// <param name="item">Item being sought.</param>
        /// <returns type="Boolean">Whether the item was removed.</returns>

        var i, len;
        for (i = 0, len = arr.length; i < len; i++) {
            if (arr[i] === item) {
                arr.splice(i, 1);
                return true;
            }
        }

        return false;
    };

    var extend = function (target, values) {
        /// <summary>Extends the target with the specified values.</summary>
        /// <param name="target" type="Object">Object to add properties to.</param>
        /// <param name="values" type="Object">Object with properties to add into target.</param>
        /// <returns type="Object">The target object.</returns>

        for (var name in values) {
            target[name] = values[name];
        }

        return target;
    };

    var estimateSize = function (obj) {
        /// <summary>Estimates the size of an object in bytes.</summary>
        /// <param name="obj" type="Object">Object to determine the size of.</param>
        /// <returns type="Integer">Estimated size of the object in bytes.</returns>
        var size = 0;
        var type = typeof obj;

        if (type === "object" && obj) {
            for (var name in obj) {
                size += name.length * 2 + estimateSize(obj[name]);
            }
        } else if (type === "string") {
            size = obj.length * 2;
        } else {
            size = 8;
        }
        return size;
    };

    var snapToPageBoundaries = function (lowIndex, highIndex, pageSize) {
        /// <summary>Snaps low and high indices into page sizes and returns a range.</summary>
        /// <param name="lowIndex" type="Number">Low index to snap to a lower value.</param>
        /// <param name="highIndex" type="Number">High index to snap to a higher value.</param>
        /// <param name="pageSize" type="Number">Page size to snap to.</param>
        /// <returns type="Object">A range with (i)ndex and (c)ount of elements.</returns>

        lowIndex = Math.floor(lowIndex / pageSize) * pageSize;
        highIndex = Math.ceil((highIndex + 1) / pageSize) * pageSize;
        return { i: lowIndex, c: highIndex - lowIndex };
    };

    // The DataCache is implemented using state machines.  The following constants are used to properly 
    // identify and label the states that these machines transition to.

    // DataCache state constants

    var CACHE_STATE_DESTROY = "destroy";
    var CACHE_STATE_IDLE = "idle";
    var CACHE_STATE_INIT = "init";
    var CACHE_STATE_READ = "read";
    var CACHE_STATE_PREFETCH = "prefetch";
    var CACHE_STATE_WRITE = "write";

    // DataCacheOperation state machine states.  
    // Transitions on operations also depend on the cache current of the cache.

    var OPERATION_STATE_CANCEL = "cancel";
    var OPERATION_STATE_END = "end";
    var OPERATION_STATE_ERROR = "error";
    var OPERATION_STATE_START = "start";
    var OPERATION_STATE_WAIT = "wait";

    // Destroy state machine states

    var DESTROY_STATE_CLEAR = "clear";

    // Read / Prefetch state machine states 

    var READ_STATE_DONE = "done";
    var READ_STATE_LOCAL = "local";
    var READ_STATE_SAVE = "save";
    var READ_STATE_SOURCE = "source";

    var DataCacheOperation = function (stateMachine, promise, isCancelable, index, count, data, pending) {
        /// <summary>Creates a new operation object.</summary>
        /// <param name="stateMachine" type="Function">State machine that describes the specific behavior of the operation.</param>
        /// <param name="promise" type ="DjsDeferred">Promise for requested values.</param>
        /// <param name="isCancelable" type ="Boolean">Whether this operation can be canceled or not.</param>
        /// <param name="index" type="Number">Index of first item requested.</param>
        /// <param name="count" type="Number">Count of items requested.</param>
        /// <param name="data" type="Array">Array with the items requested by the operation.</param>
        /// <param name="pending" type="Number">Total number of pending prefetch records.</param>
        /// <returns type="DataCacheOperation">A new data cache operation instance.</returns>

        /// <field name="p" type="DjsDeferred">Promise for requested values.</field>
        /// <field name="i" type="Number">Index of first item requested.</field>
        /// <field name="c" type="Number">Count of items requested.</field>
        /// <field name="d" type="Array">Array with the items requested by the operation.</field>
        /// <field name="s" type="Array">Current state of the operation.</field>
        /// <field name="canceled" type="Boolean">Whether the operation has been canceled.</field>
        /// <field name="pending" type="Number">Total number of pending prefetch records.</field>
        /// <field name="oncomplete" type="Function">Callback executed when the operation reaches the end state.</field>

        var stateData;
        var cacheState;
        var that = this;

        that.p = promise;
        that.i = index;
        that.c = count;
        that.d = data;
        that.s = OPERATION_STATE_START;

        that.canceled = false;
        that.pending = pending;
        that.oncomplete = null;

        that.cancel = function () {
            /// <summary>Transitions this operation to the cancel state and sets the canceled flag to true.</summary>
            /// <remarks>The function is a no-op if the operation is non-cancelable.</summary>

            if (!isCancelable) {
                return;
            }

            var state = that.s;
            if (state !== OPERATION_STATE_ERROR && state !== OPERATION_STATE_END && state !== OPERATION_STATE_CANCEL) {
                that.canceled = true;
                transition(OPERATION_STATE_CANCEL, stateData);
            }
        };

        that.complete = function () {
            /// <summary>Transitions this operation to the end state.</summary>

            transition(OPERATION_STATE_END, stateData);
        };

        that.error = function (err) {
            /// <summary>Transitions this operation to the error state.</summary>
            if (!that.canceled) {
                transition(OPERATION_STATE_ERROR, err);
            }
        };

        that.run = function (state) {
            /// <summary>Executes the operation's current state in the context of a new cache state.</summary>
            /// <param name="state" type="Object">New cache state.</param> 

            cacheState = state;
            that.transition(that.s, stateData);
        };

        that.wait = function (data) {
            /// <summary>Transitions this operation to the wait state.</summary>

            transition(OPERATION_STATE_WAIT, data);
        };

        var operationStateMachine = function (opTargetState, cacheState, data) {
            /// <summary>State machine that describes all operations common behavior.</summary>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 

            switch (opTargetState) {
                case OPERATION_STATE_START:
                    // Initial state of the operation. The operation will remain in this state until the cache has been fully initialized.
                    if (cacheState !== CACHE_STATE_INIT) {
                        stateMachine(that, opTargetState, cacheState, data);
                    }
                    break;

                case OPERATION_STATE_WAIT:
                    // Wait state indicating that the operation is active but waiting for an asynchronous operation to complete. 
                    stateMachine(that, opTargetState, cacheState, data);
                    break;

                case OPERATION_STATE_CANCEL:
                    // Cancel state.
                    stateMachine(that, opTargetState, cacheState, data);
                    that.fireCanceled();
                    transition(OPERATION_STATE_END);
                    break;

                case OPERATION_STATE_ERROR:
                    // Error state. Data is expected to be an object detailing the error condition.  
                    stateMachine(that, opTargetState, cacheState, data);
                    that.canceled = true;
                    that.fireRejected(data);
                    transition(OPERATION_STATE_END);
                    break;

                case OPERATION_STATE_END:
                    // Final state of the operation.
                    if (that.oncomplete) {
                        that.oncomplete(that);
                    }
                    if (!that.canceled) {
                        that.fireResolved();
                    }
                    stateMachine(that, opTargetState, cacheState, data);
                    break;

                default:
                    // Any other state is passed down to the state machine describing the operation's specific behavior.
                        stateMachine(that, opTargetState, cacheState, data);
                    break;
            }
        };

        var transition = function (state, data) {
            /// <summary>Transitions this operation to a new state.</summary>
            /// <param name="state" type="Object">State to transition the operation to.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 

            that.s = state;
            stateData = data;
            operationStateMachine(state, cacheState, data);
        };

        that.transition = transition;

        return that;
    };

    DataCacheOperation.prototype.fireResolved = function () {
        /// <summary>Fires a resolved notification as necessary.</summary>

        // Fire the resolve just once.
        var p = this.p;
        if (p) {
            this.p = null;
            p.resolve(this.d);
        }
    };

    DataCacheOperation.prototype.fireRejected = function (reason) {
        /// <summary>Fires a rejected notification as necessary.</summary>

        // Fire the rejection just once.
        var p = this.p;
        if (p) {
            this.p = null;
            p.reject(reason);
        }
    };

    DataCacheOperation.prototype.fireCanceled = function () {
        /// <summary>Fires a canceled notification as necessary.</summary>

        this.fireRejected({ canceled: true, message: "Operation canceled" });
    };


    var DataCache = function (options) {
        /// <summary>Creates a data cache for a collection that is efficiently loaded on-demand.</summary>
        /// <param name="options">
        /// Options for the data cache, including name, source, pageSize,
        /// prefetchSize, cacheSize, storage mechanism, and initial prefetch and local-data handler.
        /// </param>
        /// <returns type="DataCache">A new data cache instance.</returns>

        var state = CACHE_STATE_INIT;
        var stats = { counts: 0, netReads: 0, prefetches: 0, cacheReads: 0 };

        var clearOperations = [];
        var readOperations = [];
        var prefetchOperations = [];

        var actualCacheSize = 0;                                             // Actual cache size in bytes.
        var allDataLocal = false;                                            // Whether all data is local.
        var cacheSize = undefinedDefault(options.cacheSize, 1048576);        // Requested cache size in bytes, default 1 MB.
        var collectionCount = 0;                                             // Number of elements in the server collection.
        var highestSavedPage = 0;                                            // Highest index of all the saved pages.
        var highestSavedPageSize = 0;                                        // Item count of the saved page with the highest index.
        var overflowed = cacheSize === 0;                                    // If the cache has overflowed (actualCacheSize > cacheSize or cacheSize == 0);
        var pageSize = undefinedDefault(options.pageSize, 50);               // Number of elements to store per page.
        var prefetchSize = undefinedDefault(options.prefetchSize, pageSize); // Number of elements to prefetch from the source when the cache is idling.
        var version = "1.0";
        var cacheFailure;

        var pendingOperations = 0;

        var source = options.source;
        if (typeof source === "string") {
            // Create a new cache source.
            source = new ODataCacheSource(options);
        }
        source.options = options;

        // Create a cache local store.
        var store = datajs.createStore(options.name, options.mechanism);

        var that = this;

        that.onidle = options.idle;
        that.stats = stats;

        that.count = function () {
            /// <summary>Counts the number of items in the collection.</summary>
            /// <returns type="Object">A promise with the number of items.</returns>

            if (cacheFailure) {
                throw cacheFailure;
            }

            var deferred = createDeferred();
            var canceled = false;

            if (allDataLocal) {
                delay(function () {
                    deferred.resolve(collectionCount);
                });

                return deferred.promise();
            }

            // TODO: Consider returning the local data count instead once allDataLocal flag is set to true.
            var request = source.count(function (count) {
                request = null;
                stats.counts++;
                deferred.resolve(count);
            }, function (err) {
                request = null;
                deferred.reject(extend(err, { canceled: canceled }));
            });

            return extend(deferred.promise(), {
                cancel: function () {
                    /// <summary>Aborts the count operation.</summary>
                    if (request) {
                        canceled = true;
                        request.abort();
                        request = null;
                    }
                }
            });
        };

        that.clear = function () {
            /// <summary>Cancels all running operations and clears all local data associated with this cache.</summary>
            /// <remarks>
            /// New read requests made while a clear operation is in progress will not be canceled. 
            /// Instead they will be queued for execution once the operation is completed.
            /// </remarks>
            /// <returns type="Object">A promise that has no value and can't be canceled.</returns>

            if (cacheFailure) {
                throw cacheFailure;
            }

            if (clearOperations.length === 0) {
                var deferred = createDeferred();
                var op = new DataCacheOperation(destroyStateMachine, deferred, false);
                queueAndStart(op, clearOperations);
                return deferred.promise();
            }
            return clearOperations[0].p;
        };

        that.filterForward = function (index, count, predicate) {
            /// <summary>Filters the cache data based a predicate.</summary>
            /// <param name="index" type="Number">The index of the item to start filtering forward from.</param>
            /// <param name="count" type="Number">Maximum number of items to include in the result.</param>
            /// <param name="predicate" type="Function">Callback function returning a boolean that determines whether an item should be included in the result or not.</param>
            /// <remarks>
            /// Specifying a negative count value will yield all the items in the cache that satisfy the predicate.
            /// </remarks>
            /// <returns type="DjsDeferred">A promise for an array of results.</returns>
            return filter(index, count, predicate, false);
        };

        that.filterBack = function (index, count, predicate) {
            /// <summary>Filters the cache data based a predicate.</summary>
            /// <param name="index" type="Number">The index of the item to start filtering backward from.</param>
            /// <param name="count" type="Number">Maximum number of items to include in the result.</param>
            /// <param name="predicate" type="Function">Callback function returning a boolean that determines whether an item should be included in the result or not.</param>
            /// <remarks>
            /// Specifying a negative count value will yield all the items in the cache that satisfy the predicate.
            /// </remarks>
            /// <returns type="DjsDeferred">A promise for an array of results.</returns>
            return filter(index, count, predicate, true);
        };

        that.readRange = function (index, count) {
            /// <summary>Reads a range of adjacent records.</summary>
            /// <param name="index" type="Number">Zero-based index of record range to read.</param>
            /// <param name="count" type="Number">Number of records in the range.</param>
            /// <remarks>
            /// New read requests made while a clear operation is in progress will not be canceled. 
            /// Instead they will be queued for execution once the operation is completed.
            /// </remarks>
            /// <returns type="DjsDeferred">
            /// A promise for an array of records; less records may be returned if the
            /// end of the collection is found.
            /// </returns>

            checkZeroGreater(index, "index");
            checkZeroGreater(count, "count");

            if (cacheFailure) {
                throw cacheFailure;
            }

            var deferred = createDeferred();

            // Merging read operations would be a nice optimization here.
            var op = new DataCacheOperation(readStateMachine, deferred, true, index, count, [], 0);
            queueAndStart(op, readOperations);

            return extend(deferred.promise(), {
                cancel: function () {
                    /// <summary>Aborts the readRange operation.</summary>
                    op.cancel();
                }
            });
        };

        that.ToObservable = that.toObservable = function () {
            /// <summary>Creates an Observable object that enumerates all the cache contents.</summary>
            /// <returns>A new Observable object that enumerates all the cache contents.</returns>
            if (!window.Rx || !window.Rx.Observable) {
                throw { message: "Rx library not available - include rx.js" };
            }

            if (cacheFailure) {
                throw cacheFailure;
            }

            return window.Rx.Observable.CreateWithDisposable(function (obs) {
                var disposed = false;
                var index = 0;

                var errorCallback = function (error) {
                    if (!disposed) {
                        obs.OnError(error);
                    }
                };

                var successCallback = function (data) {
                    if (!disposed) {
                        var i, len;
                        for (i = 0, len = data.length; i < len; i++) {
                            // The wrapper automatically checks for Dispose
                            // on the observer, so we don't need to check it here.
                            obs.OnNext(data[i]);
                        }

                        if (data.length < pageSize) {
                            obs.OnCompleted();
                        } else {
                            index += pageSize;
                            that.readRange(index, pageSize).then(successCallback, errorCallback);
                        }
                    }
                };

                that.readRange(index, pageSize).then(successCallback, errorCallback);

                return { Dispose: function () { disposed = true; } };
            });
        };

        var cacheFailureCallback = function (message) {
            /// <summary>Creates a function that handles a callback by setting the cache into failure mode.</summary>
            /// <param name="message" type="String">Message text.</param>
            /// <returns type="Function">Function to use as error callback.</returns>
            /// <remarks>
            /// This function will specifically handle problems with critical store resources 
            /// during cache initialization.
            /// </remarks>

            return function (error) {
                cacheFailure = { message: message, error: error };

                // Destroy any pending clear or read operations.
                // At this point there should be no prefetch operations.
                // Count operations will go through but are benign because they
                // won't interact with the store.
                var i, len;
                for (i = 0, len = readOperations.length; i < len; i++) {
                    readOperations[i].fireRejected(cacheFailure);
                }
                for (i = 0, len = clearOperations.length; i < len; i++) {
                    clearOperations[i].fireRejected(cacheFailure);
                }

                // Null out the operation arrays.
                readOperations = clearOperations = null;
            };
        };

        var changeState = function (newState) {
            /// <summary>Updates the cache's state and signals all pending operations of the change.</summary>
            /// <param name="newState" type="Object">New cache state.</param>
            /// <remarks>This method is a no-op if the cache's current state and the new state are the same.</remarks>

            if (newState !== state) {
                state = newState;
                var operations = clearOperations.concat(readOperations, prefetchOperations);
                var i, len;
                for (i = 0, len = operations.length; i < len; i++) {
                    operations[i].run(state);
                }
            }
        };

        var clearStore = function () {
            /// <summary>Removes all the data stored in the cache.</summary>
            /// <returns type="DjsDeferred">A promise with no value.</returns>

            var deferred = new DjsDeferred();
            store.clear(function () {

                // Reset the cache settings.
                actualCacheSize = 0;
                allDataLocal = false;
                collectionCount = 0;
                highestSavedPage = 0;
                highestSavedPageSize = 0;
                overflowed = cacheSize === 0;

                // version is not reset, in case there is other state in eg V1.1 that is still around.

                // Reset the cache stats.
                stats = { counts: 0, netReads: 0, prefetches: 0, cacheReads: 0 };
                that.stats = stats;

                store.close();
                deferred.resolve();
            }, function (err) {
                deferred.reject(err);
            });
            return deferred;
        };

        var dequeueOperation = function (operation) {
            /// <summary>Removes an operation from the caches queues and changes the cache state to idle.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation to dequeue.</param>
            /// <remarks>This method is used as a handler for the operation's oncomplete event.</remarks>

            var removed = removeFromArray(clearOperations, operation);
            if (!removed) {
                removed = removeFromArray(readOperations, operation);
                if (!removed) {
                    removeFromArray(prefetchOperations, operation);
                }
            }

            pendingOperations--;
            changeState(CACHE_STATE_IDLE);
        };

        var fetchPage = function (start) {
            /// <summary>Requests data from the cache source.</summary>
            /// <param name="start" type="Number">Zero-based index of items to request.</param>
            /// <returns type="DjsDeferred">A promise for a page object with (i)ndex, (c)ount, (d)ata.</returns>


            var deferred = new DjsDeferred();
            var canceled = false;

            var request = source.read(start, pageSize, function (data) {
                var page = { i: start, c: data.length, d: data };
                deferred.resolve(page);
            }, function (err) {
                deferred.reject(err);
            });

            return extend(deferred, {
                cancel: function () {
                    if (request) {
                        request.abort();
                        canceled = true;
                        request = null;
                    }
                }
            });
        };

        var filter = function (index, count, predicate, backwards) {
            /// <summary>Filters the cache data based a predicate.</summary>
            /// <param name="index" type="Number">The index of the item to start filtering from.</param>
            /// <param name="count" type="Number">Maximum number of items to include in the result.</param>
            /// <param name="predicate" type="Function">Callback function returning a boolean that determines whether an item should be included in the result or not.</param>
            /// <param name="backwards" type="Boolean">True if the filtering should move backward from the specified index, falsey otherwise.</param>
            /// <remarks>
            /// Specifying a negative count value will yield all the items in the cache that satisfy the predicate.
            /// </remarks>
            /// <returns type="DjsDeferred">A promise for an array of results.</returns>
            index = parseInt10(index);
            count = parseInt10(count);

            if (isNaN(index)) {
                throw { message: "'index' must be a valid number.", index: index };
            }
            if (isNaN(count)) {
                throw { message: "'count' must be a valid number.", count: count };
            }

            if (cacheFailure) {
                throw cacheFailure;
            }

            index = Math.max(index, 0);

            var deferred = createDeferred();
            var arr = [];
            var canceled = false;
            var pendingReadRange = null;

            var readMore = function (readIndex, readCount) {
                if (!canceled) {
                    if (count >= 0 && arr.length >= count) {
                        deferred.resolve(arr);
                    } else {
                        pendingReadRange = that.readRange(readIndex, readCount).then(function (data) {
                            for (var i = 0, length = data.length; i < length && (count < 0 || arr.length < count); i++) {
                                var dataIndex = backwards ? length - i - 1 : i;
                                var item = data[dataIndex];
                                if (predicate(item)) {
                                    var element = {
                                        index: readIndex + dataIndex,
                                        item: item
                                    };

                                    backwards ? arr.unshift(element) : arr.push(element);
                                }
                            }

                            // Have we reached the end of the collection?
                            if ((!backwards && data.length < readCount) || (backwards && readIndex <= 0)) {
                                deferred.resolve(arr);
                            } else {
                                var nextIndex = backwards ? Math.max(readIndex - pageSize, 0) : readIndex + readCount;
                                readMore(nextIndex, pageSize);
                            }
                        }, function (err) {
                            deferred.reject(err);
                        });
                    }
                }
            };

            // Initially, we read from the given starting index to the next/previous page boundary
            var initialPage = snapToPageBoundaries(index, index, pageSize);
            var initialIndex = backwards ? initialPage.i : index;
            var initialCount = backwards ? index - initialPage.i + 1 : initialPage.i + initialPage.c - index;
            readMore(initialIndex, initialCount);

            return extend(deferred.promise(), {
                cancel: function () {
                    /// <summary>Aborts the filter operation</summary>
                    if (pendingReadRange) {
                        pendingReadRange.cancel();
                    }
                    canceled = true;
                }
            });
        };

        var fireOnIdle = function () {
            /// <summary>Fires an onidle event if any functions are assigned.</summary>

            if (that.onidle && pendingOperations === 0) {
                that.onidle();
            }
        };

        var prefetch = function (start) {
            /// <summary>Creates and starts a new prefetch operation.</summary>
            /// <param name="start" type="Number">Zero-based index of the items to prefetch.</param>
            /// <remarks>
            /// This method is a no-op if any of the following conditions is true:
            ///     1.- prefetchSize is 0
            ///     2.- All data has been read and stored locally in the cache.
            ///     3.- There is already an all data prefetch operation queued. 
            ///     4.- The cache has run out of available space (overflowed).
            /// <remarks>

            if (allDataLocal || prefetchSize === 0 || overflowed) {
                return;
            }


            if (prefetchOperations.length === 0 || (prefetchOperations[0] && prefetchOperations[0].c !== -1)) {
                // Merging prefetch operations would be a nice optimization here. 
                var op = new DataCacheOperation(prefetchStateMachine, null, true, start, prefetchSize, null, prefetchSize);
                queueAndStart(op, prefetchOperations);
            }
        };

        var queueAndStart = function (op, queue) {
            /// <summary>Queues an operation and runs it.</summary>
            /// <param name="op" type="DataCacheOperation">Operation to queue.</param>
            /// <param name="queue" type="Array">Array that will store the operation.</param>

            op.oncomplete = dequeueOperation;
            queue.push(op);
            pendingOperations++;
            op.run(state);
        };

        var readPage = function (key) {
            /// <summary>Requests a page from the cache local store.</summary>
            /// <param name="key" type="Number">Zero-based index of the reuqested page.</param>
            /// <returns type="DjsDeferred">A promise for a found flag and page object with (i)ndex, (c)ount, (d)ata, and (t)icks.</returns>


            var canceled = false;
            var deferred = extend(new DjsDeferred(), {
                cancel: function () {
                    /// <summary>Aborts the readPage operation.</summary>
                    canceled = true;
                }
            });

            var error = storeFailureCallback(deferred, "Read page from store failure");

            store.contains(key, function (contained) {
                if (canceled) {
                    return;
                }
                if (contained) {
                    store.read(key, function (_, data) {
                        if (!canceled) {
                            deferred.resolve(data !== undefined, data);
                        }
                    }, error);
                    return;
                }
                deferred.resolve(false);
            }, error);
            return deferred;
        };

        var savePage = function (key, page) {
            /// <summary>Saves a page to the cache local store.</summary>
            /// <param name="key" type="Number">Zero-based index of the requested page.</param>
            /// <param name="page" type="Object">Object with (i)ndex, (c)ount, (d)ata, and (t)icks.</param>
            /// <returns type="DjsDeferred">A promise with no value.</returns>


            var canceled = false;

            var deferred = extend(new DjsDeferred(), {
                cancel: function () {
                    /// <summary>Aborts the readPage operation.</summary>
                    canceled = true;
                }
            });

            var error = storeFailureCallback(deferred, "Save page to store failure");

            var resolve = function () {
                deferred.resolve(true);
            };

            if (page.c > 0) {
                var pageBytes = estimateSize(page);
                overflowed = cacheSize >= 0 && cacheSize < actualCacheSize + pageBytes;

                if (!overflowed) {
                    store.addOrUpdate(key, page, function () {
                        updateSettings(page, pageBytes);
                        saveSettings(resolve, error);
                    }, error);
                } else {
                    resolve();
                }
            } else {
                updateSettings(page, 0);
                saveSettings(resolve, error);
            }
            return deferred;
        };

        var saveSettings = function (success, error) {
            /// <summary>Saves the cache's current settings to the local store.</summary>
            /// <param name="success" type="Function">Success callback.</param>
            /// <param name="error" type="Function">Errror callback.</param>

            var settings = {
                actualCacheSize: actualCacheSize,
                allDataLocal: allDataLocal,
                cacheSize: cacheSize,
                collectionCount: collectionCount,
                highestSavedPage: highestSavedPage,
                highestSavedPageSize: highestSavedPageSize,
                pageSize: pageSize,
                sourceId: source.identifier,
                version: version
            };

            store.addOrUpdate("__settings", settings, success, error);
        };

        var storeFailureCallback = function (deferred/*, message*/) {
            /// <summary>Creates a function that handles a store error.</summary>
            /// <param name="deferred" type="DjsDeferred">Deferred object to resolve.</param>
            /// <param name="message" type="String">Message text.</param>
            /// <returns type="Function">Function to use as error callback.</returns>
            /// <remarks>
            /// This function will specifically handle problems when interacting with the store. 
            /// </remarks>

            return function (/*error*/) {
                // var console = window.console;
                // if (console && console.log) {
                //    console.log(message);
                //    console.dir(error);
                // }
                deferred.resolve(false);
            };
        };

        var updateSettings = function (page, pageBytes) {
            /// <summary>Updates the cache's settings based on a page object.</summary>
            /// <param name="page" type="Object">Object with (i)ndex, (c)ount, (d)ata.</param>
            /// <param name="pageBytes" type="Number">Size of the page in bytes.</param>

            var pageCount = page.c;
            var pageIndex = page.i;

            // Detect the collection size.
            if (pageCount === 0) {
                if (highestSavedPage === pageIndex - pageSize) {
                    collectionCount = highestSavedPage + highestSavedPageSize;
                }
            } else {
                highestSavedPage = Math.max(highestSavedPage, pageIndex);
                if (highestSavedPage === pageIndex) {
                    highestSavedPageSize = pageCount;
                }
                actualCacheSize += pageBytes;
                if (pageCount < pageSize && !collectionCount) {
                    collectionCount = pageIndex + pageCount;
                }
            }

            // Detect the end of the collection.
            if (!allDataLocal && collectionCount === highestSavedPage + highestSavedPageSize) {
                allDataLocal = true;
            }
        };

        var cancelStateMachine = function (operation, opTargetState, cacheState, data) {
            /// <summary>State machine describing the behavior for cancelling a read or prefetch operation.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation being run.</param>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 
            /// <remarks>
            /// This state machine contains behavior common to read and prefetch operations.
            /// </remarks>

            var canceled = operation.canceled && opTargetState !== OPERATION_STATE_END;
            if (canceled) {
                if (opTargetState === OPERATION_STATE_CANCEL) {
                    // Cancel state.
                    // Data is expected to be any pending request made to the cache.
                    if (data && data.cancel) {
                        data.cancel();
                    }
                }
            }
            return canceled;
        };

        var destroyStateMachine = function (operation, opTargetState, cacheState) {
            /// <summary>State machine describing the behavior of a clear operation.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation being run.</param>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <remarks>
            /// Clear operations have the highest priority and can't be interrupted by other operations; however, 
            /// they will preempt any other operation currently executing.
            /// </remarks>

            var transition = operation.transition;

            // Signal the cache that a clear operation is running.
            if (cacheState !== CACHE_STATE_DESTROY) {
                changeState(CACHE_STATE_DESTROY);
                return true;
            }

            switch (opTargetState) {
                case OPERATION_STATE_START:
                    // Initial state of the operation.
                    transition(DESTROY_STATE_CLEAR);
                    break;

                case OPERATION_STATE_END:
                    // State that signals the operation is done.
                    fireOnIdle();
                    break;

                case DESTROY_STATE_CLEAR:
                    // State that clears all the local data of the cache.
                    clearStore().then(function () {
                        // Terminate the operation once the local store has been cleared.
                        operation.complete();
                    });
                    // Wait until the clear request completes.
                    operation.wait();
                    break;

                default:
                    return false;
            }
            return true;
        };

        var prefetchStateMachine = function (operation, opTargetState, cacheState, data) {
            /// <summary>State machine describing the behavior of a prefetch operation.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation being run.</param>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 
            /// <remarks>
            /// Prefetch operations have the lowest priority and will be interrupted by operations of 
            /// other kinds. A preempted prefetch operation will resume its execution only when the state 
            /// of the cache returns to idle.
            /// 
            /// If a clear operation starts executing then all the prefetch operations are canceled, 
            /// even if they haven't started executing yet.
            /// </remarks>

            // Handle cancelation
            if (!cancelStateMachine(operation, opTargetState, cacheState, data)) {

                var transition = operation.transition;

                // Handle preemption 
                if (cacheState !== CACHE_STATE_PREFETCH) {
                    if (cacheState === CACHE_STATE_DESTROY) {
                        if (opTargetState !== OPERATION_STATE_CANCEL) {
                            operation.cancel();
                        }
                    } else if (cacheState === CACHE_STATE_IDLE) {
                        // Signal the cache that a prefetch operation is running.
                        changeState(CACHE_STATE_PREFETCH);
                    }
                    return true;
                }

                switch (opTargetState) {
                    case OPERATION_STATE_START:
                        // Initial state of the operation.
                        if (prefetchOperations[0] === operation) {
                            transition(READ_STATE_LOCAL, operation.i);
                        }
                        break;

                    case READ_STATE_DONE:
                        // State that determines if the operation can be resolved or has to
                        // continue processing.
                        // Data is expected to be the read page.
                        var pending = operation.pending;

                        if (pending > 0) {
                            pending -= Math.min(pending, data.c);
                        }

                        // Are we done, or has all the data been stored?
                        if (allDataLocal || pending === 0 || data.c < pageSize || overflowed) {
                            operation.complete();
                        } else {
                            // Continue processing the operation.
                            operation.pending = pending;
                            transition(READ_STATE_LOCAL, data.i + pageSize);
                        }
                        break;

                    default:
                        return readSaveStateMachine(operation, opTargetState, cacheState, data, true);
                }
            }
            return true;
        };

        var readStateMachine = function (operation, opTargetState, cacheState, data) {
            /// <summary>State machine describing the behavior of a read operation.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation being run.</param>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 
            /// <remarks>
            /// Read operations have a higher priority than prefetch operations, but lower than 
            /// clear operations. They will preempt any prefetch operation currently running 
            /// but will be interrupted by a clear operation.
            /// 
            /// If a clear operation starts executing then all the currently running 
            /// read operations are canceled. Read operations that haven't started yet will 
            /// wait in the start state until the destory operation finishes. 
            /// </remarks>

            // Handle cancelation
            if (!cancelStateMachine(operation, opTargetState, cacheState, data)) {

                var transition = operation.transition;

                // Handle preemption
                if (cacheState !== CACHE_STATE_READ && opTargetState !== OPERATION_STATE_START) {
                    if (cacheState === CACHE_STATE_DESTROY) {
                        if (opTargetState !== OPERATION_STATE_START) {
                            operation.cancel();
                        }
                    } else if (cacheState !== CACHE_STATE_WRITE) {
                        // Signal the cache that a read operation is running.
                        changeState(CACHE_STATE_READ);
                    }

                    return true;
                }

                switch (opTargetState) {
                    case OPERATION_STATE_START:
                        // Initial state of the operation.
                        // Wait until the cache is idle or prefetching.
                        if (cacheState === CACHE_STATE_IDLE || cacheState === CACHE_STATE_PREFETCH) {
                            // Signal the cache that a read operation is running.
                            changeState(CACHE_STATE_READ);
                            if (operation.c > 0) {
                                // Snap the requested range to a page boundary.
                                var range = snapToPageBoundaries(operation.i, operation.c, pageSize);
                                transition(READ_STATE_LOCAL, range.i);
                            } else {
                                transition(READ_STATE_DONE, operation);
                            }
                        }
                        break;

                    case READ_STATE_DONE:
                        // State that determines if the operation can be resolved or has to
                        // continue processing.
                        // Data is expected to be the read page.
                        appendPage(operation, data);
                        var len = operation.d.length;
                        // Are we done?
                        if (operation.c === len || data.c < pageSize) {
                            // Update the stats, request for a prefetch operation.
                            stats.cacheReads++;
                            prefetch(data.i + data.c);
                            // Terminate the operation.
                            operation.complete();
                        } else {
                            // Continue processing the operation.
                            transition(READ_STATE_LOCAL, data.i + pageSize);
                        }
                        break;

                    default:
                        return readSaveStateMachine(operation, opTargetState, cacheState, data, false);
                }
            }

            return true;
        };

        var readSaveStateMachine = function (operation, opTargetState, cacheState, data, isPrefetch) {
            /// <summary>State machine describing the behavior for reading and saving data into the cache.</summary>
            /// <param name="operation" type="DataCacheOperation">Operation being run.</param>
            /// <param name="opTargetState" type="Object">Operation state to transition to.</param>
            /// <param name="cacheState" type="Object">Current cache state.</param>
            /// <param name="data" type="Object" optional="true">Additional data passed to the state.</param> 
            /// <param name="isPrefetch" type="Boolean">Flag indicating whether a read (false) or prefetch (true) operation is running.
            /// <remarks>
            /// This state machine contains behavior common to read and prefetch operations.
            /// </remarks>

            var error = operation.error;
            var transition = operation.transition;
            var wait = operation.wait;
            var request;

            switch (opTargetState) {
                case OPERATION_STATE_END:
                    // State that signals the operation is done.
                    fireOnIdle();
                    break;

                case READ_STATE_LOCAL:
                    // State that requests for a page from the local store.
                    // Data is expected to be the index of the page to request.
                    request = readPage(data).then(function (found, page) {
                        // Signal the cache that a read operation is running.
                        if (!operation.canceled) {
                            if (found) {
                                // The page is in the local store, check if the operation can be resolved.
                                transition(READ_STATE_DONE, page);
                            } else {
                                // The page is not in the local store, request it from the source.
                                transition(READ_STATE_SOURCE, data);
                            }
                        }
                    });
                    break;

                case READ_STATE_SOURCE:
                    // State that requests for a page from the cache source.
                    // Data is expected to be the index of the page to request.
                    request = fetchPage(data).then(function (page) {
                        // Signal the cache that a read operation is running.
                        if (!operation.canceled) {
                            // Update the stats and save the page to the local store.
                            if (isPrefetch) {
                                stats.prefetches++;
                            } else {
                                stats.netReads++;
                            }
                            transition(READ_STATE_SAVE, page);
                        }
                    }, error);
                    break;

                case READ_STATE_SAVE:
                    // State that saves a  page to the local store.
                    // Data is expected to be the page to save.
                    // Write access to the store is exclusive.
                    if (cacheState !== CACHE_STATE_WRITE) {
                        changeState(CACHE_STATE_WRITE);
                        request = savePage(data.i, data).then(function (saved) {
                            if (!operation.canceled) {
                                if (!saved && isPrefetch) {
                                    operation.pending = 0;
                                }
                                // Check if the operation can be resolved.
                                transition(READ_STATE_DONE, data);
                            }
                            changeState(CACHE_STATE_IDLE);
                        });
                    }
                    break;

                default:
                    // Unknown state that can't be handled by this state machine.
                    return false;
            }

            if (request) {
                // The operation might have been canceled between stack frames do to the async calls.  
                if (operation.canceled) {
                    request.cancel();
                } else if (operation.s === opTargetState) {
                    // Wait for the request to complete.
                    wait(request);
                }
            }

            return true;
        };

        // Initialize the cache.
        store.read("__settings", function (_, settings) {
            if (assigned(settings)) {
                var settingsVersion = settings.version;
                if (!settingsVersion || settingsVersion.indexOf("1.") !== 0) {
                    cacheFailureCallback("Unsupported cache store version " + settingsVersion)();
                    return;
                }

                if (pageSize !== settings.pageSize || source.identifier !== settings.sourceId) {
                    // The shape or the source of the data was changed so invalidate the store.
                    clearStore().then(function () {
                        // Signal the cache is fully initialized.
                        changeState(CACHE_STATE_IDLE);
                    }, cacheFailureCallback("Unable to clear store during initialization"));
                } else {
                    // Restore the saved settings.
                    actualCacheSize = settings.actualCacheSize;
                    allDataLocal = settings.allDataLocal;
                    cacheSize = settings.cacheSize;
                    collectionCount = settings.collectionCount;
                    highestSavedPage = settings.highestSavedPage;
                    highestSavedPageSize = settings.highestSavedPageSize;
                    version = settingsVersion;

                    // Signal the cache is fully initialized.
                    changeState(CACHE_STATE_IDLE);
                }
            } else {
                // This is a brand new cache.
                saveSettings(function () {
                    // Signal the cache is fully initialized.
                    changeState(CACHE_STATE_IDLE);
                }, cacheFailureCallback("Unable to write settings during initialization."));
            }
        }, cacheFailureCallback("Unable to read settings from store."));

        return that;
    };

    datajs.createDataCache = function (options) {
        /// <summary>Creates a data cache for a collection that is efficiently loaded on-demand.</summary>
        /// <param name="options">
        /// Options for the data cache, including name, source, pageSize,
        /// prefetchSize, cacheSize, storage mechanism, and initial prefetch and local-data handler.
        /// </param>
        /// <returns type="DataCache">A new data cache instance.</returns>
        checkUndefinedGreaterThanZero(options.pageSize, "pageSize");
        checkUndefinedOrNumber(options.cacheSize, "cacheSize");
        checkUndefinedOrNumber(options.prefetchSize, "prefetchSize");

        if (!assigned(options.name)) {
            throw { message: "Undefined or null name", options: options };
        }

        if (!assigned(options.source)) {
            throw { message: "Undefined source", options: options };
        }

        return new DataCache(options);
    };



// ##### BEGIN: MODIFIED BY SAP
})(window);
// ##### END: MODIFIED BY SAP
}; // end of sap.ui.model.odata.datajs
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.model.odata.ODataListBinding
jQuery.sap.declare("sap.ui.model.odata.ODataListBinding");


/*global OData *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 *
 * @class
 * List binding implementation for oData format
 *
 * @param sPath
 * @param [oModel]
 */
sap.ui.model.odata.ODataListBinding = function(oModel, sPath, oContext, oSorter, aFilters) {
	sap.ui.model.ListBinding.apply(this, arguments);
	this.sFilterParams = null;
	this.sSortParams = null;
	this.sRangeParams = null;
	this.aPredefinedFilters = aFilters;
	this.iStartIndex = -1;
	this.bPendingChange = false;
	this.aKeys = [];

	this.createSortParams(oSorter);
	this.createFilterParams(aFilters);

	// get length after creating filter parameters
	this.iLength = 0;
	this.bLengthFinal = false;
	if (this.oModel.isCountSupported()) {
		this._getLength();
	}
	
};
sap.ui.model.odata.ODataListBinding.prototype = jQuery.sap.newObject(sap.ui.model.ListBinding.prototype);

/**
 * Return contexts for the list
 * 
 * @param {int} [iStartIndex=0] the start index of the requested contexts
 * @param {int} [iLength=100] the requested amount of contexts
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.odata.ODataListBinding.prototype.getContexts = function(iStartIndex, iLength, iThreshold) {
	// Set default values if startindex or length are not defined
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = 100;
	}
	
	// If we already know the length of the data set, make sure not to request more than exists
	if (this.bLengthFinal) {
		if (iStartIndex + iLength > this.iLength) {
			iLength = this.iLength - iStartIndex;
		}
		if (iLength < 0) {
			iLength = 0;
		}
	}
	
	// Loop through known data and check whether we already have all rows loaded
	var aContexts = [],
		oContext;
	for (var i = iStartIndex; i < iStartIndex + iLength; i++) {
		oContext = this.aKeys[i];
		if (!oContext) {
			break;
		}
		aContexts.push(oContext);
	}

	// TODO: thresholding
	if (iThreshold && (iThreshold <= iLength || aContexts.length === iLength )) {
		iThreshold = undefined;
	}
	var iSectionStart = iStartIndex;
	var iSectionLength = iLength;
	if (iThreshold) {
		var iSection = Math.floor(iStartIndex / (iThreshold / 2));
		var iSectionStart = Math.floor(iSection * (iThreshold / 2));
		var iSectionLength = this.bLengthFinal ? Math.min(this.iLength - iSectionStart, iThreshold) : Math.max(iLength, iThreshold);
		//jQuery.sap.log.warning("getContexts (threshold): " + iSectionStart + " - " + iSectionLength);
		if (!this.bPendingRequest && iSectionLength > 0) { //&& this.aKeys.length < iSectionStart + iSectionLength) {   // this.aKeys.length returns a length even if some value are undefined  
			this.loadData(iSectionStart, iSectionLength);
		}
	} else {
		// If rows are missing send a request for the complete set of rows again
		if (!this.bPendingRequest && iLength > 0 && aContexts.length != iLength) {
			this.loadData(iStartIndex, iLength);
		}
	}

	return aContexts;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.odata.ODataListBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this.aKeys = [];
		this.loadData();
	}
};

/**
 * Load list data from the server
 */
sap.ui.model.odata.ODataListBinding.prototype.loadData = function(iStartIndex, iLength, bSync) {

	var that = this;
	
	this.bPendingRequest = true;

	// determine the callback handler (only used internally to support events for sort/filter)
	// TODO: @JW: please rework - because you don't like currying
	var fnCallback = undefined;
	if (arguments.length === 1 && typeof iStartIndex === "function") {
		fnCallback = iStartIndex;
		iStartIndex = undefined;
	}
	
	// create range parameters and store start index for sort/filter requests
	if (iStartIndex || iLength) {
		this.sRangeParams = "$skip=" + iStartIndex + "&$top=" + iLength;
		this.iStartIndex = iStartIndex;
	}
	else {
		iStartIndex = this.iStartIndex;
	}

	// create the request url
	var aParams = [];
	if (this.sRangeParams) {
		aParams.push(this.sRangeParams);
	}
	if (this.sSortParams) {
		aParams.push(this.sSortParams);
	}
	if (this.sFilterParams) {
		aParams.push(this.sFilterParams);
	}
	aParams.push("$inlinecount=allpages");


	function _processResult(oData) {

		// Collecting contexts
		jQuery.each(oData.results, function(i, entry) {
			that.aKeys[iStartIndex + i] = that.oModel._getKey(entry);
		});

		// update iLength (only when the inline count is available)
		if (oData.__count) {
			that.iLength = parseInt(oData.__count, 10);
			that.bLengthFinal = true;
		}

		// if we got data and the results + startindex is larger than the
		// length we just apply this value to the length
		if (that.iLength < iStartIndex + oData.results.length) {
			that.iLength = iStartIndex + oData.results.length;
			that.bLengthFinal = false;
		}
		
		// if less entries are returned than have been requested
		// set length accordingly
		if (oData.results.length < iLength) {
			that.iLength = iStartIndex + oData.results.length;
			that.bLengthFinal = true;
		}
		
		// check if there are any results at all...
		if (oData.results.length == 0) {
			that.iLength = 0;
			that.bLengthFinal = true;
		}
		
		that.bPendingRequest = false;
		
		// notifiy the callback handler
		if (fnCallback) {
			fnCallback.call(that);
		}

	}

	var oContext = this.oContext || "",
		sPath = this.sPath.indexOf("/") != 0 ? oContext + "/" + this.sPath : this.sPath;

	// execute the request and use the metadata if available
	this.oModel._loadData(sPath, aParams, _processResult, function() {
		// notifiy the callback handler
		if (fnCallback) {
			fnCallback.call(that);
		}
	}, this.getContext());

};

/**
 * Return the length of the list
 *
 * @return {number} the length
 * @protected
 */
sap.ui.model.odata.ODataListBinding.prototype.getLength = function() {
	return this.iLength;
};

/**
 * Return the length of the list
 *
 * @return {number} the length
 */
sap.ui.model.odata.ODataListBinding.prototype._getLength = function() {

	var that = this;
	
	// create a request object for the data request
	var aParams = [];
	if (this.sFilterParams) {
		aParams.push(this.sFilterParams);
	}
	var oRequest = this.oModel._createRequest(this.sPath + "/$count", aParams, false);

	function _handleSuccess(oData) {
		that.iLength = parseInt(oData, 10);
		that.bLengthFinal = true;
	}

	function _handleError(oXHR, sError, oError) {
		jQuery.sap.log.warning("Request for $count failed: " +
				sError,
				oXHR.responseText + "," +
				  oXHR.status + "," +
				  oXHR.statusText);
	}

	// execute the request and use the metadata if available
	jQuery.ajax({
		url: oRequest.requestUri,
		async: oRequest.async,
		username: oRequest.user,
		password: oRequest.password,
		success: _handleSuccess,
		error: _handleError
	});

};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 *
 * @param {object} oUpdateInfo
 */
sap.ui.model.odata.ODataListBinding.prototype.checkUpdate = function(oUpdateInfo) {
	this._fireChange();
};

/**
 * Sorts the list
 *
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.sort = function(oSorter) {

	this.createSortParams(oSorter);
	this.aKeys = [];
	
	this.loadData(function() {
		this._fireSort({sorter: oSorter});
	});

};

/**
 * Create URL parameters for sorting
 */
sap.ui.model.odata.ODataListBinding.prototype.createSortParams = function(oSorter) {

	if(oSorter){
		this.sSortParams = "$orderby=" + oSorter.sPath;
		this.sSortParams += oSorter.bDescending ? "%20desc" : "%20asc";
	}else{
		this.sSortParams = null;
	}

};


/**
 * Filters the list
 *
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.filter = function(aFilters) {

	if (!aFilters) {
		aFilters = [];
	}
	if (this.aPredefinedFilters) {
		aFilters = aFilters.concat(this.aPredefinedFilters);
	}
	this.createFilterParams(aFilters);
	this.aKeys = [];
	this.iLength = 0;
	this.bLengthFinal = false;
	
	this.loadData(function() {
		this._fireFilter({filters: aFilters});
	});

};

/**
 * Create URL parameters for filtering
 */
sap.ui.model.odata.ODataListBinding.prototype.createFilterParams = function(aFilters) {

	if(aFilters && aFilters.length > 0){
		var sFilterParam = "$filter=((",
			sValue,
			sValue2,
			sLastPath = "";
		aFilters.sort(function(a, b) {
			if (a.sPath < b.sPath) {
				return -1;
			}
			else if (b.sPath < a.sPath) {
				return 1;
			}
			else {
				return 0;
			}
		});
		var that = this;
		jQuery.each(aFilters, function(i, oFilter){
			if (i > 0) {
				if (sLastPath != oFilter.sPath) {
					sFilterParam += "))%20and%20((";
				} else {
					sFilterParam += ")%20or%20(";
				}
			}
			sValue = oFilter.oValue1;
			if (isNaN(sValue)) {
				// date check
				if (!isNaN(Date.parse(sValue))) {
					sValue = that.getFormattedDate(new Date(sValue), oFilter.sOperator);
				}else {
					sValue = "\'" + sValue + "\'";					
				}
			}
			sValue2 = oFilter.oValue2;
			if (sValue2) {
				if (isNaN(sValue2)) {
					// date check
					if (!isNaN(Date.parse(sValue2))) {
						sValue2 = that.getFormattedDate(new Date(sValue2), oFilter.sOperator);
					}else {
						sValue2 = "\'" + sValue2 + "\'";
					}
				}
			}
			// TODO embed 2nd value
			switch(oFilter.sOperator) {
				case "EQ":
				case "NE":
				case "GT":
				case "GE":
				case "LT":
				case "LE":
					sFilterParam += oFilter.sPath + "%20" + oFilter.sOperator.toLowerCase() + "%20" + sValue;
					break;
				case "BT":
					sFilterParam += oFilter.sPath + "%20gt%20" + sValue + "%20and%20" + oFilter.sPath + "%20lt%20" + sValue2;
					break;
				case "Contains":
					sFilterParam += "indexof(" + oFilter.sPath + "," + sValue + ")%20ne%20-1";
					break;
				case "StartsWith":
					sFilterParam += "startswith(" + oFilter.sPath + "," + sValue + ")%20eq%20true";
					break;
				case "EndsWith":
					sFilterParam += "endswith(" + oFilter.sPath + "," + sValue + ")%20eq%20true";
					break;
				default:
					sFilterParam += "true";
			}
			sLastPath = oFilter.sPath;
		});
		sFilterParam += "))";
		this.sFilterParams = sFilterParam;
	}else{
		this.sFilterParams = null;
	}

};

/**
 * converts the date to EDM.DateTime format by using datajs internal formatDateTime function.
 * This is a hack...because datajs shouldn't be used this way...
 */
sap.ui.model.odata.ODataListBinding.prototype.getFormattedDate = function (oDate, sFilterOp) {
    var oRequest = { headers: {}, data: oDate };
    OData.jsonHandler.write(oRequest);
    var sResult = oRequest.body;
    if (!sResult) {
    	return '';
    }
    if (jQuery.sap.startsWith(sResult, "\"")) {
    	sResult = sResult.substring(1, sResult.length - 1);
    }  
    if (!jQuery.sap.startsWith(sResult, "\'")) {
    	sResult = "\'" + sResult + "\'";
    }
    // for string related filters don't add datetime string as prefix...
    switch(sFilterOp) {
	    case "Contains":
		case "StartsWith":
		case "EndsWith":
			break;
		default:
			sResult = "datetime" + sResult;
			break;
    }
    return sResult;
};



}; // end of sap.ui.model.odata.ODataListBinding
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * OData-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.odata
 * @public
 */

// Provides class sap.ui.model.odata.ODataModel
jQuery.sap.declare("sap.ui.model.odata.ODataModel");





/*global OData *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * Constructor for a new ODataModel.
 *
 * @param {string} sServiceUrl required - base uri of the service to request data from
 * @param {string} [bJSON] (optional) true to request data as JSON
 * @param {string} [sUser] (optional) user
 * @param {string} [sPassword] (optional) password
 *
 * @class
 * Model implementation for oData format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @constructor
 * @public
 */
sap.ui.model.odata.ODataModel = function(sServiceUrl, bJSON, sUser, sPassword) {
	sap.ui.model.Model.apply(this, arguments);
	
	this.sDefaultBindingMode = sap.ui.model.BindingMode.OneWay;
	this.mSupportedBindingModes = {"OneWay": true, "OneTime": true};
	this.bCountSupported = true;
	
	// prepare variables for request headers, data and metadata
	// TODO: metadata should be an separate object furthermore
	this.oHeaders = {};
	this.oData = {};
	this.oMetadata = {};

	// determine the service base url and the url parameters
	if (sServiceUrl.indexOf("?") == -1) {
		this.sServiceUrl = sServiceUrl;
	} else {
		var aUrlParts = sServiceUrl.split("?");
		this.sServiceUrl = aUrlParts[0];
		this.sUrlParams = aUrlParts[1];
	}

	// Remove trailing slash (if any)
	this.sServiceUrl = this.sServiceUrl.replace(/\/$/, "");

	// store user and password
	this.sUser = sUser;
	this.sPassword = sPassword;

	// load the metadata before setting accept headers because metadata is only available as XML
	this._loadMetadata();

	// set the the header for the accepted content types
	if (bJSON) {
		this.oHeaders["Accept"] = "application/json";
	} else {
		this.oHeaders["Accept"] = "application/atom+xml,application/atomsvc+xml,application/xml";
	}
};

// chain the prototypes
sap.ui.model.odata.ODataModel.prototype = jQuery.sap.newObject(sap.ui.model.Model.prototype);

/*
 * Describe the sap.ui.model.odata.ODataModel. Resulting metadata can be obtained via
 * sap.ui.model.odata.ODataModel.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.odata.ODataModel", {

	// ---- object ----
	baseType : "sap.ui.model.Model",
	publicMethods : []
});

/**
 * creates a request object
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._createRequest = function(sPath, aUrlParams, bAsync) {

	// create the url for the service
	var sUrl = this.sServiceUrl;
	if (sPath) {
		if (!jQuery.sap.startsWith(sPath, "/")) {
			sUrl += "/";
		}
		sUrl += sPath;
	}
	if (!aUrlParams) {
		aUrlParams = [];
	}
	if (this.sUrlParams) {
		aUrlParams.push(this.sUrlParams);
	}
	if (aUrlParams.length > 0) {
		sUrl += "?" + aUrlParams.join("&");
	}

	// create a request object for the url, url params and async option
	return {
		requestUri: sUrl,
		headers: this.oHeaders,
		async: bAsync,
		user: this.sUser,
		password: this.sPassword
	};

};

/**
 * Loads the metadata for the service
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._loadMetadata = function() {

	// create a sychronous request object for the metadata request
	var oRequest = this._createRequest("$metadata", null, false);

	// request the metadata of the service (currently this is done synchronously)
	var that = this;

	function _handleSuccess(oMetadata) {
		that.oMetadata = oMetadata;
	}

	function _handleError(oError) {
		var sErrorMsg = "The following problem occurred: " + oError.message;
		if (oError.response){
			sErrorMsg += oError.response.statusCode + "," +
						 oError.response.statusText + "," +
						 oError.response.body;
		}
		jQuery.sap.log.fatal(sErrorMsg);
	}

	// execute the request
	OData.read(oRequest, _handleSuccess, _handleError, OData.metadataHandler);

};

/**
 * Does a request using the provided sServiceUrl and config
 * parameters in the model's constructor and sets the response data into the
 * model. This request is performed asynchronously.
 *
 * @param {string}
 *            sPath Path A string containing the path to the data which should
 *            be retrieved. The path is concatenated to the sServiceUrl
 *            which was specified in the model constructor.
 * @param {function}
 *            fnSuccess a callback function which is called when the data has
 *            been successfully retrieved and stored in the model
 * @param {function}
 *            fnError a callback function which is called when the request 
 *            failed
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._loadData = function(sPath, aParams, fnSuccess, fnError, oContext){

	 /* 
	  * TODO: Johannes, Malte: check whether this is OK or not? 
	  * 
	  * We added a 5th parameter to support loading data within a context scope.
	  * In case of the ExactBrowser this led to the issue, that fn: checkUpdate
	  * updated all the bindings and also the root binding, which finally reset
	  * the ExactBrowser and the nested levels will not show up. By adding the
	  * context to this function it is possible now to update only the relevant
	  * bindings!
	  * 
	  * To reproduce the issue just avoid to pass the binding context to the 
	  * checkUpdate function and use the following Snippix sample: #3867
	  * 
	  * Other change is in the ODataModel where this function is called when 
	  * loading additional contexts.
	  */
	
	// create a request object for the data request
	var oRequest = this._createRequest(sPath, aParams, true);

	// request the data of the service for the given path
	var that = this;

	function _handleSuccess(oData, oResponse) {

		// no data available
		if (!oData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + oResponse.requestUri);
		}

		aResults = aResults.concat(oData.results);
		// check if not all requested data was loaded
		if (oData.__next){
			// replace request uri with next uri to retrieve additional data
			oRequest.requestUri = oData.__next;
			readRequestedData(oRequest);
		}else{
			// all data is read so merge all data
			jQuery.extend(oData.results, aResults);
			// broken implementations need this
			if (oData.results && !jQuery.isArray(oData.results)) {
				oData = oData.results;
			}

			// adding the result data to the data object
			if (oData.results) {
				jQuery.each(oData.results, function(i, entry) {
					that.oData[that._getKey(entry)] = entry;
				});
			} else {
				that.oData[that._getKey(oData)] = oData;
			}

			if (fnSuccess) {
				fnSuccess(oData);
			}
			that.checkUpdate(oContext); /* TODO: Johannes, Malte: check whether this is OK or not? */
			that.fireRequestCompleted({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + that.oHeaders["Accept"]});
		}
	}

	function _handleError(oError) {
		if (fnError) {
			fnError();
		}
		that.checkUpdate(oContext); /* TODO: Johannes, Malte: check whether this is OK or not? */
		var mParameters = {},
		sErrorMsg = "The following problem occurred: " + oError.message;
		
		mParameters.message = oError.message;
		if (oError.response){
			sErrorMsg += oError.response.statusCode + "," +
			oError.response.statusText + "," +
			oError.response.body;
			mParameters.statusCode = oError.response.statusCode;
			mParameters.statusText = oError.response.statusText;
			mParameters.responseText = oError.response.body;
		}
		jQuery.sap.log.fatal(sErrorMsg);
		that.fireRequestCompleted({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + that.oHeaders["Accept"]});
		that.fireRequestFailed(mParameters);
		
	}

	/**
	 * this method is used to retrieve all desired data. It triggers additional read requests if the server paging size
	 * permits to return all the requested data. This could only happen for servers with support for oData > 2.0.
	 */
	function readRequestedData(request){
		// execute the request and use the metadata if available
		OData.read(oRequest, _handleSuccess, _handleError, undefined, undefined, this.oMetadata);
	}

	// execute request
	var aResults = [];
	this.fireRequestSent({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + this.oHeaders["Accept"]});
	readRequestedData(oRequest);	
};

/**
 * removes all existing data from the model and removes all bindings
 */
sap.ui.model.odata.ODataModel.prototype.removeData = function(){
	this.oData = {};
	this.aBindings = [];
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 *
 * @param {object}
 *          oUpdateInfo
 * @param {string}
 *          oUpdateInfo.path
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype.checkUpdate = function(oContext) {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		if (!oContext || oBinding.getContext() == oContext) {
			oBinding.checkUpdate();
		}
	});
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.odata.ODataModel.prototype.bindProperty = function(sPath, oContext) {
	var oBinding = new sap.ui.model.odata.ODataPropertyBinding(this, sPath, oContext);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 */
sap.ui.model.odata.ODataModel.prototype.bindList = function(sPath, oContext, oSorter, aFilters) {
	var oBinding = new sap.ui.model.odata.ODataListBinding(this, sPath, oContext, oSorter, aFilters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.createBindingContext
 */
sap.ui.model.odata.ODataModel.prototype.createBindingContext = function(sPath, oContext, fCallBack) {
	var oData = this._getObject(sPath, oContext),
		that = this;
	if (oData) {
		fCallBack(this._getKey(oData));
	}
	else {
		var bIsRelative = !jQuery.sap.startsWith(sPath, "/");
		var sFullPath = (bIsRelative && oContext ? oContext + "/" : "") + sPath;
		this._loadData(sFullPath, null, function(oData) {
			var sKey = oData ? that._getKey(oData) : undefined;
			if (sKey && oContext && bIsRelative) {
				that.oData[oContext][sPath] = {__ref: sKey};
			}
			fCallBack(sKey);
		}, function() {
			fCallBack(); // error - notify to recreate contexts
		});
	}
};

/**
 * @see sap.ui.model.Model.prototype.destroyBindingContext
 */
sap.ui.model.odata.ODataModel.prototype.destroyBindingContext = function(oContext) {
};

/**
 * Sets whether this OData service supports $count on its collections
 *
 * @param {boolean} bCountSupported
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setCountSupported = function(bCountSupported) {
	this.bCountSupported = bCountSupported;
};

/**
 * Returns whether this model supports the $count on its collections
 *
 * @returns {boolean}
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.isCountSupported = function() {
	return this.bCountSupported;
};

/**
 * Returns the key part from the complete entry URI
 */
sap.ui.model.odata.ODataModel.prototype._getKey = function(oEntry) {
	var sURI, sKey;
	sURI = oEntry.__metadata.uri;
	sKey = sURI.substr(sURI.lastIndexOf("/") + 1);

	//TODO fixme...
	if (sURI.indexOf("EpmSample.svc") > 0) {
		sKey = sKey.replace(/\(/g, "('").replace(/\)/g, "')");
	}

	return sKey;
};


/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 *
 * @param {string}
 *          sPropertyName the name of the property
 * @type any
 * @return the value of the property
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.getProperty = function(sPath, oContext) {
	return this._getObject(sPath, oContext);

};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.odata.ODataModel.prototype._getObject = function(sPath, oContext) {
	var oNode = this.oData[oContext];
	if (oContext && !oNode) {
		return null;
	}
	if (!oContext) {
		oNode = this.oData;
	}
	if (!sPath) {
		return oNode;
	}
	var aParts = sPath.split("/"),
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = this.oData;
		iIndex++;
	}
	while(oNode && aParts[iIndex]) {
		oNode = oNode[aParts[iIndex]];
		if (oNode) {
			if (oNode.__ref) {
				oNode = this.oData[oNode.__ref];
			}
			else if (oNode.__deferred) {
				oNode = null;
			}
		}
		iIndex++;
	}
	return oNode;
};

}; // end of sap.ui.model.odata.ODataModel
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/**
 * XML-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.xml
 * @public
 */

// Provides the XML object based model implementation
jQuery.sap.declare("sap.ui.model.xml.XMLModel");






/**
 * Constructor for a new XMLModel.
 *
 * @class
 * Model implementation for XML format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @param {object} oData either the URL where to load the XML from or a XML
 * @constructor
 * @public
 */
sap.ui.model.xml.XMLModel = function (oData) {
	sap.ui.model.Model.apply(this, arguments);
	this.oNameSpaces = null;

	if (typeof oData == "string") {
		this.loadData(oData);
	}
	else if (oData && oData.documentElement) {
		this.setData(oData);
	}
};

// chain the prototypes
sap.ui.model.xml.XMLModel.prototype = jQuery.sap.newObject(sap.ui.model.Model.prototype);

/*
 * Describe the sap.ui.model.xml.XMLModel.
 * Resulting metadata can be obtained via sap.ui.model.xml.XMLModel.getMetadata();
 */
sap.ui.base.Object.defineClass("sap.ui.model.xml.XMLModel", {

  // ---- object ----
  baseType : "sap.ui.model.Model",
  publicMethods : ["loadData", "setData", "getData", "setXML", "getXML", "setNameSpace"]
});

/**
 * Sets the specified XML formatted string text to the model
 *
 * @param {string} sXMLText the XML data as string
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setXML = function(sXMLText){
	var oXMLDocument = jQuery.sap.parseXML(sXMLText);

	if (oXMLDocument.parseError.errorCode != 0){
		var oParseError = oXMLDocument.parseError;
		jQuery.sap.log.fatal("The following problem occurred: XML parse Error for " + oParseError.url + " code: " + oParseError.errorCode + " reason: " +
				oParseError.reason +  " src: " + oParseError.srcText + " line: " +  oParseError.line +  " linepos: " + oParseError.linepos +  " filepos: " + oParseError.filepos);
		this.fireParseError({url : oParseError.url, errorCode : oParseError.errorCode,
			reason : oParseError.reason, srcText : oParseError.srcText, line : oParseError.line, linepos : oParseError.linepos,
			filepos : oParseError.filepos});
	}
	this.setData(oXMLDocument);
};

/**
 * Serializes the current XML data of the model into a string. 
 *
 * @return the XML document serialized as string 
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.getXML = function(){
	return jQuery.sap.serializeXML(this.oData);
};

/**
 * Returns the current XML document of the model. 
 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
 *
 * @return the XML document
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.getData = function(){
	return this.oData;
};

/**
 * Sets the provided XML encoded data object to the model
 *
 * @param {object} oData the data to set to the model
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setData = function(oData){
	this.oData = oData;
	this.checkUpdate();
};

/**
 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 *
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * @param {boolean} [bAsync=true] if the request should be asynchron or not. Default is true.
 * @param {string} [sType=GET] of request. Default is 'GET'
 *
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.loadData = function(sURL, oParameters, bAsync, sType){
	var that = this;
	if (bAsync !== false) {
		bAsync = true;
	}
	if (!sType)	{
		sType = "GET";
	}
	this.fireRequestSent({url : sURL, type : sType, async : bAsync, info : "cache=false"});
	jQuery.ajax({
	  url: sURL,
	  async: bAsync,
	  dataType: 'xml',
	  data: oParameters,
	  type: sType,
	  success: function(oData) {
		if (!oData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + sURL);
		}
		that.setData(oData);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, info : "cache=false"});
	  },
	  error: function(XMLHttpRequest, textStatus, errorThrown){
		jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status + "," + XMLHttpRequest.statusText);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, info : "cache=false"});
		that.fireRequestFailed({message : textStatus,
			statusCode : XMLHttpRequest.status, statusText : XMLHttpRequest.statusText, responseText : XMLHttpRequest.responseText});
	  }
	});
};

/**
 * Sets an XML namespace to use in the binding path
 *
 * @param {string} sNameSpace the namespace URI
 * @param {string} [sPrefix=null] the prefix for the namespace (optional)
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setNameSpace = function(sNameSpace, sPrefix){
	if (!sPrefix) {
		sPrefix = "";
	}
	if (!this.oNameSpaces) {
		this.oNameSpaces = {};
	}
	this.oNameSpaces[sPrefix] = sNameSpace;
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 * @param {object} oUpdateInfo
 * @param {string} oUpdateInfo.path
 */
sap.ui.model.xml.XMLModel.prototype.checkUpdate = function() {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		oBinding.checkUpdate();
	});
};


/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.xml.XMLModel.prototype.bindProperty = function(sPath, oContext) {
	var oBinding = new sap.ui.model.xml.XMLPropertyBinding(this, sPath, oContext);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 */
sap.ui.model.xml.XMLModel.prototype.bindList = function(sPath, oContext, oSorter, aFilters) {
	var oBinding = new sap.ui.model.xml.XMLListBinding(this, sPath, oContext, oSorter, aFilters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindTree
 */
sap.ui.model.xml.XMLModel.prototype.bindTree = function(sPath, oContext) {
	var oBinding = new sap.ui.model.xml.XMLTreeBinding(this, sPath, oContext);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.createBindingContext
 */
sap.ui.model.xml.XMLModel.prototype.createBindingContext = function(sPath, oContext, fCallBack) {
	if (!oContext){
		oContext = "";
	}
	if (!jQuery.sap.startsWith(sPath,"/")) {
		sPath = oContext + "/" + sPath;
	}
	fCallBack(sPath);
};

/**
 * @see sap.ui.model.Model.prototype.destroyBindingContext
 */
sap.ui.model.xml.XMLModel.prototype.destroyBindingContext = function(oContext) {
	// TODO: what todo here?
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model. 
 * If the model value changed all interested parties are informed.
 *
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public 
 */
sap.ui.model.xml.XMLModel.prototype.setProperty = function(sPath, oValue, oContext) {
	var sObjectPath = sPath.substring(0, sPath.lastIndexOf("/")),
		sProperty = sPath.substr(sPath.lastIndexOf("/")+1);
	var oObject;
	if (sProperty.indexOf("@") == 0) {
		oObject = this._getObject(sObjectPath, oContext);
		oObject[0].setAttribute(sProperty.substr(1), oValue);
	} else {
		oObject = this._getObject(sPath, oContext);
		jQuery(oObject[0]).text(oValue);
	}
	this.checkUpdate();
};

/**
* Returns the value for the property with the given <code>sPropertyName</code>
*
* @param {string} sPath the path to the property
* @param {object} [oContext=null] the context which will be used to retrieve the property
* @type any
* @return the value of the property
* @public
*/
sap.ui.model.xml.XMLModel.prototype.getProperty = function(sPath, oContext) {
	var oResult = this._getObject(sPath, oContext);
	if (oResult && typeof oResult != "string") {
		oResult = jQuery(oResult[0]).text(); // TODO is this right? shouldn't we return the object?!
	}
	return oResult;
};

/**
 * @param sPath
 * @param oContext
 * @returns the node of the specified path/context
 */
sap.ui.model.xml.XMLModel.prototype._getObject = function (sPath, oContext) {
	var oRootNode = this.oData.documentElement;
	if (!oRootNode) {
		return null;
	}
	var oNode = [oRootNode];
	if (oContext){
		if (typeof oContext == "string"){
			oNode = this._getObject(oContext);
			if (!oNode || oNode.length == 0 || !oNode[0]) {
				return null;
			}
		} else {
			oNode = oContext;
		}
	}
	if (!sPath) {
		return oNode; 
	}
	var aParts = sPath.split("/"),
		sPart,
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = oRootNode;
		iIndex++;
	}
	if (!oContext || typeof oContext != "string"){
		oNode = oNode.length != undefined ? oNode[0] : oNode;
		oNode = oNode ? [oNode] : null;
	}
	while(oNode && oNode.length > 0 && aParts[iIndex]) {
		sPart = aParts[iIndex];
		if (sPart.indexOf("@") == 0) {
			oNode = this._getAttribute(oNode[0], sPart.substr(1));
		} else if (sPart == "text()") {
			oNode = jQuery(oNode[0]).text();
		} else if (isNaN(sPart)) {
			oNode = this._getChildElementsByTagName(oNode[0], sPart);
		} else {
			oNode = [ oNode[sPart] ];
		}
		iIndex++;
	}
	return oNode;
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getAttribute = function (oNode, sName) {
	if (!this.oNameSpaces || sName.indexOf(":") == -1) {
		return oNode.getAttribute(sName);
	}
	var sNameSpace = this._getNameSpace(sName),
		sLocalName = this._getLocalName(sName);
	if (oNode.getAttributeNS) {
		return oNode.getAttributeNS(sNameSpace, sLocalName);
	}
	else { // IE8
		if (!this.oDocNSPrefixes) {
			this.oDocNSPrefixes = this._getDocNSPrefixes();
		}
		var sPrefix = this.oDocNSPrefixes[sNameSpace];
		sName = (sPrefix ? sPrefix + ":" : "") + sLocalName;
		return oNode.getAttribute(sName);
	}
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getChildElementsByTagName = function (oNode, sName) {
	var aChildNodes = oNode.childNodes,
		aResult = [];
	
	if (this.oNameSpaces) {
		var sNameSpace = this._getNameSpace(sName),
			sLocalName = this._getLocalName(sName),
			sChildLocalName;
		jQuery.each(aChildNodes, function(i, oChild){
			sChildLocalName =  oChild.localName || oChild.baseName;
			if (oChild.nodeType == 1 && sChildLocalName == sLocalName && oChild.namespaceURI == sNameSpace) {
				aResult.push(oChild);
			}
		});
	} else {
		jQuery.each(aChildNodes, function(i, oChild){
			if (oChild.nodeType == 1 && oChild.nodeName == sName) {
				aResult.push(oChild);
			}
		});		
	}

	return aResult;
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getNameSpace = function (sName) {
	var iColonPos = sName.indexOf(":"),
		sPrefix = "";
	if (iColonPos > 0){
		sPrefix = sName.substr(0, iColonPos);
	}
	return this.oNameSpaces[sPrefix];
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getLocalName = function (sName) {
	var iColonPos = sName.indexOf(":"),
		sLocalName = sName;
	if (iColonPos > 0){
		sLocalName = sName.substr(iColonPos + 1);
	}
	return sLocalName;
};


/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getDocNSPrefixes = function () {
	var oPrefixes = {},
		oDocumentElement = this.oData && this.oData.documentElement;
	if (!oDocumentElement) {
		return oPrefixes;
	}
	var aAttributes = oDocumentElement.attributes;
	jQuery.each(aAttributes, function(i, oAttribute) {
		var name = oAttribute.name,
			value = oAttribute.value;
		if (name == "xmlns") {
			oPrefixes[value] = "";
		}
		else if (name.indexOf("xmlns") == 0) {
			oPrefixes[value] = name.substr(6);
		}
	});
	return oPrefixes;
};
}; // end of sap.ui.model.xml.XMLModel
if ( !jQuery.sap.isDeclared('sap.ui.model.SelectionModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides class sap.ui.model.SelectionModel
jQuery.sap.declare("sap.ui.model.SelectionModel");




/**
 * Constructs an instance of a sap.ui.model.SelectionModel.
 *
 * @class sap.ui.model.SelectionModel
 * @extends sap.ui.base.Object
 *
 * @author SAP AG
 * @version 1.2.0
 *
 * @param iSelectionMode {int} <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
 * @param iMinIndex {int} minimum possible index of the selection  
 * @param iMaxIndex {int} maximum possible index of the selection  
 *
 * @constructor
 * @public
 */
sap.ui.model.SelectionModel = function(iSelectionMode) {
	sap.ui.base.EventProvider.apply(this);
	
	this.iSelectionMode = iSelectionMode || sap.ui.model.SelectionModel.SINGLE_SELECTION;
	
	this.aSelectedIndices = [];
	this.iLeadIndex = -1;
	
};
sap.ui.model.SelectionModel.prototype = jQuery.sap.newObject(sap.ui.base.EventProvider.prototype);

sap.ui.base.Object.defineClass("sap.ui.model.SelectionModel", {
	baseType : "sap.ui.base.EventProvider"
});

sap.ui.model.SelectionModel.M_EVENTS = {
	/**
	 * SelectionChanged Event
	 */
	SelectionChanged : "selectionChanged"
};


/**
 * SelectionMode: Single Selection
 */
sap.ui.model.SelectionModel.SINGLE_SELECTION = 0;

/**
 * SelectionMode: Multi Selection
 */
sap.ui.model.SelectionModel.MULTI_SELECTION = 1;


/**
 * Returns the current selection mode.
 * @return the current selection mode
 */
sap.ui.model.SelectionModel.prototype.getSelectionMode = function() {
	return this.iSelectionMode;
};

/**
 * Sets the selection mode. The following list describes the accepted
 * selection modes:
 * <ul>
 * <li>{@code sap.ui.model.SelectionModel.SINGLE_SELECTION} -
 *   Only one list index can be selected at a time. In this mode,
 *   {@code setSelectionInterval} and {@code addSelectionInterval} are
 *   equivalent, both replacing the current selection with the index
 *   represented by the second argument (the "lead").
 * <li>{@code sap.ui.model.SelectionModel.MULTI_SELECTION} -
 *   In this mode, there's no restriction on what can be selected.
 * </ul>
 * 
 * @param iSelectionMode {int} selection mode
 */
sap.ui.model.SelectionModel.prototype.setSelectionMode = function(iSelectionMode) {
	this.iSelectionMode = iSelectionMode || sap.ui.model.SelectionModel.SINGLE_SELECTION;
};

/**
 * Returns true if the specified index is selected.
 * @return {boolean} true if the specified index is selected.
 */
sap.ui.model.SelectionModel.prototype.isSelectedIndex = function(iIndex) {
	return jQuery.inArray(iIndex, this.aSelectedIndices) !== -1;
};

/**
 * Return the second index argument from the most recent call to 
 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
 * @return {int} lead selected index
 */
sap.ui.model.SelectionModel.prototype.getLeadSelectedIndex = function() {
	return this.iLeadIndex;
};

/**
 * Set the lead selection index. 
 * @param iLeadIndex {int} sets the lead selected index
 */
sap.ui.model.SelectionModel.prototype.setLeadSelectedIndex = function(iLeadIndex) {
	this.iLeadIndex = iLeadIndex;
	this.fireSelectionChanged();
};


/**
 * Returns the first selected index or -1 if the selection is empty.
 * @return {int} first selected index or -1
 */
sap.ui.model.SelectionModel.prototype.getMinSelectionIndex = function() {
	if (this.aSelectedIndices.length > 0) {
		var aIndices = this.aSelectedIndices.sort(function(a, b) { return a - b; });
		return aIndices[0];
	} else {
		return -1;
	}
};

/**
 * Returns the last selected index or -1 if the selection is empty.
 * @return {int} last selected index or -1
 */
sap.ui.model.SelectionModel.prototype.getMaxSelectionIndex = function() {
	if (this.aSelectedIndices.length > 0) {
		var aIndices = this.aSelectedIndices.sort(function(a, b) { return b - a; });
		return aIndices[0];
	} else {
		return -1;
	}
};


/**
 * Returns the selected indices as array
 * @return array of selected indices
 */
sap.ui.model.SelectionModel.prototype.getSelectedIndices = function() {
	var aIndices = this.aSelectedIndices.sort(function(a, b) { return a - b; });
	return aIndices;
};


/** 
 * Changes the selection to be between {@code iFromIndex} and {@code iToIndex}
 * inclusive. {@code iFromIndex} doesn't have to be less than or equal to
 * {@code index1}.
 * <p>
 * In {@code SINGLE_SELECTION} selection mode, only the second index
 * is used.
 * <p>
 * If this represents a change to the current selection, then each
 * {@code ListSelectionListener} is notified of the change.
 * 
 * @param iFromIndex {int} one end of the interval.
 * @param iToIndex {int} other end of the interval
 */
sap.ui.model.SelectionModel.prototype.setSelectionInterval = function(iFromIndex, iToIndex) {
	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		this.aSelectedIndices = [];
		this.addSelectionInterval(iToIndex, iToIndex);
	} else {
		this.aSelectedIndices = [];
		this.addSelectionInterval(iFromIndex, iToIndex);
	}
};

/** 
 * Changes the selection to be the set union of the current selection
 * and the indices between {@code iFromIndex} and {@code iToIndex} inclusive.
 * {@code iFromIndex} doesn't have to be less than or equal to {@code iToIndex}.
 * <p>
 * In {@code SINGLE_SELECTION} selection mode, this is equivalent
 * to calling {@code setSelectionInterval}, and only the second index
 * is used. 
 * <p>
 * 
 * @param iFromIndex {int} one end of the interval.
 * @param iToIndex {int} other end of the interval
 */
sap.ui.model.SelectionModel.prototype.addSelectionInterval = function(iFromIndex, iToIndex) {
	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		iFromIndex = iToIndex;
	}
	var iFrom = Math.min(iFromIndex, iToIndex);
	var iTo = Math.max(iFromIndex, iToIndex);
	for (var iIndex = iFrom; iIndex <= iTo; iIndex++) {
		if (jQuery.inArray(iIndex, this.aSelectedIndices) === -1) {
			this.aSelectedIndices.push(iIndex);
		}
	}
	this.iLeadIndex = iTo;
	this.fireSelectionChanged();
};

/** 
 * Changes the selection to be the set difference of the current selection
 * and the indices between {@code iFromIndex} and {@code iToIndex} inclusive.
 * {@code iFromIndex} doesn't have to be less than or equal to {@code iToIndex}.
 * 
 * @param iFromIndex {int} one end of the interval.
 * @param iToIndex {int} other end of the interval
 */
sap.ui.model.SelectionModel.prototype.removeSelectionInterval = function(iFromIndex, iToIndex) {
	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		iFromIndex = iToIndex;
	}
	var iFrom = Math.min(iFromIndex, iToIndex);
	var iTo = Math.max(iFromIndex, iToIndex);
	for (var iIndex = iFrom; iIndex <= iTo; iIndex++) {
		var iIndexToRemove = jQuery.inArray(iIndex, this.aSelectedIndices);
		if (iIndexToRemove > -1) {
			this.aSelectedIndices.splice(iIndexToRemove, 1);
		}
		if (iIndex === this.iLeadIndex) {
			this.iLeadIndex = -1;
		}
	}
	this.fireSelectionChanged();
};


/**
 * Change the selection to the empty set.
 */
sap.ui.model.SelectionModel.prototype.clearSelection = function() {
	this.aSelectedIndices = [];
	this.iLeadIndex = -1;
	this.fireSelectionChanged();
};


/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.attachSelectionChanged = function(oData, fnFunction, oListener) {
	this.attachEvent("selectionChanged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.detachSelectionChanged = function(fnFunction, oListener) {
	this.detachEvent("selectionChanged", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'selectionChanged' to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.SelectionModel.prototype.fireSelectionChanged = function(mArguments) {
	this.fireEvent("selectionChanged", mArguments);
	return this;
};
}; // end of sap.ui.model.SelectionModel
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Boolean') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Boolean");



/**
 * Constructor for a Boolean type.
 * 
 * @class
 * 
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.type.Boolean = function () {
	sap.ui.model.SimpleType.apply(this, arguments);
	this.sName = "Boolean";
};

// chain the prototypes
sap.ui.model.type.Boolean.prototype = jQuery.sap.newObject(sap.ui.model.SimpleType.prototype);

/*
 * Describe the sap.ui.model.type.Boolean. 
 * Resulting metadata can be obtained via sap.ui.model.type.Boolean.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.type.Boolean", {

  // ---- object ----
  baseType : "sap.ui.model.SimpleType",
  publicMethods : [
    // methods
  ]

});	

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Boolean.prototype.formatValue = function(bValue, sInternalType) {
	switch(sInternalType) {
		case "boolean":
			return bValue;
		case "string":
			return bValue.toString();
		case "int": // TODO return 1 for true?!
		case "float":
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Boolean to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Boolean.prototype.parseValue = function(oValue, sInternalType) {
	var sResult;
	switch(sInternalType) {
		case "boolean":
			return oValue;
		case "string":
			if (oValue.toLowerCase() == "true" || oValue == "X"){
				return true;
			}
			if (oValue.toLowerCase() == "false" || oValue == ""){
				return false;
			}
			throw new sap.ui.model.ParseException("Don't know how to parse Boolean from " + sInternalType);
		case "int": // TODO return 1 for true?!	
		case "float":
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Boolean from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Boolean.prototype.validateValue = function(sValue) {

};


}; // end of sap.ui.model.type.Boolean
if ( !jQuery.sap.isDeclared('sap.ui.model.type.String') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.String");



/**
 * Constructor for a String type.
 * 
 * @class
 * 
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.type.String = function () {
	sap.ui.model.SimpleType.apply(this, arguments);
	this.sName = "String";
};

// chain the prototypes
sap.ui.model.type.String.prototype = jQuery.sap.newObject(sap.ui.model.SimpleType.prototype);

/*
 * Describe the sap.ui.model.type.String. 
 * Resulting metadata can be obtained via sap.ui.model.type.String.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.type.String", {

  // ---- object ----
  baseType : "sap.ui.model.SimpleType",
  publicMethods : [
    // methods
  ]

});	

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.String.prototype.formatValue = function(sValue, sInternalType) {
	switch(sInternalType) {
		case "string":
			return sValue;
		case "int":
			var iResult = parseInt(sValue, 10);
			if (isNaN(iResult)) {
				throw new sap.ui.model.FormatException(sValue + " is not a valid int value");
			}
			return iResult;
		case "float":
			var fResult = parseFloat(sValue);
			if (isNaN(fResult)) {
				throw new sap.ui.model.FormatException(sValue + " is not a valid float value");
			}
			return fResult;
		case "boolean":
			if (sValue.toLowerCase() == "true" || sValue == "X") {
				return true;				
			}
			if (sValue.toLowerCase() == "false" || sValue == "") {
				return false;				
			}
			throw new sap.ui.model.FormatException(sValue + " is not a valid boolean value");
		default:
			throw new sap.ui.model.FormatException("Don't know how to format String to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.String.prototype.parseValue = function(oValue, sInternalType) {
	var sResult;
	switch(sInternalType) {
		case "string":
			return oValue;
		case "boolean":
		case "int":
		case "float":
			return oValue.toString();
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse String from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.String.prototype.validateValue = function(sValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "maxLength":  // expects int
					if (sValue.length > oContent) {
						aViolatedConstraints.push("maxLength");
					}
					break;
				case "minLength":  // expects int
					if (sValue.length < oContent) {
						aViolatedConstraints.push("minLength");
					}
					break;
				case "startsWith":  // expects string
					if (!jQuery.sap.startsWith(sValue,oContent)) {
						aViolatedConstraints.push("startsWith");
					}
					break;
				case "startsWithIgnoreCase":  // expects string
					if (!jQuery.sap.startsWithIgnoreCase(sValue,oContent)) {
						aViolatedConstraints.push("startsWithIgnoreCase");
					}
					break;
				case "endsWith":  // expects string
					if (!jQuery.sap.endsWith(sValue,oContent)) {
						aViolatedConstraints.push("endsWith");
					}
					break;
				case "endsWithIgnoreCase": // expects string
					if (!jQuery.sap.endsWithIgnoreCase(sValue,oContent)) {
						aViolatedConstraints.push("endsWithIgnoreCase");
					}
					break;
				case "contains": // expects string
					if (sValue.indexOf(oContent) == -1) {
						aViolatedConstraints.push("contains");
					}
					break;
				case "equals": // expects string
					if (sValue != oContent) {
						aViolatedConstraints.push("equals");
					}
					break;
				case "search": // expects regex
					if (sValue.search(oContent) == -1) {
						aViolatedConstraints.push("search");
					}
					break;
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};


}; // end of sap.ui.model.type.String
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Date') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Date");



/**
 * Constructor for a Date type.
 * This Date type is based on the JavaScript internal Date object, so the date value in the 
 * data model must be of type Date. 
 * 
 * @class
 * 
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.type.Date = function () {
	sap.ui.model.SimpleType.apply(this, arguments);
	this.oFormat = sap.ui.core.format.DateFormat.getInstance(this.oFormatOptions);
	this.sName = "Date";
};

// chain the prototypes
sap.ui.model.type.Date.prototype = jQuery.sap.newObject(sap.ui.model.SimpleType.prototype);

/*
 * Describe the sap.ui.model.type.Date. 
 * Resulting metadata can be obtained via sap.ui.model.type.Date.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.type.Date", {

  // ---- object ----
  baseType : "sap.ui.model.SimpleType",
  publicMethods : [
    // methods
  ]

});	

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Date.prototype.formatValue = function(oValue, sInternalType) {
	if (!(oValue instanceof Date)) {
		return "";
	}
	switch(sInternalType) {
		case "string":
			return this.oFormat.format(oValue);
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Date to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Date.prototype.parseValue = function(oValue, sInternalType) {
	var iResult;
	switch(sInternalType) {
		case "string":
			iResult = this.oFormat.parse(oValue);
			if (isNaN(iResult.getYear())) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Date value");
			}
			return iResult;
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Date from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Date.prototype.validateValue = function(iValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "minimum":
					if (iValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (iValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Date.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this.oFormat = sap.ui.core.format.DateFormat.getInstance(this.oFormatOptions);
};


}; // end of sap.ui.model.type.Date
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Integer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Integer");



/**
 * Constructor for a Integer type.
 * 
 * @class
 * 
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.type.Integer = function () {
	sap.ui.model.SimpleType.apply(this, arguments);
	this.oFormat = sap.ui.core.format.NumberFormat.getIntegerInstance(this.oFormatOptions);
	this.sName = "Integer";
};

// chain the prototypes
sap.ui.model.type.Integer.prototype = jQuery.sap.newObject(sap.ui.model.SimpleType.prototype);

/*
 * Describe the sap.ui.model.type.Integer. 
 * Resulting metadata can be obtained via sap.ui.model.type.Integer.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.type.Integer", {

  // ---- object ----
  baseType : "sap.ui.model.SimpleType",
  publicMethods : [
    // methods
  ]

});	

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Integer.prototype.formatValue = function(iValue, sInternalType) {
	switch(sInternalType) {
		case "string":
			return this.oFormat.format(iValue);
		case "int":
		case "float":
			return iValue;
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Integer to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Integer.prototype.parseValue = function(oValue, sInternalType) {
	var iResult;
	switch(sInternalType) {
		case "string":
			iResult = this.oFormat.parse(oValue);
			if (isNaN(iResult)) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Integer value");
			}
			return iResult;
		case "int":
			return oValue;
		case "float":
			return Math.floor(oValue);
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Integer from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Integer.prototype.validateValue = function(iValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "minimum":
					if (iValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (iValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Integer.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this.oFormat = sap.ui.core.format.NumberFormat.getIntegerInstance(this.oFormatOptions);
};


}; // end of sap.ui.model.type.Integer
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Float') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Float");



/**
 * Constructor for a Float type.
 * 
 * @class
 * 
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG 
 * @version 1.2.0
 *
 * @constructor   
 * @public
 */
sap.ui.model.type.Float = function () {
	sap.ui.model.SimpleType.apply(this, arguments);
	this.oFormat = sap.ui.core.format.NumberFormat.getFloatInstance(this.oFormatOptions);
	this.sName = "Float";
};

// chain the prototypes
sap.ui.model.type.Float.prototype = jQuery.sap.newObject(sap.ui.model.SimpleType.prototype);

/*
 * Describe the sap.ui.model.type.Float. 
 * Resulting metadata can be obtained via sap.ui.model.type.Float.getMetadata();
 */ 
sap.ui.base.Object.defineClass("sap.ui.model.type.Float", {

  // ---- object ----
  baseType : "sap.ui.model.SimpleType",
  publicMethods : [
    // methods
  ]

});	

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Float.prototype.formatValue = function(fValue, sInternalType) {
	switch(sInternalType) {
		case "string":
			return this.oFormat.format(fValue);
		case "int":
			return Math.floor(fValue);
		case "float":
			return fValue;
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Float to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Float.prototype.parseValue = function(oValue, sInternalType) {
	var iResult;
	switch(sInternalType) {
		case "string":
			iResult = this.oFormat.parse(oValue);
			if (isNaN(iResult)) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Float value");
			}
			return iResult;
		case "int":
		case "float":
			return oValue;
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Float from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Float.prototype.validateValue = function(iValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "minimum":
					if (iValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (iValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Float.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this.oFormat = sap.ui.core.format.NumberFormat.getFloatInstance(this.oFormatOptions);
};


}; // end of sap.ui.model.type.Float
if ( !jQuery.sap.isDeclared('js.testfwk') ) {
/*!
 * SAP UI HTML5 Rendering Library ('SAPUI5')
 *
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides helper functions for the testsuite
jQuery.sap.declare("js.testfwk", false);

function setCookie(name,value,days) {
	if (days) {
		var date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires = "; expires="+date.toGMTString();
	}
	else {
		var expires = "";
	}
	document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) {
		var c = ca[i];
		while (c.charAt(0)==' ') {
			c = c.substring(1,c.length);
		}
		if (c.indexOf(nameEQ) == 0) {
			return c.substring(nameEQ.length,c.length);
		}
	}
	return null;
}

function eraseCookie(name) {
	setCookie(name,"",-1);
}

if ( !window.sap ) {
	sap = {};
}
if ( !sap.ui ) {
	sap.ui = {};
}
if ( !sap.ui.testfwk ) {
	sap.ui.testfwk = {};
}

sap.ui.testfwk.TestFWK = {
	sLanguage : navigator.language || navigator.userLanguage,
	sTheme : "sap_platinum",
	bRTL : false,
	bAccessibilityMode: true,
	bDuplicateIdMode: false,
	sJQueryVersion: "1.4.4"
};

sap.ui.testfwk.TestFWK.LANGUAGES = {
	"en_US" : "English (US)",
	"de" : "Deutsch"
};

sap.ui.testfwk.TestFWK.THEMES = {
	"base" : "Base",
	"sap_platinum" : "Platinum",
	"sap_goldreflection" : "Gold Reflection",
	"sap_hcb" : "High Contrast Black",
	"sap_ux" : "Ux Target Design",
	"edding" : "Edding (EXPERIMENTAL!)",
	"sap_welter" : "Welter (only for Mobile)"
};

sap.ui.testfwk.TestFWK.JQUERY_VERSIONS = {
	"1.4.4" : "jQuery 1.4.4",
	"1.5.2" : "jQuery 1.5.2",
	"1.6.2" : "jQuery 1.6.2"
};

sap.ui.testfwk.TestFWK.init = function(oContentWindow) {
	this.oContentWindow = oContentWindow;
	this.updateContent();
};

sap.ui.testfwk.TestFWK.getContentURL = function() {
	return this.sContentURL;
};

sap.ui.testfwk.TestFWK.setContentURL = function(sURL, bUseReplace) {
	this.sContentURL = sURL;
	this.updateContent(bUseReplace);
};

sap.ui.testfwk.TestFWK.updateContent = function(bUseReplace) {
	if ( !this.oContentWindow || !this.sContentURL ) {
		return;
	}
	this.fireContentWillChange();
	var sURL = this.addSettingsToURL(this.sContentURL);
	if(bUseReplace){
		this.oContentWindow.document.location.replace(sURL);
	}else{
		this.oContentWindow.document.location.href = sURL;
	}
};

sap.ui.testfwk.TestFWK.getLanguage = function() {
	return this.sLanguage;
};

sap.ui.testfwk.TestFWK.setLanguage = function(sLanguage) {
	if ( this.sLanguage !== sLanguage ) {
		this.sLanguage = sLanguage;
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.getTheme = function() {
	return this.sTheme;
};

sap.ui.testfwk.TestFWK.setTheme = function(sTheme) {
	if ( this.sTheme !== sTheme ) {
		this.sTheme = sTheme;
		if ( this.oContentWindow
			 && this.oContentWindow.sap
			 && this.oContentWindow.sap.ui
			 && this.oContentWindow.sap.ui.getCore ) {
			this.oContentWindow.sap.ui.getCore().applyTheme(sTheme);
			return;
		}
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.getRTL = function() {
	return this.bRTL;
};

sap.ui.testfwk.TestFWK.setRTL = function(bRTL) {
	if ( this.bRTL !== bRTL ) {
		this.bRTL = bRTL;
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.getAccessibilityMode = function() {
	return this.bAccessibilityMode;
};

sap.ui.testfwk.TestFWK.setAccessibilityMode = function(bAccessibilityMode) {
	if ( this.bAccessibilityMode !== bAccessibilityMode ) {
		this.bAccessibilityMode = bAccessibilityMode;
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.getDuplicateIdMode = function() {
	return this.bDuplicateIdMode;
};

sap.ui.testfwk.TestFWK.setDuplicateIdMode = function(bDuplicateIdMode) {
	if ( this.bDuplicateIdMode !== bDuplicateIdMode ) {
		this.bDuplicateIdMode = bDuplicateIdMode;
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.getJQueryVersion = function() {
	return this.sJQueryVersion;
};

sap.ui.testfwk.TestFWK.setJQueryVersion = function(sJQueryVersion) {
	if ( this.sJQueryVersion !== sJQueryVersion ) {
		this.sJQueryVersion = sJQueryVersion;
		this.applySettings();
	}
};

sap.ui.testfwk.TestFWK.applySettings = function() {
	this.fireSettingsChanged();
	this.updateContent();
};

sap.ui.testfwk.TestFWK.addSettingsToURL = function(sURL) {

	// hash rewriting currently doesn't work with webkit browsers and framesets
	if ( !jQuery.browser.webkit ) {
		top.window.location.hash = sURL.replace(/\?/g, "_");
	}

	function add(sParam, vValue) {
		if (sURL.indexOf("?")!=-1) {
			sURL += "&";
		} else {
			sURL += "?";
		}
		sURL += sParam + "=" + vValue;
	}

	add("sap-ui-debug", true);
	if ( this.sLanguage ) {
		add("sap-ui-language", this.sLanguage);
	}
	if ( this.sTheme ) {
		add("sap-ui-theme", this.sTheme);
	}
	if ( this.bRTL ) {
		add("sap-ui-rtl", this.bRTL);
	}
	if ( this.bDuplicateIdMode ) {
		add("sap-ui-noDuplicateIds", this.bDuplicateIdMode);
	}
	add("sap-ui-accessibility", this.bAccessibilityMode);
	if ( this.sJQueryVersion ) {
		add("sap-ui-jqueryversion", this.sJQueryVersion);
	}

	return sURL;
};

sap.ui.testfwk.TestFWK.onContentLoad = function() {
//	this.injectDebug();
};

//// if not present, adds the debug.js script to the content page and initializes the debug mode in core
//sap.ui.testfwk.TestFWK.injectDebug = function() {
//
//	if ( !this.oContentWindow )
//		return;
//
//	var oContentWindow = this.oContentWindow;
//
//	// the following check relies on the fact that injectDebug() is called earliest in the onload event handler
//	var bDebugExists = oContentWindow.sap && oContentWindow.sap.ui && oContentWindow.sap.ui.debug && oContentWindow.sap.ui.debug.DebugEnv;
//	/* alternatively, the following code could be used
//	var allScripts = contentDocument.getElementsByTagName("script");
//	var bDebugExists = false;
//	for (var i = 0; i < allScripts.length; i++) {
//		var oneScript = allScripts[i];
//		if (oneScript.getAttribute("src") && (oneScript.getAttribute("src").indexOf("/debug.js") > -1)) {
//			bDebugExists = true;
//			break;
//		}
//	}*/
//
//	if (!bDebugExists && oContentWindow.document &&
//			oContentWindow.jQuery && oContentWindow.jQuery.sap &&
//			oContentWindow.jQuery.sap.getModulePath ) {
//		var scriptTag = oContentWindow.document.createElement("script");
//		scriptTag.setAttribute("type", "text/javascript");
//		var sDebugJsUrl = oContentWindow.jQuery.sap.getModulePath("", "/") + "sap-ui-debug.js";//normalizeResourceUrl(contentDocument.location.href, "sap.ui.core/js/debug.js");
//		scriptTag.setAttribute("src", sDebugJsUrl);
//		oContentWindow.document.getElementsByTagName("head")[0].appendChild(scriptTag);
//	}
//};


// ----

sap.ui.testfwk.TestFWK.mSettingsListeners = [];

sap.ui.testfwk.TestFWK.attachSettingsChanged = function(fnCallback) {
	this.mSettingsListeners.push(fnCallback);
};

sap.ui.testfwk.TestFWK.detachSettingsChanged = function(fnCallback) {
	for(var i=0; i<this.mSettingsListeners.length; ) {
		if ( this.mSettingsListeners[i] === fnCallback ) {
			this.mSettingsListeners.splice(i,1);
		} else {
			i++;
		};
	}
};

sap.ui.testfwk.TestFWK.fireSettingsChanged = function() {
	for(var i=0; i<this.mSettingsListeners.length; i++) {
		this.mSettingsListeners[i]();
	}
};

// ----

sap.ui.testfwk.TestFWK.mContentListeners = [];

sap.ui.testfwk.TestFWK.attachContentWillChange = function(fnCallback) {
	this.mContentListeners.push(fnCallback);
};

sap.ui.testfwk.TestFWK.detachContentWillChange = function(fnCallback) {
	for(var i=0; i<this.mContentListeners.length; ) {
		if ( this.mContentListeners[i] === fnCallback ) {
			this.mContentListeners.splice(i,1);
		} else {
			i++;
		};
	}};

sap.ui.testfwk.TestFWK.fireContentWillChange = function() {
	for(var i=0; i<this.mContentListeners.length; i++) {
		try {
			this.mContentListeners[i](this.getContentURL());
		} catch (ex) {
			// somehow the settings registers twice
			// to prevent errors we catch them!
		}
	}
};

/*
 * layout
 * libraries=[...]
 * customTests=[string,...]
 * customThemes[string,...]
 * selectedTheme:string
 * trace toolbar expanded
 * trace selected tab
 * traceFilter
 * traceLevel
 * selected test case
 */
}; // end of js.testfwk
if ( !jQuery.sap.isDeclared('sap.ui.legacy.SampleLoader') ) {
/*!
 * @copyright@
 */

// Provides a loader that transforms UnifiedRendering(UR)/Lightspeed(LS) sample files to HTML pages
jQuery.sap.declare("sap.ui.legacy.SampleLoader");

sap.ui.legacy.SampleLoader = function() {
};

sap.ui.legacy.SampleLoader.load = function(sUrl, oUiArea) {
	this.iControlIndex = 0;
	this.sRootControlId = "";

	// TODO check whether 'xml' could be used
	var oResponse = jQuery.sap.syncGetText(sUrl);
	if (oResponse.success && oResponse.data) {

		var oXML = sap.ui.util.Script.parseXMLDocument(oResponse.data);

		var oStringBuilder = new sap.ui.util.StringBuilder();
		var oNodes = oXML.getElementsByTagName("page")[0].childNodes;
		// find the first element with a method attribute = setContent

		for (var i=0;i<oNodes.length;i++) {
			var oNode = oNodes[i];
			if ((oNode.nodeType == 1) && oNode.getAttribute("method") == "setContent") {
				oStringBuilder.append("var controls = [];\n");
				this.buildObjectTree(oNode, "", oStringBuilder);
				oStringBuilder.append("oUiArea.setRootControl(controls['"+this.sRootControlId+"'])");
				var sControlTree = oStringBuilder.toString();
				oUiArea.getRootNode().innerHTML = "";
				this.sRootControlId = null;
				eval(sControlTree);
				break;
			}
		}
	} else {
		alert("File Not found or no valid XML returned.")
	}
};

/*
 *
 */
sap.ui.legacy.SampleLoader.buildObjectTree = function(oXMLNode, sParent, oStringBuilder, oParentMetadata)
{
	var Strings = sap.ui.util.Strings;

	var sControl = oXMLNode.tagName;
	if (!sControl) {
		return;
	} //TODO: is this correct?

	sControl = Strings.charToUpperCase(sControl, 0);

	// get the controls metadata..
	var xControlClass = sap.ui.legacy[sControl];
	if ( !xControlClass ) {
		return;
	}
	new xControlClass();
	var xControlClass = sap.ui.legacy[sControl];
	var oMetadata = xControlClass.getMetadata();

	oStringBuilder.append("\n");
	var sId = oXMLNode.getAttribute("id");
	if (!sId) {
		sId = "i" + (this.iControlIndex++);
	}
	if (!this.sRootControlId) {
		this.sRootControlId = sId;
	}
	oStringBuilder.append("controls[\"" + sId + "\"] = new sap.ui.legacy." + sControl + "(\"" + sId + "\");");

	for ( var i = 0; i < oXMLNode.attributes.length; i++) {
		var sAttributeName = oXMLNode.attributes[i].nodeName;
		var sAttributeValue = oXMLNode.attributes[i].nodeValue;
		if (sAttributeName == "id") {
			continue;
		}
		if (sAttributeName.indexOf("Info") > -1) {
			continue;
		}
		if (sAttributeName == "method") {
			if (sParent) {
				var sAddAggregationMember = sAttributeValue,
					sMethod = sAddAggregationMember.substr(0,2),
					sAggregationName = sAddAggregationMember.substr(3),
					sSingularName = sAggregationName,
					bIsPluralName = Strings.endsWith(sAggregationName, "s");

				if (bIsPluralName) {
					if ( Strings.endsWith(sAggregationName, "ies") ) {
						sSingularName = sAggregationName.substr(0, sAggregationName.length - 3) + "y";
					} else {
						sSingularName = sAggregationName.substr(0, sAggregationName.length - 1);
					}
				}

				if (sMethod == "add" || bIsPluralName) {
					sMethod = "add";
				} else {
					sMethod = "set";
				}

				// Fix for inconsistent lsx files
				if (sAggregationName == "Control" && !this.getTypeFromMetadata(oParentMetadata, "Control")) {
					sAggregationName = "Content";
					sSingularName = sAggregationName;
				}
				else if (sAggregationName == "Content" && !this.getTypeFromMetadata(oParentMetadata, "Content")) {
					sAggregationName = "Control";
					sSingularName = sAggregationName;
				}

				if (this.getTypeFromMetadata(oParentMetadata, sAggregationName)) {
					oStringBuilder.append(sParent + "." + sMethod + sSingularName + "(controls[\"" + sId + "\"]);");
				}
			}
			continue;
		}
		sAttributeName = sAttributeName.substr(0,1).toUpperCase() + sAttributeName.substr(1);
		var sType = this.getTypeFromMetadata(oMetadata, sAttributeName);
		if (sType == "int" || sType == "boolean" || sType == "float") {
			oStringBuilder.append("controls[\"" + sId + "\"].set" + sAttributeName + "(" + sAttributeValue + ");");
		} else if (sType){
			oStringBuilder.append("controls[\"" + sId + "\"].set" + sAttributeName + "(\"" + sAttributeValue + "\");");
		}
	}

	var mEvents = oMetadata.getEvents();
	for (var n in mEvents) {
		var method = "attach" + Strings.charToUpperCase(n, 0);
		oStringBuilder.append("controls[\"" + sId + "\"]." + method + "(function(oEvent) {jQuery.sap.log.info(\"Legacy Control fired \" + oEvent.sId + \" on \" + oEvent.target.id + \" instance of \" + jQuery(oEvent.target).control()[0].getMetadata().getName(),\"\",\"sap.ui.core.Core\");});");
	}

	var sParentId = sId;
	for ( var i = 0; i < oXMLNode.childNodes.length; i++) {
		this.buildObjectTree(oXMLNode.childNodes[i], "controls[\"" + sParentId+ "\"]", oStringBuilder, oMetadata);
	}
};

/**
 *
 */
sap.ui.legacy.SampleLoader.getTypeFromMetadata = function(oMetadata, sMemberName)
{
	var mCandidates = oMetadata.getAllProperties();
	for (n in mCandidates) {
		var oCandidate = mCandidates[n];
		if ( oCandidate.name == sMemberName ) {
			return oCandidate.type;
		}
	}
	var mCandidates = oMetadata.getAllAggregations();
	for (n in mCandidates) {
		var oCandidate = mCandidates[n];
		if ( oCandidate.name == sMemberName ) {
			return oCandidate.type;
		}
	}
	var mCandidates = oMetadata.getAllAssociations();
	for (n in mCandidates) {
		var oCandidate = mCandidates[n];
		if ( oCandidate.name == sMemberName ) {
			return oCandidate.type;
		}
	}
	return undefined;
};
}; // end of sap.ui.legacy.SampleLoader
if ( !jQuery.sap.isDeclared('jquery-mobile-custom') ) {
  jQuery.sap.declare('jquery-mobile-custom');
/*
* jQuery Mobile Framework 1.0
* http://jquerymobile.com
*
* Copyright 2011 (c) jQuery Project
* Dual licensed under the MIT or GPL Version 2 licenses.
* http://jquery.org/license
*
*/

jQuery.mobile = {};

/*
* jquery.mobile.media.js
*/

/*
* a workaround for window.matchMedia
*/

(function( $, undefined ) {

var $window = $( window ),
	$html = $( "html" );

/* $.mobile.media method: pass a CSS media type or query and get a bool return
	note: this feature relies on actual media query support for media queries, though types will work most anywhere
	examples:
		$.mobile.media('screen') //>> tests for screen media type
		$.mobile.media('screen and (min-width: 480px)') //>> tests for screen media type with window width > 480px
		$.mobile.media('@media screen and (-webkit-min-device-pixel-ratio: 2)') //>> tests for webkit 2x pixel ratio (iPhone 4)
*/
$.mobile.media = (function() {
	// TODO: use window.matchMedia once at least one UA implements it
	var cache = {},
		testDiv = $( "<div id='jquery-mediatest'>" ),
		fakeBody = $( "<body>" ).append( testDiv );

	return function( query ) {
		if ( !( query in cache ) ) {
			var styleBlock = document.createElement( "style" ),
				cssrule = "@media " + query + " { #jquery-mediatest { position:absolute; } }";

			//must set type for IE!
			styleBlock.type = "text/css";

			if ( styleBlock.styleSheet  ){
				styleBlock.styleSheet.cssText = cssrule;
			} else {
				styleBlock.appendChild( document.createTextNode(cssrule) );
			}

			$html.prepend( fakeBody ).prepend( styleBlock );
			cache[ query ] = testDiv.css( "position" ) === "absolute";
			fakeBody.add( styleBlock ).remove();
		}
		return cache[ query ];
	};
})();

})(jQuery);


/*
* jquery.mobile.support.js
*/

/*
* support tests
*/

(function( $, undefined ) {

var fakeBody = $( "<body>" ).prependTo( "html" ),
	fbCSS = fakeBody[ 0 ].style,
	vendors = [ "Webkit", "Moz", "O" ],
	webos = "palmGetResource" in window, //only used to rule out scrollTop
	operamini = window.operamini && ({}).toString.call( window.operamini ) === "[object OperaMini]",
	bb = window.blackberry; //only used to rule out box shadow, as it's filled opaque on BB

// thx Modernizr
function propExists( prop ) {
	var uc_prop = prop.charAt( 0 ).toUpperCase() + prop.substr( 1 ),
		props = ( prop + " " + vendors.join( uc_prop + " " ) + uc_prop ).split( " " );

	for ( var v in props ){
		if ( fbCSS[ props[ v ] ] !== undefined ) {
			return true;
		}
	}
}

// Test for dynamic-updating base tag support ( allows us to avoid href,src attr rewriting )
function baseTagTest() {
	var fauxBase = location.protocol + "//" + location.host + location.pathname + "ui-dir/",
		base = $( "head base" ),
		fauxEle = null,
		href = "",
		link, rebase;

	if ( !base.length ) {
		base = fauxEle = $( "<base>", { "href": fauxBase }).appendTo( "head" );
	} else {
		href = base.attr( "href" );
	}

	link = $( "<a href='testurl' />" ).prependTo( fakeBody );
	rebase = link[ 0 ].href;
	base[ 0 ].href = href || location.pathname;

	if ( fauxEle ) {
		fauxEle.remove();
	}
	return rebase.indexOf( fauxBase ) === 0;
}


// non-UA-based IE version check by James Padolsey, modified by jdalton - from http://gist.github.com/527683
// allows for inclusion of IE 6+, including Windows Mobile 7
$.mobile.browser = {};
$.mobile.browser.ie = (function() {
	var v = 3,
	div = document.createElement( "div" ),
	a = div.all || [];

	while ( div.innerHTML = "<!--[if gt IE " + ( ++v ) + "]><br><![endif]-->", a[ 0 ] );

	return v > 4 ? v : !v;
})();


$.extend( $.support, {
	orientation: "orientation" in window && "onorientationchange" in window,
	touch: "ontouchend" in document,
	cssTransitions: "WebKitTransitionEvent" in window,
	pushState: "pushState" in history && "replaceState" in history,
	mediaquery: $.mobile.media( "only all" ),
	cssPseudoElement: !!propExists( "content" ),
	touchOverflow: !!propExists( "overflowScrolling" ),
	boxShadow: !!propExists( "boxShadow" ) && !bb,
	scrollTop: ( "pageXOffset" in window || "scrollTop" in document.documentElement || "scrollTop" in fakeBody[ 0 ] ) && !webos && !operamini,
	dynamicBaseTag: baseTagTest()
});

fakeBody.remove();


// $.mobile.ajaxBlacklist is used to override ajaxEnabled on platforms that have known conflicts with hash history updates (BB5, Symbian)
// or that generally work better browsing in regular http for full page refreshes (Opera Mini)
// Note: This detection below is used as a last resort.
// We recommend only using these detection methods when all other more reliable/forward-looking approaches are not possible
var nokiaLTE7_3 = (function(){

	var ua = window.navigator.userAgent;

	//The following is an attempt to match Nokia browsers that are running Symbian/s60, with webkit, version 7.3 or older
	return ua.indexOf( "Nokia" ) > -1 &&
			( ua.indexOf( "Symbian/3" ) > -1 || ua.indexOf( "Series60/5" ) > -1 ) &&
			ua.indexOf( "AppleWebKit" ) > -1 &&
			ua.match( /(BrowserNG|NokiaBrowser)\/7\.[0-3]/ );
})();

$.mobile.ajaxBlacklist =
			// BlackBerry browsers, pre-webkit
			window.blackberry && !window.WebKitPoint ||
			// Opera Mini
			operamini ||
			// Symbian webkits pre 7.3
			nokiaLTE7_3;

// Lastly, this workaround is the only way we've found so far to get pre 7.3 Symbian webkit devices
// to render the stylesheets when they're referenced before this script, as we'd recommend doing.
// This simply reappends the CSS in place, which for some reason makes it apply
if ( nokiaLTE7_3 ) {
	$(function() {
		$( "head link[rel='stylesheet']" ).attr( "rel", "alternate stylesheet" ).attr( "rel", "stylesheet" );
	});
}

// For ruling out shadows via css
if ( !$.support.boxShadow ) {
	$( "html" ).addClass( "ui-mobile-nosupport-boxshadow" );
}

})( jQuery );


/*
* jquery.mobile.vmouse.js
*/

/*
* "mouse" plugin
*/

// This plugin is an experiment for abstracting away the touch and mouse
// events so that developers don't have to worry about which method of input
// the device their document is loaded on supports.
//
// The idea here is to allow the developer to register listeners for the
// basic mouse events, such as mousedown, mousemove, mouseup, and click,
// and the plugin will take care of registering the correct listeners
// behind the scenes to invoke the listener at the fastest possible time
// for that device, while still retaining the order of event firing in
// the traditional mouse environment, should multiple handlers be registered
// on the same element for different events.
//
// The current version exposes the following virtual events to jQuery bind methods:
// "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel"

(function( $, window, document, undefined ) {

var dataPropertyName = "virtualMouseBindings",
	touchTargetPropertyName = "virtualTouchID",
	virtualEventNames = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split( " " ),
	touchEventProps = "clientX clientY pageX pageY screenX screenY".split( " " ),
	activeDocHandlers = {},
	resetTimerID = 0,
	startX = 0,
	startY = 0,
	didScroll = false,
	clickBlockList = [],
	blockMouseTriggers = false,
	blockTouchTriggers = false,
	eventCaptureSupported = "addEventListener" in document,
	$document = $( document ),
	nextTouchID = 1,
	lastTouchID = 0;

$.vmouse = {
	moveDistanceThreshold: 10,
	clickDistanceThreshold: 10,
	resetTimerDuration: 1500
};

function getNativeEvent( event ) {

	while ( event && typeof event.originalEvent !== "undefined" ) {
		event = event.originalEvent;
	}
	return event;
}

function createVirtualEvent( event, eventType ) {

	var t = event.type,
		oe, props, ne, prop, ct, touch, i, j;

	event = $.Event(event);
	event.type = eventType;

	oe = event.originalEvent;
	props = $.event.props;

	// copy original event properties over to the new event
	// this would happen if we could call $.event.fix instead of $.Event
	// but we don't have a way to force an event to be fixed multiple times
	if ( oe ) {
		for ( i = props.length, prop; i; ) {
			prop = props[ --i ];
			event[ prop ] = oe[ prop ];
		}
	}

	// make sure that if the mouse and click virtual events are generated
	// without a .which one is defined
	if ( t.search(/mouse(down|up)|click/) > -1 && !event.which ){
		event.which = 1;
	}

	if ( t.search(/^touch/) !== -1 ) {
		ne = getNativeEvent( oe );
		t = ne.touches;
		ct = ne.changedTouches;
		touch = ( t && t.length ) ? t[0] : ( (ct && ct.length) ? ct[ 0 ] : undefined );

		if ( touch ) {
			for ( j = 0, len = touchEventProps.length; j < len; j++){
				prop = touchEventProps[ j ];
				event[ prop ] = touch[ prop ];
			}
		}
	}

	return event;
}

function getVirtualBindingFlags( element ) {

	var flags = {},
		b, k;

	while ( element ) {

		b = $.data( element, dataPropertyName );

		for (  k in b ) {
			if ( b[ k ] ) {
				flags[ k ] = flags.hasVirtualBinding = true;
			}
		}
		element = element.parentNode;
	}
	return flags;
}

function getClosestElementWithVirtualBinding( element, eventType ) {
	var b;
	while ( element ) {

		b = $.data( element, dataPropertyName );

		if ( b && ( !eventType || b[ eventType ] ) ) {
			return element;
		}
		element = element.parentNode;
	}
	return null;
}

function enableTouchBindings() {
	blockTouchTriggers = false;
}

function disableTouchBindings() {
	blockTouchTriggers = true;
}

function enableMouseBindings() {
	lastTouchID = 0;
	clickBlockList.length = 0;
	blockMouseTriggers = false;

	// When mouse bindings are enabled, our
	// touch bindings are disabled.
	disableTouchBindings();
}

function disableMouseBindings() {
	// When mouse bindings are disabled, our
	// touch bindings are enabled.
	enableTouchBindings();
}

function startResetTimer() {
	clearResetTimer();
	resetTimerID = setTimeout(function(){
		resetTimerID = 0;
		enableMouseBindings();
	}, $.vmouse.resetTimerDuration );
}

function clearResetTimer() {
	if ( resetTimerID ){
		clearTimeout( resetTimerID );
		resetTimerID = 0;
	}
}

function triggerVirtualEvent( eventType, event, flags ) {
	var ve;

	if ( ( flags && flags[ eventType ] ) ||
				( !flags && getClosestElementWithVirtualBinding( event.target, eventType ) ) ) {

		ve = createVirtualEvent( event, eventType );

		$( event.target).trigger( ve );
	}

	return ve;
}

function mouseEventCallback( event ) {
	var touchID = $.data(event.target, touchTargetPropertyName);

	if ( !blockMouseTriggers && ( !lastTouchID || lastTouchID !== touchID ) ){
		var ve = triggerVirtualEvent( "v" + event.type, event );
		if ( ve ) {
			if ( ve.isDefaultPrevented() ) {
				event.preventDefault();
			}
			if ( ve.isPropagationStopped() ) {
				event.stopPropagation();
			}
			if ( ve.isImmediatePropagationStopped() ) {
				event.stopImmediatePropagation();
			}
		}
	}
}

function handleTouchStart( event ) {

	var touches = getNativeEvent( event ).touches,
		target, flags;

	if ( touches && touches.length === 1 ) {

		target = event.target;
		flags = getVirtualBindingFlags( target );

		if ( flags.hasVirtualBinding ) {

			lastTouchID = nextTouchID++;
			$.data( target, touchTargetPropertyName, lastTouchID );

			clearResetTimer();

			disableMouseBindings();
			didScroll = false;

			var t = getNativeEvent( event ).touches[ 0 ];
			startX = t.pageX;
			startY = t.pageY;

			triggerVirtualEvent( "vmouseover", event, flags );
			triggerVirtualEvent( "vmousedown", event, flags );
		}
	}
}

function handleScroll( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	if ( !didScroll ) {
		triggerVirtualEvent( "vmousecancel", event, getVirtualBindingFlags( event.target ) );
	}

	didScroll = true;
	startResetTimer();
}

function handleTouchMove( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	var t = getNativeEvent( event ).touches[ 0 ],
		didCancel = didScroll,
		moveThreshold = $.vmouse.moveDistanceThreshold;
		didScroll = didScroll ||
			( Math.abs(t.pageX - startX) > moveThreshold ||
				Math.abs(t.pageY - startY) > moveThreshold ),
		flags = getVirtualBindingFlags( event.target );

	if ( didScroll && !didCancel ) {
		triggerVirtualEvent( "vmousecancel", event, flags );
	}

	triggerVirtualEvent( "vmousemove", event, flags );
	startResetTimer();
}

function handleTouchEnd( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	disableTouchBindings();

	var flags = getVirtualBindingFlags( event.target ),
		t;
	triggerVirtualEvent( "vmouseup", event, flags );

	if ( !didScroll ) {
		var ve = triggerVirtualEvent( "vclick", event, flags );
		if ( ve && ve.isDefaultPrevented() ) {
			// The target of the mouse events that follow the touchend
			// event don't necessarily match the target used during the
			// touch. This means we need to rely on coordinates for blocking
			// any click that is generated.
			t = getNativeEvent( event ).changedTouches[ 0 ];
			clickBlockList.push({
				touchID: lastTouchID,
				x: t.clientX,
				y: t.clientY
			});

			// Prevent any mouse events that follow from triggering
			// virtual event notifications.
			blockMouseTriggers = true;
		}
	}
	triggerVirtualEvent( "vmouseout", event, flags);
	didScroll = false;

	startResetTimer();
}

function hasVirtualBindings( ele ) {
	var bindings = $.data( ele, dataPropertyName ),
		k;

	if ( bindings ) {
		for ( k in bindings ) {
			if ( bindings[ k ] ) {
				return true;
			}
		}
	}
	return false;
}

function dummyMouseHandler(){}

function getSpecialEventObject( eventType ) {
	var realType = eventType.substr( 1 );

	return {
		setup: function( data, namespace ) {
			// If this is the first virtual mouse binding for this element,
			// add a bindings object to its data.

			if ( !hasVirtualBindings( this ) ) {
				$.data( this, dataPropertyName, {});
			}

			// If setup is called, we know it is the first binding for this
			// eventType, so initialize the count for the eventType to zero.
			var bindings = $.data( this, dataPropertyName );
			bindings[ eventType ] = true;

			// If this is the first virtual mouse event for this type,
			// register a global handler on the document.

			activeDocHandlers[ eventType ] = ( activeDocHandlers[ eventType ] || 0 ) + 1;

			if ( activeDocHandlers[ eventType ] === 1 ) {
				$document.bind( realType, mouseEventCallback );
			}

			// Some browsers, like Opera Mini, won't dispatch mouse/click events
			// for elements unless they actually have handlers registered on them.
			// To get around this, we register dummy handlers on the elements.

			$( this ).bind( realType, dummyMouseHandler );

			// For now, if event capture is not supported, we rely on mouse handlers.
			if ( eventCaptureSupported ) {
				// If this is the first virtual mouse binding for the document,
				// register our touchstart handler on the document.

				activeDocHandlers[ "touchstart" ] = ( activeDocHandlers[ "touchstart" ] || 0) + 1;

				if (activeDocHandlers[ "touchstart" ] === 1) {
					$document.bind( "touchstart", handleTouchStart )
						.bind( "touchend", handleTouchEnd )

						// On touch platforms, touching the screen and then dragging your finger
						// causes the window content to scroll after some distance threshold is
						// exceeded. On these platforms, a scroll prevents a click event from being
						// dispatched, and on some platforms, even the touchend is suppressed. To
						// mimic the suppression of the click event, we need to watch for a scroll
						// event. Unfortunately, some platforms like iOS don't dispatch scroll
						// events until *AFTER* the user lifts their finger (touchend). This means
						// we need to watch both scroll and touchmove events to figure out whether
						// or not a scroll happenens before the touchend event is fired.

						.bind( "touchmove", handleTouchMove )
						.bind( "scroll", handleScroll );
				}
			}
		},

		teardown: function( data, namespace ) {
			// If this is the last virtual binding for this eventType,
			// remove its global handler from the document.

			--activeDocHandlers[ eventType ];

			if ( !activeDocHandlers[ eventType ] ) {
				$document.unbind( realType, mouseEventCallback );
			}

			if ( eventCaptureSupported ) {
				// If this is the last virtual mouse binding in existence,
				// remove our document touchstart listener.

				--activeDocHandlers[ "touchstart" ];

				if ( !activeDocHandlers[ "touchstart" ] ) {
					$document.unbind( "touchstart", handleTouchStart )
						.unbind( "touchmove", handleTouchMove )
						.unbind( "touchend", handleTouchEnd )
						.unbind( "scroll", handleScroll );
				}
			}

			var $this = $( this ),
				bindings = $.data( this, dataPropertyName );

			// teardown may be called when an element was
			// removed from the DOM. If this is the case,
			// jQuery core may have already stripped the element
			// of any data bindings so we need to check it before
			// using it.
			if ( bindings ) {
				bindings[ eventType ] = false;
			}

			// Unregister the dummy event handler.

			$this.unbind( realType, dummyMouseHandler );

			// If this is the last virtual mouse binding on the
			// element, remove the binding data from the element.

			if ( !hasVirtualBindings( this ) ) {
				$this.removeData( dataPropertyName );
			}
		}
	};
}

// Expose our custom events to the jQuery bind/unbind mechanism.

for ( var i = 0; i < virtualEventNames.length; i++ ){
	$.event.special[ virtualEventNames[ i ] ] = getSpecialEventObject( virtualEventNames[ i ] );
}

// Add a capture click handler to block clicks.
// Note that we require event capture support for this so if the device
// doesn't support it, we punt for now and rely solely on mouse events.
if ( eventCaptureSupported ) {
	document.addEventListener( "click", function( e ){
		var cnt = clickBlockList.length,
			target = e.target,
			x, y, ele, i, o, touchID;

		if ( cnt ) {
			x = e.clientX;
			y = e.clientY;
			threshold = $.vmouse.clickDistanceThreshold;

			// The idea here is to run through the clickBlockList to see if
			// the current click event is in the proximity of one of our
			// vclick events that had preventDefault() called on it. If we find
			// one, then we block the click.
			//
			// Why do we have to rely on proximity?
			//
			// Because the target of the touch event that triggered the vclick
			// can be different from the target of the click event synthesized
			// by the browser. The target of a mouse/click event that is syntehsized
			// from a touch event seems to be implementation specific. For example,
			// some browsers will fire mouse/click events for a link that is near
			// a touch event, even though the target of the touchstart/touchend event
			// says the user touched outside the link. Also, it seems that with most
			// browsers, the target of the mouse/click event is not calculated until the
			// time it is dispatched, so if you replace an element that you touched
			// with another element, the target of the mouse/click will be the new
			// element underneath that point.
			//
			// Aside from proximity, we also check to see if the target and any
			// of its ancestors were the ones that blocked a click. This is necessary
			// because of the strange mouse/click target calculation done in the
			// Android 2.1 browser, where if you click on an element, and there is a
			// mouse/click handler on one of its ancestors, the target will be the
			// innermost child of the touched element, even if that child is no where
			// near the point of touch.

			ele = target;

			while ( ele ) {
				for ( i = 0; i < cnt; i++ ) {
					o = clickBlockList[ i ];
					touchID = 0;

					if ( ( ele === target && Math.abs( o.x - x ) < threshold && Math.abs( o.y - y ) < threshold ) ||
								$.data( ele, touchTargetPropertyName ) === o.touchID ) {
						// XXX: We may want to consider removing matches from the block list
						//      instead of waiting for the reset timer to fire.
						e.preventDefault();
						e.stopPropagation();
						return;
					}
				}
				ele = ele.parentNode;
			}
		}
	}, true);
}
})( jQuery, window, document );


/*
* jquery.mobile.event.js
*/

/* 
* "events" plugin - Handles events
*/

(function( $, window, undefined ) {

// add new event shortcuts
$.each( ( "touchstart touchmove touchend orientationchange throttledresize " +
					"tap taphold swipe swipeleft swiperight scrollstart scrollstop" ).split( " " ), function( i, name ) {

	$.fn[ name ] = function( fn ) {
		return fn ? this.bind( name, fn ) : this.trigger( name );
	};

	$.attrFn[ name ] = true;
});

var supportTouch = $.support.touch,
	scrollEvent = "touchmove scroll",
	touchStartEvent = supportTouch ? "touchstart" : "mousedown",
	touchStopEvent = supportTouch ? "touchend" : "mouseup",
	touchMoveEvent = supportTouch ? "touchmove" : "mousemove";

function triggerCustomEvent( obj, eventType, event ) {
	var originalType = event.type;
	event.type = eventType;
	$.event.handle.call( obj, event );
	event.type = originalType;
}

// also handles scrollstop
$.event.special.scrollstart = {

	enabled: true,

	setup: function() {

		var thisObject = this,
			$this = $( thisObject ),
			scrolling,
			timer;

		function trigger( event, state ) {
			scrolling = state;
			triggerCustomEvent( thisObject, scrolling ? "scrollstart" : "scrollstop", event );
		}

		// iPhone triggers scroll after a small delay; use touchmove instead
		$this.bind( scrollEvent, function( event ) {

			if ( !$.event.special.scrollstart.enabled ) {
				return;
			}

			if ( !scrolling ) {
				trigger( event, true );
			}

			clearTimeout( timer );
			timer = setTimeout(function() {
				trigger( event, false );
			}, 50 );
		});
	}
};

// also handles taphold
$.event.special.tap = {
	setup: function() {
		var thisObject = this,
			$this = $( thisObject );

		$this.bind( "vmousedown", function( event ) {

			if ( event.which && event.which !== 1 ) {
				return false;
			}

			var origTarget = event.target,
				origEvent = event.originalEvent,
				timer;

			function clearTapTimer() {
				clearTimeout( timer );
			}

			function clearTapHandlers() {
				clearTapTimer();

				$this.unbind( "vclick", clickHandler )
					.unbind( "vmouseup", clearTapTimer )
					.unbind( "vmousecancel", clearTapHandlers );
			}

			function clickHandler(event) {
				clearTapHandlers();

				// ONLY trigger a 'tap' event if the start target is
				// the same as the stop target.
				if ( origTarget == event.target ) {
					triggerCustomEvent( thisObject, "tap", event );
				}
			}

			$this.bind( "vmousecancel", clearTapHandlers )
				.bind( "vmouseup", clearTapTimer )
				.bind( "vclick", clickHandler );

			timer = setTimeout(function() {
					triggerCustomEvent( thisObject, "taphold", $.Event( "taphold" ) );
			}, 750 );
		});
	}
};

// also handles swipeleft, swiperight
$.event.special.swipe = {
	scrollSupressionThreshold: 10, // More than this horizontal displacement, and we will suppress scrolling.

	durationThreshold: 1000, // More time than this, and it isn't a swipe.

	horizontalDistanceThreshold: 30,  // Swipe horizontal displacement must be more than this.

	verticalDistanceThreshold: 75,  // Swipe vertical displacement must be less than this.

	setup: function() {
		var thisObject = this,
			$this = $( thisObject );

		$this.bind( touchStartEvent, function( event ) {
			var data = event.originalEvent.touches ?
								event.originalEvent.touches[ 0 ] : event,
				start = {
					time: ( new Date() ).getTime(),
					coords: [ data.pageX, data.pageY ],
					origin: $( event.target )
				},
				stop;

			function moveHandler( event ) {

				if ( !start ) {
					return;
				}

				var data = event.originalEvent.touches ?
						event.originalEvent.touches[ 0 ] : event;

				stop = {
					time: ( new Date() ).getTime(),
					coords: [ data.pageX, data.pageY ]
				};

				// prevent scrolling
				if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
					event.preventDefault();
				}
			}

			$this.bind( touchMoveEvent, moveHandler )
				.one( touchStopEvent, function( event ) {
					$this.unbind( touchMoveEvent, moveHandler );

					if ( start && stop ) {
						if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
								Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
								Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {

							start.origin.trigger( "swipe" )
								.trigger( start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight" );
						}
					}
					start = stop = undefined;
				});
		});
	}
};

(function( $, window ) {
	// "Cowboy" Ben Alman

	var win = $( window ),
		special_event,
		get_orientation,
		last_orientation;

	$.event.special.orientationchange = special_event = {
		setup: function() {
			// If the event is supported natively, return false so that jQuery
			// will bind to the event using DOM methods.
			if ( $.support.orientation && $.mobile.orientationChangeEnabled ) {
				return false;
			}

			// Get the current orientation to avoid initial double-triggering.
			last_orientation = get_orientation();

			// Because the orientationchange event doesn't exist, simulate the
			// event by testing window dimensions on resize.
			win.bind( "throttledresize", handler );
		},
		teardown: function(){
			// If the event is not supported natively, return false so that
			// jQuery will unbind the event using DOM methods.
			if ( $.support.orientation && $.mobile.orientationChangeEnabled ) {
				return false;
			}

			// Because the orientationchange event doesn't exist, unbind the
			// resize event handler.
			win.unbind( "throttledresize", handler );
		},
		add: function( handleObj ) {
			// Save a reference to the bound event handler.
			var old_handler = handleObj.handler;


			handleObj.handler = function( event ) {
				// Modify event object, adding the .orientation property.
				event.orientation = get_orientation();

				// Call the originally-bound event handler and return its result.
				return old_handler.apply( this, arguments );
			};
		}
	};

	// If the event is not supported natively, this handler will be bound to
	// the window resize event to simulate the orientationchange event.
	function handler() {
		// Get the current orientation.
		var orientation = get_orientation();

		if ( orientation !== last_orientation ) {
			// The orientation has changed, so trigger the orientationchange event.
			last_orientation = orientation;
			win.trigger( "orientationchange" );
		}
	}

	// Get the current page orientation. This method is exposed publicly, should it
	// be needed, as jQuery.event.special.orientationchange.orientation()
	$.event.special.orientationchange.orientation = get_orientation = function() {
		var isPortrait = true, elem = document.documentElement;

		// prefer window orientation to the calculation based on screensize as
		// the actual screen resize takes place before or after the orientation change event
		// has been fired depending on implementation (eg android 2.3 is before, iphone after).
		// More testing is required to determine if a more reliable method of determining the new screensize
		// is possible when orientationchange is fired. (eg, use media queries + element + opacity)
		if ( $.support.orientation ) {
			// if the window orientation registers as 0 or 180 degrees report
			// portrait, otherwise landscape
			isPortrait = window.orientation % 180 == 0;
		} else {
			isPortrait = elem && elem.clientWidth / elem.clientHeight < 1.1;
		}

		return isPortrait ? "portrait" : "landscape";
	};

})( jQuery, window );


// throttled resize event
(function() {

	$.event.special.throttledresize = {
		setup: function() {
			$( this ).bind( "resize", handler );
		},
		teardown: function(){
			$( this ).unbind( "resize", handler );
		}
	};

	var throttle = 250,
		handler = function() {
			curr = ( new Date() ).getTime();
			diff = curr - lastCall;

			if ( diff >= throttle ) {

				lastCall = curr;
				$( this ).trigger( "throttledresize" );

			} else {

				if ( heldCall ) {
					clearTimeout( heldCall );
				}

				// Promise a held call will still execute
				heldCall = setTimeout( handler, throttle - diff );
			}
		},
		lastCall = 0,
		heldCall,
		curr,
		diff;
})();


$.each({
	scrollstop: "scrollstart",
	taphold: "tap",
	swipeleft: "swipe",
	swiperight: "swipe"
}, function( event, sourceEvent ) {

	$.event.special[ event ] = {
		setup: function() {
			$( this ).bind( sourceEvent, $.noop );
		}
	};
});

})( jQuery, this );
}; // end of jquery-mobile-custom
if ( !jQuery.sap.isDeclared('jquery.sap.storage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/*
 * Provides methods to store and retrieve data based on Web Storage API.
 */
jQuery.sap.declare("jquery.sap.storage", false);

(function() {
	//ensure not to initialize twice
	if(jQuery.sap.storage) {
		return;
	}

	/**
	 * Check whether the current environment (either provided by browser or by some JS library) supports JSON.parse and JSON stringify.
	 * @private
	 */
	var bSupportJSON = !!(window.JSON && JSON.parse && JSON.stringify);
	/**
	 * Prefix added to all storage keys (typically IDs) passed by the applications
	 * when they are calling state storage methods. The goal of such prefix is to
	 * leave space for saving data (with the same key) also scenarios other than
	 * state saving.
	 * @private
	 */
	var sStateStorageKeyPrefix = "state.key_";

	/**
	 * @interface A Storage API for JavaScript.
	 *
	 * Provides methods to store data on the client using Web Storage API support by the browser. The data
	 * received by this API must be already serialized, in string format. Similarly, the API returns the retrieved
	 * data in serialized string format, so it is the responsibility of the caller to de-serialize it, if applicable.
	 *
	 * One can get access to the 'default' storage by using {@link jQuery.sap.storage} directly
	 * or alternatively via factory functionality available as <code>jQuery.sap.storage(jQuery.sap.storage.Type.session)</code>
	 * returning an object implementing this interface.
	 *
	 * A typical intended usage of this API is the storage of a string representing the state of a control.
	 * In such usage, the data is stored in the browser session, and
	 * the methods to be used are {@link #put} and {@link #get}.
	 * The method {@link #remove} can be used to delete the previously saved state.
	 *
	 * In sake of completeness, the method {@link #clear} is available.
	 * However, it should be called only in very particular situations,
	 * when a global erasing of data is required.
	 *
	 * @author SAP AG
	 * @version 1.2.0
	 * @since 0.11.0
	 * @public
	 * @name jQuery.sap.storage.Storage
	 */

	/**
	 * Constructor for an instance of jQuery.sap.storage.Storage
	 *
	 * @param {jQuery.sap.storage.Type || Storage} [pStorage=jQuery.sap.storage.Type.session] the type this storage should be of or an Object implementing the typical Storage API for direct usage.
	 * @param {String} [sStorageKeyPrefix=state.key_] the prefix to use in this storage.
	 *
	 * @private
	 */
	var fStorage = /** @lends jQuery.sap.storage.Storage */ function(pStorage, sStorageKeyPrefix){
		var sType = "unknown";
		var sPrefix = sStorageKeyPrefix || sStateStorageKeyPrefix;
		var oStorage;

		if(!oStorage || typeof(pStorage) === "string") {
			sType = pStorage || "session";
			oStorage = window[sType + "Storage"];
		} else if(typeof(pStorage) === Object) {
			sType = pStorage.getType ? pStorage.getType() : "unknown";
			oStorage = pStorage;
		}
		var bStorageAvailable = !!oStorage;

		/**
		 * Stores the passed state string in the session, under the key
		 * sStateStorageKeyPrefix + sId
		 *
		 * @param {String} sId Id for the state to store
		 * @param {String} sStateToStore content to store
		 * @return {boolean} true if the data were successfully stored, false otherwise
		 * @public
		 */
		this.put = function(sId, sStateToStore) {
			//precondition: non-empty sId and available storage feature
			if (bStorageAvailable && sId && sId.length>0) {
				try {
					oStorage.setItem(sPrefix+sId, bSupportJSON?JSON.stringify(sStateToStore):sStateToStore);
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Retrieves the state string stored in the session under the key
		 * sStateStorageKeyPrefix + sId
		 *
		 * @param {String} sId Id for the state to retrieve
		 * @return {String} the string from the storage, if the retrieval
		 * was successfull, and null otherwise
		 * @public
		 */
		this.get = function(sId) {
			//precondition: non-empty sId and available storage feature
			if (bStorageAvailable && sId && sId.length>0) {
				try {
					var sItem=oStorage.getItem(sPrefix+sId);
					return bSupportJSON?JSON.parse(sItem):sItem;
				} catch(e) {
					return null;
				}
			} else {
				return null;
			}
		};

		/**
		 * Deletes the state string stored in the session under the key
		 * sStateStorageKeyPrefix + sId
		 *
		 * @param {String} sId Id for the state to delete
		 * @return {boolean} true if the deletion
		 * was successfull or the data doesn't exist under the specified key,
		 * and false if the feature is unavailable or a problem occured
		 * @public
		 */
		this.remove = function(sId) {
			//precondition: non-empty sId and available storage feature
			if (bStorageAvailable && sId && sId.length>0) {
				try {
					oStorage.removeItem(sPrefix+sId);
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Deletes all the entries saved in the session.
		 * CAUTION: This method should be called only in very particular situations,
		 * when a global erasing of data is required. Given that the method deletes
		 * the data saved under any ID, it should not be called when managing data
		 * for specific controls.
		 *
		 * @return {boolean} true if execution of removal
		 * was successful or the data to remove doesn't exist,
		 * and false if the feature is unavailable or a problem occured
		 * @public
		 */
		this.clear = function() {
			//precondition: available storage feature
			if (bStorageAvailable) {
				try {
					oStorage.clear();
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Returns the type of the storage.
		 * @returns {jQuery.sap.storage.Type || String} the type of the storage or "unknown"
		 * @public
		 */
		this.getType = function(){
			return sType;
		};
	};


	/**
	 * A map holding instances of different 'standard' storages.
	 * Used to limit number of created storage objects.
	 * @private
	 */
	var mStorages = {};

	/**
	 * Returns an instance of jQuery.sap.storage.Storage providing access to the storage
	 * of the given {@link jQuery.sap.storage.Type} or the given oStorage object
	 * implementing the browser's Storage API.
	 * <i>Remark:</i> For convenience reasons, {@link #.storage} is not only a function but
	 * also provides access to the default storage (i.e. session).
	 * It can be used via {@link jQuery.sap.storage.put} etc.
	 *
	 * Whenever one is interested in storing data in another scope than provided by the session, one can simply use
	 * <code>jQuery.sap.storage(jQuery.sap.storage.Type.local).[put|get|remove|clear](...)</code>.
	 *
	 *
	 * @see jQuery.sap.storage.Storage more details.
	 *
	 * @param {jQuery.sap.storage.Type |
	 *            Storage} oStorage the type specifying the storage to use or an
	 *            object implementing the browser's Storage API.
	 * @returns {jQuery.sap.storage.Storage}
	 * @version 1.2.0
	 * @since 0.11.0
	 * @public
	 */
	jQuery.sap.storage = function(oStorage){
		// if nothing or the default was passed in, simply return ourself
		if(!oStorage) {
			oStorage = jQuery.sap.storage.Type.session;
		}

		if(typeof(oStorage) === "string" && jQuery.sap.storage.Type[oStorage]) {
			return mStorages[oStorage] || (mStorages[oStorage] = new fStorage(oStorage));
		}

		// OK, tough but probably good for issue identification. As something was passed in, let's at least ensure our used API is fulfilled.
		jQuery.sap.assert(oStorage instanceof Object && oStorage.clear && oStorage.setItem && oStorage.getItem && oStorage.removeItem, "storage: duck typing the storage");
		return new fStorage(oStorage);
	};

	/**
	 * jQuery.sap.storage provides a dualism for access to storage functionality in browsers.
	 *
	 * <ul>
	 * <li>On the one hand side, it offers access to the default storage (i.e. {@link jQuery.sap.storage.Type.session}) via e.g. {@link jQuery.sap.storage#get} and {@link jQuery.sap.storage#put}.</li>
	 * <li>On the other hand side, it offers means for creation of access means to other storage types via e.g. <code>jQuery.sap.storage(jQuery.sap.storage.Type.local)</code>
	 * returning an object implementing {@link jQuery.sap.storage.Storage}.</li>
	 * </ul>
	 * @see jQuery.sap#.storage for information on how to create storages different from the default one.
	 *
	 * @name jQuery.sap.storage
	 * @borrows jQuery.sap.storage.Storage.get as get
	 * @borrows jQuery.sap.storage.Storage.put as put
	 * @borrows jQuery.sap.storage.Storage.remove as remove
	 * @borrows jQuery.sap.storage.Storage.clear as clear
	 * @borrows jQuery.sap.storage.Storage.getType as getType
	 *
	 * @version 1.2.0
	 * @since 0.9.0
	 * @namespace
	 */

	/**
	 * Namespace holding constants for specification of different storages supported by {@link jQuery.sap.storage.Storage}
	 * @version 1.2.0
	 * @since 0.11.0
	 * @namespace
	 * @public
	 */
	jQuery.sap.storage.Type = {
			/**
			 * Indicates usage of the browser's localStorage feature
			 * @public
			 */
			local: "local",
			/**
			 * Indicates usage of the browser's sessionStorage feature
			 * @public
			 */
			session: "session",
			/**
			 * Indicates usage of the browser's globalStorage feature
			 * @public
			 */
			global: "global"
	};

	// ensure the storage constructor applied to our storage object
	fStorage.apply(jQuery.sap.storage);
	mStorages[jQuery.sap.storage.Type.session] = jQuery.sap.storage;

// end of anonymous function creating the storage instance and its methods
}());
}; // end of jquery.sap.storage
if ( !jQuery.sap.isDeclared('jquery.sap.logger') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/*
 * Abandoned, empty module (since 1.1.2). Functionality has been integrated into module 'jquery.sap.global'.
 */
jQuery.sap.declare("jquery.sap.logger", false);

}; // end of jquery.sap.logger

// as this module contains the Core, we ensure that the Core has been booted
sap.ui.getCore().boot && sap.ui.getCore().boot();

